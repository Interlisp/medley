(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)
(FILECREATED "21-Jun-99 20:00:42" {DSK}<project>medley3.5>library>TEDITWINDOW.;3 185046 

      changes to%:  (FNS \TEDIT.WINDOW.SETUP)

      previous date%: "25-Aug-94 10:56:22" {DSK}<project>medley3.5>library>TEDITWINDOW.;2)


(* ; "
Copyright (c) 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1993, 1994, 1999 by John Sybalsky & Xerox Corporation.  All rights reserved.
")

(PRETTYCOMPRINT TEDITWINDOWCOMS)

(RPAQQ TEDITWINDOWCOMS
       [(FILES TEDITDCL)
        (DECLARE%: EVAL@COMPILE DONTCOPY (CONSTANTS (\SCRATCHLEN 64))
               (FILES (LOADCOMP)
                      TEDITDCL))
        (FILES ATTACHEDWINDOW)
        (FNS TEDIT.CREATEW \TEDIT.CREATEW.FROM.REGION TEDIT.CURSORMOVEDFN TEDIT.CURSOROUTFN 
             TEDIT.WINDOW.SETUP TEDIT.MINIMAL.WINDOW.SETUP \TEDIT.ACTIVE.WINDOWP \TEDIT.BUTTONEVENTFN
             \TEDIT.WINDOW.OPS \TEDIT.EXPANDFN \TEDIT.MAINW \TEDIT.PRIMARYW \TEDIT.COPYINSERTFN 
             \TEDIT.NEWREGIONFN \TEDIT.SET.WINDOW.EXTENT \TEDIT.SHRINK.ICONCREATE \TEDIT.SHRINKFN 
             \TEDIT.SPLITW \TEDIT.UNSPLITW \TEDIT.WINDOW.SETUP \SAFE.FIRST)
        (CURSORS BXCARET BXHICARET TEDIT.LINECURSOR \TEDIT.SPLITCURSOR \TEDIT.MOVESPLITCURSOR 
               \TEDIT.UNSPLITCURSOR \TEDIT.MAKESPLITCURSOR)
        (INITVARS (TEDIT.DEFAULT.WINDOW NIL))
        (GLOBALVARS TEDIT.DEFAULT.WINDOW)
        (COMS                                                (* ; 
                                                 "User-level %"is this a TEdit window?%" function.")
              (FNS TEDITWINDOWP))
        (COMS                                                (* ; "User-typein support")
              (FNS TEDIT.GETINPUT \TEDIT.MAKEFILENAME))
        (COMS                                                (* ; "Attached Prompt window support.")
              (FNS TEDIT.PROMPTPRINT TEDIT.PROMPTFLASH \TEDIT.PROMPT.PAGEFULLFN)
              (INITVARS (TEDIT.PROMPT.FONT (FONTCREATE 'GACHA 10))
                     (TEDIT.PROMPTWINDOW.HEIGHT NIL))
              (GLOBALVARS TEDIT.PROMPT.FONT TEDIT.PROMPTWINDOW.HEIGHT))
        (COMS                                                (* ; "Title creation and update")
              (FNS TEXTSTREAM.TITLE \TEDIT.ORIGINAL.WINDOW.TITLE \TEDIT.WINDOW.TITLE 
                   \TEXTSTREAM.FILENAME))
        (COMS                                                (* ; "Screen updating utilities")
              (FNS TEDIT.DEACTIVATE.WINDOW \TEDIT.REPAINTFN \TEDIT.RESHAPEFN \TEDIT.SCROLLFN))
        (COMS                                                (* ; "Process-world interfaces")
              (FNS \TEDIT.PROCIDLEFN \TEDIT.PROCENTRYFN \TEDIT.PROCEXITFN))
        (COMS (INITVARS (\CARETRATE 333))
                                                             (* ; 
                                                           "Caret handler;  stolen from CHAT.")
              (FNS \EDIT.DOWNCARET \EDIT.FLIPCARET TEDIT.FLASHCARET \EDIT.UPCARET 
                   TEDIT.NORMALIZECARET \SETCARET \TEDIT.CARET))
        [COMS                                                (* ; "Menu interfacing")
              (FNS TEDIT.ADD.MENUITEM TEDIT.DEFAULT.MENUFN TEDIT.REMOVE.MENUITEM \TEDIT.CREATEMENU 
                   \TEDIT.MENU.WHENHELDFN \TEDIT.MENU.WHENSELECTEDFN)
              (GLOBALVARS TEDIT.DEFAULT.MENU)
              [DECLARE%: DONTEVAL@LOAD DOCOPY
                     (VARS (TEDIT.DEFAULT.MENU (\TEDIT.CREATEMENU '((Put 'Put NIL
                                                                         (SUBITEMS 
                                                                             |Put Formatted Document|
                                                                                Plain-Text Old-Format
                                                                                ))
                                                                    (Get 'Get NIL (SUBITEMS 
                                                                             |Get Formatted Document|
                                                                                         
                                                                                     Unformatted% Get
                                                                                         ))
                                                                    Include Find Looks Substitute 
                                                                    Quit
                                                                    (Expanded% Menu 'Expanded% Menu 
                                                                           NIL
                                                                           (SUBITEMS Expanded% Menu 
                                                                                  Character% Looks 
                                                                                Paragraph% Formatting
                                                                                  Page% Layout]
              (DECLARE%: DONTEVAL@LOAD DOCOPY (P [OR (SASSOC 'TEdit BackgroundMenuCommands)
                                                     (NCONC1 BackgroundMenuCommands
                                                            '(TEdit '(TEDIT)
                                                                    "Opens a TEdit window for use."]
                                                 (SETQ BackgroundMenu NIL]
        (COMS                                                (* ; "titled icon info")
              (FILES ICONW)
              (BITMAPS TEDITICON TEDITMASK)
              (INITVARS (TEDIT.ICON.FONT (FONTCREATE 'HELVETICA 8 'BOLD))
                     [TEDIT.ICON.TITLE.REGION (CONS 16 (CONS 4 (CONS 64 (CONS 77 NIL]
                                                             (* ; 
                        "Original was (create REGION BOTTOM _ 4 LEFT _ 16 WIDTH _ 64 HEIGHT _ 77).")
                                                             (* ; 
                                                  "Changed by yabu.fx, for SUNLOADUP without DWIM.")
                     [TEDIT.TITLED.ICON.TEMPLATE (CONS TEDITICON (CONS TEDITMASK (CONS 
                                                                              TEDIT.ICON.TITLE.REGION
                                                                                       NIL]
                                                             (* ; "Original was (create TITLEDICON ICON _ TEDITICON MASK _ TEDITMASK TITLEREG _ TEDIT.ICON.TITLE.REGION).")
                                                             (* ; 
                                                  "Changed by yabu.fx, for SUNLOADUP without DWIM.")
                     ])

(FILESLOAD TEDITDCL)
(DECLARE%: EVAL@COMPILE DONTCOPY 
(DECLARE%: EVAL@COMPILE 

(RPAQQ \SCRATCHLEN 64)


(CONSTANTS (\SCRATCHLEN 64))
)


(FILESLOAD (LOADCOMP)
       TEDITDCL)
)

(FILESLOAD ATTACHEDWINDOW)
(DEFINEQ

(TEDIT.CREATEW
  [LAMBDA (PROMPT FILE PROPS)                                (* jds "23-May-85 15:19")
    (CLRPROMPT)
    (printout PROMPTWINDOW PROMPT T)
    (PROG ((PROMPT (LISTGET PROPS 'PROMPTWINDOW))
           (PHEIGHT 0)
           PWINDOW REGION)
          [COND
             ((EQ PROMPT 'DON'T))
             (PROMPT)
             (T (SETQ PHEIGHT (HEIGHTIFWINDOW (ITIMES (OR (LISTGET PROPS 'PROMPTWINDOWHEIGHT)
                                                          TEDIT.PROMPTWINDOW.HEIGHT 1)
                                                     (FONTPROP TEDIT.PROMPT.FONT 'HEIGHT]
          (SETQ REGION (GETREGION 32 (IPLUS PHEIGHT 32)))
          (add (fetch HEIGHT of REGION)
               (IMINUS PHEIGHT))
          (SETQ TEDIT.DEFAULT.WINDOW (CREATEW REGION (\TEDIT.ORIGINAL.WINDOW.TITLE FILE)))
          (CLRPROMPT)
          (OR PROMPT (GETPROMPTWINDOW TEDIT.DEFAULT.WINDOW (OR (LISTGET PROPS 'PROMPTWINDOWHEIGHT)
                                                               TEDIT.PROMPTWINDOW.HEIGHT 1)
                            TEDIT.PROMPT.FONT)))
    TEDIT.DEFAULT.WINDOW])

(\TEDIT.CREATEW.FROM.REGION
  [LAMBDA (REGION FILE PROPS)                                (* gbn "15-Nov-84 18:04")
    (PROG ((PROMPT (LISTGET PROPS 'PROMPTWINDOW))
           (PHEIGHT 0)
           PWINDOW)
          [COND
             ((EQ PROMPT 'DON'T))
             (PROMPT)
             (T (SETQ PHEIGHT (HEIGHTIFWINDOW (ITIMES (OR (LISTGET PROPS 'PROMPTWINDOWHEIGHT)
                                                          TEDIT.PROMPTWINDOW.HEIGHT 1)
                                                     (FONTPROP TEDIT.PROMPT.FONT 'HEIGHT]
          (SETQ TEDIT.DEFAULT.WINDOW (CREATEW REGION (\TEDIT.ORIGINAL.WINDOW.TITLE FILE)))
          (WINDOWPROP TEDIT.DEFAULT.WINDOW 'TEDITCREATED T)
          (OR PROMPT (GETPROMPTWINDOW TEDIT.DEFAULT.WINDOW (OR (LISTGET PROPS 'PROMPTWINDOWHEIGHT)
                                                               TEDIT.PROMPTWINDOW.HEIGHT 1)
                            TEDIT.PROMPT.FONT)))
    TEDIT.DEFAULT.WINDOW])

(TEDIT.CURSORMOVEDFN
  [LAMBDA (W)                                            (* ; "Edited 30-May-91 23:39 by jds")

         (* Watch the mouse and change the cursor to reflect the region of the window 
       it's in (line select, window split eventually?))

    (PROG ((X (LASTMOUSEX W))
           (Y (LASTMOUSEY W))
           (TEXTOBJ (WINDOWPROP W 'TEXTOBJ))
           (CURSORREG (WINDOWPROP W 'TEDIT.CURSORREGION))
           LINE LEFT RIGHT)
          (COND
             ((INSIDE? CURSORREG X Y)                        (* Do nothing)
              NIL)
             (T (SETQ LINE (\TEDIT.FIND.OVERLAPPING.LINE (for LINES
                                                            inside (fetch (TEXTOBJ LINES)
                                                                          of TEXTOBJ)
                                                            as WINDOW
                                                            inside (fetch (TEXTOBJ \WINDOW)
                                                                          of TEXTOBJ)
                                                            when (EQ W WINDOW)
                                                            do (RETURN LINES))
                                  Y))
                [COND
                   (LINE (replace BOTTOM of CURSORREG with (fetch (LINEDESCRIPTOR
                                                                                   YBOT) of
                                                                                         LINE))
                         (replace HEIGHT of CURSORREG with (fetch (LINEDESCRIPTOR
                                                                                   LHEIGHT)
                                                                          of LINE]
                (SELECTQ (fetch (TEXTOBJ MOUSEREGION) of TEXTOBJ)
                    (TEXT [COND
                             ((IGEQ X (SETQ LEFT (IDIFFERENCE (fetch (TEXTOBJ WRIGHT)
                                                                 of TEXTOBJ)
                                                        8)))
                              (CURSOR \TEDIT.SPLITCURSOR)
                              (replace (TEXTOBJ MOUSEREGION) of TEXTOBJ with 'WINDOW)
                              (replace LEFT of CURSORREG with LEFT)
                              (replace WIDTH of CURSORREG with 8))
                             ([ILESSP X (SETQ LEFT
                                         (OR [AND LINE (COND
                                                          ((fetch (FMTSPEC FMTHARDCOPY)
                                                              of (fetch (LINEDESCRIPTOR
                                                                                 LFMTSPEC)
                                                                        of LINE))
                                                           (FIXR (FQUOTIENT (fetch (
                                                                                       LINEDESCRIPTOR
                                                                                        LEFTMARGIN)
                                                                               of LINE)
                                                                        35.27778)))
                                                          (T (fetch (LINEDESCRIPTOR LEFTMARGIN)
                                                                of LINE]
                                             (IPLUS (fetch (TEXTOBJ WLEFT) of TEXTOBJ)
                                                    8]       (* In left margin;
                                                           switch to the line-select cursor)
                              (CURSOR TEDIT.LINECURSOR)
                              (replace (TEXTOBJ MOUSEREGION) of TEXTOBJ with 'LINE)
                              (replace LEFT of CURSORREG with 0)
                              (replace WIDTH of CURSORREG with LEFT))
                             (T (replace LEFT of CURSORREG with LEFT)
                                (replace WIDTH of CURSORREG with
                                                                    (IDIFFERENCE (fetch
                                                                                  (TEXTOBJ WRIGHT)
                                                                                    of TEXTOBJ)
                                                                           (IPLUS LEFT 8])
                    (LINE (COND
                             ((IGEQ X (SETQ LEFT (IDIFFERENCE (fetch (TEXTOBJ WRIGHT)
                                                                 of TEXTOBJ)
                                                        8)))
                              (CURSOR \TEDIT.SPLITCURSOR)
                              (replace (TEXTOBJ MOUSEREGION) of TEXTOBJ with 'WINDOW)
                              (replace LEFT of CURSORREG with LEFT)
                              (replace WIDTH of CURSORREG with 8))
                             [[IGEQ X (SETQ LEFT (OR [AND LINE (COND
                                                                  ((fetch (FMTSPEC FMTHARDCOPY)
                                                                      of (fetch (
                                                                                       LINEDESCRIPTOR
                                                                                         LFMTSPEC)
                                                                                of LINE))
                                                                   (FIXR (FQUOTIENT
                                                                          (fetch (LINEDESCRIPTOR
                                                                                      LEFTMARGIN)
                                                                             of LINE)
                                                                          35.27778)))
                                                                  (T (fetch (LINEDESCRIPTOR
                                                                                 LEFTMARGIN)
                                                                        of LINE]
                                                     (IPLUS (fetch (TEXTOBJ WLEFT) of TEXTOBJ
                                                                   )
                                                            8]
                              (CURSOR T)
                              (replace (TEXTOBJ MOUSEREGION) of TEXTOBJ with 'TEXT)
                              (replace LEFT of CURSORREG with LEFT)
                              (replace WIDTH of CURSORREG with (IDIFFERENCE
                                                                            (fetch (TEXTOBJ
                                                                                        WRIGHT)
                                                                               of TEXTOBJ)
                                                                            (IPLUS LEFT 8]
                             (T (replace LEFT of CURSORREG with 0)
                                (replace WIDTH of CURSORREG with LEFT))))
                    (WINDOW (COND
                               ((IGEQ X (SETQ LEFT (IDIFFERENCE (fetch (TEXTOBJ WRIGHT)
                                                                   of TEXTOBJ)
                                                          8)))
                                (replace (TEXTOBJ MOUSEREGION) of TEXTOBJ with
                                                                                  'WINDOW)
                                (replace LEFT of CURSORREG with LEFT)
                                (replace WIDTH of CURSORREG with 8))
                               ([IGEQ X (SETQ LEFT
                                         (OR [AND LINE (COND
                                                          ((fetch (FMTSPEC FMTHARDCOPY)
                                                              of (fetch (LINEDESCRIPTOR
                                                                                 LFMTSPEC)
                                                                        of LINE))
                                                           (FIXR (FQUOTIENT (fetch (
                                                                                       LINEDESCRIPTOR
                                                                                        LEFTMARGIN)
                                                                               of LINE)
                                                                        35.27778)))
                                                          (T (fetch (LINEDESCRIPTOR LEFTMARGIN)
                                                                of LINE]
                                             (IPLUS (fetch (TEXTOBJ WLEFT) of TEXTOBJ)
                                                    8]
                                (CURSOR T)
                                (replace (TEXTOBJ MOUSEREGION) of TEXTOBJ with
                                                                                  'TEXT)
                                (replace LEFT of CURSORREG with LEFT)
                                (replace WIDTH of CURSORREG with
                                                                    (IDIFFERENCE (fetch
                                                                                  (TEXTOBJ WRIGHT)
                                                                                    of TEXTOBJ)
                                                                           LEFT)))
                               (T (CURSOR TEDIT.LINECURSOR)
                                  (replace LEFT of CURSORREG with 0)
                                  (replace WIDTH of CURSORREG with LEFT))))
                    NIL])

(TEDIT.CURSOROUTFN
  [LAMBDA (W)                                            (* ; "Edited 30-May-91 23:32 by jds")
                                                             (* Cursor leaves edit window;
                                                           make sure we think we're in the text 
                                                           region.)
    (PROG [(TEXTOBJ (WINDOWPROP W 'TEXTOBJ]
          (CURSOR T)
          (replace (TEXTOBJ MOUSEREGION) of TEXTOBJ with 'TEXT])

(TEDIT.WINDOW.SETUP
  [LAMBDA (WINDOW TEXTOBJ TEXTSTREAM PROPS AFTERWINDOW)  (* ; "Edited 30-May-91 23:32 by jds")

    (* ;; "Set up the window and TEXTOBJ so they correspond, and the window is a TEDIT window.")

    (* ;; "Do the minimal, everyone-wants-it style of setup.  Leave more specialized setup for other functions.")

    (PROG ((SEL (fetch (TEXTOBJ SEL) of TEXTOBJ))
           TEDITPROMPTWINDOW DS PROP TWIDTH THEIGHT)
          (OR WINDOW (\ILLEGAL.ARG WINDOW))
          (WINDOWPROP WINDOW 'BUTTONEVENTFN (FUNCTION \TEDIT.BUTTONEVENTFN))
                                                             (* ; 
                                     "Set the window up with the right mouse interfaces for TEDIT.")
          (WINDOWPROP WINDOW 'RIGHTBUTTONFN (FUNCTION \TEDIT.BUTTONEVENTFN))
          (WINDOWPROP WINDOW 'HARDCOPYFN (FUNCTION TEDIT.HARDCOPYFN))
                                                             (* ; 
                                                 "Hook into the system standard hardcopy interface")
          (SETQ PROP (LISTGET PROPS 'MENU))                  (* ; 
                                                        "The Command menu, or list of items for it")
          (COND
             ((type? MENU PROP)                          (* ; "It's a menu.  just use it.")
              (WINDOWPROP WINDOW 'TEDIT.MENU PROP))
             (PROP                                           (* ; 
                              "It's a list of menu items.  Force a new menu on next middle button.")
                   (WINDOWPROP WINDOW 'TEDIT.MENU.COMMANDS PROP)
                   (WINDOWPROP WINDOW 'TEDIT.MENU NIL)))
          (TEDIT.MINIMAL.WINDOW.SETUP WINDOW TEXTOBJ TEXTSTREAM PROPS AFTERWINDOW])

(TEDIT.MINIMAL.WINDOW.SETUP
  [LAMBDA (WINDOW TEXTOBJ TEXTSTREAM PROPS AFTERWINDOW)  (* ; "Edited 30-May-91 23:33 by jds")

    (* ;; "Do the absolute minimum setup so that TEXTOBJ and WINDOW know about each other.  Does NOT include mouse interface or scrolling.")

    (* ;; "If AFTERWINDOW is non-NIL, the new window will be placed after AFTERWINDOW in the TEXTOBJ's list.  This lists us maintain an ordering of windows, for splitting and unsplitting.")

    (PROG ((SEL (fetch (TEXTOBJ SEL) of TEXTOBJ))
           TEDITPROMPTWINDOW DS PROP TWIDTH THEIGHT LINES OLDWINDOWS)
          (OR WINDOW (\ILLEGAL.ARG WINDOW))
          (replace (TEDITCARET TCCARETDS) of (COND
                                                        [(LISTP (fetch (TEXTOBJ CARET)
                                                                   of TEXTOBJ))
                                                         (CAR (FLAST (fetch (TEXTOBJ CARET)
                                                                        of TEXTOBJ]
                                                        (T (fetch (TEXTOBJ CARET) of TEXTOBJ)
                                                           )) with (WINDOWPROP WINDOW
                                                                              'DSP))
                                                             (* ; 
                                                         "The displaystream for flashing the caret")
          (replace (TEXTOBJ SELWINDOW) of TEXTOBJ with WINDOW)
          (WINDOWPROP WINDOW 'PROCESS NIL)                   (* ; 
                                                       "For the moment, this window has no process")
          (WINDOWPROP WINDOW 'TEDIT.PROPS PROPS)             (* ; 
                                   "Put the props on the window for others ...  **this should go**")
          (WINDOWPROP WINDOW 'TEXTSTREAM TEXTSTREAM)         (* ; 
                                      "Save the text stream for the user to get at via the window.")
          (WINDOWPROP WINDOW 'TEXTOBJ TEXTOBJ)               (* ; 
                                          "Give a handle on the TEXTOBJ for the text being edited.")
          (WINDOWPROP WINDOW 'TEDIT.CURSORREGION (LIST 0 0 0 0))
                                                             (* ; "Used by CursorMovedFn")
          (WINDOWPROP WINDOW 'CURSORMOVEDFN (FUNCTION TEDIT.CURSORMOVEDFN))
          (WINDOWPROP WINDOW 'CURSOROUTFN (FUNCTION TEDIT.CURSOROUTFN))
          (SETQ DS (WINDOWPROP WINDOW 'DSP))
          (DSPRIGHTMARGIN 32767 DS)                          (* ; 
                                       "So we don't get spurious RETURNs printed out by the system")
          (SETQ OLDWINDOWS (fetch (TEXTOBJ \WINDOW) of TEXTOBJ))
          [replace (TEXTOBJ \WINDOW) of TEXTOBJ
             with (COND
                         [(LISTP OLDWINDOWS)                 (* ; 
                                                "There are windows already.  Add this to the list.")
                          (COND
                             (AFTERWINDOW                    (* ; 
                                              "We know which window to put it after.  Put it there")
                                    [RPLACD (FMEMB AFTERWINDOW OLDWINDOWS)
                                           (CONS WINDOW (CDR (FMEMB AFTERWINDOW OLDWINDOWS]
                                    OLDWINDOWS)
                             (T                              (* ; 
                                                    "Otherwise, just add it at the end of the list")
                                (NCONC1 OLDWINDOWS WINDOW]
                         (WINDOW (LIST WINDOW]
          (replace (TEXTOBJ DISPLAYCACHE) of TEXTOBJ with (CAR (\TEDIT.CREATE.LINECACHE
                                                                            1)))
                                                             (* ; 
                                                 "and a CACHE for creating line images for display")
          [replace (TEXTOBJ DISPLAYCACHEDS) of TEXTOBJ
             with (DSPCREATE (fetch LCBITMAP of (fetch (TEXTOBJ DISPLAYCACHE)
                                                               of TEXTOBJ]
                                                             (* ; 
                                                   "A displaystream for changeing the image caches")
          (DSPOPERATION 'PAINT (fetch (TEXTOBJ DISPLAYCACHEDS) of TEXTOBJ))
          (DSPCLIPPINGREGION (create REGION
                                    LEFT _ 0
                                    BOTTOM _ 0
                                    WIDTH _ 100
                                    HEIGHT _ 15)
                 (fetch (TEXTOBJ DISPLAYCACHEDS) of TEXTOBJ))
                                                             (* ; "Remember its size, too.")
          [COND
             ((SETQ PROP (LISTGET PROPS 'REGION))            (* ; 
                                                       "The caller wants to set a region.  Use his")
              (replace (TEXTOBJ WTOP) of TEXTOBJ with (fetch PTOP of PROP))
              (replace (TEXTOBJ WRIGHT) of TEXTOBJ with (fetch RIGHT of PROP))
              (replace (TEXTOBJ WBOTTOM) of TEXTOBJ with (fetch BOTTOM of PROP))
              (replace (TEXTOBJ WLEFT) of TEXTOBJ with (fetch LEFT of PROP)))
             (T                                              (* ; 
                                                           "Otherwise, default to the whole window")
                (replace (TEXTOBJ WLEFT) of TEXTOBJ with 0)
                (replace (TEXTOBJ WBOTTOM) of TEXTOBJ with 0)
                (replace (TEXTOBJ WTOP) of TEXTOBJ with (fetch HEIGHT
                                                                       of (DSPCLIPPINGREGION
                                                                               NIL DS)))
                (replace (TEXTOBJ WRIGHT) of TEXTOBJ with (fetch WIDTH
                                                                         of (DSPCLIPPINGREGION
                                                                                 NIL DS]
          (SETQ LINES (\SHOWTEXT TEXTOBJ NIL WINDOW))
          (WINDOWPROP WINDOW 'LINES LINES)                   (* ; 
                                                   "Display the text in the window, for later use.")
          [replace (TEXTOBJ LINES) of TEXTOBJ
             with (COND
                         [AFTERWINDOW (for LINE in (fetch (TEXTOBJ LINES) of TEXTOBJ)
                                         as WINDOW in OLDWINDOWS
                                         join (COND
                                                     ((EQ WINDOW AFTERWINDOW)
                                                      (LIST LINE LINES))
                                                     (T (LIST LINE]
                         ((LISTP (fetch (TEXTOBJ LINES) of TEXTOBJ))
                          (NCONC1 (fetch (TEXTOBJ LINES) of TEXTOBJ)
                                 LINES))
                         (LINES (LIST LINES]
          (\FIXSEL SEL TEXTOBJ)
          (TEDIT.NORMALIZECARET TEXTOBJ SEL)
          (\SHOWSEL SEL NIL T)
          (\TEDIT.SET.WINDOW.EXTENT TEXTOBJ WINDOW)
          (\COPYSEL SEL TEDIT.SELECTION])

(\TEDIT.ACTIVE.WINDOWP
  [LAMBDA (W)                                            (* ; "Edited 30-May-91 23:33 by jds")

         (* Decides whether a TEdit window is really in use.
       The function TEDIT will set the TEXTOBJ prop of the window to T pro tem, to 
       reserve a window. Once the TEdit has really started, the TEXTOBJ property will 
       be a real textobj.)

    (PROG [(TEXTOBJ (OR (WINDOWPROP W 'TEXTOBJ)
                        (AND (WINDOWPROP W 'TEXTSTREAM)
                             (TEXTOBJ (WINDOWPROP W 'TEXTSTREAM]
          (RETURN (COND
                     ((EQ TEXTOBJ T)                         (* Can have a TEXTOBJ of T as a 
                                                           placeholder during creation...)
                      T)
                     (TEXTOBJ (AND (NOT (fetch (TEXTOBJ EDITFINISHEDFLG) of TEXTOBJ))
                                   (PROCESSP (WINDOWPROP W 'PROCESS])

(\TEDIT.BUTTONEVENTFN
  [LAMBDA (W STREAM)                                     (* ; "Edited  5-Sep-91 18:52 by jds")

    (* ;; "Handle button events for a TEdit window")

    (AND STREAM (SETQ STREAM (TEXTOBJ STREAM)))
    (PROG* ((OSEL NIL)
            (SEL NIL)
            [TEXTOBJ (OR STREAM (WINDOWPROP W 'TEXTOBJ]
            (DS (WINDOWPROP W 'DSP))
            USERFN
            (GLOBALSEL TEDIT.SELECTION)
            (X (LASTMOUSEX W))
            (Y (LASTMOUSEY W))
            (CLIPREGION (DSPCLIPPINGREGION NIL W))
            (SELOPERATION 'NORMAL)
            (SELFN (TEXTPROP TEXTOBJ 'SELFN))
            (EXTENDFLG NIL)
            (OLDX -32000)
            (OLDY -32000)
            SELFINALFN PROC NOSEL)
           (COND
              ((NOT (MOUSESTATE (OR LEFT MIDDLE RIGHT)))     (* ; 
                       "No button is down -- we got control on button-up transition, so ignore it.")
               (RETURN))
              (TEDIT.SELPENDING                              (* ; 
                     "There is already a selection in progress.  Don't allow another to interfere.")
                     (RETURN)))
           (replace (SELECTION CH#) of TEDIT.SCRATCHSELECTION with 0)
                                                             (* ; 
                     "Mark the user-visible scratch selection fresh, so changes can be detected...")
           (COND
              [[OR (NOT TEXTOBJ)
                   (fetch (TEXTOBJ EDITFINISHEDFLG) of TEXTOBJ)
                   (AND (NOT (WINDOWPROP W 'PROCESS))
                        (NOT (TEXTPROP TEXTOBJ 'READONLY))
                        (NOT (SHIFTDOWNP 'SHIFT))
                        (NOT (SHIFTDOWNP 'CTRL))
                        (NOT (SHIFTDOWNP 'META))
                        (NOT (KEYDOWNP 'MOVE))
                        (NOT (KEYDOWNP 'COPY]                (* ; "There's no edit session behind this window.  You can only do window ops, or re-establish a session.")
               (TOTOPW W)
               (COND
                  ((\TEDIT.MOUSESTATE RIGHT)                 (* ; 
                                                        "Right button gets the window command menu")
                   (DOWINDOWCOM W))
                  ((AND TEXTOBJ (NOT (TEXTPROP TEXTOBJ 'READONLY))
                        (NOT (TEXTPROP TEXTOBJ 'SELECTONLY))
                        [NOT (PROCESSP (WINDOWPROP W 'PROCESS]
                        (\TEDIT.MOUSESTATE MIDDLE))          (* ; 
                                "Middle button on a dead window gives a menu for re-starting TEDIT")
                   (COND
                      ((EQ (MENU TEDIT.RESTART.MENU)
                           'NewEditProcess)
                       (replace (TEXTOBJ EDITOPACTIVE) of TEXTOBJ with NIL)
                       (TEDIT (fetch (TEXTOBJ STREAMHINT) of TEXTOBJ)
                              W]
              [(IGREATERP Y (fetch TOP of CLIPREGION))
                                                             (* ; 
                                     "It's not inside the window's REAL region, so call on a menu.")
               (TOTOPW W)
               (COND
                  ((\TEDIT.MOUSESTATE RIGHT)
                   (DOWINDOWCOM W))
                  ((MOUSESTATE (OR LEFT MIDDLE))
                   (AND TEXTOBJ (SETQ USERFN (WINDOWPROP W 'TEDIT.TITLEMENUFN))
                        (NEQ USERFN 'DON'T)                  (* ; "HAD BEEN:  (COND ((AND (SETQ PROC (WINDOWPROP W 'PROCESS)) (PROCESSP PROC)) ; This window has a live process behind it;  go evaluate the button fn there. (PROCESS.APPLY PROC USERFN (LIST W))) (T ; Otherwise, create a new process to handle the menu. (ADD.PROCESS (LIST USERFN (KWOTE W)))))")
                        (ADD.PROCESS (LIST USERFN (KWOTE W]
              ((AND TEXTOBJ (EQ (fetch (TEXTOBJ MOUSEREGION) of TEXTOBJ)
                                'WINDOW))                    (* ; 
                    "We're in the window-ops region of the window.  Do a window split or something")
               (\TEDIT.WINDOW.OPS TEXTOBJ W))
              ((AND TEXTOBJ (NOT (fetch (TEXTOBJ EDITOPACTIVE) of TEXTOBJ)))
                                                             (* ; 
           "Usual case -- he's really selecting something.  And there's nothing else going on now.")
               (TOTOPW W)                                    (* ; 
                          "Move the editing window to the top, so he can select wherever he wants.")
               (\CARET.DOWN)                                 (* ; 
                                                       "Make sure the caret isn't being displayed.")
               (RESETLST
                   (RESETSAVE TEDIT.SELPENDING TEXTOBJ)

                   (* ;; "Tell all TEdits not to run, since there is a selection in progress.  This is reset to NIL on return from here, to re-enable TEdit runs.")

                   (RESETSAVE (for CARET inside (fetch (TEXTOBJ CARET) of TEXTOBJ)
                                 do (replace TCCARET of CARET with (\CARET.CREATE
                                                                                    BXHICARET)))
                          (LIST '\TEDIT.CARET (fetch (TEXTOBJ CARET) of TEXTOBJ)))
                                                             (* ; 
                                   "Then make the caret be the special, tall one so he can see it.")
                   (COND
                      ((KEYDOWNP 'COPY)                      (* ; 
                                                      "In a read-only document, you can only copy.")
                       (SETQ GLOBALSEL TEDIT.SHIFTEDSELECTION)
                       (SETQ OSEL (fetch (TEXTOBJ SHIFTEDSEL) of TEXTOBJ))
                       (SETQ SELOPERATION 'COPY))
                      ((AND (KEYDOWNP 'MOVE)
                            (NOT (fetch (TEXTOBJ TXTREADONLY) of TEXTOBJ)))
                                                             (* ; 
                                                          "The MOVE key is down, so set MOVE mode.")
                       (SETQ GLOBALSEL TEDIT.MOVESELECTION)
                       (SETQ OSEL (fetch (TEXTOBJ MOVESEL) of TEXTOBJ))
                       (SETQ SELOPERATION 'MOVE))
                      [(SHIFTDOWNP 'SHIFT)                   (* ; 
                                    "the SHIFT key is down;  mark this selection for COPY or MOVE.")
                       (COND
                          ((AND (SHIFTDOWNP 'CTRL)
                                (NOT (fetch (TEXTOBJ TXTREADONLY) of TEXTOBJ)))
                                                             (* ; "CTRL-SHIFT select means MOVE.")
                           (SETQ GLOBALSEL TEDIT.MOVESELECTION)
                           (SETQ OSEL (fetch (TEXTOBJ MOVESEL) of TEXTOBJ))
                           (SETQ SELOPERATION 'MOVE))
                          (T (SETQ GLOBALSEL TEDIT.SHIFTEDSELECTION)
                             (SETQ OSEL (fetch (TEXTOBJ SHIFTEDSEL) of TEXTOBJ))
                             (SETQ SELOPERATION 'COPY]
                      ((SHIFTDOWNP 'META)                    (* ; 
                                        "He's holding the meta key down , do a copylooks selection")
                       (SETQ GLOBALSEL TEDIT.COPYLOOKSSELECTION)
                       (SETQ OSEL (fetch (TEXTOBJ SHIFTEDSEL) of TEXTOBJ))
                       (SETQ SELOPERATION 'COPYLOOKS))
                      ((AND (SHIFTDOWNP 'CTRL)
                            (NOT (fetch (TEXTOBJ TXTREADONLY) of TEXTOBJ)))
                                                             (* ; 
                                               "He's holding the control key down;  note the fact.")
                       (\SHOWSEL (fetch (TEXTOBJ SEL) of TEXTOBJ)
                              NIL NIL)
                       (SETQ GLOBALSEL TEDIT.DELETESELECTION)
                       [COND
                          ((fetch (SELECTION SET) of (fetch (TEXTOBJ DELETESEL)
                                                                of TEXTOBJ))
                                                             (* ; 
         "There's a pending delete selection.  Use it, and turn off the existing normal selection.")
                           )
                          (T                                 (* ; 
                     "No existing delete selection.  Use the normal selection as a starting point.")
                             (\COPYSEL (fetch (TEXTOBJ SEL) of TEXTOBJ)
                                    (fetch (TEXTOBJ DELETESEL) of TEXTOBJ]
                       (replace (SELECTION SET) of (fetch (TEXTOBJ SEL) of TEXTOBJ)
                          with NIL)

                       (* ;; "Remember to turn off the normal selection, since we'll be moving it to a new spot after the deletion.")

                       (SETQ OSEL (fetch (TEXTOBJ DELETESEL) of TEXTOBJ))
                       (SETQ SELOPERATION 'DELETE)
                       (TEDIT.SET.SEL.LOOKS OSEL 'DELETE)
                       (replace (TEXTOBJ BLUEPENDINGDELETE) of TEXTOBJ with NIL))
                      (T (SETQ OSEL (fetch (TEXTOBJ SEL) of TEXTOBJ))
                         (replace (TEXTOBJ BLUEPENDINGDELETE) of TEXTOBJ with NIL)
                                                             (* ; "Reset the pending-delete flag.")
                         ))
                   (\COPYSEL OSEL GLOBALSEL)
                   (bind (OSELOP _ SELOPERATION)
                      while [OR (SHIFTDOWNP 'SHIFT)
                                    (SHIFTDOWNP 'CTRL)
                                    (SHIFTDOWNP 'META)
                                    (KEYDOWNP 'MOVE)
                                    (KEYDOWNP 'COPY)
                                    (NOT (ZEROP (LOGAND LASTMOUSEBUTTONS 7]
                      do                                 (* ; 
                                                   "Poll the selection & display its current state")
                            [COND
                               ((ZEROP (LOGAND LASTMOUSEBUTTONS 7))
                                                             (* ; 
                                                  "No mouse buttons are down;  don't try anything.")
                                (SETQ OLDX -32000)           (* ; 
       "However, remember that pushing a mouse button is a change of status that we should notice.")
                                )
                               ((KEYDOWNP 'MOVE)             (* ; 
                                             "the MOVE key is down;  mark this selection for MOVE.")
                                (SETQ SELOPERATION 'MOVE))
                               [(OR (SHIFTDOWNP 'SHIFT)
                                    (KEYDOWNP 'COPY))        (* ; 
                                    "the SHIFT key is down;  mark this selection for COPY or MOVE.")
                                (COND
                                   ((SHIFTDOWNP 'CTRL)       (* ; 
                                              "He's holding down both ctrl and shift -- do a move.")
                                    (SETQ SELOPERATION 'MOVE))
                                   (T                        (* ; 
                                                           "Just the SHIFT key.  It's a COPY")
                                      (SETQ SELOPERATION 'COPY]
                               ((SHIFTDOWNP 'META)           (* ; 
                                                  "He's holding the meta key down;  note the fact.")
                                (SETQ SELOPERATION 'COPYLOOKS))
                               ((SHIFTDOWNP 'CTRL)           (* ; 
                               "He's holding only the CTRL key -- mark the selection for deletion.")
                                (SETQ SELOPERATION 'DELETE))
                               (T                            (* ; 
                                             "No key being held down;  revert to normal selection.")
                                  (SETQ SELOPERATION 'NORMAL]
                            (COND
                               [(AND (OR [NOT (IEQP OLDX (SETQ X (LASTMOUSEX DS]
                                         [NOT (IEQP OLDY (SETQ Y (LASTMOUSEY DS]
                                         (NEQ OSELOP SELOPERATION))
                                     (INSIDEP CLIPREGION X Y))

                                (* ;; "Only do selection if (1) the mouse is inside the window proper and (2) the mouse has moved, or the kind of selection has changed")

                                (* ;; "Must precede the scroll-region test, so that we don't try to scroll while the mouse is inside the main window, even if the scroll bar overlaps the window (at left edge of screen, say)")

                                (SETQ OLDX X)
                                (SETQ OLDY Y)
                                [COND
                                   ((\TEDIT.MOUSESTATE LEFT) (* ; 
                                                           "Left button is character selection")
                                    (SETQ SEL (TEDIT.SELECT X Y TEXTOBJ (fetch (TEXTOBJ 
                                                                                          MOUSEREGION
                                                                                          )
                                                                           of TEXTOBJ)
                                                     NIL SELOPERATION W))
                                    (SETQ EXTENDFLG NIL))
                                   ((\TEDIT.MOUSESTATE MIDDLE)
                                                             (* ; "Middle button is word selection")
                                    (SETQ SEL (TEDIT.SELECT X Y TEXTOBJ (fetch (TEXTOBJ 
                                                                                          MOUSEREGION
                                                                                          )
                                                                           of TEXTOBJ)
                                                     T SELOPERATION W))
                                    (SETQ EXTENDFLG NIL))
                                   [(\TEDIT.MOUSESTATE RIGHT)(* ; "RIght button extends selections")
                                    (COND
                                       ((NEQ SELOPERATION OSELOP)

                                 (* ;; "Things changed since the last selection.  Grab the prior selection info, so that the extension is taken from the selection NOW being made, rather than the last existing old-type selection.")

                                        (\COPYSEL OSEL GLOBALSEL)))
                                    (COND
                                       ((fetch (SELECTION SET) of GLOBALSEL)
                                        (AND TEDIT.EXTEND.PENDING.DELETE (EQ SELOPERATION
                                                                             'NORMAL)
                                             (SETQ SELOPERATION 'PENDINGDEL)
                                             (replace (TEXTOBJ BLUEPENDINGDELETE) of TEXTOBJ
                                                with T)) (* ; 
       "If TeditBluePendingDelete flag is set, then simulate Laurel's blue-pending-delete feature.")
                                        (SETQ SEL (TEDIT.EXTEND.SEL X Y GLOBALSEL TEXTOBJ 
                                                         SELOPERATION W))
                                        (SETQ EXTENDFLG T]
                                   (T                        (* ; 
                        "The mouse buttons are up, leaving us with a pro-tem 'permanent' selection")
                                      (\COPYSEL OSEL GLOBALSEL)
                                                             (* ; 
                       "And SEL is NOT SET ANY LONGER, so it won't get copied into OSEL down below")
                                      (AND SEL (replace (SELECTION SET) of SEL with
                                                                                       NIL]
                                [COND
                                   ((AND SEL (fetch (SELECTION SET) of SEL)
                                         SELFN)              (* ; 
                               "The selection was set, but there's a SELFN that has veto authority")
                                    (COND
                                       ((EQ (APPLY* SELFN TEXTOBJ SEL SELOPERATION 'TENTATIVE)
                                            'DON'T)          (* ; 
                                              "The selfn vetoed this selection, so mark it un-set.")
                                        (replace (SELECTION SET) of SEL with NIL]
                                (COND
                                   ((\TEDIT.SEL.CHANGED? SEL OSEL OSELOP SELOPERATION)
                                                             (* ; 
             "Something interesting about the selection changed.  We have to re-display its image.")
                                    (COND
                                       ((OR (EQ SELOPERATION 'NORMAL)
                                            (EQ SELOPERATION 'PENDINGDEL))
                                                             (* ; 
                        "For a normal selection, set the 'window last selected in' for the TEXTOBJ")
                                        (replace (TEXTOBJ SELWINDOW) of TEXTOBJ with
                                                                                        W)))
                                    (SETQ OSEL (\TEDIT.REFRESH.SHOWSEL TEXTOBJ SEL OSEL OSELOP 
                                                      SELOPERATION EXTENDFLG))
                                    (SETQ OSELOP SELOPERATION))
                                   ([AND OSEL (fetch (SELECTION SET) of OSEL)
                                         (EQ (fetch (SELECTION SELKIND) of OSEL)
                                             'VOLATILE)
                                         (OR (NOT SEL)
                                             (NOT (fetch (SELECTION SET) of SEL]

                                 (* ;; "There is an old selection around, but it is VOLATILE -- i.e., it shouldn't last longer than something is pointing at it.  Turn it off.")

                                    (\SHOWSEL OSEL NIL NIL)
                                    (replace (SELECTION SET) of OSEL with NIL]
                               ((IN/SCROLL/BAR? W LASTMOUSEX LASTMOUSEY)
                                                             (* ; 
                                    "If he moves to the scroll bar, let him scroll without trouble")
                                (SCROLL.HANDLER W)))
                            (BLOCK)                          (* ; "Give other processes a chance")
                            (GETMOUSESTATE)                  (* ; "And get the new mouse info")
                            (TEDIT.CURSORMOVEDFN W))
                   (\COPYSEL OSEL GLOBALSEL)
                   (COND
                      ((fetch (SELECTION SET) of OSEL)
                                                             (* ; 
                                        "Only if a selection REALLY got made should we do this....")
                       (SELECTQ SELOPERATION
                           (COPY                             (* ; 
           "A COPY selection -- set the copy flag, and see if this is a copy to a non-TEdit window")
                                 (SETQ TEDIT.COPY.PENDING T)
                                 (replace (SELECTION SET) of OSEL with NIL)
                                                             (* ; 
                                                "And turn off OSEL, to avoid spurious highlighting")
                                 (\TEDIT.FOREIGN.COPY? GLOBALSEL)
                                                             (* ; 
                               "Maybe copy into the SYSBUF, if the recipient isn't a TEdit window.")
                                 )
                           (COPYLOOKS                        (* ; "A COPYLOOKS selection")
                                      (SETQ TEDIT.COPYLOOKS.PENDING T)
                                                             (* ; 
                                                "And turn off OSEL, to avoid spurious highlighting")
                                      (replace (SELECTION SET) of OSEL with NIL))
                           (MOVE                             (* ; 
                               "A MOVE selection -- set the flag to signal the TEdit command loop,")
                                 (SETQ TEDIT.MOVE.PENDING T) (* ; 
                                                "And turn off OSEL, to avoid spurious highlighting")
                                 (replace (SELECTION SET) of OSEL with NIL))
                           (DELETE (SETQ TEDIT.DEL.PENDING T)
                                   (replace (SELECTION SET) of OSEL with NIL)
                                                             (* ; 
                                                "And turn off OSEL, to avoid spurious highlighting")
                                   )
                           (NORMAL                           (* ; 
                                                 "This is a normal selection;  set the caret looks")
                                   (replace (TEXTOBJ CARETLOOKS) of TEXTOBJ
                                      with (\TEDIT.GET.INSERT.CHARLOOKS TEXTOBJ OSEL)))
                           NIL)))
                   (AND SELFN (APPLY* SELFN TEXTOBJ GLOBALSEL SELOPERATION 'FINAL))
                                                             (* ; 
                             "Give a user exit routine control, perhaps for logging of selections.")
                   (for CARET inside (fetch (TEXTOBJ CARET) of TEXTOBJ)
                      do (OR (fetch TCUP of CARET)
                                 (\EDIT.FLIPCARET CARET T))))
               (AND OSEL (fetch (SELECTION SET) of OSEL)
                    (fetch (SELECTION SELOBJ) of OSEL)
                    (SETQ SELFINALFN (IMAGEOBJPROP (fetch (SELECTION SELOBJ) of OSEL)
                                            'WHENOPERATEDONFN))
                    (APPLY* SELFINALFN (fetch (SELECTION SELOBJ) of OSEL)
                           (WINDOWPROP W 'DSP)
                           'SELECTED OSEL (fetch (TEXTOBJ STREAMHINT) of TEXTOBJ])

(\TEDIT.WINDOW.OPS
  [LAMBDA (TEXTOBJ WINDOWTOSPLIT)                        (* ; "Edited 30-May-91 23:33 by jds")

(* ;;; "Do window operations for TEdit, e.g., splitting a window, moving the split location, or unsplitting.")

    (PROG ([WINDOWOPREGION (create REGION
                                  LEFT _ (DIFFERENCE (fetch (TEXTOBJ WRIGHT) of TEXTOBJ)
                                                8)
                                  BOTTOM _ 0
                                  WIDTH _ 8
                                  HEIGHT _ (fetch HEIGHT of (WINDOWPROP WINDOWTOSPLIT
                                                                           'REGION]
           Y OPERATION)
          [while [AND (MOUSESTATE (OR LEFT MIDDLE RIGHT))
                          (INSIDE? WINDOWOPREGION (LASTMOUSEX WINDOWTOSPLIT)
                                 (SETQ Y (LASTMOUSEY WINDOWTOSPLIT] do 

                                                              (* ;; 
                      "Wait until he lets up on a button, and signal which button was last pushed.")

                                                                          (BLOCK)
                                                                          (COND
                                                                             ((MOUSESTATE MIDDLE)
                                                                              (CURSOR 
                                                                               \TEDIT.MAKESPLITCURSOR
                                                                                     )
                                                                              (SETQ OPERATION
                                                                               'SPLIT))
                                                                             ((MOUSESTATE LEFT)
                                                                              (CURSOR 
                                                                               \TEDIT.MOVESPLITCURSOR
                                                                                     )
                                                                              (SETQ OPERATION
                                                                               'MOVE))
                                                                             ((MOUSESTATE RIGHT)
                                                                              (CURSOR 
                                                                                 \TEDIT.UNSPLITCURSOR
                                                                                     )
                                                                              (SETQ OPERATION
                                                                               'UNSPLIT]
          (COND
             ((INSIDE? WINDOWOPREGION (LASTMOUSEX WINDOWTOSPLIT)
                     (SETQ Y (LASTMOUSEY WINDOWTOSPLIT)))
              (CURSOR \TEDIT.SPLITCURSOR)
              (SELECTQ OPERATION
                  (SPLIT                                     (* ; "Splitting the window")
                         (\TEDIT.SPLITW WINDOWTOSPLIT Y))
                  (UNSPLIT                                   (* ; "Rejoining two panes")
                           (\TEDIT.UNSPLITW WINDOWTOSPLIT))
                  (MOVE                                      (* ; 
                                                           "Moving the divider between two panes.")
                        (TEDIT.PROMPTPRINT TEXTOBJ "Can't move the split point yet." T))
                  (SHOULDNT)))
             (T (CURSOR T])

(\TEDIT.EXPANDFN
  [LAMBDA (W)                                                (* jds " 7-May-85 15:56")
          
          (* steals back the tty for us when the TEdit window is expanded.)

    (COND
       ((WINDOWPROP W 'PROCESS)
          
          (* There's a process to go with this edit window.
          Give it the TTY.)

        (TTY.PROCESS (WINDOWPROP W 'PROCESS])

(\TEDIT.MAINW
  [LAMBDA (TEXTSTREAM)                                   (* ; "Edited 30-May-91 23:33 by jds")

    (* ;; "Get the MAIN edit window for this edit session (i.e., the one with the title, and all the props & stuff)")

    (LET ((TEXTOBJ (TEXTOBJ TEXTSTREAM))
          WINDOWS WINDOW)
         (SETQ WINDOWS (fetch (TEXTOBJ \WINDOW) of (TEXTOBJ TEXTSTREAM)))
         (COND
            (WINDOWS                                         (* ; 
                             "This question only makes sense if there ARE windows for this editor.")
                   (SETQ WINDOW (COND
                                   ((LISTP WINDOWS)          (* ; 
                                "how do we know we can just take the first window as the main one?")
                                    (CAR WINDOWS))
                                   (T WINDOWS)))
                   (COND
                      ((AND (fetch (TEXTOBJ MENUFLG) of TEXTOBJ)
                            (WINDOWPROP WINDOW 'MAINWINDOW))

                       (* ;; "If this is a menu window, and it's attached to a main TEdit window, then look to the main TEdit window.")

                       (WINDOWPROP WINDOW 'MAINWINDOW))
                      (T WINDOW])

(\TEDIT.PRIMARYW
  [LAMBDA (TEXTSTREAM)                                   (* ; "Edited 30-May-91 23:33 by jds")

         (* Given an edit session with possibly several PANES on the same document, give 
       me the PRINCIPAL one of them--i.e., the original edit window that has all the 
       back pointers, props &c on it.)

    (PROG ((TEXTOBJ (TEXTOBJ TEXTSTREAM))
           WINDOWS WINDOW)
          (SETQ WINDOWS (fetch (TEXTOBJ \WINDOW) of (TEXTOBJ TEXTSTREAM)))
                                                             (* The edit window
                                                           (s) associated with this edit 
                                                           session)
          (SETQ WINDOW (COND
                          ((LISTP WINDOWS)

         (* If there are several panes, the first one in the list is the original window)

                           (CAR WINDOWS))
                          (T                                 (* If there's only the one window, 
                                                           that's the guy.)
                             WINDOWS)))
          (RETURN WINDOW])

(\TEDIT.COPYINSERTFN
  [LAMBDA (INSERTIONS WW)                                (* ; "Edited 30-May-91 23:33 by jds")

         (* Given a string, an imageobj, or a list of any of them, insert it in the 
       tedit window WW.)

    (PROG [[TEXTSTREAM (TEXTSTREAM (WINDOWPROP WW 'MAINWINDOW]
           (SEL (fetch (TEXTOBJ SEL) of (TEXTOBJ (WINDOWPROP WW 'MAINWINDOW]
          (for INSERTION inside INSERTIONS do (COND
                                                             ((STRINGP INSERTION)
                                                              (TEDIT.INSERT TEXTSTREAM INSERTION SEL)
                                                              )
                                                             ((IMAGEOBJP INSERTION)
                                                              (TEDIT.INSERT.OBJECT INSERTION 
                                                                     TEXTSTREAM SEL])

(\TEDIT.NEWREGIONFN
  [LAMBDA (FIXEDPOINT MOVINGPOINT WINDOW)                    (* jds "24-FEB-83 17:43")
          
          (* This function is called whenever a new region for the window is needed.
          It constrains the size of the window so that the menu and/or titles will fit)

    (COND
       ((NULL MOVINGPOINT)
          
          (* This is true only the first time the function is called)

        FIXEDPOINT)
       (T (PROG (%#OFMENUITEMS MENUWIDTH XDELTA YDELTA)
          
          (* The NEWREGIONFNARG can be either a window or a list consisting of the number 
          of items in the menu and the minimum width of the window neede to hold the menu 
          an titles)

                (SETQ XDELTA (IDIFFERENCE (fetch (POSITION XCOORD) of MOVINGPOINT)
                                    (fetch (POSITION XCOORD) of FIXEDPOINT)))
                (SETQ YDELTA (IDIFFERENCE (fetch (POSITION YCOORD) of MOVINGPOINT)
                                    (fetch (POSITION YCOORD) of FIXEDPOINT)))
                [COND
                   [(IGEQ XDELTA 0)
                    (replace (POSITION XCOORD) of MOVINGPOINT with (IPLUS (fetch (POSITION XCOORD)
                                                                             of FIXEDPOINT)
                                                                          (IMAX 32 XDELTA]
                   (T (replace (POSITION XCOORD) of MOVINGPOINT with (IPLUS (fetch (POSITION XCOORD)
                                                                               of FIXEDPOINT)
                                                                            (IMIN -32 XDELTA]
                [COND
                   [(IGEQ YDELTA 0)
                    (replace (POSITION YCOORD) of MOVINGPOINT with (IPLUS (fetch (POSITION YCOORD)
                                                                             of FIXEDPOINT)
                                                                          (IMAX 32 YDELTA]
                   (T (replace (POSITION YCOORD) of MOVINGPOINT with (IPLUS (fetch (POSITION YCOORD)
                                                                               of FIXEDPOINT)
                                                                            (IMIN -32 YDELTA]
                (RETURN MOVINGPOINT])

(\TEDIT.SET.WINDOW.EXTENT
  [LAMBDA (TEXTOBJ WINDOWS)                              (* ; "Edited 30-May-91 23:33 by jds")
                                                             (* Set the window's EXTENT property 
                                                           according to 1st and last char on 
                                                           screen.)
    (for WINDOW inside WINDOWS
       do (PROG* ((REGION (DSPCLIPPINGREGION NIL WINDOW))
                      (WHEIGHT (fetch HEIGHT of REGION))
                      (LINES (WINDOWPROP WINDOW 'LINES))
                      (TEXTLEN (fetch (TEXTOBJ TEXTLEN) of TEXTOBJ))
                      TOPCHAR BOTCHAR PREVLINE EXTHEIGHT EXTBOT YBOT)
                     (COND
                        ((TEXTPROP TEXTOBJ 'NOEXTENT)        (* If he doesn't want the extent 
                                                           set, don't bother him.)
                         (RETURN)))
                     (OR WINDOW (RETURN))                    (* Do nothing if there's no window 
                                                           to do it in.)
                     (while (AND LINES (IGEQ (fetch (LINEDESCRIPTOR YBOT) of LINES)
                                                 WHEIGHT)) do 
                                                             (* Run thru the lines looking for 
                                                           the first one on the screen.)
                                                                 (SETQ LINES (fetch (
                                                                                       LINEDESCRIPTOR
                                                                                         NEXTLINE)
                                                                                of LINES)))
                     (COND
                        (LINES 

         (* IF there are lines on the screen, then get the CH# of the start of the first 
       line -- notionally, the CH at the top of the screen.)

                               (SETQ TOPCHAR (fetch (LINEDESCRIPTOR CHAR1) of LINES)))
                        (T                                   (* Otherwise, everything is scrolled 
                                                           off the top, so we're at the end.)
                           (SETQ TOPCHAR TEXTLEN)))
                     (while (AND LINES (IGEQ (fetch (LINEDESCRIPTOR YBOT) of LINES)
                                                 (fetch (TEXTOBJ WBOTTOM) of TEXTOBJ)))
                        do                               (* Then go looking for the last line 
                                                           on the screen)
                              (SETQ PREVLINE LINES)
                              (SETQ LINES (fetch (LINEDESCRIPTOR NEXTLINE) of LINES)))
                     (COND
                        (PREVLINE 

         (* There IS a last line on the screen. Grab its last character as the bottom 
       character on the screen, and set the lowest-Y position to the bottom of that 
       line)

                               (SETQ BOTCHAR (IMIN TEXTLEN (fetch (LINEDESCRIPTOR CHARLIM)
                                                              of PREVLINE)))
                               (SETQ YBOT (fetch (LINEDESCRIPTOR YBOT) of PREVLINE)))
                        (T 

         (* Everything is off the top of the screen.
       Bottom character is also the last char in the document, and the lowest Y we 
       encountered is the top of the edit window.)

                           (SETQ BOTCHAR TEXTLEN)
                           (SETQ YBOT WHEIGHT)))
                     [COND
                        ((AND (IEQP BOTCHAR TEXTLEN)
                              (IEQP TOPCHAR TEXTLEN))        (* If we're really at the bottom of 
                                                           the document)
                         (SETQ EXTBOT (SUB1 YBOT))           (* Set up the extent bottom and 
                                                           height fields to account for that.)
                         (SETQ EXTHEIGHT WHEIGHT))
                        (T 

         (* Otherwise, set the bottom in proportion to what is left below the bottom of 
       the screen, and the extent height in proportion to how much text appears in the 
       window)

                           [SETQ EXTHEIGHT (FIXR (FQUOTIENT (ITIMES (IDIFFERENCE WHEIGHT YBOT)
                                                                   TEXTLEN)
                                                        (IMAX (IDIFFERENCE BOTCHAR TOPCHAR)
                                                              1]
                           (SETQ EXTBOT (IDIFFERENCE YBOT (FIXR (FQUOTIENT (ITIMES (IDIFFERENCE
                                                                                    WHEIGHT YBOT)
                                                                                  (IDIFFERENCE 
                                                                                         TEXTLEN 
                                                                                         BOTCHAR))
                                                                       (IMAX (IDIFFERENCE BOTCHAR 
                                                                                    TOPCHAR)
                                                                             1]
                     (WINDOWPROP WINDOW 'EXTENT (create REGION
                                                       BOTTOM _ EXTBOT
                                                       HEIGHT _ (IMAX 1 EXTHEIGHT)
                                                       WIDTH _ (fetch WIDTH of REGION)
                                                       LEFT _ 0])

(\TEDIT.SHRINK.ICONCREATE
  [LAMBDA (W ICON ICON-POSITION)                         (* ; "Edited 25-Apr-88 23:53 by jds")
          (* ;; "Create the icon that represents this window.")

    [PROG [(ICON (WINDOWPROP W 'ICON))
           (ICONTITLE (WINDOWPROP W 'TEDIT.ICON.TITLE))
           (SHRINKFN (WINDOWPROP W 'SHRINKFN]
          (COND
             ((NOT (WINDOWPROP W 'TEXTOBJ))                  (* ; 
                                    "This isn't really a TEdit window any more.  Don't do anything")
              NIL)
             ((WINDOWPROP W 'TEDITMENU)                      (* ; 
                                                  "This is a text menu, and shrinks without trace.")
              NIL)
             ((OR (IGREATERP (FLENGTH SHRINKFN)
                         3)
                  (AND (NOT (FMEMB 'SHRINKATTACHEDWINDOWS SHRINKFN))
                       (IGREATERP (FLENGTH SHRINKFN)
                              2)))                           (* ; 
                             "There are other functions that expect to handle this.  Don't bother.")
              NIL)
             ((OR [AND ICONTITLE (EQUAL ICONTITLE (TEXTSTREAM.TITLE (TEXTSTREAM W]
                  (AND (NOT ICONTITLE)
                       ICON))
          (* ;; 
      "we built this and the title is the same, or he has already put an icon on this.  Do nothing")

              NIL)
             (ICON 
          (* ;; "There's an existing icon window;  change the title in it")

                   [WINDOWPROP W 'TEDIT.ICON.TITLE (SETQ ICONTITLE (TEXTSTREAM.TITLE (TEXTSTREAM
                                                                                          W]
                   (ICONTITLE ICONTITLE NIL NIL ICON))
             (T                                              (* ; "install a new icon")
                [WINDOWPROP W 'TEDIT.ICON.TITLE (SETQ ICONTITLE (TEXTSTREAM.TITLE (TEXTSTREAM
                                                                                       W]
                (WINDOWPROP W 'ICON (TITLEDICONW TEDIT.TITLED.ICON.TEMPLATE ICONTITLE TEDIT.ICON.FONT 
                                           ICON-POSITION T NIL 'FILE]
    (WINDOWPROP W 'ICON])

(\TEDIT.SHRINKFN
  [LAMBDA (W ICON ICONW)                                     (* jds "14-Dec-84 08:56")
                                                             (* hands off the tty to the exec 
                                                             process)
    (COND
       ((AND (EQ (WINDOWPROP W 'PROCESS)
                 (TTY.PROCESS)))
        (TTY.PROCESS T)
          
          (* per bvm, this means "Hand the TTY to some other process" %.
          It tries EXEC first; if that's not found, it hands it to MOUSE.)

        ])

(\TEDIT.SPLITW
  [LAMBDA (WINDOW Y)                                     (* ; "Edited 30-May-91 23:38 by jds")

    (* ;; "SPLIT WINDOW W AT W-RELATIVE Y into 2 %"panes%" that can scroll independently.")

    (PROG* ((WREG (WINDOWPROP WINDOW 'REGION))
            (TEXTOBJ (WINDOWPROP WINDOW 'TEXTOBJ))
            (OLDWINDOWS (COPY (fetch (TEXTOBJ \WINDOW) of TEXTOBJ)))
            (SUBWINDOW (WINDOWPROP WINDOW 'TEDIT-NEXT-PANE-DOWN))
            ATTACHEDWINDOWS NEWW OLDW OTITLE OLDCARET NEWCARET OLINES)
           (SETQ Y (OR Y (LASTMOUSEY WINDOW)))               (* ; "Get the Y-position where we're to make the split--it's either supplied or we use the mouse's Y position.")
           (COND
              (SUBWINDOW                                     (* ; 
                              "If there's already a pane below this one, detach it for the moment.")
                     (DETACHWINDOW SUBWINDOW)))
           (SHAPEW WINDOW (create REGION using WREG BOTTOM _ (IPLUS (fetch BOTTOM
                                                                               of WREG)
                                                                            Y)
                                                   HEIGHT _ (IDIFFERENCE (fetch HEIGHT
                                                                            of WREG)
                                                                   Y)))
                                                             (* ; 
                                          "Reshape the original window to form the upper %"pane%".")

     (* ;; "Attach the new window, without disturbing the pre-existing attached windows")

           (SETQ ATTACHEDWINDOWS (WINDOWPROP WINDOW 'ATTACHEDWINDOWS NIL))
           (ATTACHWINDOW (SETQ NEWW (CREATEW (create REGION using WREG HEIGHT _ Y)
                                           NIL NIL NIL))
                  WINDOW
                  'BOTTOM
                  'JUSTIFY
                  'MAIN)                                     (* ; "and attach a lower %"pane%".")
           [WINDOWPROP WINDOW 'ATTACHEDWINDOWS (APPEND ATTACHEDWINDOWS (WINDOWPROP WINDOW
                                                                              'ATTACHEDWINDOWS]

     (* ;; "[end of attached-window hackery to prevent disturbance]")

           (WINDOWPROP NEWW 'TEDITCREATED T)
           (DSPFONT (fetch (CHARLOOKS CLFONT) of (fetch (TEXTOBJ CARETLOOKS) of
                                                                                         TEXTOBJ))
                  NEWW)                                      (* ; 
                         "Set the font on the display stream to be the current one from CARETLOOKS")
           (SETQ OLDW (fetch (TEXTOBJ \WINDOW) of TEXTOBJ))
           (SETQ OTITLE (\TEDIT.WINDOW.TITLE TEXTOBJ))
           (SETQ OLDCARET (fetch (TEXTOBJ CARET) of TEXTOBJ))
           (SETQ NEWCARET (create TEDITCARET
                                 TCCARETDS _ (WINDOWPROP NEWW 'DSP)
                                 TCFORCEUP _ T))
           [replace (TEXTOBJ CARET) of TEXTOBJ with (COND
                                                                   ((LISTP OLDCARET)
                                                                    (NCONC1 OLDCARET NEWCARET))
                                                                   (T (LIST OLDCARET NEWCARET]
           (for SEL in (LIST (fetch (TEXTOBJ SEL) of TEXTOBJ)
                                     (fetch (TEXTOBJ SCRATCHSEL) of TEXTOBJ)
                                     (fetch (TEXTOBJ MOVESEL) of TEXTOBJ)
                                     (fetch (TEXTOBJ SHIFTEDSEL) of TEXTOBJ)
                                     (fetch (TEXTOBJ DELETESEL) of TEXTOBJ))
              do (replace (SELECTION L1) of SEL with (NCONC1 (fetch (SELECTION
                                                                                         L1)
                                                                                of SEL)
                                                                            NIL))
                    (replace (SELECTION LN) of SEL with (NCONC1 (fetch (SELECTION
                                                                                        LN)
                                                                               of SEL)
                                                                           NIL)))
           (SETQ OLINES (fetch (TEXTOBJ LINES) of TEXTOBJ))
           (\TEDIT.WINDOW.SETUP NEWW TEXTOBJ (fetch (TEXTOBJ STREAMHINT) of TEXTOBJ)
                  (APPEND '(NOTITLE T PROMPTWINDOW DON'T)
                         (fetch (TEXTOBJ EDITPROPS) of TEXTOBJ))
                  WINDOW)
           [for CARET in (fetch (TEXTOBJ CARET) of TEXTOBJ) as WINDOW
              in (fetch (TEXTOBJ \WINDOW) of TEXTOBJ)
              do (replace TCCARETDS of CARET with (WINDOWPROP WINDOW 'DSP]
           (replace (TEXTOBJ WINDOWTITLE) of TEXTOBJ with OTITLE)
           (WINDOWPROP NEWW 'PROCESS (WINDOWPROP WINDOW 'PROCESS))
           (WINDOWPROP WINDOW 'TEDIT-NEXT-PANE-DOWN NEWW)    (* ; 
                                                   "Tell the main window about its new lower pane.")
           (COND
              (SUBWINDOW                                     (* ; 
                        "There was already a pane below this one. Attach it to the new lower pane.")
                     (ATTACHWINDOW SUBWINDOW NEWW 'BOTTOM 'JUSTIFY 'MAIN)
                     (WINDOWPROP NEWW 'TEDIT-NEXT-PANE-DOWN SUBWINDOW)
                                                             (* ; 
                                                "Tell the lower pane about its lower, lower pane..")
                     ])

(\TEDIT.UNSPLITW
  [LAMBDA (WINDOW Y)                                     (* ; "Edited 30-May-91 23:34 by jds")

(* ;;; "Re-attach two panes of a split editing window, to make a single larger pane.")

    (PROG* ([WREG (COPY (WINDOWPROP WINDOW 'REGION]
            (TEXTOBJ (WINDOWPROP WINDOW 'TEXTOBJ))
            (WINDOWS (fetch (TEXTOBJ \WINDOW) of TEXTOBJ))
            (MAINW (WINDOWPROP WINDOW 'MAINWINDOW))
            (SEL (fetch (TEXTOBJ SEL) of TEXTOBJ))
            (SCRATCHSEL (fetch (TEXTOBJ SCRATCHSEL) of TEXTOBJ))
            (MOVESEL (fetch (TEXTOBJ MOVESEL) of TEXTOBJ))
            (SHIFTEDSEL (fetch (TEXTOBJ SHIFTEDSEL) of TEXTOBJ))
            (DELETESEL (fetch (TEXTOBJ DELETESEL) of TEXTOBJ))
            (SUBWINDOW (WINDOWPROP WINDOW 'TEDIT-NEXT-PANE-DOWN))
            NEWW OLDW OTITLE ATTACHEDWINDOWS LINES CARETS)
           (COND
              ((NOT MAINW)
               (TEDIT.PROMPTPRINT TEXTOBJ "Can't UNSPLIT the main window." T)
               (RETURN)))
           (\TEDIT.SHOWSELS TEXTOBJ NIL NIL)                 (* ; 
                                                          "Turn off selections during the unsplit.")
           (DETACHWINDOW WINDOW)                             (* ; "Detach the pane")
           (COND
              (SUBWINDOW                                     (* ; "The pane that's going away had a yet lower pane attached to it.  Detach it from here, so we can reattach it to the unsplit part later.")
                     (DETACHWINDOW SUBWINDOW)
                     (WINDOWPROP WINDOW 'TEDIT-NEXT-PANE-DOWN NIL)))
           (WINDOWPROP MAINW 'TEDIT-NEXT-PANE-DOWN NIL)
           (for CARET in (SETQ CARETS (fetch (TEXTOBJ CARET) of TEXTOBJ))
              as LINE in (SETQ LINES (fetch (TEXTOBJ LINES) of TEXTOBJ)) as
                                                                                         OLDW
              in WINDOWS when (EQ WINDOW OLDW) do 
                                                             (* ; 
                                            "Remove the caret from our list, and the starting line")
                                                             (replace (TEXTOBJ CARET)
                                                                of TEXTOBJ
                                                                with (DREMOVE CARET CARETS))
                                                             (replace (TEXTOBJ LINES)
                                                                of TEXTOBJ
                                                                with (DREMOVE LINE LINES)))
                                                             (* ; "Close the pane")
           (replace (TEXTOBJ SELWINDOW) of TEXTOBJ with MAINW)
                                                             (* ; 
                                             "Forget that we ever selected in the alternate window")
           (replace (TEXTOBJ \WINDOW) of TEXTOBJ with (SETQ WINDOWS (DREMOVE WINDOW 
                                                                                       WINDOWS)))
                                                             (* ; 
                                                           "Have TEdit forget the window as well")
           (replace (SELECTION L1) of SEL with (CDR (fetch (SELECTION L1)
                                                                   of SEL)))
           (replace (SELECTION LN) of SEL with (CDR (fetch (SELECTION LN)
                                                                   of SEL)))
           (replace (SELECTION L1) of SCRATCHSEL with (CDR (fetch (SELECTION L1)
                                                                          of SCRATCHSEL)))
           (replace (SELECTION LN) of SCRATCHSEL with (CDR (fetch (SELECTION LN)
                                                                          of SCRATCHSEL)))
           (for REMAININGWINDOW inside WINDOWS do 
                                                             (* ; 
                   "Run thru the remaining panes for this edit, fixing things up in the selections")
                                                             (\FIXSEL (fetch (TEXTOBJ SEL)
                                                                         of TEXTOBJ)
                                                                    TEXTOBJ REMAININGWINDOW))
           (TEDIT.DEACTIVATE.WINDOW WINDOW T T)          (* ; 
                                                "Disable all the TEdit-related stuff on the window")
           (CLOSEW WINDOW)

     (* ;; "Reshape the window, without affecting the placement of attached windows")

           (SETQ ATTACHEDWINDOWS (WINDOWPROP MAINW 'ATTACHEDWINDOWS NIL))
           [SHAPEW MAINW (UNIONREGIONS WREG (WINDOWPROP MAINW 'REGION]
           (WINDOWPROP MAINW 'ATTACHEDWINDOWS ATTACHEDWINDOWS)

     (* ;; "[end of attached window hackery]")

           (COND
              (SUBWINDOW                                     (* ; "The pane that's going away had a yet lower pane attached to it.  Detach it from here, so we can reattach it to the unsplit part later.")
                     (ATTACHWINDOW SUBWINDOW MAINW 'BOTTOM 'JUSTIFY 'MAIN)
                     (WINDOWPROP MAINW 'TEDIT-NEXT-PANE-DOWN SUBWINDOW)))
           (\TEDIT.SHOWSELS TEXTOBJ NIL T])

(\TEDIT.WINDOW.SETUP
  [LAMBDA (WINDOW TEXTOBJ TEXTSTREAM PROPS AFTERWINDOW)  (* ; "Edited 11-Jun-99 15:48 by rmk:")
                                                             (* ; "Edited 11-Jun-99 15:44 by rmk:")
                                                             (* ; "Edited 11-Jun-99 15:31 by rmk:")
                                                             (* ; "Edited 30-May-91 23:34 by jds")

    (* ;; "Set up the window and TEXTOBJ so they correspond, and the window is a TEDIT window.")

    (PROG ((ICONFN (WINDOWPROP WINDOW 'ICONFN))
           TEDITPROMPTWINDOW)
          (OR WINDOW (\ILLEGAL.ARG WINDOW))
          (TEDIT.WINDOW.SETUP WINDOW TEXTOBJ TEXTSTREAM PROPS AFTERWINDOW)

     (* ;; "Do the general-purpose window setting up--the kind that every user will want.")

     (* ;; "Then do the stuff that a TEdit session needs as well.")

          (WINDOWADDPROP WINDOW 'RESHAPEFN (FUNCTION \TEDIT.RESHAPEFN))
          (WINDOWADDPROP WINDOW 'NEWREGIONFN (FUNCTION \TEDIT.NEWREGIONFN))
          (OR (WINDOWPROP WINDOW 'SCROLLFN)
              (WINDOWPROP WINDOW 'SCROLLFN (FUNCTION \TEDIT.SCROLLFN)))
          (WINDOWPROP WINDOW 'REPAINTFN (FUNCTION \TEDIT.REPAINTFN))
          [OR (WINDOWPROP WINDOW 'TEDIT.TITLEMENUFN)
              (WINDOWPROP WINDOW 'TEDIT.TITLEMENUFN (OR (LISTGET PROPS 'TITLEMENUFN)
                                                        (FUNCTION TEDIT.DEFAULT.MENUFN]
                                                             (* ; 
                    "Only put our menu function on the window if the originator didn't supply one.")
          (WINDOWADDPROP WINDOW 'CLOSEFN (FUNCTION TEDIT.DEACTIVATE.WINDOW)
                 T)                                          (* ; 
                                                           "To clean up when the window is closed")
          (WINDOWPROP WINDOW 'WINDOWENTRYFN (FUNCTION \TEDIT.PROCIDLEFN))
                                                             (* ; 
                                         "For grabbing the TTY when the mouse clicks in the window")
          (OR ICONFN (WINDOWPROP WINDOW 'ICONFN (FUNCTION \TEDIT.SHRINK.ICONCREATE)))
                                                             (* ; 
                                          "Only set up to create a shrink icon if nobody else has.")
          (WINDOWADDPROP WINDOW 'SHRINKFN (FUNCTION \TEDIT.SHRINKFN))
                                                             (* ; 
                                         "But always give up control of the keyboard on shrinking.")
          (WINDOWADDPROP WINDOW 'EXPANDFN (FUNCTION \TEDIT.EXPANDFN))
                                                             (* ; "And grab it back on expansion")
          (WINDOWPROP WINDOW 'TEDIT.CURSORREGION (LIST 0 0 0 0))
          [WINDOWPROP WINDOW 'HARDCOPYFILEFN (FUNCTION (LAMBDA (W EXT)
                                                         (LET [(STRM (FETCH (TEXTOBJ TXTFILE)
                                                                        OF (SETQ W (TEXTOBJ
                                                                                        W]
                                                              (CL:WHEN STRM
                                                                  (PACKFILENAME 'VERSION NIL
                                                                         'EXTENSION
                                                                         (OR EXT 'IMAGEFILE)
                                                                         'BODY
                                                                         (FULLNAME STRM)))]
                                                             (* ; "Used by CursorMovedFn")
          (COND
             ((NOT AFTERWINDOW)                              (* ; 
                                      "Only set the window's title if we aren't splitting windows.")
              (\TEDIT.WINDOW.TITLE TEXTOBJ (\TEDIT.ORIGINAL.WINDOW.TITLE WINDOW
                                                      (fetch (TEXTOBJ \DIRTY) of TEXTOBJ)))
              (COND
                 ((EQ 'DON'T (LISTGET PROPS 'PROMPTWINDOW))  (* ; 
                                              "He said not to provide a feedback region, so don't.")
                  )
                 ((AND (NOT (LISTGET PROPS 'READONLY))
                       [NOT (replace (TEXTOBJ PROMPTWINDOW) of TEXTOBJ
                               with (LISTGET PROPS 'PROMPTWINDOW]
                       (NOT (fetch (TEXTOBJ MENUFLG) of TEXTOBJ)))
                                                             (* ; 
                                           "The window is read-write, so give it a feedback region")
                  (SETQ TEDITPROMPTWINDOW (GETPROMPTWINDOW WINDOW (OR (LISTGET PROPS 
                                                                             'PROMPTWINDOWHEIGHT)
                                                                      TEDIT.PROMPTWINDOW.HEIGHT 1)
                                                 TEDIT.PROMPT.FONT))
                  (replace (TEXTOBJ PROMPTWINDOW) of TEXTOBJ with TEDITPROMPTWINDOW)
                  (WINDOWPROP TEDITPROMPTWINDOW 'TEDIT.PROMPTWINDOW T)
                                                             (* ; 
                                         "And remember that this is a TEdit-supplied prompt window")
                  (WINDOWPROP TEDITPROMPTWINDOW 'PAGEFULLFN (FUNCTION \TEDIT.PROMPT.PAGEFULLFN])

(\SAFE.FIRST
  [LAMBDA (LIST.OR.ATOM)                                 (* ; "Edited 26-Apr-91 13:00 by jds")
                                                             (* ; 
      "gives the first element whether the arg is a list or an atom.  Should be a macro eventually")
    (COND
       ((LISTP LIST.OR.ATOM)
        (CAR LIST.OR.ATOM))
       (T LIST.OR.ATOM])
)
(RPAQ BXCARET (CURSORCREATE (QUOTE #*(16 16)@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@A@@@CH@@CH@@FL@@FL@@LF@@
) (QUOTE NIL) 3 4))
(RPAQ BXHICARET (CURSORCREATE (QUOTE #*(16 16)A@@@A@@@A@@@A@@@A@@@A@@@A@@@A@@@CH@@GL@@FL@@LF@@HB@@@@@@@@@@@@@@
) (QUOTE NIL) 4 7))
(RPAQ TEDIT.LINECURSOR (CURSORCREATE (QUOTE #*(16 16)@@@A@@@C@@@G@@@O@@AO@@CO@@GO@@@O@@AK@@AI@@C@@@C@@@F@@@F@@@L@@@L@
) (QUOTE NIL) 15 15))
(RPAQ \TEDIT.SPLITCURSOR (CURSORCREATE (QUOTE #*(16 16)@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@OO@@HA@@HA@@HA@@HA@@HA@@HA@@OO@@
) (QUOTE NIL) 4 4))
(RPAQ \TEDIT.MOVESPLITCURSOR (CURSORCREATE (QUOTE #*(16 16)@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@OO@@HA@@HA@@OO@@OO@@HA@@HA@@OO@@
) (QUOTE NIL) 4 4))
(RPAQ \TEDIT.UNSPLITCURSOR (CURSORCREATE (QUOTE #*(16 16)@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@OO@@HA@@JE@@II@@II@@JE@@HA@@OO@@
) (QUOTE NIL) 4 4))
(RPAQ \TEDIT.MAKESPLITCURSOR (CURSORCREATE (QUOTE #*(16 16)@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@OO@@HA@@HA@@MK@@MK@@HA@@HA@@OO@@
) (QUOTE NIL) 4 4))

(RPAQ? TEDIT.DEFAULT.WINDOW NIL)
(DECLARE%: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS TEDIT.DEFAULT.WINDOW)
)



(* ; "User-level %"is this a TEdit window?%" function.")

(DEFINEQ

(TEDITWINDOWP
  [LAMBDA (WINDOW)                                       (* ; "Edited 16-Jan-89 10:28 by jds")

    (* ;; "Returns non-NIL if WINDOW is a legal TEdit window:  I.e., if it has a TEXTOBJ property, and the TEXTOBJ thinks this is its window.")

    (COND
       ((WINDOWP WINDOW))
       ((DISPLAYSTREAMP WINDOW)
        (SETQ WINDOW (WFROMDS WINDOW)))
       (T (SETQ WINDOW NIL)))
    (LET* [(CHECKED-WINDOW (COND
                              ((WINDOWP WINDOW)
                               WINDOW)
                              ((DISPLAYSTREAMP WINDOW)
                               (WFROMDS WINDOW))
                              (T NIL)))
           (TEXTOBJ (AND CHECKED-WINDOW (WINDOWPROP CHECKED-WINDOW 'TEXTOBJ]
          (AND (type? TEXTOBJ TEXTOBJ)
               (MEMBER CHECKED-WINDOW (fetch (TEXTOBJ \WINDOW) of TEXTOBJ))
               T])
)



(* ; "User-typein support")

(DEFINEQ

(TEDIT.GETINPUT
  [LAMBDA (STREAM PROMPTSTRING DEFAULTSTRING DELIMITER.LIST)
                                                             (* ; "Edited 30-May-91 23:34 by jds")

    (* ;; "Ask for input (file names, &c) for TEdit, perhaps with a default.")

    (PROG* ((TEXTOBJ (TEXTOBJ STREAM))
            (TPROMPT (fetch (TEXTOBJ PROMPTWINDOW) of TEXTOBJ)))
           (SETQ TPROMPT (SELECTQ TPROMPT
                             (DON'T [COND
                                       ((TEXTPROP TEXTOBJ 'PWINDOW.ON.DEMAND)
                                        (GETPROMPTWINDOW (\TEDIT.MAINW STREAM])
                             (NIL [GETPROMPTWINDOW (\TEDIT.MAINW STREAM)
                                         NIL NIL (NOT (TEXTPROP TEXTOBJ 'PWINDOW.ON.DEMAND])
                             TPROMPT))
           (COND
              (TPROMPT                                       (* ; 
                                                     "If it's our own promptwindow, just clear it.")
                     (CLEARW TPROMPT))
              (T                                             (* ; 
                                            "If it's the system's window, just move to a new line.")
                 (FRESHLINE PROMPTWINDOW)))
           (RETURN (PROG1 (PROMPTFORWORD PROMPTSTRING DEFAULTSTRING NIL (OR TPROMPT PROMPTWINDOW)
                                 NIL
                                 'TTY
                                 (OR DELIMITER.LIST (CHARCODE (EOL LF TAB ESCAPE)))
                                 NIL)                        (* ; 
                                                           "Get what the guy wants to tell us")
                       (WINDOWPROP (OR TPROMPT PROMPTWINDOW)
                              'PROCESS NIL)                  (* ; 
                           "Now detach the prompt window from its process, to avoid a circularity.")
                       )])

(\TEDIT.MAKEFILENAME
  [LAMBDA (STRING)                                           (* jds " 8-Feb-85 11:25")
          
          (* Takes a string, removes leading and trailing spaces, and converts it to an 
          ATOM.)

    (PROG ((FIRSTNONSPACE (STRPOSL '(% ) STRING NIL T))
           (LASTNONSPACE (STRPOSL '(% ) STRING NIL T T)))
          (COND
             ((AND FIRSTNONSPACE LASTNONSPACE)
              (RETURN (MKATOM (SUBSTRING STRING FIRSTNONSPACE LASTNONSPACE])
)



(* ; "Attached Prompt window support.")

(DEFINEQ

(TEDIT.PROMPTPRINT
  [LAMBDA (TEXTSTREAM MSG CLEAR?)             (* ; 
                                                "Edited  4-Jun-93 12:04 by sybalsky:mv:envos")

    (* ;; "Print a message in the editor's prompt window (if none, use the global promptwindow).  Optionally clear the window first.")

    (PROG (WINDOW PWINDOW (TEXTOBJ (AND TEXTSTREAM (TEXTOBJ TEXTSTREAM)))
                 MAINTEXTOBJ)
          (COND
             [(AND TEXTOBJ (fetch (TEXTOBJ MENUFLG) of TEXTOBJ))
                                                             (* ; 
               "There is a known textobj, and it's a menu.  Go use the main editor's promptwindow.")
              (SETQ MAINTEXTOBJ (WINDOWPROP (\TEDIT.MAINW TEXTOBJ)
                                       'TEXTOBJ))            (* ; 
                         "Find the TEXTOBJ for the main edit window, and use ITS prompting window.")
              (SETQ WINDOW (AND MAINTEXTOBJ (fetch (TEXTOBJ PROMPTWINDOW) of MAINTEXTOBJ]
             (TEXTOBJ (SETQ WINDOW (fetch (TEXTOBJ PROMPTWINDOW) of TEXTOBJ))
                                                             (* ; 
                                      "There IS an editor window to get to;  use its prompt window")
                    ))
          [SETQ WINDOW (CAR (NLSETQ (SELECTQ WINDOW
                                        (DON'T [COND
                                                  ((TEXTPROP TEXTOBJ 'PWINDOW.ON.DEMAND)
                                                   (GETPROMPTWINDOW (\TEDIT.MAINW STREAM])
                                        (NIL [AND TEXTSTREAM (GETPROMPTWINDOW
                                                              (\TEDIT.MAINW TEXTSTREAM)
                                                              NIL NIL (NOT (TEXTPROP TEXTOBJ
                                                                                  'PWINDOW.ON.DEMAND])
                                        WINDOW]              (* ; 
                                            "Try to find an editor's prompt window for our message")
          (COND
             (WINDOW                                         (* ; 
                                                    "We found a window to use.  Print the message.")

                    (* ;; "WAS (RESETLST (RESETSAVE (TTYDISPLAYSTREAM WINDOW)) (COND (CLEAR? (CLEARW WINDOW))) (PRIN1 MSG WINDOW))")

                    (COND
                       ((AND CLEAR? (WINDOWP WINDOW))
                        (CLEARW WINDOW)))
                    (PRIN1 MSG WINDOW))
             (T                                              (* ; 
                                                           "Failing all else, use PROMPTWINDOW.")
                (FRESHLINE PROMPTWINDOW)
                (printout PROMPTWINDOW MSG])

(TEDIT.PROMPTFLASH
  [LAMBDA (TEXTSTREAM)                                   (* ; "Edited 30-May-91 23:34 by jds")
                                                             (* Flash the TEdit prompt window, or 
                                                           the global promptwindow, if TEdit 
                                                           has none.)
    (PROG (WINDOW PWINDOW (TEXTOBJ (TEXTOBJ TEXTSTREAM))
                 MAINTEXTOBJ)
          (COND
             [(AND TEXTOBJ (fetch (TEXTOBJ MENUFLG) of TEXTOBJ))

         (* There is a known textobj, and it's a menu.
       Go use the main editor's promptwindow.)

              (SETQ MAINTEXTOBJ (WINDOWPROP (\TEDIT.MAINW TEXTOBJ)
                                       'TEXTOBJ))            (* Find the TEXTOBJ for the main 
                                                           edit window, and use ITS prompting 
                                                           window.)
              (SETQ WINDOW (AND MAINTEXTOBJ (fetch (TEXTOBJ PROMPTWINDOW) of MAINTEXTOBJ]
             ((AND TEXTOBJ (SETQ WINDOW (fetch (TEXTOBJ PROMPTWINDOW) of TEXTOBJ)))
                                                             (* There IS an editor window to get 
                                                           to; use its prompt window)
              )
             ((SETQ WINDOW (GETPROMPTWINDOW (\TEDIT.MAINW TEXTSTREAM)
                                  NIL NIL T))                (* Failing that, try any prompt 
                                                           window attached to the edit window.)
              ))                                             (* Try to find an editor's prompt 
                                                           window for our message)
          (FLASHWINDOW (OR WINDOW PROMPTWINDOW)
                 2])

(\TEDIT.PROMPT.PAGEFULLFN
  [LAMBDA (PROMPT-DISPLAY-STREAM)                        (* ; "Edited 18-Nov-87 14:44 by jds")
          
          (* ;; "Given a TEdit promptwindow, expand it to be a line taller--called when a message overflows the window.")

    (LET* [(PROMPT-WINDOW (WFROMDS PROMPT-DISPLAY-STREAM))
           (%#LINES (ADD1 (OR (WINDOWPROP PROMPT-WINDOW 'TEDIT.NLINES)
                              1)))
           (OLDREGION (WINDOWPROP PROMPT-WINDOW 'REGION))
           (OLDTOP (fetch (REGION TOP) of OLDREGION))
           (OLDBOTTOM (fetch (REGION BOTTOM) of OLDREGION))
           (MAINWINDOW (WINDOWPROP PROMPT-WINDOW 'MAINWINDOW))
           (ATTACHEDMENUS (REMOVE PROMPT-WINDOW (ATTACHEDWINDOWS MAINWINDOW]
          (GETPROMPTWINDOW MAINWINDOW %#LINES)               (* ; "Get the new window")

          (SETQ \CURRENTDISPLAYLINE (CL:1- %#LINES))         (* ; "Set this so the page-full code will fire again at the end of THIS line, rather than waiting for another screen-ful.  There ought to be an interface to this.")

          [SETQ NEWTOP (fetch (REGION TOP) of (WINDOWPROP PROMPT-WINDOW 'REGION]
          [for WINDOW in (REVERSE ATTACHEDMENUS)
             when (>= (fetch (REGION BOTTOM) of (WINDOWPROP WINDOW 'REGION))
                          OLDBOTTOM) do (RELMOVEW WINDOW (CREATEPOSITION 0 (IDIFFERENCE NEWTOP 
                                                                                      OLDTOP]
          (WINDOWPROP PROMPT-WINDOW 'TEDIT.NLINES %#LINES])
)

(RPAQ? TEDIT.PROMPT.FONT (FONTCREATE 'GACHA 10))

(RPAQ? TEDIT.PROMPTWINDOW.HEIGHT NIL)
(DECLARE%: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS TEDIT.PROMPT.FONT TEDIT.PROMPTWINDOW.HEIGHT)
)



(* ; "Title creation and update")

(DEFINEQ

(TEXTSTREAM.TITLE
  [LAMBDA (STREAM)                                       (* ; "Edited 30-May-91 23:34 by jds")

    (* ;; "returns a string with which you can talk to the user about this stream")

    (PROG ((TEXTOBJ (TEXTOBJ STREAM))
           TXTFILE)
          (SETQ TXTFILE (fetch (TEXTOBJ TXTFILE) of TEXTOBJ))
          (RETURN (OR (CL:TYPECASE TXTFILE
                          (STRINGP TXTFILE)
                          (STREAM (fetch FULLNAME of TXTFILE))
                          (LITATOM TXTFILE)
                          (T TXTFILE))
                      ""])

(\TEDIT.ORIGINAL.WINDOW.TITLE
  [LAMBDA (FILE DIRTY?)                                  (* ; "Edited 26-Apr-91 13:05 by jds")

    (* ;; "Given a file name, derive a title for the TEdit window that is editing it.")

    (PROG (TITLE)
          (RETURN (COND
                     ((NULL FILE)                            (* ; 
                                          "Just calling (TEDIT) should give a 'Text Editor Window'")
                      (CONCAT (COND
                                 (DIRTY? "* ")
                                 (T ""))
                             "Text Editor Window"))
                     ((AND (STRINGP FILE)
                           (ZEROP (NCHARS FILE)))            (* ; 
                                                           "So should editing an empty string")
                      (CONCAT (COND
                                 (DIRTY? "* ")
                                 (T ""))
                             "Text Editor Window"))
                     ((WINDOWP FILE)
                      (COND
                         ((SETQ TITLE (WINDOWPROP FILE 'TITLE))
                                                             (* ; 
                                              "if \TEDIT.WINDOW.SETUP has assigned a title, use it")
                          TITLE)
                         (T "Text Editor Window")))
                     (T                                      (* ; 
                                "Strings use the string itself, otherwise grab the full file name.")
                        (CONCAT (COND
                                   (DIRTY? "* ")
                                   (T ""))
                               "Edit Window for:  "
                               (CL:TYPECASE FILE
                                   (STRINGP FILE)
                                   (STREAM (fetch FULLNAME of FILE))
                                   (LITATOM FILE)
                                   (T FILE))])

(\TEDIT.WINDOW.TITLE
  [LAMBDA (TEXTSTREAM NEW.TITLE)                             (* jds "23-May-85 15:20")
    (PROG ((TEXTOBJ (TEXTOBJ TEXTSTREAM))
           W)
          (RETURN (COND
                     ((AND (SETQ W (\TEDIT.PRIMARYW TEXTOBJ))
                           (NOT (TEXTPROP TEXTOBJ 'NOTITLE))
                           (TEXTPROP TEXTOBJ 'TEDITCREATEDWINDOW))
          
          (* Only change the title if there IS a window, and he isn't suppressing title 
          changes.)

                      (COND
                         (NEW.TITLE (WINDOWPROP W 'TITLE NEW.TITLE))
                         (T (WINDOWPROP W 'TITLE])

(\TEXTSTREAM.FILENAME
  [LAMBDA (TEXTSTREAM)                                   (* ; "Edited 30-May-91 23:34 by jds")

    (* ;; "returns the name of the file associated with this stream if there is one.  NIL otherwise.  Version numbers suppressed")

    (PROG ((TEXTOBJ (TEXTOBJ TEXTSTREAM))
           OFILE)
          [COND
             ((type? STREAM (fetch (TEXTOBJ TXTFILE) of TEXTOBJ))
              (SETQ OFILE (PACKFILENAME 'VERSION NIL 'BODY (fetch FULLFILENAME
                                                                  (fetch (TEXTOBJ TXTFILE)
                                                                     of TEXTOBJ]
          (RETURN OFILE])
)



(* ; "Screen updating utilities")

(DEFINEQ

(TEDIT.DEACTIVATE.WINDOW
  [LAMBDA (W FORCEFLG DISCONNECTONLYFLG)                 (* ; "Edited 30-May-91 23:34 by jds")

    (* ;; "Deactivate the various button fns for this window")

    (PROG [(TEXTOBJ (WINDOWPROP W 'TEXTOBJ]                  (* ; 
                           "Can't be a call to TEXTOBJ, since window may NOT have a textobj on it.")
          [COND
             ((AND TEXTOBJ (fetch (TEXTOBJ EDITOPACTIVE) of TEXTOBJ))

              (* ;; "If something is going on, DON'T CLOSE THE WINDOW")

              (TEDIT.PROMPTPRINT TEXTOBJ "Not closed; edit operation in progress" T)
              (RETURN 'DON'T))
             ((AND TEXTOBJ (PROCESSP (WINDOWPROP W 'PROCESS))
                   (NOT (fetch (TEXTOBJ EDITFINISHEDFLG) of TEXTOBJ))
                   (NOT (fetch (TEXTOBJ TXTREADONLY) of TEXTOBJ))
                   (NOT FORCEFLG))                           (* ; 
                                      "This is an un-quit TEdit window.  Try to QUIT out of TEdit.")
              (COND
                 ((\TEDIT.QUIT W T))
                 (T 
                    (* ;; "Always return DON'T: If we didn't quit, we don't want to close the window;  if we did quit, the window is closed already, and will be reopened to reclose it.")

                    (RETURN 'DON'T]
          (COND
             ([AND TEXTOBJ (OR FORCEFLG (fetch (TEXTOBJ EDITFINISHEDFLG) of TEXTOBJ)
                               (NOT (PROCESSP (WINDOWPROP W 'PROCESS]
                                                             (* ; 
                                   "Only do this if it's a TEdit window, and has been QUIT out of.")
              [COND
                 ((AND (fetch (TEXTOBJ PROMPTWINDOW) of TEXTOBJ)
                       (OPENWP (fetch (TEXTOBJ PROMPTWINDOW) of TEXTOBJ)))
                  (CLEARW (fetch (TEXTOBJ PROMPTWINDOW) of TEXTOBJ]
              (\SHOWSEL (fetch (TEXTOBJ SEL) of TEXTOBJ)
                     NIL NIL)                                (* ; 
      "Before the window is closed, make SURE that the caret is down, or the window will reappear.")
              (COND
                 ((AND (\TEDIT.WINDOW.TITLE TEXTOBJ)
                       (OPENWP (fetch (TEXTOBJ PROMPTWINDOW) of TEXTOBJ))
                       (OPENWP W)
                       (EQ W (CAR (fetch (TEXTOBJ \WINDOW) of TEXTOBJ)))
                       (NOT DISCONNECTONLYFLG))
                  (\TEDIT.WINDOW.TITLE TEXTOBJ "Edit Window [Inactive]")
                                                             (* ; 
                                             "Reset the window's title to a known 'inactive' value")
                  ))
              [COND
                 ((NOT DISCONNECTONLYFLG)
                  (for PANE in (REVERSE (CDR (fetch (TEXTOBJ \WINDOW) of TEXTOBJ)))
                     do 

                           (* ;; "Run thru any split-off sub-panes, and reattach them, so we get a whole window back before the end of the world.")

                           (\TEDIT.UNSPLITW PANE))
                  (replace (TEXTOBJ \WINDOW) of TEXTOBJ with NIL)
                  (COND
                     ((type? STREAM (fetch (TEXTOBJ TXTFILE) of TEXTOBJ))
                                                             (* ; 
                                                     "Close the file that this window was open on.")
                      (COND
                         ((NOT (WINDOWPROP W 'TEDIT-CLOSING-FILE T))
                          (CLOSEF? (fetch (TEXTOBJ TXTFILE) of TEXTOBJ))
                          (WINDOWPROP W 'TEDIT-CLOSING-FILE NIL]
              (WINDOWPROP W 'TEXTOBJ NIL)                    (* ; 
                                                  "Detach the edit data structures from the window")
              (WINDOWPROP W 'TEXTSTREAM NIL)
              (WINDOWPROP W 'LINES NIL)
              (WINDOWPROP W 'THISLINE NIL)
              (WINDOWPROP W 'PROCESS.EXITFN NIL)
              (WINDOWPROP W 'PROCESS.IDLEFN NIL)
              (WINDOWPROP W 'CURSOROUTFN NIL)
              (WINDOWPROP W 'CURSORMOVEDFN NIL)
              (WINDOWPROP W 'BUTTONEVENTFN 'TOTOPW)          (* ; "And the button functions")
              (WINDOWPROP W 'RIGHTBUTTONFN 'DOWINDOWCOM)
              (WINDOWDELPROP W 'CLOSEFN 'TEDIT.DEACTIVATE.WINDOW)
              (WINDOWPROP W 'SCROLLFN NIL)
              (WINDOWDELPROP W 'RESHAPEFN '\EDITRESHAPEFN)
              (AND (NOT DISCONNECTONLYFLG)
                   (WINDOWPROP W 'PROCESS)
                   (\TEDIT.INTERRUPT.SETUP (WINDOWPROP W 'PROCESS)
                          T))                                (* ; 
                                                  "Make sure any disarmed interrupts are restored.")
              (for MENUW in (ATTACHEDWINDOWS W) when (AND (WINDOWPROP MENUW 'TEDITMENU)
                                                                      (WINDOWPROP MENUW 'TEXTOBJ))
                 do                                      (* ; 
                                     "Detach all the TEDITMENU windows that belong to this window.")
                       (replace (TEXTOBJ EDITFINISHEDFLG) of (TEXTOBJ MENUW) with T) 
                                                             (* ; "Mark it finished")
                       (WINDOWPROP MENUW 'TEDITMENU NIL)     (* ; 
                                                           "And mark it no longer a menu window")
                       (GIVE.TTY.PROCESS MENUW)              (* ; 
                                                         "Then give it a chance to kill itself off")
                       (DISMISS 300))
              (COND
                 ((NOT DISCONNECTONLYFLG)
                  (GIVE.TTY.PROCESS W)
                  (DISMISS 300)))
              [replace (TEXTOBJ \WINDOW) of TEXTOBJ with (COND
                                                                        ((LISTP (fetch
                                                                                 (TEXTOBJ \WINDOW)
                                                                                   of TEXTOBJ))
                                                             (* ; 
                                                           "It's a list;  remove this window")
                                                                         (DREMOVE W
                                                                                (fetch
                                                                                 (TEXTOBJ \WINDOW)
                                                                                   of TEXTOBJ]
                                                             (* ; 
                                     "Disconnect the window from the edit data structures as well.")
              ])

(\TEDIT.REPAINTFN
  [LAMBDA (W)                                            (* ; "Edited 30-May-91 23:34 by jds")

         (* Will eventually do the right thing w/r/t text margins.
       For now, it's a place holder.)

    (PROG ((TEXTOBJ (WINDOWPROP W 'TEXTOBJ))
           (TEXTSTREAM (WINDOWPROP W 'TEXTSTREAM))
           (WREG (DSPCLIPPINGREGION NIL W))
           (CH# 0)
           WHEIGHT FIRSTCH# LINES LINE WWIDTH)
          (OR TEXTOBJ (RETURN))                              (* If this window has no TEXTOBJ on 
                                                           it yet, just leave.)
          (\SHOWSEL (fetch (TEXTOBJ SEL) of TEXTOBJ)
                 NIL NIL)                                    (* Turn off the selection while we 
                                                           make changes)
          (SETQ WHEIGHT (fetch PTOP of WREG))        (* Old window height)
          (OR (SETQ LINES (WINDOWPROP W 'LINES))
              (RETURN))                                      (* If no text has been displayed 
                                                           yet, just leave)
          (SETQ LINE LINES)
          (while LINE do 

         (* Now hunt for the first line that had been visible, so we can find the CH# 
       that has to appear at the top of the window.)

                                (COND
                                   ((ILESSP (fetch (LINEDESCRIPTOR YBOT) of LINE)
                                           WHEIGHT)          (* This line was visible)
                                    (SETQ FIRSTCH# (fetch (LINEDESCRIPTOR CHAR1) of LINE))
                                                             (* Note its first character %#)
                                    (RETURN)))
                                (SETQ LINE (fetch (LINEDESCRIPTOR NEXTLINE) of LINE)))
          (COND
             (LINE 

         (* You can only do this if there IS text on the screen to start with.)

                   (\DISPLAYLINE TEXTOBJ LINE W)             (* Actually display it)
                   (\FILLWINDOW (fetch (LINEDESCRIPTOR YBOT) of LINE)
                          LINE TEXTOBJ NIL W)                (* Fill out the window with more 
                                                           lines, to fill or to EOF)
                   ))
          (\FIXSEL (fetch (TEXTOBJ SEL) of TEXTOBJ)
                 TEXTOBJ)                                    (* Fix up the selection to account 
                                                           for the line shuffling)
          (\SHOWSEL (fetch (TEXTOBJ SEL) of TEXTOBJ)
                 NIL T)                                      (* And highlight it)
      ])

(\TEDIT.RESHAPEFN
  [LAMBDA (W BITS OLDREGION)                             (* ; "Edited 30-May-91 23:34 by jds")

         (* Will eventually do the right thing w/r/t text margins.
       For now, it's a place holder.)

    (PROG ((TEXTOBJ (WINDOWPROP W 'TEXTOBJ))
           (TEXTSTREAM (WINDOWPROP W 'TEXTSTREAM))
           (NEWWHEIGHT (fetch HEIGHT of (DSPCLIPPINGREGION NIL W)))
           (NEWWWIDTH (fetch WIDTH of (DSPCLIPPINGREGION NIL W)))
           (NEWLEFT 0)
           (NEWBOTTOM 0)
           (CH# 0)
           WHEIGHT FIRSTCH# LINES LINE WWIDTH)
          (OR TEXTOBJ (RETURN))                              (* If this window has no TEXTOBJ on 
                                                           it yet, just leave.)
          (\SHOWSEL (fetch (TEXTOBJ SEL) of TEXTOBJ)
                 NIL NIL)                                    (* Turn off the selection while we 
                                                           make changes)
          (SETQ WHEIGHT (fetch HEIGHT of OLDREGION)) (* Old window height)
          (replace (TEXTOBJ WTOP) of TEXTOBJ with NEWWHEIGHT)
                                                             (* Save new height/width for later 
                                                           use)
          (replace (TEXTOBJ WRIGHT) of TEXTOBJ with NEWWWIDTH)
          (replace (TEXTOBJ WBOTTOM) of TEXTOBJ with NEWBOTTOM)
          (replace (TEXTOBJ WLEFT) of TEXTOBJ with NEWLEFT)
          (OR (SETQ LINES (WINDOWPROP W 'LINES))
              (RETURN))                                      (* If no text has been displayed 
                                                           yet, just leave)
          (SETQ LINE LINES)
          (while LINE do 

         (* Now hunt for the first line that had been visible, so we can find the CH# 
       that has to appear at the top of the window.)

                                (COND
                                   ((ILESSP (fetch (LINEDESCRIPTOR YBOT) of LINE)
                                           WHEIGHT)          (* This line was visible)
                                    (SETQ FIRSTCH# (fetch (LINEDESCRIPTOR CHAR1) of LINE))
                                                             (* Note its first character %#)
                                    (RETURN))
                                   (T (replace (LINEDESCRIPTOR YBOT) of LINE with 
                                                                                           NEWWHEIGHT
                                             )))
                                (SETQ LINE (fetch (LINEDESCRIPTOR NEXTLINE) of LINE)))
          (AND FIRSTCH# (SETQ LINE (\TEDIT.FIND.FIRST.LINE TEXTOBJ NEWWHEIGHT FIRSTCH# W)))
          (COND
             (LINE 

         (* You can only do this if there IS text on the screen to start with.)

                   (COND
                      ((NEQ LINE LINES)
                       (replace (LINEDESCRIPTOR NEXTLINE) of LINES with LINE)
                       (replace (LINEDESCRIPTOR PREVLINE) of LINE with LINES)))
                                                             (* Forget the old chain of line 
                                                           descriptors)
                   (replace (LINEDESCRIPTOR YBOT) of LINE with (IDIFFERENCE
                                                                            NEWWHEIGHT
                                                                            (fetch (
                                                                                       LINEDESCRIPTOR
                                                                                        LHEIGHT)
                                                                               of LINE)))
                                                             (* Fix the line to appear at the top 
                                                           of the window)
                   (replace (LINEDESCRIPTOR YBASE) of LINE with
                                                                   (IPLUS (fetch (LINEDESCRIPTOR
                                                                                      YBOT)
                                                                             of LINE)
                                                                          (fetch (LINEDESCRIPTOR
                                                                                      DESCENT)
                                                                             of LINE)))
                   (\DISPLAYLINE TEXTOBJ LINE W)             (* Actually display it)
                   (\FILLWINDOW (fetch (LINEDESCRIPTOR YBOT) of LINE)
                          LINE TEXTOBJ NIL W)                (* Fill out the window with more 
                                                           lines, to fill or to EOF)
                   ))
          (\FIXSEL (fetch (TEXTOBJ SEL) of TEXTOBJ)
                 TEXTOBJ)                                    (* Fix up the selection to account 
                                                           for the line shuffling)
          (\SHOWSEL (fetch (TEXTOBJ SEL) of TEXTOBJ)
                 NIL T)                                      (* And highlight it)
      ])

(\TEDIT.SCROLLFN
  [LAMBDA (W DX DY)                                      (* ; "Edited 31-May-91 13:32 by jds")
                                                             (* Handle scrolling of the edit 
                                                           window)
    (PROG* (WHEIGHT (TEXTOBJ (WINDOWPROP W 'TEXTOBJ))
                  (PRIORCR 0)
                  SELWASON SHIFTEDSELWASON MOVESELWASON DELETESELWASON (WREG (DSPCLIPPINGREGION
                                                                              NIL W))
                  LINES TRUEY TRUEX WWIDTH SEL (PREVLINE NIL)
                  (PRESCROLLFN (TEXTPROP TEXTOBJ 'PRESCROLLFN))
                  (POSTSCROLLFN (TEXTPROP TEXTOBJ 'POSTSCROLLFN))
                  TEXTLEN THEIGHT TOPLINE RHEIGHT LOWESTY YBOT LINE CH# CHNO CH)
           (COND
              ((ZEROP (SETQ TEXTLEN (fetch (TEXTOBJ TEXTLEN) of TEXTOBJ)))
                                                             (* Don't scroll a zero-length file)
               (RETURN))
              ((fetch (TEXTOBJ EDITOPACTIVE) of TEXTOBJ)
                                                             (* Don't scroll while something 
                                                           interesting is happening!)
               (TEDIT.PROMPTPRINT TEXTOBJ "Edit operation in progress." T)
               (RETURN)))                                    (* Displaystream for the window)
           (SETQ WHEIGHT (fetch HEIGHT of WREG))     (* Height of the window)
           (SETQ LOWESTY WHEIGHT)                            (* Lowest Y of a line-bottom yet 
                                                           seet)
           (SETQ WWIDTH (fetch WIDTH of WREG))       (* Width of the window)
           (SETQ LINES (WINDOWPROP W 'LINES))                (* List of formatted lines)
           (AND PRESCROLLFN (DOUSERFNS PRESCROLLFN W))       (* If there's a pre-scroll fn, 
                                                           execute it now.)
           (COND
              ((fetch (SELECTION SET) of (SETQ SEL (fetch (TEXTOBJ SEL) of TEXTOBJ)))
                                                             (* Turn off the selection during the 
                                                           scroll.)
               (SETQ SELWASON (fetch (SELECTION ONFLG) of SEL))
               (\SHOWSEL SEL NIL NIL)))
           (SETQ SHIFTEDSELWASON (fetch (SELECTION ONFLG) of (fetch (TEXTOBJ SHIFTEDSEL)
                                                                        of TEXTOBJ)))
           (\SHOWSEL (fetch (TEXTOBJ SHIFTEDSEL) of TEXTOBJ)
                  NIL NIL)
           (SETQ MOVESELWASON (fetch (SELECTION ONFLG) of (fetch (TEXTOBJ MOVESEL)
                                                                     of TEXTOBJ)))
           (\SHOWSEL (fetch (TEXTOBJ MOVESEL) of TEXTOBJ)
                  NIL NIL)
           (SETQ DELETESELWASON (fetch (SELECTION ONFLG) of (fetch (TEXTOBJ DELETESEL)
                                                                       of TEXTOBJ)))
           (\SHOWSEL (fetch (TEXTOBJ DELETESEL) of TEXTOBJ)
                  NIL NIL)
           (COND
              [(AND (FIXP DY)
                    (NOT (ZEROP DY)))                        (* Regular up/down scrolling)
               (SETQ TRUEY (IDIFFERENCE WHEIGHT (IABS DY)))
               (COND
                  [(ILESSP 0 DY)                             (* Scroll text up)
                   (SETQ LINE LINES)
                   (while (AND LINE (IGEQ (fetch (LINEDESCRIPTOR YBOT) of LINE)
                                              WHEIGHT)) do (SETQ LINE (fetch (LINEDESCRIPTOR
                                                                                      NEXTLINE)
                                                                             of LINE)))
                   (first [COND
                                 ((AND LINE (ILESSP (fetch (LINEDESCRIPTOR YBOT) of LINE)
                                                   TRUEY))   (* Make sure we scroll up at least 
                                                           one line.)
                                  (replace (LINEDESCRIPTOR YBASE) of LINE
                                     with (IPLUS (fetch (LINEDESCRIPTOR DESCENT) of
                                                                                         LINE)
                                                     (replace (LINEDESCRIPTOR YBOT) of LINE
                                                        with WHEIGHT)))
                                  (SETQ LINE (fetch (LINEDESCRIPTOR NEXTLINE) of LINE]
                      while LINE do                  (* Find the line whose top is to 
                                                           move to the top of the window)
                                           [COND
                                              ((ILESSP (fetch (LINEDESCRIPTOR YBOT) of LINE)
                                                      TRUEY)
                                               (RETURN))
                                              (T (replace (LINEDESCRIPTOR YBASE) of LINE
                                                    with (IPLUS (fetch (LINEDESCRIPTOR 
                                                                                      DESCENT)
                                                                       of LINE)
                                                                    (replace (LINEDESCRIPTOR
                                                                                  YBOT) of LINE
                                                                       with WHEIGHT]
                                           (SETQ PREVLINE LINE)
                                           (SETQ LINE (fetch (LINEDESCRIPTOR NEXTLINE)
                                                         of LINE)))
                   [COND
                      (LINE                                  (* There is a line to go to the top)
                            (SETQ RHEIGHT (IPLUS (fetch (LINEDESCRIPTOR YBASE) of LINE)
                                                 (fetch (LINEDESCRIPTOR ASCENT) of LINE)))
                                                             (* Find the Ypos of the top of the 
                                                           line's image)
                            (BITBLT W 0 0 W 0 (IDIFFERENCE WHEIGHT RHEIGHT)
                                   WWIDTH RHEIGHT 'INPUT 'REPLACE)
                            (BITBLT NIL 0 0 W 0 0 WWIDTH (IDIFFERENCE WHEIGHT RHEIGHT)
                                   'TEXTURE
                                   'REPLACE WHITESHADE)
                            [bind NL (PL _ PREVLINE) for I from 1 to 50 while
                                                                                        PL
                               do                        (* Let him keep 50 lines above what 
                                                           he can see on the screen)
                                     (SETQ PL (fetch (LINEDESCRIPTOR PREVLINE) of PL))
                               finally (COND
                                              ((AND PL (NEQ PL LINES))
                                                             (* There were more than 50 lines
                                                           (and we aren't pointing at the root)
                                                           %, so lop the spare ones off.)
                                               (SETQ NL (fetch (LINEDESCRIPTOR NEXTLINE)
                                                           of LINES))
                                               (UNINTERRUPTABLY
                                                   (replace (LINEDESCRIPTOR NEXTLINE)
                                                      of LINES with PL)
                                                   (replace (LINEDESCRIPTOR PREVLINE)
                                                      of PL with LINES))
                                               (bind NNL while (AND NL (NEQ NL PL))
                                                  do (SETQ NNL NL)
                                                        (SETQ NL (fetch (LINEDESCRIPTOR NEXTLINE)
                                                                    of NL))
                                                        (replace (LINEDESCRIPTOR NEXTLINE)
                                                           of NNL with NIL]
                            (while (AND LINE (IGEQ (fetch (LINEDESCRIPTOR YBOT) of LINE)
                                                       (fetch BOTTOM of WREG)))
                               do                        (* Update the bottom and baseline)
                                     (replace (LINEDESCRIPTOR YBOT) of LINE
                                        with (IPLUS (fetch (LINEDESCRIPTOR YBOT) of
                                                                                         LINE)
                                                        (IDIFFERENCE WHEIGHT RHEIGHT)))
                                     (replace (LINEDESCRIPTOR YBASE) of LINE
                                        with (IPLUS (fetch (LINEDESCRIPTOR YBOT) of
                                                                                         LINE)
                                                        (fetch (LINEDESCRIPTOR DESCENT)
                                                           of LINE)))
                                     (SETQ PREVLINE LINE)
                                     (SETQ LINE (fetch (LINEDESCRIPTOR NEXTLINE) of LINE]
                   (COND
                      ((AND LINE (IGEQ (fetch (LINEDESCRIPTOR YBOT) of LINE)
                                       (fetch BOTTOM of WREG)))
                                                             (* Fill the rest of the window)
                       (\FILLWINDOW (fetch (LINEDESCRIPTOR YBOT) of LINE)
                              LINE TEXTOBJ NIL W))
                      (PREVLINE (\FILLWINDOW (fetch (LINEDESCRIPTOR YBOT) of PREVLINE)
                                       PREVLINE TEXTOBJ NIL W]
                  (T                                         (* Scroll text down in window, 
                                                           adding lines at top to fill.)
                     (SETQ PREVLINE (SETQ TOPLINE LINES))    (* Find the top line on the screen%:)
                     [while TOPLINE do 

         (* Run thru the lines, until we hit the first one that is below the top of the 
       edit window)

                                              (COND
                                                 ((ILESSP (fetch (LINEDESCRIPTOR YBOT)
                                                             of TOPLINE)
                                                         WHEIGHT)
                                                  (RETURN))
                                                 (T (SETQ PREVLINE TOPLINE)
                                                    (SETQ TOPLINE (fetch (LINEDESCRIPTOR NEXTLINE
                                                                                    ) of TOPLINE]
                     [COND
                        ((AND (EQ PREVLINE LINES)
                              (OR (NOT (fetch (LINEDESCRIPTOR NEXTLINE) of PREVLINE))
                                  (IGREATERP (fetch (LINEDESCRIPTOR CHAR1)
                                                of (fetch (LINEDESCRIPTOR NEXTLINE)
                                                          of PREVLINE))
                                         1)))                (* There's nothing between us and 
                                                           start of file that's formatted;
                                                           start by making some.)
                         (SETQ PREVLINE (\BACKFORMAT LINES TEXTOBJ WHEIGHT]
                     (SETQ THEIGHT 0)

         (* Accumulates the heights of the lines we've backed over.
       When this exceeds the scrolling distance, we've found the line.)

                     (bind (FIRSTTIME _ T) while (OR FIRSTTIME
                                                             (AND (ILESSP THEIGHT (IABS DY))
                                                                  (IGEQ (fetch (LINEDESCRIPTOR
                                                                                    CHAR1)
                                                                           of PREVLINE)
                                                                        1)))
                        do 

         (* Starting with PREVLINE, accumulate LHEIGHTs until we hit top of text or have 
       accumulated enough lines to fill the screen)

                              (add THEIGHT (fetch (LINEDESCRIPTOR LHEIGHT) of PREVLINE))
                              (SETQ PREVLINE (fetch (LINEDESCRIPTOR PREVLINE) of PREVLINE))
                              [COND
                                 ((OR (NOT PREVLINE)
                                      (ILESSP (fetch (LINEDESCRIPTOR CHAR1) of PREVLINE)
                                             1))             (* We need to format some lines 
                                                           above where we are --
                                                           go do it.)
                                  (SETQ PREVLINE (\BACKFORMAT LINES TEXTOBJ WHEIGHT]
                              (SETQ FIRSTTIME NIL))
                     [COND
                        ([OR (EQ TOPLINE (fetch (LINEDESCRIPTOR NEXTLINE) of PREVLINE))
                             (EQ TOPLINE (fetch (LINEDESCRIPTOR NEXTLINE)
                                            of (fetch (LINEDESCRIPTOR NEXTLINE) of 
                                                                                             PREVLINE
                                                          ]

         (* Always move at least one line backward.
       So if we're about to move no lines, force a single line.)

                         )
                        ((ILESSP (IABS DY)
                                THEIGHT)                     (* BACK UP ONE LINE TO GET TO THE 
                                                           ONE WHICH PUSHED US OVER TOP)
                         (SETQ PREVLINE (fetch (LINEDESCRIPTOR NEXTLINE) of PREVLINE))
                         (SETQ THEIGHT (IDIFFERENCE THEIGHT (fetch (LINEDESCRIPTOR LHEIGHT)
                                                               of PREVLINE]
                     [COND
                        ((NEQ TOPLINE (fetch (LINEDESCRIPTOR NEXTLINE) of PREVLINE))
                         (SETQ PREVLINE (fetch (LINEDESCRIPTOR NEXTLINE) of PREVLINE]
                                                             (* Move to the first line to be 
                                                           formatted.-)
                     (BITBLT W 0 THEIGHT W 0 0 WWIDTH (IDIFFERENCE WHEIGHT THEIGHT)
                            'INPUT
                            'REPLACE)
                     (BITBLT NIL 0 0 W 0 (IDIFFERENCE WHEIGHT THEIGHT)
                            WWIDTH THEIGHT 'TEXTURE 'REPLACE WHITESHADE)
                     (bind (LINE _ TOPLINE) while LINE
                        do (COND
                                  ((IGEQ (fetch (LINEDESCRIPTOR YBOT) of LINE)
                                         (IPLUS (fetch BOTTOM of WREG)
                                                THEIGHT))    (* This line will be on screen.
                                                           Adjust its YBOT/YBASE)
                                   (replace (LINEDESCRIPTOR YBOT) of LINE
                                      with (IDIFFERENCE (fetch (LINEDESCRIPTOR YBOT)
                                                               of LINE)
                                                      THEIGHT))
                                   (replace (LINEDESCRIPTOR YBASE) of LINE
                                      with (IDIFFERENCE (fetch (LINEDESCRIPTOR YBASE)
                                                               of LINE)
                                                      THEIGHT))
                                   (SETQ LOWESTY (fetch (LINEDESCRIPTOR YBOT) of LINE)))
                                  (T (replace (LINEDESCRIPTOR YBOT) of LINE
                                        with (SUB1 (fetch BOTTOM of WREG)))
                                     (replace (LINEDESCRIPTOR NEXTLINE)
                                        of (fetch (LINEDESCRIPTOR PREVLINE) of LINE)
                                        with NIL)
                                     (SETQ LINE (fetch (LINEDESCRIPTOR PREVLINE) of LINE))
                                     (RETURN)))
                              (SETQ LINE (fetch (LINEDESCRIPTOR NEXTLINE) of LINE)) 
                                                             (* Clear anything below us))
                     (BITBLT NIL 0 0 W 0 (fetch BOTTOM of WREG)
                            WWIDTH
                            (IDIFFERENCE LOWESTY (fetch BOTTOM of WREG))
                            'TEXTURE
                            'REPLACE WHITESHADE)
                     (SETQ YBOT WHEIGHT)
                     (while (AND PREVLINE (NEQ PREVLINE TOPLINE))
                        do 

         (* Move down lines to be added, adjusting YBOT/YBASE and DISPALYLINE-ing them, 
       until the next line to do EQ TOPLINE)

                              [replace (LINEDESCRIPTOR YBOT) of PREVLINE
                                 with (COND
                                             [(AND (fetch (LINEDESCRIPTOR PREVLINE) of 
                                                                                             PREVLINE
                                                          )
                                                   (IGREATERP (fetch (LINEDESCRIPTOR CHAR1)
                                                                 of PREVLINE)
                                                          0)
                                                   (fetch (FMTSPEC FMTBASETOBASE)
                                                      of (fetch (LINEDESCRIPTOR LFMTSPEC)
                                                                of PREVLINE)))
                                              (SETQ YBOT (IDIFFERENCE
                                                          (IPLUS YBOT (fetch (LINEDESCRIPTOR
                                                                                  DESCENT)
                                                                         of (fetch
                                                                                 (LINEDESCRIPTOR
                                                                                  PREVLINE)
                                                                                   of PREVLINE)))
                                                          (IPLUS (fetch (FMTSPEC FMTBASETOBASE)
                                                                    of (fetch (LINEDESCRIPTOR
                                                                                       LFMTSPEC)
                                                                              of PREVLINE))
                                                                 (fetch (LINEDESCRIPTOR DESCENT)
                                                                    of PREVLINE]
                                             (T (SETQ YBOT (IDIFFERENCE YBOT (fetch (
                                                                                       LINEDESCRIPTOR
                                                                                         LHEIGHT)
                                                                                of PREVLINE]
                              (replace (LINEDESCRIPTOR YBASE) of PREVLINE
                                 with (IPLUS (fetch (LINEDESCRIPTOR YBOT) of PREVLINE)
                                                 (fetch (LINEDESCRIPTOR DESCENT) of PREVLINE)
                                                 ))
                              (\DISPLAYLINE TEXTOBJ PREVLINE W)
                              (SETQ PREVLINE (fetch (LINEDESCRIPTOR NEXTLINE) of PREVLINE]
              ((FLOATP DY)                                   (* Do a thumbing-type scroll)
               (SETQ CH# (IMAX (IMIN (SUB1 TEXTLEN)
                                     (FIXR (FTIMES TEXTLEN DY)))
                               1))
               (SETQ LINE (fetch (LINEDESCRIPTOR NEXTLINE) of LINES))
               [while (AND LINE (ILESSP (fetch (LINEDESCRIPTOR CHARLIM) of LINE)
                                           CH#)) do (SETQ LINE (fetch (LINEDESCRIPTOR 
                                                                                     NEXTLINE)
                                                                      of LINE))
                  finally (COND
                                 ((AND LINE (IGREATERP (fetch (LINEDESCRIPTOR CHAR1) of
                                                                                         LINE)
                                                   CH#))
                                  (SETQ LINE NIL]            (* find out if any line currently 
                                                           formatted includes the target char)
               (COND
                  ((AND LINE (fetch (LINEDESCRIPTOR NEXTLINE) of LINE)
                        (IGEQ (fetch (LINEDESCRIPTOR CHAR1) of LINE)
                              1))

         (* If so, let's do this as a fast scroll, rather than a complete repaint of the 
       screen)

                   [SETQ DY (COND
                               [(ILEQ WHEIGHT (fetch (LINEDESCRIPTOR YBOT) of LINE))
                                                             (* this line is off the top of the 
                                                           window)
                                (IMINUS (for (DESCENDLINE _ (fetch (LINEDESCRIPTOR NEXTLINE)
                                                                   of LINE))
                                           by (fetch (LINEDESCRIPTOR NEXTLINE) of 
                                                                                          DESCENDLINE
                                                         )
                                           while (AND DESCENDLINE (ILEQ WHEIGHT
                                                                            (fetch (
                                                                                       LINEDESCRIPTOR
                                                                                        YBOT)
                                                                               of DESCENDLINE)))
                                           sum 

         (* sum the heights of all the lines in between the new top line and the present 
       top line)

                                                 (fetch (LINEDESCRIPTOR LHEIGHT) of 
                                                                                          DESCENDLINE
                                                        ]
                               (T (IDIFFERENCE (IDIFFERENCE WHEIGHT (fetch (LINEDESCRIPTOR YBOT)
                                                                       of LINE))
                                         (fetch (LINEDESCRIPTOR LHEIGHT) of LINE]
                   (\TEDIT.SCROLLFN W 0 DY)

         (* recurse telling to normally scroll instead of thumb scroll so that the 
       screen is not blanked and reformatted unnecessarily)

                   )
                  (T [for LINE inside (fetch (SELECTION L1) of SEL) when LINE
                        do (replace (LINEDESCRIPTOR YBOT) of LINE
                                  with (SUB1 (fetch BOTTOM of WREG]
                                                             (* Make sure it thinks the old 
                                                           selection is off-screen for now)
                     [for LINE inside (fetch (SELECTION LN) of SEL) when LINE
                        do (replace (LINEDESCRIPTOR YBOT) of LINE
                                  with (SUB1 (fetch BOTTOM of WREG]
                     (BITBLT NIL 0 0 W 0 (fetch BOTTOM of WREG)
                            WWIDTH
                            (IDIFFERENCE WHEIGHT (fetch BOTTOM of WREG))
                            'TEXTURE
                            'REPLACE WHITESHADE)
                     (SETQ LINE (\TEDIT.FIND.FIRST.LINE TEXTOBJ WHEIGHT CH# W))
                                                             (* Find the first line to go in the 
                                                           window)
                     (replace (LINEDESCRIPTOR YBOT) of LINE with
                                                                    (IDIFFERENCE WHEIGHT
                                                                           (fetch (LINEDESCRIPTOR
                                                                                       LHEIGHT)
                                                                              of LINE)))
                                                             (* Set it up as the top line.)
                     (replace (LINEDESCRIPTOR YBASE) of LINE
                        with (IPLUS (fetch (LINEDESCRIPTOR YBOT) of LINE)
                                        (fetch (LINEDESCRIPTOR DESCENT) of LINE)))
                     (\DISPLAYLINE TEXTOBJ LINE W)
                     (\FILLWINDOW (fetch (LINEDESCRIPTOR YBOT) of LINE)
                            LINE TEXTOBJ NIL W)))            (* And fill out the window from 
                                                           there.)
               ))
           (AND POSTSCROLLFN (DOUSERFNS POSTSCROLLFN W))     (* For user subsystem cleanup)
           [COND
              ((fetch (SELECTION SET) of SEL)
               (\FIXSEL SEL TEXTOBJ)
               (AND SELWASON (\SHOWSEL SEL NIL T]
           [COND
              ((fetch (SELECTION SET) of (fetch (TEXTOBJ SHIFTEDSEL) of TEXTOBJ))
               (\FIXSEL (fetch (TEXTOBJ SHIFTEDSEL) of TEXTOBJ)
                      TEXTOBJ)
               (AND SHIFTEDSELWASON (\SHOWSEL (fetch (TEXTOBJ SHIFTEDSEL) of TEXTOBJ)
                                           NIL T]
           [COND
              ((fetch (SELECTION SET) of (fetch (TEXTOBJ MOVESEL) of TEXTOBJ))
               (\FIXSEL (fetch (TEXTOBJ MOVESEL) of TEXTOBJ)
                      TEXTOBJ)
               (AND MOVESELWASON (\SHOWSEL (fetch (TEXTOBJ MOVESEL) of TEXTOBJ)
                                        NIL T]
           [COND
              ((fetch (SELECTION SET) of (fetch (TEXTOBJ DELETESEL) of TEXTOBJ))
               (\FIXSEL (fetch (TEXTOBJ DELETESEL) of TEXTOBJ)
                      TEXTOBJ)
               (AND DELETESELWASON (\SHOWSEL (fetch (TEXTOBJ DELETESEL) of TEXTOBJ)
                                          NIL T]
           (\TEDIT.SET.WINDOW.EXTENT TEXTOBJ W])
)



(* ; "Process-world interfaces")

(DEFINEQ

(\TEDIT.PROCIDLEFN
  [LAMBDA (WINDOW)                                       (* ; "Edited 30-May-91 23:35 by jds")

         (* TEDIT's PROC.IDLEFN for regaining control.
       If the shift key is down, we're not trying to restart this window, just to copy 
       from it.)

    (GETMOUSESTATE)
    (COND
       [[AND (INSIDE? (DSPCLIPPINGREGION NIL WINDOW)
                    (LASTMOUSEX WINDOW)
                    (LASTMOUSEY WINDOW))
             [NOT (OR (SHIFTDOWNP 'SHIFT)
                      (SHIFTDOWNP 'META)
                      (KEYDOWNP 'MOVE)
                      (KEYDOWNP 'COPY]
             (PROCESSP (WINDOWPROP WINDOW 'PROCESS]          (* No SHIFT key down;
                                                           let's regain control.)
        (TTY.PROCESS (WINDOWPROP WINDOW 'PROCESS))
        (COND
           ((fetch (TEXTOBJ MENUFLG) of (WINDOWPROP (WHICHW)
                                                       'TEXTOBJ))
                                                             (* This is a MENU --
                                                           always select.)
            (\TEDIT.BUTTONEVENTFN WINDOW]
       (T                                                    (* Otherwise, let him select.)
          (\TEDIT.BUTTONEVENTFN WINDOW])

(\TEDIT.PROCENTRYFN
  [LAMBDA (NEWPROCESS OLDPROCESS)                            (* jds "15-Feb-84 16:59")
          
          (* TEDIT's PROCESS.ENTRYFN, which disarms any dangerous interrupts within the 
          editing world)

    (\TEDIT.INTERRUPT.SETUP NEWPROCESS])

(\TEDIT.PROCEXITFN
  [LAMBDA (THISP NEWP)                                       (* jds " 5-Apr-84 10:40")
          
          (* Re-arm any interrupts that TEdit turned off, so the poor user has them 
          available in other parts of the system.)

    (AND (WINDOWPROP (PROCESSPROP THISP 'WINDOW)
                'TEXTOBJ)
         (\TEDIT.INTERRUPT.SETUP THISP T])
)

(RPAQ? \CARETRATE 333)



(* ; "Caret handler;  stolen from CHAT.")

(DEFINEQ

(\EDIT.DOWNCARET
  [LAMBDA (CARET)                                        (* ; "Edited 13-Nov-87 08:25 by jds")
          
          (* ;; "Put the caret down -- i.e., MAKE IT VISIBLE -- as fast as possible")

    (LET* ((DS (fetch (TEDITCARET TCCARETDS) of CARET))
           (X (DSPXPOSITION NIL DS))
           (Y (DSPYPOSITION NIL DS)))
          (replace (TEDITCARET TCCARETX) of CARET with X)
          (replace (TEDITCARET TCCARETY) of CARET with Y)
          (replace (TEDITCARET TCFORCEUP) of CARET with NIL)
          (\CARET.FLASH? DS (fetch (TEDITCARET TCCARET) of CARET)
                 10 NIL X Y])

(\EDIT.FLIPCARET
  [LAMBDA (CARET FORCE)                                      (* ; "Edited 30-Mar-87 16:50 by jds")
                                                             (* ; 
                                                     "changes the caret from on to off or off to on.")
          
          (* ;; "(COND ((OR FORCE (fetch TCFORCEDDOWN of CARET) (AND (IGREATERP (CLOCK0 (fetch TCNOWTIME of CARET)) (fetch TCTHENTIME of CARET)) (NOT (fetch TCFORCEUP of CARET)))) (UNINTERRUPTABLY (* note the time of the next change.) (* must be done without creating boxes because happens during keyboard wait.) (\BOXIPLUS (CLOCK0 (fetch TCTHENTIME of CARET)) (fetch TCCARETRATE of CARET)) (* Set the time for the next caret transition) (replace TCUP of CARET with (NOT (fetch TCUP of CARET))) (* Invert the sense of the caret's UPness) (replace TCFORCEDDOWN of CARET with NIL) (* Turn off the force-down & Force-up flags) (replace TCFORCEUP of CARET with NIL) (PROG ((DS (fetch TCCARETDS of CARET)) (CURS (fetch TCCURSORBM of CARET))) (COND ((fetch TCUP of CARET)) (T (* We're putting the caret down -- set the new X,Y position) (replace TCCARETX of CARET with (DSPXPOSITION NIL DS)) (replace TCCARETY of CARET with (DSPYPOSITION NIL DS)))) (BITBLT (fetch (CURSOR CUIMAGE) of CURS) 0 0 DS (IDIFFERENCE (fetch TCCARETX of CARET) (fetch (CURSOR CUHOTSPOTX) of CURS)) (IDIFFERENCE (fetch TCCARETY of CARET) (fetch (CURSOR CUHOTSPOTY) of CURS)) CURSORWIDTH CURSORHEIGHT (QUOTE INPUT) (QUOTE INVERT))))))")

    NIL])

(TEDIT.FLASHCARET
  [LAMBDA (CARETS)                                           (* jds "16-Jul-85 12:35")
          
          (* Unless the caret is constrained to be INVISIBLE, give it a chance to flash.)

    (bind (FIRSTTIME _ T) for CARET inside CARETS
       do (COND
             ((NOT (fetch TCFORCEUP of CARET))               (* The caret need not stay invisible.)
                                                             (* (\EDIT.FLIPCARET CARET))
              (COND
                 (FIRSTTIME (SETQ FIRSTTIME NIL)
                        (\CARET.FLASH? (fetch TCCARETDS of CARET)
                               (fetch TCCARET of CARET)
                               NIL NIL (fetch TCCARETX of CARET)
                               (fetch TCCARETY of CARET)))
                 (T (\CARET.FLASH.AGAIN (fetch TCCARET of CARET)
                           (fetch TCCARETDS of CARET)
                           (fetch TCCARETX of CARET)
                           (fetch TCCARETY of CARET])

(\EDIT.UPCARET
  [LAMBDA (CARET)                                        (* ; "Edited 13-Nov-87 08:27 by jds")
          
          (* ;; "Take the caret up -- i.e., MAKE IT INVISIBLE -- and keep it up")

    (\CARET.DOWN (fetch (TEDITCARET TCCARETDS) of CARET))
          
          (* ;; "The TCFORCEUP field is set so that the caret will stay off-screen:")

    (replace (TEDITCARET TCFORCEUP) of CARET with T])

(TEDIT.NORMALIZECARET
  [LAMBDA (TEXTOBJ SEL)                                  (* ; "Edited 30-May-91 23:35 by jds")

    (* ;; "Scroll the text window so that the caret is visible in it.")

    (SETQ TEXTOBJ (TEXTOBJ TEXTOBJ))
    (PROG* ((SEL (OR SEL (fetch (TEXTOBJ SEL) of TEXTOBJ)))
            [WINDOW (OR (fetch (TEXTOBJ SELWINDOW) of TEXTOBJ)
                        (CAR (fetch (TEXTOBJ \WINDOW) of TEXTOBJ]
            (WREG (AND WINDOW (DSPCLIPPINGREGION NIL WINDOW)))
            (WHEIGHT (AND WREG (fetch PTOP of WREG)))
            (WBOTTOM (AND WREG (fetch BOTTOM of WREG)))
            (SELWASON (fetch (SELECTION ONFLG) of SEL))
            CH# Y LINE)
           (OR WINDOW (RETURN))
           (OR (fetch (SELECTION SET) of SEL)
               (RETURN))                                     (* ; 
                                                      "If there is no selection set, don't bother.")
           (COND
              (SELWASON                                      (* ; 
                                                        "The selection is hilited, so turn it off.")
                     (\SHOWSEL SEL NIL NIL)))
           (for WW inside (fetch (TEXTOBJ \WINDOW) of TEXTOBJ) as L1
              inside (fetch (SELECTION L1) of SEL) as LN
              inside (fetch (SELECTION LN) of SEL) when (EQ WW WINDOW)
              do 

                    (* ;; "Get to the line info for the SELWINDOW.  (failing that, the main/only edit window) Use that info to decide where the caret is.")

                    (SELECTQ (fetch (SELECTION POINT) of SEL)
                        (LEFT                                (* ; 
            "The caret is at the left end of the selection;  hunt for the first selected character")
                              (SETQ CH# (fetch (SELECTION CH#) of SEL))
                              (SETQ Y (OR (AND L1 (fetch (LINEDESCRIPTOR YBOT) of L1))
                                          (fetch (SELECTION Y0) of SEL))))
                        (RIGHT                               (* ; 
            "The caret is at the right end of the selection;  hunt for the last selected character")
                               (SETQ CH# (SUB1 (fetch (SELECTION CHLIM) of SEL)))
                               (SETQ Y (OR (AND LN (fetch (LINEDESCRIPTOR YBOT) of LN))
                                           (fetch (SELECTION YLIM) of SEL))))
                        NIL))
           (COND
              ((AND (OR (IGEQ Y WHEIGHT)
                        (ILESSP Y WBOTTOM))
                    (NOT (fetch (TEXTOBJ TXTNEEDSUPDATE) of TEXTOBJ)))
                                                             (* ; 
                                                    "The caret is off-screen.  Scroll to get it on")
               (for LINE inside (fetch (SELECTION L1) of SEL) when LINE
                  do (replace (LINEDESCRIPTOR YBOT) of LINE with (SUB1 WBOTTOM)))
                                                             (* ; 
                                      "Make sure it thinks the old selection is off-screen for now")
               (for LINE inside (fetch (SELECTION LN) of SEL) when LINE
                  do (replace (LINEDESCRIPTOR YBOT) of LINE with (SUB1 WBOTTOM)))
               (SETQ LINE (\TEDIT.FIND.FIRST.LINE TEXTOBJ WHEIGHT (IMAX 1 (IMIN CH#
                                                                                (fetch
                                                                                 (TEXTOBJ TEXTLEN)
                                                                                   of TEXTOBJ)))
                                 WINDOW))                    (* ; 
                                                          "Find the first line to go in the window")
               (replace (LINEDESCRIPTOR YBOT) of LINE with (IDIFFERENCE
                                                                        WHEIGHT
                                                                        (fetch (LINEDESCRIPTOR
                                                                                    LHEIGHT)
                                                                           of LINE)))
                                                             (* ; "Set it up as the top line.")
               (replace (LINEDESCRIPTOR YBASE) of LINE with (IPLUS (fetch
                                                                                (LINEDESCRIPTOR
                                                                                 YBOT) of LINE)
                                                                               (fetch
                                                                                (LINEDESCRIPTOR
                                                                                 DESCENT)
                                                                                  of LINE)))
               (\DISPLAYLINE TEXTOBJ LINE WINDOW)
               (\FILLWINDOW (fetch (LINEDESCRIPTOR YBOT) of LINE)
                      LINE TEXTOBJ NIL WINDOW)               (* ; 
                                                           "And fill out the window from there.")
               (\FIXSEL SEL TEXTOBJ)
               (\TEDIT.SET.WINDOW.EXTENT TEXTOBJ WINDOW)))
           (COND
              (SELWASON                                      (* ; 
                                                    "The selection is hilited, so turn it back on.")
                     (\SHOWSEL SEL NIL T])

(\SETCARET
  [LAMBDA (X Y DS TEXTOBJ CARET)                         (* ; "Edited 30-May-91 23:35 by jds")
    (PROG ((CLIPREGION (DSPCLIPPINGREGION NIL DS)))
          (COND
             [(AND (ILESSP Y (fetch PTOP of CLIPREGION))
                   (IGEQ Y (fetch BOTTOM of CLIPREGION)))
              (MOVETO X Y DS)
              (COND
                 ((NOT (fetch (TEXTOBJ TXTREADONLY) of TEXTOBJ))
                  (\EDIT.DOWNCARET CARET]
             (T 

         (* The caret is off screen. Do a MOVETO so the system carets don't appear at 
       odd times.)

                (MOVETO (IPLUS (fetch PTOP of CLIPREGION)
                               12)
                       0 DS)))                               (* Only put down the caret the line 
                                                           it points to is on-screen)
      ])

(\TEDIT.CARET
  [LAMBDA (CARETS)                                           (* jds "12-Jul-85 11:18")
          
          (* Reset the caret to its normal state state, from the selection caret)

    (for CARET inside CARETS do (replace TCCARET of CARET with (\CARET.CREATE BXCARET])
)



(* ; "Menu interfacing")

(DEFINEQ

(TEDIT.ADD.MENUITEM
  [LAMBDA (MENU ITEM)                                        (* jds " 9-AUG-83 09:55")
          
          (* Adds ITEM to the MENU, and updates all the stuff.)

    (PROG (OLDITM)
          (COND
             ((MEMBER ITEM (fetch ITEMS of MENU))            (* Do nothing--it's already in the 
                                                             menu)
              )
             ([AND (LISTP ITEM)
                   (SETQ OLDITM (SASSOC (CAR ITEM)
                                       (fetch ITEMS of MENU]
          
          (* The menu item exists. Make sure the thing behind it is right.)

              (RPLACD OLDITM (CDR ITEM)))
             (T 
          
          (* It isn't in the menu, so go ahead and add it.)

                (replace ITEMS of MENU with (NCONC1 (fetch ITEMS of MENU)
                                                   ITEM))
                (COND
                   ((EQ (fetch MENUCOLUMNS of MENU)
                        1)
          
          (* If there is only one column, force a re-figuring of the number of rows)

                    (replace MENUROWS of MENU with NIL))
                   ((EQ (fetch MENUROWS of MENU)
                        1)                                   (* There's only one row, so recompute 
                                                             %# of columns.)
                    (replace MENUCOLUMNS of MENU with NIL)))
                (replace ITEMWIDTH of MENU with 10000)
                (replace ITEMHEIGHT of MENU with 10000)
                (replace IMAGE of MENU with NIL)             (* Force it to create a new menu 
                                                             image.)
                (UPDATE/MENU/IMAGE MENU])

(TEDIT.DEFAULT.MENUFN
  [LAMBDA (W)                                            (* ; "Edited 30-May-91 23:35 by jds")

    (* ;; 
  "Default MENU Fn for editor windows--displays a menu of items & acts on the commands received.")

    (PROG ((TEXTOBJ (WINDOWPROP W 'TEXTOBJ))
           (WMENU (WINDOWPROP W 'TEDIT.MENU))
           THISMENU CH OFILE OCURSOR PCTB LINES SEL ITEM)
          (COND
             ((EQ (fetch (TEXTOBJ EDITOPACTIVE) of TEXTOBJ)
                  T)

              (* ;; 
            "We're busy doing something, but not sure what.  Give a general 'please wait' msg:")

              (TEDIT.PROMPTPRINT TEXTOBJ "Edit operation in progress; please wait." T)
              (RETURN))
             ((fetch (TEXTOBJ EDITOPACTIVE) of TEXTOBJ)

              (* ;; "We know specifically what's happening.  Tell him:")

              (TEDIT.PROMPTPRINT TEXTOBJ (CONCAT (fetch (TEXTOBJ EDITOPACTIVE) of TEXTOBJ
                                                            )
                                                    " in progress; please wait.")
                     T)
              (RETURN)))
          (SETQ PCTB (fetch (TEXTOBJ PCTB) of TEXTOBJ))
          (SETQ THISMENU (COND
                            (WMENU)
                            ((SETQ WMENU (WINDOWPROP W 'TEDIT.MENU.COMMANDS))
                             (PROG1 (SETQ WMENU (\TEDIT.CREATEMENU WMENU))
                                 (WINDOWPROP W 'TEDIT.MENU WMENU)))
                            (TEDIT.DEFAULT.MENU)))
          (SETQ ITEM (MENU THISMENU))
          (ERSETQ (RESETLST
                      [RESETSAVE (\TEDIT.MARKACTIVE TEXTOBJ)
                             '(AND (\TEDIT.MARKINACTIVE OLDVALUE]
                      (replace (TEXTOBJ EDITOPACTIVE) of TEXTOBJ with (OR (CAR ITEM)
                                                                                      T))
                                                             (* ; 
                                                        "So we ca ntell the guy WHAT op is active.")
                      [SELECTQ (CAR ITEM)
                          ((Put |Put Formatted Document|) 
                               (TEDIT.PUT TEXTOBJ NIL NIL (TEXTPROP TEXTOBJ 'CLEARPUT)))
                          (Plain-Text (TEDIT.PUT TEXTOBJ NIL NIL T))
                          (Old-Format                        (* ; 
                                                      "Write out the file in the OLD TEdit format.")
                                      (TEDIT.PUT TEXTOBJ NIL NIL NIL T))
                          ((Get |Get Formatted Document|)    (* ; 
                                               "Get a new file (overwriting the one being edited.)")
                               (TEDIT.GET TEXTOBJ NIL (TEXTPROP TEXTOBJ 'CLEARGET)))
                          (Unformatted% Get 
                               (TEDIT.GET TEXTOBJ NIL T))
                          (Include                           (* ; 
                                                           "Insert a file where the caret is")
                                   (TEDIT.INCLUDE TEXTOBJ))
                          (Quit                              (* ; "Stop this session.")
                                (\TEDIT.QUIT W))
                          (Substitute                        (* ; "Search-and-replace")
                                      (RESETLST
                                          (RESETSAVE (CURSOR WAITINGCURSOR))
                                          (TEDIT.SUBSTITUTE (fetch (TEXTOBJ STREAMHINT)
                                                               of TEXTOBJ))))
                          (Find                              (* ; 
                                                    "Case sensitive search, with * and # wildcards")
                                [SETQ OFILE (TEDIT.GETINPUT TEXTOBJ "Text to find: "
                                                   (WINDOWPROP W 'TEDIT.LAST.FIND.STRING)
                                                   (CHARCODE (EOL LF ESC]
                                [COND
                                   (OFILE (SETQ SEL (fetch (TEXTOBJ SEL) of TEXTOBJ))
                                          (\SHOWSEL SEL NIL NIL)
                                          (TEDIT.PROMPTPRINT TEXTOBJ "Searching..." T)
                                          (SETQ CH (TEDIT.FIND TEXTOBJ (MKSTRING OFILE)
                                                          NIL NIL T))
                                          (COND
                                             (CH             (* ; "We found the target text.")
                                                 (TEDIT.PROMPTPRINT TEXTOBJ "Done.")
                                                 (replace (SELECTION CH#) of SEL
                                                    with (CAR CH))
                                                             (* ; 
                                                           "Set up SELECTION to be the found text")
                                                 (replace (SELECTION CHLIM) of SEL
                                                    with (ADD1 (CADR CH)))
                                                 [replace (SELECTION DCH) of SEL
                                                    with (ADD1 (IDIFFERENCE (CADR CH)
                                                                          (CAR CH]
                                                 (replace (SELECTION POINT) of SEL
                                                    with 'RIGHT)
                                                 (replace (TEXTOBJ CARETLOOKS) of TEXTOBJ
                                                    with (\TEDIT.GET.INSERT.CHARLOOKS TEXTOBJ SEL
                                                                    ))
                                                 (TEDIT.RESET.EXTEND.PENDING.DELETE SEL)
                                                             (* ; "And never pending a deletion.")
                                                 (\FIXSEL SEL TEXTOBJ)
                                                 (TEDIT.NORMALIZECARET TEXTOBJ)
                                                 (\SHOWSEL SEL NIL T)
                                                 (WINDOWPROP W 'TEDIT.LAST.FIND.STRING OFILE)
                                                             (* ; "And get it into the window")
                                                 )
                                             (T (TEDIT.PROMPTPRINT TEXTOBJ "(not found)")
                                                (\SHOWSEL SEL NIL T]
                                (replace (TEXTOBJ \INSERTPCVALID) of TEXTOBJ with NIL)
                                                             (* ; 
         "Doing a FIND invalidates the insertion-piece cahce?  I don't understand this.  Check it.")
                                )
                          (Looks                             (* ; 
                                               "He wants to set the font for the current selection")
                                 (\TEDIT.LOOKS TEXTOBJ))
                          (Hardcopy                          (* ; "Print this document")
                                    (TEDIT.HARDCOPY TEXTOBJ))
                          (Press% File                       (* ; 
                                                   "Make a hardcopy file with this document in it.")
                                       (TEDIT.HCPYFILE TEXTOBJ))
                          (Expanded% Menu                    (* ; 
                                                           "Open the expanded operations menu.")
                               (\TEDIT.EXPANDED.MENU TEXTOBJ))
                          (Character% Looks                  (* ; 
                                                        "Open the menu for setting character looks")
                               (\TEDIT.EXPANDEDCHARLOOKS.MENU TEXTOBJ))
                          (Paragraph% Formatting             (* ; 
                                                           "Open the paragraph formatting menu")
                               (\TEDIT.EXPANDEDPARA.MENU TEXTOBJ))
                          (Page% Layout                      (* ; "Open the page-layout menu")
                                        (\TEXTMENU.START (COPYTEXTSTREAM TEDIT.EXPANDED.PAGEMENU T)
                                               (\TEDIT.PRIMARYW TEXTOBJ)
                                               "Page Layout Menu" 150))
                          (COND
                             ((CAR ITEM)                     (* ; 
         "This is a user-supplied entry.  Get the function, and apply it to the TEXTSTREAM for him")
                              (APPLY* (CAR ITEM)
                                     (fetch (TEXTOBJ STREAMHINT) of TEXTOBJ])])

(TEDIT.REMOVE.MENUITEM
  [LAMBDA (MENU ITEM)                                        (* gbn "26-Apr-84 04:06")
    (PROG (ITEMLIST)
          [COND
             ((OR (LITATOM ITEM)
                  (STRINGP ITEM))
              (for X in (fetch ITEMS of MENU) do (COND
                                                    ((AND (LISTP X)
                                                          (EQUAL (CAR X)
                                                                 ITEM))
                                                     (RETURN (SETQ ITEM X]
          (RETURN (COND
                     ((MEMBER ITEM (SETQ ITEMLIST (fetch ITEMS of MENU)))
                      (replace ITEMS of MENU with (REMOVE ITEM ITEMLIST))
                      (replace MENUCOLUMNS of MENU with NIL)
                      (replace MENUROWS of MENU with NIL)
                      (UPDATE/MENU/IMAGE MENU))
                     (T NIL])

(\TEDIT.CREATEMENU
  [LAMBDA (ITEMS)                                            (* ; "Edited 16-Oct-87 14:21 by jds")
          
          (* ;; "Create a TEdit command menu, given a list of menu items.")

    (create MENU
           ITEMS _ ITEMS
           CENTERFLG _ T
           MENUFONT _ (FONTCREATE 'HELVETICA 10 'BOLD)
           WHENHELDFN _ '\TEDIT.MENU.WHENHELDFN
           WHENSELECTEDFN _ '\TEDIT.MENU.WHENSELECTEDFN])

(\TEDIT.MENU.WHENHELDFN
  [LAMBDA (ITEM MENU BUTTON)                                 (* jds "10-Apr-84 15:14")
    (COND
       ((ATOM ITEM)
        (CLRPROMPT)
        (PROMPTPRINT (SELECTQ ITEM
                         (Put "Sends the document to a file")
                         (Get "Gets a new file as the document to edit.")
                         (Looks "Changes the font/size/etc. of characters")
                         (Find "Searches for a string")
                         (Quit "Ends the edit session")
                         (Hardcopy "Formats and sends the file to a printer.")
                         (Press% File "Creates a PRESS or INTERPRESS file of the document.")
                         "")))
       (T (DEFAULTMENUHELDFN ITEM])

(\TEDIT.MENU.WHENSELECTEDFN
  [LAMBDA (ITEM MENU BUTTON)                                 (* ; "Edited 16-Oct-87 14:21 by jds")
          
          (* ;; "A Selection fn for preserving the button pressed, for special handling in PUT, e.g.")

    (CONS (DEFAULTWHENSELECTEDFN ITEM MENU BUTTON)
          BUTTON])
)
(DECLARE%: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS TEDIT.DEFAULT.MENU)
)
(DECLARE%: DONTEVAL@LOAD DOCOPY 

(RPAQ TEDIT.DEFAULT.MENU
      [\TEDIT.CREATEMENU '((Put 'Put NIL (SUBITEMS |Put Formatted Document| Plain-Text Old-Format))
                           (Get 'Get NIL (SUBITEMS |Get Formatted Document| Unformatted% Get))
                           Include Find Looks Substitute Quit (Expanded% Menu 'Expanded% Menu NIL
                                                                     (SUBITEMS Expanded% Menu 
                                                                            Character% Looks 
                                                                            Paragraph% Formatting 
                                                                            Page% Layout])
)
(DECLARE%: DONTEVAL@LOAD DOCOPY 

[OR (SASSOC 'TEdit BackgroundMenuCommands)
    (NCONC1 BackgroundMenuCommands '(TEdit '(TEDIT)
                                           "Opens a TEdit window for use."]

(SETQ BackgroundMenu NIL)
)



(* ; "titled icon info")


(FILESLOAD ICONW)

(RPAQQ TEDITICON #*(87 95)OOOOOOOOOOOOOOOOON@@@@@@OOOOOOOOOOOOOOOOON@@@@@@OOOOOOOOOOOOOOOOON@@@@@@O@AA@@CH@@@H@H@@@G@@@@@@OOOOOOOOOOOOOOOOOOH@@@@@OH@MJH@@F@@@@@@@B@N@@@@@OOOOOOOOOOOHGOOOOOOH@@@@MO@@@@@F@@@OL@@C@@@OH@@@LOOOOOOOOOOOOOOOOOOOON@@LGOOOOOOOOOOOOOOOOOOON@@LAOOOOOOOOOOOOOOOOOOON@@L@CN@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@LD@N@@@@@@@@@@@@@@@@@N@@MLDN@@@@@@@@@@@@@@@@@N@@LGBN@@@@@@@@@@@@@@@@@N@@LDNN@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@M@@N@@@@@@@@@@@@@@@@@N@@LGBN@@@@@@@@@@@@@@@@@N@@LDNN@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@MH@N@@@@@@@@@@@@@@@@@N@@MFBN@@@@@@@@@@@@@@@@@N@@LELN@@@@@@@@@@@@@@@@@N@@LDBN@@@@@@@@@@@@@@@@@N@@LBBN@@@@@@@@@@@@@@@@@N@@LALN@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@MH@N@@@@@@@@@@@@@@@@@N@@M@DN@@@@@@@@@@@@@@@@@N@@MDBN@@@@@@@@@@@@@@@@@N@@MCBN@@@@@@@@@@@@@@@@@N@@MNBN@@@@@@@@@@@@@@@@@N@@MCJN@@@@@@@@@@@@@@@@@N@@L@FN@@@@@@@@@@@@@@@@@N@@L@BN@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@MH@N@@@@@@@@@@@@@@@@@N@@M@@N@@@@@@@@@@@@@@@@@N@@M@@N@@@@@@@@@@@@@@@@@N@@ML@N@@@@@@@@@@@@@@@@@N@@MCJN@@@@@@@@@@@@@@@@@N@@M@FN@@@@@@@@@@@@@@@@@N@@MHBN@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@N@@N@@@@@@@@@@@@@@@@@N@@G@@N@@@@@@@@@@@@@@@@@N@@GH@N@@@@@@@@@@@@@@@@@N@@CN@N@@@@@@@@@@@@@@@@@N@@AOHN@@@@@@@@@@@@@@@@@N@@@GOOOOOOOOOOOOOOOOOOON@@@AOOOOOOOOOOOOOOOOOOON@@@@COOOOOOOOOOOOOOOOOON@@
)

(RPAQQ TEDITMASK
)

(RPAQ? TEDIT.ICON.FONT (FONTCREATE 'HELVETICA 8 'BOLD))

(RPAQ? TEDIT.ICON.TITLE.REGION [CONS 16 (CONS 4 (CONS 64 (CONS 77 NIL])

(RPAQ? TEDIT.TITLED.ICON.TEMPLATE (CONS TEDITICON (CONS TEDITMASK (CONS TEDIT.ICON.TITLE.REGION 
                                                                            NIL))))
(PUTPROPS TEDITWINDOW COPYRIGHT ("John Sybalsky & Xerox Corporation" 1983 1984 1985 1986 1987 1988 
1989 1990 1991 1993 1994 1999))
(DECLARE%: DONTCOPY
  (FILEMAP (NIL (7130 91759 (TEDIT.CREATEW 7140 . 8276) (\TEDIT.CREATEW.FROM.REGION 8278 . 9262) (
TEDIT.CURSORMOVEDFN 9264 . 19916) (TEDIT.CURSOROUTFN 19918 . 20453) (TEDIT.WINDOW.SETUP 20455 . 22264)
 (TEDIT.MINIMAL.WINDOW.SETUP 22266 . 30055) (\TEDIT.ACTIVE.WINDOWP 30057 . 31038) (
\TEDIT.BUTTONEVENTFN 31040 . 54735) (\TEDIT.WINDOW.OPS 54737 . 58540) (\TEDIT.EXPANDFN 58542 . 58945) 
(\TEDIT.MAINW 58947 . 60236) (\TEDIT.PRIMARYW 60238 . 61450) (\TEDIT.COPYINSERTFN 61452 . 62423) (
\TEDIT.NEWREGIONFN 62425 . 64892) (\TEDIT.SET.WINDOW.EXTENT 64894 . 70996) (\TEDIT.SHRINK.ICONCREATE 
70998 . 73270) (\TEDIT.SHRINKFN 73272 . 73847) (\TEDIT.SPLITW 73849 . 79950) (\TEDIT.UNSPLITW 79952 . 
85646) (\TEDIT.WINDOW.SETUP 85648 . 91368) (\SAFE.FIRST 91370 . 91757)) (92905 93812 (TEDITWINDOWP 
92915 . 93810)) (93849 96345 (TEDIT.GETINPUT 93859 . 95842) (\TEDIT.MAKEFILENAME 95844 . 96343)) (
96394 102845 (TEDIT.PROMPTPRINT 96404 . 99308) (TEDIT.PROMPTFLASH 99310 . 101265) (
\TEDIT.PROMPT.PAGEFULLFN 101267 . 102843)) (103080 107120 (TEXTSTREAM.TITLE 103090 . 103700) (
\TEDIT.ORIGINAL.WINDOW.TITLE 103702 . 105736) (\TEDIT.WINDOW.TITLE 105738 . 106408) (
\TEXTSTREAM.FILENAME 106410 . 107118)) (107163 151887 (TEDIT.DEACTIVATE.WINDOW 107173 . 114322) (
\TEDIT.REPAINTFN 114324 . 117181) (\TEDIT.RESHAPEFN 117183 . 122803) (\TEDIT.SCROLLFN 122805 . 151885)
) (151929 153978 (\TEDIT.PROCIDLEFN 151939 . 153288) (\TEDIT.PROCENTRYFN 153290 . 153583) (
\TEDIT.PROCEXITFN 153585 . 153976)) (154057 165057 (\EDIT.DOWNCARET 154067 . 154748) (\EDIT.FLIPCARET 
154750 . 156285) (TEDIT.FLASHCARET 156287 . 157401) (\EDIT.UPCARET 157403 . 157856) (
TEDIT.NORMALIZECARET 157858 . 163809) (\SETCARET 163811 . 164731) (\TEDIT.CARET 164733 . 165055)) (
165091 178846 (TEDIT.ADD.MENUITEM 165101 . 167016) (TEDIT.DEFAULT.MENUFN 167018 . 176285) (
TEDIT.REMOVE.MENUITEM 176287 . 177288) (\TEDIT.CREATEMENU 177290 . 177743) (\TEDIT.MENU.WHENHELDFN 
177745 . 178515) (\TEDIT.MENU.WHENSELECTEDFN 178517 . 178844)))))
STOP
