(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)

(FILECREATED "23-Sep-2023 15:30:26" {WMEDLEY}<library>UNIXUTILS.;7 7943   

      :EDIT-BY rmk

      :CHANGES-TO (FNS SLASHIT)

      :PREVIOUS-DATE "22-Sep-2023 15:28:19" {WMEDLEY}<library>UNIXUTILS.;6)


(PRETTYCOMPRINT UNIXUTILSCOMS)

(RPAQQ UNIXUTILSCOMS
       ((DECLARE%: EVAL@COMPILE DONTCOPY                     (* ; "For PROCESS-COMMAND")
               (FILES (FROM LOADUPS)
                      EXPORTS.ALL))
        (GLOBALVARS ShellBrowser)
        (INITVARS (ShellBrowser))
        (FUNCTIONS ShellCommand ShellWhich)
        (FNS ShellBrowser ShellBrowse PROCESS-COMMAND SLASHIT)
        (PROPS (UNIXUTILS FILETYPE))))
(DECLARE%: EVAL@COMPILE DONTCOPY 

(FILESLOAD (FROM LOADUPS)
       EXPORTS.ALL)
)
(DECLARE%: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS ShellBrowser)
)

(RPAQ? ShellBrowser )

(CL:DEFUN ShellCommand (Cmd &OPTIONAL (Output T))
   (CL:WITH-OPEN-STREAM (s (CREATE-PROCESS-STREAM Cmd))
          (CL:TAGBODY [SETFILEINFO s 'ENDOFSTREAMOP #'(CL:LAMBDA (s)
                                                             (GO OUT]
                 (CL:LOOP (PRINTCCODE (READCCODE s)
                                 Output))
                 OUT))
   NIL)

(CL:DEFUN ShellWhich (Cmd)                                   (* ; "Edited 18-Jan-2023 13:19 by FGH")
   [CL:WITH-OPEN-STREAM (S (OPENSTREAM '{NODIRCORE} 'BOTH))
          (ShellCommand (CONCAT "which " Cmd)
                 S)
          (COND
             ((EQ (GETEOFPTR S)
                  0)
              NIL)
             (T (SETFILEPTR S 0)
                (MKSTRING (READ S])
(DEFINEQ

(ShellBrowser
  [LAMBDA NIL                                                (* ; "Edited 18-Jan-2023 20:30 by FGH")
    (OR ShellBrowser (SETQ ShellBrowser (LET (CMDPATH)
                                             (if (STRPOS "darwin" (OR (UNIX-GETENV "OSTYPE")
                                                                      (UNIX-GETENV "PATH")))
                                                 then 
                                                      (* ;; " MacOS")

                                                      "open"
                                               elseif (SETQ CMDPATH (ShellWhich "wslview"))
                                                 then 
                                                      (* ;; "windows with WSL")

                                                      CMDPATH
                                               elseif (SETQ CMDPATH (ShellWhich "xdg-open"))
                                                 then 
                                                      (* ;; "Linux systems with xdg-utils installed ")

                                                      CMDPATH
                                               elseif (SETQ CMDPATH (ShellWhich "git"))
                                                 then 
                                                      (* ;; " Systems with git installed")

                                                      (CONCAT CMDPATH " web--browse") 
                                                             (* ; "")
                                               elseif (SETQ CMDPATH (ShellWhich "lynx"))
                                                 then 
                                                      (* ;; " Systems with lynx installed")

                                                      (LET (CMDPATH2)
                                                           (if (SETQ CMDPATH2 (ShellWhich "xterm"))
                                                               then (CONCAT CMDPATH2 " -e " CMDPATH)
                                                             else (LIST CMDPATH)))
                                               else 
                                                    (* ;; 
                                                    " Out of ideas - just return a dummy function")

                                                    "true"])

(ShellBrowse
  [LAMBDA (URL)                                              (* ; "Edited 18-Jan-2023 20:32 by FGH")

    (* ;; " Open the web page specified by URL using an external browser via shell call")

    (* ;; 
  " URL must start with http:// or https:// (case ireelevant) or this function will just return NIL.")

    (* ;; " Returns T otherwise.")

    (SETQ URL (MKSTRING URL))
    (if (OR (EQ (STRPOS "http://" (L-CASE URL))
                1)
            (EQ (STRPOS "https://" (L-CASE URL))
                1))
        then (LET ((BROWSER (ShellBrowser)))
                  (if (LISTP BROWSER)
                      then (CHAT 'SHELL NIL (CONCAT (CAR BROWSER)
                                                   " '" URL "'"))
                    else (ShellCommand (CONCAT BROWSER " '" URL "'" 
                                              " >>/tmp/ShellBrowser-warnings-$$.txt")))
                  T)
      else NIL])

(PROCESS-COMMAND
  [LAMBDA (CMD)                                              (* ; "Edited 17-Jul-2022 08:17 by rmk")

    (* ;; "This sets up an asynchronous process and waits until it returns with an exit code.  Typically 0 means success.")

    (CL:WITH-OPEN-STREAM (PS (CREATE-PROCESS-STREAM CMD))
           (BIND CODE WHILE (EQ T (SETQ CODE (OR (SUBRCALL UNIX-HANDLECOMM 7 (fetch (STREAM F1)
                                                                                of PS))
                                                 0))) DO (BLOCK) FINALLY (RETURN CODE])

(SLASHIT
  [LAMBDA (X LCASEDIRS NOHOST)                               (* ; "Edited 23-Sep-2023 15:27 by rmk")

    (* ;; "It would also be nice to use the generic unpackfilename/packfilename tools.  But packfilename sticks in brackets again, and sticks a dot on when removing the version.")

    (* ;; "Perhaps this should be a per file-device operation that maps device names into the local file system.")

    (* ;; "This is a first approximation to a utility that converts a filename X on a host whose files physically reside in the local Unix file system into the strings that shell commands can use to reference that file.  For now, this just involves replacing directory brackets with /, removing the host, and perhaps lower-casing the directory.  It probably should be extended to deal with version number translation, for now it just keeps the ; version. ")

    (LET [LASTDIRPOS SLASHED (DIRPOS (ADD1 (OR (STRPOS "}" X)
                                               0]
         [SETQ SLASHED (CONCATCODES (FOR I C FROM DIRPOS WHILE (SETQ C (NTHCHARCODE X I))
                                       COLLECT (SELCHARQ C
                                                    ((< >) 
                                                         (SETQ LASTDIRPOS I)
                                                         (CHARCODE /))
                                                    (/ (SETQ LASTDIRPOS I)
                                                       C)
                                                    C]
         (CL:WHEN (AND LCASEDIRS LASTDIRPOS)
             (SETQ LASTDIRPOS (ADD1 (IDIFFERENCE LASTDIRPOS DIRPOS)))
             (SETQ SLASHED (CONCAT (L-CASE (SUBSTRING SLASHED 1 LASTDIRPOS))
                                  (OR (SUBSTRING SLASHED (ADD1 LASTDIRPOS))
                                      ""))))
         (CL:IF (OR (EQ DIRPOS 1)
                    NOHOST)
             SLASHED
             (CONCAT (SUBSTRING X 1 (SUB1 DIRPOS))
                    SLASHED))])
)

(PUTPROPS UNIXUTILS FILETYPE CL:COMPILE-FILE)
(DECLARE%: DONTCOPY
  (FILEMAP (NIL (902 1275 (ShellCommand 902 . 1275)) (1277 1676 (ShellWhich 1277 . 1676)) (1677 7865 (
ShellBrowser 1687 . 4210) (ShellBrowse 4212 . 5204) (PROCESS-COMMAND 5206 . 5819) (SLASHIT 5821 . 7863
)))))
STOP
