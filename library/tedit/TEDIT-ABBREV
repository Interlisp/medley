(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)

(FILECREATED " 5-Sep-2025 18:50:19" 
{DSK}<Users>kaplan>Local>medley3.5>working-medley>library>tedit>TEDIT-ABBREV.;29 17935  

      :EDIT-BY rmk

      :CHANGES-TO (VARS TEDIT-ABBREVCOMS)

      :PREVIOUS-DATE " 5-Sep-2025 12:24:55" 
{DSK}<Users>kaplan>Local>medley3.5>working-medley>library>tedit>TEDIT-ABBREV.;28)


(PRETTYCOMPRINT TEDIT-ABBREVCOMS)

(RPAQQ TEDIT-ABBREVCOMS
       [(FNS \TEDIT.ABBREV.EXPAND \TEDIT.ABBREV.PARSE \TEDIT.EXPAND.DATE \TEDIT.TRY.ABBREV)
        (GLOBALVARS TEDIT.ABBREVS)
        (INITVARS (TEDIT.ABBREVS '(("b" "357,146" Bullet)
                                   ("n" "357,44" Endash)
                                   ("--" "357,44" Endash)
                                   ("m" EMDASH)
                                   ("---" EMDASH)
                                   ("T" THINSPACE)
                                   ("d" "357,60" Dagger)
                                   ("D" "357,61" DoubleDagger)
                                   ("s" "0,247" Section)
                                   ("'" "0,271" RSQ)
                                   ("`" "0,251" LSQ)
                                   ("%"" LEFT-DOUBLEQUOTE)
                                   ("~" RIGHT-DOUBLEQUOTE)
                                   ("1/4" "0,274")
                                   ("1/2" "0,275")
                                   ("3/4" "0,276")
                                   ("1/3" "357,375")
                                   ("2/3" "357,376")
                                   ("c" "0,323" Copyright)
                                   ("c/o" "357,100" c/o)
                                   ("%%" "357,100" c/o)
                                   ("->" "0,256" Rightarrow)
                                   ("ra" "0,256" Rightarrow)
                                   ("|" "0,257" Downarrow)
                                   ("da" "0,257" Downarrow)
                                   ("L" "0,243" English-pound)
                                   ("o" "0,260" Degree)
                                   ("Y" "0,245" Yen)
                                   ("+" "0,261" PlusMinus)
                                   ("x" "0,264" Times)
                                   ("/" "0,270" Divide)
                                   ("=" "357,121")
                                   ("p" "0,266" Paragraph)
                                   ("r" "0,322" Register)
                                   ("t" "0,324" Trademark)
                                   ("tm" "0,324" Trademark)
                                   ("bbox" "42,43" Blackbox)
                                   ("wbox" "43,42" Whitebox)
                                   ("-" SOFT-HYPHEN)
                                   ("=" NONBREAKING-HYPHEN)
                                   (" " NONBREAKING-SPACE)
                                   ("un" "357,127")
                                   ("int" "357,126")
                                   ("subset" "357,131")
                                   ("superset" "357,130")
                                   ("&" "357,266")
                                   ("or" "357,267")
                                   ("not" "357,152")
                                   ("all" "357,265")
                                   ("exist" "357,264")
                                   ("def" "357,162")
                                   ("compose" "357,147")
                                   ("DATE" \TEDIT.EXPAND.DATE)
                                   (">>DATE<<" \TEDIT.EXPAND.DATE])
(DEFINEQ

(\TEDIT.ABBREV.EXPAND
  [LAMBDA (TSTREAM TEXTOBJ SEL)                              (* ; "Edited 20-Apr-2025 23:30 by rmk")
                                                             (* ; "Edited 20-Mar-2025 21:52 by rmk")
                                                             (* ; "Edited 30-May-91 19:27 by jds")
                                                             (* ; "Expand an abbvreviation")
    (LET ((CANDIDATES (\TEDIT.ABBREV.PARSE TSTREAM SEL))
          CAND EXPANSION)

         (* ;; "Candidates are ordered longest first, so D doesn't override EMDASH.")

         (* ;; "Try literal match first, then fiddle the case.")

         (* ;; "If we don't find it in abbrevs, try for a character code.")

         [SETQ CAND (OR (find C in CANDIDATES suchthat (SETQ EXPANSION (\TEDIT.TRY.ABBREV
                                                                        (CAR C)
                                                                        TSTREAM)))
                        (for C in CANDIDATES suchthat (SETQ EXPANSION (\TEDIT.TRY.ABBREV
                                                                       (U-CASE (CAR C))
                                                                       TSTREAM)))
                        (for C in CANDIDATES suchthat (SETQ EXPANSION (\TEDIT.TRY.ABBREV
                                                                       (L-CASE (CAR C))
                                                                       TSTREAM]
         (if EXPANSION
             then (\TEDIT.UPDATE.SEL SEL (CADR CAND)
                         (CADDR CAND)
                         'RIGHT
                         'NORMAL)                            (* ; "Set the target")
                  (\TEDIT.REPLACE.SELPIECES (\TEDIT.SELPIECES.FROM.STRING EXPANSION TEXTOBJ NIL
                                                   (PCHARLOOKS (\TEDIT.CHTOPC (CADR CAND)
                                                                      TEXTOBJ)))
                         TSTREAM SEL)
           else (TEDIT.PROMPTPRINT TSTREAM "No abbreviation to expand" T])

(\TEDIT.ABBREV.PARSE
  [LAMBDA (TSTREAM SEL)                                      (* ; "Edited 11-Aug-2025 14:40 by rmk")
                                                             (* ; "Edited  7-Aug-2025 12:50 by rmk")
                                                             (* ; "Edited 24-Apr-2025 23:45 by rmk")
                                                             (* ; "Edited 28-Mar-2025 10:11 by rmk")
                                                             (* ; "Edited 23-Mar-2025 17:08 by rmk")
                                                             (* ; "Edited 20-Mar-2025 22:21 by rmk")

    (* ;; "This produces candidate abbreviation-strings by parsing the characters around the point.  Each candidate is returned as a list (KEY STARTCH# LEN).")

    (* ;; 
    "It first backs up  over any spaces to find the anchor position.  The candidates then include")

    (* ;; "     The immediately preceding singleton character, if a point selection")

    (* ;; "     The remaining (after backing up) characters of the selection.")

    (* ;; "     The word that contains the caret (backwards and forwards)")

    (* ;; " If the character before a candidate C is a comma, then the word before W before the comma (without or without \)  is extracted, and W,C is is added to the list (a possible charname).")

    (* ;; "If the character before a candidate C is \, the \ is included in the replacement span, and \C is also added to the list (Tex style)")

    (* ;; "If one of the candidates is a character name, the abbreviation exapnds to the corresponding character.")

    (* ;; "Otherwise, the candidates are looked up in TEDIT.ABBREVS to find their expansions.")

    (PROG ((PT# (SUB1 (TEDIT.GETPOINT TSTREAM SEL)))
           FIRST# LAST# LEN CANDIDATES KEY NSPACES)

     (* ;; "The abbreviation is taken from the CH# of the current selection.  It is either the character just before a point selection, the entire selection, or the word containing the selection.")

     (* ;; "    The character at CH#, if it is a point selection")

     (* ;; "     Otherwise either the current selection up to and including CH# or the full word that includes the selection.  What works is determined by what it finds in the abbreviations list.")

     (* ;; "Back up over spaces")

          (SETQ NSPACES (for I from PT# by -1 while (EQ (CHARCODE SPACE)
                                                        (\TEDIT.NTHCHARCODE TSTREAM I)) sum 1))
          (add PT# (IMINUS NSPACES))
          (CL:WHEN (ZEROP PT#)                               (* ; "Beginning of document")
              (RETURN))

     (* ;; "Each candidate is a triple containing the key and the starting character and length of the replacement target..")

          (push CANDIDATES (LIST (MKSTRING (TEDIT.NTHCHAR TSTREAM PT#))
                                 PT# 1))
          (SETQ LEN (IMAX 0 (IDIFFERENCE (FGETSEL SEL DCH)
                                   NSPACES)))                (* ; "Last singleton predecessor")
          (CL:WHEN (IGEQ LEN 2)                              (* ; "At least one more character")
              (push CANDIDATES (LIST (TEDIT.SEL.AS.STRING TSTREAM (FGETSEL SEL CH#)
                                            LEN)
                                     (FGETSEL SEL CH#)
                                     LEN)))
          (SETQ FIRST# (\TEDIT.WORD.FIRST TSTREAM PT#))
          (SETQ LEN (ADD1 (IDIFFERENCE PT# FIRST#)))
          (CL:UNLESS (EQ LEN 1)                              (* ; "Already there")
              (push CANDIDATES (LIST (TEDIT.SEL.AS.STRING TSTREAM FIRST# LEN)
                                     FIRST# LEN)))
          (SETQ LAST# (\TEDIT.WORD.LAST TSTREAM FIRST#))
          (SETQ LEN (ADD1 (IDIFFERENCE LAST# FIRST#)))
          (CL:UNLESS (EQ LEN 1)                              (* ; "Already there")
              (push CANDIDATES (LIST (TEDIT.SEL.AS.STRING TSTREAM FIRST# LEN)
                                     FIRST# LEN)))           (* ; "Extend if a ,")
          [for C KEY END in CANDIDATES
             do 
                (* ;; "Comma for MCCS character names, - and / - for internal punctuation (3/4 EMDASH). Adjacent character must be text")

                (if [AND (MEMB (\TEDIT.NTHCHARCODE TSTREAM (SUB1 (CADR C)))
                               (CHARCODE (%, / -)))
                         (EQ (\TEDIT.TTC TEXT)
                             (TEDIT.WORDGET (\TEDIT.NTHCHARCODE TSTREAM (IDIFFERENCE (CADR C)
                                                                               2]
                    then (SETQ END (\TEDIT.WORD.FIRST TSTREAM (IDIFFERENCE (CADR C)
                                                                     2))) 
                                                             (* ; "Comma before, maybe a charname")
                         (SETQ KEY (CONCAT (TEDIT.SEL.AS.STRING TSTREAM END (IDIFFERENCE (CADR C)
                                                                                   END))
                                          (CAR C)))
                         (push CANDIDATES (LIST KEY END (NCHARS KEY)))
                  elseif [AND (MEMB (\TEDIT.NTHCHARCODE TSTREAM (IPLUS (CADR C)
                                                                       (CADDR C)))
                                    (CHARCODE (%, / -)))
                              (EQ (\TEDIT.TTC TEXT)
                                  (TEDIT.WORDGET (\TEDIT.NTHCHARCODE TSTREAM (IPLUS 1 (CADR C)
                                                                                    (CADDR C]
                    then [SETQ END (\TEDIT.WORD.LAST TSTREAM (ADD1 (IPLUS (CADR C)
                                                                          (CADDR C] 
                                                             (* ; "Comma after")
                         [SETQ KEY (CONCAT (CAR C)
                                          (TEDIT.SEL.AS.STRING TSTREAM (IPLUS (CADR C)
                                                                              (CADDR C))
                                                 (ADD1 (IDIFFERENCE END (IPLUS (CADR C)
                                                                               (CADDR C]
                         (push CANDIDATES (LIST KEY (CADR C)
                                                (NCHARS KEY] (* ; 
           "If preceded by \, include it optionally in the key, always include it in the replacement")
          (for C in CANDIDATES when [EQ (CHARCODE \)
                                        (\TEDIT.NTHCHARCODE TSTREAM (SUB1 (CADR C]
             do                                              (* ; "Match and replace \KEY")
                [push CANDIDATES (LIST (CONCAT "\" (CAR C))
                                       (SUB1 (CADR C))
                                       (ADD1 (CADDR C]
                (change (CADR C)
                       (SUB1 DATUM))                         (* ; "Match KEY but also replace the \")
                (change (CADDR C)
                       (ADD1 DATUM)))
          [SORT CANDIDATES (FUNCTION (LAMBDA (C1 C2)
                                       (IGEQ (CADDR C1)
                                             (CADDR C2]      (* ; "Look for longest first")
          (RETURN CANDIDATES])

(\TEDIT.EXPAND.DATE
  [LAMBDA (STREAM CH)                                        (* ; "Edited 23-Feb-88 10:41 by jds")

    (* ;; "Provide the date as the expansion for an abbreviation")

    (PROG* ((DATE (\UNPACKDATE))
            (YEAR (pop DATE))
            (MONTH (pop DATE))
            (DAY (pop DATE)))
           (RETURN (CONCAT (CAR (NTH '("January" "February" "March" "April" "May" "June" "July" 
                                             "August" "September" "October" "November" "December")
                                     (ADD1 MONTH)))
                          " " DAY ", " YEAR])

(\TEDIT.TRY.ABBREV
  [LAMBDA (KEY TSTREAM)                                      (* ; "Edited  5-Sep-2025 12:24 by rmk")
                                                             (* ; "Edited 20-Mar-2025 21:52 by rmk")
                                                            (* ; "Edited  6-Aug-2020 14:41 by rmk:")
                                                             (* jds "11-Jul-85 12:46")

    (* ;; "Decode the expansion. A string may be a character name, otherwise itself.  A litatom is a function to be applied, anything else is evaled. ")

    (LET [(ABBREV (CDR (SASSOC KEY TEDIT.ABBREVS]
         (CL:WHEN (LISTP ABBREV)                             (* ; "Originally stored in the CDR")
             (SETQ ABBREV (CAR ABBREV)))
         (if (NULL ABBREV)
             then (CL:WHEN (CHARCODE.DECODE KEY T)
                      (CHARACTER (CHARCODE.DECODE KEY T)))
           elseif (STRINGP ABBREV)
             then 
                  (* ;; "Could be a character code")

                  (LET ((CH (CHARCODE.DECODE ABBREV T)))
                       (CL:IF CH
                           (CHARACTER CH)
                           ABBREV))
           elseif (SMALLP ABBREV)
             then 
                  (* ;; "Treat a number as a character code.")

                  (CHARACTER ABBREV)
           elseif (AND (LITATOM ABBREV)
                       (GETD ABBREV))
             then                                            (* ; " A function to be applied.")
                  (APPLY* ABBREV TSTREAM KEY)
           elseif (LISTP ABBREV)
             then                                            (* ; "Form in the CADR, now")
                  (EVAL ABBREV)
           elseif (AND (SETQ ABBREV (CDR (SASSOC KEY TEDIT.ABBREVS)))
                       (LITATOM (CAR ABBREV))
                       (GETD (CAR ABBREV)))
             then 
                  (* ;; "Form in the CDR, originally")

                  (EVAL ABBREV])
)
(DECLARE%: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS TEDIT.ABBREVS)
)

(RPAQ? TEDIT.ABBREVS
       '(("b" "357,146" Bullet)
         ("n" "357,44" Endash)
         ("--" "357,44" Endash)
         ("m" EMDASH)
         ("---" EMDASH)
         ("T" THINSPACE)
         ("d" "357,60" Dagger)
         ("D" "357,61" DoubleDagger)
         ("s" "0,247" Section)
         ("'" "0,271" RSQ)
         ("`" "0,251" LSQ)
         ("%"" LEFT-DOUBLEQUOTE)
         ("~" RIGHT-DOUBLEQUOTE)
         ("1/4" "0,274")
         ("1/2" "0,275")
         ("3/4" "0,276")
         ("1/3" "357,375")
         ("2/3" "357,376")
         ("c" "0,323" Copyright)
         ("c/o" "357,100" c/o)
         ("%%" "357,100" c/o)
         ("->" "0,256" Rightarrow)
         ("ra" "0,256" Rightarrow)
         ("|" "0,257" Downarrow)
         ("da" "0,257" Downarrow)
         ("L" "0,243" English-pound)
         ("o" "0,260" Degree)
         ("Y" "0,245" Yen)
         ("+" "0,261" PlusMinus)
         ("x" "0,264" Times)
         ("/" "0,270" Divide)
         ("=" "357,121")
         ("p" "0,266" Paragraph)
         ("r" "0,322" Register)
         ("t" "0,324" Trademark)
         ("tm" "0,324" Trademark)
         ("bbox" "42,43" Blackbox)
         ("wbox" "43,42" Whitebox)
         ("-" SOFT-HYPHEN)
         ("=" NONBREAKING-HYPHEN)
         (" " NONBREAKING-SPACE)
         ("un" "357,127")
         ("int" "357,126")
         ("subset" "357,131")
         ("superset" "357,130")
         ("&" "357,266")
         ("or" "357,267")
         ("not" "357,152")
         ("all" "357,265")
         ("exist" "357,264")
         ("def" "357,162")
         ("compose" "357,147")
         ("DATE" \TEDIT.EXPAND.DATE)
         (">>DATE<<" \TEDIT.EXPAND.DATE)))
(DECLARE%: DONTCOPY
  (FILEMAP (NIL (3630 16182 (\TEDIT.ABBREV.EXPAND 3640 . 5860) (\TEDIT.ABBREV.PARSE 5862 . 13472) (
\TEDIT.EXPAND.DATE 13474 . 14107) (\TEDIT.TRY.ABBREV 14109 . 16180)))))
STOP
