(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)

(FILECREATED "12-Jun-2023 10:34:12" {WMEDLEY}<library>tedit>TEDIT-COMMAND.;24 47193  

      :EDIT-BY rmk

      :PREVIOUS-DATE "27-May-2023 15:07:46" {WMEDLEY}<library>tedit>TEDIT-COMMAND.;23)


(PRETTYCOMPRINT TEDIT-COMMANDCOMS)

(RPAQQ TEDIT-COMMANDCOMS
       ([DECLARE%: EVAL@COMPILE DONTCOPY (CONSTANTS (\SCRATCHLEN 64))
               (CONSTANTS (MSPACE 153)
                      (NSPACE 152)
                      (THINSPACE 159)
                      (FIGSPACE 154))
               (EXPORT (CONSTANTS (NONE.TTC 0)
                              (CHARDELETE.TTC 1)
                              (WORDDELETE.TTC 2)
                              (DELETE.TTC 3)
                              (FUNCTIONCALL.TTC 4)
                              (REDO.TTC 5)
                              (UNDO.TTC 6)
                              (CMD.TTC 7)
                              (NEXT.TTC 8)
                              (EXPAND.TTC 9)
                              (PUNCT.TTC 20)
                              (TEXT.TTC 21)
                              (WHITESPACE.TTC 22))
                      (MACROS \TEDIT.MOUSESTATE \TEDIT.CHECK)
                      (RECORDS TEDITTERMCODE)
                      
                      (* ;; "Bits in the CHARTABLE that control line breaking, and what happens when a line is broken on this character  (RMK:  THESE DON'T SEEM TO BE USED)")

                      (CONSTANTS (NOTBEFORE.LB 1)
                                                             (* ; 
                                   "Must not break before this character (e.g. Japanese right-paren)")
                             (NOTAFTER.LB 2)
                                                             (* ; 
                                     "Must not break after this character (e.g. Japanese open-quote)")
                             (BEFORE.LB 4)
                                                             (* ; "OK to break before this character, provided it's OK to break after the prior char (true of most non-white-space)")
                             (AFTER.LB 8)
                                                             (* ; 
    "OK to break after this char, if it's OK to break before the next one (true of most white space)")
                             (DISAPPEAR-IF-NOT-SPLIT.LB 16)
                                                             (* ; "This character shouldn't be rendered if it isn't the last char on the line (non-breaking hyphen has this)")
                             (NEWCHAR-IF-SPLIT.LB 32)
                                                             (* ; "Look this char up in *TEDIT-SPLITCHAR-HASH* if this IS the last character on a line, and render it as the char we found.")
                             ]
        (FNS \TEDIT.INTERRUPT.SETUP \TEDIT.MARKACTIVE \TEDIT.MARKINACTIVE \PNC \TEDIT.COMMAND.LOOP 
             \TEDIT.COMMAND.RESET.SETUP)
        [INITVARS (TEDIT.INTERRUPTS '((2 BREAK)
                                      (5 ERROR)
                                      (7 HELP)
                                      (20 CONTROL-T]
        (VARS (TEDIT.COPY.PENDING NIL)
              (TEDIT.COPYLOOKS.PENDING NIL)
              (TEDIT.MOVE.PENDING NIL)
              (TEDIT.DEL.PENDING NIL)
              (|| NIL))
        (GLOBALVARS TEDIT.COPY.PENDING TEDIT.COPYLOOKS.PENDING TEDIT.MOVE.PENDING TEDIT.DEL.PENDING 
               || TEDIT.INTERRUPTS)
        (COMS                                                (* ; "Read-table Utilities")
              (FNS \TEDIT.READTABLE \TEDIT.WORDBOUND.READTABLE TEDIT.GETSYNTAX TEDIT.SETSYNTAX 
                   TEDIT.GETFUNCTION TEDIT.SETFUNCTION TEDIT.WORDGET TEDIT.WORDSET)
              [DECLARE%: DONTEVAL@LOAD DOCOPY (VARS (TEDIT.READTABLE (\TEDIT.READTABLE))
                                                    (TEDIT.WORDBOUND.READTABLE (
                                                                           \TEDIT.WORDBOUND.READTABLE
                                                                                ]
              (GLOBALVARS TEDIT.READTABLE TEDIT.WORDBOUND.READTABLE))))
(DECLARE%: EVAL@COMPILE DONTCOPY 
(DECLARE%: EVAL@COMPILE 

(RPAQQ \SCRATCHLEN 64)


(CONSTANTS (\SCRATCHLEN 64))
)

(DECLARE%: EVAL@COMPILE 

(RPAQQ MSPACE 153)

(RPAQQ NSPACE 152)

(RPAQQ THINSPACE 159)

(RPAQQ FIGSPACE 154)


(CONSTANTS (MSPACE 153)
       (NSPACE 152)
       (THINSPACE 159)
       (FIGSPACE 154))
)

(* "FOLLOWING DEFINITIONS EXPORTED")(DECLARE%: EVAL@COMPILE 

(RPAQQ NONE.TTC 0)

(RPAQQ CHARDELETE.TTC 1)

(RPAQQ WORDDELETE.TTC 2)

(RPAQQ DELETE.TTC 3)

(RPAQQ FUNCTIONCALL.TTC 4)

(RPAQQ REDO.TTC 5)

(RPAQQ UNDO.TTC 6)

(RPAQQ CMD.TTC 7)

(RPAQQ NEXT.TTC 8)

(RPAQQ EXPAND.TTC 9)

(RPAQQ PUNCT.TTC 20)

(RPAQQ TEXT.TTC 21)

(RPAQQ WHITESPACE.TTC 22)


(CONSTANTS (NONE.TTC 0)
       (CHARDELETE.TTC 1)
       (WORDDELETE.TTC 2)
       (DELETE.TTC 3)
       (FUNCTIONCALL.TTC 4)
       (REDO.TTC 5)
       (UNDO.TTC 6)
       (CMD.TTC 7)
       (NEXT.TTC 8)
       (EXPAND.TTC 9)
       (PUNCT.TTC 20)
       (TEXT.TTC 21)
       (WHITESPACE.TTC 22))
)
(DECLARE%: EVAL@COMPILE 

(PUTPROPS \TEDIT.MOUSESTATE MACRO (BUTTON 

         (* Test to see if only the specified mouse button is down.
         DOES NOT call GETMOUSESTATE, so the mouse-button info is the same as the last 
         time it WAS called.)

                                         (SELECTQ (CAR BUTTON)
                                             (LEFT '(IEQP LASTMOUSEBUTTONS 4))
                                             (MIDDLE '(IEQP LASTMOUSEBUTTONS 1))
                                             (RIGHT '(IEQP LASTMOUSEBUTTONS 2))
                                             (SHOULDNT))))

(PUTPROPS \TEDIT.CHECK MACRO [ARGS (COND
                                      [(AND (BOUNDP 'CHECK)
                                            CHECK)
                                       (CONS 'PROGN
                                             (for I in ARGS as J on ARGS
                                                when (NOT (STRINGP I))
                                                collect (LIST 'OR I (LIST 'HELP 
                                            "TEdit consistency-check failure [RETURN to continue]:  "
                                                                          (COND
                                                                             ((STRINGP (CADR J)))
                                                                             (T (KWOTE I]
                                      (T (CONS COMMENTFLG ARGS])
)
(DECLARE%: EVAL@COMPILE

(ACCESSFNS TEDITTERMCODE ((TTCLASS (LOGAND DATUM 224))
                          (TTDECODE (LOGAND DATUM 31))))
)
(DECLARE%: EVAL@COMPILE 

(RPAQQ NOTBEFORE.LB 1)

(RPAQQ NOTAFTER.LB 2)

(RPAQQ BEFORE.LB 4)

(RPAQQ AFTER.LB 8)

(RPAQQ DISAPPEAR-IF-NOT-SPLIT.LB 16)

(RPAQQ NEWCHAR-IF-SPLIT.LB 32)


(CONSTANTS (NOTBEFORE.LB 1)
       (NOTAFTER.LB 2)
       (BEFORE.LB 4)
       (AFTER.LB 8)
       (DISAPPEAR-IF-NOT-SPLIT.LB 16)
       (NEWCHAR-IF-SPLIT.LB 32))
)

(* "END EXPORTED DEFINITIONS")

)
(DEFINEQ

(\TEDIT.INTERRUPT.SETUP
  [LAMBDA (PROC FORCEOFF)                                    (* jds "12-Sep-84 15:36")
                                                             (* Disarm any inconvenient interrupts, 
                                                             and save re-arming info on the window.)
    [PROG [(TEXTOBJ (AND (PROCESSPROP PROC 'WINDOW)
                         (WINDOWPROP (PROCESSPROP PROC 'WINDOW)
                                'TEXTOBJ)
                         (TEXTOBJ (PROCESSPROP PROC 'WINDOW]
          (UNINTERRUPTABLY
              [COND
                 ((AND FORCEOFF (PROCESSPROP PROC 'TEDIT.INTERRUPTS))
                                                             (* There are disarmed interrupts;
                                                             re-arm them.)
                  (RESET.INTERRUPTS (PROCESSPROP PROC 'TEDIT.INTERRUPTS))
                  (PROCESSPROP PROC 'TEDIT.INTERRUPTS NIL))
                 ([AND (NOT FORCEOFF)
                       (NOT (PROCESSPROP PROC 'TEDIT.INTERRUPTS]
                                                             (* There aren't any interrupts 
                                                             disarmed; go do it.)
                  (PROCESSPROP PROC 'TEDIT.INTERRUPTS (RESET.INTERRUPTS
                                                       (OR (AND TEXTOBJ (TEXTPROP TEXTOBJ
                                                                               'INTERRUPTS))
                                                           TEDIT.INTERRUPTS)
                                                       T])]
    PROC])

(\TEDIT.MARKACTIVE
  [LAMBDA (TEXTOBJ)                                         (* ; "Edited 12-Jun-90 18:04 by mitani")
    (replace (TEXTOBJ EDITOPACTIVE) of TEXTOBJ with T)
    TEXTOBJ])

(\TEDIT.MARKINACTIVE
  [LAMBDA (TEXTOBJ)                                         (* ; "Edited 12-Jun-90 18:04 by mitani")
    (replace (TEXTOBJ EDITOPACTIVE) of TEXTOBJ with NIL)
    TEXTOBJ])

(\PNC
  [LAMBDA (CH STR)                                           (* jds " 7-JUN-82 14:03")
    (PROG ((LEN (fetch (STRINGP LENGTH) of STR))
           (OFFST (fetch (STRINGP OFFST) of STR)))
          (COND
             ((ZEROP LEN)
              (ERROR "NO ROOM LEFT IN STRING TO PUT CHARACTER"))
             (T (UNINTERRUPTABLY
                    (\PUTBASEBYTE (fetch (STRINGP BASE) of STR)
                           OFFST CH)
                    (replace (STRINGP OFFST) of STR with (ADD1 OFFST))
                    (replace (STRINGP LENGTH) of STR with (SUB1 LEN)))])

(\TEDIT.COMMAND.LOOP
  [LAMBDA (STREAM RTBL)                                      (* ; "Edited 27-May-2023 10:43 by rmk")
                                                             (* ; "Edited 23-May-2023 15:31 by rmk")
                                                             (* ; "Edited 22-May-2023 10:49 by rmk")
                                                             (* ; "Edited 30-May-91 19:33 by jds")

    (* ;; "Main command loop for the TEDIT editor.  Includes keyboard polling and command dispatch")

    (PROG ((TEXTOBJ (COND
                       ((type? STREAM STREAM)
                        (fetch (TEXTSTREAM TEXTOBJ) of STREAM))
                       (T STREAM)))
           SEL PANES LINES)
          (SETQ SEL (fetch (TEXTOBJ SEL) of TEXTOBJ))
          (SETQ PANES (fetch (TEXTOBJ \WINDOW) of TEXTOBJ))
          (SETQ LINES (fetch (TEXTOBJ LINES) of TEXTOBJ))
          (SETQ RTBL (OR RTBL (fetch (TEXTOBJ TXTRTBL) of TEXTOBJ)
                         TEDIT.READTABLE))                   (* ; 
                                                     "Used to derive command characters from type-in")
          (for WW inside PANES do (WINDOWPROP WW 'PROCESS (THIS.PROCESS)))
                                                             (* ; "And the window to this process")
          (while (NOT (TTY.PROCESSP)) do                     (* ; 
                                               "Wait until we really have the TTY before proceeding.")
                                         (DISMISS 250))
          (RESETLST
              (RESETSAVE (\TEDIT.COMMAND.RESET.SETUP (LIST TEXTOBJ PANES)
                                T))
              (LET
               (CH FN TCH (READSA (fetch READSA of %#CURRENTRDTBL#))
                   (TERMSA (OR (fetch (TEXTOBJ TXTTERMSA) of TEXTOBJ)
                               \PRIMTERMSA))
                   (TEDITSA (fetch READSA of RTBL))
                   (TEDITFNHASH (fetch READMACRODEFS of RTBL))
                   (LOOPFN (TEXTPROP TEXTOBJ 'LOOPFN))
                   (CHARFN (TEXTPROP TEXTOBJ 'CHARFN))
                   COMMANDFN)
               (until (fetch (TEXTOBJ EDITFINISHEDFLG) of TEXTOBJ)
                  do
                  (ERSETQ
                   (until (fetch (TEXTOBJ EDITFINISHEDFLG) of TEXTOBJ)
                      do (\WAITFORSYSBUFP 25)                (* ; "Await type-in or mouse action")
                         (while (OR TEDIT.SELPENDING (fetch (TEXTOBJ EDITOPACTIVE) of TEXTOBJ))
                            do                               (* ; 
                       "Don't do anything while he's selecting or one of the lock-out ops is active.")
                               (CL:UNLESS (EQ TEDIT.SELPENDING TEXTOBJ)
                                                             (* ; 
           "If this TEdit is the one being selected in, or the caret is explicitly visible, flash it")
                                   (TEDIT.FLASHCARET (fetch (TEXTOBJ CARET) of TEXTOBJ)))
                               (BLOCK))
                         (CL:UNLESS (fetch (TEXTOBJ EDITFINISHEDFLG) of TEXTOBJ)
                             (CL:WHEN (fetch (TEXTOBJ TXTNEEDSUPDATE) of TEXTOBJ)
                                                             (* ; 
                     "We got here somehow with the window not in sync with the text.  Run an update.")
                                 (\SHOWSEL SEL NIL)
                                 (TEDIT.UPDATE.SCREEN TEXTOBJ T)
                                 (\FIXSEL SEL TEXTOBJ)
                                 (\SHOWSEL SEL T))
                             (TEDIT.FLASHCARET (fetch (TEXTOBJ CARET) of TEXTOBJ))
                                                             (* ; 
                  "Flash the caret periodically (BUT not while we're here only to cleanup and quit.)")
                             (replace (TEXTOBJ EDITOPACTIVE) of TEXTOBJ with T)
                                                             (* ; 
                                          "Before starting to work, note that we're doing something.")
                             (AND LOOPFN (ERSETQ (APPLY* LOOPFN STREAM)))
                                                             (* ; 
                                          "If the guy wants control during the loop, give it to him.")
                                                             (* ; "Process any pending selections")
                             [COND
                                (TEDIT.COPY.PENDING          (* ; 
                                                             "Have to copy the shifted SEL to caret.")
                                       (SETQ TEDIT.COPY.PENDING NIL)
                                       (\COPYSEL TEDIT.SHIFTEDSELECTION (fetch (TEXTOBJ SHIFTEDSEL)
                                                                           of TEXTOBJ))
                                       (ERSETQ (TEDIT.COPY (fetch (TEXTOBJ SHIFTEDSEL) of TEXTOBJ)
                                                      SEL))
                                       (\TEDIT.SELECTION.UNSET TEDIT.SHIFTEDSELECTION)
                                       (\COPYSEL TEDIT.SHIFTEDSELECTION (fetch (TEXTOBJ SHIFTEDSEL)
                                                                           of TEXTOBJ)))
                                (TEDIT.COPYLOOKS.PENDING     (* ; 
                                                             "Have to copy the shifted SEL to caret.")
                                       (SETQ TEDIT.COPYLOOKS.PENDING NIL)
                                       (\COPYSEL TEDIT.COPYLOOKSSELECTION (fetch (TEXTOBJ SHIFTEDSEL)
                                                                             of TEXTOBJ))
                                       [ERSETQ (COND
                                                  ((EQ 'PARA (GETSEL (fetch (TEXTOBJ SHIFTEDSEL)
                                                                        of TEXTOBJ)
                                                                    SELKIND))
                                                             (* ; 
                            "copy the paragraph looks, since the source selection type was paragraph")
                                                   (TEDIT.COPY.PARALOOKS TEXTOBJ (fetch (TEXTOBJ
                                                                                         SHIFTEDSEL)
                                                                                    of TEXTOBJ)
                                                          SEL))
                                                  (T         (* ; "copy the character looks")
                                                     (TEDIT.COPY.LOOKS TEXTOBJ (fetch (TEXTOBJ 
                                                                                           SHIFTEDSEL
                                                                                             )
                                                                                  of TEXTOBJ)
                                                            SEL]
                                       (\SHOWSEL (fetch (TEXTOBJ SHIFTEDSEL) of TEXTOBJ)
                                              NIL)
                                       (\TEDIT.SELECTION.UNSET TEDIT.COPYLOOKSSELECTION)
                                       (\COPYSEL TEDIT.COPYLOOKSSELECTION (fetch (TEXTOBJ SHIFTEDSEL)
                                                                             of TEXTOBJ)))
                                (TEDIT.MOVE.PENDING          (* ; 
                                                          "Have to move the ctrl-shift SEL to caret.")
                                       (SETQ TEDIT.MOVE.PENDING NIL)
                                       (\COPYSEL TEDIT.MOVESELECTION (fetch (TEXTOBJ MOVESEL)
                                                                        of TEXTOBJ))
                                       (ERSETQ (TEDIT.MOVE (fetch (TEXTOBJ MOVESEL) of TEXTOBJ)
                                                      SEL))
                                       (\TEDIT.SELECTION.UNSET TEDIT.MOVESELECTION)
                                       (\COPYSEL TEDIT.MOVESELECTION (fetch (TEXTOBJ MOVESEL)
                                                                        of TEXTOBJ)))
                                (TEDIT.DEL.PENDING           (* ; "Delete the current selection.")
                                       (SETQ TEDIT.DEL.PENDING NIL)
                                                             (* ; 
                                                             "Above all, reset the demand flag first")
                                       (ERSETQ (CL:WHEN (GETSEL TEDIT.DELETESELECTION SET)
                                                             (* ; 
                                              "Only try the deletion if he really set the selection.")
                                                   (\SHOWSEL (fetch (TEXTOBJ DELETESEL) of TEXTOBJ)
                                                          NIL)
                                                             (* ; "Turn off the selection highlights")
                                                   (\SHOWSEL SEL NIL)
                                                   (SETSEL (fetch (TEXTOBJ DELETESEL) of TEXTOBJ)
                                                          SET NIL)
                                                   (\COPYSEL TEDIT.DELETESELECTION SEL)
                                                   (\TEDIT.SET.SEL.LOOKS SEL 'NORMAL)
                                                             (* ; "Grab the selection we're to use")
                                                   (\TEDIT.DELETE TEXTOBJ SEL)
                                                   (SETSEL TEDIT.DELETESELECTION L1 NIL)
                                                   (SETSEL TEDIT.DELETESELECTION LN NIL))]
                             [while (\SYSBUFP)
                                do                           (* ; "Handle user type-in")
                                   (SETQ CH (\GETKEY))
                                   (CL:WHEN CHARFN           (* ; 
                                                "Give the OEM user control for each character typed.")
                                       (SETQ TCH (APPLY* CHARFN STREAM CH))

                                       (* ;; 
      "And let him return one of NIL for 'ignore this char' , T for 'leave it be' or a new charcode.")

                                       (OR (EQ TCH T)
                                           (SETQ CH TCH)))
                                   (SELECTC (AND CH (\SYNCODE TEDITSA CH))
                                       (CHARDELETE.TTC       (* ; 
                                       "Backspace handler: Remove the character just before SEL:CH#.")
                                            (\TEDIT.CHARDELETE TEXTOBJ SEL)
                                            (TEDIT.RESET.EXTEND.PENDING.DELETE SEL))
                                       (WORDDELETE.TTC 
                                            (\TEDIT.WORDDELETE TEXTOBJ SEL)
                                            (TEDIT.RESET.EXTEND.PENDING.DELETE SEL))
                                       (DELETE.TTC           (* ; 
                                                    "DEL Key handler: Delete the selected characters")
                                                   (\TEDIT.DELETE TEXTOBJ SEL)
                                                   (TEDIT.RESET.EXTEND.PENDING.DELETE SEL))
                                       (UNDO.TTC             (* ; 
                                                        "He hit the CANCEL key, so go UNDO something")
                                                 (TEDIT.UNDO TEXTOBJ)
                                                 (TEDIT.RESET.EXTEND.PENDING.DELETE SEL))
                                       (REDO.TTC             (* ; 
                                                          "He hit the REDO key, so go REDO something")
                                                 (TEDIT.REDO TEXTOBJ)
                                                 (TEDIT.RESET.EXTEND.PENDING.DELETE SEL))
                                       (FUNCTIONCALL.TTC     (* ; 
                                                 "This is a special character -- it calls a function")
                                            (CL:WHEN [SETQ FN (CAR (FETCH MACROFN
                                                                      OF (GETHASH CH TEDITFNHASH]
                                                             (* ; 
                                                          "There IS a command function to be called.")
                                                (APPLY* FN (fetch (TEXTOBJ STREAMHINT) of TEXTOBJ)
                                                       TEXTOBJ SEL)
                                                             (* ; "do it")
                                                (\SHOWSEL SEL NIL)
                                                (TEDIT.RESET.EXTEND.PENDING.DELETE SEL)
                                                             (* ; 
                                                 "After a user function, no more blue-pending-delete")
                                                (\SHOWSEL SEL T)))
                                       (NEXT.TTC             (* ; 
                       "Move to the next blank to fill in.  For now, blanks are delimited by >>...<<")
                                                 (TEDIT.NEXT TEXTOBJ))
                                       (EXPAND.TTC           (* ; "EXPAND AN ABBREVIATION")
                                                   (\TEDIT.ABBREV.EXPAND (fetch (TEXTOBJ STREAMHINT)
                                                                            of TEXTOBJ)))
                                       (SELECTC (AND TERMSA CH (fetch TERMCLASS
                                                                  of (\SYNCODE TERMSA CH)))
                                           (CHARDELETE.TC    (* ; 
                                       "Backspace handler: Remove the character just before SEL:CH#.")
                                                          (\TEDIT.CHARDELETE TEXTOBJ SEL)
                                                          (TEDIT.RESET.EXTEND.PENDING.DELETE SEL))
                                           (WORDDELETE.TC    (* ; "Back-WORD handler")
                                                          (\TEDIT.WORDDELETE TEXTOBJ)
                                                          (TEDIT.RESET.EXTEND.PENDING.DELETE SEL))
                                           (LINEDELETE.TC    (* ; 
                                                    "DEL Key handler: Delete the selected characters")
                                                          (\TEDIT.DELETE TEXTOBJ SEL)
                                                          (TEDIT.RESET.EXTEND.PENDING.DELETE SEL))
                                           (CL:WHEN CH       (* ; 
                                                             "Any other key: insert the character.")
                                               (\TEDIT.INSERT CH SEL TEXTOBJ))])
                         (replace (TEXTOBJ EDITOPACTIVE) of TEXTOBJ with NIL)))
                  (replace (TEXTOBJ EDITOPACTIVE) of TEXTOBJ with NIL))))])

(\TEDIT.COMMAND.RESET.SETUP
  [LAMBDA (TEXT&WIND STARTING)                               (* ; "Edited  5-Nov-2022 10:41 by rmk")
                                                            (* ; "Edited 12-Jun-90 18:04 by mitani")

    (* ;; "If STARTING is T, set up the reset-driven connections and values for editing;  otherwise, break links and reset values for non-editing")

    (PROG ((TEXTOBJ (CAR TEXT&WIND))
           (WINDOW (CADR TEXT&WIND))
           (OTTYWINDOW (CADDR TEXT&WIND))
           (OTTYENTRYFN (CADDDR TEXT&WIND))
           (OTTYEXITFN (CAR (CDDDDR TEXT&WIND)))
           (OWINDOW (CADR (CDDDDR TEXT&WIND)))
           TTYWINDOW)
          [COND
             (STARTING                                       (* ; 
                                           "We're going INTO the command loop.  Set up all the stuff")
                    (replace (TEXTOBJ EDITOPACTIVE) of TEXTOBJ with T)
                                                             (* ; 
                             "Mark us busy until we're set up, so that nobody tries any funny stuff.")
                    (SETQ OWINDOW (PROCESSPROP (THIS.PROCESS)
                                         'WINDOW
                                         (CAR WINDOW)))      (* ; 
                                                             "Attach the process to this window.")
                    (\TEDIT.INTERRUPT.SETUP (THIS.PROCESS))  (* ; 
                                     "Disarm all interrupt chars, re-arm them when we leave the edit")
                    (SETQ OTTYEXITFN (PROCESSPROP (THIS.PROCESS)
                                            'TTYEXITFN
                                            '\TEDIT.PROCEXITFN))
                                                             (* ; 
                                        "Set up functions for getting in and out of the edit process")
                    (SETQ OTTYENTRYFN (PROCESSPROP (THIS.PROCESS)
                                             'TTYENTRYFN
                                             '\TEDIT.PROCENTRYFN))
                    (CL:UNLESS (EQ (TEXTPROP TEXTOBJ 'TTYWINDOW)
                                   'DON'T)                   (* ; 
                 "He can suppress the ability to copy-select things into this window if he wants....")
                        (SETQ TTYWINDOW (OR (TEXTPROP TEXTOBJ 'TTYWINDOW)
                                            (CREATEW DEFAULTTTYREGION "TTY Window for TEdit" NIL T)))
                        (SETQ OTTYWINDOW (TTYDISPLAYSTREAM TTYWINDOW))
                        (PROCESSPROP (THIS.PROCESS)
                               'TEDITTTYWINDOW TTYWINDOW)
                        (WINDOWPROP TTYWINDOW 'PROCESS NIL)
                        [WINDOWPROP TTYWINDOW 'CLOSEFN (FUNCTION (LAMBDA (WW)
                                                                   (WINDOWPROP WW 'PROCESS NIL]
                                                             (* ; 
                           "So that there isn't a circularity in the PROCESS -> TTYWINDOW -> PROCESS")
                        (WINDOWPROP TTYWINDOW 'COPYINSERTFN (FUNCTION \TEDIT.COPYINSERTFN))
                        (WINDOWPROP TTYWINDOW 'MAINWINDOW (CAR WINDOW)))
                    (replace (TEXTOBJ TXTEDITING) of TEXTOBJ with T)
                                                             (* ; 
                                            "Tell TEdit that this document is actively being edited.")
                                                             (* ; 
                                                             "Mark us un-busy so life can go on.")
                    (replace (TEXTOBJ EDITOPACTIVE) of TEXTOBJ with NIL))
             (T                                              (* ; 
                                                 "Coming OUT OF the command loop -- reset everything")
                (PROCESSPROP (THIS.PROCESS)
                       'WINDOW
                       (CAR WINDOW))                         (* ; 
                              "Detach the window from the edit process, to prevent circularity there")
                (WINDOWPROP (CAR WINDOW)
                       'PROCESS NIL)
                (\TEDIT.INTERRUPT.SETUP (THIS.PROCESS)
                       T)                                    (* ; 
                                                     "Re-arm the interrupts we turned off coming in.")
                (CL:WHEN [AND (TXTFILE TEXTOBJ)
                              (NOT (fetch (TEXTWINDOW CLOSINGFILE) of (CAR WINDOW]
                                                             (* ; 
         "Remember to close the file we were editing (Only if the window function isn't closing it.)")
                    (CLOSEF? (TXTFILE TEXTOBJ))              (* ; 
                                                       "Let anyone else who wants to close the file.")
                    (replace (TEXTWINDOW CLOSINGFILE) of (CAR WINDOW) with NIL))
                (PROCESSPROP (THIS.PROCESS)
                       'TTYEXITFN OTTYEXITFN)
                (PROCESSPROP (THIS.PROCESS)
                       'TTYENTRYFN OTTYENTRYFN)
                (replace (TEXTOBJ TXTHISTORY) of TEXTOBJ with NIL)
                                                             (* ; 
           "To prevent circularities arising from the need to remember textobjs in the history list.")
                (replace (TEXTOBJ SELWINDOW) of TEXTOBJ with NIL)
                                                             (* ; 
                                      "To prevent a circularity thru the window back to the textobj.")
                (replace (TEXTOBJ TXTEDITING) of TEXTOBJ with NIL)
                                                             (* ; 
                                  "Tell TEdit that this document is NO LONGER actively being edited.")
                (CL:UNLESS (EQ (TEXTPROP TEXTOBJ 'TTYWINDOW)
                               'DON'T)                       (* ; 
                 "He can suppress the ability to copy-select things into this window if he wants....")
                    (TTYDISPLAYSTREAM OTTYWINDOW)
                    (PROCESSPROP (THIS.PROCESS)
                           'TEDITTTYWINDOW NIL))]
          (RETURN (LIST TEXTOBJ WINDOW OTTYWINDOW OTTYENTRYFN OTTYEXITFN OWINDOW])
)

(RPAQ? TEDIT.INTERRUPTS '((2 BREAK)
                          (5 ERROR)
                          (7 HELP)
                          (20 CONTROL-T)))

(RPAQQ TEDIT.COPY.PENDING NIL)

(RPAQQ TEDIT.COPYLOOKS.PENDING NIL)

(RPAQQ TEDIT.MOVE.PENDING NIL)

(RPAQQ TEDIT.DEL.PENDING NIL)

(RPAQQ || NIL)
(DECLARE%: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS TEDIT.COPY.PENDING TEDIT.COPYLOOKS.PENDING TEDIT.MOVE.PENDING TEDIT.DEL.PENDING || 
       TEDIT.INTERRUPTS)
)



(* ; "Read-table Utilities")

(DEFINEQ

(\TEDIT.READTABLE
  [LAMBDA NIL                                               (* ; "Edited 20-Apr-2018 07:59 by rmk:")
                                                             (* jds "12-Sep-86 13:48")

         (* Create a TEdit read-table, to control which characters have what functions and 
         call which commands.)

    (PROG [(RTBL (create READTABLEP
                        READMACRODEFS _ (HASHARRAY 50]
          (for CH in (CHARCODE (BS ^A ^W DEL %#A %#B %#C ESC)) as CL
             in (LIST CHARDELETE.TTC CHARDELETE.TTC WORDDELETE.TTC DELETE.TTC UNDO.TTC NEXT.TTC 
                      CMD.TTC REDO.TTC) do                   (* Set up the default syntax classes 
                                                             for command characters)
                                           (\SETSYNCODE (fetch READSA of RTBL)
                                                  CH CL))
          (for CH in (CHARCODE (^X)) as FN in '(\TEDIT.ABBREV.EXPAND)
             do                                              (* Set up the default function-calling 
                                                             characters (^X to expand abbrevs for 
                                                             now))
                (TEDIT.SETFUNCTION CH FN RTBL))
          (TEDIT.SETFUNCTION (CHARCODE ^O)
                 (FUNCTION GET.OBJ.FROM.USER)
                 RTBL)                                       (* And for image object capture)
          (RETURN RTBL])

(\TEDIT.WORDBOUND.READTABLE
  [LAMBDA NIL                                                (* ; "Edited 22-May-92 15:10 by jds")

    (* ;; "Create a readtable which will let TEdit find word boundaries.  A word boundary is any point where the SYNCODE of the adjacent characters is different")

    (PROG [(RTBL (create READTABLEP
                        READMACRODEFS _ (HARRAY 50]
          (for CH from 0 to 255 do (\SETSYNCODE (fetch READSA of RTBL)
                                          CH PUNCT.TTC))

     (* ;; "By default, every character except those noted below is a punctuation character")

          (for CH from (CHARCODE A) to (CHARCODE Z) do (\SETSYNCODE (fetch READSA of RTBL)
                                                              CH TEXT.TTC))
                                                             (* ; "Upper case alpha")
          (for CH from (CHARCODE a) to (CHARCODE z) do (\SETSYNCODE (fetch READSA of RTBL)
                                                              CH TEXT.TTC))
                                                             (* ; "Lower case alpha")
          (for CH from (CHARCODE 0) to (CHARCODE 9) do (\SETSYNCODE (fetch READSA of RTBL)
                                                              CH TEXT.TTC))
                                                             (* ; "And digits are text characters")

     (* ;; "European chars and accents are text characters:")

          (for CH from (CHARCODE "361,41") to (CHARCODE "361,376")
             do (\SETSYNCODE (fetch READSA of RTBL)
                       CH TEXT.TTC))
          (for CH from (CHARCODE "0,301") to (CHARCODE "0,317")
             do (\SETSYNCODE (fetch READSA of RTBL)
                       CH TEXT.TTC))
          (for CH from (CHARCODE "0,341") to (CHARCODE "0,376")
             do (\SETSYNCODE (fetch READSA of RTBL)
                       CH TEXT.TTC))
          (for CH in (CHARCODE (CR SPACE TAB ^L)) do (\SETSYNCODE (fetch READSA of RTBL)
                                                            CH WHITESPACE.TTC))
                                                             (* ; "And these are white space")
          (for CH in (LIST MSPACE NSPACE THINSPACE FIGSPACE)
             do (\SETSYNCODE (fetch READSA of RTBL)
                       CH TEXT.TTC))
          (RETURN RTBL])

(TEDIT.GETSYNTAX
  [LAMBDA (CH TABLE)                                         (* ; "Edited 31-Mar-87 10:01 by jds")
                                                             (* ; 
                                                   "Find TEdit's interpretation of a given character")
    (SELECTC (\SYNCODE [fetch READSA of (COND
                                           ((type? TEXTOBJ TABLE)
                                                             (* ; 
     "If given a TEXTOBJ in place of a read table, coerce it to the read table for that edit session")
                                            (OR (fetch (TEXTOBJ TXTRTBL) of TABLE)
                                                TEDIT.READTABLE))
                                           ((type? STREAM TABLE)
                                                             (* ; 
     "If given a TEXTOBJ in place of a read table, coerce it to the read table for that edit session")
                                            (OR (fetch (TEXTOBJ TXTRTBL) of (fetch (TEXTSTREAM 
                                                                                          TEXTOBJ)
                                                                               of TABLE))
                                                TEDIT.READTABLE))
                                           (T (OR TABLE TEDIT.READTABLE]
                    (COND
                       ((LITATOM CH)                         (* ; 
                                                         "Symbols are converted to numeric charcodes")
                        (APPLY* 'CHARCODE CH))
                       ((STRINGP CH)                         (* ; "As are string char-names")
                        (APPLY* 'CHARCODE CH))
                       (T CH)))
        (WORDDELETE.TTC 
             'WORDDELETE)
        (CHARDELETE.TTC 
             'CHARDELETE)
        (DELETE.TTC 'DELETE)
        (UNDO.TTC 'UNDO)
        (REDO.TTC 'REDO)
        (FUNCTIONCALL.TTC 
             'FN)
        (CMD.TTC 'CMD)
        (NEXT.TTC 'NEXT)
        (EXPAND.TTC 'EXPAND)
        NIL])

(TEDIT.SETSYNTAX
  [LAMBDA (CHAR CLASS TABLE)                                 (* ; "Edited 31-Mar-87 10:00 by jds")
                                                             (* ; 
                                                        "SETS TEDIT-STYLE SYNTAX BITS IN A TERMTABLE")
    (PROG1 (TEDIT.GETSYNTAX (SETQ CHAR (COND
                                          ((LITATOM CHAR)
                                           (APPLY* 'CHARCODE CHAR))
                                          ((STRINGP CHAR)
                                           (APPLY* 'CHARCODE CHAR))
                                          (T CHAR)))
                  TABLE)
        (\SETSYNCODE [fetch READSA of (COND
                                         ((type? TEXTOBJ TABLE)
                                                             (* ; 
     "If given a TEXTOBJ in place of a read table, coerce it to the read table for that edit session")
                                          (OR (fetch (TEXTOBJ TXTRTBL) of TABLE)
                                              TEDIT.READTABLE))
                                         ((type? STREAM TABLE)
                                                             (* ; 
     "If given a TEXTOBJ in place of a read table, coerce it to the read table for that edit session")
                                          (OR (fetch (TEXTOBJ TXTRTBL) of (fetch (TEXTSTREAM TEXTOBJ)
                                                                             of TABLE))
                                              TEDIT.READTABLE))
                                         (T (OR TABLE TEDIT.READTABLE]
               CHAR
               (SELECTQ CLASS
                   (CHARDELETE CHARDELETE.TTC)
                   (WORDDELETE WORDDELETE.TTC)
                   ((DELETE LINEDELETE) 
                        DELETE.TTC)
                   (UNDO UNDO.TTC)
                   (REDO REDO.TTC)
                   (CMD CMD.TTC)
                   (FN FUNCTIONCALL.TTC)
                   (NEXT NEXT.TTC)
                   (EXPAND EXPAND.TTC)
                   NONE.TTC)))])

(TEDIT.GETFUNCTION
  [LAMBDA (CHARCODE TABLE)                                   (* jds "19-Sep-85 17:06")
                                                             (* Gets the FN that is called when CH 
                                                             is hit inside TEDIT.)
    [SETQ TABLE (COND
                   ((type? TEXTOBJ TABLE)

         (* If given a TEXTOBJ in place of a read table, coerce it to the read table for 
         that edit session)

                    (fetch (TEXTOBJ TXTRTBL) of TABLE))
                   ((type? STREAM TABLE)

         (* If given a TEXTOBJ in place of a read table, coerce it to the read table for 
         that edit session)

                    (fetch (TEXTOBJ TXTRTBL) of (fetch (TEXTSTREAM TEXTOBJ) of TABLE)))
                   (T (OR TABLE TEDIT.READTABLE]
    (SETQ CHARCODE (COND
                      ((LITATOM CHARCODE)
                       (APPLY* 'CHARCODE CHARCODE))
                      (T CHARCODE)))
    (AND TABLE (type? READTABLEP TABLE)
         (IEQP FUNCTIONCALL.TTC (\SYNCODE (fetch READSA of TABLE)
                                       CHARCODE))
         (fetch READMACRODEFS of TABLE)
         (CAR (FETCH MACROFN OF (GETHASH CHARCODE (fetch READMACRODEFS of TABLE])

(TEDIT.SETFUNCTION
  [LAMBDA (CHARCODE FN RTBL)                                 (* ; "Edited 31-Mar-87 10:58 by jds")
                                                             (* ; 
                           "Set TEDITs (read) table so that FN is called whenever CHARCODE is typed.")
                                                             (* ; 
                                                  "If FN is NIL, make the character be normal again.")
    [SETQ RTBL (COND
                  ((type? TEXTOBJ RTBL)                      (* ; 
     "If given a TEXTOBJ in place of a read table, coerce it to the read table for that edit session")
                   (fetch (TEXTOBJ TXTRTBL) of RTBL))
                  ((type? STREAM RTBL)                       (* ; 
     "If given a TEXTOBJ in place of a read table, coerce it to the read table for that edit session")
                   (fetch (TEXTOBJ TXTRTBL) of (fetch (TEXTSTREAM TEXTOBJ) of RTBL)))
                  (T (OR RTBL TEDIT.READTABLE]
    (\SETSYNCODE (fetch READSA of RTBL)
           (SETQ CHARCODE (COND
                             ((LITATOM CHARCODE)
                              (APPLY* 'CHARCODE CHARCODE))
                             ((STRINGP CHARCODE)
                              (APPLY* 'CHARCODE CHARCODE))
                             (T CHARCODE)))
           (COND
              (FN                                            (* ; 
                                 "He gave us a function to call.  Set up the syntax so it IS called.")
                  FUNCTIONCALL.TTC)
              (T                                             (* ; 
      "He gave us a function of NIL, meaning 'turn it off' .  Cause this character to become normal.")
                 NONE.TTC)))                                 (* ; 
                                                          "Mark the character as invoking a function")
    (OR (fetch READMACRODEFS of RTBL)
        (replace READMACRODEFS of RTBL with (HARRAY 50)))    (* ; 
                                           "Make sure there's a hash table to store the function in.")
    (PUTHASH CHARCODE (CREATE READMACRODEF
                             MACROTYPE _ 'TEDIT
                             MACROFN _ (LIST FN))
           (fetch READMACRODEFS of RTBL])

(TEDIT.WORDGET
  [LAMBDA (CH TABLE)                                         (* jds "27-MAY-83 13:24")
    (\SYNCODE (fetch READSA of (OR TABLE TEDIT.WORDBOUND.READTABLE))
           (COND
              ((SMALLP CH))
              (T (CHCON1 CH])

(TEDIT.WORDSET
  [LAMBDA (CHARCODE CLASS TABLE)                             (* jds " 1-JUN-83 12:23")
                                                             (* SETS TEDIT-STYLE SYNTAX BITS IN A 
                                                             TERMTABLE)
    (\SETSYNCODE (fetch READSA of (OR TABLE TEDIT.WORDBOUND.READTABLE))
           (COND
              ((SMALLP CHARCODE))
              (T (CHCON1 CHARCODE)))
           (COND
              ((FIXP CLASS))
              (T (SELECTQ CLASS
                     (PUNCTUATION PUNCT.TTC)
                     (WHITESPACE WHITESPACE.TTC)
                     (TEXT TEXT.TTC)
                     TEXT.TTC])
)
(DECLARE%: DONTEVAL@LOAD DOCOPY 

(RPAQ TEDIT.READTABLE (\TEDIT.READTABLE))

(RPAQ TEDIT.WORDBOUND.READTABLE (\TEDIT.WORDBOUND.READTABLE))
)
(DECLARE%: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS TEDIT.READTABLE TEDIT.WORDBOUND.READTABLE)
)
(DECLARE%: DONTCOPY
  (FILEMAP (NIL (7384 33034 (\TEDIT.INTERRUPT.SETUP 7394 . 9059) (\TEDIT.MARKACTIVE 9061 . 9273) (
\TEDIT.MARKINACTIVE 9275 . 9491) (\PNC 9493 . 10126) (\TEDIT.COMMAND.LOOP 10128 . 26422) (
\TEDIT.COMMAND.RESET.SETUP 26424 . 33032)) (33554 46928 (\TEDIT.READTABLE 33564 . 35173) (
\TEDIT.WORDBOUND.READTABLE 35175 . 37768) (TEDIT.GETSYNTAX 37770 . 39966) (TEDIT.SETSYNTAX 39968 . 
42161) (TEDIT.GETFUNCTION 42163 . 43523) (TEDIT.SETFUNCTION 43525 . 45964) (TEDIT.WORDGET 45966 . 
46227) (TEDIT.WORDSET 46229 . 46926)))))
STOP
