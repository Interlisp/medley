(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)

(FILECREATED "12-Aug-2023 15:09:53" {WMEDLEY}<library>TEDIT>TEDIT-FILE.;257 188367 

      :EDIT-BY rmk

      :CHANGES-TO (FNS \TEDIT.GET.FOREIGN.FILE \TEDIT.GET.FORMATTED.FILE TEDIT.GET.PCTB3)

      :PREVIOUS-DATE "12-Aug-2023 11:03:09" {WMEDLEY}<library>TEDIT>TEDIT-FILE.;256)


(PRETTYCOMPRINT TEDIT-FILECOMS)

(RPAQQ TEDIT-FILECOMS
       ((DECLARE%: EVAL@COMPILE DONTCOPY (CONSTANTS (\PieceDescriptorLOOKS 0)
                                                (\PieceDescriptorOBJECT 1)
                                                (\PieceDescriptorPARA 2)
                                                (\PieceDescriptorPAGEFRAME 3)
                                                (\PieceDescriptorCHARLOOKSLIST 4)
                                                (\PieceDescriptorPARALOOKSLIST 5)
                                                (\PieceDescriptorSAFEOBJECT 6)
                                                (\PieceDescriptorMETAINFO 7)))
        (COMS 
              (* ;; "GETting a file")

              (FNS TEDIT.GET TEDIT.FORMATTEDFILEP \TEDIT.GET.FOREIGN.FILE \TEDIT.GET.UNFORMATTED.FILE
                   \TEDIT.GET.FORMATTED.FILE \TEDIT.FORMATTEDSTREAMP \TEDIT.GET.UNFORMATTED.FILE.XCCS
                   \TEDIT.GET.UNFORMATTED.FILE.UTF8 TEDIT.PARSE.PAGEFRAMES1 \ARBIN \ATMIN \DWIN 
                   \STRINGIN \TEDIT.FORMATTEDP1 TEDIT.GET.PASSWORD)
              (FNS TEDIT.GET.PCTB3 \TEDIT.CACHEFILE \TEDIT.UNIQUIFY.ALL \INSERT-NSCLEARED-PIECE))
        (COMS 
              (* ;; "INCLUDEing a file")

              (FNS TEDIT.INCLUDE TEDIT.RAW.INCLUDE))
        (COMS 
              (* ;; "PUTting a file:")

              (FNS TEDIT.PUT TEDIT.PUT.PCTB TEDIT.PUT.PCTB.PLAINTEXT \TEDIT.PUTRESET 
                   TEDIT.PUT.PIECE.DESCRIPTOR \ARBOUT \ATMOUT \DWOUT \STRINGOUT \TEDIT-OPEN-FONT-FILE
                   ))
        (FNS \TEDIT.GET.CHARLOOKS.LIST \TEDIT.GET.SINGLE.CHARLOOKS \TEDIT.PUT.CHARLOOKS.LIST 
             \TEDIT.PUT.SINGLE.CHARLOOKS)
        (FNS \TEDIT.GET.PARALOOKS.LIST \TEDIT.GET.SINGLE.PARALOOKS \TEDIT.PUT.PARALOOKS.LIST 
             \TEDIT.PUT.SINGLE.PARALOOKS)
        (GLOBALVARS TEDIT.INPUT.FORMATS *TEDIT-FILE-READTABLE*)
        (INITVARS (TEDIT.INPUT.FORMATS NIL)
               (*TEDIT-FILE-READTABLE* (COPYREADTABLE \ORIGREADTABLE))
                                                             (* ; 
                                         "For consistent reading and writing of info on TEdit files.")
               )
        (COMS 
              (* ;; 
        "For converting old incoming format.  Cutover 5/22/85 to permit looks changes in the future.")

              (FNS TEDIT.GET.PCTB2 \TEDIT.GET.CHARLOOKS.LIST2 \TEDIT.GET.SINGLE.CHARLOOKS2 
                   \TEDIT.PUT.SINGLE.PARALOOKS2 \TEDIT.PUT.SINGLE.CHARLOOKS2 
                   \TEDIT.GET.PARALOOKS.LIST2 \TEDIT.GET.SINGLE.PARALOOKS2 \TEDIT.PUT.CHARLOOKS.LIST2
                   \TEDIT.PUT.PARALOOKS.LIST2))
        (COMS 
              (* ;; "For converting incoming old-format files (1/27/85 cutover)")

              (FNS TEDIT.GET.PCTB1 TEDIT.GET.PAGEFRAMES1 \TEDIT.GET.CHARLOOKS1 \TEDIT.GET.PARALOOKS1
                   TEDIT.GET.OBJECT1))
        (COMS 
              (* ;; "VERSION 0 Compatibility reading functions")

              (FNS TEDIT.GET.PCTB0 TEDIT.GET.CHARLOOKS0 TEDIT.GET.OBJECT0 TEDIT.GET.PARALOOKS0))))
(DECLARE%: EVAL@COMPILE DONTCOPY 
(DECLARE%: EVAL@COMPILE 

(RPAQQ \PieceDescriptorLOOKS 0)

(RPAQQ \PieceDescriptorOBJECT 1)

(RPAQQ \PieceDescriptorPARA 2)

(RPAQQ \PieceDescriptorPAGEFRAME 3)

(RPAQQ \PieceDescriptorCHARLOOKSLIST 4)

(RPAQQ \PieceDescriptorPARALOOKSLIST 5)

(RPAQQ \PieceDescriptorSAFEOBJECT 6)

(RPAQQ \PieceDescriptorMETAINFO 7)


(CONSTANTS (\PieceDescriptorLOOKS 0)
       (\PieceDescriptorOBJECT 1)
       (\PieceDescriptorPARA 2)
       (\PieceDescriptorPAGEFRAME 3)
       (\PieceDescriptorCHARLOOKSLIST 4)
       (\PieceDescriptorPARALOOKSLIST 5)
       (\PieceDescriptorSAFEOBJECT 6)
       (\PieceDescriptorMETAINFO 7))
)
)



(* ;; "GETting a file")

(DEFINEQ

(TEDIT.GET
  [LAMBDA (TEXTOBJ FILE UNFORMATTED?)                        (* ; "Edited  3-Aug-2023 14:27 by rmk")
                                                             (* ; "Edited 16-Jun-2023 08:36 by rmk")
                                                             (* ; "Edited 17-May-2023 13:38 by rmk")
                                                             (* ; "Edited 18-Apr-2023 23:57 by rmk")
                                                            (* ; "Edited 19-May-2001 11:43 by rmk:")
                                                             (* ; "Edited 19-Apr-93 13:12 by jds")

    (* ;; "Get a new file (overwriting the one being edited.)")

    (SETQ TEXTOBJ (TEXTOBJ TEXTOBJ))
    (PROG ((GETFN (TEXTPROP TEXTOBJ 'GETFN))
           (SEL (TEXTSEL TEXTOBJ))
           OFILE LINES TITLE FILENAME MENUSTREAM TEDIT.GET.FINISHEDFORMS)
          (CL:WHEN [AND (GETTOBJ TEXTOBJ \DIRTY)
                        (PROGN (TEDIT.PROMPTCLEAR TEXTOBJ)
                               (NOT (MOUSECONFIRM "Not saved yet; LEFT go Get anyway." T
                                           (GETTOBJ TEXTOBJ PROMPTWINDOW]

              (* ;; "Only do the GET if he knows he'll zorch himself.")

              (RETURN))
          [SETQ OFILE (OR FILE (\TEDIT.MAKEFILENAME (TEDIT.GETINPUT TEXTOBJ "File to GET:  "
                                                           (OR (TEXTPROP TEXTOBJ 'LASTGETFILENAME)
                                                               (\TEXTSTREAM.FILENAME TEXTOBJ]
          (TEXTPROP TEXTOBJ 'LASTGETFILENAME OFILE)
          (CL:WHEN (AND OFILE (OR (OPENP OFILE)
                                  (INFILEP OFILE)))          (* ; 
                                                "Only if there's a file to load and the file exists.")
              (CL:WHEN [AND GETFN (EQ 'DON'T (APPLY* GETFN (GETTOBJ TEXTOBJ STREAMHINT)
                                                    (FULLNAME OFILE)
                                                    'BEFORE] (* ; 
                                                      "He doesn't want this document put.  Bail out.")
                  (RETURN))
              (TEXTPROP TEXTOBJ 'LASTGETFILENAME NIL)
              (RESETLST
                  (RESETSAVE (TTYDISPLAYSTREAM (OR (AND (NEQ 'DON'T (GETTOBJ TEXTOBJ PROMPTWINDOW)
                                                             'DON'T)
                                                        (GETTOBJ TEXTOBJ PROMPTWINDOW))
                                                   PROMPTWINDOW)))
                  (RESETSAVE (CURSOR WAITINGCURSOR))
                  (\SHOWSEL SEL NIL)                         (* ; "Turn off the old selection")
                  (\TEXTCLOSEF (GETTIBJ TEXTOBJ STREAMHINT)) (* ; "CLOSE the old files")
                  (CL:UNLESS (AND (STREAMP FILE)
                                  (OPENP FILE))
                      [SETQ OFILE (OPENSTREAM OFILE 'INPUT NIL '((TYPE TEXT])
                  (for PANE inside (GETTOBJ TEXTOBJ \WINDOW) do 
                                                             (* ; "Remove the previous hardcopyfile")
                                                                (WINDOWPROP PANE 'HARDCOPYFILE NIL))

                  (* ;; "Open the new one.")

                  (TEDIT.BUILD.PCTB OFILE TEXTOBJ NIL NIL UNFORMATTED?)
                  (for FORM in TEDIT.GET.FINISHEDFORMS do (EVAL FORM))
                                                             (* ; 
                                                      "Do any necessary cleanup for outside packages")
                  (SETTOBJ TEXTOBJ \DIRTY NIL)
                  (SETQ LINES (GETTOBJ TEXTOBJ LINES))
                  (for L inside LINES do (SETLD L NEXTLINE NIL))

                  (* ;; "The old cached piece is no longer valid--keep people from stepping on it, to prevent lost type-in and smashing other docuemnts to which it has been moved..")

                  (for S in (\TEDIT.COLLECTSELS TEXTOBJ) do (SETSEL S SET NIL))
                  (SETSEL TEDIT.SELECTION SET NIL)
                  (\TEDIT.UPDATE.SEL SEL 1 0 'LEFT)
                  (SETSEL SEL SET T)
                  (SETTOBJ TEXTOBJ CARETLOOKS (\TEDIT.GET.INSERT.CHARLOOKS TEXTOBJ SEL))
                  (for PANE inpanes TEXTOBJ as LINE inside LINES do 
                                                             (* ; 
                                                         "Fill the edit window (s) with the new text")
                                                                    (\FILLPANE LINE TEXTOBJ PANE))
                  (\FIXSEL SEL TEXTOBJ)
                  (\SHOWSEL SEL T)
                  (SETQ TITLE (TEXTSTREAM.TITLE TEXTOBJ))    (* ; "find and set the title")
                  (\TEDIT.WINDOW.TITLE TEXTOBJ (\TEDIT.ORIGINAL.WINDOW.TITLE TITLE NIL))
                  (SETQ MENUSTREAM (TEDITMENU.STREAM TEXTOBJ))
                  (CL:WHEN (AND MENUSTREAM (type? LITATOM TITLE))
                                                             (* ; 
                            "if we have a filename then put it in the GET and PUT fields of the menu")
                      (SETQ FILENAME (PACKFILENAME 'VERSION NIL 'BODY TITLE))
                      (MBUTTON.SET.FIELD MENUSTREAM 'Get FILENAME)
                      (MBUTTON.SET.FIELD MENUSTREAM 'Put FILENAME))
                  (\TEDIT.SET.WINDOW.EXTENT TEXTOBJ (\TEDIT.PRIMARYW TEXTOBJ))
                  (SETTOBJ TEXTOBJ TXTHISTORY NIL)
                  (SETTOBJ TEXTOBJ TXTHISTORYUNDONE NIL)
                  (\TEDIT.HISTORYADD TEXTOBJ (create TEDITHISTORYEVENT
                                                    THACTION _ 'Get)))
              (CL:WHEN GETFN
                  (APPLY* GETFN (GETTOBJ TEXTOBJ STREAMHINT)
                         (FULLNAME (GETTOBJ TEXTOBJ TXTFILE))
                         'AFTER))
              (OFILE (TEDIT.PROMPTPRINT TEXTOBJ "[File not found]")
                                                             (* ; 
                                     "Remember the file name he tried for, so we offer it next time.")
                     (TEXTPROP TEXTOBJ 'LASTGETFILENAME OFILE))
              (T (TEDIT.PROMPTPRINT TEXTOBJ "[Get aborted]" T)))])

(TEDIT.FORMATTEDFILEP
  [LAMBDA (FILE)                                             (* ; "Edited 12-Jul-2023 23:35 by rmk")

    (* ;; "If FILE is a Tedit formatted stream or the name of a Tedit formatted file, returns a pair consistening of its version number and piececount.  Piececount is probably useless.")

    (RESETLST
        (if (STREAMP FILE)
            then [RESETSAVE (GETFILEPTR FILE)
                        `(PROGN (SETFILEPTR ,FILE OLDVALUE]
                 (\TEDIT.FORMATTEDP1 FILE)
          else (LET (STREAM)
                    [RESETSAVE (SETQ STREAM (OPENSTREAM FILE 'INPUT))
                           `(PROGN (CLOSEF? OLDVALUE]
                    (\TEDIT.FORMATTEDP1 STREAM))))])

(\TEDIT.GET.FOREIGN.FILE
  [LAMBDA (TEXT TEXTOBJ START END PROPS)                     (* ; "Edited 12-Aug-2023 15:07 by rmk")
                                                             (* ; "Edited 10-Aug-2023 17:26 by rmk")
                                                             (* ; "Edited  6-Sep-2022 12:18 by rmk")
                                                             (* ; "Edited 26-Aug-2022 08:43 by rmk")
                                                             (* ; "Edited 25-Jul-2022 21:21 by rmk")

    (* ;; "If TEXT is recognized as a file in a user format, convert it into a TEDIT piecetable.")

    (LET (USERFILEFORMAT USERTEMP TSTREAM)
         (CL:WHEN (SETQ USERFILEFORMAT (for FILETYPE in TEDIT.INPUT.FORMATS
                                          when (SETQ USERTEMP (APPLY* (CAR FILETYPE)
                                                                     TEXT TEXTOBJ))
                                          do (RETURN FILETYPE)))
                                                             (* ; 
       "The input file is in a user-sensible format, which he is willing to convert for TEdit's use.")

             (* ;; "Perform the conversion from a foreign file format into a new TEDIT stream that is then included in the TEXTOBJ stream.  It could be that the foreign file is coming from a TEDIT.GET on an existing stream.")

             (SETQ TSTREAM (APPLY* (CADR USERFILEFORMAT)
                                  TEXT USERTEMP TEXTOBJ))
             (CL:WHEN (AND NIL TEXTOBJ)                      (* ; "If we're filling in an existing TEXTOBJ, there are fields that need to be copied, such as the page formatting, which the converter may have set.")
                 (CL:UNLESS (GETTOBJ TEXTOBJ TXTPAGEFRAMES)
                     (SETTOBJ TEXTOBJ TXTPAGEFRAMES (GETTOBJ (TEXTOBJ TSTREAM)
                                                           TXTPAGEFRAMES))))
             TEXTOBJ)])

(\TEDIT.GET.UNFORMATTED.FILE
  [LAMBDA (STREAM TEXTOBJ START END)                         (* ; "Edited  3-Aug-2023 22:04 by rmk")
                                                             (* ; "Edited  3-May-2023 17:38 by rmk")
                                                             (* ; "Edited 26-Apr-2023 14:09 by rmk")
    (RESETLST
        [RESETSAVE NIL `(STREAMPROP ,STREAM ENDOFSTREAMOP ,(STREAMPROP STREAM 'ENDOFSTREAMOP
                                                                  (FUNCTION NILL]
        (CL:UNLESS START (SETQ START 0))
        (CL:UNLESS END
            (SETQ END (GETEOFPTR STREAM)))
        (\SETFILEPTR STREAM START)
        (LET [(DEFAULTCHARLOOKS (GETTOBJ TEXTOBJ DEFAULTCHARLOOKS))
              (DEFAULTPARALOOKS (GETTOBJ TEXTOBJ FMTSPEC))
              (FORMAT (STREAMPROP STREAM 'FORMAT]
             (CL:WHEN (AND (EQ FORMAT :STRING)
                           (\IOMODEP STREAM 'OUTPUT T))
                 (SETQ STREAM (COPYFILE STREAM '{NODIRCORE})))
             (SELECTQ FORMAT
                 (:XCCS (\TEDIT.GET.UNFORMATTED.FILE.XCCS STREAM TEXTOBJ START END))
                 (:UTF-8 (HELP "NEED UTF-8 PLAINTEXT READER"))
                 (:STRING (CL:WHEN (\IOMODEP STREAM 'OUTPUT T)

                              (* ;; 
            "Protect against somebody smashing the string. (Should also protect other files, but...)")

                              (SETQ STREAM (COPYFILE STREAM '{NODIRCORE})))

                          (* ;; "String format is known to be fat.  Eventually it should be sufficient to know the byesperchar of the piece to figure out the PFILEPOS byte pointers, and just use the generic \OUTCHAR to get the characters.")

                          (\INSERTPIECE (create PIECE
                                               PCONTENTS _ STREAM
                                               PFPOS _ START
                                               PLEN _ (FOLDLO (IDIFFERENCE END START)
                                                             2)
                                               PLOOKS _ DEFAULTCHARLOOKS
                                               PPARALAST _ NIL
                                               PPARALOOKS _ DEFAULTPARALOOKS
                                               PTYPE _ FATFILE2.PTYPE
                                               PEXTERNALFORMAT _ FORMAT
                                               PBYTESPERCHAR _ 2)
                                 (\LASTPIECE TEXTOBJ)
                                 TEXTOBJ))
                 (\INSERTPIECE TEXTOBJ
                        (create PIECE
                               PCONTENTS _ STREAM
                               PFPOS _ START
                               PLEN _ (IDIFFERENCE END START)
                               PLOOKS _ DEFAULTCHARLOOKS
                               PPARALAST _ NIL
                               PPARALOOKS _ DEFAULTPARALOOKS
                               PTYPE _ THINFILE.PTYPE
                               PEXTERNALFORMAT _ FORMAT)
                        (\LASTPIECE TEXTOBJ)
                        TEXTOBJ))))])

(\TEDIT.GET.FORMATTED.FILE
  [LAMBDA (TEXT TEXTOBJ START END)                           (* ; "Edited 12-Aug-2023 08:41 by rmk")
                                                             (* ; "Edited  3-Aug-2023 20:54 by rmk")
                                                             (* ; "Edited  1-Aug-2023 11:46 by rmk")
                                                             (* ; "Edited 26-Apr-2023 14:31 by rmk")
                                                             (* ; "Edited 11-Jun-99 14:37 by rmk:")
                                                             (* ; "Edited 19-Apr-93 13:46 by jds")

    (* ;; "TEXT is an open stream that knows its external format, TEXTOBJ is the TEXTOBJ to be filled in.  If specified, START and END define the byte positions in TEXT to be included.")

    (* ;; 
    "If TEXT is a formatted file, it is included in TEXTOBJ and TEXTOBJ is returned, otherwise NIL")

    (LET (PC (PCCOUNT (\TEDIT.FORMATTEDP1 TEXT END)))
         (CL:WHEN PCCOUNT
             (SETTOBJ TEXTOBJ TXTPAGEFRAMES NIL)
             (if (OR (TEXTPROP TEXTOBJ 'CACHE)
                     (NOT (RANDACCESSP TEXT)))
                 then                                        (* ; 
                                    "If the file device isn't random access, cache the file locally.")
                                                             (* ; 
                                                         "Also do this if he asks for a local cache.")
                      (SETQ TEXT (\TEDIT.CACHEFILE TEXT TEXTOBJ START END)) 

                      (* ;; 
 "Since we only copied the relevant part of the file into the cache, the whole file is now relevant.")

                      (SETQ START 0)
                      (SETQ END (GETEOFPTR TEXT))
               else (CL:UNLESS START (SETQ START 0))
                    (CL:UNLESS END (GETEOFPTR TEXT)))
             (SELECTQ (CAR PCCOUNT)
                 (3                                          (* ; "Current version")
                    (TEDIT.GET.PCTB3 TEXT TEXTOBJ (CADR PCCOUNT)
                           START END))
                 (2                                          (* ; "Version 2;  obsoleted 5/22/85")
                    (TEDIT.GET.PCTB2 TEXT TEXTOBJ (CADR PCCOUNT)
                           START END))
                 (1                                          (* ; 
                                                   "Version 1;  obsoleted at INTERMEZZO release 2/85")
                    (TEDIT.GET.PCTB1 TEXT TEXTOBJ (CADR PCCOUNT)
                           START END))
                 (0                                          (* ; "VERSION 0")
                    (TEDIT.GET.PCTB0 TEXT TEXTOBJ (CADR PCCOUNT)
                           START END))
                 (SHOULDNT "File format version incompatible with this version of TEdit."))
             (CL:WHEN (SETQ PC (PREVPIECE (\LASTPIECE TEXTOBJ)))
                 (replace (PIECE PPARALAST) of PC with T))
             TEXTOBJ)])

(\TEDIT.FORMATTEDSTREAMP
  [LAMBDA (TSTREAM)                                          (* ; "Edited 16-Sep-2022 21:00 by rmk")
                                                             (* ; "Edited  1-Sep-2022 08:54 by rmk")
                                                             (* ; "Edited 19-Apr-93 11:57 by jds")
                                                             (* ; 
   "Test to see if this stream's text would need a TEdit-format file (T) or is just plain text (NIL)")
    (LET ((TEXTOBJ (TEXTOBJ TSTREAM)))
         (for (PC _ (\FIRSTPIECE TEXTOBJ))
              PREVPC
              (FONTFILE _ 0)
              (OLDPARALOOKS _ (fetch (TEXTOBJ FMTSPEC) of TEXTOBJ))
              (OLDLOOKS _ (OR (fetch (TEXTOBJ DEFAULTCHARLOOKS) of TEXTOBJ)
                              TEDIT.DEFAULT.CHARLOOKS))
              (TENTATIVE _ (TEXTPROP TEXTOBJ 'TEDIT.TENTATIVE)) by (NEXTPIECE PC) while PC
            do [COND
                  ((EQ OBJECT.PTYPE (PTYPE PC))              (* ; 
                                                             "OBJECTS require the special format")
                   (SETQ FONTFILE 4)
                   (GO $$OUT))
                  ([AND (OR (NOT PREVPC)
                            (fetch (PIECE PPARALAST) of PREVPC))
                        (NOT (EQFMTSPEC (fetch (PIECE PPARALOOKS) of PC)
                                    (fetch (TEXTOBJ FMTSPEC) of TEXTOBJ]
                                                             (* ; "We just hit a paragraph break.")
                   (SETQ FONTFILE (IMAX FONTFILE 3)))
                  ([OR (NOT (EQCLOOKS OLDLOOKS (fetch (PIECE PLOOKS) of PC)))
                       (AND TENTATIVE (if PREVPC
                                          then (NEQ (fetch (PIECE PNEW) of PREVPC)
                                                    (fetch (PIECE PNEW) of PC))
                                        else (fetch (PIECE PNEW) of PC]
                                                             (* ; "Change in font, size, etc.")
                   (SETQ FONTFILE (IMAX FONTFILE 2)))
                  ((MEMB (PTYPE PC)
                         (CONSTANT (LIST FATFILE1.PTYPE FATFILE2.PTYPE)))
                                                             (* ; "16-bit chars in the piece")
                   (SETQ FONTFILE (IMAX FONTFILE 1]
               (SETQ PREVPC PC) finally (RETURN (SELECTQ FONTFILE
                                                    (0 NIL)
                                                    (1 'NSCHARS)
                                                    (2 'CHARLOOKS)
                                                    (3 'PARALOOKS)
                                                    (4 'IMAGEOBJ)
                                                    NIL])

(\TEDIT.GET.UNFORMATTED.FILE.XCCS
  [LAMBDA (STREAM TEXTOBJ START END)                         (* ; "Edited  3-Aug-2023 22:05 by rmk")
                                                             (* ; "Edited 19-Aug-2022 22:34 by rmk")

    (* ;; "We build a piece for each NS stringlet, fat or thin.")

    (* ;; "We don't want to do the (possibly FIXP) arithmetic at each byte position to determine when we have crossed END.  We do that only when we get a charset shift, back up to END and say that STILLMORE is NIL at the first post-END charset.  The ENDOFSTREAMOP deals with the case that the last piece runs off the EOF.")

    (BIND C PC BEGINFILEPTR SHIFTFILEPTR PLEN (DEFAULTCHARLOOKS _ (fetch (TEXTOBJ DEFAULTCHARLOOKS)
                                                                     of TEXTOBJ))
          (DEFAULTPARALOOKS _ (fetch (TEXTOBJ FMTSPEC) of TEXTOBJ))
          (PTYPE _ THINFILE.PTYPE)
          (PCHARSET _ 0)
          (EXTFORMAT _ (FFETCH (STREAM EXTERNALFORMAT) OF STREAM))
       FIRST (CL:WHEN (EQ NSCHARSETSHIFT (\PEEKBIN STREAM T))(* ; 
                                                        "Starts with a shift, set up for first piece")
                 (BIN STREAM)
                 (SETQ PTYPE (IF (EQ NSCHARSETSHIFT (SETQ C (BIN STREAM)))
                                 THEN (CL:UNLESS (EQ \NORUNCODE (BIN STREAM))
                                          (ERROR (ERROR "INVALID XCCS FILE" STREAM)))
                                      FATFILE2.PTYPE
                               ELSEIF (EQ 0 (SETQ PCHARSET (LLSH C 8)))
                                 THEN THINFILE.PTYPE
                               ELSE FATFILE1.PTYPE)))
             (SETQ BEGINFILEPTR (GETFILEPTR STREAM)) WHEN (OR (EQ NSCHARSETSHIFT (SETQ C (BIN STREAM)
                                                                                  ))
                                                              (NULL C))
       DO 
          (* ;; "First, put out the last piece, then set up for new one.")

          (SETQ SHIFTFILEPTR (\GETFILEPTR STREAM))
          (CL:WHEN (IGEQ SHIFTFILEPTR END)
              (SETQ SHIFTFILEPTR (ADD1 END))) 

          (* ;; "We have to keep pieces for empty runs in the middle, so that we never see the vacuous shift sequences.")

          (SETQ PLEN (SUB1 (IDIFFERENCE SHIFTFILEPTR BEGINFILEPTR)))
          (CL:WHEN (EQ PTYPE FATFILE2.PTYPE)                 (* ; "PLEN counts chars")
              (SETQ PLEN (FOLDLO PLEN 2)))
          (CL:WHEN (IGREATERP PLEN 0)                        (* ; "No need for an empty piece")
              (SETQ PC
               (create PIECE
                      PCONTENTS _ STREAM
                      PFPOS _ BEGINFILEPTR
                      PLEN _ PLEN
                      PLOOKS _ DEFAULTCHARLOOKS
                      PPARALAST _ NIL
                      PPARALOOKS _ DEFAULTPARALOOKS
                      PEXTERNALFORMAT _ EXTFORMAT
                      PCHARSET _ PCHARSET
                      PTYPE _ PTYPE
                      PBINABLE _ (EQ PTYPE THINFILE.PTYPE)
                      PBYTESPERCHAR _ (CL:IF (EQ PTYPE FATFILE2.PTYPE)
                                          2
                                          1)))
              (\INSERTPIECE PC NIL TEXTOBJ))
          (CL:UNLESS (AND (ILEQ SHIFTFILEPTR END)
                          (SETQ C (BIN STREAM)))             (* ; "Reached the end")
              (GO $$OUT)) 

          (* ;; "Get set up for the next piece")

          (SETQ PTYPE (IF (EQ NSCHARSETSHIFT C)
                          THEN (CL:UNLESS (EQ \NORUNCODE (BIN STREAM))
                                   (ERROR (ERROR "INVALID XCCS FILE" STREAM)))
                               FATFILE2.PTYPE
                        ELSEIF (EQ 0 (SETQ PCHARSET (UNFOLD C 256)))
                          THEN THINFILE.PTYPE
                        ELSE FATFILE1.PTYPE))
          (SETQ BEGINFILEPTR (\GETFILEPTR STREAM])

(\TEDIT.GET.UNFORMATTED.FILE.UTF8
  [LAMBDA (STREAM TEXTOBJ START END)                         (* ; "Edited  3-Aug-2023 22:05 by rmk")
                                                             (* ; "Edited  5-May-2023 08:19 by rmk")
                                                             (* ; "Edited 26-Apr-2023 14:11 by rmk")
                                                             (* ; "Edited 12-Apr-2023 19:32 by rmk")
                                                             (* ; "Edited  5-Sep-2022 19:34 by rmk")
                                                             (* ; "Edited  1-Sep-2022 08:11 by rmk")
                                                             (* ; "Edited 19-Aug-2022 22:34 by rmk")

    (* ;; "We build a piece for each NS stringlet, fat or thin.")

    (* ;; "We don't want to do the (possibly FIXP) arithmetic at each byte position to determine when we have crossed END.  We do that only when we get a charset shift, back up to END and say that STILLMORE is NIL at the first post-END charset.  The ENDOFSTREAMOP deals with the case that the last piece runs off the EOF.")

    (HELP "UFT8 NOT IMPLEMENTED")
    (BIND C PC BEGINFILEPTR SHIFTFILEPTR PLEN (DEFAULTCHARLOOKS _ (fetch (TEXTOBJ DEFAULTCHARLOOKS)
                                                                     of TEXTOBJ))
          (DEFAULTPARALOOKS _ (fetch (TEXTOBJ FMTSPEC) of TEXTOBJ))
          (PTYPE _ THINFILE.PTYPE)
          (PCHARSET _ 0)
          (EXTFORMAT _ (FFETCH (STREAM EXTERNALFORMAT) OF STREAM))
       FIRST (CL:WHEN (EQ NSCHARSETSHIFT (\PEEKBIN STREAM T))(* ; 
                                                        "Starts with a shift, set up for first piece")
                 (BIN STREAM)
                 (SETQ PTYPE (IF (EQ NSCHARSETSHIFT (SETQ C (BIN STREAM)))
                                 THEN (CL:UNLESS (EQ \NORUNCODE (BIN STREAM))
                                          (ERROR (ERROR "INVALID XCCS FILE" STREAM)))
                                      FATFILE2.PTYPE
                               ELSEIF (EQ 0 (SETQ PCHARSET (LLSH C 8)))
                                 THEN THINFILE.PTYPE
                               ELSE FATFILE1.PTYPE)))
             (SETQ BEGINFILEPTR (GETFILEPTR STREAM)) WHEN (OR (EQ NSCHARSETSHIFT (SETQ C (BIN STREAM)
                                                                                  ))
                                                              (NULL C))
       DO 
          (* ;; "First, put out the last piece, then set up for new one.")

          (SETQ SHIFTFILEPTR (\GETFILEPTR STREAM))
          (CL:WHEN (IGEQ SHIFTFILEPTR END)
              (SETQ SHIFTFILEPTR (ADD1 END))) 

          (* ;; "We have to keep pieces for empty runs in the middle, so that we never see the vacuous shift sequences.")

          (SETQ PLEN (SUB1 (IDIFFERENCE SHIFTFILEPTR BEGINFILEPTR)))
          (CL:WHEN (EQ PTYPE FATFILE2.PTYPE)                 (* ; "PLEN counts chars")
              (SETQ PLEN (FOLDLO PLEN 2)))
          (CL:WHEN (IGREATERP PLEN 0)                        (* ; "No need for an empty piece")
              (SETQ PC
               (create PIECE
                      PCONTENTS _ STREAM
                      PFPOS _ BEGINFILEPTR
                      PLEN _ PLEN
                      PLOOKS _ DEFAULTCHARLOOKS
                      PPARALAST _ NIL
                      PPARALOOKS _ DEFAULTPARALOOKS
                      PEXTERNALFORMAT _ EXTFORMAT
                      PCHARSET _ PCHARSET
                      PTYPE _ PTYPE
                      PBINABLE _ (EQ PTYPE THINFILE.PTYPE)
                      PBYTESPERCHAR _ (CL:IF (EQ PTYPE FATFILE2.PTYPE)
                                          2
                                          1)))
              (\INSERTPIECE PC NIL TEXTOBJ))
          (CL:UNLESS (AND (ILEQ SHIFTFILEPTR END)
                          (SETQ C (BIN STREAM)))             (* ; "Reached the end")
              (GO $$OUT)) 

          (* ;; "Get set up for the next piece")

          (SETQ PTYPE (IF (EQ NSCHARSETSHIFT C)
                          THEN (CL:UNLESS (EQ \NORUNCODE (BIN STREAM))
                                   (ERROR (ERROR "INVALID XCCS FILE" STREAM)))
                               FATFILE2.PTYPE
                        ELSEIF (EQ 0 (SETQ PCHARSET (UNFOLD C 256)))
                          THEN THINFILE.PTYPE
                        ELSE FATFILE1.PTYPE))
          (SETQ BEGINFILEPTR (\GETFILEPTR STREAM])

(TEDIT.PARSE.PAGEFRAMES1
  [LAMBDA (PAGELIST PARENT)                                  (* ; "Edited  8-Mar-2023 18:14 by rmk")
                                                             (* ; "Edited  4-Oct-2022 16:57 by rmk")
                                                             (* ; "Edited  1-Oct-2022 16:02 by rmk")

    (* ;; "Internalize an external pageframe.")

    (* ;; "Exactly like TEDIT.PARSE.PAGEFRAMES, except this scales the region specs.")

    (LET (FRAMETYPE PAGEFRAME)
         (COND
            ((type? PAGEREGION PAGELIST)
             PAGELIST)
            ((NEQ 'LIST (SETQ FRAMETYPE (pop PAGELIST)))
             [SETQ PAGEFRAME (create PAGEREGION
                                    REGIONFILLMETHOD _ FRAMETYPE
                                    REGIONTYPE _ (pop PAGELIST)
                                    REGIONLOCALINFO _ (pop PAGELIST)
                                    REGIONSPEC _ (for VAL
                                                    in (OR (pop PAGELIST)
                                                           (LIST 0 0 0 0))
                                                    collect (HCUNSCALE MICASPERPT VAL]
             (replace REGIONSUBBOXES of PAGEFRAME with (for ALIST in (pop PAGELIST)
                                                          collect (TEDIT.PARSE.PAGEFRAMES1 ALIST 
                                                                         PAGEFRAME)))
             PAGEFRAME)
            (T (for FRAMESPEC in (CAR PAGELIST) collect (TEDIT.PARSE.PAGEFRAMES1 FRAMESPEC NIL])

(\ARBIN
  [LAMBDA (STREAM)                                           (* jds "13-Nov-86 20:21")
                                                             (* ; 
                                     "Read an arbitrary object from a file, parse it, and return it.")
    (PROG ((LEN (\SMALLPIN STREAM))
           USERSTR)
          (COND
             ((NOT (ZEROP LEN))
              (SETQ USERSTR (OPENSTRINGSTREAM (\STRINGIN STREAM LEN)
                                   'INPUT))
              (RETURN (PROG1 (READ USERSTR *TEDIT-FILE-READTABLE*)
                             (CLOSEF? USERSTR])

(\ATMIN
  [LAMBDA (STREAM)                                           (* ; "Edited  1-Aug-2022 12:04 by rmk")
                                                             (* jds " 3-Apr-84 10:41")
    (PROG ((LEN (\SMALLPIN STREAM)))
          (RETURN (COND
                     ((ZEROP LEN)
                      NIL)
                     (T (PACK (for I from 1 to LEN collect (CHARACTER (BIN STREAM])

(\DWIN
  [LAMBDA (FILE)                                             (* ; "Edited  1-Aug-2022 12:04 by rmk")
                                                             (* jds " 3-JAN-83 16:08")
    (IPLUS (LLSH (BIN FILE)
                 24)
           (LLSH (BIN FILE)
                 16)
           (LLSH (BIN FILE)
                 8)
           (BIN FILE])

(\STRINGIN
  [LAMBDA (STREAM SETLEN)                                    (* ; "Edited 20-Apr-88 19:54 by jds")

         (* Read a string in length-contents form%: One word for the length, and one byte 
         per character contained. However, the length may be specified by the caller 
         instead of being read from the file.)

    (PROG ((LEN (OR SETLEN (\SMALLPIN STREAM)))
           STR)
          (SETQ STR (ALLOCSTRING LEN))
          [OR (ZEROP LEN)
              (for I from 1 to LEN do (RPLCHARCODE STR I (READCCODE STREAM]
          (RETURN STR])

(\TEDIT.FORMATTEDP1
  [LAMBDA (FILE LEN)

    (* ;; "Edited 22-Jul-2022 12:04 by rmk: Returns the version as well as the piece-count in the current-version case, to be consistent.  Also, return is a LIST instead of a CONS, so more information (like a date) can eventually be provided.")

    (* ;; "Edited 21-Jul-2022 22:41 by rmk")

    (* ;; "Edited 12-Feb-88 11:43 by jds")
                                                             (* ; 
                                                             "Checks for a version-1 formatted file")

    (* ;; "Returns NIL if it isn't a formatted file. Leaves file at start of text or of piece descriptions, resp.")

    (SETQ LEN (OR LEN (GETEOFPTR FILE)))
    (CL:WHEN (IGREATERP LEN 8)
        (LET (DESCPTR PCCOUNT VERSION)
             (SETFILEPTR FILE (IDIFFERENCE LEN 8))           (* ; 
                                                           "Move to start of FILEPTR to descriptions")
             (SETQ DESCPTR (\DWIN FILE))                     (* ; 
                                                             "Read the file pos of the descriptions")
             (SETQ PCCOUNT (\SMALLPIN FILE))
             (SETQ VERSION (IDIFFERENCE (\SMALLPIN FILE)
                                  31415))
             (SELECTQ VERSION
                 ((3 1 2 0)                                  (* ; "The known versions.  3 is current")
                      (SETFILEPTR FILE DESCPTR)
                      (LIST VERSION PCCOUNT))
                 (PROGN                                      (* ; "NOT A FORMATTED FILE")
                        (SETFILEPTR FILE 0)
                        NIL))))])

(TEDIT.GET.PASSWORD
  [LAMBDA (FILE LEN)                                         (* ; "Edited 20-Jun-2022 12:04 by rmk")

    (* ;; "Returns the TEDIT password of FILE, if it is a TEDIT formatted file")

    (LET (DESCPTR NPIECES PASSWORD)
         (CL:WITH-OPEN-FILE (STREAM FILE :DIRECTION :INPUT)
                (CL:UNLESS LEN
                    (SETQ LEN (GETEOFPTR STREAM)))
                (CL:WHEN (IGREATERP LEN 8)
                    (SETFILEPTR STREAM (IDIFFERENCE LEN 8))  (* ; 
                                                           "Move to start of FILEPTR to descriptions")
                    (SETQ DESCPTR (\DWIN STREAM))            (* ; 
                                                             "Read the file pos of the descriptions")
                    (SETQ NPIECES (\SMALLPIN STREAM))
                    [CAR (MEMB (\SMALLPIN STREAM)
                               '(31415 31416 31417 31418 31419])])
)
(DEFINEQ

(TEDIT.GET.PCTB3
  [LAMBDA (TEXT TEXTOBJ PCCOUNT CURFILEBYTE# END)            (* ; "Edited  3-Aug-2023 22:08 by rmk")
                                                             (* ; "Edited 27-Jul-2023 09:01 by rmk")
                                                             (* ; "Edited 26-Apr-2023 14:15 by rmk")
                                                             (* ; "Edited 12-Oct-2022 14:24 by rmk")
                                                             (* ; "Edited  9-Aug-2022 20:44 by rmk")

    (* ;; "This runs through the piece table porition of the TEXT file, gathering the looks and  installing pointers to positions in the character section of the file.  Until the last pass of splitting pieces to pass over and residual NS character shifts, it doesn't actually read the characters.")

    (LET (PARAHASH LOOKSHASH)
         (SETFILEPTR TEXT (IDIFFERENCE (OR END (GETEOFPTR TEXT))
                                 8))
         (SETFILEPTR TEXT (\DWIN TEXT))                      (* ; "Pieceinfo char #")
         (bind PC TYPECODE BYTELEN OLDPC (DEFAULTCHARLOOKS _ (fetch (TEXTOBJ DEFAULTCHARLOOKS)
                                                                of TEXTOBJ))
               (OLDPARALOOKS _ (fetch (TEXTOBJ FMTSPEC) of TEXTOBJ)) for I from 1 to PCCOUNT
            do (SETQ PC NIL)                                 (* ; 
                        "This loop may not really read a piece, so we have to distinguish that case.")
               (SETQ BYTELEN (\DWIN TEXT))
               (SETQ TYPECODE (\SMALLPIN TEXT))              (* ; "What kind of piece is it?")
               [SELECTC TYPECODE
                   (\PieceDescriptorPAGEFRAME                (* ; 
                                                             "This is page layout info for the file")
                        (CL:WHEN TEXTOBJ
                            (replace (TEXTOBJ TXTPAGEFRAMES) of TEXTOBJ with (TEDIT.PARSE.PAGEFRAMES
                                                                              (READ TEXT)))))
                   (\PieceDescriptorCHARLOOKSLIST            (* ; 
                                              "This is the list of CHARLOOKSs used in this document.")
                        (replace (TEXTOBJ TXTCHARLOOKSLIST) of TEXTOBJ with (
                                                                            \TEDIT.GET.CHARLOOKS.LIST
                                                                             TEXT))
                                                             (* ; 
                                                      "Read the list of looks used in this document.")
                        [SETQ LOOKSHASH (ARRAY (FLENGTH (fetch (TEXTOBJ TXTCHARLOOKSLIST)
                                                           of TEXTOBJ]
                                                             (* ; 
                                         "Build an array of the looks, so the reader can index them.")
                        (for J from 1 as LOOKS in (fetch (TEXTOBJ TXTCHARLOOKSLIST) of TEXTOBJ)
                           do (SETA LOOKSHASH J LOOKS))
                        (add I -1))
                   (\PieceDescriptorPARALOOKSLIST            (* ; 
                                              "This is the list of PARALOOKSs used in this document.")
                        (replace (TEXTOBJ TXTPARALOOKSLIST) of TEXTOBJ with (
                                                                            \TEDIT.GET.PARALOOKS.LIST
                                                                             TEXT TEXTOBJ))
                                                             (* ; 
                                                      "Read the list of looks used in this document.")
                        [SETQ PARAHASH (ARRAY (FLENGTH (fetch (TEXTOBJ TXTPARALOOKSLIST) of TEXTOBJ]
                                                             (* ; 
                                         "Build an array of the looks, so the reader can index them.")
                        (for J from 1 as LOOKS in (fetch (TEXTOBJ TXTPARALOOKSLIST) of TEXTOBJ)
                           do (SETA PARAHASH J LOOKS))
                        (add I -1))
                   (\PieceDescriptorPARA                     (* ; 
                                                             "Reading a new set of paragraph looks.")
                        (CL:WHEN OLDPC
                            (replace (PIECE PPARALAST) of OLDPC with T))
                                                             (* ; 
                                                           "Mark the end of the preceding paragraph.")
                        (SETQ OLDPARALOOKS (\TEDIT.GET.PARALOOKS TEXT PARAHASH))
                                                             (* ; 
                                                 "Get the new set of looks, for use by later pieces.")
                        (CL:WHEN TEXTOBJ                     (* ; 
                                              "Mark the document as containing paragraph formatting ")
                            (replace (TEXTOBJ FORMATTEDP) of TEXTOBJ with T)))
                   (\PieceDescriptorLOOKS                    (* ; 
                                  "New character looks.  Build a piece to describe those characters.")
                        (SETQ PC
                         (create PIECE
                                PCONTENTS _ TEXT
                                PFPOS _ CURFILEBYTE#
                                PLEN _ BYTELEN
                                PPARALOOKS _ OLDPARALOOKS
                                PTYPE _ THINFILE.PTYPE
                                PBYTESPERCHAR _ 1))
                        (\TEDIT.GET.CHARLOOKS PC TEXT LOOKSHASH)
                                                             (* ; 
                                                             "Get its looks and character-pointers")
                        (add CURFILEBYTE# BYTELEN))
                   (\PieceDescriptorOBJECT 
                                           (* ;; 
                             "BYTELEN is the number of bytes on the file, PLEN is always 1 character")

                        (SETQ PC
                         (create PIECE
                                PCONTENTS _ TEXT
                                PFPOS _ CURFILEBYTE#
                                PLEN _ 1
                                PPARALOOKS _ OLDPARALOOKS
                                PTYPE _ OBJECT.PTYPE))
                        (TEDIT.GET.OBJECT (fetch (TEXTOBJ STREAMHINT) of TEXTOBJ)
                               PC TEXT CURFILEBYTE#)
                        (add CURFILEBYTE# BYTELEN)
                        [freplace (PIECE PLOOKS) of PC with (if (ZEROP (BIN TEXT))
                                                                then 
                                                             (* ; 
                                                    "No new looks;  steal them from the prior piece.")
                                                                     (OR (AND OLDPC (PLOOKS OLDPC))
                                                                         DEFAULTCHARLOOKS)
                                                              else 
                                                                   (* ;; 
                                      "There are new character looks for this object.  Read them in.")

                                                                   (replace (PIECE PLOOKS)
                                                                      of PC with (
                                                                          \TEDIT.GET.SINGLE.CHARLOOKS
                                                                                  TEXT])
                   (PROGN (TEDIT.PROMPTPRINT TEXTOBJ "WARNING: Unknown-type piece skipped." T)
                          (SETFILEPTR TEXT (IPLUS (GETFILEPTR TEXT)
                                                  (\SMALLPIN TEXT]
               (CL:WHEN PC                                   (* ; 
                                                       "If we created a piece, save it in the table.")
                   (SETQ OLDPC (\INSERT-NSCLEARED-PIECE PC TEXTOBJ)))])

(\TEDIT.CACHEFILE
  [LAMBDA (TEXT TEXTOBJ START END)                           (* ; "Edited 14-Jul-2022 08:44 by rmk")
    (LET (CACHE)

         (* ;; "Sets the external format and its EOL.")

         [SETQ CACHE (OPENSTREAM '{NODIRCORE} 'BOTH 'NEW `((TYPE TEXT)
                                                           (:EXTERNAL-FORMAT ,(GETSTREAMPROP TEXT 
                                                                                     :EXTERNAL-FORMAT
                                                                                     ]
         (COND
            ((OR START END)
             (COPYBYTES TEXT CACHE (OR START 0)
                    (OR END -1)))
            (T (COPYBYTES TEXT CACHE)))                      (* ; "Copy the text there")

         (* ;; "COPYBYTES can only have start/end args of NIL if the file is not random access.  So it's impossible to grab out of the middle of a file on an NS server.  Sorry.")

         (CLOSEF TEXT)
         (CL:WHEN TEXTOBJ

             (* ;; 
             "REMEMBER THAT THIS TEXT WAS CACHED, SO THAT LATER PUTS DON'T INVALIDATE THE CACHE.")

             (TEXTPROP TEXTOBJ 'CACHE T))
         CACHE])

(\TEDIT.UNIQUIFY.ALL
  [LAMBDA (TEXTOBJ)                                          (* ; "Edited  3-Aug-2023 18:44 by rmk")
                                                             (* ; "Edited  1-Aug-2023 11:43 by rmk")
                                                             (* ; "Edited 13-Jul-2022 22:56 by rmk")
    (\TEDIT.UNIQUIFY.CHARLOOKS (GETTOBJ TEXTOBJ DEFAULTCHARLOOKS)
           TEXTOBJ)
    (CL:WHEN (GETTOBJ TEXTOBJ DEFAULTCHARLOOKS)
        (\TEDIT.UNIQUIFY.CHARLOOKS (GETTOBJ TEXTOBJ DEFAULTCHARLOOKS)
               TEXTOBJ))
    (\TEDIT.UNIQUIFY.CHARLOOKS (GETTOBJ TEXTOBJ CARETLOOKS)
           TEXTOBJ)
    (CL:WHEN (GETTOBJ TEXTOBJ CARETLOOKS)
        (\TEDIT.UNIQUIFY.CHARLOOKS (GETTOBJ TEXTOBJ CARETLOOKS)
               TEXTOBJ))
    (\TEDIT.UNIQUIFY.PARALOOKS (GETTOBJ TEXTOBJ FMTSPEC)
           TEXTOBJ)
    (for PC inpieces (\FIRSTPIECE TEXTOBJ) do 
                                              (* ;; 
                           "Assure that the CHARLOOKS and PARALOOKS of every piece are in the cache.")

                                              (change (PLOOKS PC)
                                                     (\TEDIT.UNIQUIFY.CHARLOOKS DATUM TEXTOBJ))
                                              (change (PPARALOOKS PC)
                                                     (\TEDIT.UNIQUIFY.PARALOOKS DATUM TEXTOBJ])

(\INSERT-NSCLEARED-PIECE
  [LAMBDA (PC TEXTOBJ)                                       (* ; "Edited 27-Jul-2023 08:18 by rmk")
                                                             (* ; "Edited 11-Oct-2022 15:11 by rmk")

    (* ;; "If this traps on an existing file, this code should be completed so that it splits the piece to skip the NS char shifting bytes.  The prefix piece is not PPARALAST, the following piece's PTYPE may depend on what the shift says:  (255 0) presumably means THIN, (255 255 0) means fat.")

    (CL:WHEN PC
        (CL:WHEN (MEMB (PTYPE PC)
                       FILE.PTYPES)
            (LET ((FILE (PCONTENTS PC))
                  NBYTES LOOKSFILEPTR)
                 (SETQ NBYTES (PBYTESPERCHAR PC))
                 (SETQ LOOKSFILEPTR (GETFILEPTR FILE))
                 (SETFILEPTR FILE (fetch (PIECE PFPOS) of PC))
                 (for I from 1 to NBYTES when (EQ NSCHARSETSHIFT (BIN FILE)) do (HELP))
                 (SETFILEPTR FILE LOOKSFILEPTR))))
    (\INSERTPIECE PC NIL TEXTOBJ)
    PC])
)



(* ;; "INCLUDEing a file")

(DEFINEQ

(TEDIT.INCLUDE
  [LAMBDA (TSTREAM FILE START END SAFE PLAINTEXT)            (* ; "Edited 23-Jul-2023 15:30 by rmk")
                                                             (* ; "Edited 16-Jul-2023 10:18 by rmk")
                                                             (* ; "Edited 21-Jun-2023 17:46 by rmk")
                                                            (* ; "Edited 19-May-2001 11:43 by rmk:")
                                                             (* ; 
                                                        "Edited  1-Jun-93 11:31 by sybalsky:mv:envos")

    (* ;; "Obtain a file name, and include that file's contents at the place where the caret is.")

    (* ;; "This is a documented entry, but SAFE wasn't described there and I (RMK) added PLAINTEXT to collapse with TEDIT.INCLUDE.RAW.")

    (* ;; 
   "Returns the length of the input, if the insertion happened, NIL if there was no place to put it.")

    (* ;; "")

    (* ;; "This assumes that START and END are file positions (defaulting to 0 and length), not character numbers.")

    (* ;; "")

    (* ;; "If SAFE, the caller is taking responsibility for closing FILE when its contents are no longer needed (e.g. DOC-OBJECTS inclusions).  Otherwise, the contents are copied to a NODIRCORE that is owned by this TSTREAM, and then FILE is closed here if it wasn't previously open.  (This may not be accurate, unless FILE was actually an open stream and not a name?)")

    (PROG ((TEXTOBJ (TEXTOBJ TSTREAM))
           TSEL FSEL WASOPEN FTSTREAM NDCSTREAM (FROMFILE FILE))
          (CL:WHEN (GETTOBJ TEXTOBJ TXTREADONLY)
              (TEDIT.PROMPTPRINT "Text is read only--include aborted" T T)
              (RETURN))
          (SETQ TSEL (TEXTSEL TEXTOBJ))
          (CL:UNLESS (GETSEL TSEL SET)
              (TEDIT.PROMPTPRINT TEXTOBJ "Please select a destination for the included text" T)
              (RETURN NIL))

     (* ;; "We know where the new text is supposed to go. Where is it coming from?")

          (CL:UNLESS FROMFILE
              (SETQ FROMFILE (\TEDIT.MAKEFILENAME (TEDIT.GETINPUT TEXTOBJ 
                                                         "Name of the file to include:  ")))
              (CL:UNLESS FROMFILE
                  (TEDIT.PROMPTPRINT TEXTOBJ "No file to include--aborted]" T)
                  (RETURN)))
          (CL:UNLESS (OR (STREAMP FROMFILE)
                         (INFILEP FROMFILE))                 (* ; "File not found")
              (TEDIT.PROMPTPRINT TEXTOBJ (CONCAT FROMFILE " not found--include aborted")
                     T T)
              (RETURN))

     (* ;; "")

     (* ;; "Now we have the FROMFILE, which may be a stream.")

          (CL:UNLESS START (SETQ START 0))
          (CL:UNLESS END
              (SETQ END (GETFILEINFO FILE 'LENGTH)))
          (CL:UNLESS (IGEQ END START)
              (TEDIT.PROMPTPRINT TEXTOBJ "Negative number of characters to include--aborted" T T)
              (RETURN))

     (* ;; "")

     (* ;; "If the caller says SAFE, he's guranteeing that the file will be there at least as long as we need it.  Otherwise, we take ownership of the information by copying it to a NODIRCORE. ")

          (CL:UNLESS SAFE
              [if (\GETSTREAM FROMFILE 'INPUT T)
                  then (SETQ WASOPEN T)
                else                                         (* ; 
                                                        "Wasn't open -- need to open it for input...")
                     (SETQ FROMFILE (OPENSTREAM FROMFILE 'INPUT NIL '((TYPE TEXT]

              (* ;; "Create our holding file and copy the file-section into it.")

              (SETQ NDCSTREAM (OPENSTREAM '{NODIRCORE} 'OUTPUT 'NEW))

              (* ;; "Have to explicitly fill in 0 and EOFPTR, because if the file was open already, NILs would only copy from current fileptr to EOF.")

              (* ;; 
            "Use COPYBYTES for formatted files, otherwise allow natural EOL conversion to take place")

              (if (\TEDIT.FORMATTEDP1 FROMFILE)
                  then (COPYBYTES FROMFILE NDCSTREAM START END)
                else (COPYCHARS FROMFILE NDCSTREAM START END))
              (CL:UNLESS WASOPEN (CLOSEF FROMFILE))          (* ; 
                                                      "If the file didn't come to us open, close it.")
              (CLOSEF NDCSTREAM)
              (SETQ START 0)                                 (* ; 
                                                             "But we now want everything we copied")
              (SETQ END (GETFILEINFO NDCSTREAM 'LENGTH))
              (SETQ FROMFILE NDCSTREAM))

     (* ;; "")

     (* ;; "FROMFILE is now a safe file or stream, possibly already open.  If it wasn't open before, we want to make sure it gets closed if/when this event gets undone.")

          (CL:UNLESS (\GETSTREAM FROMFILE 'INPUT T)
              (SETQ FROMFILE (OPENSTREAM FROMFILE 'INPUT))
              (\TEDIT.HISTORYADD TEXTOBJ (create TEDITHISTORYEVENT
                                                THACTION _ :Closefile
                                                THOLDINFO _ FROMFILE)))
          [SETQ FTSTREAM (OPENTEXTSTREAM FROMFILE NIL NIL NIL `(FONT ,(\TEDIT.GET.INSERT.CHARLOOKS
                                                                       TEXTOBJ TSEL)
                                                                     PARALOOKS
                                                                     ,(GETTOBJ TEXTOBJ FMTSPEC)
                                                                     PLAINTEXT
                                                                     ,PLAINTEXT]

     (* ;; "")

     (* ;; "FTSTREAM is now a text stream for the source.")

          (SETQ FSEL (TEXTSEL (TEXTOBJ FTSTREAM)))           (* ; "Select START to END")
          (\TEDIT.UPDATE.SEL FSEL (ADD1 START)
                 (IDIFFERENCE END START)
                 NIL NIL T)                                  (* ; "ADD1 takes filepos to charno")
          (TEDIT.MOVE FSEL TSEL T)

     (* ;; "The exit conditions are not documented, but we set the fileptr to the end of the insertion and  return the length of the insertion.")

          (\TEXTSETFILEPTR (GETTOBJ TEXTOBJ STREAMHINT)
                 (SUB1 (GETSEL TSEL CHLIM)))
          (RETURN (GETSEL FSEL DCH])

(TEDIT.RAW.INCLUDE
  [LAMBDA (TSTREAM INFILE START END SAFE)                    (* ; "Edited  1-May-2023 08:46 by rmk")
                                                             (* ; 
                                                        "Edited 27-May-93 16:36 by sybalsky:mv:envos")

    (* ;; "Inserts the INFILE characters betwen START and END into TSTREAM,  treating INFILE as a plain text file.  This is a documented entry, motivated by now-silly speed considerations.  But it really amounts to just calling TEDIT.INCLUDE with a (new) PLAINTEXT flag and let the OPENTEXTSTREAM plaintext reader do its thing.  I (RMK) added the SAFE argument here, consistent with the (undocumented) SAFE argument of TEDIT.INCLUDE.")

    (TEDIT.INCLUDE TSTREAM INFILE START END SAFE T])
)



(* ;; "PUTting a file:")

(DEFINEQ

(TEDIT.PUT
  [LAMBDA (TSTREAM FILE FORCENEW UNFORMATTED?)               (* ; "Edited 17-Jul-2023 10:32 by rmk")
                                                             (* ; "Edited 12-Jul-2023 23:12 by rmk")
                                                             (* ; "Edited 10-Jul-2023 20:25 by rmk")
                                                             (* ; "Edited  9-Sep-2022 09:00 by rmk")
                                                             (* ; "Edited 21-Jun-99 19:02 by rmk:")
                                                             (* ; "Edited 19-Apr-93 13:04 by jds")

    (* ;; "If the guy was editing a file, make a new updated version;  else, ask for a file name")

    (* ;; "If FILE is specd, it's used;  else the user must give us one")

    (* ;; "Returns an open stream on the file you PUT to.")

    (PROG ((TEXTOBJ (TEXTOBJ TSTREAM))
           TEDIT.PUT.FINISHEDFORMS TEDIT.GET.FINISHEDFORMS (OUTPUT.FILE.WRITTEN NIL)
           OFILE FONTFILEUSED PROPS PUTFN CACHE MENUSTREAM FILENAME TITLE CH#S PC)
          [SETQ OFILE (COND
                         (FILE)
                         (FORCENEW                           (* ; 
                                             "He insists on a new file.  (without giving us one NIL)")
                                (\TEDIT.MAKEFILENAME (TEDIT.GETINPUT TEXTOBJ "File to PUT to:  ")))
                         (T                                  (* ; "Get a file to put the text into")
                            (\TEDIT.MAKEFILENAME (TEDIT.GETINPUT TEXTOBJ "File to PUT to:  "
                                                        (\TEXTSTREAM.FILENAME TEXTOBJ]
          (CL:UNLESS OFILE                                   (* ; 
                                                          "There's no file to put to;  don't bother.")
              (RETURN))
          (SETQ PUTFN (TEXTPROP TEXTOBJ 'PUTFN))
          (SETQ CACHE (TEXTPROP TEXTOBJ 'CACHE))
          (CL:WHEN (AND PUTFN (EQ (APPLY* PUTFN TSTREAM (FULLNAME OFILE)
                                         'BEFORE)
                                  'DON'T))                   (* ; 
                                                      "He doesn't want this document put.  Bail out.")
              (RETURN))
          (RESETLST
              [RESETSAVE [SETQ OFILE (OPENSTREAM OFILE 'OUTPUT 'NEW
                                            (COND
                                               [UNFORMATTED? (* ; 
                                                "If the user forced no formatting, respect his wish.")
                                                      '((TYPE TEXT]
                                               [(\TEDIT.FORMATTEDSTREAMP TEXTOBJ)
                                                             (* ; 
                 "If this file has objects, para looks, or font changes, then we need a binary file.")
                                                '((TYPE BINARY]
                                               [(AND NIL (EQL (U-CASE (FILENAMEFIELD OFILE
                                                                             'EXTENSION))
                                                              'TEDIT))
                                                             (* ; "If file extension is TEDIT, then we presume that it really is a tedit file, thus making it a binary file.  BUT:  rmk we really prefer TYPE TEXT even for a file with extension tedit.")
                                                '((TYPE BINARY]
                                               (T            (* ; 
                                                          "Otherwise, we can get by with a text file")
                                                  '((TYPE TEXT]
                     '(AND RESETSTATE (DELFILE (CLOSEF? OLDVALUE]
              [RESETSAVE (\TEDIT.PUTRESET (CONS (THIS.PROCESS)
                                                'DON'T]
              (replace DESC of (fetch (TEXTOBJ THISLINE) of TEXTOBJ) with NIL)
              (TEDIT.PROMPTPRINT TEXTOBJ (CONCAT "PUTting file " (fetch (STREAM FULLNAME)
                                                                    of OFILE)
                                                "...")
                     T)

(* ;;; "Here's where the pieces get written")

              (CL:WHEN (IGREATERP (TEXTLEN TEXTOBJ)
                              0)
                  (SETQ FONTFILEUSED (TEDIT.PUT.PCTB TEXTOBJ OFILE UNFORMATTED?)))
              (CLOSEF OFILE)                                 (* ; 
                                       "Close the file, to free it up. And re-open it for INPUT only")
              (CL:UNLESS CACHE                               (* ; 
                                            "If caching do not need to reopen the output file anyway")

                  (* ;; "Declare as type text, even if it hasn't been specified as a binary file--could simply be an unformatted stream.")

                  [SETQ OFILE (OPENSTREAM (fetch (STREAM FULLFILENAME) of OFILE)
                                     'INPUT NIL '((TYPE TEXT])
                                                             (* ; 
                             "changed TEMPORary for ns filing with caching.  may not work in general")
              (CLOSEF? (fetch (TEXTOBJ TXTFILE) of TEXTOBJ)) (* ; "Close the old text file")
              (replace (TEXTOBJ TXTFILE) of TEXTOBJ with OFILE)
                                                             (* ; 
                                                            "And remember the new one for next time.")
                                                             (* ; 
                                                    "We can safely QUIT now without losing anything.")
              (replace (TEXTOBJ \DIRTY) of TEXTOBJ with NIL))
          (SETQ CH#S (REVERSE (CDR FONTFILEUSED)))           (* ; 
                                               "The true filepos's of the pieces in the output file.")
          (CL:WHEN (AND (NOT CACHE)
                        (RANDACCESSP OFILE)
                        (EQ CR.EOLC (fetch (STREAM EOLCONVENTION) of OFILE)))

              (* ;; "If we've cached this file, DON'T go thru and fill in the real file's location, because the EOL convention may well be wrong.")

              (UNINTERRUPTABLY
                  
                  (* ;; 
           "Run thru the pieces in the PCTB, pointing them to the new file and their new locations. ")

                  (for PC inpieces (\FIRSTPIECE TEXTOBJ) while CH#S when (MEMB (PTYPE PC)
                                                                               FILE.PTYPES)
                     do (replace (PIECE PFPOS) of PC with (pop CH#S))
                        (CLOSEF? (PCONTENTS PC))             (* ; 
                                                     "Close the old file--we won't look at it again.")
                        (replace (PIECE PCONTENTS) of PC with OFILE))))
          (TEDIT.PROMPTPRINT TEXTOBJ "done.")                (* ; "Tell him we're finished.")
          (SETQ TITLE (TEXTSTREAM.TITLE TEXTOBJ))            (* ; "find and set the title")
          (\TEDIT.WINDOW.TITLE TEXTOBJ (\TEDIT.ORIGINAL.WINDOW.TITLE TITLE NIL))
          (SETQ MENUSTREAM (TEDITMENU.STREAM TEXTOBJ))
          (CL:WHEN (AND MENUSTREAM (type? LITATOM TITLE))    (* ; 
                            "if we have a filename then put it in the GET and PUT fields of the menu")
              (SETQ FILENAME (PACKFILENAME 'VERSION NIL 'BODY TITLE))
              (MBUTTON.SET.FIELD MENUSTREAM 'Get FILENAME)
              (MBUTTON.SET.FIELD MENUSTREAM 'Put FILENAME))
          (\TEDIT.HISTORYADD TEXTOBJ (create TEDITHISTORYEVENT
                                            THACTION _ 'Put
                                            THCH# _ 0
                                            THLEN _ 0
                                            THFIRSTPIECE _ NIL))
                                                             (* ; "Remember we did this.")
          (CL:WHEN PUTFN
              (APPLY* PUTFN TSTREAM (fetch (STREAM FULLNAME) of (fetch (TEXTOBJ TXTFILE) of TEXTOBJ))
                     'AFTER))                                (* ; 
                                                "Changed to not presume ofile is the txtfile anymore")
          (RETURN OFILE])

(TEDIT.PUT.PCTB
  [LAMBDA (TEXTOBJ OFILE UNFORMATTED? SEPARATEFORMAT)        (* ; "Edited 27-Jul-2023 11:20 by rmk")
                                                             (* ; "Edited 17-Jul-2023 16:53 by rmk")
                                                             (* ; "Edited 12-Jul-2023 23:12 by rmk")
                                                             (* ; "Edited 10-Jul-2023 20:25 by rmk")
                                                             (* ; "Edited 16-Sep-2022 22:53 by rmk")
                                                            (* ; "Edited 30-Apr-2021 14:46 by rmk:")
                                                             (* ; "Edited 19-May-99 21:58 by rmk:")
                                                             (* ; 
                                                        "Edited 27-May-93 16:00 by sybalsky:mv:envos")

    (* ;; "Put a representation of the piece table onto OFILE, preserving font changes and paragraph looks.  UNFORMATTED?  means write no font or formatting info.")

    (* ;; "PLEN is the number of characters in the piece, but they occupy different numbers of bytes depending on thin, fat, utf-8...    Earlier files also had NSCHARSHIFT's to redundantly indicate that thins and fats are switching.  The GET.CHARLOOKS function skips those shift bytes if they happen to be there.")

    (COND
       (UNFORMATTED? (TEDIT.PUT.PCTB.PLAINTEXT TEXTOBJ OFILE))
       (T (LET ((OLDPARALOOKS (GETTOBJ TEXTOBJ FMTSPEC))
                (*READTABLE* *TEDIT-FILE-READTABLE*)
                (*PRINT-BASE* 10)
                (PCCOUNT 0)
                (EDITSTENTATIVE (TEXTPROP TEXTOBJ 'TEDIT.TENTATIVE))
                (FORMATTINGLEVEL (\TEDIT.FORMATTEDSTREAMP TEXTOBJ))
                (CACHE (TEXTPROP TEXTOBJ 'CACHE))
                PFILE PARALOOKSSEEN TEDIT.PUT.FINISHEDFORMS OLDBYTE# CURBYTE# PREVPC FONTFILE CH#S 
                PREVFATP PARAHASH LOOKSHASH TRUEFILE CHARLOOKSLST PARALOOKSLST)
               (replace (STREAM LINELENGTH) of OFILE with MAX.SMALLP)
                                                             (* ; 
                                       "Prevent spurious carriage-returns in the piece descriptions.")

               (* ;; "RMK:  CHANGED DEFAULT FROM CR TO LF")

               (CL:WHEN (EQ (fetch (STREAM EOLCONVENTION) of OFILE)
                            LF.EOLC)                         (* ; 
                                            "This file is on a non-LF host;  make a note to cache it")
                   (SETQ TRUEFILE OFILE)                     (* ; 
                                                            "Remember where the file should wind up.")
                   [SETQ OFILE (OPENSTREAM '{NODIRCORE} 'BOTH 'NEW '((TYPE TEXT]
                                                             (* ; 
                                                             "And open a temp file to write it to.")
                                                             (* ; 
                                       "Prevent spurious carriage-returns in the piece descriptions.")
                   (replace (STREAM LINELENGTH) of OFILE with MAX.SMALLP))
               [SETQ CURBYTE# (SETQ OLDBYTE# (ADD1 (GETFILEPTR OFILE]
               (CL:WHEN (GETTOBJ TEXTOBJ TXTPAGEFRAMES)      (* ; 
                                                       "There is layout info for this file.  Save it")
                   (SETQ FONTFILE (\TEDIT-OPEN-FONT-FILE FONTFILE))
                                                             (* ; 
                                                            "Open a font-info file if one is needed.")
                   (TEDIT.PUT.PAGEFRAMES FONTFILE (GETTOBJ TEXTOBJ TXTPAGEFRAMES))
                   (add PCCOUNT 1))

               (* ;; "First piece in the document")

               (for PC PTYPE OLDLOOKS FATP PREVFATP inpieces (\FIRSTPIECE TEXTOBJ)
                  first                                      (* ; "Starting looks")
                        (SETQ OLDLOOKS (OR (AND PC (PLOOKS PC))
                                           (GETTOBJ TEXTOBJ DEFAULTCHARLOOKS)
                                           TEDIT.DEFAULT.CHARLOOKS))
                        (\TEDIT.FLUSH.UNUSED.LOOKS TEXTOBJ PC) 
                                                             (* ; 
                          "Run thru the lists of char & para looks and remove any that aren't in use")
                        (CL:WHEN [AND (GETTOBJ TEXTOBJ TXTPARALOOKSLIST)
                                      (OR (IGREATERP (FLENGTH (GETTOBJ TEXTOBJ TXTPARALOOKSLIST))
                                                 1)
                                          (NOT (EQFMTSPEC (CAR (GETTOBJ TEXTOBJ TXTPARALOOKSLIST))
                                                      TEDIT.DEFAULT.FMTSPEC]

                            (* ;; "There are paragraph looks in this document that don't match the default -- save the list of them for later retrieval.")

                            (SETQ FONTFILE (\TEDIT-OPEN-FONT-FILE FONTFILE))
                                                             (* ; 
                                                            "Open a font-info file if one is needed.")
                            (SETQ PARAHASH (\TEDIT.PUT.PARALOOKS.LIST FONTFILE (GETTOBJ TEXTOBJ 
                                                                                     TXTPARALOOKSLIST
                                                                                      )))
                            (SETQ PARALOOKSSEEN T))
                        (CL:WHEN (OR PARALOOKSSEEN FORMATTINGLEVEL)

                            (* ;; "There are character looks in this document that don't match the default (or paragraph formatting, which forces looks to be saved) -- save the list for later retrieval.")

                            (SETQ FONTFILE (\TEDIT-OPEN-FONT-FILE FONTFILE))
                                                             (* ; 
                                                            "Open a font-info file if one is needed.")
                            (SETQ LOOKSHASH (\TEDIT.PUT.CHARLOOKS.LIST FONTFILE (GETTOBJ TEXTOBJ 
                                                                                     TXTCHARLOOKSLIST
                                                                                       )))) 
                                                             (* ; "Starting looks")
                        (SETQ OLDLOOKS (OR (AND PC (PLOOKS PC))
                                           (GETTOBJ TEXTOBJ DEFAULTCHARLOOKS)
                                           TEDIT.DEFAULT.CHARLOOKS))
                        (\TEDIT.FLUSH.UNUSED.LOOKS TEXTOBJ PC) 
                                                             (* ; 
                          "Run thru the lists of char & para looks and remove any that aren't in use")
                        (CL:WHEN [AND (GETTOBJ TEXTOBJ TXTPARALOOKSLIST)
                                      (OR (IGREATERP (FLENGTH (GETTOBJ TEXTOBJ TXTPARALOOKSLIST))
                                                 1)
                                          (NOT (EQFMTSPEC (CAR (GETTOBJ TEXTOBJ TXTPARALOOKSLIST))
                                                      TEDIT.DEFAULT.FMTSPEC]

                            (* ;; "There are paragraph looks in this document that don't match the default -- save the list of them for later retrieval.")

                            (SETQ FONTFILE (\TEDIT-OPEN-FONT-FILE FONTFILE))
                                                             (* ; 
                                                            "Open a font-info file if one is needed.")
                            (SETQ PARAHASH (\TEDIT.PUT.PARALOOKS.LIST FONTFILE (GETTOBJ TEXTOBJ 
                                                                                     TXTPARALOOKSLIST
                                                                                      )))
                            (SETQ PARALOOKSSEEN T))
                        (CL:WHEN (OR PARALOOKSSEEN FORMATTINGLEVEL)

                            (* ;; "There are character looks in this document that don't match the default (or paragraph formatting, which forces looks to be saved) -- save the list for later retrieval.")

                            (SETQ FONTFILE (\TEDIT-OPEN-FONT-FILE FONTFILE))
                                                             (* ; 
                                                            "Open a font-info file if one is needed.")
                            (SETQ LOOKSHASH (\TEDIT.PUT.CHARLOOKS.LIST FONTFILE (GETTOBJ TEXTOBJ 
                                                                                     TXTCHARLOOKSLIST
                                                                                       ))))
                  unless (ZEROP (PLEN PC))
                  do ((SETQ PTYPE (PTYPE PC))
                      [SETQ FATP (MEMB PTYPE (CONSTANT (LIST FATFILE2.PTYPE FATSTRING.PTYPE]
                      (CL:WHEN [AND (OR (NOT PREVPC)
                                        (PPARALAST PREVPC))
                                    (OR PARALOOKSSEEN (NOT (EQFMTSPEC (PPARALOOKS PC)
                                                                  (GETTOBJ TEXTOBJ FMTSPEC]
                                                             (* ; 
                                       "The last piece ended a paragraph, so send out new para looks")
                          (SETQ FONTFILE (\TEDIT-OPEN-FONT-FILE FONTFILE))
                                                             (* ; 
                                                            "Open a font-info file if one is needed.")
                          (CL:UNLESS (IEQP CURBYTE# OLDBYTE#)(* ; 
              "There were prior characters that hadn't been described in a piece yet.  Describe them")
                              (CL:UNLESS LOOKSHASH
                                  (SETQ LOOKSHASH (\TEDIT.PUT.CHARLOOKS.LIST FONTFILE
                                                         (GETTOBJ TEXTOBJ TXTCHARLOOKSLIST))))
                              (\TEDIT.PUT.CHARLOOKS FONTFILE OLDBYTE# CURBYTE# OLDLOOKS PREVPC 
                                     EDITSTENTATIVE LOOKSHASH)
                              (add PCCOUNT 1)

                              (* ;; 
                              "And now we've described all the characters up to the current one.")

                              (SETQ OLDBYTE# CURBYTE#))
                          (\TEDIT.PUT.PARALOOKS FONTFILE PC PARAHASH)
                          (SETQ PARALOOKSSEEN T)             (* ; 
             "Remember that we've seen a foreign paralooks, and must henceforth note para boundaries")
                          (add PCCOUNT 1))
                      [COND
                         [(EQ OBJECT.PTYPE PTYPE)            (* ; 
                                                             "It's an object -- go use its PUTFN")
                          (SETQ FONTFILE (\TEDIT-OPEN-FONT-FILE FONTFILE))
                                                             (* ; 
                                                            "Open a font-info file if one is needed.")
                          (CL:WHEN (AND (NEQ CURBYTE# OLDBYTE#)
                                        PREVPC)              (* ; 
              "There were prior characters that hadn't been described in a piece yet.  Describe them")
                              (CL:UNLESS LOOKSHASH
                                  (SETQ LOOKSHASH (\TEDIT.PUT.CHARLOOKS.LIST FONTFILE
                                                         (GETTOBJ TEXTOBJ TXTCHARLOOKSLIST))))
                              (\TEDIT.PUT.CHARLOOKS FONTFILE OLDBYTE# CURBYTE# OLDLOOKS PREVPC 
                                     EDITSTENTATIVE LOOKSHASH)
                              (add PCCOUNT 1)                (* ; 
                                  "And now we've described all the characters up to the current one.")
                              (SETQ OLDBYTE# CURBYTE#))      (* ; 
                                            "If the prior thing was text, send along its descriptor.")
                                                             (* ; "Send out the object")
                          (add CURBYTE# (TEDIT.PUT.OBJECT PC OFILE FONTFILE CURBYTE#))
                          (add PCCOUNT 1)
                          (SETQ OLDBYTE# CURBYTE#)
                          (COND
                             ([OR (NEQ FATP PREVFATP)
                                  (NOT (EQCLOOKS OLDLOOKS (PLOOKS PC)))
                                  [AND EDITSTENTATIVE (NEQ (PNEW PC)
                                                           (AND PREVPC (PNEW PREVPC]
                                  (AND (OR (NOT PREVPC)
                                           (PPARALAST PREVPC))
                                       (NOT (EQFMTSPEC (PPARALOOKS PC)
                                                   (GETTOBJ TEXTOBJ FMTSPEC]
                                                             (* ; 
                                                          "The OBJECT has different ooks from before")
                              (\BOUT FONTFILE 1)
                              (SETQ OLDLOOKS (PLOOKS PC))
                              (\TEDIT.PUT.SINGLE.CHARLOOKS FONTFILE OLDLOOKS))
                             (T                              (* ; 
                                     "No differences.  Don't write any charlooks, and mark that fact")
                                (\BOUT FONTFILE 0]
                         (T                                  (* ; "It's not an object.")
                            (CL:WHEN [OR (NEQ FATP PREVFATP)
                                         (NOT (EQCLOOKS OLDLOOKS (PLOOKS PC)))
                                         [AND EDITSTENTATIVE (NEQ (PNEW PC)
                                                                  (AND PREVPC (PNEW PREVPC]
                                         (AND (OR (NOT PREVPC)
                                                  (PPARALAST PREVPC))
                                              (NOT (EQFMTSPEC (PPARALOOKS PC)
                                                          (GETTOBJ TEXTOBJ FMTSPEC]
                                                             (* ; "We have a piece with new looks.")
                                                             (* ; 
                  "The PREVFATP clause needs to come first, so that PREVFATP gets set for later use.")
                                (SETQ FONTFILE (\TEDIT-OPEN-FONT-FILE FONTFILE))
                                                             (* ; 
                                                            "Open a font-info file if one is needed.")
                                (CL:UNLESS (IEQP OLDBYTE# CURBYTE#)
                                                             (* ; 
                 "If there were looks past, and if the run was not empty, save a piece for its looks")
                                    (CL:UNLESS LOOKSHASH
                                        (SETQ LOOKSHASH (\TEDIT.PUT.CHARLOOKS.LIST FONTFILE
                                                               (GETTOBJ TEXTOBJ TXTCHARLOOKSLIST))))
                                    (\TEDIT.PUT.CHARLOOKS FONTFILE OLDBYTE# CURBYTE# OLDLOOKS PREVPC
                                           EDITSTENTATIVE LOOKSHASH)
                                    (add PCCOUNT 1))
                                (SETQ OLDLOOKS (PLOOKS PC))
                                (SETQ OLDBYTE# CURBYTE#)
                                (CL:UNLESS (EQ FATP PREVFATP)(* ; "Are we switching?")
                                    (BOUT OFILE NSCHARSETSHIFT)
                                    (if FATP
                                        then (BOUT OFILE \NORUNCODE) 
                                                             (* ; "From thin to fat")
                                             (BOUT OFILE 0)
                                             (add CURBYTE# 3)
                                      else (BOUT OFILE (PCHARSET PC)) 
                                                             (* ; "From fat to thin")
                                           (add CURBYTE# 2))))

                            (* ;; "Now dump out the non-object contents of the piece.")

                            (SELECTC PTYPE
                                (FILE.PTYPES                 (* ; 
                                      "It's on a file.  Copy it.  Should set type flags and PCHARSET")
                                             (SETQ PFILE (PCONTENTS PC))
                                             (CL:UNLESS (\GETSTREAM PFILE 'INPUT T)
                                                             (* ; "Make sure the input file is open.")
                                                 (SETQ PFILE (\TEDIT.REOPEN.STREAM TEXTOBJ PFILE)))
                                             [COPYBYTES PFILE OFILE (PFPOS PC)
                                                    (IPLUS (PFPOS PC)
                                                           (ITIMES (PLEN PC)
                                                                  (PBYTESPERCHAR PC])
                                (THINSTRING.PTYPE            (* ; "In a thin string, just print it. ")
                                     (for I from 1 to (PLEN PC) as CH instring (PCONTENTS PC)
                                        do (\BOUT OFILE CH)))
                                (FATSTRING.PTYPE 
                                     (for I from 1 to (PLEN PC) as CH instring (PCONTENTS PC)
                                        do (\WOUT OFILE CH)))
                                (HELP "OTHER PTYPES"))
                            (CL:WHEN (AND (NOT CACHE)
                                          (RANDACCESSP OFILE))
                                                             (* ; 
 "CSLI leave the pieces and the pctb alone and just write the file if its cached or not randomaccess")
                                (push CH#S (SUB1 CURBYTE#))) (* ; 
                                                    "Keep running track of where in the file we are.")
                            (add CURBYTE# (CL:IF FATP
                                              (UNFOLD (PLEN PC)
                                                     2)
                                              (PLEN PC))]
                      (SETQ PREVPC PC)
                      (SETQ PREVFATP FATP))
                  finally                                    (* ; 
                                        "Put out a piece describing the last characters in the file.")
                        (CL:WHEN (AND FONTFILE (NEQ OLDBYTE# CURBYTE#))
                                                             (* ; 
                     "Only if there WERE characters, and only if there's a need for font information")
                            (CL:UNLESS LOOKSHASH
                                (SETQ LOOKSHASH (\TEDIT.PUT.CHARLOOKS.LIST FONTFILE (GETTOBJ TEXTOBJ
                                                                                           
                                                                                     TXTCHARLOOKSLIST
                                                                                           ))))
                            (\TEDIT.PUT.CHARLOOKS FONTFILE OLDBYTE# CURBYTE# OLDLOOKS PREVPC 
                                   EDITSTENTATIVE LOOKSHASH) (* ; 
                                                            "Put out a description of the characters")
                            (add PCCOUNT 1))
                        (CL:WHEN (AND PARALOOKSSEEN (PPARALAST PREVPC))
                                                             (* ; 
                         "The last piece contained the end of a paragraph.  Make sure it gets noted.")
                            (\TEDIT.PUT.PARALOOKS FONTFILE PREVPC PARAHASH)

                            (* ;; "Write out a dummy paragraph-looks piece, so that we protect the PPARALAST of the final piece in the document.")

                            (\DWOUT FONTFILE 0)
                            (\SMALLPOUT FONTFILE \PieceDescriptorPARA)
                            (\SMALLPOUT FONTFILE 1)

                            (* ;; "This adds a total of 2 pieces to the file:")

                            (add PCCOUNT 2)
                            (for FORM in TEDIT.PUT.FINISHEDFORMS do (EVAL FORM))
                                                             (* ; "Do any user-specific cleanup")
                            (CL:WHEN TRUEFILE                (* ; 
                                            "This file needs to be converted to the right convention")
                                (COND
                                   ((AND FONTFILE (NOT SEPARATEFORMAT))
                                                             (* ; 
                                                           "Formatted file: Copy without converting.")
                                    (COPYBYTES OFILE TRUEFILE 0 -1))
                                   (T                        (* ; 
            "A plain-text file. Perhaps UNFORMATTED? should contain the name of its external format?")
                                      (COPYCHARS OFILE TRUEFILE 0 -1)))
                                (SETQ OFILE TRUEFILE))
                            (CL:WHEN (AND (OPENP OFILE)
                                          FONTFILE)          (* ; "We need to write format info.")
                                (\DWOUT FONTFILE (GETFILEPTR OFILE))
                                                             (* ; 
                                             "So remember the end of the plain-text part of the file")
                                (\SMALLPOUT FONTFILE PCCOUNT)(* ; 
                                                     "# OF PIECES WE'' NEED TO RECONSTRUCT THIS FILE")
                                (\SMALLPOUT FONTFILE 31418)  (* ; 
                                                       "Now the password for NEW format files: 31418")
                                (CL:UNLESS SEPARATEFORMAT

                                    (* ;; "Only write fmtg info at the end if we want it there--not if we want plain text or want it kept separate. ")

                                    (* ;; "Copy the font information to the file trailer")

                                    (COPYBYTES FONTFILE OFILE 0 (GETEOFPTR FONTFILE)))
                                (CLOSEF FONTFILE))
                            (SETTOBJ TEXTOBJ DEFAULTCHARLOOKS (\TEDIT.UNIQUIFY.CHARLOOKS (GETTOBJ
                                                                                          TEXTOBJ 
                                                                                     DEFAULTCHARLOOKS
                                                                                          )
                                                                     TEXTOBJ))
                                                             (* ; 
      "Re-add the default and caret looks's to the lists, since they may not have been really saved.")
                            (SETTOBJ TEXTOBJ CARETLOOKS (\TEDIT.UNIQUIFY.CHARLOOKS (GETTOBJ TEXTOBJ 
                                                                                          CARETLOOKS)
                                                               TEXTOBJ))
                            (SETTOBJ TEXTOBJ FMTSPEC (\TEDIT.UNIQUIFY.PARALOOKS (GETTOBJ TEXTOBJ 
                                                                                       FMTSPEC)
                                                            TEXTOBJ))
                            (RETURN (CONS FONTFILE CH#S)))])

(TEDIT.PUT.PCTB.PLAINTEXT
  [LAMBDA (TEXTOBJ OFILE)                                    (* ; "Edited  7-Aug-2022 14:19 by rmk")
                                                             (* ; "Edited 25-Jul-2022 15:11 by rmk")

    (* ;; "Put out a representation of the characters in the piecetable, ignoring looks. ")

    (replace (STREAM LINELENGTH) of OFILE with MAX.SMALLP)
    (RESETLST
        [bind CH FN (TSTREAM _ (fetch (TEXTOBJ STREAMHINT) of TEXTOBJ))
              (STARTFILEPTR _ (AND NIL (GETFILEPTR OFILE)))
              (*READTABLE* _ *TEDIT-FILE-READTABLE*)
           first 
                 (* ;; 
       "WHY DO WE HAVE TO BIND THE READTABLE?  This is text, we are binning characters from ourself.")

                 [RESETSAVE NIL `(STREAMPROP ,TSTREAM ENDOFSTREAMOP ,(STREAMPROP TSTREAM 
                                                                            'ENDOFSTREAMOP]
                 (STREAMPROP TSTREAM 'ENDOFSTREAMOP (FUNCTION NILL))
                 (\SETFILEPTR TSTREAM 0) while (SETQ CH (BIN TSTREAM))
           do (if (IMAGEOBJP CH)
                  then (SETQ FN (IMAGEOBJPROP CH 'PREPRINTFN))
                       (PRIN1 (OR (AND FN (APPLY* FN CH))
                                  (CONCAT "[UNPRINTABLE OBJECT WITH GETFN " (IMAGEOBJPROP
                                                                             CH
                                                                             'GETFN)
                                         "]"))
                              OFILE)
                else (\OUTCHAR OFILE CH)) finally 

                                                (* ;; "Return the number of bytes put out?")

                                                (RETURN (CONS NIL (AND NIL (IDIFFERENCE (GETFILEPTR
                                                                                         OFILE)
                                                                                  STARTFILEPTR])])

(\TEDIT.PUTRESET
  [LAMBDA (PROC&VALUE)                                       (* jds "15-May-85 16:38")
    (CONS (CAR PROC&VALUE)
          (PROCESSPROP (CAR PROC&VALUE)
                 'BEFOREEXIT
                 (CDR PROC&VALUE])

(TEDIT.PUT.PIECE.DESCRIPTOR
  [LAMBDA (FILE CH1 CHLIM LOOKS)                             (* ; "Edited 30-May-91 20:25 by jds")
                                                             (* Put a description of LOOKS into 
                                                             FILE. LOOKS apply to characters CH1 
                                                             thru CHLIM-1)
                                                             (* (PROG ((FONT (fetch
                                                             (CHARLOOKS CLFONT) of LOOKS)) STR)
                                                             (SETQ STR (CONCAT "(FONTCREATE "
                                                             (KWOTE (FONTPROP FONT
                                                             (QUOTE FAMILY))) " "
                                                             (FONTPROP FONT (QUOTE SIZE)) " "
                                                             (KWOTE (FONTPROP FONT
                                                             (QUOTE FACE))) " )"))
                                                             (\DWOUT FILE (IDIFFERENCE CHLIM CH1))
                                                             (* The length of this run of looks)
                                                             (\SMALLPOUT FILE (NCHARS STR))
                                                             (* The length of the description which 
                                                             follows) (PRIN1 STR FILE)
                                                             (* Print the form which can EVAL to 
                                                             re-create the font information)
                                                             (\BOUT FILE (LOGOR (COND
                                                             ((fetch (CHARLOOKS CLPROTECTED) of 
                                                             LOOKS) 8) (T 0)) (COND
                                                             ((fetch (CHARLOOKS CLINVISIBLE) of 
                                                             LOOKS) NIL 4) (T 0))
                                                             (COND ((fetch (CHARLOOKS CLSELHERE) of 
                                                             LOOKS) 2) (T 0)) (COND
                                                             ((fetch (CHARLOOKS CLCANCOPY) of LOOKS)
    1) (T 0))))))
    (HELP])

(\ARBOUT
  [LAMBDA (STREAM ITEM)                                      (* ; "Edited 20-Apr-88 19:55 by jds")
                                                             (* ; 
                                    "Write an arbitrary MKSTRING-able thing in length-contents form.")
    (LET ((SIZE (AND ITEM (NCHARS ITEM T *TEDIT-FILE-READTABLE*)))
          (FPTR)
          (END-FPTR))
         (\SMALLPOUT STREAM (OR SIZE 0))
         (SETQ FPTR (GETFILEPTR STREAM))
         (OR (NOT ITEM)
             (ZEROP SIZE)
             (PRIN2 ITEM STREAM *TEDIT-FILE-READTABLE*))

         (* ;; "Because of NS chars, you gotta back up and really count bytes.")
                                                             (* (SETQ END-FPTR (GETFILEPTR STREAM))
                                                             (SETFILEPTR STREAM FPTR)
                                                             (\SMALLPOUT STREAM (-
                                                             END-FPTR FPTR)) (SETFILEPTR STREAM 
                                                             END-FPTR))
         NIL])

(\ATMOUT
  [LAMBDA (STREAM ATOM)                                      (* jds "30-Jan-85 14:46")
                                                             (* Write an atom's characters in 
                                                             length-contents form.)
    (\SMALLPOUT STREAM (COND
                          (ATOM (NCHARS ATOM))
                          (T 0)))
    (OR (NOT ATOM)
        (ZEROP (NCHARS ATOM))
        (for CH inatom ATOM do (\BOUT STREAM CH])

(\DWOUT
  [LAMBDA (FILE NUMBER)                                      (* jds " 3-JAN-83 15:30")
    (\BOUT FILE (LOGAND 255 (LRSH NUMBER 24)))
    (\BOUT FILE (LOGAND 255 (LRSH NUMBER 16)))
    (\BOUT FILE (LOGAND 255 (LRSH NUMBER 8)))
    (\BOUT FILE (LOGAND 255 NUMBER])

(\STRINGOUT
  [LAMBDA (STREAM STRING LEN)                                (* jds " 1-May-84 11:58")

         (* Write a string on a file in length-contents form;
         one word for the length, and one byte per character contained.)

    (SETQ LEN (OR LEN (NCHARS STRING)))
    (\SMALLPOUT STREAM LEN)
    (OR (ZEROP LEN)
        (for CH instring STRING as I from 1 to LEN do (\BOUT STREAM CH])

(\TEDIT-OPEN-FONT-FILE
  [LAMBDA (EXISTING-FONTFILE-IF-ANY)                         (* ; "Edited 16-Sep-2022 22:31 by rmk")
                                                             (* ; "Edited 23-Sep-87 12:31 by jds")

    (* ;; " Open a font-information file for TEDIT PUT operation, if one doesn't exist already.  Also set its linelength to effective infinity, so that we don't get spurious CRs in the middle of formatting info.")

    (* ;; "The calling form must be (SETQ FOO (\TEDIT-OPEN-FONT-FILE FOO)), to preserve information.")

    (CL:UNLESS EXISTING-FONTFILE-IF-ANY                      (* ; 
                                                  "Create the font-info file if it doesn't exist yet")
        (SETQ EXISTING-FONTFILE-IF-ANY (OPENSTREAM '{NODIRCORE} 'BOTH 'NEW))
        (replace (STREAM LINELENGTH) of EXISTING-FONTFILE-IF-ANY with MAX.SMALLP))
    EXISTING-FONTFILE-IF-ANY])
)
(DEFINEQ

(\TEDIT.GET.CHARLOOKS.LIST
  [LAMBDA (FILE)                                             (* jds "28-Jan-85 17:50")
                                                             (* Read the list of CHARLOOKSs from 
                                                             the file.)
    (for I from 1 to (\SMALLPIN FILE) collect (\TEDIT.GET.SINGLE.CHARLOOKS FILE])

(\TEDIT.GET.SINGLE.CHARLOOKS
  [LAMBDA (FILE)                                           (* ; "Edited 20-Feb-2022 12:42 by larry")
                                                             (* ; "Edited 30-May-91 20:25 by jds")
                                                             (* Read a set of CHARLOOKS from FILE)
    (PROG* ((LOOKS (create CHARLOOKS))
            (FILEPOS (GETFILEPTR FILE))
            (LOOKSLEN (\SMALLPIN FILE))
            FONT STR NAME NAMELEN SIZE SUPER SUB PROPS STYLESTR USERSTR)
           (SETQ NAME (\ARBIN FILE))                         (* The font name)
           (SETQ SIZE (\SMALLPIN FILE))                      (* Size of the type, in points)
           (SETQ SUPER (\SMALLPIN FILE))                     (* Superscripting distance)
           (replace (CHARLOOKS CLSTYLE) of LOOKS with (OR (\ARBIN FILE)
                                                          0))
           (replace (CHARLOOKS CLUSERINFO) of LOOKS with (\ARBIN FILE))
           (SETQ PROPS (\SMALLPIN FILE))
           (with CHARLOOKS LOOKS [SETQ CLLEADER (NOT (ZEROP (LOGAND 2048 PROPS]
                 [SETQ CLINVERTED (NOT (ZEROP (LOGAND 1024 PROPS]
                 [SETQ CLBOLD (NOT (ZEROP (LOGAND 512 PROPS]
                 [SETQ CLITAL (NOT (ZEROP (LOGAND 256 PROPS]
                 [SETQ CLULINE (NOT (ZEROP (LOGAND 128 PROPS]
                 [SETQ CLOLINE (NOT (ZEROP (LOGAND 64 PROPS]
                 [SETQ CLSTRIKE (NOT (ZEROP (LOGAND 32 PROPS]
                 [SETQ CLSMALLCAP (NOT (ZEROP (LOGAND 16 PROPS]
                 [SETQ CLPROTECTED (NOT (ZEROP (LOGAND 8 PROPS]
                 [SETQ CLINVISIBLE (NOT (ZEROP (LOGAND 4 PROPS]
                 [SETQ CLSELHERE (NOT (ZEROP (LOGAND 2 PROPS]
                 [SETQ CLCANCOPY (NOT (ZEROP (LOGAND 1 PROPS]
                 (SETQ CLSIZE SIZE)
                 (SETQ CLOFFSET SUPER))
           [replace (CHARLOOKS CLFONT) of LOOKS with (COND
                                                        ((LISTP NAME)
                                                             (* This was a font class.
                                                             Restore it.)
                                                         (FONTCLASS (pop NAME)
                                                                NAME))
                                                        ((AND NAME (NOT (ZEROP SIZE)))
                                                         (FONTCREATE NAME SIZE
                                                                (COND
                                                                   ((AND (fetch (CHARLOOKS CLBOLD)
                                                                            of LOOKS)
                                                                         (fetch (CHARLOOKS CLITAL)
                                                                            of LOOKS))
                                                                    'BOLDITALIC)
                                                                   ((fetch (CHARLOOKS CLBOLD)
                                                                       of LOOKS)
                                                                    'BOLD)
                                                                   ((fetch (CHARLOOKS CLITAL)
                                                                       of LOOKS)
                                                                    'ITALIC))
                                                                NIL NIL T NIL]
           (SETFILEPTR FILE (IPLUS FILEPOS LOOKSLEN))
           (RETURN LOOKS])

(\TEDIT.PUT.CHARLOOKS.LIST
  [LAMBDA (FILE LOOKSLIST)                                   (* jds " 5-Mar-85 15:58")
                                                             (* Write the list of CHARLOOKSs into 
                                                             the font file.)

         (* Returns a hasharray that will map from a given CHARLOOKS to that CHARLOOKS' 
         position in the list we wrote on the file.
         Those position numbers are then written in the individual looks descriptions, and 
         are used to reconstruct the piece looks when the file is read back in.)

    (PROG ((LOOKSHASH (HASHARRAY 50)))
          (\DWOUT FILE 0)                                    (* No characters are described by this 
                                                             pseudo-piece entry.)
          (\SMALLPOUT FILE \PieceDescriptorCHARLOOKSLIST)    (* Mark it as containing the list of 
                                                             CHARLOOKSs)
          (\SMALLPOUT FILE (FLENGTH LOOKSLIST))              (* How many CHARLOOKSs there are in 
                                                             the list)
          (for I from 1 as LOOKS in LOOKSLIST do             (* Write each charlooks, in the order 
                                                             they appear in the list.)
                                                 (\TEDIT.PUT.SINGLE.CHARLOOKS FILE LOOKS) 
                                                             (* Write out the description)
                                                 (PUTHASH LOOKS I LOOKSHASH) 
                                                             (* And save it in the hash table so 
                                                             people can find its index.))
          (RETURN LOOKSHASH])

(\TEDIT.PUT.SINGLE.CHARLOOKS
  [LAMBDA (FILE LOOKS)                                       (* ; "Edited 30-May-91 20:26 by jds")
                                                             (* Put out a single CHARLOOKS 
                                                             description.)
    (PROG ((FILEPOS (GETFILEPTR FILE))
           (FONT (fetch (CHARLOOKS CLFONT) of LOOKS))
           STR LEN)
          (\SMALLPOUT FILE 0)                                (* Reserve space for the length of 
                                                             this looks)
          [COND
             ((type? FONTCLASS FONT)                         (* For font classes, we need to save a 
                                                             list of device-FD sets)
              (\ARBOUT FILE (FONTCLASSUNPARSE FONT)))
             (T                                              (* For FONTDESCRIPTORs, do it the easy 
                                                             way)
                (\ATMOUT FILE (FONTPROP FONT 'FAMILY]        (* The font family)
          (\SMALLPOUT FILE (OR (FONTPROP FONT 'SIZE)
                               0))                           (* Size of the type, in points)
          (\SMALLPOUT FILE (OR (fetch (CHARLOOKS CLOFFSET) of LOOKS)
                               0))                           (* Super/subscripting distance)
          (COND
             ([AND (fetch (CHARLOOKS CLSTYLE) of LOOKS)
                   (NOT (ZEROP (fetch (CHARLOOKS CLSTYLE) of LOOKS]
              (\ARBOUT FILE (fetch (CHARLOOKS CLSTYLE) of LOOKS)))
             (T (\SMALLPOUT FILE 0)))
          (COND
             ((fetch (CHARLOOKS CLUSERINFO) of LOOKS)
              (\ARBOUT FILE (fetch (CHARLOOKS CLUSERINFO) of LOOKS)))
             (T (\SMALLPOUT FILE 0)))
          [\SMALLPOUT FILE (LOGOR (COND
                                     ((fetch (CHARLOOKS CLLEADER) of LOOKS)
                                                             (* Dotted-leader; relevant only to 
                                                             TABs)
                                      2048)
                                     (T 0))
                                  (COND
                                     ((fetch (CHARLOOKS CLINVERTED) of LOOKS)
                                                             (* Inverse-video)
                                      1024)
                                     (T 0))
                                  (COND
                                     ((fetch (CHARLOOKS CLBOLD) of LOOKS)
                                      512)
                                     (T 0))
                                  (COND
                                     ((fetch (CHARLOOKS CLITAL) of LOOKS)
                                      256)
                                     (T 0))
                                  (COND
                                     ((fetch (CHARLOOKS CLULINE) of LOOKS)
                                      128)
                                     (T 0))
                                  (COND
                                     ((fetch (CHARLOOKS CLOLINE) of LOOKS)
                                      64)
                                     (T 0))
                                  (COND
                                     ((fetch (CHARLOOKS CLSTRIKE) of LOOKS)
                                      32)
                                     (T 0))
                                  (COND
                                     ((fetch (CHARLOOKS CLSMALLCAP) of LOOKS)
                                      16)
                                     (T 0))
                                  (COND
                                     ((fetch (CHARLOOKS CLPROTECTED) of LOOKS)
                                      8)
                                     (T 0))
                                  (COND
                                     ((fetch (CHARLOOKS CLINVISIBLE) of LOOKS)
                                      NIL 4)
                                     (T 0))
                                  (COND
                                     ((fetch (CHARLOOKS CLSELHERE) of LOOKS)
                                      2)
                                     (T 0))
                                  (COND
                                     ((fetch (CHARLOOKS CLCANCOPY) of LOOKS)
                                      1)
                                     (T 0]

         (* * Now go fill in the length field at the front of the LOOKS.
         (ALL looks info should be written out BEFORE this comment.))

          (SETQ LEN (IDIFFERENCE (GETFILEPTR FILE)
                           FILEPOS))                         (* The length of this set of looks)
          (SETFILEPTR FILE FILEPOS)                          (* Go write the length field)
          (\SMALLPOUT FILE LEN)
          (SETFILEPTR FILE -1)                               (* And back to the end of the file)
      ])
)
(DEFINEQ

(\TEDIT.GET.PARALOOKS.LIST
  [LAMBDA (FILE TEXTOBJ)                                     (* jds "13-Jun-85 11:14")
                                                             (* Read the list of CHARLOOKSs from 
                                                             the file.)
    (for I from 1 to (\SMALLPIN FILE) collect (\TEDIT.GET.SINGLE.PARALOOKS FILE TEXTOBJ])

(\TEDIT.GET.SINGLE.PARALOOKS
  [LAMBDA (FILE TEXTOBJ)                                     (* ; "Edited  3-Mar-2023 23:16 by rmk")
                                                             (* ; "Edited 11-Oct-2022 15:23 by rmk")
                                                             (* ; "Edited  1-Aug-2022 12:04 by rmk")
                                                             (* ; 
                                                        "Edited  2-Jul-93 21:31 by sybalskY:MV:ENVOS")
                                                             (* ; 
                           "Read a paragraph format spec from the FILE, and return it for later use.")
    (PROG ((LOOKS (create FMTSPEC))
           (FILEPOS (GETFILEPTR FILE))
           (LOOKSLEN (\SMALLPIN FILE))
           TABFLG DEFTAB TABCOUNT TABS TABSPEC TABTYPE QUAD)
          (replace (FMTSPEC 1STLEFTMAR) of LOOKS with (\SMALLPIN FILE))
                                                             (* ; 
                                                    "Left margin for the first line of the paragraph")
          (replace (FMTSPEC LEFTMAR) of LOOKS with (\SMALLPIN FILE))
                                                             (* ; 
                                                          "Left margin for the rest of the paragraph")
          (replace (FMTSPEC RIGHTMAR) of LOOKS with (\SMALLPIN FILE))
                                                             (* ; "Right margin for the paragraph")
          (replace (FMTSPEC LEADBEFORE) of LOOKS with (\SMALLPIN FILE))
                                                             (* ; "Leading before the paragraph")
          (replace (FMTSPEC LEADAFTER) of LOOKS with (\SMALLPIN FILE))
                                                             (* ; "Lead after the paragraph")
          (replace (FMTSPEC LINELEAD) of LOOKS with (\SMALLPIN FILE))
                                                             (* ; "inter-line leading")
          (replace (FMTSPEC TABSPEC) of LOOKS with (SETQ TABSPEC (CONS DEFAULTTAB NIL)))
                                                             (* ; "Will be tab specs")
          (SETQ TABFLG (BIN FILE))
          (replace (FMTSPEC QUAD) of LOOKS with (SELECTC (SETQ QUAD (BIN FILE))
                                                    (1 'LEFT)
                                                    (2 'RIGHT)
                                                    (3 'CENTERED)
                                                    (4 'JUSTIFIED)
                                                    (SHOULDNT)))
          (CL:UNLESS (ZEROP (LOGAND TABFLG 1))               (* ; "There are tabs to read")
              (SETQ DEFTAB (\SMALLPIN FILE))
              (SETQ TABCOUNT (BIN FILE))
              [SETQ TABS (for TAB# from 1 to TABCOUNT collect (create TAB
                                                                     TABX _ (\SMALLPIN FILE)
                                                                     TABKIND _
                                                                     (SELECTQ (SETQ TABTYPE
                                                                               (BIN FILE))
                                                                         (0 'LEFT)
                                                                         (1 'RIGHT)
                                                                         (2 'CENTERED)
                                                                         (3 'DECIMAL)
                                                                         (4 'DOTTEDLEFT)
                                                                         (5 'DOTTEDRIGHT)
                                                                         (6 'DOTTEDCENTERED)
                                                                         (7 'DOTTEDDECIMAL)
                                                                         (SHOULDNT]
              (CL:UNLESS (ZEROP DEFTAB)
                     (RPLACA TABSPEC DEFTAB))
              (RPLACD TABSPEC TABS))
          (CL:UNLESS (ZEROP (LOGAND TABFLG 2))               (* ; 
                                                   "There are other paragraph parameters to be read.")
              (replace (FMTSPEC FMTSPECIALX) of LOOKS with (\SMALLPIN FILE))
                                                             (* ; 
                                                      "Special X location on page for this paragraph")
              (replace (FMTSPEC FMTSPECIALY) of LOOKS with (\SMALLPIN FILE))
              (replace (FMTSPEC FMTUSERINFO) of LOOKS with (\ARBIN FILE))
              (replace (FMTSPEC FMTPARATYPE) of LOOKS with (\ATMIN FILE))
              (replace (FMTSPEC FMTPARASUBTYPE) of LOOKS with (\ATMIN FILE))
              (replace (FMTSPEC FMTSTYLE) of LOOKS with (\ARBIN FILE))
              (replace (FMTSPEC FMTCHARSTYLES) of LOOKS with (\ARBIN FILE))
              (replace (FMTSPEC FMTNEWPAGEBEFORE) of LOOKS with (\ARBIN FILE))
              (replace (FMTSPEC FMTNEWPAGEAFTER) of LOOKS with (\ARBIN FILE))
              (replace (FMTSPEC FMTHEADINGKEEP) of LOOKS with (\ARBIN FILE))
              (replace (FMTSPEC FMTKEEP) of LOOKS with (\ARBIN FILE))
              (CL:WHEN (ILESSP (GETFILEPTR FILE)
                              (IPLUS FILEPOS LOOKSLEN))
                  (replace (FMTSPEC FMTBASETOBASE) of LOOKS with (\ARBIN FILE)))
              (CL:WHEN (ILESSP (GETFILEPTR FILE)
                              (IPLUS FILEPOS LOOKSLEN))
                  (replace (FMTSPEC FMTREVISED) of LOOKS with (\ARBIN FILE)))
              (CL:WHEN (ILESSP (GETFILEPTR FILE)
                              (IPLUS FILEPOS LOOKSLEN))
                  (replace (FMTSPEC FMTCOLUMN) of LOOKS with (\ARBIN FILE)))
              (CL:WHEN (ILESSP (GETFILEPTR FILE)
                              (IPLUS FILEPOS LOOKSLEN))
                  (replace (FMTSPEC FMTCHARSTYLES) of LOOKS with (\ARBIN FILE))))
          (CL:WHEN (ILESSP (GETFILEPTR FILE)
                          (IPLUS FILEPOS LOOKSLEN))          (* ; 
                               "There is more PARALOOKS info in this piece -- we probably lost data.")
              (TEDIT.PROMPTPRINT TEXTOBJ "WARNING: Newer file version; you lost PARALOOKS info" T)
              (SETFILEPTR FILE (IPLUS FILEPOS LOOKSLEN)))
          (RETURN LOOKS])

(\TEDIT.PUT.PARALOOKS.LIST
  [LAMBDA (FILE LOOKSLIST)                                   (* ; "Edited  1-Sep-87 20:34 by jds")
                                                             (* ; 
                                                     "Write the list of FMTSPECs into the font file.")
    (PROG ((LOOKSHASH (HASHARRAY 50)))
          (\DWOUT FILE 0)
          (\SMALLPOUT FILE \PieceDescriptorPARALOOKSLIST)
          (\SMALLPOUT FILE (FLENGTH LOOKSLIST))
          (for I from 1 as LOOKS in LOOKSLIST do (\TEDIT.PUT.SINGLE.PARALOOKS FILE LOOKS) 
                                                             (* ; "Write out the description")
                                                 (PUTHASH LOOKS I LOOKSHASH) 
                                                             (* ; 
                                        "And save it in the hash table so people can find its index.")
               )
          (RETURN LOOKSHASH])

(\TEDIT.PUT.SINGLE.PARALOOKS
  [LAMBDA (FILE LOOKS)                                       (* ; "Edited  3-Mar-2023 23:25 by rmk")
                                                             (* ; 
                                                        "Edited  2-Jul-93 21:30 by sybalskY:MV:ENVOS")

    (* ;; "Put a description of LOOKS into FILE.")

    (PROG ((FILEPOS (GETFILEPTR FILE))
           DEFTAB TABSPECS OUTPUTFORMAT LEN)
          (\SMALLPOUT FILE 0)                                (* ; 
                                                         "Reserve space for the length of this looks")
          (\SMALLPOUT FILE (fetch (FMTSPEC 1STLEFTMAR) of LOOKS))
                                                             (* ; 
                                                    "Left margin for the first line of the paragraph")
          (\SMALLPOUT FILE (fetch (FMTSPEC LEFTMAR) of LOOKS))
                                                             (* ; 
                                                          "Left margin for the rest of the paragraph")
          (\SMALLPOUT FILE (fetch (FMTSPEC RIGHTMAR) of LOOKS))
                                                             (* ; "Right margin for the paragraph")
          (\SMALLPOUT FILE (fetch (FMTSPEC LEADBEFORE) of LOOKS))
                                                             (* ; "Leading before the paragraph")
          (\SMALLPOUT FILE (fetch (FMTSPEC LEADAFTER) of LOOKS))
                                                             (* ; "Lead after the paragraph")
          (\SMALLPOUT FILE (fetch (FMTSPEC LINELEAD) of LOOKS))
                                                             (* ; "inter-line leading")
          (SETQ DEFTAB (CAR (fetch (FMTSPEC TABSPEC) of LOOKS)))
          (SETQ TABSPECS (CDR (fetch (FMTSPEC TABSPEC) of LOOKS)))
          (COND
             ((AND (fetch (FMTSPEC TABSPEC) of LOOKS)
                   (OR DEFTAB TABSPECS))                     (* ; 
                             "There are tab specs to save, or there is a default tab setting to save")
              (\BOUT FILE 3))
             (T                                              (* ; 
                                                          "There are no tab looks.  Just let him go.")
                (\BOUT FILE 2)))
          (\BOUT FILE (SELECTQ (fetch (FMTSPEC QUAD) of LOOKS)
                          (LEFT 1)
                          (RIGHT 2)
                          ((CENTER CENTERED) 
                               3)
                          ((JUST JUSTIFIED) 
                               4)
                          (SHOULDNT)))
          [COND
             ((OR TABSPECS DEFTAB)                           (* ; "There are tab specs to save.")
              (COND
                 (DEFTAB (\SMALLPOUT FILE DEFTAB))
                 (T (\SMALLPOUT FILE 0)))
              (COND
                 ((IGREATERP (LENGTH TABSPECS)
                         255)
                  (SHOULDNT "Paragraph has more than 255 TABs set--can't be saved.")))
              (\BOUT FILE (LENGTH TABSPECS))
              (COND
                 (TABSPECS                                   (* ; "# of tab settings <256!")
                        (for TAB in TABSPECS do (\SMALLPOUT FILE (fetch TABX of TAB)) 
                                                             (* ; "And setting.")
                                                (\BOUT FILE (SELECTQ (fetch TABKIND of TAB)
                                                                (LEFT 0)
                                                                (RIGHT 1)
                                                                (CENTERED 2)
                                                                (DECIMAL 3)
                                                                (DOTTEDLEFT 4)
                                                                (DOTTEDRIGHT 5)
                                                                (DOTTEDCENTERED 
                                                                     6)
                                                                (DOTTEDDECIMAL 7)
                                                                (SHOULDNT))) 
                                                             (* ; "Tab type")]
          (\SMALLPOUT FILE (OR (fetch (FMTSPEC FMTSPECIALX) of LOOKS)
                               0))
          (\SMALLPOUT FILE (OR (fetch (FMTSPEC FMTSPECIALY) of LOOKS)
                               0))
          (\ARBOUT FILE (fetch (FMTSPEC FMTUSERINFO) of LOOKS))
          (\ATMOUT FILE (fetch (FMTSPEC FMTPARATYPE) of LOOKS))
          (\ATMOUT FILE (fetch (FMTSPEC FMTPARASUBTYPE) of LOOKS))
          (\ARBOUT FILE (fetch (FMTSPEC FMTSTYLE) of LOOKS))
          (\ARBOUT FILE (fetch (FMTSPEC FMTCHARSTYLES) of LOOKS))
          (\ARBOUT FILE (fetch (FMTSPEC FMTNEWPAGEBEFORE) of LOOKS))
          (\ARBOUT FILE (fetch (FMTSPEC FMTNEWPAGEAFTER) of LOOKS))
          (\ARBOUT FILE (fetch (FMTSPEC FMTHEADINGKEEP) of LOOKS))
          (\ARBOUT FILE (fetch (FMTSPEC FMTKEEP) of LOOKS))
          (\ARBOUT FILE (fetch (FMTSPEC FMTBASETOBASE) of LOOKS))
          (\ARBOUT FILE (fetch (FMTSPEC FMTREVISED) of LOOKS))
          (\ARBOUT FILE (fetch (FMTSPEC FMTCOLUMN) of LOOKS))
          (\ARBOUT FILE (fetch (FMTSPEC FMTCHARSTYLES) of LOOKS))

(* ;;; "Now go fill in the length field at the front of the LOOKS.  (ALL looks info should be written out BEFORE this comment.)")

          (SETQ LEN (IDIFFERENCE (GETFILEPTR FILE)
                           FILEPOS))                         (* ; "The length of this set of looks")
          (SETFILEPTR FILE FILEPOS)                          (* ; "Go write the length field")
          (\SMALLPOUT FILE LEN)
          (SETFILEPTR FILE -1)                               (* ; "And back to the end of the file")
      ])
)
(DECLARE%: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS TEDIT.INPUT.FORMATS *TEDIT-FILE-READTABLE*)
)

(RPAQ? TEDIT.INPUT.FORMATS NIL)

(RPAQ? *TEDIT-FILE-READTABLE* (COPYREADTABLE \ORIGREADTABLE))



(* ;; "For converting old incoming format.  Cutover 5/22/85 to permit looks changes in the future.")

(DEFINEQ

(TEDIT.GET.PCTB2
  [LAMBDA (TEXT TEXTOBJ PCCOUNT START END)                   (* ; "Edited  3-Aug-2023 22:08 by rmk")
                                                             (* ; "Edited 26-Apr-2023 14:39 by rmk")
                                                             (* ; "Edited 19-Apr-2023 07:53 by rmk")
                                                             (* ; "Edited  4-Oct-2022 16:58 by rmk")
                                                             (* ; "Edited  8-Sep-2022 23:06 by rmk")
                                                             (* ; "Edited  5-Sep-2022 21:33 by rmk")
                                                             (* ; "Edited  4-May-93 16:27 by jds")

    (* ;; "READ OBSOLETE FORMATS OF TEDIT FILE")

    (* ;; "START = 1st char of file to read from, if specified")

    (* ;; "END = use this as eofptr of file.  For use in reading files within files.")

    (LET (PIECEINFOCH# (CURFILECH# (OR START 0))
                LOOKSHASH PARAHASH)
         (SETFILEPTR TEXT (IDIFFERENCE (OR END (GETEOFPTR TEXT))
                                 8))
         (SETQ PIECEINFOCH# (\DWIN TEXT))
         (SETFILEPTR TEXT PIECEINFOCH#)
         (bind PC TYPECODE PCLEN OLDPC (DEFAULTCHARLOOKS _ (fetch (TEXTOBJ DEFAULTCHARLOOKS)
                                                              of TEXTOBJ))
               (OLDPARALOOKS _ (fetch (TEXTOBJ FMTSPEC) of TEXTOBJ)) for I from 1 to PCCOUNT
            do (SETQ PC NIL)                                 (* ; 
                        "This loop may not really read a piece, so we have to distinguish that case.")
               (SETQ PCLEN (\DWIN TEXT))
               (SETQ TYPECODE (\SMALLPIN TEXT))              (* ; "What kind of piece is it?")
               (SELECTC TYPECODE
                   (\PieceDescriptorPAGEFRAME                (* ; 
                                                             "This is page layout info for the file")
                        (CL:WHEN TEXTOBJ
                            (replace (TEXTOBJ TXTPAGEFRAMES) of TEXTOBJ with (TEDIT.PARSE.PAGEFRAMES
                                                                              (READ TEXT)))))
                   (\PieceDescriptorCHARLOOKSLIST            (* ; 
                                              "This is the list of CHARLOOKSs used in this document.")
                        (replace (TEXTOBJ TXTCHARLOOKSLIST) of TEXTOBJ with (
                                                                           \TEDIT.GET.CHARLOOKS.LIST2
                                                                             TEXT))
                                                             (* ; 
                                                      "Read the list of looks used in this document.")
                        [SETQ LOOKSHASH (ARRAY (FLENGTH (fetch (TEXTOBJ TXTCHARLOOKSLIST)
                                                           of TEXTOBJ]
                                                             (* ; 
                                         "Build an array of the looks, so the reader can index them.")
                        (for I from 1 as LOOKS in (fetch (TEXTOBJ TXTCHARLOOKSLIST) of TEXTOBJ)
                           do (SETA LOOKSHASH I LOOKS))
                        (add I -1))
                   (\PieceDescriptorPARALOOKSLIST            (* ; 
                                              "This is the list of PARALOOKSs used in this document.")
                        (replace (TEXTOBJ TXTPARALOOKSLIST) of TEXTOBJ with (
                                                                           \TEDIT.GET.PARALOOKS.LIST2
                                                                             TEXT))
                                                             (* ; 
                                                      "Read the list of looks used in this document.")
                        [SETQ PARAHASH (ARRAY (FLENGTH (fetch (TEXTOBJ TXTPARALOOKSLIST) of TEXTOBJ]
                                                             (* ; 
                                         "Build an array of the looks, so the reader can index them.")
                        (for I from 1 as LOOKS in (fetch (TEXTOBJ TXTPARALOOKSLIST) of TEXTOBJ)
                           do (SETA PARAHASH I LOOKS))
                        (add I -1))
                   (\PieceDescriptorPARA                     (* ; 
                                                             "Reading a new set of paragraph looks.")
                        (CL:WHEN OLDPC
                            (replace (PIECE PPARALAST) of OLDPC with T))
                                                             (* ; 
                                                           "Mark the end of the preceding paragraph.")
                        (SETQ OLDPARALOOKS (\TEDIT.GET.PARALOOKS TEXT PARAHASH))
                                                             (* ; 
                                                 "Get the new set of looks, for use by later pieces.")
                        (CL:WHEN TEXTOBJ                     (* ; 
                                          "Mark the document as containing paragraph formatting info")
                            (replace (TEXTOBJ FORMATTEDP) of TEXTOBJ with T)))
                   (\PieceDescriptorLOOKS                    (* ; 
                                  "New character looks.  Build a piece to describe those characters.")
                        (SETQ PC
                         (create PIECE
                                PCONTENTS _ TEXT
                                PFPOS _ CURFILECH#
                                PLEN _ PCLEN
                                PPARALOOKS _ OLDPARALOOKS
                                PTYPE _ THINFILE.PTYPE))     (* ; "Build the new piece")
                        (\TEDIT.GET.CHARLOOKS PC TEXT LOOKSHASH)
                                                             (* ; 
                                                             "Read the character looks for this guy.")
                        (COND
                           [OLDPC                            (* ; 
                                              "If there's a prior piece, hook this one on the chain.")
                                  (COND
                                     ([AND (EQ FATFILE2.PTYPE (PTYPE PC))
                                           (NOT (EQ FATFILE2.PTYPE (PTYPE OLDPC]
                                                             (* ; 
                                      "Switching from not-fat to fat.  Add 3 bytes for the 255-255-0")
                                      (add (fetch (PIECE PFPOS) of PC)
                                           3)
                                      (add CURFILECH# -3))
                                     ([AND (EQ FATFILE2.PTYPE (PTYPE OLDPC))
                                           (NOT (EQ FATFILE2.PTYPE (PTYPE PC]
                                                             (* ; 
                                          "Switching from fat to not-fat.  Add 3 bytes for the 255-0")
                                      (add (fetch (PIECE PFPOS) of PC)
                                           2]
                           ((EQ FATFILE2.PTYPE (PTYPE PC))   (* ; 
                                      "Switching from not-fat to fat.  Add 3 bytes for the 255-255-0")
                            (add (fetch (PIECE PFPOS) of PC)
                                 3)
                            (add CURFILECH# -3)))            (* ; 
                                                             "And note the passing of characters.")
                        (add CURFILECH# PCLEN))
                   (\PieceDescriptorOBJECT                   (* ; 
   "It describes an object.  Read that, and perhaps some description of the charlooks to go with it.")
                        (SETQ PC
                         (create PIECE
                                PCONTENTS _ TEXT
                                PFPOS _ CURFILECH#
                                PLEN _ 1
                                PPARALOOKS _ OLDPARALOOKS
                                PTYPE _ OBJECT.PTYPE))
                        (TEDIT.GET.OBJECT (AND TEXTOBJ (fetch (TEXTOBJ STREAMHINT) of TEXTOBJ))
                               PC TEXT CURFILECH#)
                        (add CURFILECH# (PLEN PC))
                        (replace (PIECE PLOOKS) of PC
                           with (if (ZEROP (BIN TEXT))
                                    then 
                                         (* ;; "No new looks;  steal them from the prior piece.")

                                         (OR (AND OLDPC (fetch (PIECE PLOOKS) of OLDPC))
                                             DEFAULTCHARLOOKS)
                                  else 
                                       (* ;; 
                                      "There are new character looks for this object.  Read them in.")

                                       (\TEDIT.GET.SINGLE.CHARLOOKS2 TEXT))))
                   (SHOULDNT "Impossible piece-type code in BUILD.PCTB"))
               (CL:WHEN PC                                   (* ; 
                                                       "If we created a piece, save it in the table.")
                   (\INSERTPIECE PC NIL TEXTOBJ)
                   (SETQ OLDPC PC))])

(\TEDIT.GET.CHARLOOKS.LIST2
  [LAMBDA (FILE)                                             (* jds "22-May-85 14:28")
                                                             (* Read the list of CHARLOOKSs from 
                                                             the file.)
    (for I from 1 to (\SMALLPIN FILE) collect (\TEDIT.GET.SINGLE.CHARLOOKS2 FILE])

(\TEDIT.GET.SINGLE.CHARLOOKS2
  [LAMBDA (FILE)                                             (* ; "Edited 30-May-91 20:26 by jds")
                                                             (* Read a set of CHARLOOKS from FILE)
    (PROG* ((LOOKS (create CHARLOOKS))
            FONT STR NAME NAMELEN SIZE SUPER SUB PROPS STYLESTR USERSTR)
           (SETQ NAME (\ARBIN FILE))                         (* The font name)
           (SETQ SIZE (\SMALLPIN FILE))                      (* Size of the type, in points)
           (SETQ SUPER (\SMALLPIN FILE))                     (* Superscripting distance)
           (replace (CHARLOOKS CLSTYLE) of LOOKS with (OR (\ARBIN FILE)
                                                          0))
           (replace (CHARLOOKS CLUSERINFO) of LOOKS with (\ARBIN FILE))
           (SETQ PROPS (\SMALLPIN FILE))
           (with CHARLOOKS LOOKS [SETQ CLLEADER (NOT (ZEROP (LOGAND 2048 PROPS]
                 [SETQ CLINVERTED (NOT (ZEROP (LOGAND 1024 PROPS]
                 [SETQ CLBOLD (NOT (ZEROP (LOGAND 512 PROPS]
                 [SETQ CLITAL (NOT (ZEROP (LOGAND 256 PROPS]
                 [SETQ CLULINE (NOT (ZEROP (LOGAND 128 PROPS]
                 [SETQ CLOLINE (NOT (ZEROP (LOGAND 64 PROPS]
                 [SETQ CLSTRIKE (NOT (ZEROP (LOGAND 32 PROPS]
                 [SETQ CLSMALLCAP (NOT (ZEROP (LOGAND 16 PROPS]
                 [SETQ CLPROTECTED (NOT (ZEROP (LOGAND 8 PROPS]
                 [SETQ CLINVISIBLE (NOT (ZEROP (LOGAND 4 PROPS]
                 [SETQ CLSELHERE (NOT (ZEROP (LOGAND 2 PROPS]
                 [SETQ CLCANCOPY (NOT (ZEROP (LOGAND 1 PROPS]
                 (SETQ CLSIZE SIZE)
                 (SETQ CLOFFSET SUPER))
           [replace (CHARLOOKS CLFONT) of LOOKS with (COND
                                                        ((LISTP NAME)
                                                             (* This was a font class.
                                                             Restore it.)
                                                         (FONTCLASS (pop NAME)
                                                                NAME))
                                                        ((AND NAME (NOT (ZEROP SIZE)))
                                                         (FONTCREATE NAME SIZE
                                                                (COND
                                                                   ((AND (fetch (CHARLOOKS CLBOLD)
                                                                            of LOOKS)
                                                                         (fetch (CHARLOOKS CLITAL)
                                                                            of LOOKS))
                                                                    'BOLDITALIC)
                                                                   ((fetch (CHARLOOKS CLBOLD)
                                                                       of LOOKS)
                                                                    'BOLD)
                                                                   ((fetch (CHARLOOKS CLITAL)
                                                                       of LOOKS)
                                                                    'ITALIC]
           (RETURN LOOKS])

(\TEDIT.PUT.SINGLE.PARALOOKS2
  [LAMBDA (FILE LOOKS)                                       (* ; "Edited  3-Mar-2023 23:23 by rmk")
                                                             (* ; "Edited 30-May-91 20:33 by jds")
                                                             (* ; 
                  "Put a description of LOOKS into FILE.  LOOKS apply to characters CH1 thru CHLIM-1")
    (PROG (DEFTAB TABSPECS OUTPUTFORMAT LEN)
          (\SMALLPOUT FILE (fetch (FMTSPEC 1STLEFTMAR) of LOOKS))
                                                             (* ; 
                                                    "Left margin for the first line of the paragraph")
          (\SMALLPOUT FILE (fetch (FMTSPEC LEFTMAR) of LOOKS))
                                                             (* ; 
                                                          "Left margin for the rest of the paragraph")
          (\SMALLPOUT FILE (fetch (FMTSPEC RIGHTMAR) of LOOKS))
                                                             (* ; "Right margin for the paragraph")
          (\SMALLPOUT FILE (fetch (FMTSPEC LEADBEFORE) of LOOKS))
                                                             (* ; "Leading before the paragraph")
          (\SMALLPOUT FILE (fetch (FMTSPEC LEADAFTER) of LOOKS))
                                                             (* ; "Lead after the paragraph")
          (\SMALLPOUT FILE (fetch (FMTSPEC LINELEAD) of LOOKS))
                                                             (* ; "inter-line leading")
          (SETQ DEFTAB (CAR (fetch (FMTSPEC TABSPEC) of LOOKS)))
          (SETQ TABSPECS (CDR (fetch (FMTSPEC TABSPEC) of LOOKS)))
          (COND
             ((AND (fetch (FMTSPEC TABSPEC) of LOOKS)
                   (OR DEFTAB TABSPECS))                     (* ; 
                             "There are tab specs to save, or there is a default tab setting to save")
              (\BOUT FILE 3))
             (T                                              (* ; 
                                                          "There are no tab looks.  Just let him go.")
                (\BOUT FILE 2)))
          (\BOUT FILE (SELECTQ (fetch (FMTSPEC QUAD) of LOOKS)
                          (LEFT 1)
                          (RIGHT 2)
                          ((CENTER CENTERED) 
                               3)
                          ((JUST JUSTIFIED) 
                               4)
                          (SHOULDNT)))
          [COND
             ((OR TABSPECS DEFTAB)                           (* ; "There are tab specs to save.")
              (COND
                 (DEFTAB (\SMALLPOUT FILE DEFTAB))
                 (T (\SMALLPOUT FILE 0)))
              (\BOUT FILE (LENGTH TABSPECS))
              (COND
                 (TABSPECS                                   (* ; "# of tab settings <256!")
                        (for TAB in TABSPECS do (\SMALLPOUT FILE (fetch TABX of TAB)) 
                                                             (* ; "And setting.")
                                                (\BOUT FILE (SELECTQ (fetch TABKIND of TAB)
                                                                (LEFT 0)
                                                                (RIGHT 1)
                                                                (CENTERED 2)
                                                                (DECIMAL 3)
                                                                (SHOULDNT))) 
                                                             (* ; "Tab type")]
          (\SMALLPOUT FILE (OR (fetch (FMTSPEC FMTSPECIALX) of LOOKS)
                               0))
          (\SMALLPOUT FILE (OR (fetch (FMTSPEC FMTSPECIALY) of LOOKS)
                               0))
          (\ARBOUT FILE (fetch (FMTSPEC FMTUSERINFO) of LOOKS))
          (\ATMOUT FILE (fetch (FMTSPEC FMTPARATYPE) of LOOKS))
          (\ATMOUT FILE (fetch (FMTSPEC FMTPARASUBTYPE) of LOOKS))
          (\ARBOUT FILE (fetch (FMTSPEC FMTSTYLE) of LOOKS))
          (\ARBOUT FILE (fetch (FMTSPEC FMTCHARSTYLES) of LOOKS))
          (\ARBOUT FILE (fetch (FMTSPEC FMTNEWPAGEBEFORE) of LOOKS))
          (\ARBOUT FILE (fetch (FMTSPEC FMTNEWPAGEAFTER) of LOOKS])

(\TEDIT.PUT.SINGLE.CHARLOOKS2
  [LAMBDA (FILE LOOKS)                                       (* ; "Edited 30-May-91 20:26 by jds")
                                                             (* Put out a single CHARLOOKS 
                                                             description.)
    (PROG ((FONT (fetch (CHARLOOKS CLFONT) of LOOKS))
           STR LEN)
          [COND
             ((type? FONTCLASS FONT)                         (* For font classes, we need to save a 
                                                             list of device-FD sets)
              (\ARBOUT FILE (FONTCLASSUNPARSE FONT)))
             (T                                              (* For FONTDESCRIPTORs, do it the easy 
                                                             way)
                (\ATMOUT FILE (FONTPROP FONT 'FAMILY]        (* The font family)
          (\SMALLPOUT FILE (OR (FONTPROP FONT 'SIZE)
                               0))                           (* Size of the type, in points)
          (\SMALLPOUT FILE (OR (fetch (CHARLOOKS CLOFFSET) of LOOKS)
                               0))                           (* Super/subscripting distance)
          (COND
             ([AND (fetch (CHARLOOKS CLSTYLE) of LOOKS)
                   (NOT (ZEROP (fetch (CHARLOOKS CLSTYLE) of LOOKS]
              (\ARBOUT FILE (fetch (CHARLOOKS CLSTYLE) of LOOKS)))
             (T (\SMALLPOUT FILE 0)))
          (COND
             ((fetch (CHARLOOKS CLUSERINFO) of LOOKS)
              (\ARBOUT FILE (fetch (CHARLOOKS CLUSERINFO) of LOOKS)))
             (T (\SMALLPOUT FILE 0)))
          (\SMALLPOUT FILE (LOGOR (COND
                                     ((fetch (CHARLOOKS CLLEADER) of LOOKS)
                                                             (* Dotted-leader; relevant only to 
                                                             TABs)
                                      2048)
                                     (T 0))
                                  (COND
                                     ((fetch (CHARLOOKS CLINVERTED) of LOOKS)
                                                             (* Inverse-video)
                                      1024)
                                     (T 0))
                                  (COND
                                     ((fetch (CHARLOOKS CLBOLD) of LOOKS)
                                      512)
                                     (T 0))
                                  (COND
                                     ((fetch (CHARLOOKS CLITAL) of LOOKS)
                                      256)
                                     (T 0))
                                  (COND
                                     ((fetch (CHARLOOKS CLULINE) of LOOKS)
                                      128)
                                     (T 0))
                                  (COND
                                     ((fetch (CHARLOOKS CLOLINE) of LOOKS)
                                      64)
                                     (T 0))
                                  (COND
                                     ((fetch (CHARLOOKS CLSTRIKE) of LOOKS)
                                      32)
                                     (T 0))
                                  (COND
                                     ((fetch (CHARLOOKS CLSMALLCAP) of LOOKS)
                                      16)
                                     (T 0))
                                  (COND
                                     ((fetch (CHARLOOKS CLPROTECTED) of LOOKS)
                                      8)
                                     (T 0))
                                  (COND
                                     ((fetch (CHARLOOKS CLINVISIBLE) of LOOKS)
                                      NIL 4)
                                     (T 0))
                                  (COND
                                     ((fetch (CHARLOOKS CLSELHERE) of LOOKS)
                                      2)
                                     (T 0))
                                  (COND
                                     ((fetch (CHARLOOKS CLCANCOPY) of LOOKS)
                                      1)
                                     (T 0])

(\TEDIT.GET.PARALOOKS.LIST2
  [LAMBDA (FILE)                                             (* jds "22-May-85 14:28")
                                                             (* Read the list of CHARLOOKSs from 
                                                             the file.)
    (for I from 1 to (\SMALLPIN FILE) collect (\TEDIT.GET.SINGLE.PARALOOKS2 FILE])

(\TEDIT.GET.SINGLE.PARALOOKS2
  [LAMBDA (FILE)                                             (* ; "Edited  3-Mar-2023 23:18 by rmk")
                                                             (* ; "Edited  1-Aug-2022 12:04 by rmk")
                                                             (* ; "Edited 30-May-91 20:33 by jds")
                                                             (* ; 
                           "Read a paragraph format spec from the FILE, and return it for later use.")
    (PROG ((LOOKS (create FMTSPEC))
           TABFLG DEFTAB TABCOUNT TABS TABSPEC)
          (replace (FMTSPEC 1STLEFTMAR) of LOOKS with (\SMALLPIN FILE))
                                                             (* ; 
                                                    "Left margin for the first line of the paragraph")
          (replace (FMTSPEC LEFTMAR) of LOOKS with (\SMALLPIN FILE))
                                                             (* ; 
                                                          "Left margin for the rest of the paragraph")
          (replace (FMTSPEC RIGHTMAR) of LOOKS with (\SMALLPIN FILE))
                                                             (* ; "Right margin for the paragraph")
          (replace (FMTSPEC LEADBEFORE) of LOOKS with (\SMALLPIN FILE))
                                                             (* ; "Leading before the paragraph")
          (replace (FMTSPEC LEADAFTER) of LOOKS with (\SMALLPIN FILE))
                                                             (* ; "Lead after the paragraph")
          (replace (FMTSPEC LINELEAD) of LOOKS with (\SMALLPIN FILE))
                                                             (* ; "inter-line leading")
          (replace (FMTSPEC TABSPEC) of LOOKS with (SETQ TABSPEC (CONS DEFAULTTAB NIL)))
                                                             (* ; "Will be tab specs")
          (SETQ TABFLG (BIN FILE))
          (replace (FMTSPEC QUAD) of LOOKS with (SELECTC (BIN FILE)
                                                    (1 'LEFT)
                                                    (2 'RIGHT)
                                                    (3 'CENTERED)
                                                    (4 'JUSTIFIED)
                                                    (SHOULDNT)))
          (COND
             ((NOT (ZEROP (LOGAND TABFLG 1)))                (* ; "There are tabs to read")
              (SETQ DEFTAB (\SMALLPIN FILE))
              (SETQ TABCOUNT (BIN FILE))
              [SETQ TABS (for TAB# from 1 to TABCOUNT collect (create TAB
                                                                     TABX _ (\SMALLPIN FILE)
                                                                     TABKIND _
                                                                     (SELECTQ (BIN FILE)
                                                                         (0 'LEFT)
                                                                         (1 'RIGHT)
                                                                         (2 'CENTERED)
                                                                         (3 'DECIMAL)
                                                                         (SHOULDNT]
              (CL:UNLESS (ZEROP DEFTAB)
                     (RPLACA TABSPEC DEFTAB))
              (RPLACD TABSPEC TABS)))
          [COND
             ((NOT (ZEROP (LOGAND TABFLG 2)))                (* ; 
                                                   "There are other paragraph parameters to be read.")
              (replace (FMTSPEC FMTSPECIALX) of LOOKS with (\SMALLPIN FILE))
                                                             (* ; 
                                                      "Special X location on page for this paragraph")
              (replace (FMTSPEC FMTSPECIALY) of LOOKS with (\SMALLPIN FILE))
              (replace (FMTSPEC FMTUSERINFO) of LOOKS with (\ARBIN FILE))
              (replace (FMTSPEC FMTPARATYPE) of LOOKS with (\ATMIN FILE))
              (replace (FMTSPEC FMTPARASUBTYPE) of LOOKS with (\ATMIN FILE))
              (replace (FMTSPEC FMTSTYLE) of LOOKS with (\ARBIN FILE))
              (replace (FMTSPEC FMTCHARSTYLES) of LOOKS with (\ARBIN FILE))
              (replace (FMTSPEC FMTNEWPAGEBEFORE) of LOOKS with (\ARBIN FILE))
              (replace (FMTSPEC FMTNEWPAGEAFTER) of LOOKS with (\ARBIN FILE]
          (RETURN LOOKS])

(\TEDIT.PUT.CHARLOOKS.LIST2
  [LAMBDA (FILE LOOKSLIST)                                   (* jds "22-May-85 15:12")
                                                             (* Write the list of CHARLOOKSs into 
                                                             the font file.)

         (* Returns a hasharray that will map from a given CHARLOOKS to that CHARLOOKS' 
         position in the list we wrote on the file.
         Those position numbers are then written in the individual looks descriptions, and 
         are used to reconstruct the piece looks when the file is read back in.)

    (PROG ((LOOKSHASH (HASHARRAY 50)))
          (\DWOUT FILE 0)                                    (* No characters are described by this 
                                                             pseudo-piece entry.)
          (\SMALLPOUT FILE \PieceDescriptorCHARLOOKSLIST)    (* Mark it as containing the list of 
                                                             CHARLOOKSs)
          (\SMALLPOUT FILE (FLENGTH LOOKSLIST))              (* How many CHARLOOKSs there are in 
                                                             the list)
          (for I from 1 as LOOKS in LOOKSLIST do             (* Write each charlooks, in the order 
                                                             they appear in the list.)
                                                 (\TEDIT.PUT.SINGLE.CHARLOOKS2 FILE LOOKS) 
                                                             (* Write out the description)
                                                 (PUTHASH LOOKS I LOOKSHASH) 
                                                             (* And save it in the hash table so 
                                                             people can find its index.))
          (RETURN LOOKSHASH])

(\TEDIT.PUT.PARALOOKS.LIST2
  [LAMBDA (FILE LOOKSLIST)                                   (* jds "22-May-85 15:09")
                                                             (* Write the list of FMTSPECs into the 
                                                             font file.)
    (PROG ((LOOKSHASH (HASHARRAY 50)))
          (\DWOUT FILE 0)
          (\SMALLPOUT FILE \PieceDescriptorPARALOOKSLIST)
          (\SMALLPOUT FILE (FLENGTH LOOKSLIST))
          (for I from 1 as LOOKS in LOOKSLIST do (\TEDIT.PUT.SINGLE.PARALOOKS2 FILE LOOKS) 
                                                             (* Write out the description)
                                                 (PUTHASH LOOKS I LOOKSHASH) 
                                                             (* And save it in the hash table so 
                                                             people can find its index.))
          (RETURN LOOKSHASH])
)



(* ;; "For converting incoming old-format files (1/27/85 cutover)")

(DEFINEQ

(TEDIT.GET.PCTB1
  [LAMBDA (TEXT TEXTOBJ PCCOUNT START END)                   (* ; "Edited  3-Aug-2023 22:08 by rmk")
                                                             (* ; "Edited 26-Apr-2023 14:18 by rmk")
                                                             (* ; "Edited  5-Sep-2022 23:06 by rmk")
                                                             (* ; "Edited 22-May-92 18:00 by jds")

(* ;;; "READ OBSOLETE FORMATS OF TEDIT FILE")

    (* ;; "START = 1st char of file to read from, if specified")

    (* ;; "END = use this as eofptr of file.  For use in reading files within files.")

    (LET (PIECEINFOCH# TSTREAM (CURFILECH# (OR START 0)))
         (SETFILEPTR TEXT (IDIFFERENCE (OR END (GETEOFPTR TEXT))
                                 8))
         (SETQ PIECEINFOCH# (\DWIN TEXT))
         (SETFILEPTR TEXT PIECEINFOCH#)
         (bind PC TYPECODE PCLEN OLDPC (DEFAULTCHARLOOKS _ (fetch (TEXTOBJ DEFAULTCHARLOOKS)
                                                              of TEXTOBJ))
               (OLDPARALOOKS _ (fetch (TEXTOBJ FMTSPEC) of TEXTOBJ)) for I from 1 to PCCOUNT
            do (SETQ PC NIL)                                 (* ; 
                        "This loop may not really read a piece, so we have to distinguish that case.")
               (SETQ PCLEN (\DWIN TEXT))
               (SETQ TYPECODE (\SMALLPIN TEXT))              (* ; "What kind of piece is it?")
               (SELECTC TYPECODE
                   (\PieceDescriptorPAGEFRAME                (* ; 
                                                             "This is page layout info for the file")
                        (AND TEXTOBJ (replace (TEXTOBJ TXTPAGEFRAMES) of TEXTOBJ with (
                                                                                TEDIT.GET.PAGEFRAMES1
                                                                                       TEXT))))
                   (\PieceDescriptorPARA                     (* ; 
                                                             "Reading a new set of paragraph looks.")
                        (CL:WHEN OLDPC                       (* ; 
                                                           "Mark the end of the preceding paragraph.")
                            (replace (PIECE PPARALAST) of OLDPC with T))
                        (SETQ OLDPARALOOKS (\TEDIT.GET.PARALOOKS1 TEXT))
                                                             (* ; 
                                                 "Get the new set of looks, for use by later pieces.")
                        (CL:WHEN TEXTOBJ                     (* ; 
                                          "Mark the document as containing paragraph formatting info")
                            (replace (TEXTOBJ FORMATTEDP) of TEXTOBJ with T)))
                   (\PieceDescriptorLOOKS                    (* ; 
                                  "New character looks.  Build a piece to describe those characters.")
                        (SETQ PC
                         (create PIECE
                                PCONTENTS _ TEXT
                                PFPOS _ CURFILECH#
                                PLEN _ PCLEN
                                PPARALOOKS _ OLDPARALOOKS
                                PTYPE _ THINFILE.PTYPE))     (* ; "Build the new piece")
                        (\TEDIT.GET.CHARLOOKS1 PC TEXT)      (* ; 
                                                             "Read the character looks for this guy.")
                        (add CURFILECH# (PLEN PC))           (* ; 
                                                             "And note the passing of characters.")
                        )
                   (\PieceDescriptorOBJECT                   (* ; 
   "It describes an object.  Read that, and perhaps some description of the charlooks to go with it.")
                        (SETQ PC
                         (create PIECE
                                PCONTENTS _ TEXT
                                PFPOS _ CURFILECH#
                                PLEN _ 1
                                PPARALOOKS _ OLDPARALOOKS
                                PTYPE _ THINFILE.PTYPE))
                        (TEDIT.GET.OBJECT1 (AND TEXTOBJ (fetch (TEXTOBJ STREAMHINT) of TEXTOBJ))
                               PC TEXT CURFILECH#)
                        (add CURFILECH# (fetch (PIECE PLEN) of PC))
                        [COND
                           ((NOT (ZEROP (BIN TEXT)))         (* ; 
                                      "There are new character looks for this object.  Read them in.")
                            (\DWIN TEXT)
                            (\WIN TEXT)                      (* ; 
                                              "Skip over the piece-type code we know has to be here.")
                            (\TEDIT.GET.CHARLOOKS1 PC TEXT))
                           (T                                (* ; 
                                                    "No new looks;  steal them from the prior piece.")
                              (replace (PIECE PLOOKS) of PC with (OR (AND OLDPC (PLOOKS OLDPC))
                                                                     DEFAULTCHARLOOKS])
                   (SHOULDNT "Impossible piece-type code in BUILD.PCTB"))
               (CL:WHEN PC
                   (\INSERTPIECE PC NIL TEXTOBJ)
                   (SETQ OLDPC PC))])

(TEDIT.GET.PAGEFRAMES1
  [LAMBDA (FILE)                                             (* jds " 1-Feb-85 14:55")
                                                             (* Read a bunch of page frames from 
                                                             the file, and return it.)
    (TEDIT.PARSE.PAGEFRAMES1 (READ FILE])

(\TEDIT.GET.CHARLOOKS1
  [LAMBDA (PC FILE)                                          (* ; "Edited  1-Aug-2022 12:04 by rmk")
                                                             (* ; "Edited 30-May-91 20:26 by jds")
                                                             (* Read a description of PC's 
                                                             CHARLOOKS from FILE.)
    (PROG (FONT STR NAME NAMELEN SIZE SUPER SUB PROPS STYLESTR USERSTR (LOOKS (create CHARLOOKS)))
          (replace (PIECE PLOOKS) of PC with LOOKS)
          (SETQ NAME (\ARBIN FILE))                          (* The font name)
          (SETQ SIZE (\SMALLPIN FILE))                       (* Size of the type, in points)
          (SETQ SUPER (\SMALLPIN FILE))                      (* Superscripting distance)
          (SETQ SUB (\SMALLPIN FILE))                        (* former Subscripting distance)
          (OR (ZEROP SUB)
              (SETQ SUPER (IMINUS SUB)))

         (* If this is an old file, it'll have a subscript value not zero.
         Let those past and do the right thing.)

          (COND
             ((NOT (ZEROP (BIN FILE)))                       (* This text is NEW.
                                                             Mark it so.)
              (replace (PIECE PNEW) of PC with T)))
          [COND
             ((NOT (ZEROP (BIN FILE)))                       (* There is style or user information 
                                                             to be read)
              (replace (CHARLOOKS CLSTYLE) of LOOKS with (OR (\ARBIN FILE)
                                                             0))
              (replace (CHARLOOKS CLUSERINFO) of LOOKS with (\ARBIN FILE]
          (SETQ PROPS (\SMALLPIN FILE))
          (with CHARLOOKS LOOKS [SETQ CLBOLD (NOT (ZEROP (LOGAND 512 PROPS]
                [SETQ CLITAL (NOT (ZEROP (LOGAND 256 PROPS]
                [SETQ CLULINE (NOT (ZEROP (LOGAND 128 PROPS]
                [SETQ CLOLINE (NOT (ZEROP (LOGAND 64 PROPS]
                [SETQ CLSTRIKE (NOT (ZEROP (LOGAND 32 PROPS]
                [SETQ CLSMALLCAP (NOT (ZEROP (LOGAND 16 PROPS]
                [SETQ CLPROTECTED (NOT (ZEROP (LOGAND 8 PROPS]
                [SETQ CLINVISIBLE (NOT (ZEROP (LOGAND 4 PROPS]
                [SETQ CLSELHERE (NOT (ZEROP (LOGAND 2 PROPS]
                [SETQ CLCANCOPY (NOT (ZEROP (LOGAND 1 PROPS]
                (SETQ CLSIZE SIZE)
                (SETQ CLOFFSET SUPER))
          (replace (CHARLOOKS CLFONT) of LOOKS with (COND
                                                       ((LISTP NAME)
                                                             (* This was a font class.
                                                             Restore it.)
                                                        (FONTCLASS (pop NAME)
                                                               NAME))
                                                       ((AND NAME (NOT (ZEROP SIZE)))
                                                        (FONTCREATE NAME SIZE
                                                               (COND
                                                                  ((AND (fetch (CHARLOOKS CLBOLD)
                                                                           of LOOKS)
                                                                        (fetch (CHARLOOKS CLITAL)
                                                                           of LOOKS))
                                                                   'BOLDITALIC)
                                                                  ((fetch (CHARLOOKS CLBOLD)
                                                                      of LOOKS)
                                                                   'BOLD)
                                                                  ((fetch (CHARLOOKS CLITAL)
                                                                      of LOOKS)
                                                                   'ITALIC])

(\TEDIT.GET.PARALOOKS1
  [LAMBDA (FILE)                                             (* ; "Edited  3-Mar-2023 23:20 by rmk")
                                                             (* ; "Edited  1-Aug-2022 12:04 by rmk")
                                                             (* ; "Edited 30-May-91 20:34 by jds")
                                                             (* ; 
                           "Read a paragraph format spec from the FILE, and return it for later use.")
    (PROG ((LOOKS (create FMTSPEC))
           TABFLG DEFTAB TABCOUNT TABS TABSPEC)
          (replace (FMTSPEC 1STLEFTMAR) of LOOKS with (\SMALLPIN FILE))
                                                             (* ; 
                                                    "Left margin for the first line of the paragraph")
          (replace (FMTSPEC LEFTMAR) of LOOKS with (\SMALLPIN FILE))
                                                             (* ; 
                                                          "Left margin for the rest of the paragraph")
          (replace (FMTSPEC RIGHTMAR) of LOOKS with (\SMALLPIN FILE))
                                                             (* ; "Right margin for the paragraph")
          (replace (FMTSPEC LEADBEFORE) of LOOKS with (\SMALLPIN FILE))
                                                             (* ; "Leading before the paragraph")
          (replace (FMTSPEC LEADAFTER) of LOOKS with (\SMALLPIN FILE))
                                                             (* ; "Lead after the paragraph")
          (replace (FMTSPEC LINELEAD) of LOOKS with (\SMALLPIN FILE))
                                                             (* ; "inter-line leading")
          (replace (FMTSPEC TABSPEC) of LOOKS with (SETQ TABSPEC (CONS DEFAULTTAB NIL)))
                                                             (* ; "Will be tab specs")
          (SETQ TABFLG (BIN FILE))
          (replace (FMTSPEC QUAD) of LOOKS with (SELECTC (BIN FILE)
                                                    (1 'LEFT)
                                                    (2 'RIGHT)
                                                    (3 'CENTERED)
                                                    (4 'JUSTIFIED)
                                                    (SHOULDNT)))
          (CL:UNLESS (ZEROP (LOGAND TABFLG 1))               (* ; "There are tabs to read")
              (SETQ DEFTAB (\SMALLPIN FILE))
              (SETQ TABCOUNT (BIN FILE))
              [SETQ TABS (for TAB# from 1 to TABCOUNT collect (create TAB
                                                                     TABX _ (\SMALLPIN FILE)
                                                                     TABKIND _
                                                                     (SELECTQ (BIN FILE)
                                                                         (0 'LEFT)
                                                                         (1 'RIGHT)
                                                                         (2 'CENTERED)
                                                                         (3 'DECIMAL)
                                                                         (SHOULDNT]
              (CL:UNLESS (ZEROP DEFTAB)
                     (RPLACA TABSPEC DEFTAB))
              (RPLACD TABSPEC TABS))
          (CL:UNLESS (ZEROP (LOGAND TABFLG 2))               (* ; 
                                                   "There are other paragraph parameters to be read.")
              (replace (FMTSPEC FMTSPECIALX) of LOOKS with (\SMALLPIN FILE))
                                                             (* ; 
                                                      "Special X location on page for this paragraph")
              (replace (FMTSPEC FMTSPECIALY) of LOOKS with (\SMALLPIN FILE))
              (replace (FMTSPEC FMTUSERINFO) of LOOKS with (\ARBIN FILE))
              (replace (FMTSPEC FMTPARATYPE) of LOOKS with (\ATMIN FILE))
              (replace (FMTSPEC FMTPARASUBTYPE) of LOOKS with (\ATMIN FILE))
              (replace (FMTSPEC FMTSTYLE) of LOOKS with (\ARBIN FILE))
              (replace (FMTSPEC FMTCHARSTYLES) of LOOKS with (\ARBIN FILE))
              (replace (FMTSPEC FMTNEWPAGEBEFORE) of LOOKS with (\ARBIN FILE))
              (replace (FMTSPEC FMTNEWPAGEAFTER) of LOOKS with (\ARBIN FILE)))
          (RETURN LOOKS])

(TEDIT.GET.OBJECT1
  [LAMBDA (STREAM PIECE FILE CURCH#)                         (* ; "Edited  6-Aug-2022 09:11 by rmk")
                                                            (* ; "Edited 12-Jun-90 18:17 by mitani")

    (* ;; "Get an object from the file")

    (* ;; "CURCH# = fileptr within the text section of the file where the object's text starts.")

    (PROG ((TEXTOBJ (fetch (TEXTSTREAM TEXTOBJ) of STREAM))
           FILEPTRSAVE NAMELEN GETFN OBJ)
          (SETQ GETFN (\ATMIN FILE))                         (* ; 
                                                             "The GETFN for this kind of IMAGEOBJ")
          (SETQ FILEPTRSAVE (GETFILEPTR FILE))               (* ; 
                                             "Save our file location thru the building of the object")
          (SETFILEPTR FILE CURCH#)
          (SETQ OBJ (READIMAGEOBJ FILE GETFN))
          (SETFILEPTR FILE FILEPTRSAVE)
          (replace (PIECE PCONTENTS) of PIECE with OBJ)
          (replace (PIECE PTYPE) of PIECE with OBJECT.PTYPE) (* ; "Just in case")
          [replace (PIECE PLOOKS) of PIECE with (COND
                                                   ((fetch (PIECE PREVPIECE) of PIECE)
                                                    (fetch (PIECE PLOOKS) of (fetch (PIECE PREVPIECE)
                                                                                of PIECE)))
                                                   (T (OR (fetch (TEXTOBJ DEFAULTCHARLOOKS)
                                                             of TEXTOBJ)
                                                          (\TEDIT.UNIQUIFY.CHARLOOKS (
                                                                                  CHARLOOKS.FROM.FONT
                                                                                      DEFAULTFONT)
                                                                 TEXTOBJ]
          (RETURN (fetch (PIECE PCONTENTS) of PIECE])
)



(* ;; "VERSION 0 Compatibility reading functions")

(DEFINEQ

(TEDIT.GET.PCTB0
  [LAMBDA (TEXT TEXTOBJ PCCOUNT START END)                   (* ; "Edited  3-Aug-2023 22:09 by rmk")
                                                             (* ; "Edited 26-Apr-2023 14:21 by rmk")
                                                             (* ; "Edited  5-Sep-2022 23:06 by rmk")
                                                             (* ; "Edited 22-May-92 18:01 by jds")

(* ;;; "READ OBSOLETE FORMATS OF TEDIT FILE")

    (LET (OLDPC TYPECODE PCLEN PIECEINFOCH# TSTREAM USERFILEFORMAT USERTEMP (CURFILECH# (OR START 0))
                )
         (SETFILEPTR TEXT (IDIFFERENCE (OR END (GETEOFPTR TEXT))
                                 8))
         (SETQ PIECEINFOCH# (\DWIN TEXT))
         (SETFILEPTR TEXT PIECEINFOCH#)
         (bind PC TYPECODE PCLEN OLDPC (DEFAULTPARALOOKS _ (fetch (TEXTOBJ FMTSPEC) of TEXTOBJ))
            for I from 1 to PCCOUNT
            do (SETQ PCLEN (\DWIN TEXT))
               (SETQ PC
                (create PIECE
                       PCONTENTS _ TEXT
                       PFPOS _ CURFILECH#
                       PLEN _ PCLEN
                       PREVPIECE _ OLDPC
                       PPARALOOKS _ DEFAULTPARALOOKS
                       PTYPE _ THINFILE.PTYPE))
               [COND
                  (OLDPC (replace (PIECE NEXTPIECE) of OLDPC with PC)
                         (replace (PIECE PPARALOOKS) of PC with (PPARALOOKS OLDPC]
               (SETQ TYPECODE (\SMALLPIN TEXT))
               (SELECTC TYPECODE
                   (\PieceDescriptorLOOKS 
                        (TEDIT.GET.CHARLOOKS0 PC TEXT)
                        (add CURFILECH# (fetch (PIECE PLEN) of PC)))
                   (\PieceDescriptorOBJECT 
                        (TEDIT.GET.OBJECT0 (AND TEXTOBJ (fetch (TEXTOBJ STREAMHINT) of TEXTOBJ))
                               PC TEXT CURFILECH#)
                        (add CURFILECH# (fetch (PIECE PLEN) of PC))
                        (replace (PIECE PLEN) of PC with 1)  (* ; 
                                            "Only object--can't be followed by either ot the others.")
                        )
                   (\PieceDescriptorPARA 
                        (AND OLDPC (replace (PIECE PPARALAST) of OLDPC with T))
                        (TEDIT.GET.PARALOOKS0 PC TEXT)
                        (replace (PIECE PLEN) of PC with (\DWIN TEXT))
                                                             (* ; 
                                                  "Set this piece's length from the character looks.")
                        (\SMALLPIN TEXT)                     (* ; 
                                                "Skip the piece-type code, since we know what's next")
                        (TEDIT.GET.CHARLOOKS0 PC TEXT)       (* ; "This document is 'formatted' .")
                        (add CURFILECH# (PLEN PC))
                        (AND TEXTOBJ (replace (TEXTOBJ FORMATTEDP) of TEXTOBJ with T)))
                   (SHOULDNT "Impossible piece-type code in BUILD.PCTB"))
               (SETQ OLDPC PC)
               (\INSERTPIECE PC NIL TEXTOBJ])

(TEDIT.GET.CHARLOOKS0
  [LAMBDA (PC FILE)                                          (* ; "Edited  1-Aug-2022 12:04 by rmk")
                                                             (* ; "Edited 30-May-91 20:26 by jds")
                                                             (* Put a description of LOOKS into 
                                                             FILE. LOOKS apply to characters CH1 
                                                             thru CHLIM-1)
    (PROG (FONT STR NAME NAMELEN SIZE SUPER SUB PROPS STYLESTR USERSTR (LOOKS (create CHARLOOKS)))
          (replace (PIECE PLOOKS) of PC with LOOKS)
          (SETQ NAMELEN (\SMALLPIN FILE))                    (* The length of the description which 
                                                             follows)
          [SETQ NAME (PACK (for I from 1 to NAMELEN collect (CHARACTER (BIN FILE]
                                                             (* The font name)
          (SETQ SIZE (\SMALLPIN FILE))                       (* Size of the type, in points)
          (SETQ SUPER (\SMALLPIN FILE))                      (* Superscripting distance)
          (SETQ SUB (\SMALLPIN FILE))                        (* former Subscripting distance)
          (OR (ZEROP SUB)
              (SETQ SUPER (IMINUS SUB)))

         (* If this is an old file, it'll have a subscript value not zero.
         Let those past and do the right thing.)

          (COND
             ((NOT (ZEROP (BIN FILE)))                       (* This text is NEW.
                                                             Mark it so.)
              (replace (PIECE PNEW) of PC with T)))
          [COND
             ((NOT (ZEROP (BIN FILE)))                       (* There is style or user information 
                                                             to be read)
              (SETQ STYLESTR (\STRINGIN FILE))
              (SETQ USERSTR (\STRINGIN FILE))
              (COND
                 ((NOT (ZEROP (NCHARS STYLESTR)))            (* There IS style info)
                  (replace (CHARLOOKS CLSTYLE) of LOOKS with (READ STYLESTR)))
                 (T (replace (CHARLOOKS CLSTYLE) of LOOKS with 0)))
              (COND
                 ((NOT (ZEROP (NCHARS USERSTR)))             (* There IS user info)
                  (replace (CHARLOOKS CLUSERINFO) of LOOKS with (READ USERSTR]
          (SETQ PROPS (\SMALLPIN FILE))
          (with CHARLOOKS LOOKS [SETQ CLBOLD (NOT (ZEROP (LOGAND 512 PROPS]
                [SETQ CLITAL (NOT (ZEROP (LOGAND 256 PROPS]
                [SETQ CLULINE (NOT (ZEROP (LOGAND 128 PROPS]
                [SETQ CLOLINE (NOT (ZEROP (LOGAND 64 PROPS]
                [SETQ CLSTRIKE (NOT (ZEROP (LOGAND 32 PROPS]
                [SETQ CLSMALLCAP (NOT (ZEROP (LOGAND 16 PROPS]
                [SETQ CLPROTECTED (NOT (ZEROP (LOGAND 8 PROPS]
                [SETQ CLINVISIBLE (NOT (ZEROP (LOGAND 4 PROPS]
                [SETQ CLSELHERE (NOT (ZEROP (LOGAND 2 PROPS]
                [SETQ CLCANCOPY (NOT (ZEROP (LOGAND 1 PROPS]
                (SETQ CLSIZE SIZE)
                (SETQ CLOFFSET SUPER))
          (replace (CHARLOOKS CLFONT) of LOOKS with (AND NAME (NOT (ZEROP SIZE))
                                                         (FONTCREATE NAME SIZE
                                                                (COND
                                                                   ((AND (fetch (CHARLOOKS CLBOLD)
                                                                            of LOOKS)
                                                                         (fetch (CHARLOOKS CLITAL)
                                                                            of LOOKS))
                                                                    'BOLDITALIC)
                                                                   ((fetch (CHARLOOKS CLBOLD)
                                                                       of LOOKS)
                                                                    'BOLD)
                                                                   ((fetch (CHARLOOKS CLITAL)
                                                                       of LOOKS)
                                                                    'ITALIC])

(TEDIT.GET.OBJECT0
  [LAMBDA (STREAM PIECE FILE CURCH#)                         (* ; "Edited  6-Aug-2022 15:57 by rmk")
                                                            (* ; "Edited 12-Jun-90 18:17 by mitani")

    (* ;; "Get an object from the file")

    (* ;; "CURCH# = fileptr within the text section of the file where the object's text starts.")

    (LET ((TEXTOBJ (fetch (TEXTSTREAM TEXTOBJ) of STREAM))
          FILEPTRSAVE NAMELEN GETFN OBJ)
         (SETQ GETFN (\ATMIN FILE))                          (* ; 
                                                             "The GETFN for this kind of IMAGEOBJ")
         (SETQ FILEPTRSAVE (GETFILEPTR FILE))                (* ; 
                                             "Save our file location thru the building of the object")
         (SETFILEPTR FILE CURCH#)
         (SETQ OBJ (READIMAGEOBJ FILE GETFN))
         (SETFILEPTR FILE FILEPTRSAVE)
         (replace (PIECE PCONTENTS) of PIECE with OBJ)
         [replace (PIECE PLOOKS) of PIECE with (COND
                                                  ((fetch (PIECE PREVPIECE) of PIECE)
                                                   (fetch (PIECE PLOOKS) of (fetch (PIECE PREVPIECE)
                                                                               of PIECE)))
                                                  (T (OR (fetch (TEXTOBJ DEFAULTCHARLOOKS)
                                                            of TEXTOBJ)
                                                         (\TEDIT.UNIQUIFY.CHARLOOKS (
                                                                                  CHARLOOKS.FROM.FONT
                                                                                     DEFAULTFONT)
                                                                TEXTOBJ]
         OBJ])

(TEDIT.GET.PARALOOKS0
  [LAMBDA (PC FILE)                                          (* ; "Edited  3-Mar-2023 23:14 by rmk")
                                                             (* ; "Edited  1-Aug-2022 12:04 by rmk")
                                                             (* ; "Edited 30-May-91 20:34 by jds")
                                                             (* ; 
                  "Put a description of LOOKS into FILE.  LOOKS apply to characters CH1 thru CHLIM-1")
    (PROG ((LOOKS (create FMTSPEC))
           TABFLG DEFTAB TABCOUNT TABS TABSPEC)
          (replace (PIECE PPARALOOKS) of PC with LOOKS)
          (replace (FMTSPEC 1STLEFTMAR) of LOOKS with (\SMALLPIN FILE))
                                                             (* ; 
                                                    "Left margin for the first line of the paragraph")
          (replace (FMTSPEC LEFTMAR) of LOOKS with (\SMALLPIN FILE))
                                                             (* ; 
                                                          "Left margin for the rest of the paragraph")
          (replace (FMTSPEC RIGHTMAR) of LOOKS with (\SMALLPIN FILE))
                                                             (* ; "Right margin for the paragraph")
          (replace (FMTSPEC LEADBEFORE) of LOOKS with (\SMALLPIN FILE))
                                                             (* ; "Leading before the paragraph")
          (replace (FMTSPEC LEADAFTER) of LOOKS with (\SMALLPIN FILE))
                                                             (* ; "Lead after the paragraph")
          (replace (FMTSPEC LINELEAD) of LOOKS with (\SMALLPIN FILE))
                                                             (* ; "inter-line leading")
          (replace (FMTSPEC TABSPEC) of LOOKS with (SETQ TABSPEC (CONS DEFAULTTAB NIL)))
                                                             (* ; "Will be tab specs")
          (SETQ TABFLG (BIN FILE))
          (replace (FMTSPEC QUAD) of LOOKS with (SELECTC (BIN FILE)
                                                    (1 'LEFT)
                                                    (2 'RIGHT)
                                                    (3 'CENTERED)
                                                    (4 'JUSTIFIED)
                                                    (SHOULDNT)))
          (COND
             ((NOT (ZEROP TABFLG))                           (* ; "There are tabs to read")
              (SETQ DEFTAB (\SMALLPIN FILE))
              (SETQ TABCOUNT (BIN FILE))
              [SETQ TABS (for TAB# from 1 to TABCOUNT collect (create TAB
                                                                     TABX _ (\SMALLPIN FILE)
                                                                     TABKIND _
                                                                     (SELECTQ (BIN FILE)
                                                                         (0 'LEFT)
                                                                         (1 'RIGHT)
                                                                         (2 'CENTERED)
                                                                         (3 'DECIMAL)
                                                                         (SHOULDNT]
              (OR (ZEROP DEFTAB)
                  (RPLACA TABSPEC DEFTAB))
              (RPLACD TABSPEC TABS])
)
(DECLARE%: DONTCOPY
  (FILEMAP (NIL (4213 37983 (TEDIT.GET 4223 . 10679) (TEDIT.FORMATTEDFILEP 10681 . 11424) (
\TEDIT.GET.FOREIGN.FILE 11426 . 13456) (\TEDIT.GET.UNFORMATTED.FILE 13458 . 16658) (
\TEDIT.GET.FORMATTED.FILE 16660 . 19840) (\TEDIT.FORMATTEDSTREAMP 19842 . 22799) (
\TEDIT.GET.UNFORMATTED.FILE.XCCS 22801 . 26898) (\TEDIT.GET.UNFORMATTED.FILE.UTF8 26900 . 31576) (
TEDIT.PARSE.PAGEFRAMES1 31578 . 33259) (\ARBIN 33261 . 33877) (\ATMIN 33879 . 34312) (\DWIN 34314 . 
34693) (\STRINGIN 34695 . 35299) (\TEDIT.FORMATTEDP1 35301 . 37009) (TEDIT.GET.PASSWORD 37011 . 37981)
) (37984 50546 (TEDIT.GET.PCTB3 37994 . 46811) (\TEDIT.CACHEFILE 46813 . 48021) (\TEDIT.UNIQUIFY.ALL 
48023 . 49451) (\INSERT-NSCLEARED-PIECE 49453 . 50544)) (50582 57937 (TEDIT.INCLUDE 50592 . 57125) (
TEDIT.RAW.INCLUDE 57127 . 57935)) (57971 99872 (TEDIT.PUT 57981 . 66762) (TEDIT.PUT.PCTB 66764 . 91571
) (TEDIT.PUT.PCTB.PLAINTEXT 91573 . 93642) (\TEDIT.PUTRESET 93644 . 93886) (TEDIT.PUT.PIECE.DESCRIPTOR
 93888 . 96532) (\ARBOUT 96534 . 97685) (\ATMOUT 97687 . 98198) (\DWOUT 98200 . 98479) (\STRINGOUT 
98481 . 98917) (\TEDIT-OPEN-FONT-FILE 98919 . 99870)) (99873 111301 (\TEDIT.GET.CHARLOOKS.LIST 99883
 . 100284) (\TEDIT.GET.SINGLE.CHARLOOKS 100286 . 104085) (\TEDIT.PUT.CHARLOOKS.LIST 104087 . 106024) (
\TEDIT.PUT.SINGLE.CHARLOOKS 106026 . 111299)) (111302 125922 (\TEDIT.GET.PARALOOKS.LIST 111312 . 
111721) (\TEDIT.GET.SINGLE.PARALOOKS 111723 . 118611) (\TEDIT.PUT.PARALOOKS.LIST 118613 . 119620) (
\TEDIT.PUT.SINGLE.PARALOOKS 119622 . 125920)) (126230 157399 (TEDIT.GET.PCTB2 126240 . 136269) (
\TEDIT.GET.CHARLOOKS.LIST2 136271 . 136674) (\TEDIT.GET.SINGLE.CHARLOOKS2 136676 . 140153) (
\TEDIT.PUT.SINGLE.PARALOOKS2 140155 . 144716) (\TEDIT.PUT.SINGLE.CHARLOOKS2 144718 . 149234) (
\TEDIT.GET.PARALOOKS.LIST2 149236 . 149639) (\TEDIT.GET.SINGLE.PARALOOKS2 149641 . 154460) (
\TEDIT.PUT.CHARLOOKS.LIST2 154462 . 156401) (\TEDIT.PUT.PARALOOKS.LIST2 156403 . 157397)) (157476 
174775 (TEDIT.GET.PCTB1 157486 . 163244) (TEDIT.GET.PAGEFRAMES1 163246 . 163602) (
\TEDIT.GET.CHARLOOKS1 163604 . 167875) (\TEDIT.GET.PARALOOKS1 167877 . 172658) (TEDIT.GET.OBJECT1 
172660 . 174773)) (174835 188344 (TEDIT.GET.PCTB0 174845 . 178195) (TEDIT.GET.CHARLOOKS0 178197 . 
182733) (TEDIT.GET.OBJECT0 182735 . 184688) (TEDIT.GET.PARALOOKS0 184690 . 188342)))))
STOP
