(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)

(FILECREATED "18-Aug-2023 21:48:19" {WMEDLEY}<library>TEDIT>TEDIT-LOOKS.;136 140563 

      :EDIT-BY rmk

      :CHANGES-TO (FNS \TEDIT.UNIQUIFY.CHARLOOKS \TEDIT.UNIQUIFY.PARALOOKS)

      :PREVIOUS-DATE "16-Aug-2023 22:12:40" {WMEDLEY}<library>TEDIT>TEDIT-LOOKS.;133)


(PRETTYCOMPRINT TEDIT-LOOKSCOMS)

(RPAQQ TEDIT-LOOKSCOMS
       (
        (* ;; "Support for Character looks (font, italic/bold, sub/superscripting, etc) and paragraph looks (margins, centered/justified, tabs, etc.)")

        (DECLARE%: EVAL@COMPILE DONTCOPY (EXPORT (RECORDS CHARLOOKS FMTSPEC)
                                                (MACROS \WORDSETA)
                                                (MACROS \SMALLPIN \SMALLPOUT ONOFF)))
        (INITRECORDS CHARLOOKS FMTSPEC PENDINGTAB)
        [DECLARE%: DONTEVAL@LOAD DOCOPY (VARS (TEDIT.TERMSA.FONTS NIL)
                                              (TEDIT.DEFAULT.CHARLOOKS (CHARLOOKS.FROM.FONT 
                                                                              DEFAULTFONT))
                                              (TEDIT.DEFAULT.FMTSPEC (\CREATE.TEDIT.DEFAULT.FMTSPEC))
                                                             (* ; "Original was (create FMTSPEC QUAD _ 'LEFT 1STLEFTMAR _ 0 LEFTMAR _ 0 RIGHTMAR _ 0 LEADBEFORE _ 0 LEADAFTER _ 0 LINELEAD _ 0 TABSPEC _ (CONS NIL NIL)).")
                                                             (* ; 
                                                    "Changed by yabu.fx, for SUNLOADUP without DWIM.")
                                              (TEDIT.TERMSA.FONTS NIL)
                                              (TEDIT.KNOWN.FONTS '((Classic 'CLASSIC)
                                                                   (Modern 'MODERN)
                                                                   (Terminal 'TERMINAL)
                                                                   (Titan 'TITAN)
                                                                   (Gacha 'GACHA)
                                                                   (Helvetica 'HELVETICA)
                                                                   (Times% Roman 'TIMESROMAN]
        (VARS (TEDIT.CHARLOOKS.FEATURES '(SUPERSCRIPT INVISIBLE SELECTPOINT PROTECTED SIZE FAMILY 
                                                OVERLINE STRIKEOUT UNDERLINE EXPANSION SLOPE WEIGHT))
              (TEDIT.FACE.MENU (\CREATE.TEDIT.FACE.MENU))
                                                             (* ; "Original was (create MENU ITEMS _ '(Bold Italic Bold%% Italic Regular) CENTERFLG _ T TITLE _ %"Face:%").")
                                                             (* ; 
                                                    "Changed by yabu.fx, for SUNLOADUP without DWIM.")
              (TEDIT.SIZE.MENU (\CREATE.TEDIT.SIZE.MENU))
                                                             (* ; "Original was (create MENU ITEMS _ '(6 7 8 9 10 11 12 14 18 24 30 36) CENTERFLG _ T MENUROWS _ 4 TITLE _ %"Type Size:%").")
                                                             (* ; 
                                                    "Changed by yabu.fx, for SUNLOADUP without DWIM.")
              )
        (GLOBALVARS TEDIT.CURRENT.FONT TEDIT.CURRENT.CHARLOOKS TEDIT.CURRENT.PARALOOKS 
               TEDIT.KNOWN.FONTS TEDIT.FACE.MENU TEDIT.SIZE.MENU TEDIT.DEFAULT.FONT 
               TEDIT.DEFAULT.CHARLOOKS TEDIT.DEFAULT.FMTSPEC TEDIT.TERMSA.FONTS)
        (ADDVARS (FONTVARS (TEDIT.PROMPT.FONT DEFAULTFONT)
                        (TEDIT.ICON.FONT MENUFONT)))
        (COMS                                                (* ; "Character looks functions")
              (FNS CHARLOOKS.FROM.FONT EQCLOOKS SAMECLOOKS \TEDIT.UNIQUIFY.CHARLOOKS TEDIT.CARETLOOKS
                   TEDIT.COPY.LOOKS \TEDIT.GET.CHARLOOKS \TEDIT.UNPARSE.CHARLOOKS.LIST 
                   TEDIT.MODIFYLOOKS TEDIT.NEW.FONT \TEDIT.PUT.CHARLOOKS \TEDIT.CARETLOOKS.VERIFY 
                   \TEDIT.CARETPIECE \TEDIT.GET.INSERT.CHARLOOKS \TEDIT.GET.TERMSA.WIDTHS 
                   \TEDIT.PARSE.CHARLOOKS.LIST \TEDIT.FLUSH.UNUSED.LOOKS)
              
              (* ;; "For making font substitutions")

              (FNS TEDIT.SUBLOOKS)
              (FNS \TEDIT.CHANGE.LOOKS TEDIT.LOOKS \TEDIT.LOOKS \TEDIT.FONTCOPY TEDIT.GET.LOOKS))
        (COMS                                                (* ; "Paragraph looks functions")
              (FNS \TEDIT.GET.PARALOOKS EQFMTSPEC \TEDIT.UNIQUIFY.PARALOOKS TEDIT.GET.PARALOOKS 
                   \TEDIT.PARSE.PARALOOKS.LIST TEDIT.PARALOOKS TEDIT.COPY.PARALOOKS 
                   \TEDIT.PUT.PARALOOKS \TEDIT.CONVERT.TO.FORMATTED \TEDIT.PARABOUNDS)
              
              (* ;; "For making paragraph-looks substitutions.")

              (FNS TEDIT.SUBPARALOOKS SAMEPARALOOKS))
        (COMS                                                (* ; "UNDO & History List stuff")
              (FNS TEDIT.UNDO.LOOKS TEDIT.UNDO.PARALOOKS))
        (COMS                                                (* ; "Revision-mark support")
              (FNS \TEDIT.MARK.REVISION))
        (COMS                                                (* ; 
                                                       "Added by yabu.fx, for SUNLOADUP without DWIM")
              (FNS \CREATE.TEDIT.DEFAULT.FMTSPEC \CREATE.TEDIT.FACE.MENU \CREATE.TEDIT.SIZE.MENU))
        (COMS                                                (* ; "Style-sheet support")
              (FNS \TEDIT.APPLY.STYLES \TEDIT.APPLY.PARASTYLES TEDIT.STYLESHEET TEDIT.POP.STYLESHEET
                   TEDIT.PUSH.STYLESHEET TEDIT.ADD.STYLESHEET)
              
              (* ;; "*TEDIT-PARASTYLE-CACHE* is an ALIST of  original char/para looks to styled char/para looks.  It is used to cache stylings, and is reset when the main stylesheet changes, and when we change paragraph looks, given paras that have private char styles.")

              
              (* ;; "*TEDIT-CURRENTPARA-CACHE* is NIL if we're not in a para that has private char styles, or is the FMTSPEC (styled!) for that para, if we are.  Used to decide when we have to flush *TEDIT-PARASTYLE-CACHE* at paragraph boundaries.  Mostly, this'll be NIL and not interesting.")

              
              (* ;; "*TEDIT-STYLESHEET-SAVE-LIST* is a list of points inside TEDIT.STYLES, so we can %"push%" new style sheets on the front, and %"pop%" them off sensibly.  This is the push-stack, in effect.  Used by TEDIT.ADD.STYLESHEET, TEDIT.PUSH.STYLESHEET, and TEDIT.POP.STYLESHEET")

              (INITVARS (TEDIT.STYLES))
              
              (* ;; "RMK 2023: Maybe this should be one of the later ones? Only partly implemented")

              (GLOBALVARS TEDIT.STYLES)
              (INITVARS (*TEDIT-PARASTYLE-CACHE*)
                     (*TEDIT-CURRENTPARA-CACHE*)
                     (*TEDIT-STYLESHEET-SAVE-LIST*))
              (GLOBALVARS *TEDIT-PARASTYLE-CACHE* *TEDIT-CURRENTPARA-CACHE* 
                     *TEDIT-STYLESHEET-SAVE-LIST*))))



(* ;; 
"Support for Character looks (font, italic/bold, sub/superscripting, etc) and paragraph looks (margins, centered/justified, tabs, etc.)"
)

(DECLARE%: EVAL@COMPILE DONTCOPY 
(* "FOLLOWING DEFINITIONS EXPORTED")(DECLARE%: EVAL@COMPILE

(DATATYPE CHARLOOKS (
                     (* ;; "Describes the appearance (%"Looks%") of characters in a TEdit document.")

                     CLFONT                                  (* ; 
                                                           "The font descriptor for these characters")
                     CLNAME

                     (* ;; "Name of the font (e.g., HELVETICA) THIS FIELD IS A HINT, OR FOR USE IN CHARLOOKS-BUILDING CODE.  USE FONTPROP TO GET THE RIGHT VALUE FROM CLFONT.")

                     CLSIZE                                  (* ; "Font size, in points")
                     (CLITAL FLAG)                           (* ; 
                                                           "T if the characters are italic, else NIL")
                     (CLBOLD FLAG)                           (* ; 
                                                             "T if the characters are bold, else NIL")
                     (CLULINE FLAG)                          (* ; 
                                                "T if the characters are to be underscored, else NIL")
                     (CLOLINE FLAG)                          (* ; 
                                                 "T if the characters are to be overscored, else NIL")
                     (CLSTRIKE FLAG)                         (* ; 
                                               "T if the characters are to be struck thru, else nil.")
                     CLOFFSET                                (* ; 
                         "A superscripting offset in points (?) else NIL (SUBSCRIPTING IF NEGATIVE.)")
                     (CLSMALLCAP FLAG)                       (* ; "T if small caps, else NIL")
                     (CLINVERTED FLAG)                       (* ; 
                                                 "T if the characters are to be shown white-on-black")
                     (CLPROTECTED FLAG)                      (* ; 
                                                             "T if chars can't be selected, else NIL")
                     (CLINVISIBLE FLAG)                      (* ; 
                                                     "T if TEDIT is to ignore these chars;  else NIL")
                     (CLSELHERE FLAG)

                     (* ;; "T if TEDIT can put selection after this char (for menu blanks) else NIL;  anything typed after this char will NOT BE PROTECTED.")

                     (CLCANCOPY FLAG)

                     (* ;; "T if this text can be selected for copying, even tho protected (it will become unprotected after the copy;  for Dribble/TTY interface)")

                     (CLUNBREAKABLE FLAG)                    (* ; 
                                                           "Spaces are treated as nonbreaking spaces")
                     CLSTYLE                                 (* ; 
                  "The style to be used in marking these characters;  overridden by the other fields")
                     CLUSERINFO                              (* ; 
                                                  "Any information that an outsider wants to include")
                     CLLEADER                                (* ; 
                                                      "For creating dotted and other kinds of leader")
                     CLRULES

                     (* ;; "For arbitrarily-places horizontal rules.  List of pairs, of (widthinpts  . offsetfrombaselineinpts).  Should be taken account of in ascent/descent calcs.")

                     (CLMARK FLAG)

                     (* ;; "Used for a mark-&-sweep of looks at PUT time -- T means this set of looks really IS in use in the document")

                     )
                    CLOFFSET _ 0)

(DATATYPE FMTSPEC (
                   (* ;; "Describe the paragraph formatting for a paragraph in a TEdit document.")

                   1STLEFTMAR                                (* ; 
                                                     "Left margin of the first line of the paragraph")
                   LEFTMAR                                   (* ; 
                                              "Left margin of the rest of the lines in the paragraph")
                   RIGHTMAR                                  (* ; "Right margin for the paragraph")
                   LEADBEFORE                                (* ; 
                                                "Leading above the paragraph's first line, in points")
                   LEADAFTER                                 (* ; 
                            "Leading below the paragraph's bottom line, in points.  NOT IMPLEMENTED.")
                   LINELEAD                                  (* ; 
      "Leading between lines, in points.  Actually, this space is added BELOW each line in the para.")
                   FMTBASETOBASE                             (* ; 
 "The baseline-to-baseline spacing between lines in this paragraph.  THIS OVERRIDES THE LINE LEADING")
                   TABSPEC                                   (* ; 
                         "The list of tabs for this paragraph, including CAR for a default tab width")
                   QUAD                                      (* ; 
                                 "How the para is formatted: one of LEFT, RIGHT, CENTERED, JUSTIFIED")
                   FMTSTYLE                                  (* ; 
                                                "The STYLE that controls this paragraph's appearance")
                   FMTCHARSTYLES                             (* ; "The characterstyles that control the appearance of characters in this para (maybe?  may be part of the fmtstyle.)")
                   FMTUSERINFO                               (* ; "Space for a PLIST of user info")
                   FMTSPECIALX                               (* ; 
                                   "A special horizontal location on the printed page for this para.")
                   FMTSPECIALY                               (* ; 
                                              "A special vertical location on the page for this para")
                   (FMTHEADINGKEEP FLAG)                     (* ; 
                                "This para should be kept with the top line or so of the next para..")
                   FMTPARATYPE                               (* ; 
                                             "What kind of para this is: TEXT, PAGEHEADING, whatever")
                   FMTPARASUBTYPE                            (* ; 
                                     "Sub type of the type, e.g., what KIND of page heading this is.")
                   FMTNEWPAGEBEFORE                          (* ; "Start a new box (if T) or back up the page formatting tree to make a new box of the type named in the value -- by going the least distance back up the tree, then back down until you find that kind of box.")
                   FMTNEWPAGEAFTER                           (* ; "Similarly")
                   FMTKEEP                                   (* ; 
                      "For information about how this paragraph is to be kept with other paragraphs.")
                   FMTCOLUMN                                 (* ; 
                                           "For setting up side-by-side paragraphs easily ala BravoX")
                   FMTVERTRULES                              (* ; 
                                                       "For Keeping track of vertical rules in force")
                   (FMTMARK FLAG)                            (* ; "Used to keep track of which PARALOOKSs are really being used -- a mark & collect is done just before a PUT, so that only 'real' PARALOOKSs make it into the file")
                                                             (* ; "Used for a mark&sweep of para looks at PUT time -- T means this looks really IS in use in the document, so it makes sense to save it on the file.")
                   (FMTHARDCOPY FLAG)                        (* ; 
                                         "T if this paragraph is to be displayed in hardcopy-format.")
                   FMTREVISED                                (* ; "T (or perhaps a revision level or revision-mark spec??) if this paragraph is to be marked as changed on output.")
                   FMTHARDCOPYSCALE)                         (* ; "The units-per-point (DSPSCALE) of the hardcopy stream that is simulated in hardcopy-display mode (FMTHARDCOPY=T)")
                  TABSPEC _ (CONS DEFAULTTAB NIL))
)

(/DECLAREDATATYPE 'CHARLOOKS
       '(POINTER POINTER POINTER FLAG FLAG FLAG FLAG FLAG POINTER FLAG FLAG FLAG FLAG FLAG FLAG FLAG
               POINTER POINTER POINTER POINTER FLAG)
       '((CHARLOOKS 0 POINTER)
         (CHARLOOKS 2 POINTER)
         (CHARLOOKS 4 POINTER)
         (CHARLOOKS 4 (FLAGBITS . 0))
         (CHARLOOKS 4 (FLAGBITS . 16))
         (CHARLOOKS 4 (FLAGBITS . 32))
         (CHARLOOKS 4 (FLAGBITS . 48))
         (CHARLOOKS 2 (FLAGBITS . 0))
         (CHARLOOKS 6 POINTER)
         (CHARLOOKS 6 (FLAGBITS . 0))
         (CHARLOOKS 6 (FLAGBITS . 16))
         (CHARLOOKS 6 (FLAGBITS . 32))
         (CHARLOOKS 6 (FLAGBITS . 48))
         (CHARLOOKS 2 (FLAGBITS . 16))
         (CHARLOOKS 2 (FLAGBITS . 32))
         (CHARLOOKS 2 (FLAGBITS . 48))
         (CHARLOOKS 8 POINTER)
         (CHARLOOKS 10 POINTER)
         (CHARLOOKS 12 POINTER)
         (CHARLOOKS 14 POINTER)
         (CHARLOOKS 14 (FLAGBITS . 0)))
       '16)

(/DECLAREDATATYPE 'FMTSPEC
       '(POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER 
               POINTER POINTER POINTER FLAG POINTER POINTER POINTER POINTER POINTER POINTER POINTER 
               FLAG FLAG POINTER POINTER)
       '((FMTSPEC 0 POINTER)
         (FMTSPEC 2 POINTER)
         (FMTSPEC 4 POINTER)
         (FMTSPEC 6 POINTER)
         (FMTSPEC 8 POINTER)
         (FMTSPEC 10 POINTER)
         (FMTSPEC 12 POINTER)
         (FMTSPEC 14 POINTER)
         (FMTSPEC 16 POINTER)
         (FMTSPEC 18 POINTER)
         (FMTSPEC 20 POINTER)
         (FMTSPEC 22 POINTER)
         (FMTSPEC 24 POINTER)
         (FMTSPEC 26 POINTER)
         (FMTSPEC 26 (FLAGBITS . 0))
         (FMTSPEC 28 POINTER)
         (FMTSPEC 30 POINTER)
         (FMTSPEC 32 POINTER)
         (FMTSPEC 34 POINTER)
         (FMTSPEC 36 POINTER)
         (FMTSPEC 38 POINTER)
         (FMTSPEC 40 POINTER)
         (FMTSPEC 40 (FLAGBITS . 0))
         (FMTSPEC 40 (FLAGBITS . 16))
         (FMTSPEC 42 POINTER)
         (FMTSPEC 44 POINTER))
       '46)
(DECLARE%: EVAL@COMPILE 

(PUTPROPS \WORDSETA DMACRO (OPENLAMBDA (A J V)
                             [CHECK (AND (ARRAYP A)
                                         (ZEROP (fetch (ARRAYP ORIG) of A))
                                         (EQ \ST.POS16 (fetch (ARRAYP TYP) of A]
                             (CHECK (IGREATERP (fetch (ARRAYP LENGTH) of A)
                                           J))
                             (\PUTBASE (fetch (ARRAYP BASE) of A)
                                    (IPLUS (fetch (ARRAYP OFFST) of A)
                                           J)
                                    V)))
)
(DECLARE%: EVAL@COMPILE 

(PUTPROPS \SMALLPIN MACRO (OPENLAMBDA (STREAM)
                            (SIGNED (create WORD
                                           HIBYTE _ (BIN STREAM)
                                           LOBYTE _ (BIN STREAM))
                                   BITSPERWORD)))

(PUTPROPS \SMALLPOUT MACRO (OPENLAMBDA (STREAM W)
                             (\BOUT STREAM (LOGAND 255 (LRSH W 8)))
                             (\BOUT STREAM (LOGAND W 255))))

(PUTPROPS ONOFF MACRO [OPENLAMBDA (VAL)
                        (COND
                           (VAL 'ON)
                           (T 'OFF])
)

(* "END EXPORTED DEFINITIONS")

)

(/DECLAREDATATYPE 'CHARLOOKS
       '(POINTER POINTER POINTER FLAG FLAG FLAG FLAG FLAG POINTER FLAG FLAG FLAG FLAG FLAG FLAG FLAG
               POINTER POINTER POINTER POINTER FLAG)
       '((CHARLOOKS 0 POINTER)
         (CHARLOOKS 2 POINTER)
         (CHARLOOKS 4 POINTER)
         (CHARLOOKS 4 (FLAGBITS . 0))
         (CHARLOOKS 4 (FLAGBITS . 16))
         (CHARLOOKS 4 (FLAGBITS . 32))
         (CHARLOOKS 4 (FLAGBITS . 48))
         (CHARLOOKS 2 (FLAGBITS . 0))
         (CHARLOOKS 6 POINTER)
         (CHARLOOKS 6 (FLAGBITS . 0))
         (CHARLOOKS 6 (FLAGBITS . 16))
         (CHARLOOKS 6 (FLAGBITS . 32))
         (CHARLOOKS 6 (FLAGBITS . 48))
         (CHARLOOKS 2 (FLAGBITS . 16))
         (CHARLOOKS 2 (FLAGBITS . 32))
         (CHARLOOKS 2 (FLAGBITS . 48))
         (CHARLOOKS 8 POINTER)
         (CHARLOOKS 10 POINTER)
         (CHARLOOKS 12 POINTER)
         (CHARLOOKS 14 POINTER)
         (CHARLOOKS 14 (FLAGBITS . 0)))
       '16)

(/DECLAREDATATYPE 'FMTSPEC
       '(POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER 
               POINTER POINTER POINTER FLAG POINTER POINTER POINTER POINTER POINTER POINTER POINTER 
               FLAG FLAG POINTER POINTER)
       '((FMTSPEC 0 POINTER)
         (FMTSPEC 2 POINTER)
         (FMTSPEC 4 POINTER)
         (FMTSPEC 6 POINTER)
         (FMTSPEC 8 POINTER)
         (FMTSPEC 10 POINTER)
         (FMTSPEC 12 POINTER)
         (FMTSPEC 14 POINTER)
         (FMTSPEC 16 POINTER)
         (FMTSPEC 18 POINTER)
         (FMTSPEC 20 POINTER)
         (FMTSPEC 22 POINTER)
         (FMTSPEC 24 POINTER)
         (FMTSPEC 26 POINTER)
         (FMTSPEC 26 (FLAGBITS . 0))
         (FMTSPEC 28 POINTER)
         (FMTSPEC 30 POINTER)
         (FMTSPEC 32 POINTER)
         (FMTSPEC 34 POINTER)
         (FMTSPEC 36 POINTER)
         (FMTSPEC 38 POINTER)
         (FMTSPEC 40 POINTER)
         (FMTSPEC 40 (FLAGBITS . 0))
         (FMTSPEC 40 (FLAGBITS . 16))
         (FMTSPEC 42 POINTER)
         (FMTSPEC 44 POINTER))
       '46)

(/DECLAREDATATYPE 'PENDINGTAB '(POINTER POINTER POINTER POINTER FULLXPOINTER POINTER)
       '((PENDINGTAB 0 POINTER)
         (PENDINGTAB 2 POINTER)
         (PENDINGTAB 4 POINTER)
         (PENDINGTAB 6 POINTER)
         (PENDINGTAB 8 FULLXPOINTER)
         (PENDINGTAB 10 POINTER))
       '12)
(DECLARE%: DONTEVAL@LOAD DOCOPY 

(RPAQQ TEDIT.TERMSA.FONTS NIL)

(RPAQ TEDIT.DEFAULT.CHARLOOKS (CHARLOOKS.FROM.FONT DEFAULTFONT))

(RPAQ TEDIT.DEFAULT.FMTSPEC (\CREATE.TEDIT.DEFAULT.FMTSPEC))

(RPAQQ TEDIT.TERMSA.FONTS NIL)

(RPAQQ TEDIT.KNOWN.FONTS
       ((Classic 'CLASSIC)
        (Modern 'MODERN)
        (Terminal 'TERMINAL)
        (Titan 'TITAN)
        (Gacha 'GACHA)
        (Helvetica 'HELVETICA)
        (Times% Roman 'TIMESROMAN)))
)

(RPAQQ TEDIT.CHARLOOKS.FEATURES (SUPERSCRIPT INVISIBLE SELECTPOINT PROTECTED SIZE FAMILY OVERLINE 
                                       STRIKEOUT UNDERLINE EXPANSION SLOPE WEIGHT))

(RPAQ TEDIT.FACE.MENU (\CREATE.TEDIT.FACE.MENU))

(RPAQ TEDIT.SIZE.MENU (\CREATE.TEDIT.SIZE.MENU))
(DECLARE%: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS TEDIT.CURRENT.FONT TEDIT.CURRENT.CHARLOOKS TEDIT.CURRENT.PARALOOKS TEDIT.KNOWN.FONTS 
       TEDIT.FACE.MENU TEDIT.SIZE.MENU TEDIT.DEFAULT.FONT TEDIT.DEFAULT.CHARLOOKS 
       TEDIT.DEFAULT.FMTSPEC TEDIT.TERMSA.FONTS)
)

(ADDTOVAR FONTVARS (TEDIT.PROMPT.FONT DEFAULTFONT)
                   (TEDIT.ICON.FONT MENUFONT))



(* ; "Character looks functions")

(DEFINEQ

(CHARLOOKS.FROM.FONT
  [LAMBDA (FONT)                                             (* ; "Edited 30-May-91 21:45 by jds")

         (* Create a CHARLOOKS from a font, filling in such fields as can be inferred from 
         the font descriptor.)

    (PROG ((LOOKS (create CHARLOOKS
                         CLFONT _ FONT)))
          (OR (FONTP FONT)
              (\ILLEGAL.ARG FONT))                           (* It HAS to be a font, first off.)
          (SELECTQ (CAR (FONTPROP FONT 'FACE))
              (BOLD (replace (CHARLOOKS CLBOLD) of LOOKS with T)
                    (replace (CHARLOOKS CLITAL) of LOOKS with NIL))
              (replace (CHARLOOKS CLBOLD) of LOOKS with NIL))(* Set the boldness bit, if it's a 
                                                             bold font.)
          (SELECTQ (CADR (FONTPROP FONT 'FACE))
              (ITALIC (replace (CHARLOOKS CLITAL) of LOOKS with T))
              (replace (CHARLOOKS CLITAL) of LOOKS with NIL))(* Set the italic bit, if it's italic)
          (with CHARLOOKS LOOKS (SETQ CLSIZE (FONTPROP FONT 'SIZE))
                                                             (* Grab the size from the font)
                (SETQ CLOFFSET 0)                            (* And let it be neither super-
                                                             nor subscripted.)
                )
          (RETURN LOOKS])

(EQCLOOKS
  [LAMBDA (CLOOK1 CLOOK2)                                    (* ; "Edited 24-Jul-2023 17:18 by rmk")
                                                             (* ; 
                                                        "Edited  1-Jun-93 11:49 by sybalsky:mv:envos")

    (* ;; "Given two sets of CHARLOOKS, are they effectively the same?")

    (OR (EQ CLOOK1 CLOOK2)
        (AND [OR (EQ (fetch (CHARLOOKS CLFONT) of CLOOK1)
                     (fetch (CHARLOOKS CLFONT) of CLOOK2))
                 (AND (type? FONTCLASS (ffetch (CHARLOOKS CLFONT) of CLOOK1))
                      (type? FONTCLASS (ffetch (CHARLOOKS CLFONT) of CLOOK2))
                      (EQ (ffetch FONTCLASSNAME of (ffetch (CHARLOOKS CLFONT) of CLOOK1))
                          (ffetch FONTCLASSNAME of (ffetch (CHARLOOKS CLFONT) of CLOOK2]
             (EQ (ffetch (CHARLOOKS CLPROTECTED) of CLOOK1)
                 (ffetch (CHARLOOKS CLPROTECTED) of CLOOK2))
             (EQ (ffetch (CHARLOOKS CLINVISIBLE) of CLOOK1)
                 (ffetch (CHARLOOKS CLINVISIBLE) of CLOOK2))
             (EQ (ffetch (CHARLOOKS CLSELHERE) of CLOOK1)
                 (ffetch (CHARLOOKS CLSELHERE) of CLOOK2))
             (EQ (ffetch (CHARLOOKS CLCANCOPY) of CLOOK1)
                 (ffetch (CHARLOOKS CLCANCOPY) of CLOOK2))
             (EQ (ffetch (CHARLOOKS CLULINE) of CLOOK1)
                 (ffetch (CHARLOOKS CLULINE) of CLOOK2))
             (EQ (ffetch (CHARLOOKS CLOLINE) of CLOOK1)
                 (ffetch (CHARLOOKS CLOLINE) of CLOOK2))
             (EQ (ffetch (CHARLOOKS CLINVERTED) of CLOOK1)
                 (ffetch (CHARLOOKS CLINVERTED) of CLOOK2))
             (EQ (ffetch (CHARLOOKS CLSTRIKE) of CLOOK1)
                 (ffetch (CHARLOOKS CLSTRIKE) of CLOOK2))
             (EQ (ffetch (CHARLOOKS CLOFFSET) of CLOOK1)
                 (ffetch (CHARLOOKS CLOFFSET) of CLOOK2))
             (EQ (ffetch (CHARLOOKS CLSMALLCAP) of CLOOK1)
                 (ffetch (CHARLOOKS CLSMALLCAP) of CLOOK2))
             (EQ (ffetch (CHARLOOKS CLSTYLE) of CLOOK1)
                 (ffetch (CHARLOOKS CLSTYLE) of CLOOK2))
             (EQ (ffetch (CHARLOOKS CLUNBREAKABLE) of CLOOK1)
                 (ffetch (CHARLOOKS CLUNBREAKABLE) of CLOOK2))
             (EQ (ffetch (CHARLOOKS CLUSERINFO) of CLOOK1)
                 (ffetch (CHARLOOKS CLUSERINFO) of CLOOK2])

(SAMECLOOKS
  [LAMBDA (CLOOK1 CLOOK2 FEATURES)                           (* ; "Edited 24-Jul-2023 17:17 by rmk")
                                                             (* ; "Edited 30-May-91 21:45 by jds")

    (* ;; "Predicate to determine if CLOOK1 and CLOOK2 are the same in all the characteristics listed in FEATURES")

    (for F in FEATURES always (SELECTQ F
                                  (FAMILY (EQ (FONTPROP (fetch (CHARLOOKS CLFONT) of CLOOK1)
                                                     'FAMILY)
                                              (FONTPROP (fetch (CHARLOOKS CLFONT) of CLOOK2)
                                                     'FAMILY)))
                                  (SIZE (EQ (FONTPROP (fetch (CHARLOOKS CLFONT) of CLOOK1)
                                                   'SIZE)
                                            (FONTPROP (fetch (CHARLOOKS CLFONT) of CLOOK2)
                                                   'SIZE)))
                                  (EXPANSION (EQ (FONTPROP (fetch (CHARLOOKS CLFONT) of CLOOK1)
                                                        'EXPANSION)
                                                 (FONTPROP (fetch (CHARLOOKS CLFONT) of CLOOK2)
                                                        'EXPANSION)))
                                  (SLOPE (EQ (FONTPROP (fetch (CHARLOOKS CLFONT) of CLOOK1)
                                                    'SLOPE)
                                             (FONTPROP (fetch (CHARLOOKS CLFONT) of CLOOK2)
                                                    'SLOPE)))
                                  (WEIGHT (EQ (FONTPROP (fetch (CHARLOOKS CLFONT) of CLOOK1)
                                                     'WEIGHT)
                                              (FONTPROP (fetch (CHARLOOKS CLFONT) of CLOOK2)
                                                     'WEIGHT)))
                                  (SUPERSCRIPT (EQ (fetch (CHARLOOKS CLOFFSET) of CLOOK1)
                                                   (fetch (CHARLOOKS CLOFFSET) of CLOOK2)))
                                  (INVISIBLE (EQ (fetch (CHARLOOKS CLINVISIBLE) of CLOOK1)
                                                 (fetch (CHARLOOKS CLINVISIBLE) of CLOOK2)))
                                  (SELECTPOINT (EQ (fetch (CHARLOOKS CLSELHERE) of CLOOK1)
                                                   (fetch (CHARLOOKS CLSELHERE) of CLOOK2)))
                                  (PROTECTED (EQ (fetch (CHARLOOKS CLPROTECTED) of CLOOK1)
                                                 (fetch (CHARLOOKS CLPROTECTED) of CLOOK2)))
                                  (OVERLINE (EQ (fetch (CHARLOOKS CLOLINE) of CLOOK1)
                                                (fetch (CHARLOOKS CLOLINE) of CLOOK2)))
                                  (STRIKEOUT (EQ (fetch (CHARLOOKS CLSTRIKE) of CLOOK1)
                                                 (fetch (CHARLOOKS CLSTRIKE) of CLOOK2)))
                                  (UNDERLINE (EQ (fetch (CHARLOOKS CLULINE) of CLOOK1)
                                                 (fetch (CHARLOOKS CLULINE) of CLOOK2)))
                                  (UNBREAKABLE (fetch (CHARLOOKS CLUNBREAKABLE) of CLOOK1)
                                               (fetch (CHARLOOKS CLUNBREAKABLE) of CLOOK2))
                                  (FACE (EQUAL (FONTPROP (fetch (CHARLOOKS CLFONT) of CLOOK1)
                                                      'FACE)
                                               (FONTPROP (fetch (CHARLOOKS CLFONT) of CLOOK2)
                                                      'FACE)))
                                  (ERROR (CONCAT F 
                                 " is an unknown feature of character looks.  Detected in SAMECLOOKS"
                                                ])

(\TEDIT.UNIQUIFY.CHARLOOKS
  [LAMBDA (NEWLOOK TEXTOBJ)                                  (* ; "Edited 18-Aug-2023 21:47 by rmk")
                                                             (* ; "Edited 15-Aug-2023 20:57 by rmk")
                                                             (* ; "Edited  3-Aug-2023 17:52 by rmk")
                                                             (* ; "Edited 30-May-91 21:40 by jds")

    (* ;; "Assure that there is only ONE of a given CHARLOOKS in the document--so that all instances of that set of looks share structure. When we get a hit, we move it to the front, hopefully more frequent looks will come earlier in the list.")

    (CL:WHEN NEWLOOK
        (for LOOKTAIL LOOK PREVTAIL on (GETTOBJ TEXTOBJ TXTCHARLOOKSLIST)
           do (SETQ LOOK (CAR LOOKTAIL))
              (CL:WHEN (EQCLOOKS NEWLOOK LOOK)
                  (CL:WHEN PREVTAIL                          (* ; "Not already in first position")
                      (RPLACD PREVTAIL (CDR LOOKTAIL))
                      (push (GETTOBJ TEXTOBJ TXTCHARLOOKSLIST)
                            LOOK))
                  (RETURN LOOK))
              (SETQ PREVTAIL LOOKTAIL) finally (push (GETTOBJ TEXTOBJ TXTCHARLOOKSLIST)
                                                     NEWLOOK)
                                             (RETURN NEWLOOK)))])

(TEDIT.CARETLOOKS
  [LAMBDA (STREAM LOOKS)                                     (* ; "Edited 28-May-2023 14:15 by rmk")
                                                             (* ; "Edited  6-Apr-2023 21:42 by rmk")
                                                             (* ; "Edited  8-Sep-2022 11:25 by rmk")
                                                             (* ; "Edited 30-May-91 21:40 by jds")

    (* ;; "Set the 'Caret looks' for a TEdit document, i.e., the looks that will be applied to newly-typed characters from here on.")

    (LET ((TEXTOBJ (TEXTOBJ STREAM)))                        (* ; 
                              "Parse up the looks he gave us, to make sure they're a valid CHARLOOKS")
         (change (fetch (TEXTOBJ CARETLOOKS) of TEXTOBJ)
                (\TEDIT.UNIQUIFY.CHARLOOKS (\TEDIT.CARETLOOKS.VERIFY TEXTOBJ (
                                                                          \TEDIT.PARSE.CHARLOOKS.LIST
                                                                              LOOKS DATUM TEXTOBJ))
                       TEXTOBJ])

(TEDIT.COPY.LOOKS
  [LAMBDA (STREAM SOURCE DEST)                               (* ; "Edited 18-Apr-2023 23:53 by rmk")
                                                             (* ; "Edited 22-Oct-2022 15:27 by rmk")
                                                             (* ; "Edited 22-Aug-2022 13:14 by rmk")
                                                             (* ; "Edited 30-May-91 21:43 by jds")

    (* ;; "Copy the CHARACTER LOOKS of one piece of text (actually, the first selected character) to another piece of text")

    (PROG ((TEXTOBJ (TEXTOBJ STREAM))
           LOOKS LEN)                                        (* ; 
                                           "get the character looks of the first character of SOURCE")
          [SETQ LOOKS (PLOOKS (if (FIXP SOURCE)
                                  then (\CHTOPC SOURCE TEXTOBJ)
                                elseif (type? SELECTION SOURCE)
                                  then (\SHOWSEL SOURCE NIL) (* ; 
                           "Turn off the source selection, so it doesn't hang around after the copy.")
                                       (\CHTOPC (fetch (SELECTION CH#) of SOURCE)
                                              (fetch (SELECTION SELTEXTOBJ) of SOURCE))
                                else (\ILLEGAL.ARG SOURCE]
          (COND
             ((type? SELECTION DEST)                         (* ; 
                                       "make sure that the destination selection is in this document")
              (CL:UNLESS (EQ TEXTOBJ (fetch (SELECTION SELTEXTOBJ) of DEST))
                     (\LISPERROR "Destination selection is not in stream " STREAM)))
             (T                                              (* ; 
                             "set the LEN arg for TEDIT.LOOKS to be 1 since we just have a char pos.")
                (SETQ LEN 1)))
          (TEDIT.LOOKS TEXTOBJ LOOKS DEST LEN])

(\TEDIT.GET.CHARLOOKS
  [LAMBDA (PC FILE LOOKSARRAY)                               (* ; "Edited 27-Jul-2023 11:19 by rmk")
                                                             (* ; "Edited  4-May-2023 12:18 by rmk")
                                                             (* ; "Edited 12-Oct-2022 14:24 by rmk")
                                                             (* ; "Edited 10-Oct-2022 16:33 by rmk")
                                                             (* ; "Edited  8-Sep-2022 23:04 by rmk")
                                                             (* ; "Edited  3-Aug-2022 08:59 by rmk")
                                                             (* ; "Edited  1-Aug-2022 12:04 by rmk")
                                                             (* ; "Edited 30-May-91 21:43 by jds")

(* ;;; "Set the PLOOKS for the current piece, PC, according to what the file says")

(* ;;; "The incoming PLEN field of this piece is the number of FILE BYTES taken to describe the piece.  This is adjusted for fat pieces, and at fat/thin boundaries, so that the outgoing PLEN is the number of characters.")

    (* ;; "NOTE:  FILE points to the position in the looks table, not the position of the text for this piece.  So, SETFILEPTR is needed to go look at the character bytes, to discard S shifting. And reset at the end (after having read the flags).")

    (* ;; "")

    (LET ((FLAGS (BIN FILE))
          FAT BYTE LOOKSFILEPOS)
         (replace (PIECE PLOOKS) of PC with (ELT LOOKSARRAY (\SMALLPIN FILE)))
         (SETQ LOOKSFILEPOS (GETFILEPTR FILE))
         (CL:UNLESS (ZEROP (LOGAND FLAGS 1))
             (replace (PIECE PNEW) of PC with T))
         (SETQ FAT (EQ 2 (LOGAND FLAGS 2)))
         (if FAT
             then (replace (PIECE PTYPE) of PC with FATFILE2.PTYPE)
                  (replace (PIECE PBYTESPERCHAR) of PC with 2)
           else (replace (PIECE PTYPE) of PC with THINFILE.PTYPE)
                (replace (PIECE PBYTESPERCHAR) of PC with 1))
         (SETFILEPTR FILE (PFPOS PC))

         (* ;; "No need to peek, we reset at the end")

         (if (EQ NSCHARSETSHIFT (BIN FILE))
             then (SETQ BYTE (BIN FILE))
                  (if (EQ NSCHARSETSHIFT BYTE)
                      then (CL:UNLESS FAT (SHOULDNT "FAT PIECE NOT NS-SHIFTING TO BYTE RUN"))
                           (if (EQ 0 (BIN FILE))
                               then (add (PFPOS PC)
                                         3)
                                    (change (PLEN PC)
                                           (FOLDLO (IDIFFERENCE DATUM 3)
                                                  2))
                             else (SHOULDNT "FAT NS RUN NOT IN FIRST PLANE"))
                    elseif (EQ 0 BYTE)
                      then                                   (* ; "Going to THIN CSET 0")
                           (add (PFPOS PC)
                                2)
                           (add (PLEN PC)
                                -2)
                    else 
                         (* ;; 
             "This could go to FATFILE1.PTYPE, even though we don't expect to see it in this format.")

                         (SHOULDNT "THIN NS RUN NOT IN CHARACTER SET 0"))
           elseif FAT
             then (change (PLEN PC)
                         (FOLDLO DATUM 2)))
         (SETFILEPTR FILE LOOKSFILEPOS])

(\TEDIT.UNPARSE.CHARLOOKS.LIST
  [LAMBDA (LOOKS)                                            (* ; "Edited 24-Jul-2023 17:28 by rmk")
                                                             (* ; "Edited 11-Feb-2023 14:51 by rmk")
                                                             (* ; "Edited 30-May-91 21:45 by jds")

    (* ;; "Convert a CHARLOOKS into an equivalent PList-form for external consumption")

    (LET (NEWLOOKS OFFSET)
         (SETQ NEWLOOKS
          (for PROP in (LIST (fetch (CHARLOOKS CLSTYLE) of LOOKS)
                             (fetch (CHARLOOKS CLUSERINFO) of LOOKS)
                             (ONOFF (fetch (CHARLOOKS CLINVERTED) of LOOKS))
                             (FONTPROP (fetch (CHARLOOKS CLFONT) of LOOKS)
                                    'WEIGHT)
                             (FONTPROP (fetch (CHARLOOKS CLFONT) of LOOKS)
                                    'SLOPE)
                             (FONTPROP (fetch (CHARLOOKS CLFONT) of LOOKS)
                                    'EXPANSION)
                             (ONOFF (fetch (CHARLOOKS CLULINE) of LOOKS))
                             (ONOFF (fetch (CHARLOOKS CLSTRIKE) of LOOKS))
                             (ONOFF (fetch (CHARLOOKS CLOLINE) of LOOKS))
                             (ONOFF (fetch (CHARLOOKS CLUNBREAKABLE) of LOOKS))
                             (FONTPROP (fetch (CHARLOOKS CLFONT) of LOOKS)
                                    'FAMILY)
                             (FONTPROP (fetch (CHARLOOKS CLFONT) of LOOKS)
                                    'SIZE)
                             (ONOFF (fetch (CHARLOOKS CLPROTECTED) of LOOKS))
                             (ONOFF (fetch (CHARLOOKS CLSELHERE) of LOOKS))
                             (ONOFF (fetch (CHARLOOKS CLINVISIBLE) of LOOKS))) as PROPNAME
             in '(STYLE USERINFO INVERTED WEIGHT SLOPE EXPANSION UNDERLINE STRIKEOUT OVERLINE 
                        UNBREAKABLE FAMILY SIZE PROTECTED SELECTPOINT INVISIBLE)
             join (LIST PROPNAME PROP)))
         (SETQ OFFSET (fetch (CHARLOOKS CLOFFSET) of LOOKS))
         (push NEWLOOKS (COND
                           ((IGREATERP OFFSET 0)
                            'SUPERSCRIPT)
                           ((ILESSP OFFSET 0)
                            'SUBSCRIPT)
                           (T 'SUPERSCRIPT))
               (IABS (OR OFFSET 0)))
         NEWLOOKS])

(TEDIT.MODIFYLOOKS
  [LAMBDA (LINE STARTX DS LOOKS LINEBASEY)                   (* ; "Edited 27-May-2023 12:11 by rmk")
                                                             (* ; "Edited 24-Sep-2022 11:12 by rmk")
                                                             (* ; "Edited 30-May-91 21:45 by jds")

    (* ;; "Modify the screen to allow for underlining, etc.  Also, restore the vertical offset to the baseline.")

    (LET ((CURX (DSPXPOSITION NIL DS))
          (CURY (DSPYPOSITION NIL DS))
          (FONT (fetch (CHARLOOKS CLFONT) of LOOKS)))
         (CL:WHEN (fetch (CHARLOOKS CLULINE) of LOOKS)       (* ; "It's underlined.")
             (MOVETO STARTX (ADD1 (IDIFFERENCE (IPLUS CURY)
                                         (GETLD LINE LTRUEDESCENT)))
                    DS)
             (RELDRAWTO (IDIFFERENCE CURX STARTX)
                    0 1 'PAINT DS))
         (CL:WHEN (fetch (CHARLOOKS CLOLINE) of LOOKS)       (* ; "Over-line")
             (MOVETO STARTX [IPLUS CURY (SUB1 (FONTPROP FONT 'ASCENT]
                    DS)
             (RELDRAWTO (IDIFFERENCE CURX STARTX)
                    0 1 'PAINT DS))
         (CL:WHEN (fetch (CHARLOOKS CLSTRIKE) of LOOKS)      (* ; "Struck-thru")
             (MOVETO STARTX (IPLUS CURY (IQUOTIENT (FONTPROP FONT 'ASCENT)
                                               3))
                    DS)
             (RELDRAWTO (IDIFFERENCE CURX STARTX)
                    0 1 'PAINT DS))
         (CL:WHEN (fetch (CHARLOOKS CLINVERTED) of LOOKS)    (* ; "Inverse video")
             (BITBLT NIL NIL NIL DS STARTX (IDIFFERENCE CURY (FONTPROP FONT 'DESCENT))
                    (IDIFFERENCE CURX STARTX)
                    (FONTPROP FONT 'HEIGHT)
                    'TEXTURE
                    'INVERT BLACKSHADE))
         (MOVETO CURX LINEBASEY DS])

(TEDIT.NEW.FONT
  [LAMBDA (TEXTOBJ)                                          (* jds " 8-Feb-85 11:27")
    (PROG [(NAME (\TEDIT.MAKEFILENAME (TEDIT.GETINPUT TEXTOBJ "Name of font:  "]
          (AND NAME [SETQ TEDIT.KNOWN.FONTS (NCONC1 TEDIT.KNOWN.FONTS (LIST NAME (KWOTE (U-CASE
                                                                                         NAME]
               (RETURN (U-CASE NAME])

(\TEDIT.PUT.CHARLOOKS
  [LAMBDA (FILE CH1 CHLIM LOOKS OLDPC EDITSTENTATIVE LOOKSHARRAY)
                                                             (* ; "Edited 24-Jul-2023 17:21 by rmk")
                                                             (* ; "Edited  8-Sep-2022 22:54 by rmk")
                                                             (* ; "Edited 30-May-91 21:45 by jds")

    (* ;; "Put a description of LOOKS into FILE.  LOOKS apply to characters CH1 thru CHLIM-1")

    (\DWOUT FILE (IDIFFERENCE CHLIM CH1))                    (* ; "The length of this run of looks")
    (\SMALLPOUT FILE \PieceDescriptorLOOKS)                  (* ; 
                                                             "Mark this as setting the piece's looks")
    [\BOUT FILE (LOGOR (COND
                          ((AND EDITSTENTATIVE OLDPC (PNEW OLDPC))
                                                             (* ; 
                                                 "If this is a tentative edit, save the newness flag")
                           1)
                          (T                                 (* ; "Otherwise, don't bother")
                             0))
                       (COND
                          ((AND OLDPC (EQ FATFILE2.PTYPE (PTYPE OLDPC)))
                                                             (* ; 
                                         "If this piece contains fat characters, remember that fact.")
                           2)
                          (T                                 (* ; "Otherwise, don't bother")
                             0]                              (* ; "The index into the list of fonts")
    (\SMALLPOUT FILE (GETHASH LOOKS LOOKSHARRAY])

(\TEDIT.CARETLOOKS.VERIFY
  [LAMBDA (TEXTOBJ NEWLOOKS)                                 (* ; "Edited  3-Aug-2023 22:29 by rmk")
                                                             (* ; "Edited 30-May-91 21:41 by jds")

    (* ;; "Check with the user's CARETLOOKSFN to see if he wants to make changes")

    (LET ((CARETFN (TEXTPROP TEXTOBJ 'CARETLOOKSFN))
          LOOKS)
         (SETQ LOOKS (AND CARETFN (APPLY* CARETFN NEWLOOKS TEXTOBJ)))
         (COND
            ((EQ LOOKS 'DON'T)                               (* ; "He said not to change the looks.")
             (OR (GETTOBJ TEXTOBJ CARETLOOKS)
                 (GETTOBJ TEXTOBJ DEFAULTCHARLOOKS)))
            (LOOKS (\TEDIT.UNIQUIFY.CHARLOOKS LOOKS TEXTOBJ))
            (T 
               (* ;; "No guidance so return the looks unmodified.")

               NEWLOOKS])

(\TEDIT.CARETPIECE
  [LAMBDA (TEXTOBJ)                                          (* ; "Edited  6-Apr-2023 21:32 by rmk")
    (\CHTOPC (TEDIT.GETPOINT TEXTOBJ)
           TEXTOBJ])

(\TEDIT.GET.INSERT.CHARLOOKS
  [LAMBDA (TEXTOBJ SEL)                                      (* ; "Edited  3-Aug-2023 22:39 by rmk")
                                                             (* ; "Edited  9-Oct-2022 13:57 by rmk")
                                                             (* ; "Edited 22-Aug-2022 13:21 by rmk")
                                                             (* ; "Edited 30-May-91 21:45 by jds")

    (* ;; "Given a default source of charlooks, set us up some good ones.  IN particular, reset CLPROTECTED if need be.")

    (LET ([CH# (IMAX 1 (IMIN (TEXTLEN TEXTOBJ)
                             (SELECTQ (GETSEL SEL POINT)
                                 (LEFT (GETSEL SEL CH#))
                                 (RIGHT (SUB1 (GETSEL SEL CHLIM)))
                                 (SHOULDNT]
          PC LOOKS)
         (CL:WHEN (SETQ PC (\CHTOPC CH# TEXTOBJ))
             (SETQ LOOKS (PLOOKS PC)))
         (CL:UNLESS LOOKS                                    (* ; 
                                                      "No piece to take looks from;  use the default")
             (SETQ LOOKS (OR (GETTOBJ TEXTOBJ DEFAULTCHARLOOKS)
                             (\TEDIT.UNIQUIFY.CHARLOOKS (CHARLOOKS.FROM.FONT DEFAULTFONT)
                                    TEXTOBJ))))
         (CL:WHEN (fetch (CHARLOOKS CLPROTECTED) of LOOKS)   (* ; 
                                                           "Unprotect by copying to a new CHARLOOKS.")
             (SETQ LOOKS (\TEDIT.UNIQUIFY.CHARLOOKS (create CHARLOOKS
                                                       using (PLOOKS PC)
                                                             CLPROTECTED _ NIL CLSELHERE _ NIL)
                                TEXTOBJ)))
         (\TEDIT.UNIQUIFY.CHARLOOKS (\TEDIT.CARETLOOKS.VERIFY TEXTOBJ LOOKS)
                TEXTOBJ])

(\TEDIT.GET.TERMSA.WIDTHS
  [LAMBDA (TERMSA FONT)                                      (* jds "22-OCT-83 21:36")

         (* If the guy is using a terminal table, get an updated set of widths to reflect 
         that.)

    (PROG ((NWIDTHS (ARRAY 256 'SMALLP 0 0)))
          (for I from 0 to 255 do (\WORDSETA NWIDTHS I (TEDIT.CHARWIDTH I FONT TERMSA)))
          (RETURN NWIDTHS])

(\TEDIT.PARSE.CHARLOOKS.LIST
  [LAMBDA (NLOOKS OLOOKS TEXTOBJ)                            (* ; "Edited 24-Jul-2023 17:24 by rmk")
                                                             (* ; "Edited 30-May-91 21:46 by jds")

    (* ;; "Takes a CHARLOOKS, a FONTDESCRIPTOR, or an ALST-format looks spec and parses it into a new CHARLOOKS.  If OLOOKS is given, it will be used as the base for modifications;  otherwise, TEDIT.DEFAULT.CHARLOOKS will be.")

    (PROG (FAMILY FONT FACE SIZE SIZEINC PROT SELHERE ULINE OLINE STRIKE SUPER OFFSETINC WEIGHT SLOPE
                 EXPANSION SUB INVISIBLE UNBREAKABLE STYLE STYLESET UISET USERINFO NEWLOOKS NEWFONT 
                 NEWPCLOOKS INVERSEVIDEO)                    (* ; 
                                                           "Construct the set of new looks to apply:")
          (COND
             ((type? CHARLOOKS NLOOKS)                       (* ; 
                                      "We've already got a made-up set of looks;  we'll just use it.")
              (RETURN NLOOKS))
             ((FONTP NLOOKS)                                 (* ; 
                            "It was a font spec.  Make the looks be that font, otherwise unmodified.")
              (RETURN (CHARLOOKS.FROM.FONT NLOOKS)))
             (T                                              (* ; 
                                              "We got an AList -- prepare looks changes in that form")
                (SETQ FONT (LISTGET NLOOKS 'FONT))
                (SETQ FAMILY (LISTGET NLOOKS 'FAMILY))
                (SETQ FACE (LISTGET NLOOKS 'FACE))
                (SETQ SIZE (LISTGET NLOOKS 'SIZE))
                (SETQ PROT (LISTGET NLOOKS 'PROTECTED))
                (SETQ SELHERE (LISTGET NLOOKS 'SELECTPOINT))
                (SETQ ULINE (LISTGET NLOOKS 'UNDERLINE))
                (SETQ OLINE (LISTGET NLOOKS 'OVERLINE))
                (SETQ INVERSEVIDEO (LISTGET NEWLOOKS 'INVERTED))
                (SETQ STRIKE (LISTGET NLOOKS 'STRIKEOUT))
                (SETQ INVISIBLE (LISTGET NLOOKS 'INVISIBLE))
                (SETQ SUPER (LISTGET NLOOKS 'SUPERSCRIPT))
                (SETQ SUB (LISTGET NLOOKS 'SUBSCRIPT))
                (SETQ WEIGHT (LISTGET NLOOKS 'WEIGHT))
                (SETQ SLOPE (LISTGET NLOOKS 'SLOPE))
                (SETQ EXPANSION (LISTGET NLOOKS 'EXPANSION))
                (SETQ OFFSETINC (LISTGET NLOOKS 'OFFSETINCREMENT))
                (SETQ SIZEINC (LISTGET NLOOKS 'SIZEINCREMENT))
                (SETQ UNBREAKABLE (LISTGET NLOOKS 'UNBREAKABLE))
                (SETQ STYLE (LISTGET NLOOKS 'STYLE))
                (SETQ STYLESET (FMEMB 'STYLE NLOOKS))
                (SETQ USERINFO (LISTGET NLOOKS 'USERINFO))
                (SETQ UISET (FMEMB 'USERINFO NLOOKS))
                (SETQ NLOOKS NIL)                            (* ; "Tell later code to use NEWLOOKS.")
                (SETQ NEWLOOKS NIL)
                [COND
                   (FAMILY (SETQ NEWLOOKS (CONS 'FAMILY (CONS FAMILY NEWLOOKS]
                [COND
                   (FONT (SETQ FONT (CAR (NLSETQ (\DTEST FONT 'FONTDESCRIPTOR]
                [COND
                   [(OR WEIGHT SLOPE EXPANSION)              (* ; 
                                                   "Setting one of these inhibits the FACE parameter")
                    [AND WEIGHT (SETQ NEWLOOKS (CONS 'WEIGHT (CONS WEIGHT NEWLOOKS]
                    [AND SLOPE (SETQ NEWLOOKS (CONS 'SLOPE (CONS SLOPE NEWLOOKS]
                    (AND EXPANSION (SETQ NEWLOOKS (CONS 'EXPANSION (CONS EXPANSION NEWLOOKS]
                   (FACE (SETQ NEWLOOKS (CONS 'FACE (CONS FACE NEWLOOKS]
                [COND
                   (SIZE (SETQ NEWLOOKS (CONS 'SIZE (CONS SIZE NEWLOOKS]
                [SETQ NEWPCLOOKS
                 (COND
                    [OLOOKS (create CHARLOOKS using OLOOKS CLFONT _
                                                    (SETQ NEWFONT (OR FONT (\TEDIT.FONTCOPY
                                                                            (fetch (CHARLOOKS CLFONT)
                                                                               of OLOOKS)
                                                                            NEWLOOKS TEXTOBJ]
                    (T (create CHARLOOKS
                          using TEDIT.DEFAULT.CHARLOOKS CLFONT _
                                (SETQ NEWFONT
                                 (OR FONT (\TEDIT.FONTCOPY
                                           (fetch (CHARLOOKS CLFONT) of TEDIT.DEFAULT.CHARLOOKS)
                                           (COND
                                              (SIZEINC       (* ; 
                                     "There's a size change requested.  Fix up the size of the font.")
                                                     (LISTPUT NEWLOOKS 'SIZE
                                                            (IPLUS (FONTPROP (fetch (CHARLOOKS CLFONT
                                                                                           )
                                                                                of 
                                                                              TEDIT.DEFAULT.CHARLOOKS
                                                                                    )
                                                                          'SIZE)
                                                                   SIZEINC))
                                                     NEWLOOKS)
                                              (T NEWLOOKS))
                                           TEXTOBJ]          (* ; "Give this piece its new looks")
                [replace (CHARLOOKS CLBOLD) of NEWPCLOOKS with (EQ 'BOLD (FONTPROP NEWFONT
                                                                                'WEIGHT]
                [replace (CHARLOOKS CLITAL) of NEWPCLOOKS with (EQ 'ITALIC (FONTPROP NEWFONT
                                                                                  'SLOPE]
                [AND PROT (replace (CHARLOOKS CLPROTECTED) of NEWPCLOOKS with (EQ PROT 'ON]
                [AND SELHERE (replace (CHARLOOKS CLSELHERE) of NEWPCLOOKS with (EQ SELHERE
                                                                                   'ON]
                [AND ULINE (replace (CHARLOOKS CLULINE) of NEWPCLOOKS with (EQ ULINE 'ON]
                [AND OLINE (replace (CHARLOOKS CLOLINE) of NEWPCLOOKS with (EQ OLINE 'ON]
                [AND STRIKE (replace (CHARLOOKS CLSTRIKE) of NEWPCLOOKS with (EQ STRIKE 'ON]
                [AND INVISIBLE (replace (CHARLOOKS CLINVISIBLE) of NEWPCLOOKS
                                  with (EQ INVISIBLE 'ON]
                [AND UNBREAKABLE (replace (CHARLOOKS CLUNBREAKABLE) of NEWPCLOOKS
                                    with (EQ UNBREAKABLE 'ON]
                [AND INVERSEVIDEO (replace (CHARLOOKS CLINVERTED) of NEWPCLOOKS
                                     with (EQ INVERSEVIDEO 'ON]
                (AND SUPER (replace (CHARLOOKS CLOFFSET) of NEWPCLOOKS with SUPER))
                (AND SUB (replace (CHARLOOKS CLOFFSET) of NEWPCLOOKS with (IMINUS SUB)))
                (AND STYLESET (replace (CHARLOOKS CLSTYLE) of NEWPCLOOKS with STYLE))
                (AND UISET (replace (CHARLOOKS CLUSERINFO) of NEWPCLOOKS with USERINFO))
                (AND OFFSETINC (replace (CHARLOOKS CLOFFSET) of NEWPCLOOKS
                                  with (IPLUS (OR (fetch (CHARLOOKS CLOFFSET) of NEWPCLOOKS)
                                                  0)
                                              OFFSETINC)))
                (replace (CHARLOOKS CLSIZE) of NEWPCLOOKS with (FONTPROP NEWFONT 'SIZE))
                (RETURN NEWPCLOOKS])

(\TEDIT.FLUSH.UNUSED.LOOKS
  [LAMBDA (TEXTOBJ)                                          (* ; "Edited 15-Aug-2023 22:11 by rmk")
                                                             (* ; "Edited 30-May-91 21:47 by jds")

    (* ;; "Run thru the CHARLOOKS and PARALOOKS lists for this document, and flush any looks that aren't being used in the document itself.")

    (LET ((CHARLOOKS (GETTOBJ TEXTOBJ TXTCHARLOOKSLIST))
          (PARALOOKS (GETTOBJ TEXTOBJ TXTPARALOOKSLIST)))

         (* ;; "Reset the in-use mark in all looks")

         (for LOOKS in CHARLOOKS do (replace (CHARLOOKS CLMARK) of LOOKS with NIL))
         (for LOOKS in PARALOOKS do (replace (FMTSPEC FMTMARK) of LOOKS with NIL))

         (* ;; "Run thru the pieces in the document, marking the looks that are really in use.")

         (for PC inpieces (\FIRSTPIECE TEXTOBJ) do (replace (CHARLOOKS CLMARK) of (PLOOKS PC)
                                                      with T)
                                                   (replace (FMTSPEC FMTMARK) of (PPARALOOKS PC)
                                                      with T))

         (* ;; "Keep only those char and para looks that ARE being used.")

         (SETTOBJ TEXTOBJ TXTCHARLOOKSLIST (for LOOKS in CHARLOOKS when (fetch (CHARLOOKS CLMARK)
                                                                           of LOOKS) collect LOOKS))
         (SETTOBJ TEXTOBJ TXTPARALOOKSLIST (for LOOKS in PARALOOKS when (fetch (FMTSPEC FMTMARK)
                                                                           of LOOKS) collect LOOKS])
)



(* ;; "For making font substitutions")

(DEFINEQ

(TEDIT.SUBLOOKS
  [LAMBDA (TEXTSTREAM OLDLOOKSLIST NEWLOOKSLIST)             (* ; "Edited 18-Apr-2023 23:53 by rmk")
                                                             (* ; "Edited 22-Aug-2022 13:06 by rmk")
                                                             (* ; "Edited 26-Apr-93 14:53 by jds")

(* ;;; "User entry to substitute one set of looks for another.  Goes through the whole textstream and whenever the looks match the characteristics of OLDLOOKSLIST which are specified, the characteristics listed in NEWLOOKSLIST are substituted.")

    (LET* ((OLDLOOKS (\TEDIT.PARSE.CHARLOOKS.LIST OLDLOOKSLIST))
           (NEWLOOKS (\TEDIT.PARSE.CHARLOOKS.LIST NEWLOOKSLIST))
           (TEXTOBJ (TEXTOBJ TEXTSTREAM))
           (SEL (fetch (TEXTOBJ SEL) of TEXTOBJ))
           (FIRSTPC (\CHTOPC 1 TEXTOBJ))
           (FEATURELIST (for A on OLDLOOKSLIST by (CDDR A) collect (CAR A)))
           CHANGEMADE)
          (\SHOWSEL SEL NIL)                                 (* ; "Turn off the selection, first.")
          [OR (ZEROP (fetch (TEXTOBJ TEXTLEN) of TEXTOBJ))
              (bind (CH# _ 1) for (PC _ FIRSTPC) while PC by (fetch (PIECE NEXTPIECE) of PC)
                 do (COND
                       ((SAMECLOOKS OLDLOOKS (fetch (PIECE PLOOKS) of PC)
                               FEATURELIST)
                        (replace (TEXTOBJ \DIRTY) of (TEXTOBJ TEXTSTREAM) with T)
                        (freplace (PIECE PLOOKS) of PC with (\TEDIT.UNIQUIFY.CHARLOOKS
                                                             (\TEDIT.PARSE.CHARLOOKS.LIST
                                                              NEWLOOKSLIST
                                                              (fetch (PIECE PLOOKS) of PC))
                                                             (TEXTOBJ TEXTSTREAM)))
                        (\TEDIT.MARK.LINES.DIRTY TEXTOBJ CH# (+ CH# (fetch (PIECE PLEN) of PC)))
                        (SETQ CHANGEMADE T)))
                    (add CH# (fetch (PIECE PLEN) of PC]
          (COND
             ((fetch (TEXTOBJ \WINDOW) of TEXTOBJ)
              (TEDIT.UPDATE.SCREEN TEXTOBJ)                  (* ; "Update the screen image")
              (\FIXSEL SEL TEXTOBJ)
              (\SHOWSEL SEL T)))
          (COND
             (CHANGEMADE 'Done)
             (T 'NoChangesMade])
)
(DEFINEQ

(\TEDIT.CHANGE.LOOKS
  [LAMBDA (TSTREAM NEWLOOKS SEL)                             (* ; "Edited 24-Jul-2023 17:20 by rmk")
                                                             (* ; "Edited 28-May-2023 14:38 by rmk")
                                                             (* ; "Edited 11-May-2023 12:59 by rmk")
                                                             (* ; "Edited 19-Apr-93 14:08 by jds")

(* ;;; "Internal programmatic interface to changing character looks.  DOES NOT CHANGE the current selection.")

(* ;;; 
"THIS FUNCTION AND \TEDIT.PARSE.CHARLOOKS.LIST MUST TRACK ONE ANOTHER, FOR THE P-LIST FORMAT..")

    (PROG ((TEXTOBJ (TEXTOBJ TSTREAM))
           FAMILY FONT FACE SIZE PROTECTED SELECTPOINT UNDERLINE OVERLINE STRIKEOUT INVERTED 
           UNBREAKABLE SUPERSCRIPT WEIGHT SLOPE SIZEINCREMENT OFFSETINCREMENT EXPANSION SUBSCRIPT 
           INVISIBLE FOOLOOKS NEWFONT STYLE STYLESET UISET USERINFO START-OF-PIECE SELPIECES)
                                                             (* ; 
                                                           "Construct the set of new looks to apply:")
          (CL:UNLESS (type? CHARLOOKS NEWLOOKS)              (* ; 
                                      "We've already got a made-up set of looks;  we'll just use it.")
              [COND
                 ((FONTP NEWLOOKS)                           (* ; 
                                         "If it's a font descriptor, extract what we need from that.")
                  (SETQ FONT NEWLOOKS)
                  (SETQ NEWLOOKS NIL))
                 (T                                          (* ; 
                                              "We got an PList -- prepare looks changes in that form")
                                                             (* (for L on NEWLOOKS by CDDR do
                                                             (SET (CAR L) (CADR L))))
                    (SETQ FONT (LISTGET NEWLOOKS 'FONT))
                    (SETQ FAMILY (LISTGET NEWLOOKS 'FAMILY))
                    (SETQ FACE (LISTGET NEWLOOKS 'FACE))
                    (SETQ SIZE (LISTGET NEWLOOKS 'SIZE))
                    (SETQ PROTECTED (LISTGET NEWLOOKS 'PROTECTED))
                    (SETQ SELECTPOINT (LISTGET NEWLOOKS 'SELECTPOINT))
                    (SETQ UNDERLINE (LISTGET NEWLOOKS 'UNDERLINE))
                    (SETQ OVERLINE (LISTGET NEWLOOKS 'OVERLINE))
                    (SETQ UNBREAKABLE (LISTGET NEWLOOKS 'UNBREAKABLE))
                    (SETQ INVERTED (LISTGET NEWLOOKS 'INVERTED))
                    (SETQ STRIKEOUT (LISTGET NEWLOOKS 'STRIKEOUT))
                    (SETQ INVISIBLE (LISTGET NEWLOOKS 'INVISIBLE))
                    (SETQ SUPERSCRIPT (LISTGET NEWLOOKS 'SUPERSCRIPT))
                    (SETQ SUBSCRIPT (LISTGET NEWLOOKS 'SUBSCRIPT))
                    (SETQ WEIGHT (LISTGET NEWLOOKS 'WEIGHT))
                    (SETQ SLOPE (LISTGET NEWLOOKS 'SLOPE))
                    (SETQ EXPANSION (LISTGET NEWLOOKS 'EXPANSION))
                    (SETQ SIZEINCREMENT (LISTGET NEWLOOKS 'SIZEINCREMENT))
                    (SETQ OFFSETINCREMENT (LISTGET NEWLOOKS 'OFFSETINCREMENT))
                    (SETQ STYLE (LISTGET NEWLOOKS 'STYLE))
                    (SETQ STYLESET (FMEMB 'STYLE NEWLOOKS))
                    (SETQ USERINFO (LISTGET NEWLOOKS 'USERINFO))
                    (SETQ UISET (FMEMB 'USERINFO NEWLOOKS))
                    (SETQ NEWLOOKS NIL)                      (* ; "Tell later code to use FOOLOOKS")
                    (SETQ FOOLOOKS NIL)
                    (CL:WHEN FAMILY
                        (SETQ FOOLOOKS (CONS 'FAMILY (CONS FAMILY FOOLOOKS))))
                    (CL:WHEN FONT
                        (CL:UNLESS [OR (type? FONTCLASS FONT)
                                       (SETQ FONT (CAR (NLSETQ (\DTEST FONT 'FONTDESCRIPTOR]

                            (* ;; "Try converting it to a font--it might be a list or some such.")

                            (* ;; "Nothing doing--it isn't any of the reasonable forms, so punt.")

                            (TEDIT.PROMPTPRINT (CONCAT FONT " isn't a valid font descriptor.")
                                   T)
                            (RETURN)))
                    [COND
                       [(OR WEIGHT SLOPE EXPANSION)          (* ; 
                                                   "Setting one of these inhibits the FACE parameter")
                        [AND WEIGHT (SETQ FOOLOOKS (CONS 'WEIGHT (CONS WEIGHT FOOLOOKS]
                        [AND SLOPE (SETQ FOOLOOKS (CONS 'SLOPE (CONS SLOPE FOOLOOKS]
                        (AND EXPANSION (SETQ FOOLOOKS (CONS 'EXPANSION (CONS EXPANSION FOOLOOKS]
                       (FACE (SETQ FOOLOOKS (CONS 'FACE (CONS FACE FOOLOOKS]
                    (COND
                       [SIZE (SETQ FOOLOOKS (CONS 'SIZE (CONS SIZE FOOLOOKS]
                       (SIZEINCREMENT (SETQ FOOLOOKS (CONS 'SIZE (CONS 'BOGUSSIZE FOOLOOKS])
          (CL:WHEN NEWLOOKS

              (* ;; "For the case of a completely specified looks, do the following outside the loop: Make sure that this isn't a duplicate set of looks for this document.")

              (SETQ NEWLOOKS (\TEDIT.UNIQUIFY.CHARLOOKS NEWLOOKS TEXTOBJ)))
          (replace (TEXTOBJ \DIRTY) of TEXTOBJ with T)       (* ; "Mark the document changed.")
          (SETQ SELPIECES (\SELPIECES SEL))
          (for PC NEWPCLOOKS OLDLOOKSLIST OLDPCLOOKS (CARETPC _ (\TEDIT.CARETPIECE TEXTOBJ))
             inselpieces SELPIECES
             do (SETQ OLDPCLOOKS (PLOOKS PC))
                (SETQ OLDLOOKSLIST (NCONC1 OLDLOOKSLIST OLDPCLOOKS)) 
                                                             (* ; "Save old looks for the Undo.")
                [COND
                   (NEWLOOKS                                 (* ; 
                                                             "We got a CHARLOOKS in.  Just use it")
                          (replace (PIECE PLOOKS) of PC with NEWLOOKS))
                   (T                                        (* ; 
                                                         "Otherwise, we have to override selectively")
                      (SETQ NEWPCLOOKS (create CHARLOOKS using OLDPCLOOKS))
                      (replace (PIECE PLOOKS) of PC with NEWPCLOOKS)

                      (* ;; "If a size increment is specified, then add to the newspecs arg for fontcopy, the entry with the incremented size from the current font.")

                      (SETQ NEWFONT (OR FONT (\TEDIT.FONTCOPY
                                              (fetch (CHARLOOKS CLFONT) of OLDPCLOOKS)
                                              (COND
                                                 (SIZEINCREMENT
                                                             (* ; 
                                     "There's a size change requested.  Fix up the size of the font.")
                                                  (LISTPUT FOOLOOKS 'SIZE
                                                         (IPLUS (FONTPROP (fetch (CHARLOOKS CLFONT)
                                                                             of OLDPCLOOKS)
                                                                       'SIZE)
                                                                SIZEINCREMENT))
                                                  FOOLOOKS)
                                                 (T FOOLOOKS))
                                              TEXTOBJ)))
                      (replace (CHARLOOKS CLFONT) of NEWPCLOOKS with NEWFONT)
                                                             (* ; "Give this piece its new looks")
                      [replace (CHARLOOKS CLBOLD) of NEWPCLOOKS with (EQ 'BOLD (FONTPROP NEWFONT
                                                                                      'WEIGHT]
                      [replace (CHARLOOKS CLITAL) of NEWPCLOOKS with (EQ 'ITALIC (FONTPROP
                                                                                  NEWFONT
                                                                                  'SLOPE]
                      [AND PROTECTED (replace (CHARLOOKS CLPROTECTED) of NEWPCLOOKS
                                        with (EQ PROTECTED 'ON]
                      [AND SELECTPOINT (replace (CHARLOOKS CLSELHERE) of NEWPCLOOKS
                                          with (EQ SELECTPOINT 'ON]
                      [AND UNDERLINE (replace (CHARLOOKS CLULINE) of NEWPCLOOKS
                                        with (EQ UNDERLINE 'ON]
                      [AND OVERLINE (replace (CHARLOOKS CLOLINE) of NEWPCLOOKS
                                       with (EQ OVERLINE 'ON]
                      [AND STRIKEOUT (replace (CHARLOOKS CLSTRIKE) of NEWPCLOOKS
                                        with (EQ STRIKEOUT 'ON]
                      [AND INVISIBLE (replace (CHARLOOKS CLINVISIBLE) of NEWPCLOOKS
                                        with (EQ INVISIBLE 'ON]
                      (AND SUPERSCRIPT (replace (CHARLOOKS CLOFFSET) of NEWPCLOOKS with SUPERSCRIPT))
                      (AND SUBSCRIPT (replace (CHARLOOKS CLOFFSET) of NEWPCLOOKS with (IMINUS 
                                                                                            SUBSCRIPT
                                                                                             )))
                      (AND STYLESET (replace (CHARLOOKS CLSTYLE) of NEWPCLOOKS with STYLE))
                      (AND UISET (replace (CHARLOOKS CLUSERINFO) of NEWPCLOOKS with USERINFO))
                      [AND UNBREAKABLE (replace (CHARLOOKS CLUNBREAKABLE) of NEWPCLOOKS
                                          with (EQ UNBREAKABLE 'ON]
                      (AND OFFSETINCREMENT (replace (CHARLOOKS CLOFFSET) of NEWPCLOOKS
                                              with (IPLUS (OR (fetch (CHARLOOKS CLOFFSET)
                                                                 of NEWPCLOOKS)
                                                              0)
                                                          OFFSETINCREMENT)))
                      [AND INVERTED (replace (CHARLOOKS CLINVERTED) of NEWPCLOOKS
                                       with (EQ INVERTED 'ON]
                      (replace (CHARLOOKS CLSIZE) of NEWPCLOOKS with (FONTPROP NEWFONT 'SIZE))

                      (* ;; "Assure that each set of looks appears only once in the world.")

                      (replace (PIECE PLOOKS) of PC with (\TEDIT.UNIQUIFY.CHARLOOKS NEWPCLOOKS 
                                                                TEXTOBJ]
                (CL:WHEN (EQ PC CARETPC)
                       (TEDIT.CARETLOOKS TEXTOBJ NEWPCLOOKS))
             finally (\TEDIT.CONVERT.TO.FORMATTED TEXTOBJ)
                   (\TEDIT.MARK.LINES.DIRTY TEXTOBJ SEL)
                   (CL:WHEN (fetch (TEXTOBJ \WINDOW) of TEXTOBJ)
                       (\SHOWSEL (fetch (TEXTOBJ SEL) of TEXTOBJ)
                              NIL)
                       (TEDIT.RESET.EXTEND.PENDING.DELETE (fetch (TEXTOBJ SEL) of TEXTOBJ))
                       (TEDIT.UPDATE.SCREEN TEXTOBJ)         (* ; "Update the screen image")
                       (\FIXSEL (fetch (TEXTOBJ SEL) of TEXTOBJ)
                              TEXTOBJ)
                       (\SHOWSEL (fetch (TEXTOBJ SEL) of TEXTOBJ)
                              T))
                   (\TEDIT.HISTORYADD TEXTOBJ (create TEDITHISTORYEVENT
                                                     THACTION _ :Looks
                                                     THLEN _ (GETSEL SEL DCH)
                                                     THCH# _ (GETSEL SEL CH#)
                                                     THFIRSTPIECE _ (fetch (SELPIECES SPFIRST)
                                                                       of SELPIECES)
                                                     THOLDINFO _ OLDLOOKSLIST])

(TEDIT.LOOKS
  [LAMBDA (TSTREAM NEWLOOKS SELORCH# LEN)                    (* ; "Edited 28-May-2023 13:56 by rmk")
                                                             (* ; "Edited 24-May-2023 23:12 by rmk")
                                                             (* ; "Edited 30-May-91 21:41 by jds")

    (* ;; "Programmatic interface for character looks in TEdit.  Applies to the LEN characters starting at SELORCH#, or the characters selected by SELORCH# if it is a selection.  Nothing to do if the selection isn't set.  POINT is used only to set the caret looks.")

    (LET ((TEXTOBJ (TEXTOBJ TSTREAM))
          SEL)

         (* ;; "Ignores LEN if SELORCH# is a selection")

         [SETQ SEL (COND
                      ((type? SELECTION SELORCH#)
                       SELORCH#)
                      (SELORCH# (TEDIT.SETSEL TSTREAM SELORCH# LEN 'LEFT))
                      (T (fetch (TEXTOBJ SEL) of TEXTOBJ]
         (CL:WHEN (GETSEL SEL SET)
             (if (AND (IGREATERP (GETSEL SEL DCH)
                             0)
                      (ILEQ (GETSEL SEL CH#)
                            (TEXTLEN TEXTOBJ)))
                 then (\TEDIT.CHANGE.LOOKS TSTREAM NEWLOOKS SEL)
               else 
                    (* ;; "Out of bounds or maybe a point selection, no text to change. Punt out after setting the caret looks.  Old code did not set the history, should we?")

                    (TEDIT.CARETLOOKS TSTREAM NEWLOOKS)))])

(\TEDIT.LOOKS
  [LAMBDA (TEXTOBJ)                                          (* ; "Edited  8-May-2023 21:21 by rmk")
                                                             (* ; "Edited 30-May-91 21:41 by jds")

    (* ;; "Handler for the middle-button menu's LOOKS button.  Brings up 3 menus, for font, face, and size.  Then calls TEDIT.LOOKS to make the requested changes.")

    (LET* ((SEL (fetch (TEXTOBJ SEL) of TEXTOBJ))
           (REGION (WINDOWPROP (CAR (fetch (TEXTOBJ \WINDOW) of TEXTOBJ))
                          'REGION))
           (POS (create POSITION
                       XCOORD _ (fetch LEFT of REGION)
                       YCOORD _ (fetch TOP of REGION)))
           FONT FACE SIZE NEWLOOKS)
          (CL:WHEN (ILEQ (fetch (SELECTION CH#) of SEL)
                         (TEXTLEN TEXTOBJ))                  (* ; "Otherwise, nothing to change")
              (COND
                 ((fetch (SELECTION SET) of SEL)
                  (CURSORPOSITION (CREATEPOSITION 0 (fetch HEIGHT of REGION))
                         (CAR (fetch (TEXTOBJ \WINDOW) of TEXTOBJ)))
                  (SETQ FONT (MENU (create MENU
                                          TITLE _ "Font:"
                                          ITEMS _ (NCONC1 (COPY TEDIT.KNOWN.FONTS)
                                                         (LIST 'Other (LIST (FUNCTION TEDIT.NEW.FONT)
                                                                            TEXTOBJ)))
                                          CENTERFLG _ T)
                                   POS))                     (* ; "Set the font for the new text.")
                  (SETQ FACE (SELECTQ (MENU TEDIT.FACE.MENU POS)
                                 (Bold 'BOLD)
                                 (Italic 'ITALIC)
                                 (Bold% Italic 'BOLDITALIC)
                                 (Regular 'STANDARD)
                                 NIL))                       (* ; "Set the face (bold, etc.)")
                  (SETQ SIZE (MENU TEDIT.SIZE.MENU POS))     (* ; "Set the type size")
                                                             (* ; 
                                                           "Construct the set of new looks to apply:")
                  (SETQ NEWLOOKS (AND FONT (LIST 'FAMILY FONT)))
                  (CL:WHEN FACE
                      (SETQ NEWLOOKS (CONS 'FACE (CONS FACE NEWLOOKS))))
                  (CL:WHEN SIZE
                      (SETQ NEWLOOKS (CONS 'SIZE (CONS SIZE NEWLOOKS))))
                  (CL:WHEN NEWLOOKS                          (* ; "There's something to do.")
                      (TEDIT.LOOKS TEXTOBJ NEWLOOKS SEL)))
                 (T (TEDIT.PROMPTPRINT TEXTOBJ "Please select some text to modify" T))))])

(\TEDIT.FONTCOPY
  [LAMBDA (FONT NEWSPECS TEXTOBJ)                            (* jds "26-Dec-84 16:06")
                                                             (* Cloak FONTCOPY in protection for 
                                                             the user from an unavailable font.)
    (COND
       ((NULL NEWSPECS)                                      (* No changes specified.
                                                             Punt it.)
        FONT)
       [(CAR (NLSETQ (FONTCOPY FONT NEWSPECS]
       (T (PROG [(OLDFAMILY (FONTPROP FONT 'FAMILY))
                 (OLDSIZE (FONTPROP FONT 'SIZE]
                (TEDIT.PROMPTPRINT TEXTOBJ [CONCAT "Can't find font " (OR (LISTGET NEWSPECS
                                                                                 'FAMILY)
                                                                          OLDFAMILY)
                                                  " "
                                                  (OR (LISTGET NEWSPECS 'SIZE)
                                                      OLDSIZE)
                                                  " "
                                                  (OR (LISTGET NEWSPECS 'FACE)
                                                      (FONTPROP FONT 'FACE]
                       T))
          FONT])

(TEDIT.GET.LOOKS
  [LAMBDA (TEXTOBJ CH#ORCHARLOOKS)                           (* ; "Edited 21-Jun-2023 11:10 by rmk")
                                                             (* ; "Edited 22-Aug-2022 13:14 by rmk")
                                                             (* ; "Edited 30-May-91 21:44 by jds")

    (* ;; "Returns as a property list the looks denoted by CH#ORCHARLOOKS.")

    (SETQ TEXTOBJ (TEXTOBJ TEXTOBJ))
    (\TEDIT.UNPARSE.CHARLOOKS.LIST (if (type? CHARLOOKS CH#ORCHARLOOKS)
                                       then                  (* ; "Unparse the given looks.")
                                            CH#ORCHARLOOKS
                                     elseif (ZEROP (TEXTLEN TEXTOBJ))
                                       then                  (* ; 
                                                            "Empty document, use extant caret looks.")
                                            (fetch (TEXTOBJ CARETLOOKS) of TEXTOBJ)
                                     else (fetch (PIECE PLOOKS)
                                             of (\CHTOPC (OR (FIXP CH#ORCHARLOOKS)
                                                             (GETSEL (if (type? SELECTION 
                                                                                CH#ORCHARLOOKS)
                                                                         then CH#ORCHARLOOKS
                                                                       elseif (NULL CH#ORCHARLOOKS)
                                                                         then (TEXTSEL TEXTOBJ)
                                                                       else (\ILLEGAL.ARG 
                                                                                   CH#ORCHARLOOKS))
                                                                    CH#))
                                                       TEXTOBJ])
)



(* ; "Paragraph looks functions")

(DEFINEQ

(\TEDIT.GET.PARALOOKS
  [LAMBDA (FILE PARAHASH)                                    (* ; "Edited 18-Dec-88 17:47 by jds")

    (* ;; "Read a paragraph format spec from the FILE, and return it for later use.")

    (* ;; "Paragraph format # of 0 indicates an end-of-file dummy, used to preserve the paralooks of EOF para break.")

    (LET ((LOOKS# (\SMALLPIN FILE)))
         (COND
            ((ZEROP LOOKS#)
             NIL)
            (T (ELT PARAHASH LOOKS#])

(EQFMTSPEC
  [LAMBDA (PARALOOK1 PARALOOK2)                              (* ; 
                                                        "Edited  2-Jul-93 21:32 by sybalskY:MV:ENVOS")

    (* ;; "Given two sets of FMTSPECS, are they effectively the same?")

    (OR (EQ PARALOOK1 PARALOOK2)
        (AND (EQ (fetch (FMTSPEC QUAD) of PARALOOK1)
                 (fetch (FMTSPEC QUAD) of PARALOOK2))
             (EQ (ffetch (FMTSPEC FMTNEWPAGEBEFORE) of PARALOOK1)
                 (ffetch (FMTSPEC FMTNEWPAGEBEFORE) of PARALOOK2))
             (EQ (ffetch (FMTSPEC FMTNEWPAGEAFTER) of PARALOOK1)
                 (ffetch (FMTSPEC FMTNEWPAGEAFTER) of PARALOOK2))
             (EQ (ffetch (FMTSPEC FMTSTYLE) of PARALOOK1)
                 (ffetch (FMTSPEC FMTSTYLE) of PARALOOK2))
             (EQ (ffetch (FMTSPEC FMTSPECIALX) of PARALOOK1)
                 (ffetch (FMTSPEC FMTSPECIALX) of PARALOOK2))
             (EQ (ffetch (FMTSPEC FMTSPECIALY) of PARALOOK1)
                 (ffetch (FMTSPEC FMTSPECIALY) of PARALOOK2))
             (EQ (ffetch (FMTSPEC FMTHEADINGKEEP) of PARALOOK1)
                 (ffetch (FMTSPEC FMTHEADINGKEEP) of PARALOOK2))
             (EQ (ffetch (FMTSPEC FMTKEEP) of PARALOOK1)
                 (ffetch (FMTSPEC FMTKEEP) of PARALOOK2))
             (EQ (ffetch (FMTSPEC FMTPARATYPE) of PARALOOK1)
                 (ffetch (FMTSPEC FMTPARATYPE) of PARALOOK2))
             (EQ (ffetch (FMTSPEC FMTPARASUBTYPE) of PARALOOK1)
                 (ffetch (FMTSPEC FMTPARASUBTYPE) of PARALOOK2))
             (EQ (ffetch (FMTSPEC FMTHARDCOPY) of PARALOOK1)
                 (ffetch (FMTSPEC FMTHARDCOPY) of PARALOOK2))
             (EQ (ffetch (FMTSPEC FMTREVISED) of PARALOOK1)
                 (ffetch (FMTSPEC FMTREVISED) of PARALOOK2))
             (EQ (ffetch (FMTSPEC FMTCOLUMN) of PARALOOK1)
                 (ffetch (FMTSPEC FMTCOLUMN) of PARALOOK2))
             (EQP (ffetch (FMTSPEC 1STLEFTMAR) of PARALOOK1)
                  (ffetch (FMTSPEC 1STLEFTMAR) of PARALOOK2))
             (EQP (ffetch (FMTSPEC LEFTMAR) of PARALOOK1)
                  (ffetch (FMTSPEC LEFTMAR) of PARALOOK2))
             (EQP (ffetch (FMTSPEC RIGHTMAR) of PARALOOK1)
                  (ffetch (FMTSPEC RIGHTMAR) of PARALOOK2))
             (EQP (ffetch (FMTSPEC LEADBEFORE) of PARALOOK1)
                  (ffetch (FMTSPEC LEADBEFORE) of PARALOOK2))
             (EQP (ffetch (FMTSPEC LEADAFTER) of PARALOOK1)
                  (ffetch (FMTSPEC LEADAFTER) of PARALOOK2))
             (EQP (ffetch (FMTSPEC LINELEAD) of PARALOOK1)
                  (ffetch (FMTSPEC LINELEAD) of PARALOOK2))
             (EQP (ffetch (FMTSPEC FMTBASETOBASE) of PARALOOK1)
                  (ffetch (FMTSPEC FMTBASETOBASE) of PARALOOK2))
             (EQUAL (ffetch (FMTSPEC FMTUSERINFO) of PARALOOK1)
                    (ffetch (FMTSPEC FMTUSERINFO) of PARALOOK2))
             (EQUAL (ffetch (FMTSPEC FMTCHARSTYLES) of PARALOOK1)
                    (ffetch (FMTSPEC FMTCHARSTYLES) of PARALOOK2))
             (EQUALALL (ffetch (FMTSPEC TABSPEC) of PARALOOK1)
                    (ffetch (FMTSPEC TABSPEC) of PARALOOK2])

(\TEDIT.UNIQUIFY.PARALOOKS
  [LAMBDA (NEWLOOK TEXTOBJ)                                  (* ; "Edited 18-Aug-2023 21:48 by rmk")
                                                             (* ; "Edited 30-May-91 21:41 by jds")

    (* ;; "Assure that there is only ONE of a given PARALOOKS in the document--so that all instances of that set of looks share structure. When we get a hit, we move it to the front, hopefully more frequent looks will come earlier in the list.")

    (for LOOKTAIL LOOK PREVTAIL on (GETTOBJ TEXTOBJ TXTPARALOOKSLIST)
       do (SETQ LOOK (CAR LOOKTAIL))
          (CL:WHEN (EQFMTSPEC NEWLOOK LOOK)
              (CL:WHEN PREVTAIL                              (* ; "Not already in first position")
                  (RPLACD PREVTAIL (CDR LOOKTAIL))
                  (push (GETTOBJ TEXTOBJ TXTPARALOOKSLIST)
                        LOOK))
              (RETURN LOOK))
          (SETQ PREVTAIL LOOKTAIL) finally (push (GETTOBJ TEXTOBJ TXTPARALOOKSLIST)
                                                 NEWLOOK)
                                         (RETURN NEWLOOK])

(TEDIT.GET.PARALOOKS
  [LAMBDA (TSTREAM SELORCH#)                                 (* ; "Edited 22-Jun-2023 00:02 by rmk")
                                                             (* ; "Edited 11-Feb-2023 14:55 by rmk")
                                                             (* ; "Edited 30-May-91 21:44 by jds")

    (* ;; "Return a proplist of paragraph formatting information about the characters specified.")

    (LET* [(TEXTOBJ (TEXTOBJ TSTREAM))
           (PC (\CHTOPC (OR (FIXP SELORCH#)
                            (GETSEL (if (type? SELECTION SELORCH#)
                                        then SELORCH#
                                      elseif (NULL SELORCH#)
                                        then (TEXTSEL TEXTOBJ)
                                      else (\ILLEGAL.ARG SELORCH#))
                                   CH#))
                      TEXTOBJ))
           (FMTSPEC (CL:IF PC
                        (PPARALOOKS PC)
                        (fetch (TEXTOBJ FMTSPEC) of TEXTOBJ))]
          (for PROP in (LIST (fetch (FMTSPEC QUAD) of FMTSPEC)
                             (fetch (FMTSPEC 1STLEFTMAR) of FMTSPEC)
                             (fetch (FMTSPEC LEFTMAR) of FMTSPEC)
                             (fetch (FMTSPEC RIGHTMAR) of FMTSPEC)
                             (fetch (FMTSPEC LEADBEFORE) of FMTSPEC)
                             (fetch (FMTSPEC LEADAFTER) of FMTSPEC)
                             (fetch (FMTSPEC LINELEAD) of FMTSPEC)
                             (fetch (FMTSPEC FMTBASETOBASE) of FMTSPEC)
                             (fetch (FMTSPEC TABSPEC) of FMTSPEC)
                             (fetch (FMTSPEC FMTSTYLE) of FMTSPEC)
                             (fetch (FMTSPEC FMTCHARSTYLES) of FMTSPEC)
                             (fetch (FMTSPEC FMTUSERINFO) of FMTSPEC)
                             (fetch (FMTSPEC FMTSPECIALX) of FMTSPEC)
                             (fetch (FMTSPEC FMTSPECIALY) of FMTSPEC)
                             (fetch (FMTSPEC FMTPARATYPE) of FMTSPEC)
                             (fetch (FMTSPEC FMTPARASUBTYPE) of FMTSPEC)
                             (ONOFF (fetch (FMTSPEC FMTNEWPAGEBEFORE) of FMTSPEC))
                             (ONOFF (fetch (FMTSPEC FMTNEWPAGEAFTER) of FMTSPEC))
                             (ONOFF (fetch (FMTSPEC FMTHEADINGKEEP) of FMTSPEC))
                             (fetch (FMTSPEC FMTKEEP) of FMTSPEC)
                             (ONOFF (fetch (FMTSPEC FMTHARDCOPY) of FMTSPEC))
                             (fetch (FMTSPEC FMTREVISED) of FMTSPEC)
                             (fetch (FMTSPEC FMTCOLUMN) of FMTSPEC)) as PROPNAME
             in '(QUAD 1STLEFTMARGIN LEFTMARGIN RIGHTMARGIN PARALEADING POSTPARALEADING LINELEADING 
                       BASETOBASE TABS STYLE CHARSTYLES USERINFO SPECIALX SPECIALY TYPE SUBTYPE 
                       NEWPAGEBEFORE NEWPAGEAFTER HEADINGKEEP KEEP HARDCOPY REVISED COLUMN)
             join (LIST PROPNAME PROP])

(\TEDIT.PARSE.PARALOOKS.LIST
  [LAMBDA (NEWLOOKS OLDLOOKS)                                (* ; "Edited  9-May-2023 13:20 by rmk")
                                                             (* ; "Edited  5-Sep-2022 15:39 by rmk")
                                                             (* ; 
                                                        "Edited  3-Jul-93 21:49 by sybalskY:MV:ENVOS")
                                                             (* ; 
                        "Apply a given format spec to the paragraphs which are included in this guy.")
    (PROG (D 1STLEFT LEFT RIGHT LEADB LEADA LLEAD TABSPECC QUADD NLOOKSAVE TYPE SUBTYPE TYPESET 
             SUBTYPESET NEWBEFORESET NEWBEFORE NEWAFTERSET NEWAFTER KEEP KEEPSET HEADINGKEEP 
             BASETOBASE BASESET REVISED REVISEDSET COLUMN COLUMNSET USERINFO USERINFOSET SPECIALX 
             SPECXSET SPECIALY SPECYSET STYLE STYLESET CHARSTYLES CHARSTYLESSET)
          (COND
             ((type? FMTSPEC NEWLOOKS)                       (* ; 
                      "if we were given an FMTSPEC really replace the FMTSPEC of all pieces affected")
              (RETURN NEWLOOKS))
             (T                                              (* ; "create an FMTSPEC from the Alist")
                (SETQ 1STLEFT (LISTGET NEWLOOKS '1STLEFTMARGIN))
                (SETQ LEFT (LISTGET NEWLOOKS 'LEFTMARGIN))
                (SETQ RIGHT (LISTGET NEWLOOKS 'RIGHTMARGIN))
                (SETQ LEADB (LISTGET NEWLOOKS 'PARALEADING))
                (SETQ LEADA (LISTGET NEWLOOKS 'POSTPARALEADING))
                (SETQ LLEAD (LISTGET NEWLOOKS 'LINELEADING))
                (SETQ TYPESET (FMEMB 'TYPE NEWLOOKS))
                (SETQ TYPE (LISTGET NEWLOOKS 'TYPE))
                (SETQ SUBTYPESET (FMEMB 'SUBTYPE NEWLOOKS))
                (SETQ SUBTYPE (LISTGET NEWLOOKS 'SUBTYPE))
                (SETQ NEWBEFORESET (FMEMB 'NEWPAGEBEFORE NEWLOOKS))
                (SETQ NEWBEFORE (LISTGET NEWLOOKS 'NEWPAGEBEFORE))
                (SETQ NEWAFTERSET (FMEMB 'NEWPAGEAFTER NEWLOOKS))
                (SETQ NEWAFTER (LISTGET NEWLOOKS 'NEWPAGEAFTER))
                (SETQ HEADINGKEEP (LISTGET NEWLOOKS 'HEADINGKEEP))
                                                             (* ; "Keep for headings")
                (SETQ KEEP (LISTGET NEWLOOKS 'KEEP))         (* ; 
                                       "More general `Keep-together' spec -- undefined as of 5/22/85")
                (SETQ KEEPSET (FMEMB 'KEEP NEWLOOKS))
                (SETQ BASETOBASE (LISTGET NEWLOOKS 'BASETOBASE))
                (SETQ BASESET (FMEMB 'BASETOBASE NEWLOOKS))
                (SETQ REVISED (LISTGET NEWLOOKS 'REVISED))
                (SETQ REVISEDSET (FMEMB 'REVISED NEWLOOKS))
                (SETQ QUADD (LISTGET NEWLOOKS 'QUAD))
                (SETQ COLUMN (LISTGET NEWLOOKS 'COLUMN))
                (SETQ COLUMNSET (FMEMB 'COLUMN NEWLOOKS))
                (SETQ USERINFO (LISTGET NEWLOOKS 'USERINFO))
                (SETQ USERINFOSET (FMEMB 'USERINFO NEWLOOKS))
                (SETQ SPECIALX (LISTGET NEWLOOKS 'SPECIALY))
                (SETQ SPECXSET (FMEMB 'SPECIALY NEWLOOKS))
                (SETQ SPECIALY (LISTGET NEWLOOKS 'SPECIALY))
                (SETQ SPECYSET (FMEMB 'SPECIALY NEWLOOKS))
                (SETQ STYLE (LISTGET NEWLOOKS 'STYLE))
                (SETQ STYLESET (FMEMB 'STYLE NEWLOOKS))
                (SETQ CHARSTYLES (LISTGET NEWLOOKS 'CHARSTYLES))
                (SETQ CHARSTYLESSET (FMEMB 'CHARSTYLES NEWLOOKS))
                [SELECTQ QUADD
                    ((LEFT RIGHT CENTERED JUSTIFIED NIL)     (* ; 
                                                    "Do nothing -- we got a valid justification spec")
                         )
                    ((JUST J) 
                         (SETQ QUADD 'JUSTIFIED))
                    ((L) 
                         (SETQQ QUADD LEFT))
                    (R (SETQQ QUADD RIGHT))
                    ((C CENTER) 
                         (SETQQ QUADD CENTERED))
                    (PROGN                                   (* ; 
                                                           "We got an illegal QUAD value.  Use LEFT.")
                           (TEDIT.PROMPTPRINT (AND (BOUNDP 'TEXTOBJ)
                                                   (EVALV 'TEXTOBJ))
                                  (CONCAT "Illegal paragraph quad " QUADD ", replaced with LEFT.")
                                  T)
                           (SETQ QUADD 'LEFT]
                (SETQ TABSPECC (LISTGET NEWLOOKS 'TABS))

                (* ;; "change from the users list to the real tabspec 

CONS pair of default width and LIST of TAB record instances")

                [COND
                   (TABSPECC (SETQ TABSPECC (CONS [OR (CAR TABSPECC)
                                                      (AND OLDLOOKS (CAR (fetch (FMTSPEC TABSPEC)
                                                                            of OLDLOOKS]
                                                  (for SPEC in (CDR TABSPECC)
                                                     collect (create TAB
                                                                    TABKIND _ (CDR SPEC)
                                                                    TABX _ (CAR SPEC]
                (SETQ NEWLOOKS (create FMTSPEC using (OR OLDLOOKS TEDIT.DEFAULT.FMTSPEC)))
                (AND 1STLEFT (replace (FMTSPEC 1STLEFTMAR) of NEWLOOKS with 1STLEFT))
                (AND LEFT (replace (FMTSPEC LEFTMAR) of NEWLOOKS with LEFT))
                (AND RIGHT (replace (FMTSPEC RIGHTMAR) of NEWLOOKS with RIGHT))
                (AND LEADB (replace (FMTSPEC LEADBEFORE) of NEWLOOKS with LEADB))
                (AND LEADA (replace (FMTSPEC LEADAFTER) of NEWLOOKS with LEADA))
                (AND LLEAD (replace (FMTSPEC LINELEAD) of NEWLOOKS with LLEAD))
                (AND TABSPECC (replace (FMTSPEC TABSPEC) of NEWLOOKS with TABSPECC))
                (AND QUADD (replace (FMTSPEC QUAD) of NEWLOOKS with QUADD))
                (AND TYPESET (replace (FMTSPEC FMTPARATYPE) of NEWLOOKS with TYPE))
                (AND SUBTYPESET (replace (FMTSPEC FMTPARASUBTYPE) of NEWLOOKS with SUBTYPE))
                (AND NEWBEFORESET (replace (FMTSPEC FMTNEWPAGEBEFORE) of NEWLOOKS with NEWBEFORE))
                (AND NEWAFTERSET (replace (FMTSPEC FMTNEWPAGEAFTER) of NEWLOOKS with NEWAFTER))
                [AND HEADINGKEEP (replace (FMTSPEC FMTHEADINGKEEP) of NEWLOOKS
                                    with (EQ HEADINGKEEP 'ON]
                (AND KEEPSET (replace (FMTSPEC FMTKEEP) of NEWLOOKS with KEEP))
                (AND BASESET (replace (FMTSPEC FMTBASETOBASE) of NEWLOOKS with BASETOBASE))
                (AND REVISEDSET (replace (FMTSPEC FMTREVISED) of NEWLOOKS with REVISED))
                (AND COLUMNSET (replace (FMTSPEC FMTCOLUMN) of NEWLOOKS with COLUMN))
                (AND SPECXSET (replace (FMTSPEC FMTSPECIALX) of NEWLOOKS with SPECIALX))
                (AND SPECYSET (replace (FMTSPEC FMTSPECIALY) of NEWLOOKS with SPECIALY))
                (AND STYLESET (replace (FMTSPEC FMTSTYLE) of NEWLOOKS with STYLE))
                (AND CHARSTYLESSET (replace (FMTSPEC FMTCHARSTYLES) of NEWLOOKS with CHARSTYLES))
                (AND USERINFOSET (replace (FMTSPEC FMTUSERINFO) of NEWLOOKS with USERINFO))
                (RETURN NEWLOOKS])

(TEDIT.PARALOOKS
  [LAMBDA (TEXTOBJ NEWLOOKS SEL LEN)                         (* ; "Edited 28-Jul-2023 15:44 by rmk")
                                                             (* ; "Edited  6-Jun-2023 21:36 by rmk")
                                                             (* ; "Edited 23-May-2023 14:40 by rmk")
                                                             (* ; "Edited 21-Apr-93 18:44 by jds")

    (* ;; "Apply a given format spec to the paragraphs which are included in this guy. This assumes that paragraph boundaries are aligned with piece boundaries, so no splitting is needed.")

    (SETQ TEXTOBJ (TEXTOBJ TEXTOBJ))
    (PROG ([SEL (COND
                   ((type? SELECTION SEL)
                    SEL)
                   ((FIXP SEL)
                    (TEDIT.SETSEL TEXTOBJ SEL LEN 'RIGHT))
                   (T (GETTOBJ TEXTOBJ SEL]
           FIRSTCHAR LASTCHAR PC1 PCN REPLACEALLFIELDS 1STLEFT LEFT RIGHT LEADB LEADA BLEAD BLEADSET
           LLEAD TABSPECC QUADD OLDLOOKSLIST TYPE SUBTYPE TYPESET SUBTYPESET SPECIALX SPECIALY 
           NEWBEFORESET NEWBEFORE NEWAFTERSET NEWAFTER KEEP KEEPSET HEADINGKEEP BASETOBASE BASESET 
           HCPYMODE HCPYSET USERINFO USERSET REVISED REVISEDSET COLUMN COLUMNSET STYLE STYLESET 
           CHARSTYLES CHARSTYLESSET)
          (CL:UNLESS (GETSEL SEL SET)                        (* ; 
                                                             "Nothing to do if selection is not set")
              (RETURN))
          (\TEDIT.CONVERT.TO.FORMATTED TEXTOBJ)              (* ; "Last affected character.")
          [COND
             ((type? FMTSPEC NEWLOOKS)                       (* ; "if we were given an FMTSPEC we replace the FMTSPEC of all pieces in all paragraphs.  Otherwise, we override particular values in the looks of individaul paragraphs.")
              (SETQ NEWLOOKS (\TEDIT.UNIQUIFY.PARALOOKS (create FMTSPEC copying NEWLOOKS)
                                    TEXTOBJ))
              (SETQ REPLACEALLFIELDS T))
             (T                                              (* ; "create an FMTSPEC from the Plist")
                (SETQ 1STLEFT (LISTGET NEWLOOKS '1STLEFTMARGIN))
                (SETQ LEFT (LISTGET NEWLOOKS 'LEFTMARGIN))
                (SETQ RIGHT (LISTGET NEWLOOKS 'RIGHTMARGIN))
                (SETQ LEADB (LISTGET NEWLOOKS 'PARALEADING))
                (SETQ LEADA (LISTGET NEWLOOKS 'POSTPARALEADING))
                (SETQ LLEAD (LISTGET NEWLOOKS 'LINELEADING))
                (SETQ BLEAD (LISTGET NEWLOOKS 'BASETOBASE))
                (SETQ BLEADSET (FMEMB 'BASETOBASE NEWLOOKS))
                (SETQ QUADD (LISTGET NEWLOOKS 'QUAD))
                (SETQ TYPESET (FMEMB 'TYPE NEWLOOKS))
                (SETQ TYPE (LISTGET NEWLOOKS 'TYPE))
                (SETQ SUBTYPESET (FMEMB 'SUBTYPE NEWLOOKS))
                (SETQ SUBTYPE (LISTGET NEWLOOKS 'SUBTYPE))
                (SETQ SPECIALX (LISTGET NEWLOOKS 'SPECIALX))
                (SETQ SPECIALY (LISTGET NEWLOOKS 'SPECIALY))
                (SETQ NEWBEFORESET (FMEMB 'NEWPAGEBEFORE NEWLOOKS))
                (SETQ NEWBEFORE (LISTGET NEWLOOKS 'NEWPAGEBEFORE))
                (SETQ NEWAFTERSET (FMEMB 'NEWPAGEAFTER NEWLOOKS))
                (SETQ NEWAFTER (LISTGET NEWLOOKS 'NEWPAGEAFTER))
                (SETQ HEADINGKEEP (LISTGET NEWLOOKS 'HEADINGKEEP))
                (SETQ KEEP (LISTGET NEWLOOKS 'KEEP))         (* ; 
                                       "More general 'Keep-together' spec -- undefined as of 5/22/85")
                (SETQ KEEPSET (FMEMB 'KEEP NEWLOOKS))
                (SETQ BASETOBASE (LISTGET NEWLOOKS 'BASETOBASE))
                (SETQ BASESET (FMEMB 'BASETOBASE NEWLOOKS))
                (SETQ HCPYMODE (LISTGET NEWLOOKS 'HARDCOPY))
                (SETQ HCPYSET (FMEMB 'HARDCOPY NEWLOOKS))
                (SETQ USERINFO (LISTGET NEWLOOKS 'USERINFO))
                (SETQ USERSET (FMEMB 'USERINFO NEWLOOKS))
                (SETQ REVISED (LISTGET NEWLOOKS 'REVISED))
                (SETQ REVISEDSET (FMEMB 'REVISED NEWLOOKS))
                (SETQ TABSPECC (LISTGET NEWLOOKS 'TABS))
                (SETQ STYLE (LISTGET NEWLOOKS 'STYLE))
                (SETQ STYLESET (FMEMB 'STYLE NEWLOOKS))
                (SETQ CHARSTYLES (LISTGET NEWLOOKS 'CHARSTYLES))
                (SETQ CHARSTYLESSET (FMEMB 'CHARSTYLES NEWLOOKS))
                (SETQ COLUMN (LISTGET NEWLOOKS 'COLUMN))
                (SETQ COLUMNSET (FMEMB 'COLUMN NEWLOOKS))
                (SETQ STYLE (LISTGET NEWLOOKS 'STYLE))
                (SETQ STYLESET (FMEMB 'STYLE NEWLOOKS]

     (* ;; "The  new format specification has been decoded. It applies to the piece that begins the paragraph containing the first selected character, the piece that ends the paragraph containing the last piece of the selection, and all pieces in between.")

     (* ;; "PC1 is the first piece of the paragraph containing FIRSTCHAR")

          (SETQ FIRSTCHAR (IMIN (GETSEL SEL CH#)
                                (TEXTLEN TEXTOBJ)))          (* ; "First affected character")
          (SETQ LASTCHAR (IMIN (IMAX FIRSTCHAR (SUB1 (GETSEL SEL CHLIM)))
                               (TEXTLEN TEXTOBJ)))
          [SETQ PC1 (for (PC _ (\CHTOPC FIRSTCHAR TEXTOBJ))
                         PPC by PPC while PC
                       do (if (SETQ PPC (PREVPIECE PC))
                              then (SETQ PPC (PREVPIECE PC))
                                   (CL:UNLESS (OR (EQ 0 (PLEN PC))
                                                  (fetch (CHARLOOKS CLINVISIBLE) of (PLOOKS PC)))
                                       (CL:WHEN (OR (NULL PPC)
                                                    (PPARALAST PPC))
                                              (RETURN PC)))
                            else (RETURN PC]
          (SETQ FIRSTCHAR (\PCTOCH PC1))                     (* ; 
                                                             "Back FIRSTCHAR to the beginning of PC1")

     (* ;; "PCN is the last piece of the paragraph that includes LASTCHAR")

          [SETQ PCN (find (PC _ (\CHTOPC LASTCHAR TEXTOBJ))
                          NPC by NPC while PC do (SETQ NPC (\NEXT.VISIBLE.PIECE PC))
                                                 (CL:WHEN (OR (NULL NPC)
                                                              (PPARALAST PC))
                                                        (RETURN PC]
          (SETQ LASTCHAR (IPLUS (\PCTOCH PCN)
                                (PLEN PCN)))                 (* ; 
                                                          "Move LASTCHAR to one after the end of PCN")

     (* ;; "Update the looks for all pieces from PC1 to PCN inclusive.  Presumably all the pieces within a paragraph start with the same looks, and maybe a sequence of paragraphs will start with the same looks.  Testing LASTLOOKS will typically avoid repeated calculation of the same new FMTSPEC")

          (for PC LASTLOOKS inpieces PC1 repeatuntil (EQ PC PCN)
             do (SETQ OLDLOOKSLIST (NCONC1 OLDLOOKSLIST (PPARALOOKS PC))) 
                                                             (* ; 
                                                      "Save the old looks of each piece for undoing.")
                (CL:UNLESS (OR REPLACEALLFIELDS (EQ (PPARALOOKS PC)
                                                    LASTLOOKS))

                    (* ;; "We need to instantiate new looks for this piece.")

                    (SETQ LASTLOOKS (PPARALOOKS PC))
                    (SETQ NEWLOOKS (create FMTSPEC using LASTLOOKS))
                    (AND 1STLEFT (freplace (FMTSPEC 1STLEFTMAR) of NEWLOOKS with 1STLEFT))
                    (AND LEFT (freplace (FMTSPEC LEFTMAR) of NEWLOOKS with LEFT))
                    (AND RIGHT (freplace (FMTSPEC RIGHTMAR) of NEWLOOKS with RIGHT))
                    (AND LEADB (freplace (FMTSPEC LEADBEFORE) of NEWLOOKS with LEADB))
                    (AND LEADA (freplace (FMTSPEC LEADAFTER) of NEWLOOKS with LEADA))
                    (AND BLEADSET (freplace (FMTSPEC FMTBASETOBASE) of NEWLOOKS with BLEAD))
                    (AND LLEAD (freplace (FMTSPEC LINELEAD) of NEWLOOKS with LLEAD))
                    (CL:WHEN TABSPECC

                        (* ;; "change from the users list to the real tabspec --- CONS pair of default width and LIST of TAB record instances")

                        [SETQ TABSPECC (CONS [OR (COND
                                                    ((AND (CAR TABSPECC)
                                                          (ZEROP (CAR TABSPECC)))
                                                     1)
                                                    (T (CAR TABSPECC)))
                                                 (CAR (fetch (FMTSPEC TABSPEC) of (PPARALOOKS PC]
                                             (for SPEC in (CDR TABSPECC)
                                                collect (create TAB
                                                               TABKIND _ (CDR SPEC)
                                                               TABX _ (CAR SPEC]
                        (freplace (FMTSPEC TABSPEC) of NEWLOOKS with TABSPECC))
                    (AND QUADD (freplace (FMTSPEC QUAD) of NEWLOOKS with QUADD))
                    (AND TYPESET (freplace (FMTSPEC FMTPARATYPE) of NEWLOOKS with TYPE))
                    (AND SUBTYPESET (freplace (FMTSPEC FMTPARASUBTYPE) of NEWLOOKS with SUBTYPE))
                    (AND SPECIALX (freplace (FMTSPEC FMTSPECIALX) of NEWLOOKS with SPECIALX))
                    (AND SPECIALY (freplace (FMTSPEC FMTSPECIALY) of NEWLOOKS with SPECIALY))
                    (AND NEWBEFORESET (freplace (FMTSPEC FMTNEWPAGEBEFORE) of NEWLOOKS with NEWBEFORE
                                             ))
                    (AND NEWAFTERSET (freplace (FMTSPEC FMTNEWPAGEAFTER) of NEWLOOKS with NEWAFTER))
                    [AND HEADINGKEEP (freplace (FMTSPEC FMTHEADINGKEEP) of NEWLOOKS
                                        with (EQ HEADINGKEEP 'ON]
                    (AND KEEPSET (freplace (FMTSPEC FMTKEEP) of NEWLOOKS with KEEP))
                    (AND BASESET (freplace (FMTSPEC FMTBASETOBASE) of NEWLOOKS with BASETOBASE))
                    (AND HCPYSET (freplace (FMTSPEC FMTHARDCOPY) of NEWLOOKS with HCPYMODE))
                    (AND USERSET (freplace (FMTSPEC FMTUSERINFO) of NEWLOOKS with USERINFO))
                    (AND REVISEDSET (freplace (FMTSPEC FMTREVISED) of NEWLOOKS with REVISED))
                    (AND STYLESET (freplace (FMTSPEC FMTSTYLE) of NEWLOOKS with STYLE))
                    (AND CHARSTYLESSET (freplace (FMTSPEC FMTCHARSTYLES) of NEWLOOKS with CHARSTYLES)
                         )
                    (AND COLUMNSET (freplace (FMTSPEC FMTCOLUMN) of NEWLOOKS with COLUMN))
                    (AND STYLESET (replace (FMTSPEC FMTSTYLE) of NEWLOOKS with STYLE))
                    (SETQ NEWLOOKS (\TEDIT.UNIQUIFY.PARALOOKS NEWLOOKS TEXTOBJ)))
                (freplace (PIECE PPARALOOKS) of PC with NEWLOOKS))
          (\TEDIT.HISTORYADD TEXTOBJ (create TEDITHISTORYEVENT
                                            THACTION _ :ParaLooks
                                            THLEN _ (IDIFFERENCE LASTCHAR FIRSTCHAR)
                                            THCH# _ FIRSTCHAR
                                            THFIRSTPIECE _ PC1
                                            THOLDINFO _ OLDLOOKSLIST))

     (* ;; "Pieces have been updated.  Now update any visible lines.")

          (CL:WHEN (GETTOBJ TEXTOBJ \WINDOW)
              (\SHOWSEL SEL NIL)                             (* ; 
                                                        "Turn off the sel before updating the screen")
              (\TEDIT.MARK.LINES.DIRTY TEXTOBJ FIRSTCHAR LASTCHAR)
              (replace (TEXTOBJ \DIRTY) of TEXTOBJ with T)   (* ; "Mark the document as changed.")
                                                             (* ; "Save this action for undo/redo")
              (TEDIT.RESET.EXTEND.PENDING.DELETE SEL)
              (TEDIT.UPDATE.SCREEN TEXTOBJ)                  (* ; 
                                            "Update the screen image, showing the original selection")
              (\FIXSEL SEL TEXTOBJ)
              (\SHOWSEL SEL T))])

(TEDIT.COPY.PARALOOKS
  [LAMBDA (TSTREAM SOURCE DEST)                              (* ; "Edited 18-Apr-2023 23:53 by rmk")
                                                             (* ; "Edited 22-Oct-2022 15:29 by rmk")
                                                             (* ; "Edited 22-Aug-2022 13:15 by rmk")
                                                             (* ; "Edited 30-May-91 21:44 by jds")

    (* ;; "Copy the PARAGRAPH LOOKS from one place to another")

    (PROG ((TEXTOBJ (TEXTOBJ TSTREAM))
           LOOKS LEN)                                        (* ; 
                                           "get the paragraph looks of the first character of SOURCE")
          [SETQ LOOKS (PPARALOOKS (if (FIXP SOURCE)
                                      then (\CHTOPC SOURCE TEXTOBJ)
                                    elseif (type? SELECTION SOURCE)
                                      then (\SHOWSEL SOURCE NIL) 
                                                             (* ; 
                                                             "Turn off the looks-source selection")
                                           (\CHTOPC (fetch (SELECTION CH#) of SOURCE)
                                                  (fetch (SELECTION SELTEXTOBJ) of SOURCE))
                                    else (\ILLEGAL.ARG SOURCE]
          (COND
             ((type? SELECTION DEST)                         (* ; 
                                       "make sure that the destination selection is in this document")
              (CL:UNLESS (EQ TEXTOBJ (fetch (SELECTION SELTEXTOBJ) of DEST))
                     (\LISPERROR "Destination selection is not in stream " TSTREAM)))
             (T                                              (* ; 
                         "set the LEN arg for TEDIT.PARALOOKS to be 1 since we just have a char pos.")
                (SETQ LEN 1)))
          (TEDIT.PARALOOKS TEXTOBJ LOOKS DEST LEN])

(\TEDIT.PUT.PARALOOKS
  [LAMBDA (FONTFILE PC PARAHASH)                             (* ; "Edited 15-Aug-2023 23:21 by rmk")
                                                             (* ; "Edited  3-Mar-2023 23:28 by rmk")
                                                             (* ; "Edited 30-May-91 21:44 by jds")

    (* ;; 
    "Put a description of PC's paralooks into FONTFILE.  LOOKS apply to characters CH1 thru CHLIM-1")

    (* ;; "NB: ANY CHANGE TO THE FORMAT THIS PUTS OUT NEEDS TO BE MIRRORED IN TEDIT.PUT.PCTB WHERE IT PUTS OUT THE DUMMY FINAL PARAGRAPH PIECE.")

    (\DWOUT FONTFILE 0)                                      (* ; 
             "Place holder for number of characters in the piece -- really taken from the charlooks.")
    (\SMALLPOUT FONTFILE \PieceDescriptorPARA)               (* ; 
                                                           "Identify this as a paragraph looks piece")
    (\SMALLPOUT FONTFILE (GETHASH (PPARALOOKS PC)
                                PARAHASH])

(\TEDIT.CONVERT.TO.FORMATTED
  [LAMBDA (TEXTOBJ START END)                                (* ; "Edited 22-May-2023 22:50 by rmk")
                                                             (* ; "Edited 20-May-2023 16:44 by rmk")
                                                             (* ; "Edited  8-May-2023 08:44 by rmk")
                                                             (* ; "Edited 29-Apr-93 19:47 by jds")

    (* ;; "Turn an unformatted TEdit file into a formatted TEdit file. The pieces are split so that CR, LF, and CRLF are always at piece-end, and the pieces containing them are marked as paragraph ending. Perhaps the terminating sequences should be changed to EOL ?  Except, this could happen under an insert where character switching CRLF to EOL would screw up established positions.")

    (* ;; "Note that a plain-text file comes with its last piece already marked as PPARALAST, no need to look at it.")

    (CL:UNLESS (OR (fetch (TEXTOBJ FORMATTEDP) of TEXTOBJ)
                   (ZEROP (TEXTLEN TEXTOBJ)))
        (CL:UNLESS START (SETQ START 1))
        (CL:UNLESS END
            (SETQ END (TEXTLEN TEXTOBJ)))
        (replace (TEXTOBJ \DIRTY) of TEXTOBJ with T)
        (for CHNO PREVEOL (TSTR _ (TEXTSTREAM TEXTOBJ)) from START to (SUB1 END)
           first (\TEXTSETFILEPTR TSTR START (SUB1 START))   (* ; "CHNO runs in character positions")
           do (CL:WHEN PREVEOL

                  (* ;; 
          "The EOL was the previous character, we now include it in the previous piece, and mark it.")

                  (replace (PIECE PPARALAST) of (PREVPIECE (\ALIGNEDPIECE (ADD1 CHNO)
                                                                  TEXTOBJ)) with T))
              (SETQ PREVEOL (SELCHARQ (BIN TSTR)
                                 (LF T)
                                 (CR (CL:WHEN (EQ (CHARCODE LF)
                                                  (\PEEKBIN TSTR T))
                                         (BIN TSTR)
                                         (add CHNO 1))
                                     T)
                                 NIL)) finally (replace (TEXTOBJ FORMATTEDP) of TEXTOBJ with T)
                                             (\TEDIT.MARK.LINES.DIRTY TEXTOBJ START END)))])

(\TEDIT.PARABOUNDS
  [LAMBDA (TEXTOBJ CH#)                                      (* ; "Edited 26-Mar-2023 12:54 by rmk")
                                                             (* ; "Edited 20-Feb-2023 13:55 by rmk")
                                                             (* ; "Edited 25-Oct-2022 14:50 by rmk")
                                                             (* ; "Edited 22-Aug-2022 13:17 by rmk")
                                                             (* ; "Edited 21-Apr-93 18:22 by jds")

    (* ;; "Returns the first and last character number of the paragraph that brackets CH#")

    (if (ZEROP (TEXTLEN TEXTOBJ))
        then                                                 (* ; "Empty document")
             (CONS 0 0)
      else (LET (CHPIECE START-OF-PIECE START END)
                (DECLARE (SPECVARS START-OF-PIECE))
                (SETQ CHPIECE (\CHTOPC (IMIN CH# (TEXTLEN TEXTOBJ))
                                     TEXTOBJ T))
                (SETQ START START-OF-PIECE)                  (* ; "Find the paragraph's first char")
                [for PC backpieces (PREVPIECE CHPIECE) until (PPARALAST PC)
                   do (add START (IMINUS (PLEN PC]
                (SETQ END (SUB1 START-OF-PIECE))             (* ; "Find the paragraph's last char")
                (for PC inpieces CHPIECE do (add END (PLEN PC)) repeatuntil (PPARALAST PC))
                (CONS START END])
)



(* ;; "For making paragraph-looks substitutions.")

(DEFINEQ

(TEDIT.SUBPARALOOKS
  [LAMBDA (TEXTSTREAM OLDLOOKSLIST NEWLOOKSLIST)             (* ; "Edited 18-Apr-2023 23:54 by rmk")
                                                             (* ; "Edited 22-Aug-2022 13:13 by rmk")
                                                             (* ; "Edited 26-Apr-93 15:13 by jds")

(* ;;; "User entry to substitute one set of looks for another.  Goes through the whole textstream and whenever the looks match the characteristics of OLDLOOKSLIST which are specified, the characteristics listed in NEWLOOKSLIST are substituted.")

    (LET* ((OLDLOOKS (\TEDIT.PARSE.PARALOOKS.LIST OLDLOOKSLIST))
           (NEWLOOKS (\TEDIT.PARSE.PARALOOKS.LIST NEWLOOKSLIST))
           (TEXTOBJ (TEXTOBJ TEXTSTREAM))
           (SEL (fetch (TEXTOBJ SEL) of TEXTOBJ))
           (FIRSTPC (\CHTOPC 1 TEXTOBJ))
           (FEATURELIST (for A on OLDLOOKSLIST by (CDDR A) collect (CAR A)))
           CHANGEMADE)
          (\SHOWSEL SEL NIL)                                 (* ; "Turn off the selection, first.")
          [OR (ZEROP (fetch (TEXTOBJ TEXTLEN) of TEXTOBJ))
              (bind (CH# _ 1) for (PC _ FIRSTPC) while PC by (fetch (PIECE NEXTPIECE) of PC)
                 do (COND
                       ((SAMEPARALOOKS OLDLOOKS (fetch (PIECE PPARALOOKS) of PC)
                               FEATURELIST)
                        (replace (TEXTOBJ \DIRTY) of (TEXTOBJ TEXTSTREAM) with T)
                        (freplace (PIECE PPARALOOKS) of PC with (\TEDIT.UNIQUIFY.PARALOOKS
                                                                 (\TEDIT.PARSE.PARALOOKS.LIST
                                                                  NEWLOOKSLIST
                                                                  (fetch (PIECE PPARALOOKS)
                                                                     of PC))
                                                                 (TEXTOBJ TEXTSTREAM)))
                        (\TEDIT.MARK.LINES.DIRTY TEXTOBJ CH# (+ CH# (fetch (PIECE PLEN) of PC)))
                        (SETQ CHANGEMADE T)))
                    (add CH# (fetch (PIECE PLEN) of PC]
          (COND
             ((fetch (TEXTOBJ \WINDOW) of TEXTOBJ)
              (TEDIT.UPDATE.SCREEN TEXTOBJ)                  (* ; "Update the screen image")
              (\FIXSEL SEL TEXTOBJ)
              (\SHOWSEL SEL T)))
          (COND
             (CHANGEMADE 'Done)
             (T 'NoChangesMade])

(SAMEPARALOOKS
  [LAMBDA (PARALOOK1 PARALOOK2 FEATURES)                     (* ; "Edited  8-Dec-92 00:44 by jds")

    (* ;; "Predicate to determine if CLOOK1 and CLOOK2 are the same in all the characteristics listed in FEATURES")

    (for F in FEATURES always (SELECTQ F
                                  (STYLE (EQUAL (fetch (FMTSPEC FMTSTYLE) of PARALOOK1)
                                                (fetch (FMTSPEC FMTSTYLE) of PARALOOK2)))
                                  (LEFTMARGIN (IEQP (fetch (FMTSPEC LEFTMAR) of PARALOOK1)
                                                    (fetch (FMTSPEC LEFTMAR) of PARALOOK2)))
                                  (1STLEFTMARGIN (IEQP (fetch (FMTSPEC 1STLEFTMAR) of PARALOOK1)
                                                       (fetch (FMTSPEC 1STLEFTMAR) of PARALOOK2)))
                                  (RIGHTMARGIN (IEQP (fetch (FMTSPEC RIGHTMAR) of PARALOOK1)
                                                     (fetch (FMTSPEC RIGHTMAR) of PARALOOK2)))
                                  (QUAD (EQ (fetch (FMTSPEC QUAD) of PARALOOK1)
                                            (fetch (FMTSPEC QUAD) of PARALOOK2)))
                                  (POSTPARALEADING 
                                       (IEQP (fetch (FMTSPEC LEADBEFORE) of PARALOOK1)
                                             (fetch (FMTSPEC LEADBEFORE) of PARALOOK2)))
                                  (PARALEADING (IEQP (fetch (FMTSPEC LEADBEFORE) of PARALOOK1)
                                                     (fetch (FMTSPEC LEADBEFORE) of PARALOOK2)))
                                  (LINELEADING (IEQP (fetch (FMTSPEC LINELEAD) of PARALOOK1)
                                                     (fetch (FMTSPEC LINELEAD) of PARALOOK2)))
                                  (TABS (EQUAL (fetch (FMTSPEC TABSPEC) of PARALOOK1)
                                               (fetch (FMTSPEC TABSPEC) of PARALOOK2)))
                                  (NEWPAGEBEFORE (EQ (fetch (FMTSPEC FMTNEWPAGEBEFORE) of PARALOOK1)
                                                     (fetch (FMTSPEC FMTNEWPAGEBEFORE) of PARALOOK2)))
                                  (NEWPAGEAFTER (EQ (fetch (FMTSPEC FMTNEWPAGEAFTER) of PARALOOK1)
                                                    (fetch (FMTSPEC FMTNEWPAGEAFTER) of PARALOOK2)))
                                  (SPECIALX (IEQP (fetch (FMTSPEC FMTSPECIALX) of PARALOOK1)
                                                  (fetch (FMTSPEC FMTSPECIALX) of PARALOOK2)))
                                  (SPECIALY (IEQP (fetch (FMTSPEC FMTSPECIALY) of PARALOOK1)
                                                  (fetch (FMTSPEC FMTSPECIALY) of PARALOOK2)))
                                  (HEADINGKEEP (EQ (fetch (FMTSPEC FMTHEADINGKEEP) of PARALOOK1)
                                                   (fetch (FMTSPEC FMTHEADINGKEEP) of PARALOOK2)))
                                  (ERROR (CONCAT F 
                              " is an unknown feature of paragraph looks.  Detected in SAMEPARALOOKS"
                                                ])
)



(* ; "UNDO & History List stuff")

(DEFINEQ

(TEDIT.UNDO.LOOKS
  [LAMBDA (TEXTOBJ EVENT)                                    (* ; "Edited 30-May-2023 22:56 by rmk")
                                                             (* ; "Edited 28-May-2023 00:31 by rmk")
                                                             (* ; "Edited  4-May-2023 14:35 by rmk")
                                                             (* ; "Edited 18-Apr-2023 23:56 by rmk")
                                                             (* ; "Edited 30-May-91 21:44 by jds")

    (* ;; "The loop is controlled by the looks, since the pieces are still chained through the text.")

    (for PC (CARETPC _ (\TEDIT.CARETPIECE TEXTOBJ))
         (SEL _ (fetch (TEXTOBJ SEL) of TEXTOBJ)) inpieces (fetch THFIRSTPIECE of EVENT) as OLDLOOKS
       in (GETTH EVENT THOLDINFO) collect                    (* ; "Remember this for the undo.")
                                                             (* ; "Give this piece its old looks")
                                        (CL:WHEN (EQ PC CARETPC)
                                            (replace (TEXTOBJ CARETLOOKS) of TEXTOBJ
                                               with (\TEDIT.CARETLOOKS.VERIFY TEXTOBJ OLDLOOKS)))
                                        (PROG1 (PLOOKS PC)
                                            (replace (PIECE PLOOKS) of PC with OLDLOOKS))
       finally (SETTH EVENT THOLDINFO $$VAL)                 (* ; 
                                                 "Remember the other looks in case we UNDO the UNDO.")
             (\TEDIT.MARK.LINES.DIRTY TEXTOBJ (GETTH EVENT THCH#)
                    (SUB1 (GETTH EVENT THCHLIM)))
             (TEDIT.UPDATE.SCREEN TEXTOBJ)
             (\TEDIT.SET.SEL.LOOKS SEL 'NORMAL)
             (SETQ TEDIT.PENDINGDEL NIL)
             (\FIXSEL SEL TEXTOBJ)
             (\SHOWSEL SEL T))
    (\TEDIT.HISTORYADD TEXTOBJ EVENT])

(TEDIT.UNDO.PARALOOKS
  [LAMBDA (TEXTOBJ EVENT)                                    (* ; "Edited 30-May-2023 22:55 by rmk")
                                                             (* ; "Edited  4-May-2023 14:35 by rmk")
                                                             (* ; "Edited 18-Apr-2023 23:57 by rmk")
                                                             (* ; "Edited 30-May-91 21:44 by jds")

    (* ;; "Set looks on the current selection from the TEDIT.CHARLOOKS.WINDOW")

    (for PC (SEL _ (fetch (TEXTOBJ SEL) of TEXTOBJ)) inpieces (fetch THFIRSTPIECE of EVENT)
       as OLDLOOKS in (fetch THOLDINFO of EVENT) do (replace (PIECE PPARALOOKS) of PC with OLDLOOKS)
                                                             (* ; "Give this piece its old looks")
                                                    (PPARALOOKS PC)
       finally 

             (* ;; "Remember the current looks in case we UNDO the UNDO.")

             (replace THOLDINFO of EVENT with $$VAL)
             (\TEDIT.MARK.LINES.DIRTY TEXTOBJ (fetch THCH# of EVENT)
                    (IPLUS (fetch THCH# of EVENT)
                           (fetch THLEN of EVENT)
                           -1))
             (TEDIT.UPDATE.SCREEN TEXTOBJ)
             (\TEDIT.SET.SEL.LOOKS SEL 'NORMAL)
             (SETQ TEDIT.PENDINGDEL NIL)
             (\FIXSEL SEL TEXTOBJ)
             (\SHOWSEL SEL T))
    (\TEDIT.HISTORYADD TEXTOBJ EVENT])
)



(* ; "Revision-mark support")

(DEFINEQ

(\TEDIT.MARK.REVISION
  [LAMBDA (TEXTOBJ FMTSPEC IMAGESTREAM LINE)                 (* ; "Edited 27-May-2023 12:12 by rmk")
                                                             (* ; "Edited 30-May-91 21:38 by jds")
    (LET ((SCALE (DSPSCALE NIL IMAGESTREAM)))
         (BLTSHADE BLACKSHADE IMAGESTREAM (IPLUS (GETLD LINE RIGHTMARGIN LINE)
                                                 (FIXR (ITIMES 12 SCALE)))
                (GETLD LINE YBOT)
                (FIXR SCALE)
                (GETLD LINE LHEIGHT)
                'PAINT])
)



(* ; "Added by yabu.fx, for SUNLOADUP without DWIM")

(DEFINEQ

(\CREATE.TEDIT.DEFAULT.FMTSPEC
  [LAMBDA NIL
    (create FMTSPEC
           QUAD _ 'LEFT
           1STLEFTMAR _ 0
           LEFTMAR _ 0
           RIGHTMAR _ 0
           LEADBEFORE _ 0
           LEADAFTER _ 0
           LINELEAD _ 0
           TABSPEC _ (CONS NIL NIL])

(\CREATE.TEDIT.FACE.MENU
  [LAMBDA NIL
    (create MENU
           ITEMS _ '(Bold Italic Bold% Italic Regular)
           CENTERFLG _ T
           TITLE _ "Face:"])

(\CREATE.TEDIT.SIZE.MENU
  [LAMBDA NIL
    (create MENU
           ITEMS _ '(6 7 8 9 10 11 12 14 18 24 30 36)
           CENTERFLG _ T
           MENUROWS _ 4
           TITLE _ "Type Size:"])
)



(* ; "Style-sheet support")

(DEFINEQ

(\TEDIT.APPLY.STYLES
  [LAMBDA (LOOKS PC TSTREAM)                                 (* ; "Edited 18-Mar-2023 21:45 by rmk")
                                                             (* ; "Edited 25-Sep-2022 13:28 by rmk")
                                                             (* ; "Edited 11-Sep-2022 14:45 by rmk")
                                                             (* ; 
                                                        "Edited  4-Jul-93 01:02 by sybalskY:MV:ENVOS")

    (* ;; "Given a set of looks, return the looks with the proper styles expanded out.")

    (SETQ TSTREAM (TEXTSTREAM TSTREAM))
    (OR (CDR (ASSOC LOOKS *TEDIT-CURRENTPARA-CACHE*))
        (CDR (ASSOC LOOKS *TEDIT-PARASTYLE-CACHE*))
        (LET* ((TEXTOBJ (fetch (TEXTSTREAM TEXTOBJ) of TSTREAM))
               (STYLE (fetch (CHARLOOKS CLSTYLE) of LOOKS))
               (STYLE-SHEET (OR (fetch (TEXTOBJ TXTSTYLESHEET) of TEXTOBJ)
                                TEDIT.STYLES))
               (NOSTYLE)
               CHARSTYLES CHARSTYLE IN-PARA FMTSPEC)
              (SETQ STYLE (COND
                             ((NULL STYLE)                   (* ; 
                                       "STYLE of NIL means don't bother.  Just use the looks we got.")
                              (SETQ NOSTYLE T)
                              LOOKS)
                             ((AND [SETQ CHARSTYLES (AND (fetch (TEXTSTREAM CURRENTPARALOOKS)
                                                            of TSTREAM)
                                                         (fetch (FMTSPEC FMTCHARSTYLES)
                                                            of (fetch (TEXTSTREAM CURRENTPARALOOKS)
                                                                  of TSTREAM]
                                   (SETQ CHARSTYLE (FASSOC STYLE CHARSTYLES)))
                                                             (* ; 
                   "If the paragraph we're in has character styles, and this is one of them, use it.")
                              (SETQ IN-PARA T)
                              CHARSTYLE)
                             ((CDR (SASSOC STYLE STYLE-SHEET)))
                             ((AND (LITATOM STYLE)
                                   (DEFINEDP STYLE))         (* ; 
                                                      "Call the guy's function to find the new looks")
                              (APPLY* STYLE LOOKS PC TEXTOBJ))
                             (T                              (* ; 
                                                "If all else fails, return the original set of looks")
                                (SETQ NOSTYLE T)
                                LOOKS)))
              (SETQ STYLE (COND
                             ((LISTP STYLE)
                              (\TEDIT.PARSE.CHARLOOKS.LIST (APPEND STYLE '(STYLE NIL))
                                     LOOKS))
                             (T STYLE)))

              (* ;; "Cache the looks->styled-looks mapping, either in the cache for this kind of paragraph (which gets wiped when we hit a new para type), or in the global cache.")

              [OR NOSTYLE (CL:IF IN-PARA
                              (push *TEDIT-CURRENTPARA-CACHE* (CONS LOOKS STYLE))
                              (push *TEDIT-PARASTYLE-CACHE* (CONS LOOKS STYLE)))]
              STYLE])

(\TEDIT.APPLY.PARASTYLES
  [LAMBDA (PARALOOKS PC TEXTOBJ)                             (* ; "Edited  4-Mar-2023 22:23 by rmk")
                                                             (* ; "Edited 25-Sep-2022 13:26 by rmk")
                                                             (* ; 
                                                        "Edited  3-Jul-93 23:15 by sybalskY:MV:ENVOS")

    (* ;; "Given a set of looks, return the looks with the proper styles expanded out.")

    (\TEDIT.CHECK (type? FMTSPEC PARALOOKS))                 (* ; "Incoming thing has to be a LOOKS.")
    (OR (CDR (ASSOC PARALOOKS *TEDIT-PARASTYLE-CACHE*))
        (LET* [NOSTYLE (STYLE-SHEET (OR (fetch (TEXTOBJ TXTSTYLESHEET) of TEXTOBJ)
                                        TEDIT.STYLES))
                     (STYLE (COND
                               ((NULL (fetch (FMTSPEC FMTSTYLE) of PARALOOKS))
                                (SETQ NOSTYLE T)
                                PARALOOKS)
                               ((CDR (SASSOC (fetch (FMTSPEC FMTSTYLE) of PARALOOKS)
                                            STYLE-SHEET)))
                               ((AND (LITATOM (fetch (FMTSPEC FMTSTYLE) of PARALOOKS))
                                     (DEFINEDP (fetch (FMTSPEC FMTSTYLE) of PARALOOKS)))
                                                             (* ; 
                                                      "Call the guy's function to find the new looks")
                                (APPLY* (fetch (FMTSPEC FMTSTYLE) of PARALOOKS)
                                       PARALOOKS PC TEXTOBJ))
                               (T (SETQ NOSTYLE T)
                                  PARALOOKS]
              (SETQ STYLE (COND
                             ((LISTP STYLE)
                              (\TEDIT.PARSE.PARALOOKS.LIST (APPEND STYLE '(STYLE NIL))
                                     PARALOOKS))
                             (T STYLE)))
              (CL:UNLESS NOSTYLE
                  (push *TEDIT-PARASTYLE-CACHE* (CONS PARALOOKS STYLE)))
              STYLE])

(TEDIT.STYLESHEET
  [LAMBDA (SHEET TEXTSTREAM)                                 (* ; 
                                                        "Edited  3-Jul-93 23:19 by sybalskY:MV:ENVOS")

    (* ;; "Put a new stylesheet into force.  This REPLACES any existing style sheets, and forgets any pushed sheets.")

    (LET [(TEXTOBJ (AND TEXTSTREAM (TEXTOBJ TEXTSTREAM]
         (COND
            (TEXTOBJ (SETQ *TEDIT-PARASTYLE-CACHE* NIL)      (* ; 
                                                             "Clear the cache, to force reformatting")
                   (replace (TEXTOBJ TXTSTYLESHEET) of TEXTOBJ with SHEET))
            (T 
               (* ;; "No specific document given; change the global style sheet TEDIT.STYLES")

               (SETQ *TEDIT-PARASTYLE-CACHE* NIL)            (* ; 
                                                             "Clear the cache, to force reformatting")
               (SETQ TEDIT.STYLES SHEET)
               (SETQ *TEDIT-STYLESHEET-SAVE-LIST* (LIST TEDIT.STYLES])

(TEDIT.POP.STYLESHEET
  [LAMBDA NIL                                                (* ; 
                                                        "Edited  3-Jul-93 17:42 by sybalskY:MV:ENVOS")

    (* ;; "Go back to an earlier stylesheet, by popping the stack of saved sheets.  You can't pop back to no sheet -- you'll always bottom out at the original style sheet.")

    (SETQ *TEDIT-PARASTYLE-CACHE* NIL)                       (* ; 
                                                             "Clear the cache, to force reformatting")
    (SETQ TEDIT.STYLES (OR (CL:POP *TEDIT-STYLESHEET-SAVE-LIST*)
                           TEDIT.STYLES])

(TEDIT.PUSH.STYLESHEET
  [LAMBDA (SHEET)                                            (* ; 
                                                        "Edited  3-Jul-93 17:40 by sybalskY:MV:ENVOS")

    (* ;; "Add more style definitions to the current style sheet, and remember how to get back to the old one.  Think of this as PUSHING onto a stack of stylesheets, with the new sheet being a composition of SHEET and the existing styles.  ")

    (SETQ *TEDIT-PARASTYLE-CACHE* NIL)                       (* ; 
                                                             "Clear the cache, to force reformatting")
    (SETQ TEDIT.STYLES (APPEND SHEET TEDIT.STYLES))
    (CL:PUSH TEDIT.STYLES *TEDIT-STYLESHEET-SAVE-LIST*])

(TEDIT.ADD.STYLESHEET
  [LAMBDA (SHEET)                                            (* ; 
                                                        "Edited  3-Jul-93 17:38 by sybalskY:MV:ENVOS")

    (* ;; "Add more style definitions to the current style sheet.  This ADDS entries, without remembering that there was an earlier sheet. ")

    (SETQ *TEDIT-PARASTYLE-CACHE* NIL)                       (* ; 
                                                             "Clear the cache, to force reformatting")
    (SETQ TEDIT.STYLES (APPEND SHEET TEDIT.STYLES))
    (SETQ *TEDIT-STYLESHEET-SAVE-LIST* (LIST TEDIT.STYLES])
)



(* ;; 
"*TEDIT-PARASTYLE-CACHE* is an ALIST of  original char/para looks to styled char/para looks.  It is used to cache stylings, and is reset when the main stylesheet changes, and when we change paragraph looks, given paras that have private char styles."
)




(* ;; 
"*TEDIT-CURRENTPARA-CACHE* is NIL if we're not in a para that has private char styles, or is the FMTSPEC (styled!) for that para, if we are.  Used to decide when we have to flush *TEDIT-PARASTYLE-CACHE* at paragraph boundaries.  Mostly, this'll be NIL and not interesting."
)




(* ;; 
"*TEDIT-STYLESHEET-SAVE-LIST* is a list of points inside TEDIT.STYLES, so we can %"push%" new style sheets on the front, and %"pop%" them off sensibly.  This is the push-stack, in effect.  Used by TEDIT.ADD.STYLESHEET, TEDIT.PUSH.STYLESHEET, and TEDIT.POP.STYLESHEET"
)


(RPAQ? TEDIT.STYLES )



(* ;; "RMK 2023: Maybe this should be one of the later ones? Only partly implemented")

(DECLARE%: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS TEDIT.STYLES)
)

(RPAQ? *TEDIT-PARASTYLE-CACHE* )

(RPAQ? *TEDIT-CURRENTPARA-CACHE* )

(RPAQ? *TEDIT-STYLESHEET-SAVE-LIST* )
(DECLARE%: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS *TEDIT-PARASTYLE-CACHE* *TEDIT-CURRENTPARA-CACHE* *TEDIT-STYLESHEET-SAVE-LIST*)
)
(DECLARE%: DONTCOPY
  (FILEMAP (NIL (23234 59939 (CHARLOOKS.FROM.FONT 23244 . 24749) (EQCLOOKS 24751 . 27416) (SAMECLOOKS 
27418 . 31570) (\TEDIT.UNIQUIFY.CHARLOOKS 31572 . 33004) (TEDIT.CARETLOOKS 33006 . 34178) (
TEDIT.COPY.LOOKS 34180 . 36234) (\TEDIT.GET.CHARLOOKS 36236 . 39881) (\TEDIT.UNPARSE.CHARLOOKS.LIST 
39883 . 42486) (TEDIT.MODIFYLOOKS 42488 . 44411) (TEDIT.NEW.FONT 44413 . 44833) (\TEDIT.PUT.CHARLOOKS 
44835 . 46632) (\TEDIT.CARETLOOKS.VERIFY 46634 . 47510) (\TEDIT.CARETPIECE 47512 . 47702) (
\TEDIT.GET.INSERT.CHARLOOKS 47704 . 49658) (\TEDIT.GET.TERMSA.WIDTHS 49660 . 50076) (
\TEDIT.PARSE.CHARLOOKS.LIST 50078 . 58171) (\TEDIT.FLUSH.UNUSED.LOOKS 58173 . 59937)) (59987 62529 (
TEDIT.SUBLOOKS 59997 . 62527)) (62530 82960 (\TEDIT.CHANGE.LOOKS 62540 . 75099) (TEDIT.LOOKS 75101 . 
76641) (\TEDIT.LOOKS 76643 . 79541) (\TEDIT.FONTCOPY 79543 . 80909) (TEDIT.GET.LOOKS 80911 . 82958)) (
83003 119238 (\TEDIT.GET.PARALOOKS 83013 . 83497) (EQFMTSPEC 83499 . 87000) (\TEDIT.UNIQUIFY.PARALOOKS
 87002 . 88153) (TEDIT.GET.PARALOOKS 88155 . 91416) (\TEDIT.PARSE.PARALOOKS.LIST 91418 . 99197) (
TEDIT.PARALOOKS 99199 . 112114) (TEDIT.COPY.PARALOOKS 112116 . 114206) (\TEDIT.PUT.PARALOOKS 114208 . 
115281) (\TEDIT.CONVERT.TO.FORMATTED 115283 . 117687) (\TEDIT.PARABOUNDS 117689 . 119236)) (119298 
125341 (TEDIT.SUBPARALOOKS 119308 . 121942) (SAMEPARALOOKS 121944 . 125339)) (125384 129021 (
TEDIT.UNDO.LOOKS 125394 . 127424) (TEDIT.UNDO.PARALOOKS 127426 . 129019)) (129060 129638 (
\TEDIT.MARK.REVISION 129070 . 129636)) (129700 130369 (\CREATE.TEDIT.DEFAULT.FMTSPEC 129710 . 129991) 
(\CREATE.TEDIT.FACE.MENU 129993 . 130165) (\CREATE.TEDIT.SIZE.MENU 130167 . 130367)) (130406 139259 (
\TEDIT.APPLY.STYLES 130416 . 133929) (\TEDIT.APPLY.PARASTYLES 133931 . 136133) (TEDIT.STYLESHEET 
136135 . 137202) (TEDIT.POP.STYLESHEET 137204 . 137872) (TEDIT.PUSH.STYLESHEET 137874 . 138614) (
TEDIT.ADD.STYLESHEET 138616 . 139257)))))
STOP
