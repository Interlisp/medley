(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)

(FILECREATED "29-Jan-2024 17:23:57" {WMEDLEY}<library>tedit>TEDIT-MENU.;130 261097 

      :EDIT-BY rmk

      :CHANGES-TO (FNS MB.DEFAULTBUTTON.FN)

      :PREVIOUS-DATE "28-Jan-2024 23:55:02" {WMEDLEY}<library>tedit>TEDIT-MENU.;129)


(PRETTYCOMPRINT TEDIT-MENUCOMS)

(RPAQQ TEDIT-MENUCOMS
       [(DECLARE%: EVAL@COMPILE DONTCOPY (EXPORT (RECORDS MB.3STATE MB.BUTTON MB.INSERT MB.MARGINBAR
                                                        MB.NWAY MB.TEXT MB.TOGGLE)
                                                (RECORDS MBUTTON NWAYBUTTON MARGINBAR TAB)))
        (DECLARE%: EVAL@COMPILE DOCOPY (MACROS TEDIT.DEFERRED-UPDATES))
        (INITRECORDS MBUTTON NWAYBUTTON MARGINBAR)
        [COMS                                                (* ; "Simple Menu Button support")
              (FNS MB.BUTTONEVENTINFN MB.DISPLAY MB.SETIMAGE MB.SELFN MB.SIZEFN MB.WHENOPERATEDFN 
                   MB.COPYFN MB.GETFN MB.PUTFN MB.SHOWSELFN MBUTTON.CREATE MBUTTON.CHANGENAME 
                   MBUTTON.FIND.BUTTON MBUTTON.FIND.NEXT.BUTTON MBUTTON.FIND.NEXT.FIELD MBUTTON.INIT
                   MBUTTON.NEXT.FIELD.AS.NUMBER MBUTTON.NEXT.FIELD.AS.TEXT MBUTTON.NEXT.FIELD.AS.ATOM
                   MBUTTON.SET.FIELD MBUTTON.SET.NEXT.FIELD MBUTTON.SET.NEXT.BUTTON.STATE 
                   TEDITMENU.STREAM)
              (GLOBALVARS MBUTTONIMAGEFNS)
              (DECLARE%: DONTEVAL@LOAD DOCOPY (P (MBUTTON.INIT))
                     (ADDVARS (IMAGEOBJTYPES (TEditMenuButton FILE TEDITMENU GETFN MB.GETFN]
        [COMS 
              (* ;; 
              "Three-state (ON-OFF-NEUTRAL) menu buttons, for, e.g., character properties like BOLD")

              (FNS MB.CREATE.THREESTATEBUTTON MB.THREESTATE.DISPLAY MB.THREESTATE.SHOWSELFN 
                   MB.THREESTATE.WHENOPERATEDFN MB.THREESTATEBUTTON.FN THREESTATE.INIT)
              (DECLARE%: DONTEVAL@LOAD DOCOPY (P (THREESTATE.INIT]
        [COMS                                                (* ; "One-of-N Menu button sets")
              (FNS MB.CREATE.NWAYBUTTON MB.NB.DISPLAYFN MB.NB.WHENOPERATEDFN MB.NB.SIZEFN 
                   MB.NWAYBUTTON.SELFN MB.NWAYMENU.NEWBUTTON NWAYBUTTON.INIT MB.NB.PACKITEMS 
                   MB.NWAYBUTTON.ADDITEM)
              (GLOBALVARS NWAYBUTTONIMAGEFNS)
              (DECLARE%: DONTEVAL@LOAD DOCOPY (P (NWAYBUTTON.INIT))
                     (ADDVARS (IMAGEOBJTYPES (NWayButton FILE TEDITMENU GETFN MB.GETFN]
        [COMS 
              (* ;; "Two-state, toggling menu buttons.")

              (FNS \TEXTMENU.TOGGLE.CREATE \TEXTMENU.TOGGLE.DISPLAY \TEXTMENU.TOGGLE.SHOWSELFN 
                   \TEXTMENU.TOGGLE.WHENOPERATEDFN \TEXTMENU.TOGGLEFN \TEXTMENU.TOGGLE.INIT 
                   \TEXTMENU.SET.TOGGLE)
              (GLOBALVARS \TOGGLEIMAGEFNS)
              (DECLARE%: DONTEVAL@LOAD DOCOPY (P (\TEXTMENU.TOGGLE.INIT))
                     (ADDVARS (IMAGEOBJTYPES (ToggleButton FILE TEDITMENU GETFN MB.GETFN]
        [COMS 
              (* ;; "Margin Setting and display")

              (FNS DRAWMARGINSCALE MARGINBAR MARGINBAR.CREATE MB.MARGINBAR.SELFN MB.MARGINBAR.SIZEFN
                   MB.MARGINBAR.DISPLAYFN MDESCALE MSCALE MB.MARGINBAR.SHOWTAB MB.MARGINBAR.TABTRACK
                   \TEDIT.TABTYPE.SET MARGINBAR.INIT)
              (BITMAPS \TEDIT.LEFTTAB \TEDIT.CENTERTAB \TEDIT.RIGHTTAB \TEDIT.DECIMALTAB 
                     \TEDIT.DOTTED.LEFTTAB \TEDIT.DOTTED.CENTERTAB \TEDIT.DOTTED.RIGHTTAB 
                     \TEDIT.DOTTED.DECIMALTAB TEDIT.EXTENDEDRIGHTMARK)
              (GLOBALVARS MARGINBARIMAGEFNS)
              (DECLARE%: DONTEVAL@LOAD DOCOPY (P (MARGINBAR.INIT))
                     (ADDVARS (IMAGEOBJTYPES (MarginRuler FILE TEDITMENU GETFN MB.GETFN]
        (COMS 
              (* ;; "Text menu creation and support")

              (FNS \TEDIT.MENU.START \TEDIT.MENU.BUTTONEVENTFN \TEXTMENU.DOC.CREATE)
              (BITMAPS TEXTMENUICON TEXTMENUICONMASK))
        [COMS                                                (* ; "TEdit-specific support")
              (FNS \TEDITMENU.CREATE \TEDIT.EXPANDED.MENU MB.DEFAULTBUTTON.FN 
                   \TEDITMENU.RECORD.UNFORMATTED MB.DEFAULTBUTTON.ACTIONFN)
              (FNS \TEDIT.CHARLOOKSMENU.CREATE \TEDIT.EXPANDEDCHARLOOKS.MENU \TEDIT.APPLY.BOLDNESS 
                   \TEDIT.APPLY.CHARLOOKS \TEDIT.APPLY.OLINE \TEDIT.APPLY.UNBREAKABLE 
                   \TEDIT.SHOW.CHARLOOKS \TEDIT.NEUTRALIZE.CHARLOOKS \TEDIT.FILL.IN.CHARLOOKS.MENU 
                   \TEDIT.NEUTRALIZE.CHARLOOKS.MENU \TEDIT.PARSE.CHARLOOKS.MENU \TEDIT.APPLY.SLOPE 
                   \TEDIT.APPLY.STRIKEOUT \TEDIT.APPLY.ULINE)
              (FNS \TEDITPARAMENU.CREATE \TEDIT.EXPANDEDPARA.MENU \TEDIT.APPLY.PARALOOKS 
                   \TEDIT.SHOW.PARALOOKS \TEDIT.NEUTRALIZE.PARALOOKS.MENU \TEDIT.RECORD.TABLEADERS)
              (FNS \TEDIT.SHOW.PAGEFORMATTING \TEDITPAGEMENU.CREATE \TEDIT.APPLY.PAGEFORMATTING 
                   TEDIT.UNPARSE.PAGEFORMAT)
              (COMS                                          (* ; "Initialization Code")
                    (GLOBALVARS TEDIT.EXPANDED.MENU TEDIT.EXPANDEDPARA.MENU TEDIT.CHARLOOKS.MENU 
                           TEDIT.MENUDIVIDER.SPEC TEDIT.EXPANDEDMENU.SPEC TEDIT.CHARLOOKSMENU.SPEC 
                           TEDIT.PARAMENU.SPEC TEDIT.PAGEMENU.SPEC TEDIT.EXPANDED.PAGEMENU)
                    (FNS \TEDIT.MENU.INIT)
                    (DECLARE%: DONTEVAL@LOAD DOCOPY (P (\TEDIT.MENU.INIT)
                                                       (\TEDITMENU.CREATE)
                                                       (\TEDIT.CHARLOOKSMENU.CREATE)
                                                       (\TEDITPARAMENU.CREATE)
                                                       (\TEDITPAGEMENU.CREATE]
        (DECLARE%: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS (ADDVARS (NLAMA)
                                                                             (NLAML)
                                                                             (LAMA])
(DECLARE%: EVAL@COMPILE DONTCOPY 
(* "FOLLOWING DEFINITIONS EXPORTED")(DECLARE%: EVAL@COMPILE

(TYPERECORD MB.3STATE (
                       (* ;; "Describes a 3-state menu button.")

                       MBLABEL                               (* ; 
                                                             "Label for the button on the screen")
                       MBFONT                                (* ; 
                                                             "Font the label text should appear in")
                       MBCHANGESTATEFN                       (* ; 
                                                   "Function to call when the button's state changes")
                       MBINITSTATE                           (* ; "Button's initial state.")
                       )
                      MBFONT _ (FONTCREATE 'HELVETICA 8 'BOLD))

(TYPERECORD MB.BUTTON (MBLABEL MBBUTTONEVENTFN MBFONT)
                      MBBUTTONEVENTFN _ 'MB.DEFAULTBUTTON.FN MBFONT _ (FONTCREATE 'HELVETICA 8
                                                                             'BOLD))

(TYPERECORD MB.INSERT (MBINITENTRY))

(TYPERECORD MB.MARGINBAR (ignoredfield))

(TYPERECORD MB.NWAY (MBBUTTONS MBFONT MBCHANGESTATEFN MBINITSTATE MBMAXITEMSPERLINE)
                    MBFONT _ (FONTCREATE 'HELVETICA 8 'BOLD))

(TYPERECORD MB.TEXT (MBSTRING MBFONT))

(TYPERECORD MB.TOGGLE (MBTEXT MBFONT MBCHANGESTATEFN MBINITSTATE)
                      MBFONT _ (FONTCREATE 'HELVETICA 8 'BOLD))
)
(DECLARE%: EVAL@COMPILE

(RECORD MBUTTON NIL [TYPE? (AND (IMAGEOBJP DATUM)
                                (OR (EQ (IMAGEOBJPROP DATUM 'DISPLAYFN)
                                        'MB.DISPLAY)
                                    (EQ (IMAGEOBJPROP DATUM 'DISPLAYFN)
                                        'MB.THREESTATE.DISPLAY)
                                    (EQ (IMAGEOBJPROP DATUM 'DISPLAYFN)
                                        '\TEXTMENU.TOGGLE.DISPLAY])

(RECORD NWAYBUTTON NIL [TYPE? (AND (IMAGEOBJP DATUM)
                                   (EQ (IMAGEOBJPROP DATUM 'DISPLAYFN)
                                       'MB.NB.DISPLAYFN])

(RECORD MARGINBAR (MARL1 MARLN MARR MARTABS MARUNIT MARTABTYPE)
                  [TYPE? (AND (IMAGEOBJP DATUM)
                              (EQ (IMAGEOBJPROP DATUM 'DISPLAYFN)
                                  'MB.MARGINBAR.DISPLAYFN])

(RECORD TAB (TABX . TABKIND))
)

(* "END EXPORTED DEFINITIONS")

)
(DECLARE%: EVAL@COMPILE DOCOPY 
(DECLARE%: EVAL@COMPILE 

(PUTPROPS TEDIT.DEFERRED-UPDATES MACRO [(TOBJ . BODY)

                                 (* ;; "Used to be a cleaner DEFMACRO, maybe revert when DEFMACROS work better with file package and compiler.  Can't do OPENLAMBDA because of  . BODY")

                                 (* ;; "For TEdit windows, run BODY without updating the edit window for TEXTOBJ. then updates at the end.  This is useful if you're making a log of changes to a document at one time, where the changes are in essence atomic, and you don't need to see intermediate results.  It's also a good bit faster than constant updating.")

                                        (* ;; 
                                        "TEXTOBJ is the TEXTOBJ for the document being modified.")

                                        (* ;; 
                              "SCRATCHSEL is the TEXTOBJ scratch selection, bound here for BODY use.")

                                        (LET* ((TEXTOBJ TOBJ)
                                               (SCRATCHSEL (GETTOBJ TEXTOBJ SCRATCHSEL))
                                               (OLD-DON'TUPDATE (GETTOBJ TEXTOBJ TXTDON'TUPDATE)))
                                              (CL:UNWIND-PROTECT
                                                  (PROGN (SETTOBJ TEXTOBJ TXTDON'TUPDATE T) . BODY)
                                                  (\TEDIT.MARK.LINES.DIRTY TEXTOBJ 1 -1)
                                                  (SETTOBJ TEXTOBJ TXTDON'TUPDATE OLD-DON'TUPDATE)
                                                  (TEDIT.UPDATE.SCREEN TEXTOBJ))])
)
)



(* ; "Simple Menu Button support")

(DEFINEQ

(MB.BUTTONEVENTINFN
  [LAMBDA (OBJ STREAM SEL RELX RELY SELWINDOW TEXTSTREAM)    (* ; "Edited  9-Apr-2023 18:22 by rmk")
                                                             (* ; "Edited 30-May-91 22:15 by jds")

    (* ;; "There was a buttn event inside a menu button.  Turn the button OFF when the mouse moves outside it.")

    (LET [(OBJBOX (IMAGEOBJPROP OBJ 'BOUNDBOX]
         (replace (SELECTION SELKIND) of SEL with 'VOLATILE)
         (COND
            ((IMAGEOBJPROP OBJ 'MENUBUTTON.SELECTED)         (* ; 
                  "This button is still active from an earlier hit.  Don't let it be selected again.")
             'DON'T)
            ((AND (IGEQ RELX 0)
                  (IGEQ RELY 0)
                  (ILEQ RELX (fetch XSIZE of OBJBOX))
                  (ILEQ RELY (fetch YSIZE of OBJBOX)))       (* ; 
                  "We're really inside the thing.  Return an indication that we're to be left alone.")
             T)
            (T                                               (* ; 
                                        "He's moved outside the button.  Don't permit the selection.")
               'DON'T])

(MB.DISPLAY
  [LAMBDA (OBJ STREAM MODE)                                  (* ; "Edited 20-Nov-2023 17:31 by rmk")
                                                             (* ; "Edited 11-Jan-89 16:58 by jds")

    (* ;; "Display the innards of a menu button")

    (SELECTQ (IMAGESTREAMTYPE STREAM)
        (DISPLAY 
                 (* ;; "Going to the display.  Use the cached bitmap version of the button")

                 [PROG (BITMAP (OBJBOX (IMAGEOBJPROP OBJ 'BOUNDBOX))
                              (X (DSPXPOSITION NIL STREAM))
                              (Y (DSPYPOSITION NIL STREAM)))
                       [SETQ BITMAP (COND
                                       ((IMAGEOBJPROP OBJ 'BITCACHE))
                                       (T (MB.SETIMAGE OBJ)
                                          (IMAGEOBJPROP OBJ 'BITCACHE]
                       (SETQ Y (IDIFFERENCE Y (fetch YDESC of OBJBOX)))
                       (BITBLT BITMAP 0 0 STREAM X Y)        (* ; "Display the button's image")
                       (CL:WHEN (EQ (IMAGEOBJPROP OBJ 'STATE)
                                    'ON)                     (* ; "If the button is ON, mark it so.")
                           (BLTSHADE BLACKSHADE STREAM X Y (fetch XSIZE of OBJBOX)
                                  (fetch YSIZE of OBJBOX)
                                  'INVERT))])
        (PROGN 
               (* ;; "Going to some output image stream.  Use the actual text.")

               (DSPFONT (PROG1 (DSPFONT (FONTCOPY (IMAGEOBJPROP OBJ 'MBFONT)
                                               'DEVICE STREAM)
                                      STREAM)                (* ; 
                                                           "Change to the font for this menu button.")
                            (PRIN1 (IMAGEOBJPROP OBJ 'MBTEXT)
                                   STREAM))])

(MB.SETIMAGE
  [LAMBDA (OBJ)                                              (* jds "23-Aug-84 13:22")
    (PROG ((MBFONT (IMAGEOBJPROP OBJ 'MBFONT))
           (MBTEXT (IMAGEOBJPROP OBJ 'MBTEXT))
           BOX BITMAP DS)
          (SETQ BOX (create IMAGEBOX
                           XSIZE _ (STRINGWIDTH MBTEXT MBFONT)
                           YSIZE _ (FONTPROP MBFONT 'HEIGHT)
                           YDESC _ (FONTPROP MBFONT 'DESCENT)
                           XKERN _ 0))
          (SETQ BITMAP (BITMAPCREATE (fetch XSIZE of BOX)
                              (fetch YSIZE of BOX)))
          (IMAGEOBJPROP OBJ 'BITCACHE BITMAP)
          (IMAGEOBJPROP OBJ 'BOUNDBOX BOX)
          (SETQ DS (DSPCREATE BITMAP))
          (DSPXOFFSET 0 DS)
          (DSPYOFFSET 0 DS)
          (DSPFONT MBFONT DS)
          (MOVETO 0 (FONTPROP MBFONT 'DESCENT)
                 DS)
          (PRIN1 MBTEXT DS)
          (RETURN OBJ])

(MB.SELFN
  [LAMBDA (OBJ SEL W FN)                                     (* ; "Edited 24-Jan-2024 10:48 by rmk")
                                                             (* ; "Edited  6-Jun-2023 15:31 by rmk")
                                                             (* ; "Edited 18-Apr-2023 23:58 by rmk")
                                                             (* ; "Edited 21-Oct-2022 18:52 by rmk")
                                                             (* ; "Edited 30-May-91 22:15 by jds")

    (* ;; 
    "Calls a menu-button's associated function, then turns off the highlighting of the menu button.")

    (LET [(TSEL (\COPYSEL SEL))
          (BUTTONFN (OR FN (IMAGEOBJPROP OBJ 'MBFN]          (* ; 
                                                 "Save the selection that points to the menu button.")
         (SETSEL SEL SELKIND 'CHAR)
         (SETSEL SEL SET NIL)
         (SETSEL SEL ONFLG NIL)                              (* ; "Call the button's function")
         (CL:UNLESS (EQ (AND BUTTONFN (APPLY* BUTTONFN OBJ SEL W))
                        'DON'T)                              (* ; 
                                                         "If the button fn left the selection alone,")
             (\FIXSEL TSEL)                                  (* ; 
     "Turn off the button hilite. Perhaps the function changed something that changed the selection?")
             (\SHOWSEL TSEL NIL))])

(MB.SIZEFN
  [LAMBDA (OBJ STREAM CURX RIGHTMARGIN)                      (* ; "Edited 11-Oct-2022 22:51 by rmk")
                                                             (* ; "Edited  4-Oct-2022 11:59 by rmk")
                                                             (* jds "30-Aug-84 11:24")
                                                             (* ; "Tell the size of a menu button")
    (LET ((FONT (IMAGEOBJPROP OBJ 'MBFONT))
          BOX)
         (CL:UNLESS (DISPLAYSTREAMP STREAM)
             (SETQ FONT (FONTCOPY FONT 'DEVICE (IMAGESTREAMTYPE STREAM))))
         (SETQ BOX (create IMAGEBOX
                          XSIZE _ (STRINGWIDTH (IMAGEOBJPROP OBJ 'MBTEXT)
                                         FONT)
                          YSIZE _ (FONTPROP FONT 'HEIGHT)
                          YDESC _ (FONTPROP FONT 'DESCENT)
                          XKERN _ 0))
         (IMAGEOBJPROP OBJ 'BOUNDBOX BOX)
         BOX])

(MB.WHENOPERATEDFN
  [LAMBDA (OBJ DS OPERATION SEL)                             (* jds " 7-Feb-84 14:20")
    (SELECTQ OPERATION
        (HIGHLIGHTED (MB.SHOWSELFN OBJ SEL T DS))
        (UNHIGHLIGHTED (MB.SHOWSELFN OBJ SEL NIL DS))
        (SELECTED (MB.SELFN OBJ SEL DS))
        (DESELECTED)
        NIL])

(MB.COPYFN
  [LAMBDA (OBJ)                                              (* jds "23-May-84 11:32")
                                                             (* Copy a menu button object.)
    (create IMAGEOBJ
           OBJECTDATUM _ (COPY (fetch (IMAGEOBJ OBJECTDATUM) of OBJ))
           IMAGEOBJPLIST _ (COPY (fetch (IMAGEOBJ IMAGEOBJPLIST) of OBJ))
           IMAGEOBJFNS _ (fetch (IMAGEOBJ IMAGEOBJFNS) of OBJ])

(MB.GETFN
  [LAMBDA (OBJ FILE)                                         (* ; "Edited 19-Dec-2023 10:24 by rmk")
                                                             (* ; "Edited 20-Aug-87 16:17 by jds")
                                                             (* READ a menu button from a file.)
    (HELP "HELP FROM JDS--NOT USED?")
    (PROG [(TEXT (IMAGEOBJPROP OBJ 'MBTEXT))
           (MBFN (IMAGEOBJPROP OBJ 'MBFN))
           (FONT (IMAGEOBJPROP OBJ 'MBFONT]
          (\STRINGOUT FILE TEXT)
          (\ATMOUT FILE MBFN)
          (\ATMOUT FILE (FONTPROP FONT 'FAMILY))
          (\WOUT FILE (FONTPROP FONT 'SIZE))
          (for ATTR in (FONTPROP FONT 'FACE) do (\ATMOUT FILE ATTR])

(MB.PUTFN
  [LAMBDA (OBJ FILE)                                         (* ; "Edited 19-Dec-2023 10:23 by rmk")
                                                             (* ; "Edited 20-Aug-87 16:17 by jds")

    (* ;; "Write a menu button from a file; suitable for re-reading using the image objects GETFN.")

    (PROG [(TEXT (IMAGEOBJPROP OBJ 'MBTEXT))
           (MBFN (IMAGEOBJPROP OBJ 'MBFN))
           (FONT (IMAGEOBJPROP OBJ 'MBFONT]
          (HELP "HELP FROM JDS -- NOT USED?")
          (\STRINGOUT FILE TEXT)                             (* ; "The button's image")
          (\ATMOUT FILE MBFN)                                (* ; "The FN called when hit")
          (\ATMOUT FILE (FONTPROP FONT 'FAMILY))
          (\WOUT FILE (FONTPROP FONT 'SIZE))
          (for ATTR in (FONTPROP FONT 'FACE) do (\ATMOUT FILE ATTR])

(MB.SHOWSELFN
  [LAMBDA (OBJ SEL ON DS)                                    (* ; "Edited 20-Nov-2023 20:16 by rmk")
                                                             (* ; "Edited 11-Jan-89 16:35 by jds")
    (LET [(OBJBOX (IMAGEOBJPROP OBJ 'BOUNDBOX]
         (OR (IMAGEOBJPROP OBJ 'BITCACHE)
             (MB.DISPLAY OBJ))                               (* ; "MAKE SURE THE DISPLAY FORM EXISTS")
         (BITBLT (IMAGEOBJPROP OBJ 'BITCACHE)
                0 0 DS 0 0 (fetch (IMAGEBOX XSIZE) of OBJBOX)
                (fetch (IMAGEBOX YSIZE) of OBJBOX)
                'INPUT
                'REPLACE)
         (CL:WHEN (OR ON (EQ (IMAGEOBJPROP OBJ 'STATE)
                             'ON))
             (BLTSHADE BLACKSHADE DS 0 0 (fetch (IMAGEBOX XSIZE) of OBJBOX)
                    (fetch (IMAGEBOX YSIZE) of OBJBOX)
                    'INVERT))])

(MBUTTON.CREATE
  [LAMBDA (MBTEXT MBFN MBFONT IMAGEFNS)                      (* ; "Edited 11-Jan-89 16:10 by jds")

    (* ;; "Create a MENU BUTTON image object, and fill in its image and function-hook fields")

    (LET* ([REAL-FONT (OR MBFONT (FONTCLASSCOMPONENT DEFAULTFONT 'DISPLAY]
           (OBJ (IMAGEOBJCREATE NIL (OR IMAGEFNS MBUTTONIMAGEFNS)))
           (BOX (create IMAGEBOX
                       XSIZE _ (STRINGWIDTH MBTEXT REAL-FONT)
                       YSIZE _ (FONTPROP REAL-FONT 'HEIGHT)
                       YDESC _ (FONTPROP REAL-FONT 'DESCENT)
                       XKERN _ 0))
           BITMAP DS)
          (IMAGEOBJPROP OBJ 'MBFN MBFN)                      (* ; 
                                                "The function to be called when the button is pushed")
          (IMAGEOBJPROP OBJ 'MBTEXT MBTEXT)                  (* ; "The text displayed in the button")
          (IMAGEOBJPROP OBJ 'MBFONT REAL-FONT)               (* ; "The font that text appears in")
          (MB.SETIMAGE OBJ)                                  (* ; 
                                 "Set up the image for the button, so we don't create it repeatedly.")
          OBJ])

(MBUTTON.CHANGENAME
  [LAMBDA (TEXTOBJ OBJ NEWNAME)                              (* jds "23-Aug-84 13:26")

         (* Change the text that appears in a button, and redisplay the button if it's 
         visible)

    (PROG (BOX BITMAP DS)
          (IMAGEOBJPROP OBJ 'MBTEXT NEWNAME)
          (MB.SETIMAGE OBJ)
          (TEDIT.OBJECT.CHANGED TEXTOBJ OBJ])

(MBUTTON.FIND.BUTTON
  [LAMBDA (LABEL TEXTSTREAM CH#)                             (* ; "Edited 16-Sep-2022 21:20 by rmk")
                                                             (* ; "Edited 22-Aug-2022 15:29 by rmk")
                                                             (* ; "Edited 22-Apr-93 15:40 by jds")
                                                             (* ; "'27-Sep-84 00:52' gbn")

    (* ;; "Returns the piece containing the imageobj with MBTEXT prop LABEL")

    (for (PC _ (\CHTOPC (OR CH# 1)
                      (TEXTOBJ TEXTSTREAM)))
         OBJ
         (LABELATOM _ (MKATOM LABEL)) by (NEXTPIECE PC) while PC
       do (CL:WHEN [AND (EQ OBJECT.PTYPE (PTYPE PC))
                        (SETQ OBJ (PCONTENTS PC))
                        (EQ LABELATOM (MKATOM (IMAGEOBJPROP OBJ 'MBTEXT]
                 (RETURN PC])

(MBUTTON.FIND.NEXT.BUTTON
  [LAMBDA (TEXTOBJ CH#)                                      (* ; "Edited 21-Oct-2023 08:54 by rmk")
                                                             (* ; "Edited  5-Sep-2022 15:39 by rmk")
                                                             (* ; "Edited 22-Aug-2022 13:19 by rmk")
                                                             (* ; "Edited  6-Aug-2022 17:36 by rmk")
                                                             (* ; "Edited 22-Apr-93 16:39 by jds")

    (* ;; "Finds the next instance of an OBJECT which looks like a menu button, 3-state button, or menuobj.  If none is found, return NIL")

    (for (PC _ (\CHTOPC CH# TEXTOBJ))
         OBJ by (NEXTPIECE PC) while PC when (AND (EQ OBJECT.PTYPE (PTYPE PC))
                                                  (SETQ OBJ (PCONTENTS PC))
                                                  (OR (type? MBUTTON OBJ)
                                                      (type? MARGINBAR OBJ)
                                                      (type? NWAYBUTTON OBJ)))
       do (RETURN (CONS OBJ (\PCTOCH PC TEXTOBJ])

(MBUTTON.FIND.NEXT.FIELD
  [LAMBDA (TEXTOBJ CH# DON'TFIX)                             (* ; "Edited  9-May-2023 12:43 by rmk")
                                                             (* ; "Edited 20-Mar-2023 17:33 by rmk")
                                                             (* ; "Edited 11-Feb-2023 11:23 by rmk")
                                                             (* ; "Edited  9-Sep-2022 17:04 by rmk")
                                                             (* ; "Edited 22-Aug-2022 13:06 by rmk")
                                                             (* ; "Edited 22-Apr-93 16:53 by jds")
    (PROG ((SCRATCHSEL (fetch (TEXTOBJ SCRATCHSEL) of TEXTOBJ))
           CH1 PC CH LEN START-OF-PIECE)
          (CL:WHEN (IGREATERP CH# (fetch (TEXTOBJ TEXTLEN) of TEXTOBJ))
                                                             (* ; 
                                                            "Can't look past the end of the document")
              (RETURN NIL))
          (SETQ PC (\CHTOPC CH# TEXTOBJ T))
          (while PC until (fetch (CHARLOOKS CLSELHERE) of (PLOOKS PC))
             do 
                (* ;; "Look thru the pieces for one that starts a user-fill-in area")

                (add START-OF-PIECE (PLEN PC))
                (SETQ PC (NEXTPIECE PC)))
          (CL:UNLESS PC (RETURN NIL))                        (* ; 
                                                      "We found a starting point for a type-in field")
          (add START-OF-PIECE (PLEN PC))
          (SETQ CH1 START-OF-PIECE)                          (* ; 
                                                             "Remember the starting character number")
          (SETQ PC (NEXTPIECE PC))
          (while PC until (fetch (CHARLOOKS CLPROTECTED) of (PLOOKS PC))
             do (add START-OF-PIECE (PLEN PC))
                (SETQ PC (NEXTPIECE PC)))
          (SETQ LEN (IDIFFERENCE START-OF-PIECE CH1))
          (SETSEL SCRATCHSEL CH# CH1)
          (SETSEL SCRATCHSEL CHLIM (IPLUS CH1 (IMAX 0 LEN)))
          (SETSEL SCRATCHSEL DCH LEN)
          (SETSEL SCRATCHSEL SELOBJ NIL)
          (SETSEL SCRATCHSEL POINT 'LEFT)                    (* ; 
                                                     "So if it's used, it'll be in the correct spot.")
          (SETSEL SCRATCHSEL SELKIND 'CHAR)
          (SETSEL SCRATCHSEL SET T)
          (CL:UNLESS DON'TFIX (\FIXSEL SCRATCHSEL TEXTOBJ))
          (RETURN SCRATCHSEL])

(MBUTTON.INIT
  [LAMBDA NIL                                                (* jds "12-Feb-85 14:32")
    (SETQ MBUTTONIMAGEFNS (IMAGEFNSCREATE (FUNCTION MB.DISPLAY)
                                 (FUNCTION MB.SIZEFN)
                                 (FUNCTION MB.PUTFN)
                                 (FUNCTION MB.GETFN)
                                 'MB.COPYFN
                                 (FUNCTION MB.BUTTONEVENTINFN)
                                 'NILL
                                 'NILL
                                 'NILL
                                 'NILL
                                 'NILL
                                 (FUNCTION MB.WHENOPERATEDFN)
                                 'NIL
                                 'TEditMenuButton])

(MBUTTON.NEXT.FIELD.AS.NUMBER
  [LAMBDA (TEXTOBJ CH#)                                      (* ; "Edited 15-Dec-2023 13:59 by rmk")
                                                             (* ; "Edited 30-Jul-2023 08:54 by rmk")
                                                            (* ; "Edited 12-Jun-90 19:00 by mitani")
    (MBUTTON.FIND.NEXT.FIELD TEXTOBJ CH# T)
    (LET [(VAL (TEDIT.SEL.AS.STRING (fetch (TEXTOBJ STREAMHINT) of TEXTOBJ)
                      (fetch (TEXTOBJ SCRATCHSEL) of TEXTOBJ]
         (CL:WHEN (IGREATERP (NCHARS VAL)
                         0)
             (SETQ VAL (MKATOM (CL:STRING-TRIM '(#\Space #\Newline)
                                      VAL)))
             (if (NUMBERP VAL)
               else (TEDIT.PROMPTPRINT TEXTOBJ (CONCAT VAL " is not a number, ignored")
                           T T)
                    NIL))])

(MBUTTON.NEXT.FIELD.AS.TEXT
  [LAMBDA (TEXTOBJ CH#)                                      (* ; "Edited 22-Apr-93 16:14 by jds")

    (* ;; "Find the next fill-in field in the menu after CH#, and return its contents as a string.")

    (MBUTTON.FIND.NEXT.FIELD TEXTOBJ CH# T)
    (TEDIT.SEL.AS.STRING (fetch (TEXTOBJ STREAMHINT) of TEXTOBJ)
           (fetch (TEXTOBJ SCRATCHSEL) of TEXTOBJ])

(MBUTTON.NEXT.FIELD.AS.ATOM
  [LAMBDA (TEXTOBJ CH#)                                     (* ; "Edited 12-Jun-90 19:00 by mitani")

         (* Find the next fill-in field, and return its contents as an atom.
         If the field is empty, return NIL.)

    (MBUTTON.FIND.NEXT.FIELD TEXTOBJ CH# T)                  (* Move to the next fill-in blank.)
    (PROG [(STR (TEDIT.SEL.AS.STRING (fetch (TEXTOBJ STREAMHINT) of TEXTOBJ)
                       (fetch (TEXTOBJ SCRATCHSEL) of TEXTOBJ]
          (COND
             ((ZEROP (NCHARS STR))                           (* The field is empty.)
              (RETURN NIL))
             (T                                              (* It's non-empty. Convert the string 
                                                             to an atom.)
                (RETURN (MKATOM STR])

(MBUTTON.SET.FIELD
  [LAMBDA (TEXTSTREAM FIELD VALUE)                           (* ; "Edited 21-Oct-2023 08:55 by rmk")
                                                             (* ; "Edited 13-Sep-2022 12:24 by rmk")
                                                             (* ; "Edited  6-Aug-2022 17:45 by rmk")
                                                             (* ; "Edited 22-Apr-93 10:56 by jds")

    (* ;; "Makes the contents of the field with name FIELD be VALUE.")

    (LET ((TEXTOBJ (TEXTOBJ TEXTSTREAM))
          OBJ SAVED.SEL FIELD.SEL PC NEW-STRING)
         (SETQ PC (MBUTTON.FIND.BUTTON FIELD TEXTSTREAM))
         (CL:WHEN (SETQ PC (MBUTTON.FIND.BUTTON FIELD TEXTSTREAM))
             (SETQ FIELD.SEL (MBUTTON.FIND.NEXT.FIELD TEXTOBJ (\PCTOCH PC TEXTOBJ)))
                                                             (* ; 
                                                            "select the field following this button.")
             (CL:WHEN FIELD.SEL                              (* ; 
                                                          "there are contents to set for this button")
                 (\FIXSEL FIELD.SEL TEXTOBJ)
                 (TEDIT.SETSEL TEXTSTREAM (fetch (SELECTION CH#) of FIELD.SEL)
                        (fetch (SELECTION DCH) of FIELD.SEL)
                        (fetch (SELECTION POINT) of FIELD.SEL)
                        T)
                 (SETQ NEW-STRING (MKSTRING VALUE))
                 [COND
                    ((ZEROP (NCHARS NEW-STRING))             (* ; 
                                                             "Nothing to replace, so just delete it.")
                     (TEDIT.DELETE TEXTSTREAM))
                    (T                                       (* ; "there IS new info, so insert it.")
                       (TEDIT.INSERT TEXTSTREAM (MKSTRING VALUE]))])

(MBUTTON.SET.NEXT.FIELD
  [LAMBDA (TEXTOBJ CH# NEWVALUE DONTUPDATESCREEN)            (* ; "Edited 22-May-2023 10:50 by rmk")
                                                             (* ; "Edited 20-Mar-2023 12:40 by rmk")
                                                             (* ; "Edited 18-Mar-2023 23:18 by rmk")
                                                             (* ; "Edited 11-Feb-2023 09:33 by rmk")
                                                             (* ; "Edited 30-May-91 22:15 by jds")

    (* ;; "SET the text content of the next fill-in field in this document to be NEWVALUE.  Perhaps SHOULDNT if it can't find one?")

    (LET (FIELDSEL)
         (CL:WHEN (SETQ FIELDSEL (MBUTTON.FIND.NEXT.FIELD TEXTOBJ CH#))
             (\FIXSEL FIELDSEL TEXTOBJ)                      (* ; 
     "Fix up the SELECTION that describes its contents, so we've got the right screen coordinates &c")
             (CL:UNLESS (ZEROP (fetch (SELECTION DCH) of FIELDSEL))
                    (\TEDIT.DELETE TEXTOBJ FIELDSEL))        (* ; "Delete existing text")
             (CL:WHEN NEWVALUE
                 (\TEDIT.INSERT (MKSTRING NEWVALUE)
                        FIELDSEL TEXTOBJ)))])

(MBUTTON.SET.NEXT.BUTTON.STATE
  [LAMBDA (TEXTOBJ STARTINGCH NEWSTATE)                      (* jds "31-Jul-85 22:09")

         (* * Find the next menu button in the document, and set its state to NEWSTATE.
         Return 1 + the CH# of the button, for further searchers)

    (PROG* ((NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ STARTINGCH))
            (BUTTON (CAR NEXTB)))
           (IMAGEOBJPROP BUTTON 'STATE NEWSTATE)
           (RETURN (ADD1 (CDR NEXTB])

(TEDITMENU.STREAM
  [LAMBDA (TEXTSTREAM)                                       (* ; "Edited 10-Apr-2023 09:53 by rmk")
                                                             (* jds "13-Aug-84 14:10")

    (* ;; "returns the textstream of the teditmenu attached to this stream if any")

    (for W in (ATTACHEDWINDOWS (\TEDIT.MAINW TEXTSTREAM)) when (TEDITMENUP W "TEdit Menu")
       do (RETURN (TEXTSTREAM W])
)
(DECLARE%: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS MBUTTONIMAGEFNS)
)
(DECLARE%: DONTEVAL@LOAD DOCOPY 

(MBUTTON.INIT)


(ADDTOVAR IMAGEOBJTYPES (TEditMenuButton FILE TEDITMENU GETFN MB.GETFN))
)



(* ;; "Three-state (ON-OFF-NEUTRAL) menu buttons, for, e.g., character properties like BOLD")

(DEFINEQ

(MB.CREATE.THREESTATEBUTTON
  [LAMBDA (TEXT FONT STATECHANGEFN INITSTATE)                (* jds "24-Sep-86 00:49")
    (PROG ((OBJ (IMAGEOBJCREATE NIL THREESTATEIMAGEFNS))
           (BOX (create IMAGEBOX
                       XSIZE _ (STRINGWIDTH TEXT FONT)
                       YSIZE _ (FONTPROP FONT 'HEIGHT)
                       YDESC _ (FONTPROP FONT 'DESCENT)
                       XKERN _ 0))
           DS BITMAP X Y)
          (SETQ X (fetch XSIZE of BOX))
          (SETQ Y (fetch YSIZE of BOX))
          (IMAGEOBJPROP OBJ 'MBTEXT TEXT)
          (IMAGEOBJPROP OBJ 'MBFONT FONT)
          (IMAGEOBJPROP OBJ 'MBFN 'MB.THREESTATEBUTTON.FN)
          (IMAGEOBJPROP OBJ 'STATECHANGEFN STATECHANGEFN)
          (IMAGEOBJPROP OBJ 'STATE (OR INITSTATE 'NEUTRAL))
          (SETQ BITMAP (BITMAPCREATE X Y))
          (IMAGEOBJPROP OBJ 'BITCACHE BITMAP)
          (SETQ DS (DSPCREATE BITMAP))
          (DSPXOFFSET 0 DS)
          (DSPYOFFSET 0 DS)
          (DSPFONT FONT DS)
          (MOVETO 0 (FONTPROP FONT 'DESCENT)
                 DS)
          (PRIN1 (IMAGEOBJPROP OBJ 'MBTEXT)
                 DS)
          (RETURN OBJ])

(MB.THREESTATE.DISPLAY
  [LAMBDA (OBJ STREAM MODE)                                  (* ; "Edited 20-Nov-2023 14:27 by rmk")
                                                             (* jds "30-Aug-84 13:53")

    (* ;; "Display the innards of a menu button")

    (PROG (DS (OBJBOX (IMAGEOBJPROP OBJ 'BOUNDBOX))
              (FONT (IMAGEOBJPROP OBJ 'MBFONT))
              (CURX (DSPXPOSITION NIL STREAM))
              (CURY (DSPYPOSITION NIL STREAM))
              BITMAP X Y)
          (OR OBJBOX (SETQ OBJBOX (MB.SIZEFN OBJ STREAM)))   (* ; "Make sure the size is set.")
          (SETQ X (fetch XSIZE of OBJBOX))
          (SETQ Y (fetch YSIZE of OBJBOX))
          (COND
             ((SETQ BITMAP (IMAGEOBJPROP OBJ 'BITCACHE))     (* ; 
                                                          "The image bitmap exists already.  Use it.")
              )
             (T                                              (* ; 
                                                           "Need to create an image for this object.")
                (SETQ BITMAP (BITMAPCREATE X Y))
                (IMAGEOBJPROP OBJ 'BITCACHE BITMAP)
                (SETQ DS (DSPCREATE BITMAP))
                (DSPXOFFSET 0 DS)
                (DSPYOFFSET 0 DS)
                (DSPFONT FONT DS)
                (MOVETO 0 (FONTPROP FONT 'DESCENT)
                       DS)
                (PRIN1 (IMAGEOBJPROP OBJ 'MBTEXT)
                       DS)))
          (BITBLT BITMAP 0 0 STREAM CURX (IDIFFERENCE CURY (fetch YDESC of OBJBOX))
                 X Y 'INPUT 'PAINT)
          (SELECTQ (IMAGEOBJPROP OBJ 'STATE)
              (ON                                            (* ; 
                                    "The button is ON.  Display it as white text on black background")
                  (BLTSHADE BLACKSHADE STREAM CURX (IDIFFERENCE CURY (fetch YDESC of OBJBOX))
                         X Y 'INVERT))
              (OFF                                           (* ; 
                                          "The button is OFF.  Mark it with a diagonal line thru it.")
                   (DRAWLINE CURX (IDIFFERENCE CURY (fetch YDESC of OBJBOX))
                          (SUB1 (IPLUS CURX X))
                          (SUB1 (IPLUS (IDIFFERENCE CURY (fetch YDESC of OBJBOX))
                                       Y))
                          1
                          'PAINT STREAM))
              (NEUTRAL                                       (* ; 
                                                   "The button is neutral.  Just display it regular."))
              NIL])

(MB.THREESTATE.SHOWSELFN
  [LAMBDA (OBJ SEL ON DS)                                    (* ; "Edited 20-Nov-2023 14:31 by rmk")
                                                             (* ; "Edited 30-May-91 22:16 by jds")
    (LET [(IMAGEBOX (OR (IMAGEOBJPROP OBJ 'BOUNDBOX)
                        (IMAGEBOX OBJ DS]
         (COND
            (ON (SELECTQ (IMAGEOBJPROP OBJ 'STATE)
                    (ON                                      (* ; "Switch from ON to NEUTRAL")
                        (BLTSHADE BLACKSHADE DS 0 0 (fetch XSIZE of IMAGEBOX)
                               (fetch YSIZE of IMAGEBOX)
                               'INVERT))
                    (OFF                                     (* ; "Switch from OFF to ON")
                         (BITBLT (IMAGEOBJPROP OBJ 'BITCACHE)
                                0 0 DS 0 0 (fetch XSIZE of IMAGEBOX)
                                (fetch YSIZE of IMAGEBOX)
                                'INPUT
                                'REPLACE)
                         (BLTSHADE BLACKSHADE DS 0 0 (fetch XSIZE of IMAGEBOX)
                                (fetch YSIZE of IMAGEBOX)
                                'INVERT))
                    (NEUTRAL                                 (* ; "Switch from NEUTRAL to OFF")
                             (DRAWLINE 0 0 (SUB1 (fetch XSIZE of IMAGEBOX))
                                    (SUB1 (fetch YSIZE of IMAGEBOX))
                                    1
                                    'PAINT DS))
                    NIL))
            ((GETSEL SEL SET)
             (SELECTQ (IMAGEOBJPROP OBJ 'STATE)
                 (ON                                         (* ; "Switch from NEUTRAL to ON")
                     (BLTSHADE BLACKSHADE DS 0 0 (fetch XSIZE of IMAGEBOX)
                            (fetch YSIZE of IMAGEBOX)
                            'INVERT))
                 (OFF                                        (* ; "Switch from ON to OFF")
                      (BLTSHADE BLACKSHADE DS 0 0 (fetch XSIZE of IMAGEBOX)
                             (fetch YSIZE of IMAGEBOX)
                             'INVERT)
                      (DRAWLINE 0 0 (SUB1 (fetch XSIZE of IMAGEBOX))
                             (SUB1 (fetch YSIZE of IMAGEBOX))
                             1
                             'PAINT DS))
                 (NEUTRAL                                    (* ; "Switch from OFF to NEUTRAL")
                          (BITBLT (IMAGEOBJPROP OBJ 'BITCACHE)
                                 0 0 DS 0 0 (fetch XSIZE of IMAGEBOX)
                                 (fetch YSIZE of IMAGEBOX)
                                 'INPUT
                                 'REPLACE))
                 NIL])

(MB.THREESTATE.WHENOPERATEDFN
  [LAMBDA (OBJ DS OPERATION SEL)                             (* ; "Edited 28-Jan-2024 23:33 by rmk")
                                                             (* ; "Edited 30-May-91 22:16 by jds")
                                                             (* ; 
                                                          "Handle operations on a three-state button")
    (SELECTQ OPERATION
        (HIGHLIGHTED                                         (* ; "It is being hilighted")
                     (MB.THREESTATE.SHOWSELFN OBJ SEL T DS))
        (UNHIGHLIGHTED                                       (* ; "And being de-hilighted")
                       (MB.THREESTATE.SHOWSELFN OBJ SEL NIL DS))
        (SELECTED                                            (* ; "It's being selected")
                  (MB.THREESTATEBUTTON.FN OBJ SEL DS)        (* ; "Run the state-changing function")
                  (SETSEL SEL SET NIL)                       (* ; 
                         "And mar the selection turned off, so others can use it without trashing us")
                  (SETSEL SEL ONFLG NIL)
                  (SETSEL \TEDIT.SELECTION SET NIL))
        (DESELECTED)
        NIL])

(MB.THREESTATEBUTTON.FN
  [LAMBDA (OBJ SEL W)                                        (* ; "Edited 21-Oct-2022 18:45 by rmk")
                                                             (* ; "Edited 30-May-91 22:16 by jds")
                                                             (* MBFN for TEdit default menu item 
                                                             buttons.)
    (PROG ((TEXTOBJ (fetch (SELECTION SELTEXTOBJ) of SEL))
           (STATECHANGEFN (IMAGEOBJPROP OBJ 'STATECHANGEFN))
           OFILE CH NEWSTATE)
          (SETQ NEWSTATE (SELECTQ (IMAGEOBJPROP OBJ 'STATE)
                             (OFF 'ON)
                             (ON 'NEUTRAL)
                             (NEUTRAL 'OFF)
                             'ON))
          (if STATECHANGEFN
              then                                           (* apply the user supplied state 
                                                             change fn if she supplied one)
                   (APPLY* STATECHANGEFN OBJ NEWSTATE (TEXTSTREAM TEXTOBJ)))
          (IMAGEOBJPROP OBJ 'STATE NEWSTATE)
          (replace (SELECTION ONFLG) of SEL with NIL])

(THREESTATE.INIT
  [LAMBDA NIL                                                (* jds " 9-Feb-86 15:17")
                                                             (* Initialize the IMAGEFNS for 3-state 
                                                             menu button IMAGEOBJs)
    (SETQ THREESTATEIMAGEFNS (IMAGEFNSCREATE (FUNCTION MB.THREESTATE.DISPLAY)
                                    (FUNCTION MB.SIZEFN)
                                    (FUNCTION MB.PUTFN)
                                    (FUNCTION MB.GETFN)
                                    (FUNCTION MB.COPYFN)
                                    (FUNCTION MB.BUTTONEVENTINFN)
                                    'NILL
                                    'NILL
                                    'NILL
                                    'NILL
                                    'NILL
                                    (FUNCTION MB.THREESTATE.WHENOPERATEDFN)
                                    'NILL
                                    '3StateMenuButton])
)
(DECLARE%: DONTEVAL@LOAD DOCOPY 

(THREESTATE.INIT)
)



(* ; "One-of-N Menu button sets")

(DEFINEQ

(MB.CREATE.NWAYBUTTON
  [LAMBDA (BUTTONS FONT CHANGESTATEFN INITSTATE MAXITEMS/LINE)
                                                             (* gbn "24-Sep-84 15:31")
    (PROG ((OBJECT (IMAGEOBJCREATE NIL NWAYBUTTONIMAGEFNS))
           HEIGHT IMAGES IMAGE DS DESCENT SPACING SIDEEFFECTFNS WIDTHS TWIDTHS)
          (SETQ FONT (OR FONT (FONTCREATE 'HELVETICA 10)))
          (SETQ HEIGHT (FONTPROP FONT 'HEIGHT))
          (SETQ DESCENT (FONTPROP FONT 'DESCENT))
          (SETQ WIDTHS (for BUTTON in BUTTONS collect (STRINGWIDTH (COND
                                                                      ((NLISTP BUTTON)
                                                                       BUTTON)
                                                                      (T (CAR BUTTON)))
                                                             FONT)))
          (SETQ IMAGES (for WIDTH in WIDTHS as BUTTON in BUTTONS collect (BITMAPCREATE WIDTH HEIGHT))
           )
          (SETQ SPACING (STRINGWIDTH "   " FONT))
          [SETQ SIDEEFFECTFNS (for BUTTON in BUTTONS collect (AND (LISTP BUTTON)
                                                                  (CADR BUTTON]
          (SETQ DS (DSPCREATE))
          (DSPXOFFSET 0 DS)
          (DSPYOFFSET 0 DS)
          (DSPFONT FONT DS)
          (DSPRIGHTMARGIN 32000 DS)
          (for IMAGE in IMAGES as BUTTON in BUTTONS do (DSPDESTINATION IMAGE DS)
                                                       (MOVETO 0 DESCENT DS)
                                                       (PRIN1 (COND
                                                                 ((NLISTP BUTTON)
                                                                  BUTTON)
                                                                 (T (CAR BUTTON)))
                                                              DS))
          (IMAGEOBJPROP OBJECT 'MINWIDTH (for WIDTH in WIDTHS largest WIDTH))
                                                             (* We always need at least one 
                                                             button's width)
          (IMAGEOBJPROP OBJECT 'MINHEIGHT (IPLUS HEIGHT 2))  (* And at least one button's height)
          [IMAGEOBJPROP OBJECT 'MAXWIDTH (COND
                                            [MAXITEMS/LINE (SETQ TWIDTHS (SORT (COPY WIDTHS)))
                                                   (IPLUS (CAR TWIDTHS)
                                                          (for WIDTH in (CDR TWIDTHS) as I
                                                             from 1 to (SUB1 MAXITEMS/LINE)
                                                             sum (IPLUS WIDTH SPACING]
                                            (T (IPLUS (CAR WIDTHS)
                                                      (for WIDTH in (CDR WIDTHS)
                                                         sum (IPLUS WIDTH SPACING]
                                                             (* At most, we're as wide as the N 
                                                             widest buttons put together)
          (IMAGEOBJPROP OBJECT 'MAXHEIGHT (ITIMES (IPLUS HEIGHT 2)
                                                 (LENGTH BUTTONS)))
          (IMAGEOBJPROP OBJECT 'ITEMSPACE SPACING)
          (IMAGEOBJPROP OBJECT 'BUTTONS BUTTONS)
          (IMAGEOBJPROP OBJECT 'BUTTONIMAGES IMAGES)
          (IMAGEOBJPROP OBJECT 'BUTTONHEIGHT (IPLUS HEIGHT 2))
          (IMAGEOBJPROP OBJECT 'BUTTONWIDTHS WIDTHS)
          (IMAGEOBJPROP OBJECT 'NBUTTONS (LENGTH BUTTONS))
          (IMAGEOBJPROP OBJECT 'STATE INITSTATE)
          (IMAGEOBJPROP OBJECT 'SELECTEDBUTTON NIL)
          (IMAGEOBJPROP OBJECT 'SIDEEFFECTFNS SIDEEFFECTFNS)
          (IMAGEOBJPROP OBJECT 'DESCENT DESCENT)
          (IMAGEOBJPROP OBJECT 'MBFONT FONT)
          (IMAGEOBJPROP OBJECT 'MAXITEMS/LINE MAXITEMS/LINE)
          (RETURN OBJECT])

(MB.NB.DISPLAYFN
  [LAMBDA (OBJ STREAM MODE)                                  (* jds "28-Aug-84 15:07")
                                                             (* Display the innards of a menu 
                                                             button)
    (PROG (BITMAP DS (OBJBOX (IMAGEOBJPROP OBJ 'BOUNDBOX))
                 (X (DSPXPOSITION NIL STREAM))
                 (Y (DSPYPOSITION NIL STREAM))
                 (BUTTONX (IMAGEOBJPROP OBJ 'BUTTONX))
                 (BUTTONY (IMAGEOBJPROP OBJ 'BUTTONY))
                 (BUTTONLIST (IMAGEOBJPROP OBJ 'BUTTONS))
                 (BUTTONIMAGES (IMAGEOBJPROP OBJ 'BUTTONIMAGES))
                 STATE)
          [COND
             ((SETQ BITMAP (IMAGEOBJPROP OBJ 'IMAGECACHE))   (* The button image exists already)
              )
             (T                                              (* Have to make one.)
                (SETQ BITMAP (BITMAPCREATE (fetch XSIZE of OBJBOX)
                                    (fetch YSIZE of OBJBOX)))
                (IMAGEOBJPROP OBJ 'IMAGECACHE BITMAP)
                (SETQ DS (DSPCREATE BITMAP))
                (DSPXOFFSET 0 DS)
                (DSPYOFFSET 0 DS)
                (DSPFONT (IMAGEOBJPROP OBJ 'MBFONT)
                       DS)
                (for X in BUTTONX as Y in BUTTONY as IMAGE in BUTTONIMAGES
                   do                                        (* Display the images)
                      (BITBLT IMAGE 0 0 DS X Y NIL NIL 'INPUT 'REPLACE]
          [BITBLT BITMAP 0 0 STREAM X (SETQ Y (IDIFFERENCE Y (fetch YDESC of OBJBOX]
                                                             (* Display the button's image)
          (COND
             ((SETQ STATE (IMAGEOBJPROP OBJ 'STATE))         (* There's a selected button.)
              (for BXVAL in BUTTONX as BYVAL in BUTTONY as IMAGE in BUTTONIMAGES as BUTTON
                 in BUTTONLIST when (EQ STATE BUTTON) do (BITBLT IMAGE 0 0 STREAM (IPLUS X BXVAL)
                                                                (IPLUS Y BYVAL)
                                                                NIL NIL 'INVERT 'REPLACE])

(MB.NB.WHENOPERATEDFN
  [LAMBDA (OBJ DS OPERATION SEL)                             (* ; "Edited  9-Apr-2023 15:57 by rmk")
                                                             (* ; "Edited 13-Sep-2022 12:09 by rmk")
                                                             (* ; "Edited 30-May-91 22:16 by jds")
    (SELECTQ OPERATION
        (HIGHLIGHTED                                         (* (MB.SHOWSELFN OBJ SEL T DS))
                     NIL)
        (UNHIGHLIGHTED                                       (* (MB.SHOWSELFN OBJ SEL NIL DS))
                       NIL)
        (SELECTED 
                  (* ;; "There may be a side-effect to occur upon selection.")

                  (for BUTTON (STATE _ (IMAGEOBJPROP OBJ 'STATE)) in (IMAGEOBJPROP OBJ 'BUTTONS)
                     as SIDEFN in (IMAGEOBJPROP OBJ 'SIDEEFFECTFNS)
                     when (AND (EQ STATE BUTTON)
                               SIDEFN) do (MB.SELFN OBJ SEL DS SIDEFN))
                  (replace (SELECTION SET) of SEL with NIL))
        (DESELECTED)
        NIL])

(MB.NB.SIZEFN
  [LAMBDA (OBJ STREAM CURX RIGHTMARGIN)                      (* jds " 6-Sep-84 14:19")
                                                             (* Tell the size of an n-way menu)
    (PROG ((OLDBOX (IMAGEOBJPROP OBJ 'BOUNDBOX))
           BOX
           (MAXITEMS/LINE (IMAGEOBJPROP OBJ 'MAXITEMS/LINE))
           (MAXWIDTH (IMAGEOBJPROP OBJ 'MAXWIDTH))
           (MINWIDTH (IMAGEOBJPROP OBJ 'MINWIDTH))
           (MAXHEIGHT (IMAGEOBJPROP OBJ 'MAXHEIGHT))
           (MINHEIGHT (IMAGEOBJPROP OBJ 'MINHEIGHT))
           (LINEHEIGHT (IMAGEOBJPROP OBJ 'LINEHEIGHT))
           (BUTTONHEIGHT (IMAGEOBJPROP OBJ 'BUTTONHEIGHT))
           (BUTTONWIDTHS (IMAGEOBJPROP OBJ 'BUTTONWIDTHS))
           (SPACING (IMAGEOBJPROP OBJ 'ITEMSPACE))
           (SLACK (IDIFFERENCE RIGHTMARGIN CURX))
           BUTTONX BUTTONY BUTTONINFO WIDTH HEIGHT)
          [COND
             ((AND (IGEQ SLACK MAXWIDTH)
                   (NOT MAXITEMS/LINE))                      (* There's space for all the items on 
                                                             one line. Use it)
              (SETQ WIDTH MAXWIDTH)
              (SETQ HEIGHT MINHEIGHT)
              [SETQ BUTTONX (bind (CURX _ 0) for ITEM in BUTTONWIDTHS
                               collect (PROG1 CURX
                                           (add CURX SPACING)
                                           (add CURX ITEM))]
              (SETQ BUTTONY (for ITEM in BUTTONWIDTHS collect 0)))
             [(ILEQ SLACK MINWIDTH)                          (* Have to stack it vertically.)
              (SETQ WIDTH MINWIDTH)
              (SETQ HEIGHT MAXHEIGHT)
              (SETQ BUTTONX (for ITEM in BUTTONWIDTHS collect 0))
              (SETQ BUTTONY (bind (CURY _ (ITIMES BUTTONHEIGHT (LENGTH BUTTONWIDTHS))) for ITEM
                               in BUTTONWIDTHS collect (add CURY (IMINUS BUTTONHEIGHT]
             (T (SETQ BUTTONINFO (MB.NB.PACKITEMS SLACK BUTTONWIDTHS SPACING MAXITEMS/LINE))
                [SETQ BUTTONX (for LINE in BUTTONINFO join (COPY (CDR LINE]
                [SETQ BUTTONY (bind (CURY _ (ITIMES BUTTONHEIGHT (LENGTH BUTTONINFO))) for LINE
                                 in BUTTONINFO join (PROGN (SETQ CURY (IDIFFERENCE CURY BUTTONHEIGHT)
                                                            )
                                                           (for X in (CDR LINE) collect CURY]
                [SETQ WIDTH (CAR (for LINE in BUTTONINFO largest (CAR LINE]
                (SETQ HEIGHT (ITIMES BUTTONHEIGHT (LENGTH BUTTONINFO]
          (COND
             ((AND OLDBOX (IEQP WIDTH (fetch XSIZE of OLDBOX))
                   (IEQP HEIGHT (fetch YSIZE of OLDBOX)))    (* If nothing changed, don't bother 
                                                             reformatting.)
              (RETURN OLDBOX))
             (T                                              (* Otherwise invalidate the image 
                                                             cache)
                (IMAGEOBJPROP OBJ 'IMAGECACHE NIL)))
          (SETQ BOX (create IMAGEBOX
                           XSIZE _ WIDTH
                           YSIZE _ HEIGHT
                           YDESC _ (IMAGEOBJPROP OBJ 'DESCENT)
                           XKERN _ 0))
          (IMAGEOBJPROP OBJ 'BOUNDBOX BOX)
          (IMAGEOBJPROP OBJ 'BUTTONX BUTTONX)
          (IMAGEOBJPROP OBJ 'BUTTONY BUTTONY)
          (RETURN BOX])

(MB.NWAYBUTTON.SELFN
  [LAMBDA (OBJ W SEL MOUSEX MOUSEY)                          (* ; "Edited 21-Oct-2022 18:46 by rmk")
                                                             (* ; "Edited 30-May-91 22:16 by jds")
                                                             (* Selecting an NWAY button.)
    (PROG ((TEXTOBJ (fetch (SELECTION SELTEXTOBJ) of SEL))
           (OBJBOX (IMAGEOBJPROP OBJ 'BOUNDBOX))
           (OLDSTATE (IMAGEOBJPROP OBJ 'STATE))
           (BUTTONLIST (IMAGEOBJPROP OBJ 'BUTTONS))
           (BUTTONX (IMAGEOBJPROP OBJ 'BUTTONX))
           (BUTTONIMAGES (IMAGEOBJPROP OBJ 'BUTTONIMAGES))
           (BUTTONY (IMAGEOBJPROP OBJ 'BUTTONY))
           (BUTTONWIDTHS (IMAGEOBJPROP OBJ 'BUTTONWIDTHS))
           (BUTTONLIST (IMAGEOBJPROP OBJ 'BUTTONLIST))
           (BUTTONHEIGHT (IMAGEOBJPROP OBJ 'BUTTONHEIGHT))
           CH STATE)
          [for BUTTON in BUTTONLIST as X in BUTTONX as Y in BUTTONY as WIDTH in BUTTONWIDTHS
             as IMAGE in BUTTONIMAGES
             do (COND
                   ((INSIDE? (create REGION
                                    LEFT _ X
                                    BOTTOM _ Y
                                    WIDTH _ WIDTH
                                    HEIGHT _ BUTTONHEIGHT)
                           MOUSEX MOUSEY)                    (* The mouse is pointing here.
                                                             Select this.)
                    (SETQ STATE BUTTON)
                    (BITBLT IMAGE 0 0 W X Y NIL NIL 'INVERT 'REPLACE))
                   ((EQ OLDSTATE BUTTON)                     (* This was the old selection
                                                             (and it's different, too)%.
                                                             Unselect it)
                    (BITBLT IMAGE 0 0 W X Y NIL NIL 'INPUT 'REPLACE]
          (IMAGEOBJPROP OBJ 'STATE STATE)
          (RETURN T])

(MB.NWAYMENU.NEWBUTTON
  [LAMBDA (TEXTOBJ CH# OLDBUTTON NEWBUTTON)                  (* jds " 8-Feb-84 19:41")

         (* Given a hook on an existing button, and an insertion point, insert a new 
         button)

    (PROG ((ARBITRATOR (IMAGEOBJPROP OLDBUTTON 'ARBITRATOR))
           BUTTON)
          (IMAGEOBJPROP BUTTON 'ARBITRATOR ARBITRATOR)
          (TEDIT.INSERT.OBJECT BUTTON TEXTOBJ CH#)
          (TEDIT.INSERT TEXTOBJ "  " (ADD1 CH#))
          (TEDIT.LOOKS TEXTOBJ '(PROTECTED ON)
                 (ADD1 CH#)
                 2)
          (RETURN BUTTON])

(NWAYBUTTON.INIT
  [LAMBDA (BUTTONS FONT INITSTATE)                           (* jds " 9-Feb-86 15:17")
    (SETQ NWAYBUTTONIMAGEFNS (IMAGEFNSCREATE (FUNCTION MB.NB.DISPLAYFN)
                                    (FUNCTION MB.NB.SIZEFN)
                                    (FUNCTION MB.PUTFN)
                                    (FUNCTION MB.GETFN)
                                    (FUNCTION MB.COPYFN)
                                    (FUNCTION MB.NWAYBUTTON.SELFN)
                                    'NILL
                                    'NILL
                                    'NILL
                                    'NILL
                                    'NILL
                                    (FUNCTION MB.NB.WHENOPERATEDFN)
                                    'NILL
                                    'NWayButton])

(MB.NB.PACKITEMS
  [LAMBDA (WIDTH ITEMWIDTHS SPACING MAXITEMS/LINE)           (* jds "24-Oct-84 17:42")

         (* * Pack items into lines WIDTH wide. Item widths are in ITEMWIDTHS, and each 
         pair of items on a line is separated by SPACING.
         Returns a list of lists, one per line packed, of the relative X starts of the 
         items)

    (PROG ((CURX 0)
           (LINES NIL)
           (CURLINE NIL)
           (CURLINEITEMS 0)
           ITEM)
          (while ITEMWIDTHS do (SETQ ITEM (pop ITEMWIDTHS))
                               (COND
                                  ((OR [ILESSP WIDTH (IPLUS CURX ITEM (COND
                                                                         (CURLINE SPACING)
                                                                         (T 0]
                                       (AND MAXITEMS/LINE (IGEQ CURLINEITEMS MAXITEMS/LINE)))
                                                             (* Time for a new line)
                                   (SETQ LINES (NCONC1 LINES (CONS CURX CURLINE)))
                                                             (* Add to our list of lines so far)
                                   (SETQ CURLINE NIL)        (* Empty the line accumulator)
                                   (SETQ CURLINEITEMS 0)     (* reset the line item count)
                                   (SETQ CURX 0)))
                               (AND CURLINE (add CURX SPACING))
                               (SETQ CURLINE (NCONC1 CURLINE CURX))
                               (add CURX ITEM)
                               (add CURLINEITEMS 1))
          [AND CURLINE (SETQ LINES (NCONC1 LINES (CONS CURX CURLINE]
                                                             (* Capture the last partial line, if 
                                                             there is one.)
          (RETURN LINES])

(MB.NWAYBUTTON.ADDITEM
  [LAMBDA (OBJECT NEWBUTTON)                                 (* jds "11-Jul-85 12:44")
                                                             (* Given an existing n-way choice menu 
                                                             button, add another choice to the list)
    (PROG ([BUTTONS (CONS NEWBUTTON (IMAGEOBJPROP OBJECT 'BUTTONS]
           HEIGHT IMAGES IMAGE DS DESCENT SPACING SIDEEFFECTFNS WIDTHS FONT)
          (SETQ FONT (IMAGEOBJPROP OBJECT 'MBFONT))
          (SETQ HEIGHT (FONTPROP FONT 'HEIGHT))
          (SETQ DESCENT (FONTPROP FONT 'DESCENT))
          (SETQ WIDTHS (for BUTTON in BUTTONS collect (STRINGWIDTH (COND
                                                                      ((NLISTP BUTTON)
                                                                       BUTTON)
                                                                      (T (CAR BUTTON)))
                                                             FONT)))
          (SETQ IMAGES (for WIDTH in WIDTHS as BUTTON in BUTTONS collect (BITMAPCREATE WIDTH HEIGHT))
           )
          (SETQ SPACING (STRINGWIDTH "   " FONT))
          [SETQ SIDEEFFECTFNS (for BUTTON in BUTTONS collect (AND (LISTP BUTTON)
                                                                  (CADR BUTTON]
          (SETQ DS (DSPCREATE))
          (DSPXOFFSET 0 DS)
          (DSPYOFFSET 0 DS)
          (DSPFONT FONT DS)
          (DSPRIGHTMARGIN 32000 DS)
          (for IMAGE in IMAGES as BUTTON in BUTTONS do (DSPDESTINATION IMAGE DS)
                                                       (MOVETO 0 DESCENT DS)
                                                       (PRIN1 (COND
                                                                 ((NLISTP BUTTON)
                                                                  BUTTON)
                                                                 (T (CAR BUTTON)))
                                                              DS))
          (IMAGEOBJPROP OBJECT 'MINWIDTH (for WIDTH in WIDTHS largest WIDTH))
          (IMAGEOBJPROP OBJECT 'MINHEIGHT (IPLUS HEIGHT 2))
          [IMAGEOBJPROP OBJECT 'MAXWIDTH (IPLUS (CAR WIDTHS)
                                                (for WIDTH in (CDR WIDTHS)
                                                   sum (IPLUS WIDTH SPACING]
          (IMAGEOBJPROP OBJECT 'MAXHEIGHT (ITIMES (IPLUS HEIGHT 2)
                                                 (LENGTH BUTTONS)))
          (IMAGEOBJPROP OBJECT 'ITEMSPACE SPACING)
          (IMAGEOBJPROP OBJECT 'BUTTONS BUTTONS)
          (IMAGEOBJPROP OBJECT 'BUTTONIMAGES IMAGES)
          (IMAGEOBJPROP OBJECT 'BUTTONHEIGHT (IPLUS HEIGHT 2))
          (IMAGEOBJPROP OBJECT 'BUTTONWIDTHS WIDTHS)
          (IMAGEOBJPROP OBJECT 'NBUTTONS (LENGTH BUTTONS))
          (IMAGEOBJPROP OBJECT 'SELECTEDBUTTON NIL)
          (IMAGEOBJPROP OBJECT 'SIDEEFFECTFNS SIDEEFFECTFNS)
          (IMAGEOBJPROP OBJECT 'DESCENT DESCENT)
          (RETURN OBJECT])
)
(DECLARE%: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS NWAYBUTTONIMAGEFNS)
)
(DECLARE%: DONTEVAL@LOAD DOCOPY 

(NWAYBUTTON.INIT)


(ADDTOVAR IMAGEOBJTYPES (NWayButton FILE TEDITMENU GETFN MB.GETFN))
)



(* ;; "Two-state, toggling menu buttons.")

(DEFINEQ

(\TEXTMENU.TOGGLE.CREATE
  [LAMBDA (TEXT FONT STATECHANGEFN INITSTATE)                (* gbn "24-Sep-84 14:45")
                                                             (* Creates a TOGGLE menu button, that 
                                                             can turn off and on alternately.)
    (PROG ((OBJ (IMAGEOBJCREATE NIL \TOGGLEIMAGEFNS))
           (BOX (create IMAGEBOX
                       XSIZE _ (STRINGWIDTH TEXT FONT)
                       YSIZE _ (FONTPROP FONT 'HEIGHT)
                       YDESC _ (FONTPROP FONT 'DESCENT)
                       XKERN _ 0))
           DS BITMAP X Y)
          (SETQ X (fetch XSIZE of BOX))
          (SETQ Y (fetch YSIZE of BOX))
          (IMAGEOBJPROP OBJ 'MBTEXT TEXT)
          (IMAGEOBJPROP OBJ 'MBFONT FONT)
          (IMAGEOBJPROP OBJ 'MBFN '\TEXTMENU.TOGGLEFN)
          (IMAGEOBJPROP OBJ 'STATECHANGEFN STATECHANGEFN)

         (* a function to be called on finalization of selection of this button to provide 
         for user side-effects)

          (IMAGEOBJPROP OBJ 'STATE (OR INITSTATE 'OFF))
          (SETQ BITMAP (BITMAPCREATE X Y))
          (IMAGEOBJPROP OBJ 'BITCACHE BITMAP)
          (SETQ DS (DSPCREATE BITMAP))
          (DSPXOFFSET 0 DS)
          (DSPYOFFSET 0 DS)
          (DSPFONT FONT DS)
          (MOVETO 0 (FONTPROP FONT 'DESCENT)
                 DS)
          (PRIN1 (IMAGEOBJPROP OBJ 'MBTEXT)
                 DS)
          (RETURN OBJ])

(\TEXTMENU.TOGGLE.DISPLAY
  [LAMBDA (OBJ STREAM MODE)                                  (* ; "Edited 20-Nov-2023 14:35 by rmk")
                                                             (* gbn "27-Sep-84 01:23")
                                                             (* ; "'27-Sep-84 01:11' gbn")

    (* ;; "Display the innards of a menu toggle")

    (PROG (DS (OBJBOX (IMAGEOBJPROP OBJ 'BOUNDBOX))
              (FONT (IMAGEOBJPROP OBJ 'MBFONT))
              (CURX (DSPXPOSITION NIL STREAM))
              (CURY (DSPYPOSITION NIL STREAM))
              BITMAP X Y)
          (CL:UNLESS OBJBOX
              (SETQ OBJBOX (MB.SIZEFN OBJ STREAM)))          (* ; "Make sure the size is set.")
          (SETQ X (fetch XSIZE of OBJBOX))
          (SETQ Y (fetch YSIZE of OBJBOX))
          (COND
             ([type? BITMAP (SETQ BITMAP (IMAGEOBJPROP OBJ 'BITCACHE]
                                                             (* ; 
                                                          "The image bitmap exists already.  Use it.")
              )
             (T                                              (* ; 
                                                           "Need to create an image for this object.")
                (SETQ BITMAP (BITMAPCREATE X Y))
                (IMAGEOBJPROP OBJ 'BITCACHE BITMAP)
                (SETQ DS (DSPCREATE BITMAP))
                (DSPXOFFSET 0 DS)
                (DSPYOFFSET 0 DS)
                (DSPFONT FONT DS)
                (MOVETO 0 (FONTPROP FONT 'DESCENT)
                       DS)
                (PRIN1 (IMAGEOBJPROP OBJ 'MBTEXT)
                       DS)))
          (BITBLT BITMAP 0 0 STREAM CURX (IDIFFERENCE CURY (fetch YDESC of OBJBOX))
                 X Y 'INPUT 'PAINT)
          (SELECTQ (IMAGEOBJPROP OBJ 'STATE)
              (ON                                            (* ; 
                                    "The button is ON.  Display it as white text on black background")
                  (BLTSHADE BLACKSHADE STREAM CURX (IDIFFERENCE CURY (fetch YDESC of OBJBOX))
                         X Y 'INVERT))
              (OFF                                           (* ; 
                                                       "The button is OFF.  Just display it regular."))
              (ERROR "Invalid state in toggle button " OBJ])

(\TEXTMENU.TOGGLE.SHOWSELFN
  [LAMBDA (OBJ SEL ON DS)                                    (* ; "Edited 20-Nov-2023 14:46 by rmk")
                                                             (* ; "Edited 30-May-91 22:16 by jds")
    (CL:WHEN (AND (OR ON (GETSEL SEL SET))
                  (IMAGEOBJPROP OBJ 'STATE))
        (LET [(IMAGEBOX (OR (IMAGEOBJPROP OBJ 'BOUNDBOX)
                            (IMAGEBOX OBJ DS]
             (BLTSHADE BLACKSHADE DS 0 0 (fetch XSIZE of IMAGEBOX)
                    (fetch YSIZE of IMAGEBOX)
                    'INVERT)))])

(\TEXTMENU.TOGGLE.WHENOPERATEDFN
  [LAMBDA (OBJ DS OPERATION SEL)                             (* ; "Edited 28-Jan-2024 23:32 by rmk")
                                                             (* ; "Edited 30-May-91 22:16 by jds")
                                                             (* ; 
                                                          "Handle operations on a three-state button")
    (SELECTQ OPERATION
        (HIGHLIGHTED                                         (* ; "It is being hilighted")
                     (\TEXTMENU.TOGGLE.SHOWSELFN OBJ SEL T DS))
        (UNHIGHLIGHTED                                       (* ; "And being de-hilighted")
                       (\TEXTMENU.TOGGLE.SHOWSELFN OBJ SEL NIL DS))
        (SELECTED                                            (* ; "It's being selected")
                  (\TEXTMENU.TOGGLEFN OBJ SEL DS)            (* ; "Run the state-changing function")
                  (SETSEL SEL SET NIL)                       (* ; 
                         "And mar the selection turned off, so others can use it without trashing us")
                  (SETSEL SEL ONFLG NIL)
                  (SETSEL \TEDIT.SELECTION SET NIL))
        (DESELECTED)
        NIL])

(\TEXTMENU.TOGGLEFN
  [LAMBDA (OBJ SEL W)                                        (* ; "Edited 21-Oct-2022 18:46 by rmk")
                                                             (* ; "Edited 30-May-91 22:16 by jds")
                                                             (* MBFN for TOGGLE buttons--cycle back 
                                                             and forthe betwen states.)
    (PROG ((TEXTOBJ (fetch (SELECTION SELTEXTOBJ) of SEL))
           (STATECHANGEFN (IMAGEOBJPROP OBJ 'STATECHANGEFN))
           OFILE CH NEWSTATE)
          (SETQ NEWSTATE (SELECTQ (IMAGEOBJPROP OBJ 'STATE)
                             (OFF 'ON)
                             (ON 'OFF)
                             'ON))
          (COND
             (STATECHANGEFN                                  (* apply the user supplied state 
                                                             change fn if he supplied one)
                    (APPLY* STATECHANGEFN OBJ NEWSTATE (TEXTSTREAM TEXTOBJ)
                           SEL)))
          (IMAGEOBJPROP OBJ 'STATE NEWSTATE)
          (replace (SELECTION ONFLG) of SEL with NIL])

(\TEXTMENU.TOGGLE.INIT
  [LAMBDA NIL                                                (* jds " 9-Feb-86 15:18")
    (SETQ \TOGGLEIMAGEFNS (IMAGEFNSCREATE (FUNCTION \TEXTMENU.TOGGLE.DISPLAY)
                                 (FUNCTION MB.SIZEFN)
                                 (FUNCTION MB.PUTFN)
                                 (FUNCTION MB.GETFN)
                                 (FUNCTION MB.COPYFN)
                                 (FUNCTION MB.BUTTONEVENTINFN)
                                 'NILL
                                 'NILL
                                 'NILL
                                 'NILL
                                 'NILL
                                 (FUNCTION \TEXTMENU.TOGGLE.WHENOPERATEDFN)
                                 'NILL
                                 'ToggleButton])

(\TEXTMENU.SET.TOGGLE
  [LAMBDA (TEXT VALUE TEXTSTREAM)                            (* ; "Edited 22-Nov-2023 14:48 by rmk")
                                                             (* ; "Edited 22-Aug-2022 15:29 by rmk")
                                                             (* ; "Edited  6-Aug-2022 18:18 by rmk")
                                                            (* ; "Edited 12-Jun-90 19:02 by mitani")

(* ;;; "finds the button with MBTEXT field TEXT in TEXTSTREAM and sets its state to VALUE")

    (LET ((PC (MBUTTON.FIND.BUTTON TEXT TEXTSTREAM))
          OBJ)
         (CL:UNLESS PC (ERROR TEXT " was not found as a button."))
         (CL:WHEN (EQ OBJECT.PTYPE (PTYPE PC))
             (SETQ OBJ (PCONTENTS PC))
             (IMAGEOBJPROP OBJ 'STATE VALUE)
             (IMAGEOBJPROP OBJ 'BITCACHE 'JUNK)
             (for PANE inpanes (TEXTOBJ TEXTSTREAM) do (\TEDIT.REPAINTFN PANE))
             VALUE)])
)
(DECLARE%: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS \TOGGLEIMAGEFNS)
)
(DECLARE%: DONTEVAL@LOAD DOCOPY 

(\TEXTMENU.TOGGLE.INIT)


(ADDTOVAR IMAGEOBJTYPES (ToggleButton FILE TEDITMENU GETFN MB.GETFN))
)



(* ;; "Margin Setting and display")

(DEFINEQ

(DRAWMARGINSCALE
  [LAMBDA (W UNIT)                                           (* ; "Edited 20-Nov-2023 14:49 by rmk")
                                                            (* ; "Edited 12-Jun-90 18:59 by mitani")

    (* ;; " Draw the margin-bar scale -- the markings across the bottom of the margin bar that show you the margin values.  Draws the scale in window W, according to UNIT = 1 for points, or 12 for picas.")

    (PROG ((WREG (DSPCLIPPINGREGION NIL W))
           (OLDOP (DSPOPERATION 'REPLACE W)))
          (DSPFILL (create REGION
                          LEFT _ 0
                          BOTTOM _ 0
                          WIDTH _ (fetch (REGION WIDTH) of WREG)
                          HEIGHT _ 24)
                 WHITESHADE
                 'REPLACE W)                                 (* ; "CLEAR IT OUT FIRST.")
          (SELECTQ UNIT
              (1                                             (* ; "Straight Points")
                 [for X from 4 by 3 to (fetch (REGION WIDTH) of WREG)
                    do 
                       (* ;; "Put a tick every 3 points, with a number every inch.")

                       (COND
                          ((ZEROP (IREMAINDER (IDIFFERENCE X 4)
                                         72))
                           (BLTSHADE BLACKSHADE W X 8 1 16 'REPLACE)
                           (MOVETO (IDIFFERENCE X (LRSH (STRINGWIDTH (IDIFFERENCE X 4))
                                                        1))
                                  10 W)
                           (PRIN1 (IDIFFERENCE X 4)
                                  W))
                          (T (BLTSHADE BLACKSHADE W X 20 1 4 'REPLACE])
              (12                                            (* ; "Picas")
                  (for X from 4 by 12 to (fetch (REGION WIDTH) of WREG) as NOMX from 0
                     do 
                        (* ;; "Put a tick every half-pica, with a number every inch.")

                        [COND
                           ((ZEROP (IREMAINDER NOMX 6))
                            (BLTSHADE BLACKSHADE W X 8 1 16 'REPLACE)
                            (MOVETO (IDIFFERENCE X (LRSH (STRINGWIDTH NOMX)
                                                         1))
                                   10 W)
                            (PRIN1 NOMX W))
                           (T (BLTSHADE BLACKSHADE W X 20 1 4 'REPLACE]
                        (BLTSHADE BLACKSHADE W (IPLUS X 6)
                               22 1 2 'REPLACE)))
              NIL)
          (BLTSHADE BLACKSHADE W 4 23 (fetch (REGION WIDTH) of WREG)
                 1
                 'REPLACE)
          (MOVETO 0 0 W)
          (RELDRAWTO (IDIFFERENCE (fetch (REGION WIDTH) of WREG)
                            2)
                 0 1 'PAINT W)
          (RELDRAWTO 0 (IDIFFERENCE (fetch (REGION HEIGHT) of WREG)
                              2)
                 1
                 'PAINT W)
          (RELDRAWTO (IMINUS (IDIFFERENCE (fetch (REGION WIDTH) of WREG)
                                    2))
                 0 1 'PAINT W)
          (RELDRAWTO 0 (IMINUS (IDIFFERENCE (fetch (REGION HEIGHT) of WREG)
                                      2))
                 1
                 'PAINT W)
          (DSPOPERATION OLDOP W])

(MARGINBAR
  [LAMBDA (W L1 LN R TABS UNIT UPDATE RIGHTLIM)              (* ; "Edited 20-Nov-2023 20:34 by rmk")
                                                             (* ; "Edited  2-Oct-2022 00:01 by rmk")
                                                             (* ; "Edited  9-Sep-2022 22:38 by rmk")
                                                            (* ; "Edited 12-Jun-90 18:59 by mitani")
                                                             (* ; 
                                    "Given a set of margins and a unit, show the margin bar properly")
    (PROG ((OLDOP (DSPOPERATION 'ERASE W))
           (SCALEDL1 (MSCALE L1 UNIT))
           (SCALEDLN (MSCALE LN UNIT))
           (SCALEDR (MSCALE R UNIT))
           (FLOATINGRIGHT NIL)
           (EXTENDEDRIGHT NIL)
           UNSETL1 UNSETLN)
          (CL:UNLESS UPDATE (DRAWMARGINSCALE W UNIT))
          (DSPFONT (FONTCREATE 'TERMINAL 10)
                 W)
          (SETQ L1 (MKSTRING (ABS L1)))
          (SETQ LN (MKSTRING (ABS LN)))
          (SETQ R (MKSTRING (ABS R)))
          [COND
             [(ILESSP SCALEDR 4)                             (* ; 
                                       "Unset right margin.  Show specially, but at its usual place.")
              (SETQ FLOATINGRIGHT T)
              (SETQ SCALEDR (IPLUS 4 (IDIFFERENCE 4 SCALEDR]
             ((ILEQ SCALEDR 4)                               (* ; 
                                                          "Floating right margin => marked specially")
              (SETQ FLOATINGRIGHT T)
              (SETQ SCALEDR RIGHTLIM))
             ((IGREATERP SCALEDR RIGHTLIM)                   (* ; 
                                  "Not floating, so just limit it to the rightmost that can be seen.")
              (SETQ EXTENDEDRIGHT T)
              (SETQ SCALEDR (IDIFFERENCE RIGHTLIM 8]
          (CL:WHEN (ILESSP SCALEDL1 4)                       (* ; 
                            "Unset right FIRST LEFT margin.  Show specially, but at its usual place.")
              (SETQ UNSETL1 T)
              (SETQ SCALEDL1 (IPLUS 4 (IDIFFERENCE 4 SCALEDL1))))
          (CL:WHEN (ILESSP SCALEDLN 4)                       (* ; 
                                        "Unset LEFT margin.  Show specially, but at its usual place.")
              (SETQ UNSETLN T)
              (SETQ SCALEDLN (IPLUS 4 (IDIFFERENCE 4 SCALEDLN))))
          (BLTSHADE WHITESHADE W 1 26 (IDIFFERENCE (fetch (REGION WIDTH) of (DSPCLIPPINGREGION NIL W)
                                                          )
                                             3)
                 32
                 'REPLACE)
          (BLTSHADE BLACKSHADE W SCALEDL1 42 (IDIFFERENCE SCALEDR SCALEDL1)
                 16
                 'REPLACE)
          (BLTSHADE BLACKSHADE W SCALEDLN 26 (IDIFFERENCE SCALEDR SCALEDLN)
                 16
                 'REPLACE)
          (COND
             (UNSETL1                                        (* ; 
                                    "1st left margin isn't set, tho it has a value.  Mark it neutral")
                    (BLTSHADE EDITGRAY W SCALEDL1 42 (IPLUS (STRINGWIDTH L1 W)
                                                            2)
                           16
                           'REPLACE)
                    (DSPOPERATION 'PAINT W)
                    (MOVETO (IPLUS SCALEDL1 2)
                           44 W)
                    (PRIN1 L1 W)
                    (DSPOPERATION 'ERASE W))
             (T (MOVETO (IPLUS SCALEDL1 2)
                       44 W)
                (PRIN1 L1 W)))
          (COND
             (UNSETLN                                        (* ; 
                                        "left margin isn't set, tho it has a value.  Mark it neutral")
                    (BLTSHADE EDITGRAY W SCALEDLN 26 (IPLUS (STRINGWIDTH LN W)
                                                            2)
                           16
                           'REPLACE)
                    (DSPOPERATION 'PAINT W)
                    (MOVETO (IPLUS SCALEDLN 2)
                           28 W)
                    (PRIN1 LN W)
                    (DSPOPERATION 'ERASE W))
             (T (MOVETO (IPLUS SCALEDLN 2)
                       28 W)
                (PRIN1 LN W)))
          [COND
             (FLOATINGRIGHT                                  (* ; 
                                             "Floating right margin is marked by a light gray marker")
                    (BLTSHADE EDITGRAY W (IDIFFERENCE SCALEDR (IPLUS (STRINGWIDTH R W)
                                                                     2))
                           26
                           (IPLUS (STRINGWIDTH R W)
                                  2)
                           32
                           'REPLACE)
                    (DSPOPERATION 'PAINT W))
             (EXTENDEDRIGHT                                  (* ; 
                          "A non-visible right margin is marked by two wavy lines indicating a break")
                    (BITBLT TEDIT.EXTENDEDRIGHTMARK 0 0 W SCALEDR 26 8 32 'INPUT 'REPLACE]
          (MOVETO (IDIFFERENCE SCALEDR (IPLUS (STRINGWIDTH R W)
                                              2))
                 36 W)
          (PRIN1 R W)
          (DSPOPERATION OLDOP W)
          (COND
             ((EQ TABS 'NEUTRAL)                             (* ; 
                           "All tabs have been neutralized.  Just lay down a grey pattern over them.")
              (DSPFILL (create REGION
                              LEFT _ 2
                              BOTTOM _ 1
                              HEIGHT _ 8
                              WIDTH _ (IDIFFERENCE (fetch (REGION WIDTH) of (DSPCLIPPINGREGION NIL W)
                                                          )
                                             4))
                     EDITGRAY
                     'REPLACE W))
             (T (DSPFILL (create REGION
                                LEFT _ 2
                                BOTTOM _ 1
                                HEIGHT _ 8
                                WIDTH _ (IDIFFERENCE (fetch (REGION WIDTH) of (DSPCLIPPINGREGION
                                                                               NIL W))
                                               4))
                       WHITESHADE
                       'REPLACE W)
                (for TAB in TABS do                          (* ; 
                                                     "Run thru the tabs, putting them down in place.")
                                    (MB.MARGINBAR.SHOWTAB W TAB UNIT 'PAINT])

(MARGINBAR.CREATE
  [LAMBDA (MARL1 MARLN MARR MARTABS MARUNIT MARTABTYPE)     (* ; "Edited 12-Jun-90 18:59 by mitani")
                                                             (* Create an instance of the 
                                                             margin-setting ruler for TEdit's use.)
    (PROG ((BOX (create IMAGEBOX
                       XSIZE _ 1008
                       YSIZE _ 62
                       YDESC _ 0
                       XKERN _ 4))
           OBJ OBJDATUM BITMAP DS)
          (SETQ OBJ
           (IMAGEOBJCREATE (SETQ OBJDATUM
                            (create MARGINBAR
                                   MARL1 _ MARL1
                                   MARLN _ MARLN
                                   MARR _ MARR
                                   MARTABS _ MARTABS
                                   MARUNIT _ MARUNIT
                                   MARTABTYPE _ MARTABTYPE))
                  MARGINBARIMAGEFNS))

         (* Create an IMAGEOBJ, containing an instance of the record to hold margin and 
         tab info)

          (SETQ BITMAP (BITMAPCREATE (fetch XSIZE of BOX)
                              (fetch YSIZE of BOX)))         (* A cache for the ruler's screen 
                                                             image)
          (IMAGEOBJPROP OBJ 'BITCACHE BITMAP)
          (SETQ DS (DSPCREATE BITMAP))                       (* And a displaystream for modifying 
                                                             that image)
          (IMAGEOBJPROP OBJ 'DSPCACHE DS)
          (DSPXOFFSET 0 DS)
          (DSPYOFFSET 0 DS)
          (DSPCLIPPINGREGION (create REGION
                                    LEFT _ 0
                                    BOTTOM _ 0
                                    WIDTH _ (fetch XSIZE of BOX)
                                    HEIGHT _ (fetch YSIZE of BOX))
                 DS)
          (MARGINBAR DS (fetch (MARGINBAR MARL1) of OBJDATUM)
                 (fetch (MARGINBAR MARLN) of OBJDATUM)
                 (fetch (MARGINBAR MARR) of OBJDATUM)
                 (fetch (MARGINBAR MARTABS) of OBJDATUM)
                 (fetch (MARGINBAR MARUNIT) of OBJDATUM)
                 NIL
                 (fetch (REGION WIDTH) of (DSPCLIPPINGREGION NIL DS)))

         (* Fill in the cache with the original value This does the time-consuming part of 
         drawing the ticks on the ruler and such, which would make drawing it on the fly 
         unbearable.)

          (IMAGEOBJPROP OBJ 'NEEDSUPDATE T)

         (* And tell the display function that it needs to be updated when first 
         displayed. Which is the faster part.)

          (RETURN OBJ])

(MB.MARGINBAR.SELFN
  [LAMBDA (OBJ SELWINDOW SEL RELX RELY STREAM ORIGX ORIGY)  (* ; "Edited 12-Jun-90 18:59 by mitani")
                                                             (* ; 
                                              "Let the user adjust margins and tabs using the mouse.")
    (PROG [(OBJDATUM (IMAGEOBJPROP OBJ 'OBJECTDATUM))
           (IMAGEBOX (OR (IMAGEOBJPROP OBJ 'BOUNDBOX)
                         (IMAGEBOX OBJ STREAM 'DISPLAY]
          (PROG ((L1 (fetch MARL1 of OBJDATUM))
                 (LN (fetch MARLN of OBJDATUM))
                 (R (fetch MARR of OBJDATUM))
                 (TABS (fetch MARTABS of OBJDATUM))
                 [SCALEDTABS (COND
                                ((LISTP (fetch MARTABS of OBJDATUM))
                                                             (* ; 
                                 "Only scale the tabs if there are any, and they're not neutralized.")
                                 (for TAB in (fetch MARTABS of OBJDATUM)
                                    collect (MSCALE (fetch TABX of TAB)
                                                   (fetch MARUNIT of OBJDATUM]
                 (UNIT (fetch MARUNIT of OBJDATUM))
                 (CLIP (create REGION
                              LEFT _ 0
                              BOTTOM _ 0
                              WIDTH _ (fetch XSIZE of IMAGEBOX)
                              HEIGHT _ (fetch YSIZE of IMAGEBOX)))
                 (RIGHTLIM (IDIFFERENCE (fetch (REGION WIDTH) of (DSPCLIPPINGREGION NIL SELWINDOW))
                                  4))
                 TAB TABX OL1 OLN OR)
                (SETQ OL1 L1)
                (SETQ OLN LN)
                (SETQ OR R)
                [COND
                   [(INSIDE? (create REGION
                                    LEFT _ (IDIFFERENCE (MSCALE (ABS L1)
                                                               UNIT)
                                                  2)
                                    BOTTOM _ 42
                                    WIDTH _ 16
                                    HEIGHT _ 16)
                           RELX RELY)                        (* ; "Move the 1st-line left margin.")
                    (while (AND (MOUSESTATE (OR LEFT MIDDLE RIGHT))
                                (INSIDE? CLIP (LASTMOUSEX STREAM)
                                       (LASTMOUSEY STREAM)))
                       do (SETQ L1 (MAX 0 (MDESCALE (LASTMOUSEX STREAM)
                                                 UNIT)))
                          [COND
                             ((\TEDIT.MOUSESTATE RIGHT)      (* ; 
                                                             "Right mouse button UNsets the margin.")
                              (SETQ L1 (MINUS L1]
                          (COND
                             ((NOT (EQUAL OL1 L1))
                              (MARGINBAR STREAM L1 LN R TABS UNIT T RIGHTLIM)
                              (SETQ OL1 L1]
                   [(INSIDE? (create REGION
                                    LEFT _ (IDIFFERENCE (MSCALE (ABS LN)
                                                               UNIT)
                                                  2)
                                    BOTTOM _ 26
                                    WIDTH _ 16
                                    HEIGHT _ 16)
                           RELX RELY)                        (* ; "Move the skirt's left margin")
                    (while (AND (MOUSESTATE (OR LEFT MIDDLE RIGHT))
                                (INSIDE? CLIP (LASTMOUSEX STREAM)
                                       (LASTMOUSEY STREAM)))
                       do (SETQ LN (MAX 0 (MDESCALE (LASTMOUSEX STREAM)
                                                 UNIT)))
                          [COND
                             ((\TEDIT.MOUSESTATE RIGHT)      (* ; 
                                                             "Right mouse button UNsets the margin.")
                              (SETQ LN (MINUS LN]
                          (COND
                             ((NOT (EQUAL OLN LN))
                              (MARGINBAR STREAM L1 LN R TABS UNIT T RIGHTLIM)
                              (SETQ OLN LN]
                   [(OR (INSIDE? (create REGION
                                        LEFT _ (IDIFFERENCE (IMIN (MSCALE (ABS R)
                                                                         UNIT)
                                                                  (fetch XSIZE of IMAGEBOX)
                                                                  (fetch (REGION WIDTH)
                                                                     of (DSPCLIPPINGREGION NIL 
                                                                               SELWINDOW)))
                                                      16)
                                        BOTTOM _ 26
                                        WIDTH _ 16
                                        HEIGHT _ 32)
                               RELX RELY)
                        (AND (ZEROP (IABS (FIXR R)))
                             (INSIDE? (create REGION
                                             LEFT _ (IDIFFERENCE (IMIN (fetch XSIZE of IMAGEBOX)
                                                                       (fetch (REGION WIDTH)
                                                                          of (DSPCLIPPINGREGION
                                                                              NIL SELWINDOW)))
                                                           16)
                                             BOTTOM _ 26
                                             WIDTH _ 16
                                             HEIGHT _ 32)
                                    RELX RELY)))             (* ; "Move the right margin")
                    (while (AND (MOUSESTATE (OR LEFT MIDDLE RIGHT))
                                (INSIDE? CLIP (LASTMOUSEX STREAM)
                                       (LASTMOUSEY STREAM)))
                       do (SETQ R (MAX 0 (MDESCALE (LASTMOUSEX STREAM)
                                                UNIT)))
                          [COND
                             ((\TEDIT.MOUSESTATE RIGHT)      (* ; 
                                                             "Right mouse button UNsets the margin.")
                              (SETQ R (MINUS R]
                          (COND
                             ((NOT (EQUAL OR R))
                              (MARGINBAR STREAM L1 LN R TABS UNIT T RIGHTLIM)
                              (SETQ OR R]
                   ((INSIDE? (create REGION
                                    LEFT _ 0
                                    BOTTOM _ 0
                                    WIDTH _ (fetch (REGION WIDTH) of CLIP)
                                    HEIGHT _ 16)
                           RELX RELY)                        (* ; "We're in the tab ruler region")
                    (COND
                       ((MOUSESTATE LEFT)                    (* ; "MOVE a tab")
                        [SETQ TAB (for TABX in SCALEDTABS as TAB in TABS
                                     smallest (ABS (IDIFFERENCE TABX (LASTMOUSEX STREAM]
                        (AND TAB (MB.MARGINBAR.TABTRACK STREAM OBJDATUM TAB)))
                       [(MOUSESTATE MIDDLE)                  (* ; "ADD/CHANGE a tab")
                        (COND
                           ((EQ (fetch MARTABS of OBJDATUM)
                                'NEUTRAL)                    (* ; 
                              "The tabs used to be NEUTRAL.  Clear the tab region, and start afresh.")
                            (replace MARTABS of OBJDATUM with NIL)
                                                             (* ; "So we don't come this way again.")
                            (DSPFILL (create REGION
                                            LEFT _ 2
                                            BOTTOM _ 1
                                            HEIGHT _ 8
                                            WIDTH _ (IDIFFERENCE (fetch (REGION WIDTH)
                                                                    of (DSPCLIPPINGREGION NIL 
                                                                              SELWINDOW))
                                                           4))
                                   WHITESHADE
                                   'REPLACE SELWINDOW)       (* ; 
                             "Make the tab region look non-neutral, too, so that tabs look OK on it.")
                            ))
                        (COND
                           ((AND [SETQ TAB (for TABX in SCALEDTABS as TAB in TABS
                                              smallest (ABS (IDIFFERENCE TABX (LASTMOUSEX STREAM]
                                 (SETQ TABX (MSCALE (CAR TAB)
                                                   UNIT))
                                 (IGEQ (LASTMOUSEX STREAM)
                                       (IDIFFERENCE TABX 2))
                                 (ILEQ (LASTMOUSEX STREAM)
                                       (IPLUS TABX 2)))
                            (MB.MARGINBAR.SHOWTAB STREAM TAB UNIT 'ERASE)
                            (replace TABKIND of TAB with (OR (fetch MARTABTYPE of OBJDATUM)
                                                             'LEFT))
                            (MB.MARGINBAR.SHOWTAB STREAM TAB UNIT 'PAINT)
                            (MB.MARGINBAR.TABTRACK STREAM OBJDATUM TAB))
                           ([OR (NOT TAB)
                                (NOT (EQP (fetch TABX of TAB)
                                          (MDESCALE (LASTMOUSEX STREAM)
                                                 UNIT]       (* ; "Really create a new tab")
                            [SETQ TAB (create TAB
                                             TABX _ (MDESCALE (LASTMOUSEX STREAM)
                                                           UNIT)
                                             TABKIND _ (OR (fetch MARTABTYPE of OBJDATUM)
                                                           'LEFT]
                            (SETQ TABS (CONS TAB TABS))
                            (MB.MARGINBAR.SHOWTAB STREAM TAB UNIT 'PAINT)
                            (MB.MARGINBAR.TABTRACK STREAM OBJDATUM TAB]
                       ((MOUSESTATE RIGHT)                   (* ; "DELETE a tab.")
                        (COND
                           ((AND [SETQ TAB (for TABX in SCALEDTABS as TAB in TABS
                                              smallest (ABS (IDIFFERENCE TABX (LASTMOUSEX STREAM]
                                 (SETQ TABX (MSCALE (CAR TAB)
                                                   UNIT))
                                 (IGEQ (LASTMOUSEX STREAM)
                                       (IDIFFERENCE TABX 2))
                                 (ILEQ (LASTMOUSEX STREAM)
                                       (IPLUS TABX 2)))
                            (MB.MARGINBAR.SHOWTAB STREAM TAB UNIT 'ERASE)
                            (SETQ TABS (LDIFFERENCE TABS (LIST TAB]
                (replace MARL1 of OBJDATUM with L1)
                (replace MARLN of OBJDATUM with LN)
                (replace MARR of OBJDATUM with R)
                (replace MARTABS of OBJDATUM with TABS)))
    T])

(MB.MARGINBAR.SIZEFN
  [LAMBDA (OBJ)                                              (* jds " 5-Sep-84 14:10")
    (PROG ((BOX (create IMAGEBOX
                       XSIZE _ 1008
                       YSIZE _ 62
                       YDESC _ 0
                       XKERN _ 4)))
          (IMAGEOBJPROP OBJ 'BOUNDBOX BOX)
          (RETURN BOX])

(MB.MARGINBAR.DISPLAYFN
  [LAMBDA (OBJ STREAM MODE)                                  (* ; "Edited  9-Sep-2022 22:37 by rmk")
                                                            (* ; "Edited 12-Jun-90 18:59 by mitani")
                                                             (* ; 
                                                             "Display the innards of a menu button")
    (PROG ((IMAGEBOX (OR (IMAGEOBJPROP OBJ 'BOUNDBOX)
                         (IMAGEBOX OBJ STREAM MODE)))
           (OBJDATUM (IMAGEOBJPROP OBJ 'OBJECTDATUM))
           BITMAP
           (DS (DSPCREATE))
           WASON)
          (COND
             [[SETQ WASON (SETQ BITMAP (IMAGEOBJPROP OBJ 'BITCACHE]

              (* ;; "The marginbar existed already as an image.  Don't bother re-creating it, and remember that we're allowed to MODIFY the old image instead of creating a new one.")

              (SETQ DS (IMAGEOBJPROP OBJ 'DSPCACHE]
             (T                                              (* ; 
                                                         "Have to create an image for the margin bar")
                (SETQ BITMAP (BITMAPCREATE (fetch XSIZE of IMAGEBOX)
                                    (fetch YSIZE of IMAGEBOX)))
                                                             (* ; "Create a cache bitmap")
                (IMAGEOBJPROP OBJ 'BITCACHE BITMAP)
                (SETQ DS (DSPCREATE BITMAP))
                (IMAGEOBJPROP OBJ 'DSPCACHE DS)
                (DSPXOFFSET 0 DS)
                (DSPYOFFSET 0 DS)
                (DSPCLIPPINGREGION (create REGION
                                          LEFT _ 0
                                          BOTTOM _ 0
                                          WIDTH _ (fetch XSIZE of IMAGEBOX)
                                          HEIGHT _ (fetch YSIZE of IMAGEBOX))
                       DS)))
          (MARGINBAR DS (fetch (MARGINBAR MARL1) of OBJDATUM)
                 (fetch (MARGINBAR MARLN) of OBJDATUM)
                 (fetch (MARGINBAR MARR) of OBJDATUM)
                 (fetch (MARGINBAR MARTABS) of OBJDATUM)
                 (fetch (MARGINBAR MARUNIT) of OBJDATUM)
                 (OR WASON (IMAGEOBJPROP OBJ 'NEEDSUPDATE NIL))
                 (fetch (REGION WIDTH) of (DSPCLIPPINGREGION NIL STREAM)))
                                                             (* ; "Update the image, if it needs it")
          (BITBLT BITMAP 0 0 STREAM (IDIFFERENCE (DSPXPOSITION NIL STREAM)
                                           4)
                 (IDIFFERENCE (DSPYPOSITION NIL STREAM)
                        (fetch YDESC of IMAGEBOX])

(MDESCALE
  [LAMBDA (VAL UNIT)                                         (* jds " 4-NOV-83 17:29")
                                                             (* Convert a value from screen offset 
                                                             units to marginbar units)
    (COND
       ((IEQP UNIT 12)
        (QUOTIENT (IQUOTIENT (LLSH (IDIFFERENCE VAL 4)
                                   1)
                         UNIT)
               2.0))
       (T (QUOTIENT (DIFFERENCE VAL 4)
                 UNIT])

(MSCALE
  [LAMBDA (VAL UNIT)                                         (* jds " 4-NOV-83 17:31")
                                                             (* Convert from marginbar units to a 
                                                             screen X offset)
    (IPLUS 4 (FIXR (TIMES VAL (OR UNIT 1])

(MB.MARGINBAR.SHOWTAB
  [LAMBDA (W TAB UNIT MODE)                                  (* jds "22-Mar-85 17:36")
                                                             (* Paint/erase/otherwise display the 
                                                             sign for a TAB in window WINDOW, using 
                                                             units UNIT)
    (PROG ((TABX (MSCALE (fetch TABX of TAB)
                        UNIT)))
          (SELECTQ (fetch TABKIND of TAB)
              (LEFT                                          (* Flush-left tab.)
                    (BITBLT \TEDIT.LEFTTAB 0 0 W (IDIFFERENCE TABX 2)
                           1 NIL NIL 'INPUT MODE))
              (CENTERED                                      (* Centered Tab)
                        (BITBLT \TEDIT.CENTERTAB 0 0 W (IDIFFERENCE TABX 5)
                               1 NIL NIL 'INPUT MODE))
              (RIGHT                                         (* Flush-right Tab)
                     (BITBLT \TEDIT.RIGHTTAB 0 0 W (IDIFFERENCE TABX 7)
                            1 NIL NIL 'INPUT MODE))
              (DECIMAL                                       (* Decimal aligned tab)
                       (BITBLT \TEDIT.DECIMALTAB 0 0 W (IDIFFERENCE TABX 7)
                              1 NIL NIL 'INPUT MODE))
              (DOTTEDLEFT                                    (* Decimal aligned tab)
                          (BITBLT \TEDIT.DOTTED.LEFTTAB 0 0 W (IDIFFERENCE TABX 7)
                                 1 NIL NIL 'INPUT MODE))
              (DOTTEDCENTERED                                (* Decimal aligned tab)
                   (BITBLT \TEDIT.DOTTED.CENTERTAB 0 0 W (IDIFFERENCE TABX 7)
                          1 NIL NIL 'INPUT MODE))
              (DOTTEDRIGHT                                   (* Decimal aligned tab)
                           (BITBLT \TEDIT.DOTTED.RIGHTTAB 0 0 W (IDIFFERENCE TABX 7)
                                  1 NIL NIL 'INPUT MODE))
              (DOTTEDDECIMAL                                 (* Decimal aligned tab)
                             (BITBLT \TEDIT.DOTTED.DECIMALTAB 0 0 W (IDIFFERENCE TABX 7)
                                    1 NIL NIL 'INPUT MODE))
              NIL])

(MB.MARGINBAR.TABTRACK
  [LAMBDA (STREAM OBJ TAB)                                   (* ; "Edited 20-Nov-2023 10:51 by rmk")
                                                             (* jds " 8-Feb-84 20:38")

    (* ;; "Given that the mouse is down over a tab, track the tab as the mouse moves.")

    (bind X (UNIT _ (fetch MARUNIT of OBJ))
          (CLIP _ (DSPCLIPPINGREGION NIL STREAM))
          (OLDX _ (MSCALE (fetch TABX of TAB)
                         (fetch MARUNIT of OBJ))) while (AND (MOUSESTATE (OR LEFT MIDDLE RIGHT))
                                                             (INSIDE? CLIP (LASTMOUSEX STREAM)
                                                                    (LASTMOUSEY STREAM)))
       unless (IEQP OLDX (SETQ X (LASTMOUSEX STREAM))) do (MB.MARGINBAR.SHOWTAB STREAM TAB UNIT
                                                                 'ERASE)
                                                          (replace TABX of TAB
                                                             with (MDESCALE X UNIT))
                                                          (MB.MARGINBAR.SHOWTAB STREAM TAB UNIT
                                                                 'PAINT)
                                                          (SETQ OLDX X])

(\TEDIT.TABTYPE.SET
  [LAMBDA (OBJ SEL W)                                        (* ; "Edited 21-Oct-2022 18:46 by rmk")
                                                             (* ; "Edited  3-Oct-2022 22:16 by rmk")
                                                             (* ; "Edited  9-Sep-2022 15:47 by rmk")
                                                             (* ; "Edited  6-Aug-2022 17:16 by rmk")
                                                             (* ; 
                                                        "Edited 24-Apr-95 12:03 by sybalsky:mv:envos")

    (* ;; "Change the kind of TAB that will be set in the succeeding marginbar.")

    (LET ((TEXTOBJ (fetch (SELECTION SELTEXTOBJ) of SEL))
          (STATE (IMAGEOBJPROP OBJ 'STATE))
          DOTTEDBUTTON)                                      (* ; 
                                                   "Find out roughly what kind of TAB this is to be.")
         (SETQ STATE (U-CASE (CL:IF (LISTP STATE)
                                 (CAR STATE)
                                 STATE)))                    (* ; 
                                                            "Make sure it's upper case, and an atom.")
         [SETQ DOTTEDBUTTON (CAR (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ (ADD1 (fetch (SELECTION CH#)
                                                                            of SEL]
                                                             (* ; 
                                              "Find out if this is to be a tab with a dotted leader.")
         (CL:WHEN (EQ (IMAGEOBJPROP DOTTEDBUTTON 'STATE)
                      'ON)                                   (* ; "Yes.  Make this a DOTTEDxxx tab.")
             (SETQ STATE (PACK* 'DOTTED STATE)))
         (for (PC _ (\CHTOPC (ADD1 (fetch (SELECTION CH#) of SEL))
                           TEXTOBJ)) by (NEXTPIECE PC) while PC when (type? MARGINBAR (PCONTENTS
                                                                                       PC))
            do (replace MARTABTYPE of (IMAGEOBJPROP (PCONTENTS PC)
                                             'OBJECTDATUM) with STATE)
               (RETURN])

(MARGINBAR.INIT
  [LAMBDA NIL                                                (* jds " 9-Feb-86 15:18")
    (SETQ MARGINBARIMAGEFNS (IMAGEFNSCREATE (FUNCTION MB.MARGINBAR.DISPLAYFN)
                                   (FUNCTION MB.MARGINBAR.SIZEFN)
                                   (FUNCTION MB.MARGINBAR.PUTFN)
                                   (FUNCTION MB.MARGINBAR.GETFN)
                                   (FUNCTION MB.COPYFN)
                                   (FUNCTION MB.MARGINBAR.SELFN)
                                   'NILL
                                   'NILL
                                   'NILL
                                   'NILL
                                   'NILL
                                   'NILL
                                   'NILL
                                   'NILL
                                   'MarginRuler])
)

(RPAQQ \TEDIT.LEFTTAB #*(10 8)B@@@B@@@G@@@JH@@B@@@B@@@CN@@@@@@)

(RPAQQ \TEDIT.CENTERTAB #*(10 8)@D@@@D@@@N@@AE@@@D@@@D@@AO@@@@@@)

(RPAQQ \TEDIT.RIGHTTAB #*(10 8)@A@@@A@@@CH@@ED@@A@@@A@@AO@@@@@@)

(RPAQQ \TEDIT.DECIMALTAB #*(10 8)@A@@@A@@@CH@@ED@@A@@@CH@@CH@@@@@)

(RPAQQ \TEDIT.DOTTED.LEFTTAB #*(16 8)@@H@@@H@@AL@@BJ@@@H@CFH@CFOH@@@@)

(RPAQQ \TEDIT.DOTTED.CENTERTAB #*(16 8)@@A@@@A@@@CH@@ED@@A@CFA@CFGL@@@@)

(RPAQQ \TEDIT.DOTTED.RIGHTTAB #*(16 8)@@@D@@@D@@@N@@AE@@@DCF@DCFGL@@@@)

(RPAQQ \TEDIT.DOTTED.DECIMALTAB #*(16 8)@@@D@@@D@@@N@@AE@@@D@MHN@MHN@@@@)

(RPAQQ TEDIT.EXTENDEDRIGHTMARK #*(8 32)FF@@FF@@FF@@FF@@LL@@LL@@LL@@LL@@LL@@LL@@LL@@LL@@FF@@FF@@FF@@FF@@CC@@CC@@CC@@CC@@CC@@CC@@CC@@CC@@FF@@FF@@FF@@FF@@LL@@LL@@LL@@LL@@
)
(DECLARE%: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS MARGINBARIMAGEFNS)
)
(DECLARE%: DONTEVAL@LOAD DOCOPY 

(MARGINBAR.INIT)


(ADDTOVAR IMAGEOBJTYPES (MarginRuler FILE TEDITMENU GETFN MB.GETFN))
)



(* ;; "Text menu creation and support")

(DEFINEQ

(\TEDIT.MENU.START
  [LAMBDA (MENUSTREAM MAINWINDOW TITLE HEIGHT)               (* ; "Edited  3-Nov-2023 22:23 by rmk")
                                                             (* ; "Edited 31-Oct-2023 08:59 by rmk")
                                                             (* ; "Edited 10-Apr-2023 09:46 by rmk")
                                                            (* ; "Edited 26-Oct-2021 08:43 by rmk:")
                                                             (* ; 
                                                        "Edited  4-Jun-93 11:59 by sybalsky:mv:envos")

    (* ;; "Create a TEdit-based menu for a given main window. Creates a Tedit process and window for the menu, attaches it to MAINWINDOW and cause it to share the main windows prompt (so messages will come out in the right place).")

    (* ;; "RMK: Add MAX/MINSIZE so menus don't grow vertically when the main window is reshaped.  Not sure why HEIGHT is passed in or defaults to 133, but either way, the original window height should persist")

    (* ;; "")

    (* ;; "Pretext:  menu windows can't have menu windows.")

    (* ;; "Typically this is called from a menu under the main window running in the mouse process.  When we're done, we want to return to the main window's editing process, not to the process we are called in.")

    (CL:UNLESS [AND MAINWINDOW (OR (TEDITMENUP MAINWINDOW)
                                   (for WW in (ATTACHEDWINDOWS MAINWINDOW)
                                      thereis (STREQUAL (OR TITLE "TEdit Menu")
                                                     (WINDOWPROP WW 'TEDITMENU]
        (LET ((WREG (CL:IF MAINWINDOW
                        (WINDOWPROP MAINWINDOW 'REGION)
                        (GETREGION)))
              MENUW)
             (SETQ MENUW (CREATEW (SETQ WREG (COND
                                                (MAINWINDOW (create REGION
                                                                   LEFT _ (fetch (REGION LEFT)
                                                                             of WREG)
                                                                   BOTTOM _ (fetch (REGION TOP)
                                                                               of WREG)
                                                                   WIDTH _ (fetch (REGION WIDTH)
                                                                              of WREG)
                                                                   HEIGHT _ (OR HEIGHT 133)))
                                                (T WREG)))
                                (OR TITLE "TEdit Menu")))
             (WINDOWADDPROP MENUW 'CLOSEFN (FUNCTION FREEATTACHEDWINDOW))
             (WINDOWPROP MENUW 'TEDITMENU (OR TITLE "TEdit Menu"))
                                                             (* ; "Mark this as a TEDIT MENU window")
             (ATTACHWINDOW MENUW MAINWINDOW 'TOP 'JUSTIFY 'LOCALCLOSE)
             [SETQ HEIGHT (FETCH (REGION HEIGHT) OF (WINDOWPROP MENUW 'REGION]
             (WINDOWPROP MENUW 'MAXSIZE (CONS 64000 HEIGHT))
             (WINDOWPROP MENUW 'MINSIZE (CONS 0 HEIGHT))
             (SETTOBJ (fetch (TEXTSTREAM TEXTOBJ) of MENUSTREAM)
                    MENUFLG T)

             (* ;; "The mainwindow's PROMPTWINDOW is also the menus prompt window")

             (CL:WHEN MAINWINDOW
                 (WINDOWPROP MENUW 'PROMPTWINDOW (WINDOWPROP MAINWINDOW 'PROMPTWINDOW)))
             [TEDIT MENUSTREAM MENUW NIL `(TITLEMENUFN DON'T PROMPTWINDOW ,(GETTOBJ (TEXTOBJ 
                                                                                           MAINWINDOW
                                                                                           )
                                                                                  PROMPTWINDOW]
             (CL:WHEN MAINWINDOW                             (* ; 
                                                             "Give the tty back to the main window")
                 (TTY.PROCESS (WINDOWPROP MAINWINDOW 'PROCESS)))

             (* ;; "No caret now, let the buttonevent fn bring it up")

             (\TEDIT.UPCARET (CAR (GETTOBJ (fetch (TEXTWINDOW PTEXTOBJ) of MENUW)
                                         CARET))
                    -10 -10)
             (TEXTPROP (fetch (TEXTWINDOW PTEXTOBJ) of MENUW)
                    'NOTSPLITTABLE T)
             (WINDOWPROP MENUW 'BUTTONEVENTFN (FUNCTION \TEDIT.MENU.BUTTONEVENTFN))
             MENUW))])

(\TEDIT.MENU.BUTTONEVENTFN
  [LAMBDA (MENUW)                                            (* ; "Edited 25-Sep-2023 12:53 by rmk")

    (* ;; "Entry for menus that allows for any special menu actions. In particular, turns on the caret blinking if it wasn't on before.")

    (replace (TEDITCARET TCFORCEUP) of (CAR (MKLIST (GETTOBJ (TEXTOBJ MENUW)
                                                           CARET))) with NIL)
    (\TEDIT.BUTTONEVENTFN MENUW])

(\TEXTMENU.DOC.CREATE
  [LAMBDA (MENUDESC MENUPROPS)                               (* ; "Edited 19-Sep-2023 14:36 by rmk")
                                                             (* ; "Edited 16-Sep-2023 13:03 by rmk")
                                                             (* ; "Edited 13-Aug-2022 23:11 by rmk")
                                                             (* ; "Edited 31-Jan-2022 22:48 by rmk")
                                                            (* ; "Edited 12-Jun-90 19:00 by mitani")

    (* ;; "Create the TEXTSTREAM for a menu, given a description.  That stream is passed to \TEDIT.MENU.START to get the menu up on screen")

    (LET ([MENUTSTREAM (OPENTEXTSTREAM NIL NIL NIL NIL (OR MENUPROPS '(FONT (MODERN 10]
          CH#1)
         (bind (CH# _ 1)
               OBJ for DESC in MENUDESC
            do (SELECTQ (CAR DESC)
                   (* 
                      (* ;; "This is a comment within a menu description -- Ignore it.")
)
                   (MB.BUTTON                                (* ; 
                                                       "A menu button -- hitting it calls a function")
                              (TEDIT.INSERT.OBJECT (MBUTTON.CREATE (MKATOM (fetch (MB.BUTTON MBLABEL)
                                                                              of DESC))
                                                          (fetch (MB.BUTTON MBBUTTONEVENTFN)
                                                             of DESC)
                                                          (fetch (MB.BUTTON MBFONT) of DESC))
                                     MENUTSTREAM CH#)
                              (TEDIT.LOOKS MENUTSTREAM '(PROTECTED OFF)
                                     CH# 1)
                              (add CH# 1))
                   (MB.3STATE                                (* ; 
                              "3-state button;  hitting it changes state among ON, OFF, and NEUTRAL.")
                              (TEDIT.INSERT.OBJECT (MB.CREATE.THREESTATEBUTTON
                                                    (MKATOM (fetch (MB.3STATE MBLABEL) of DESC))
                                                    (fetch (MB.3STATE MBFONT) of DESC)
                                                    (fetch (MB.3STATE MBCHANGESTATEFN) of DESC)
                                                    (fetch (MB.3STATE MBINITSTATE) of DESC))
                                     MENUTSTREAM CH#)
                              (TEDIT.LOOKS MENUTSTREAM '(PROTECTED OFF)
                                     CH# 1)
                              (add CH# 1))
                   (MB.TOGGLE                                (* ; 
                                            "TOGGLE button;  hitting it switches between ON and OFF.")
                              (TEDIT.INSERT.OBJECT (\TEXTMENU.TOGGLE.CREATE
                                                    (MKATOM (fetch (MB.TOGGLE MBTEXT) of DESC))
                                                    (fetch (MB.TOGGLE MBFONT) of DESC)
                                                    (fetch (MB.TOGGLE MBCHANGESTATEFN) of DESC)
                                                    (fetch (MB.TOGGLE MBINITSTATE) of DESC))
                                     MENUTSTREAM CH#)
                              (TEDIT.LOOKS MENUTSTREAM '(PROTECTED OFF)
                                     CH# 1)
                              (add CH# 1))
                   (MB.NWAY                                  (* ; 
                                                 "N-way buttons;  choosing one turns the others off.")
                            (SETQ OBJ (MB.CREATE.NWAYBUTTON (fetch (MB.NWAY MBBUTTONS) of DESC)
                                             (fetch (MB.NWAY MBFONT) of DESC)
                                             (fetch (MB.NWAY MBCHANGESTATEFN) of DESC)
                                             (fetch (MB.NWAY MBINITSTATE) of DESC)
                                             (fetch (MB.NWAY MBMAXITEMSPERLINE) of DESC)))
                            (TEDIT.INSERT.OBJECT OBJ MENUTSTREAM CH#)
                            (TEDIT.LOOKS MENUTSTREAM '(PROTECTED OFF)
                                   CH# 1)
                            (add CH# 1))
                   (MENU                                     (* ; 
                                                             "Real menu, except the selection sticks")
                         (TEDIT.INSERT.OBJECT (MB.CREATE.FULLMENU (CADR DESC))
                                MENUTSTREAM CH#)
                         (TEDIT.LOOKS MENUTSTREAM '(PROTECTED OFF)
                                CH# 1)
                         (add CH# 1))
                   (MB.MARGINBAR                             (* ; "Margin ruler for TEdit formatting")
                                 (TEDIT.INSERT.OBJECT (MARGINBAR.CREATE -0.5 -0.5 -39.5 NIL 12)
                                        MENUTSTREAM CH#)
                                 (TEDIT.LOOKS MENUTSTREAM '(PROTECTED OFF)
                                        CH# 1)
                                 (add CH# 1))
                   (MB.TEXT                                  (* ; 
                                             "Arbitrary text, which will be protected from the user.")
                            (TEDIT.INSERT MENUTSTREAM (fetch (MB.TEXT MBSTRING) of DESC)
                                   CH#)
                            (CL:WHEN (fetch (MB.TEXT MBFONT) of DESC)
                                (TEDIT.LOOKS MENUTSTREAM (LIST 'MBFONT (fetch (MB.TEXT MBFONT)
                                                                          of DESC))
                                       CH#
                                       (NCHARS (fetch (MB.TEXT MBSTRING) of DESC))))
                            (TEDIT.LOOKS MENUTSTREAM '(PROTECTED ON)
                                   CH#
                                   (NCHARS (fetch (MB.TEXT MBSTRING) of DESC)))
                            (add CH# (NCHARS (fetch (MB.TEXT MBSTRING) of DESC))))
                   (MB.INSERT                                (* ; 
                                                "An insertion point, with optional text to put there")
                              (TEDIT.INSERT MENUTSTREAM "  {}" CH#)
                              (TEDIT.LOOKS MENUTSTREAM '(PROTECTED ON)
                                     CH# 4)
                              (TEDIT.LOOKS (fetch (TEXTSTREAM TEXTOBJ) of MENUTSTREAM)
                                     '(PROTECTED ON SELECTPOINT ON)
                                     (IPLUS CH# 2)
                                     1)
                              (OR CH#1 (SETQ CH#1 (IPLUS CH# 3)))
                              [COND
                                 ((fetch (MB.INSERT MBINITENTRY) of DESC)
                                                             (* ; 
                                                     "There is an initial entry to be made.  Make it")
                                  [COND
                                     ((IMAGEOBJP (fetch (MB.INSERT MBINITENTRY) of DESC))
                                                             (* ; "It is an imageobj.")
                                      (TEDIT.INSERT.OBJECT (fetch (MB.INSERT MBINITENTRY)
                                                              of DESC)
                                             MENUTSTREAM
                                             (IPLUS CH# 3)))
                                     (T                      (* ; "It's regular text.")
                                        (TEDIT.INSERT MENUTSTREAM (MKSTRING (fetch (MB.INSERT 
                                                                                          MBINITENTRY
                                                                                          )
                                                                               of DESC))
                                               (IPLUS CH# 3]
                                  [TEDIT.LOOKS MENUTSTREAM '(PROTECTED OFF SELECTPOINT OFF)
                                         (IPLUS CH# 3)
                                         (NCHARS (MKSTRING (fetch (MB.INSERT MBINITENTRY)
                                                              of DESC]
                                  (add CH# (NCHARS (fetch (MB.INSERT MBINITENTRY) of DESC]
                              (add CH# 4))
                   (\ILLEGAL.ARG DESC)))
         (SETTOBJ (fetch (TEXTSTREAM TEXTOBJ) of MENUTSTREAM)
                MENUFLG T)                                   (* ; "Remember that this is a menu")
         (CL:WHEN CH#1                                       (* ; 
                         "We actually inserted some text, so it makes sense to put up a selection at")
             (PUTTEXTPROP (fetch (TEXTSTREAM TEXTOBJ) of MENUTSTREAM)
                    'SEL CH#1))
         MENUTSTREAM])
)

(RPAQQ TEXTMENUICON #*(16 24)@@@@@@@@@@@@H@@@L@@AK@@GHLAIHCFAJ@HAKFKIJJJAJBKIJBJAH@KIJDHAKDJIJLJIJDJIJDJIH@KIF@HFAHIH@FN@@@H@
)

(RPAQQ TEXTMENUICONMASK #*(16 24)@@@@@@@@@@@@H@@@L@@AO@@GOLAOOOGOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOGOONAOOH@GN@@@H@
)



(* ; "TEdit-specific support")

(DEFINEQ

(\TEDITMENU.CREATE
  [LAMBDA NIL                                                (* gbn "27-Sep-84 01:04")
                                                             (* Creates the TEdit Expanded Menu)
    (SETQ TEDIT.EXPANDED.MENU (\TEXTMENU.DOC.CREATE TEDIT.EXPANDEDMENU.SPEC])

(\TEDIT.EXPANDED.MENU
  [LAMBDA (STREAM)                                           (* ; "Edited 22-Sep-2023 20:00 by rmk")
                                                             (* ; "Edited 19-Sep-2023 08:51 by rmk")
                                                             (* ; "Edited 20-Aug-87 16:51 by jds")
                                                             (* ; "'27-Sep-84 01:04' gbn")
    (LET (CHARMENUTEXTSTREAM (TEXTOBJ (TEXTOBJ STREAM)))
         (\TEDIT.MENU.START (SETQ CHARMENUTEXTSTREAM (COPYTEXTSTREAM TEDIT.EXPANDED.MENU T))
                (\TEDIT.PRIMARYW TEXTOBJ)
                "TEdit Menu"
                (HEIGHTIFWINDOW 60 T))
         (COND
            ((OR (GETTEXTPROP TEXTOBJ 'CLEARGET)
                 (GETTEXTPROP TEXTOBJ 'CLEARPUT))            (* ; "initialise the button")
             (\TEXTMENU.SET.TOGGLE "Unformatted" 'ON CHARMENUTEXTSTREAM])

(MB.DEFAULTBUTTON.FN
  [LAMBDA (OBJ SEL W)                                        (* ; "Edited 29-Jan-2024 17:22 by rmk")
                                                             (* ; "Edited 21-Oct-2022 18:46 by rmk")
                                                             (* ; "Edited 30-Mar-94 15:46 by jds")
                                                             (* ; 
                                                          "MBFN for TEdit default menu item buttons.")
    (PROG* ((TEXTOBJ (fetch (SELECTION SELTEXTOBJ) of SEL))
            (MAINTEXT (WINDOWPROP (WINDOWPROP W 'MAINWINDOW)
                             'TEXTOBJ))
            (MAINSEL (fetch (TEXTOBJ SEL) of MAINTEXT))
            OFILE CH PROC)
           (COND
              ((EQ (fetch (TEXTOBJ EDITOPACTIVE) of MAINTEXT)
                   T)
               (TEDIT.PROMPTPRINT MAINTEXT "Edit operation in progress; please wait." T)
               (RETURN))
              ((fetch (TEXTOBJ EDITOPACTIVE) of MAINTEXT)
               (TEDIT.PROMPTPRINT MAINTEXT (CONCAT (fetch (TEXTOBJ EDITOPACTIVE) of MAINTEXT)
                                                  " operation in progress; please wait.")
                      T)
               [AND (NEQ (fetch (TEXTOBJ EDITOPACTIVE) of MAINTEXT)
                         (IMAGEOBJPROP OBJ 'MBTEXT]
               (RETURN)))
           [COND
              ((AND (SETQ PROC (WINDOWPROP (WINDOWPROP W 'MAINWINDOW)
                                      'PROCESS))
                    (PROCESSP PROC))                         (* ; 
                    "THE MAIN window has a live process behind it;  go evaluate the button fn there.")
               (PROCESS.EVAL PROC (LIST 'MB.DEFAULTBUTTON.ACTIONFN OBJ SEL W TEXTOBJ MAINTEXT MAINSEL
                                        )))
              ((AND (SETQ PROC (WINDOWPROP W 'PROCESS))
                    (PROCESSP PROC))                         (* ; 
                        "This window has a live process behind it;  go evaluate the button fn there.")
               (PROCESS.EVAL PROC (LIST 'MB.DEFAULTBUTTON.ACTIONFN OBJ SEL W TEXTOBJ MAINTEXT MAINSEL
                                        )))
              (T (ADD.PROCESS (LIST 'MB.DEFAULTBUTTON.ACTIONFN OBJ SEL W TEXTOBJ MAINTEXT MAINSEL]
           (COND
              ((fetch (TEXTOBJ EDITFINISHEDFLG) of TEXTOBJ)
               (GIVE.TTY.PROCESS W)
               (DISMISS 20)))
           [COND
              ((OR (fetch (TEXTOBJ EDITFINISHEDFLG) of TEXTOBJ)
                   (EQ (WINDOWPROP W 'PROCESS)
                       (TTY.PROCESS)))                       (* ; 
                               "If the TEDIT MENU still has the tty, give it back to the real TEdit.")
               (SETQ \TEDIT.SELPENDING NIL)
               (GIVE.TTY.PROCESS (WINDOWPROP W 'MAINWINDOW]

     (* ;; "Tell the menu button handler not to turn off this button--it's still active and will turn itself off.")

           (RETURN 'DON'T])

(\TEDITMENU.RECORD.UNFORMATTED
  [LAMBDA (BUTTON NEWSTATE TEXTSTREAM)                       (* ; "Edited 22-Sep-2023 20:06 by rmk")
                                                             (* jds " 7-Feb-85 09:44")
    (PUTTEXTPROP (TEXTOBJ TEXTSTREAM)
           'UNFORMATTEDPUT/GET
           (EQ NEWSTATE 'ON])

(MB.DEFAULTBUTTON.ACTIONFN
  [LAMBDA (OBJ SEL W TEXTOBJ MAINTEXT MAINSEL)               (* ; "Edited 14-Dec-2023 21:03 by rmk")
                                                             (* ; "Edited 22-Sep-2023 20:09 by rmk")
                                                             (* ; "Edited 20-Sep-2023 23:14 by rmk")
                                                             (* ; "Edited  9-May-2023 17:47 by rmk")
                                                             (* ; "Edited  6-May-2023 23:11 by rmk")
                                                             (* ; "Edited 18-Apr-2023 23:58 by rmk")
                                                             (* ; "Edited 30-Mar-94 16:04 by jds")
                                                             (* ; 
                                                          "MBFN for TEdit default menu item buttons.")
    (PROG (OFILE CH %#COPIES PRINTHOST PRINTOPTIONS %#SIDES MSG)
          [ERSETQ (RESETLST
                      [RESETSAVE (\TEDIT.MARKACTIVE MAINTEXT)
                             '(AND (\TEDIT.MARKINACTIVE OLDVALUE]
                      [RESETSAVE (\TEDIT.MARKACTIVE TEXTOBJ)
                             '(AND (\TEDIT.MARKINACTIVE OLDVALUE]
                      [RESETSAVE (PROG1 OBJ
                                     (IMAGEOBJPROP OBJ 'MENUBUTTON.SELECTED T))
                             '(AND (IMAGEOBJPROP OLDVALUE 'MENUBUTTON.SELECTED NIL]
                      (SETTOBJ MAINTEXT EDITOPACTIVE (OR (IMAGEOBJPROP OBJ 'MBTEXT)
                                                         T)) (* ; 
                                                          "So we can tell the guy WHAT op is active.")
                      (SELECTQ (IMAGEOBJPROP OBJ 'MBTEXT)
                          (Put [SETQ OFILE (\TEDIT.MAKEFILENAME (MBUTTON.NEXT.FIELD.AS.TEXT
                                                                 TEXTOBJ
                                                                 (GETSEL SEL CH#]
                               [COND
                                  (OFILE                     (* ; 
                                                       "Only try this if he really typed a file name")
                                         (TEDIT.PUT MAINTEXT OFILE NIL (GETTEXTPROP TEXTOBJ
                                                                              'UNFORMATTEDPUT/GET])
                          (Get [SETQ OFILE (\TEDIT.MAKEFILENAME (MBUTTON.NEXT.FIELD.AS.TEXT
                                                                 TEXTOBJ
                                                                 (GETSEL SEL CH#]
                               [COND
                                  (OFILE                     (* ; 
                                                       "Only try this if he really typed a file name")
                                         (TEDIT.GET MAINTEXT OFILE (GETTEXTPROP TEXTOBJ 
                                                                          'UNFORMATTEDPUT/GET])
                          (Include [SETQ OFILE (\TEDIT.MAKEFILENAME (MBUTTON.NEXT.FIELD.AS.TEXT
                                                                     TEXTOBJ
                                                                     (GETSEL SEL CH#]
                                   (COND
                                      (OFILE (TEDIT.INCLUDE MAINTEXT OFILE))))
                          (Find (SETQ OFILE (MBUTTON.NEXT.FIELD.AS.TEXT TEXTOBJ (GETSEL SEL CH#)))
                                [COND
                                   ((ZEROP (NCHARS OFILE))   (* ; "NOTHING--HE HIT DEL.")
                                    NIL)
                                   (OFILE                    (* ; 
                                                             "There's something to do.  Go do it.")
                                          (TEDIT.PROMPTPRINT MAINTEXT "Searching..." T)
                                          [SETQ CH (CAR (ERSETQ (TEDIT.FIND MAINTEXT OFILE NIL NIL T]
                                          (COND
                                             (CH             (* ; "We found the target text.")
                                                 (TEDIT.PROMPTPRINT MAINTEXT "Done.")
                                                 (\SHOWSEL MAINSEL NIL)
                                                 (SETSEL MAINSEL CH# (CAR CH))
                                                             (* ; 
                                                             "Set up SELECTION to be the found text")
                                                 (SETSEL MAINSEL CHLIM (ADD1 (CADR CH)))
                                                 [SETSEL MAINSEL DCH (ADD1 (IDIFFERENCE (CADR CH)
                                                                                  (CAR CH]
                                                 (SETSEL MAINSEL POINT 'RIGHT)
                                                 (FSETTOBJ MAINTEXT CARETLOOKS (
                                                                          \TEDIT.GET.INSERT.CHARLOOKS
                                                                                MAINTEXT MAINSEL))
                                                             (* ; 
                                            "Set the caret looks to match those of the new selection")
                                                 (TEDIT.RESET.EXTEND.PENDING.DELETE MAINSEL)
                                                             (* ; "And never pending a deletion.")
                                                 (\FIXSEL MAINSEL MAINTEXT)
                                                 (TEDIT.NORMALIZECARET MAINTEXT MAINSEL)
                                                 (\SHOWSEL MAINSEL T))
                                             (T (TEDIT.PROMPTPRINT MAINTEXT "(Not found)"])
                          (Substitute [PROG* ((SAVECH# (GETSEL SEL CH#))
                                              (REPLACEMENT (MBUTTON.NEXT.FIELD.AS.TEXT TEXTOBJ
                                                                  (GETSEL SEL CH#)))
                                              (PATTERN (MBUTTON.NEXT.FIELD.AS.TEXT
                                                        TEXTOBJ
                                                        (GETSEL (fetch (TEXTOBJ SCRATCHSEL)
                                                                   of TEXTOBJ)
                                                               CHLIM)))
                                              CONFIRM? KEEPLOOKS? LOC)
                                             (SETQ LOC (MBUTTON.FIND.NEXT.BUTTON
                                                        TEXTOBJ
                                                        (GETSEL (fetch (TEXTOBJ SCRATCHSEL)
                                                                   of TEXTOBJ)
                                                               CHLIM)))
                                             [SETQ CONFIRM? (EQ 'ON (IMAGEOBJPROP (CAR LOC)
                                                                           'STATE]
                                             [SETQ LOC (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ
                                                              (ADD1 (CDR LOC]
                                             [SETQ KEEPLOOKS? (EQ 'ON (IMAGEOBJPROP (CAR LOC)
                                                                             'STATE]
                                             (COND
                                                ((ZEROP (NCHARS PATTERN))
                                                             (* ; "NOTHING--HE HIT DEL.")
                                                 NIL)
                                                (PATTERN     (* ; 
                                                             "There's something to do.  Go do it.")
                                                       (CL:WHEN KEEPLOOKS?
                                                           (MBUTTON.FIND.NEXT.FIELD TEXTOBJ SAVECH# T
                                                                  )

                                                           (* ;; 
                                    "Get the replacement out of the menu to copy into the main text.")

                                                           (SETQ REPLACEMENT
                                                            (\SELPIECES (fetch (TEXTOBJ SCRATCHSEL)
                                                                           of TEXTOBJ))))
                                                       (RESETLST
                                                           (RESETSAVE (CURSOR WAITINGCURSOR))
                                                           (TEDIT.SUBSTITUTE MAINTEXT PATTERN 
                                                                  REPLACEMENT CONFIRM?))])
                          (Quit                              (* ; "He wants to QUIT the edit.")
                                (COND
                                   ((\TEDIT.QUIT (\TEDIT.PRIMARYW MAINTEXT)
                                           T)
                                    (replace (TEXTOBJ EDITFINISHEDFLG) of TEXTOBJ with T))))
                          (Page% Layout                      (* ; "Page layout menu")
                                        (\TEDIT.MENU.START (COPYTEXTSTREAM TEDIT.EXPANDED.PAGEMENU T)
                                               (\TEDIT.PRIMARYW MAINTEXT)
                                               "Page Layout Menu"
                                               (HEIGHTIFWINDOW 135 5)))
                          (Para% Looks                       (* ; "Page layout menu")
                                       (\TEDIT.EXPANDEDPARA.MENU MAINTEXT))
                          (Char% Looks                       (* ; "Page layout menu")
                                       (\TEDIT.EXPANDEDCHARLOOKS.MENU MAINTEXT))
                          (All                               (* ; "Select the entire document.")
                               (COND
                                  ((NOT (ZEROP (TEXTLEN MAINTEXT)))
                                   (\SHOWSEL MAINSEL NIL)
                                   (TEDIT.RESET.EXTEND.PENDING.DELETE MAINSEL)
                                   (SETSEL MAINSEL CH# 1)
                                   (SETSEL MAINSEL CHLIM (ADD1 (TEXTLEN MAINTEXT)))
                                   (SETSEL MAINSEL DCH (TEXTLEN MAINTEXT))
                                   (SETSEL MAINSEL POINT 'LEFT)
                                   (SETSEL MAINSEL SET T)
                                   (\FIXSEL MAINSEL MAINTEXT)
                                   (\SHOWSEL MAINSEL T))))
                          (Hardcopy [SETQ PRINTHOST (\TEDIT.MAKEFILENAME (MBUTTON.NEXT.FIELD.AS.TEXT
                                                                          TEXTOBJ
                                                                          (GETSEL SEL CH#]
                                    (COND
                                       ((NOT PRINTHOST)      (* ; 
                                     "If he didn't specify a particular host, defer to his defaults.")
                                        (TEDIT.PROMPTPRINT MAINTEXT "Using default print server.")))
                                    (SETQ %#COPIES (MBUTTON.NEXT.FIELD.AS.NUMBER
                                                    TEXTOBJ
                                                    (GETSEL (fetch (TEXTOBJ SCRATCHSEL) of TEXTOBJ)
                                                           CH#)))
                                                             (* ; 
                                                    "Grab the field that specifies number of copies.")
                                    [COND
                                       (%#COPIES (SETQ PRINTOPTIONS (LIST '%#COPIES %#COPIES]
                                    (SETQ %#SIDES
                                     (SELECTQ (IMAGEOBJPROP (CAR (MBUTTON.FIND.NEXT.BUTTON
                                                                  TEXTOBJ
                                                                  (GETSEL (fetch (TEXTOBJ SCRATCHSEL)
                                                                             of TEXTOBJ)
                                                                         CHLIM)))
                                                     'STATE)
                                         (One% Side 1)
                                         (Duplex 2)
                                         NIL))
                                    [COND
                                       (%#SIDES (push PRINTOPTIONS %#SIDES)
                                              (push PRINTOPTIONS '%#SIDES]
                                    [SETQ MSG (\TEDIT.MAKEFILENAME (MBUTTON.NEXT.FIELD.AS.TEXT
                                                                    TEXTOBJ
                                                                    (GETSEL (fetch (TEXTOBJ 
                                                                                          SCRATCHSEL)
                                                                               of TEXTOBJ)
                                                                           CH#]
                                    [COND
                                       (MSG (push PRINTOPTIONS MSG)
                                            (push PRINTOPTIONS 'MESSAGE]
                                    (TEDIT.HARDCOPY MAINTEXT NIL NIL NIL PRINTHOST PRINTOPTIONS))
                          (ERROR)))]
          (SETSEL SEL SET T)                                 (* ; 
                                                         "Now turn the menu button highlighting off.")
          (SETSEL SEL ONFLG T)
          (\SHOWSEL SEL NIL)                                 (* ; 
                                                             "And forget that anything is selected.")
          (SETSEL SEL SET NIL])
)
(DEFINEQ

(\TEDIT.CHARLOOKSMENU.CREATE
  [LAMBDA NIL                                                (* ; "Edited 20-Aug-87 16:50 by jds")
                                                             (* ; "Creates the TEdit Expanded Menu")
    (SETQ TEDIT.CHARLOOKS.MENU (\TEXTMENU.DOC.CREATE (APPEND (LIST (create MB.BUTTON
                                                                          MBLABEL _ 'APPLY
                                                                          MBBUTTONEVENTFN _
                                                                          '\TEDIT.APPLY.CHARLOOKS)
                                                                   (create MB.TEXT
                                                                          MBSTRING _ "   ")
                                                                   (create MB.BUTTON
                                                                          MBLABEL _ 'SHOW
                                                                          MBBUTTONEVENTFN _
                                                                          '\TEDIT.SHOW.CHARLOOKS)
                                                                   (create MB.TEXT
                                                                          MBSTRING _ "   ")
                                                                   (create MB.BUTTON
                                                                          MBLABEL _ 'NEUTRAL
                                                                          MBBUTTONEVENTFN _
                                                                          
                                                                          '
                                                                          \TEDIT.NEUTRALIZE.CHARLOOKS
                                                                          )
                                                                   (create MB.TEXT
                                                                          MBSTRING _ "
"))
                                                            TEDIT.CHARLOOKSMENU.SPEC])

(\TEDIT.EXPANDEDCHARLOOKS.MENU
  [LAMBDA (STREAM)                                           (* ; "Edited 20-Sep-2023 23:13 by rmk")
                                                             (* ; "Edited 10-Oct-2022 00:23 by rmk")
                                                             (* ; "Edited 20-Aug-87 16:49 by jds")

    (* ;; "Open a character-looks menu.")

    (\TEDIT.MENU.START (COPYTEXTSTREAM TEDIT.CHARLOOKS.MENU T)
           (\TEDIT.PRIMARYW STREAM)
           "Character Looks Menu"
           (HEIGHTIFWINDOW 75 T])

(\TEDIT.APPLY.BOLDNESS
  [LAMBDA (BUTTON NEWLOOKS)                                  (* jds "30-Aug-84 13:55")
    (SELECTQ (IMAGEOBJPROP BUTTON 'STATE)
        (ON (CONS 'WEIGHT (CONS 'BOLD NEWLOOKS)))
        (OFF (CONS 'WEIGHT (CONS 'MEDIUM NEWLOOKS)))
        NEWLOOKS])

(\TEDIT.APPLY.CHARLOOKS
  [LAMBDA (OBJ SEL W)                                        (* ; "Edited 18-Apr-2023 23:55 by rmk")
                                                             (* ; "Edited 21-Oct-2022 18:47 by rmk")
                                                             (* ; "Edited 30-May-91 22:17 by jds")

    (* ;; "MBFN for TEdit default menu item buttons.")

    (PROG ((TEXTOBJ (fetch (SELECTION SELTEXTOBJ) of SEL))
           (MAINTEXT (WINDOWPROP (WINDOWPROP W 'MAINWINDOW)
                            'TEXTOBJ))
           (CH# (ADD1 (fetch (SELECTION CH#) of SEL)))
           SCRATCHSEL OFILE CH NEWLOOKS SIZE SUPER SUB NEXTB BUTTON TEXT OFFSET)
          [SETQ CH# (ADD1 (CDR (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ CH#]
                                                             (* ; "Skip over the SHOW button")
          [SETQ CH# (ADD1 (CDR (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ CH#]
                                                             (* ; "And over the NEUTRAL button.")
          (SETQ NEWLOOKS (\TEDIT.PARSE.CHARLOOKS.MENU TEXTOBJ CH#))
                                                             (* ; 
                                                       "Now Parse the menu, to give us a looks spec.")
          (TEDIT.LOOKS MAINTEXT NEWLOOKS (fetch (SELECTION CH#) of (fetch (TEXTOBJ SEL) of MAINTEXT))
                 (fetch (SELECTION DCH) of (fetch (TEXTOBJ SEL) of MAINTEXT)))
                                                             (* ; "Make the change in looks")
          (\SHOWSEL SEL NIL)                                 (* ; "And turn off the APPLY button.")
                                                             (* ; 
                                                             "Leave him typing in the real document")
          (TTY.PROCESS (WINDOWPROP (WINDOWPROP W 'MAINWINDOW)
                              'PROCESS])

(\TEDIT.APPLY.OLINE
  [LAMBDA (BUTTON NEWLOOKS)                                  (* jds "30-Aug-84 13:56")
    (SELECTQ (IMAGEOBJPROP BUTTON 'STATE)
        (ON (CONS 'OVERLINE (CONS 'ON NEWLOOKS)))
        (OFF (CONS 'OVERLINE (CONS 'OFF NEWLOOKS)))
        NEWLOOKS])

(\TEDIT.APPLY.UNBREAKABLE
  [LAMBDA (BUTTON NEWLOOKS)                                  (* ; "Edited 24-Jul-2023 17:10 by rmk")
                                                             (* jds "30-Aug-84 13:56")
    (SELECTQ (IMAGEOBJPROP BUTTON 'STATE)
        (ON (CONS 'UNBREAKABLE (CONS 'ON NEWLOOKS)))
        (OFF (CONS 'UNBREAKABLE (CONS 'OFF NEWLOOKS)))
        NEWLOOKS])

(\TEDIT.SHOW.CHARLOOKS
  [LAMBDA (OBJ SEL MENUSTREAM)                               (* ; "Edited 20-Jul-2023 17:00 by rmk")
                                                             (* ; "Edited  3-May-2023 10:40 by rmk")
                                                             (* ; "Edited 22-Aug-2022 13:17 by rmk")
                                                             (* ; "Edited 30-May-91 22:17 by jds")

    (* ;; "OBJ is unused, presumably to have a standard interface with other menu functions that are updating an image object.")

    (* ;; "MENUSTREAM is the displaystream of the charlooks menu window.")

    (* ;; "Set the CHARLOOKS menu from the looks of the currently selected character.")

    (LET* ((TEXTOBJ (GETSEL SEL SELTEXTOBJ))
           (MAINTEXT (WINDOWPROP (WINDOWPROP MENUSTREAM 'MAINWINDOW)
                            'TEXTOBJ))
           (MAINCH# (GETSEL (fetch (TEXTOBJ SEL) of MAINTEXT)
                           CH#))
           (CH# (ADD1 (GETSEL SEL CH#)))
           PC OFILE CH NEWLOOKS NEXTB BUTTON TEXT OFFSET)
          (COND
             ((<= MAINCH# (TEXTLEN MAINTEXT))
              [SETQ CH# (ADD1 (CDR (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ CH#]
                                                             (* ; "Skip over the NEUTRAL button.")
              (\SHOWSEL SEL NIL)
              (SETSEL SEL SET NIL)
              (SETQ PC (\CHTOPC MAINCH# MAINTEXT))           (* ; 
                                                          "The PIECE containing the text to describe")
              (SETQ NEWLOOKS (PLOOKS PC))                    (* ; 
                                                             "Get the looks for those characters.")
                                                             (* ; 
                                                             "Fill in the menu blanks with that info")
              (TEDIT.DEFERRED-UPDATES TEXTOBJ (\TEDIT.FILL.IN.CHARLOOKS.MENU TEXTOBJ CH# NEWLOOKS])

(\TEDIT.NEUTRALIZE.CHARLOOKS
  [LAMBDA (OBJ SEL W)                                        (* ; "Edited 19-Dec-2023 13:40 by rmk")
                                                             (* ; "Edited 18-Apr-2023 23:55 by rmk")
                                                             (* ; "Edited 21-Oct-2022 18:50 by rmk")
                                                             (* ; "Edited 30-May-91 22:18 by jds")

    (* ;; "Handle the NEUTRAL button on a character looks menu.  Sets all the menu settings neutral.")

    (LET [(TEXTOBJ (GETSEL SEL SELTEXTOBJ))
          (CH# (ADD1 (FGETSEL SEL CH#]
         (\SHOWSEL SEL NIL)
         (FSETSEL SEL SET NIL)
         (\TEDIT.NEUTRALIZE.CHARLOOKS.MENU TEXTOBJ CH#)      (* ; 
                          "Fill in the menu blanks with that info and update the menu's screen image")
         (TEDIT.UPDATE.SCREEN TEXTOBJ])

(\TEDIT.FILL.IN.CHARLOOKS.MENU
  [LAMBDA (TEXTOBJ CH# NEWLOOKS)                             (* ; "Edited 13-Nov-2023 09:55 by rmk")
                                                             (* ; "Edited 24-Jul-2023 21:09 by rmk")
                                                             (* ; "Edited 18-Apr-2023 23:55 by rmk")
                                                             (* ; "Edited 30-May-91 22:28 by jds")

    (* ;; "Given a TEXTOBJ describing a charlooks menu, the CH# of the start of the charlooks menu, and a set of looks, fill in the menu fields.")

    (\DTEST TEXTOBJ 'TEXTOBJ)
    (LET (PC OFILE CH NEXTB BUTTON TEXT OFFSET (SCRATCHSEL (FGETTOBJ TEXTOBJ SCRATCHSEL)))
         (SETQ NEWLOOKS (\TEDIT.PARSE.CHARLOOKS.LIST NEWLOOKS NIL TEXTOBJ))

         (* ;; "Make sure the charlooks are in the proper internal format, so this fn can be called from every reasonable place.")

         [for PROP in (LIST (fetch (CHARLOOKS CLBOLD) of NEWLOOKS)
                            (fetch (CHARLOOKS CLITAL) of NEWLOOKS)
                            (fetch (CHARLOOKS CLULINE) of NEWLOOKS)
                            (fetch (CHARLOOKS CLSTRIKE) of NEWLOOKS)
                            (fetch (CHARLOOKS CLOLINE) of NEWLOOKS)
                            (fetch (CHARLOOKS CLUNBREAKABLE) of NEWLOOKS))
            do (SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ CH#))
               [COND
                  (PROP                                      (* ; "Must set the property")
                        (IMAGEOBJPROP (CAR NEXTB)
                               'STATE
                               'ON))
                  (T                                         (* ; "Must reset it.")
                     (IMAGEOBJPROP (CAR NEXTB)
                            'STATE
                            'OFF]
               (SETQ CH# (ADD1 (CDR NEXTB]
         (SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ CH#)) (* ; "Get to the start of the text.")
         (SETQ BUTTON (CAR NEXTB))
         [for ITEM in (IMAGEOBJPROP BUTTON 'BUTTONS)
            do                                               (* ; 
         "Loop thru the font FAMILY name button list, looking for one that matches this text's looks")
               (COND
                  ((STRING-EQUAL [COND
                                    ((AND (type? FONTCLASS (fetch (CHARLOOKS CLFONT) of NEWLOOKS))
                                          (NEQ (fetch FONTCLASSNAME of (fetch (CHARLOOKS CLFONT)
                                                                          of NEWLOOKS))
                                               'DEFAULTFONT))
                                     (CONCAT (fetch FONTCLASSNAME of (fetch (CHARLOOKS CLFONT)
                                                                        of NEWLOOKS))
                                            '-class))
                                    ((FONTP (fetch (CHARLOOKS CLFONT) of NEWLOOKS))
                                     (FONTPROP (fetch (CHARLOOKS CLFONT) of NEWLOOKS)
                                            'FAMILY]
                          ITEM)
                   (IMAGEOBJPROP BUTTON 'STATE ITEM)
                   (RETURN))) finally                        (* ; 
                                                       "This font wasn't found in the list.  Add it.")
                                    [MB.NWAYBUTTON.ADDITEM BUTTON
                                           (COND
                                              ((type? FONTCLASS (fetch (CHARLOOKS CLFONT)
                                                                   of NEWLOOKS))
                                               (PACK* (fetch FONTCLASSNAME of (fetch (CHARLOOKS
                                                                                      CLFONT)
                                                                                 of NEWLOOKS))
                                                      '-class))
                                              ((FONTP (fetch (CHARLOOKS CLFONT) of NEWLOOKS))
                                               (FONTPROP (fetch (CHARLOOKS CLFONT) of NEWLOOKS)
                                                      'FAMILY] 
                                                             (* ; 
                                                             "Add this family to the list of items")
                                    (IMAGEOBJPROP BUTTON 'STATE (U-CASE (FONTPROP (fetch (CHARLOOKS
                                                                                          CLFONT)
                                                                                     of NEWLOOKS)
                                                                               'FAMILY]
                                                             (* ; 
                                                             "Now find which text button was 'on'")
         (MBUTTON.SET.NEXT.FIELD TEXTOBJ (ADD1 (CDR NEXTB))
                NIL)                                         (* ; "Clean out the 'other font' field")
         (MBUTTON.SET.NEXT.FIELD TEXTOBJ (ADD1 (GETSEL SCRATCHSEL CH#))
                (fetch (CHARLOOKS CLSIZE) of NEWLOOKS))      (* ; "Set the value in the SIZE field")
         [SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ (ADD1 (GETSEL SCRATCHSEL CH#]
                                                             (* ; 
                                                   "Move forward to the SUPERSCRIPT/SUBSCRIPT button")
         (SETQ BUTTON (CAR NEXTB))
         (SETQ OFFSET (fetch (CHARLOOKS CLOFFSET) of NEWLOOKS))
                                                             (* ; 
                                                             "Remember the offset value for later")
         [COND
            ((OR (NOT (fetch (CHARLOOKS CLOFFSET) of NEWLOOKS))
                 (ZEROP (fetch (CHARLOOKS CLOFFSET) of NEWLOOKS)))
                                                             (* ; 
                                       "There is no subscript or superscript.  Mark the text NORMAL.")
             (IMAGEOBJPROP BUTTON 'STATE 'Normal)
             (SETQ OFFSET NIL)                               (* ; 
                                                             "Mark there as being no offset value")
             )
            ((ILESSP OFFSET 0)                               (* ; "SUBSCRIPTING")
             (IMAGEOBJPROP BUTTON 'STATE 'Subscript))
            ((IGREATERP OFFSET 0)                            (* ; "SUBSCRIPTING")
             (IMAGEOBJPROP BUTTON 'STATE 'Superscript]
         (MBUTTON.SET.NEXT.FIELD TEXTOBJ (ADD1 (CDR NEXTB))
                (AND OFFSET (IABS OFFSET)))                  (* ; 
                                                  "Now move up to the offset distance fill-in field.")
         (\SHOWSEL SCRATCHSEL NIL)
         (SETSEL SCRATCHSEL SET NIL)
         (\TEDIT.MARK.LINES.DIRTY TEXTOBJ CH# (ADD1 (GETSEL SCRATCHSEL CH#])

(\TEDIT.NEUTRALIZE.CHARLOOKS.MENU
  [LAMBDA (TEXTOBJ CH#)                                      (* ; "Edited 19-Dec-2023 13:40 by rmk")
                                                             (* ; "Edited 20-Jul-2023 17:00 by rmk")
                                                             (* ; "Edited 13-Sep-2022 12:06 by rmk")
                                                             (* ; "Edited 30-May-91 22:18 by jds")

    (* ;; 
  "Set all the fields in the CHARLOOKS menu specified by TEXTOBJ to neutral values, starting at CH#.")

    (LET (NEXTB BUTTON)
         (TEDIT.DEFERRED-UPDATES TEXTOBJ 

                (* ;; "PROP makes sure we mark the right number of property buttons")

                [for PROP in '(BOLD ITAL ULINE STRIKE OLINE UNBREAKABLE)
                   do (SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ CH#))
                      (IMAGEOBJPROP (CAR NEXTB)
                             'STATE
                             'NEUTRAL)
                      (SETQ CH# (ADD1 (CDR NEXTB]
                (SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ CH#))
                                                             (* ; "Get to the start of the text.")
                (SETQ BUTTON (CAR NEXTB))
                (IMAGEOBJPROP BUTTON 'STATE NIL)             (* ; 
                                                             "Now find which text button was 'on'")
                (MBUTTON.SET.NEXT.FIELD TEXTOBJ (ADD1 (CDR NEXTB))
                       NIL)                                  (* ; "Clean out the 'other font' field")
                (MBUTTON.SET.NEXT.FIELD TEXTOBJ (ADD1 (GETSEL SCRATCHSEL CH#))
                       NIL)                                  (* ; "Set the value in the SIZE field")
                [SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ (ADD1 (GETSEL SCRATCHSEL CH#]
                                                             (* ; 
                                                   "Move forward to the SUPERSCRIPT/SUBSCRIPT button")
                (SETQ BUTTON (CAR NEXTB))                    (* ; 
                                                             "Remember the offset value for later")
                (IMAGEOBJPROP BUTTON 'STATE NIL)             (* ; 
                                                  "Now move up to the offset distance fill-in field.")
                (MBUTTON.SET.NEXT.FIELD TEXTOBJ (ADD1 (CDR NEXTB))
                       NIL])

(\TEDIT.PARSE.CHARLOOKS.MENU
  [LAMBDA (TEXTOBJ CH#)                                      (* ; "Edited 24-Jul-2023 17:10 by rmk")
                                                             (* ; "Edited 30-May-91 22:18 by jds")

    (* ;; "MBFN for TEdit default menu item buttons.")

    (LET (SCRATCHSEL CH NEWLOOKS SIZE SUPER SUB NEXTB BUTTON TEXT OFFSET)
         (SETQ SCRATCHSEL (fetch (TEXTOBJ SCRATCHSEL) of TEXTOBJ))
         [for BUTTON in '(BOLD ITALIC UNDERLINE STRIKEOUT OVERSCORE UNBREAKABLE)
            do                                               (* ; 
                                                 "Set the character properties which are independent")
               (SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ CH#))
               (SELECTQ BUTTON
                   (BOLD (SETQ NEWLOOKS (\TEDIT.APPLY.BOLDNESS (CAR NEXTB)
                                               NEWLOOKS)))
                   (ITALIC (SETQ NEWLOOKS (\TEDIT.APPLY.SLOPE (CAR NEXTB)
                                                 NEWLOOKS)))
                   (UNDERLINE (SETQ NEWLOOKS (\TEDIT.APPLY.ULINE (CAR NEXTB)
                                                    NEWLOOKS)))
                   (STRIKEOUT (SETQ NEWLOOKS (\TEDIT.APPLY.STRIKEOUT (CAR NEXTB)
                                                    NEWLOOKS)))
                   (OVERSCORE (SETQ NEWLOOKS (\TEDIT.APPLY.OLINE (CAR NEXTB)
                                                    NEWLOOKS)))
                   (UNBREAKABLE (SETQ NEWLOOKS (\TEDIT.APPLY.UNBREAKABLE (CAR NEXTB)
                                                      NEWLOOKS)))
                   NIL)
               (SETQ CH# (ADD1 (CDR NEXTB]
         (SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ CH#)) (* ; "Get to the start of the text.")
         (SETQ BUTTON (CAR NEXTB))
         [AND BUTTON
              (SELECTQ (IMAGEOBJPROP BUTTON 'STATE)
                  (Other                                     (* ; 
                                                             "Have to get and add in a new font.")
                         (COND
                            ([SETQ TEXT (MBUTTON.NEXT.FIELD.AS.ATOM TEXTOBJ (ADD1 (CDR NEXTB]
                                                             (* ; 
                                           "He wants some font not on the list.  Add it to the list.")
                             (SETQ NEWLOOKS (CONS 'FAMILY (CONS (U-CASE TEXT)
                                                                NEWLOOKS)))
                             (COND
                                ([NOT (FMEMB (U-CASE TEXT)
                                             (U-CASE (IMAGEOBJPROP BUTTON 'BUTTONS]
                                                             (* ; 
                                                 "This font name isn't in the list already;  add it.")
                                 (MB.NWAYBUTTON.ADDITEM BUTTON TEXT)
                                 (IMAGEOBJPROP BUTTON 'STATE TEXT))
                                (T [IMAGEOBJPROP BUTTON 'STATE (for NAME
                                                                  in (IMAGEOBJPROP BUTTON
                                                                            'BUTTONS)
                                                                  suchthat (EQ (U-CASE TEXT)
                                                                               (U-CASE NAME]
                                                             (* ; "Select the newly-specified font.")
                                   ))
                             (TEDIT.DELETE TEXTOBJ SCRATCHSEL)
                                                             (* ; 
                                                 "Delete the new font's name from the fill-in field.")
                             (TEDIT.OBJECT.CHANGED TEXTOBJ BUTTON))
                            (T                               (* ; 
                                                   "He didn't specify a font.  Complain but keep on.")
                               (TEDIT.PROMPTPRINT TEXTOBJ 
                                      "'Other' font not specified; no change made." T))))
                  (COND
                     ((STRPOS '-class (IMAGEOBJPROP BUTTON 'STATE))
                                                             (* ; 
                                                 "It's a font class.  Grab the name and evaluate it.")
                      (SETQ NEWLOOKS
                       (CONS 'FONT (CONS [EVAL (MKATOM (SUBSTRING (IMAGEOBJPROP BUTTON 'STATE)
                                                              1
                                                              (SUB1 (STRPOS '-class
                                                                           (IMAGEOBJPROP BUTTON
                                                                                  'STATE]
                                         NEWLOOKS)))
                      (MBUTTON.FIND.NEXT.FIELD TEXTOBJ CH#))
                     (T (SETQ NEWLOOKS (CONS 'FAMILY (CONS (U-CASE (IMAGEOBJPROP BUTTON 'STATE))
                                                           NEWLOOKS)))
                        (MBUTTON.FIND.NEXT.FIELD TEXTOBJ CH#)(* ; 
                                                             "Skip over the 'other text' fill-in.")
                        ]                                    (* ; 
                                                             "Now find which text button was 'on'")
         [SETQ SIZE (MBUTTON.NEXT.FIELD.AS.NUMBER TEXTOBJ (ADD1 (fetch (SELECTION CH#) of SCRATCHSEL]
                                                             (* ; 
                                                           "Read the contents of the SIZE menu field")
         [COND
            (SIZE                                            (* ; "He specified one.  Set it.")
                  (SETQ NEWLOOKS (CONS 'SIZE (CONS SIZE NEWLOOKS]
         [SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ (ADD1 (fetch (SELECTION CH#) of SCRATCHSEL]
                                                             (* ; 
                                                   "Get a handle on the SUPERSCRIPT/SUBSCRIPT button")
         (SETQ BUTTON (CAR NEXTB))
         (SETQ SUPER (IMAGEOBJPROP BUTTON 'STATE))           (* ; "Decide which kind it is")
         [SETQ OFFSET (MBUTTON.NEXT.FIELD.AS.NUMBER TEXTOBJ (ADD1 (CDR NEXTB]
                                                             (* ; 
                                                            "And get the offset distance, in points.")
         (SELECTQ SUPER
             (Superscript                                    (* ; 
     "He called for SUPERSCRIPTing.  Offset the characters by either the distance he gave, or 2 pts.")
                          (SETQ NEWLOOKS (CONS 'SUPERSCRIPT (CONS (OR OFFSET 2)
                                                                  NEWLOOKS))))
             (Subscript 
                        (* ;; "He called for SUBSCRIPTING.  Offset the characters by either the distance he gave, or 2 pts if he gave no distance.")

                        (SETQ NEWLOOKS (CONS 'SUBSCRIPT (CONS (OR OFFSET 2)
                                                              NEWLOOKS))))
             (Normal                                         (* ; 
                                                      "NORMAL => Turn off all super and subscripting")
                     (SETQ NEWLOOKS (CONS 'SUPERSCRIPT (CONS 0 NEWLOOKS))))
             NIL)
         NEWLOOKS])

(\TEDIT.APPLY.SLOPE
  [LAMBDA (BUTTON NEWLOOKS)                                  (* jds "30-Aug-84 13:56")
    (SELECTQ (IMAGEOBJPROP BUTTON 'STATE)
        (ON (CONS 'SLOPE (CONS 'ITALIC NEWLOOKS)))
        (OFF (CONS 'SLOPE (CONS 'REGULAR NEWLOOKS)))
        NEWLOOKS])

(\TEDIT.APPLY.STRIKEOUT
  [LAMBDA (BUTTON NEWLOOKS)                                  (* jds "30-Aug-84 13:56")
    (SELECTQ (IMAGEOBJPROP BUTTON 'STATE)
        (ON (CONS 'STRIKEOUT (CONS 'ON NEWLOOKS)))
        (OFF (CONS 'STRIKEOUT (CONS 'OFF NEWLOOKS)))
        NEWLOOKS])

(\TEDIT.APPLY.ULINE
  [LAMBDA (BUTTON NEWLOOKS)                                  (* jds "30-Aug-84 13:56")
    (SELECTQ (IMAGEOBJPROP BUTTON 'STATE)
        (ON (CONS 'UNDERLINE (CONS 'ON NEWLOOKS)))
        (OFF (CONS 'UNDERLINE (CONS 'OFF NEWLOOKS)))
        NEWLOOKS])
)
(DEFINEQ

(\TEDITPARAMENU.CREATE
  [LAMBDA NIL                                                (* jds " 2-Aug-84 15:32")
                                                             (* Creates the TEdit Expanded 
                                                             Paragraph Menu)
    (SETQ TEDIT.EXPANDEDPARA.MENU (\TEXTMENU.DOC.CREATE TEDIT.PARAMENU.SPEC])

(\TEDIT.EXPANDEDPARA.MENU
  [LAMBDA (STREAM)                                           (* ; "Edited 19-Sep-2023 08:51 by rmk")
                                                             (* ; "Edited 20-Aug-87 16:51 by jds")
    (\TEDIT.MENU.START (COPYTEXTSTREAM TEDIT.EXPANDEDPARA.MENU T)
           (\TEDIT.PRIMARYW (TEXTOBJ STREAM))
           "Paragraph-Looks Menu"
           (HEIGHTIFWINDOW 141 T])

(\TEDIT.APPLY.PARALOOKS
  [LAMBDA (OBJ SEL W)                                        (* ; "Edited 17-Dec-2023 17:04 by rmk")
                                                             (* ; "Edited 18-Apr-2023 23:55 by rmk")
                                                             (* ; "Edited  7-Apr-2023 18:57 by rmk")
                                                             (* ; "Edited  3-Mar-2023 23:30 by rmk")
                                                             (* ; "Edited 10-Feb-2023 16:51 by rmk")
                                                             (* ; "Edited 21-Oct-2022 18:51 by rmk")
                                                             (* ; "Edited  6-Oct-2022 16:44 by rmk")
                                                             (* ; "Edited  1-Oct-2022 16:34 by rmk")
                                                             (* ; "Edited 22-Apr-93 16:45 by jds")

    (* ;; "Handler for the Paragraph Menu's APPLY button.  Collects the specs from the paragraph menu and calls TEDIT.PARALOOKS to effect the change.")

    (LET ((TEXTOBJ (GETSEL SEL SELTEXTOBJ))
          (MAINTEXT (WINDOWPROP (WINDOWPROP W 'MAINWINDOW)
                           'TEXTOBJ))
          (CH# (ADD1 (FGETSEL SEL CH#)))
          SCRATCHSEL QUAD OFILE CH NEWLOOKS SIZE SUPER SUB LINELEAD PARALEAD DEFTAB BUTTON MARUNIT 
          NEXTB BUTTONDATA L1 LN R PARATYPE SPECIALX SPECIALY)
         [SETQ CH# (ADD1 (CDR (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ CH#]
                                                             (* ; "Skip the SHOW button")
         [SETQ CH# (ADD1 (CDR (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ CH#]
                                                             (* ; "and the NEUTRAL button.")
         (SETQ SCRATCHSEL (fetch (TEXTOBJ SCRATCHSEL) of TEXTOBJ))
         (SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ CH#)) (* ; 
                                        "Get the JUSTIFICATION button: Left/Right/Centered/Justified")
         (SETQ BUTTON (CAR NEXTB))
         (CL:WHEN (AND (SETQ QUAD (IMAGEOBJPROP BUTTON 'STATE))
                       (NEQ QUAD 'OFF))                      (* ; "A justification was specified")
             (push NEWLOOKS 'QUAD (U-CASE (MKATOM QUAD))))
         [SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ (ADD1 (CDR NEXTB]
                                                             (* ; "Go to the 'Page Heading' button")
         (SETQ BUTTON (CAR NEXTB))
         [COND
            [(EQ (IMAGEOBJPROP BUTTON 'STATE)
                 'ON)                                        (* ; 
                                                             "A page heading of a particular subtype")
             (push NEWLOOKS 'TYPE 'PAGEHEADING 'SUBTYPE (MKATOM (MBUTTON.NEXT.FIELD.AS.TEXT
                                                                 TEXTOBJ
                                                                 (ADD1 (CDR NEXTB]
            [(EQ (IMAGEOBJPROP BUTTON 'STATE)
                 'OFF)                                       (* ; 
                                                             "This paragraph IS NOT a page heading.")
             (push NEWLOOKS 'TYPE NIL 'SUBTYPE NIL)
             (MBUTTON.NEXT.FIELD.AS.TEXT TEXTOBJ (ADD1 (CDR NEXTB]
            (T                                               (* ; "No change specified.")
               (MBUTTON.NEXT.FIELD.AS.TEXT TEXTOBJ (ADD1 (CDR NEXTB]
         (CL:WHEN (SETQ LINELEAD (MBUTTON.NEXT.FIELD.AS.NUMBER TEXTOBJ (FGETSEL SCRATCHSEL CH#)))
                                                             (* ; "Get any line leading")
             (push NEWLOOKS 'LINELEADING LINELEAD))
         (CL:WHEN [SETQ PARALEAD (MBUTTON.NEXT.FIELD.AS.NUMBER TEXTOBJ (ADD1 (FGETSEL SCRATCHSEL CH#]
                                                             (* ; "Get any paragraph leading")
             (push NEWLOOKS 'PARALEADING PARALEAD))
         (CL:WHEN [SETQ SPECIALX (MBUTTON.NEXT.FIELD.AS.NUMBER TEXTOBJ (ADD1 (FGETSEL SCRATCHSEL CH#]
                                                             (* ; 
                                                       "Get any special X position for the paragraph")
             (push NEWLOOKS 'SPECIALX (FIXR (TIMES 12 SPECIALX))))
         (CL:WHEN [SETQ SPECIALY (MBUTTON.NEXT.FIELD.AS.NUMBER TEXTOBJ (ADD1 (FGETSEL SCRATCHSEL CH#]
                                                             (* ; 
                                                        "Get special Y positioning for the paragraph")
             (push NEWLOOKS 'SPECIALY (FIXR (TIMES 12 SPECIALY))))
         (SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ (FGETSEL SCRATCHSEL CH#)))
         (SETQ BUTTON (CAR NEXTB))
         (COND
            ((EQ (IMAGEOBJPROP BUTTON 'STATE)
                 'ON)                                        (* ; 
                               "This paragraph starts on a new page (or col or box, as apprpopriate)")
             (push NEWLOOKS 'NEWPAGEBEFORE T))
            ((EQ (IMAGEOBJPROP BUTTON 'STATE)
                 'OFF)                                       (* ; 
                                                             "This paragraph IS NOT a page heading.")
             (push NEWLOOKS 'NEWPAGEBEFORE NIL)))
         [SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ (ADD1 (CDR NEXTB]
         (SETQ BUTTON (CAR NEXTB))
         (COND
            ((EQ (IMAGEOBJPROP BUTTON 'STATE)
                 'ON)                                        (* ; 
                                                        "The next paragraph starts on a new page....")
             (push NEWLOOKS 'NEWPAGEAFTER T))
            ((EQ (IMAGEOBJPROP BUTTON 'STATE)
                 'OFF)                                       (* ; 
                                                 "The next paragraph DOESN'T START on a new page....")
             (push NEWLOOKS 'NEWPAGEAFTER NIL)))
         [SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ (ADD1 (CDR NEXTB]
         (SETQ BUTTON (CAR NEXTB))
         (SELECTQ (IMAGEOBJPROP BUTTON 'STATE)
             (ON (push NEWLOOKS 'HARDCOPY T))
             (OFF (push NEWLOOKS 'HARDCOPY NIL))
             NIL)

(* ;;; "THE VARIOUS KINDS OF KEEP PROPERTIES (ONLY HEADING-KEEP FOR NOW THO)")

         [SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ (ADD1 (CDR NEXTB]
         (SETQ BUTTON (CAR NEXTB))
         (SELECTQ (IMAGEOBJPROP BUTTON 'STATE)
             (ON (push NEWLOOKS 'HEADINGKEEP 'ON))
             (OFF (push NEWLOOKS 'HEADINGKEEP 'OFF))
             NIL)

         (* ;; "Default tab width")

         (SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ (FGETSEL SCRATCHSEL CH#)))
         (SETQ BUTTON (CAR NEXTB))
         (SETQ DEFTAB (MBUTTON.NEXT.FIELD.AS.NUMBER TEXTOBJ (CDR NEXTB)))

         (* ;; "If the MARBAR is next, we don't need the loop.  If it isn't next, the original code would have looped forever.")

         (* ;; "This keeps the loop, but allows for the  search to advance, in case in the future some other item is stuck in. But if it doesn't find a MARGINBAR, the following code will crash.")

         [bind (CHNO _ (FGETSEL SCRATCHSEL CH#)) while NEXTB until (type? MARGINBAR BUTTON)
            do (SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ CHNO))
               (SETQ BUTTON (CAR NEXTB))
               (SETQ CHNO (ADD1 (CDR NEXTB]
         (CL:UNLESS (type? MARGINBAR BUTTON)
                (SHOULDNT "MARGINBAR NOT FOUND"))
         (SETQ BUTTONDATA (IMAGEOBJPROP BUTTON 'OBJECTDATUM))
         (SETQ MARUNIT (fetch MARUNIT of BUTTONDATA))
         (SETQ L1 (FIXR (TIMES (fetch MARL1 of BUTTONDATA)
                               MARUNIT)))
         (CL:WHEN (IGEQ L1 0)                                (* ; 
                                                         "The 1stleftmargin is set, and non-neutral.")
             (push NEWLOOKS '1STLEFTMARGIN L1))
         (SETQ LN (FIXR (TIMES (fetch MARLN of BUTTONDATA)
                               MARUNIT)))
         (CL:WHEN (IGEQ LN 0)                                (* ; 
                                                            "The LEFTMARGIN is set, and non-neutral.")
             (push NEWLOOKS 'LEFTMARGIN LN))
         (SETQ R (FIXR (TIMES (fetch MARR of BUTTONDATA)
                              MARUNIT)))
         (CL:WHEN (IGEQ R 0)                                 (* ; 
                                                           "The RIGHTMARGIN is set, and non-neutral.")
             (push NEWLOOKS 'RIGHTMARGIN R))
         (CL:UNLESS (MEMB (fetch MARTABS of BUTTONDATA)
                          '(NIL NEUTRAL))                    (* ; 
                                            "If the tab settings are neutral, don't change anything.")
             [push NEWLOOKS 'TABS (CONS DEFTAB (SORT (for TAB in (fetch MARTABS of BUTTONDATA)
                                                        collect (CONS (FIXR (TIMES (CAR TAB)
                                                                                   MARUNIT))
                                                                      (CDR TAB)))
                                                     (FUNCTION (LAMBDA (A B)
                                                                 (ILEQ (CAR A)
                                                                       (CAR B])
         (TEDIT.PARALOOKS MAINTEXT NEWLOOKS (GETSEL (FGETTOBJ MAINTEXT SEL)
                                                   CH#)
                (GETSEL (FGETTOBJ MAINTEXT SEL)
                       DCH))
         (\SHOWSEL SEL NIL)
         (TTY.PROCESS (WINDOWPROP (WINDOWPROP W 'MAINWINDOW)
                             'PROCESS])

(\TEDIT.SHOW.PARALOOKS
  [LAMBDA (OBJ SEL W)                                        (* ; "Edited 20-Jul-2023 17:00 by rmk")
                                                             (* ; "Edited  6-Jun-2023 15:10 by rmk")
                                                             (* ; "Edited 18-Apr-2023 23:59 by rmk")
                                                             (* ; "Edited  9-Mar-2023 14:43 by rmk")
                                                             (* ; "Edited 11-Feb-2023 11:31 by rmk")
                                                             (* ; "Edited 21-Oct-2022 18:51 by rmk")
                                                             (* ; "Edited 22-Aug-2022 13:13 by rmk")
                                                             (* ; "Edited  6-Jul-92 09:42 by jds")

    (* ;; "Fill in the PARAGRAPH LOOKS menu from the para looks for a selected character.  This function knows the order of items in the paragraph menu.")

    (* ;; "This only makese sense if you know that CH# in SCRATCHSEL gets updated  down below MBUTTON.SET.NEXT.FIELD")

    (LET ((TEXTOBJ (GETSEL SEL SELTEXTOBJ))
          (CH# (ADD1 (GETSEL SEL CH#)))
          BUTTON NEXTB BUTTONDATA PARALOOKS MARUNIT)
         (CL:WHEN [SETQ PARALOOKS (TEDIT.GET.PARALOOKS (WINDOWPROP (WINDOWPROP W 'MAINWINDOW)
                                                              'TEXTOBJ]
             (\SHOWSEL SEL NIL)
             (SETSEL SEL SET NIL)
             [TEDIT.DEFERRED-UPDATES
              TEXTOBJ                                        (* ; 
                                                             "Skip NEUTRAL, grab justifiers (QUAD)")
              [SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ (ADD1 (CDR (MBUTTON.FIND.NEXT.BUTTON
                                                                        TEXTOBJ CH#]
              (SETQ BUTTON (CAR NEXTB))
              (for ITEM in (IMAGEOBJPROP BUTTON 'BUTTONS)
                 when (EQ (LISTGET PARALOOKS 'QUAD)
                          (U-CASE (CL:IF (LISTP ITEM)
                                      (CAR ITEM)
                                      ITEM))) do (IMAGEOBJPROP BUTTON 'STATE ITEM) 
                                                             (* ; "Turn this button on.")
                                                 (RETURN))   (* ; 
                                                             "Now find which text button was 'on'")
              [SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ (ADD1 (CDR NEXTB]
                                                             (* ; "Find the 'Page Heading' button")
              (SETQ BUTTON (CAR NEXTB))
              (COND
                 [(EQ (LISTGET PARALOOKS 'TYPE)
                      'PAGEHEADING)                          (* ; 
                         "This IS a page heading.  Turn the button ON and set the heading type field")
                  (IMAGEOBJPROP BUTTON 'STATE 'ON)
                  (MBUTTON.SET.NEXT.FIELD TEXTOBJ (ADD1 (GETSEL SCRATCHSEL CH#))
                         (LISTGET PARALOOKS 'SUBTYPE]
                 (T (IMAGEOBJPROP BUTTON 'STATE 'OFF)        (* ; "Not a page heading, no type")
                    (MBUTTON.SET.NEXT.FIELD TEXTOBJ (ADD1 (GETSEL SCRATCHSEL CH#))
                           NIL)))
              (MBUTTON.SET.NEXT.FIELD TEXTOBJ (ADD1 (GETSEL SCRATCHSEL CH#))
                     (LISTGET PARALOOKS 'LINELEADING))
              (MBUTTON.SET.NEXT.FIELD TEXTOBJ (ADD1 (GETSEL SCRATCHSEL CH#))
                     (LISTGET PARALOOKS 'PARALEADING))       (* ; "Update the PARA LEADING field")
              [MBUTTON.SET.NEXT.FIELD TEXTOBJ (ADD1 (GETSEL SCRATCHSEL CH#))
                     (LET ((VAL (/ (FIXR (IQUOTIENT (OR (LISTGET PARALOOKS 'SPECIALX)
                                                        0)
                                                3))
                                   4)))
                          (COND
                             ((FIXP VAL)
                              VAL)
                             (T (FLOAT VAL]
              [MBUTTON.SET.NEXT.FIELD TEXTOBJ (ADD1 (GETSEL SCRATCHSEL CH#))
                     (LET ((VAL (/ (FIXR (IQUOTIENT (OR (LISTGET PARALOOKS 'SPECIALY)
                                                        0)
                                                3))
                                   4)))
                          (COND
                             ((FIXP VAL)
                              VAL)
                             (T (FLOAT VAL]
              [SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ (ADD1 (GETSEL SCRATCHSEL CH#]
              (SETQ BUTTON (CAR NEXTB))
              (IMAGEOBJPROP BUTTON 'STATE (LISTGET PARALOOKS 'NEWPAGEBEFORE))
              [SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ (ADD1 (CDR NEXTB]
              (SETQ BUTTON (CAR NEXTB))
              (IMAGEOBJPROP BUTTON 'STATE (LISTGET PARALOOKS 'NEWPAGEAFTER))

              (* ;; "HARDCOPY-DISPLAY MODE")

              [SETQ NEXTB (MBUTTON.SET.NEXT.BUTTON.STATE TEXTOBJ (ADD1 (CDR NEXTB))
                                 (LISTGET PARALOOKS 'HARDCOPY]

              (* ;; "HEADING KEEP")

              [SETQ NEXTB (MBUTTON.SET.NEXT.BUTTON.STATE TEXTOBJ NEXTB (LISTGET PARALOOKS
                                                                              'HEADINGKEEP]

              (* ;; "DEFAULT TAB WIDTH")

              [MBUTTON.SET.NEXT.FIELD TEXTOBJ NEXTB (CAR (LISTGET PARALOOKS 'TABS]
              (SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ (GETSEL SCRATCHSEL CH#)))
              (SETQ BUTTON (CAR NEXTB))
              (until (type? MARGINBAR BUTTON) do [SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON
                                                              TEXTOBJ
                                                              (ADD1 (CDR NEXTB]
                                                 (SETQ BUTTON (CAR NEXTB)))
              (SETQ BUTTONDATA (IMAGEOBJPROP BUTTON 'OBJECTDATUM))
              (replace MARL1 of BUTTONDATA with (FQUOTIENT (LISTGET PARALOOKS '1STLEFTMARGIN)
                                                       (fetch MARUNIT of BUTTONDATA)))
              (replace MARLN of BUTTONDATA with (FQUOTIENT (LISTGET PARALOOKS 'LEFTMARGIN)
                                                       (fetch MARUNIT of BUTTONDATA)))
              (replace MARR of BUTTONDATA with (FQUOTIENT (LISTGET PARALOOKS 'RIGHTMARGIN)
                                                      (fetch MARUNIT of BUTTONDATA)))
              (replace MARTABS of BUTTONDATA with (for TAB in (CDR (LISTGET PARALOOKS 'TABS))
                                                     collect (CONS (FQUOTIENT (CAR TAB)
                                                                          (fetch MARUNIT of 
                                                                                           BUTTONDATA
                                                                                 ))
                                                                   (CDR TAB])])

(\TEDIT.NEUTRALIZE.PARALOOKS.MENU
  [LAMBDA (OBJ SEL W)                                        (* ; "Edited 20-Jul-2023 17:00 by rmk")
                                                             (* ; "Edited 21-Oct-2022 18:51 by rmk")
                                                             (* ; "Edited 30-May-91 22:18 by jds")

    (* ;; "Set all the fields of a PARAGRAPH LOOKS menu to neutral settings.")

    (LET ((TEXTOBJ (GETSEL SEL SELTEXTOBJ))
          (CH# (ADD1 (GETSEL SEL CH#)))
          BUTTON NEXTB BUTTONDATA)                           (* ; "Get to the start of the text.")
         (TEDIT.DEFERRED-UPDATES TEXTOBJ (SETQ NEXTB (MBUTTON.SET.NEXT.BUTTON.STATE TEXTOBJ CH#
                                                            'NIL))
                                                             (* ; 
                                                          "Neutralize the justification N-Way button")
                (SETQ NEXTB (MBUTTON.SET.NEXT.BUTTON.STATE TEXTOBJ NEXTB 'NEUTRAL))
                                                             (* ; "Find the 'Page Heading' button")
                (MBUTTON.SET.NEXT.FIELD TEXTOBJ (ADD1 (GETSEL SCRATCHSEL CH#))
                       NIL)
                (MBUTTON.SET.NEXT.FIELD TEXTOBJ (ADD1 (GETSEL SCRATCHSEL CH#))
                       NIL)                                  (* ; "Update the LINE LEADING field")
                (MBUTTON.SET.NEXT.FIELD TEXTOBJ (ADD1 (GETSEL SCRATCHSEL CH#))
                       NIL)                                  (* ; "Update the PARA LEADING field")
                (MBUTTON.SET.NEXT.FIELD TEXTOBJ (ADD1 (GETSEL SCRATCHSEL CH#))
                       NIL)
                (MBUTTON.SET.NEXT.FIELD TEXTOBJ (ADD1 (GETSEL SCRATCHSEL CH#))
                       NIL)
                (SETQ NEXTB (MBUTTON.SET.NEXT.BUTTON.STATE TEXTOBJ (ADD1 (GETSEL SCRATCHSEL CH#))
                                   'NEUTRAL))                (* ; "New page before")
                (SETQ NEXTB (MBUTTON.SET.NEXT.BUTTON.STATE TEXTOBJ NEXTB 'NEUTRAL))
                                                             (* ; "New page after")
                (SETQ NEXTB (MBUTTON.SET.NEXT.BUTTON.STATE TEXTOBJ NEXTB 'NEUTRAL))
                                                             (* ; "Hardcopy formatting mode")
                (MBUTTON.SET.NEXT.FIELD TEXTOBJ NEXTB NIL)   (* ; 
                                                             "Update the DEFAULT TAB SPACING field")
                (SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ (GETSEL SCRATCHSEL CH#)))
                (SETQ BUTTON (CAR NEXTB))
                (while (NOT (type? MARGINBAR BUTTON)) do [SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON
                                                                      TEXTOBJ
                                                                      (ADD1 (CDR NEXTB]
                                                         (SETQ BUTTON (CAR NEXTB)))
                (SETQ BUTTONDATA (IMAGEOBJPROP BUTTON 'OBJECTDATUM))
                                                             (* ; 
                                                       "(IMAGEOBJPROP BUTTON (QUOTE IMAGECACHE) NIL)")
                                                             (* ; "Tell it to reformat itself.")
                [replace MARL1 of BUTTONDATA with (COND
                                                     ((ILESSP (fetch MARL1 of BUTTONDATA)
                                                             0)
                                                      (fetch MARL1 of BUTTONDATA))
                                                     (T (IMIN -0.5 (IMINUS (fetch MARL1 of BUTTONDATA
                                                                                  ]
                [replace MARLN of BUTTONDATA with (COND
                                                     ((ILESSP (fetch MARLN of BUTTONDATA)
                                                             0)
                                                      (fetch MARLN of BUTTONDATA))
                                                     (T (IMIN -0.5 (IMINUS (fetch MARLN of BUTTONDATA
                                                                                  ]
                [replace MARR of BUTTONDATA with (COND
                                                    ((ILESSP (fetch MARR of BUTTONDATA)
                                                            0)
                                                     (fetch MARR of BUTTONDATA))
                                                    ((ZEROP (fetch MARR of BUTTONDATA))
                                                     (IMINUS (IQUOTIENT (IDIFFERENCE (GETTOBJ TEXTOBJ
                                                                                            WRIGHT)
                                                                               20)
                                                                    12)))
                                                    (T (IMIN -0.5 (IMINUS (fetch MARR of BUTTONDATA]
                (replace MARTABS of BUTTONDATA with 'NEUTRAL])

(\TEDIT.RECORD.TABLEADERS
  [LAMBDA (BUTTON NEWSTATE TEXTSTREAM SEL)                   (* ; "Edited 30-May-91 22:18 by jds")

         (* Toggle the dotted-leader state of the margin bar tab-setter.
         This is called when the user hits the "dotted leader" toggle button in the menu)

    (PROG* [(FLG (COND
                    ((EQ NEWSTATE 'ON)
                     T)
                    (T NIL)))
            (TEXTOBJ (TEXTOBJ TEXTSTREAM))
            (MARGINBAR (CAR (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ (ADD1 (fetch (SELECTION CH#)
                                                                       of SEL]
           (replace MARTABTYPE of (IMAGEOBJPROP MARGINBAR 'OBJECTDATUM)
              with (SELECTQ (OR (fetch MARTABTYPE of (IMAGEOBJPROP MARGINBAR 'OBJECTDATUM))
                                'LEFT)
                       (LEFT 'DOTTEDLEFT)
                       (DOTTEDLEFT 'LEFT)
                       (CENTERED 'DOTTEDCENTERED)
                       (DOTTEDCENTERED 
                            'CENTERED)
                       (RIGHT 'DOTTEDRIGHT)
                       (DOTTEDRIGHT 'RIGHT)
                       (DECIMAL 'DOTTEDDECIMAL)
                       (DOTTEDDECIMAL 'DECIMAL)
                       (SHOULDNT])
)
(DEFINEQ

(\TEDIT.SHOW.PAGEFORMATTING
  [LAMBDA (OBJ SEL W)                                        (* ; "Edited 18-Jan-2024 08:33 by rmk")
                                                             (* ; "Edited 12-Nov-2023 23:40 by rmk")
                                                             (* ; "Edited  6-Nov-2023 22:33 by rmk")
                                                             (* ; "Edited 20-Jul-2023 17:00 by rmk")
                                                             (* ; "Edited 18-Apr-2023 23:59 by rmk")
                                                             (* ; "Edited 21-Oct-2022 18:51 by rmk")
                                                             (* ; "Edited 13-Sep-2022 12:07 by rmk")
                                                             (* ; "Edited  4-Feb-92 16:38 by jds")

(* ;;; "Take a document's page formatting, and display it in the menu.")

    (LET* ((TEXTOBJ (GETSEL SEL SELTEXTOBJ))
           (MAINTEXT (WINDOWPROP (WINDOWPROP W 'MAINWINDOW)
                            'TEXTOBJ))
           (CH# (ADD1 (GETSEL SEL CH#)))
           FOLIOINFO NEWLOOKS NEXTB BUTTON PAGEID OPAGEFRAMES FIRST REST PFONT HEADING HEADINGS 
           PAGEPROPS STARTINGPAGE# PAPERSIZE)

          (* ;; "Start by turning off the selection--and leaving it off afterward.")

          (\SHOWSEL SEL NIL)
          (SETSEL SEL SET NIL)

          (* ;; "What kind of page are we looking at the specs for?")

          (SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ CH#))
          (SETQ BUTTON (CAR NEXTB))
          (SETQ PAGEID (SELECTQ (IMAGEOBJPROP (CAR NEXTB)
                                       'STATE)
                           (|First(&Default)| 
                                'FIRST)
                           (Other% Left 'LEFT)
                           (Other% Right 'RIGHT)
                           (PROGN (TEDIT.PROMPTPRINT MAINTEXT 
                                         "First specify which kind of page you want to see." T)
                                  NIL)))

          (* ;; "Now mark the menu for NO SCREEN UPDATES during the button-setting process.")

          (CL:WHEN PAGEID
              [TEDIT.DEFERRED-UPDATES TEXTOBJ 

                     (* ;; "Now replace the button values, fill-in fields, etc.")

                     (SETQ OPAGEFRAMES (OR (fetch (TEXTOBJ TXTPAGEFRAMES) of MAINTEXT)
                                           TEDIT.PAGE.FRAMES))

                     (* ;; " LISTP is already just a list of first-recto-verso frames")

                     (CL:UNLESS (LISTP OPAGEFRAMES)          (* ; 
                                      "Probably a parsed-up version of the thing.  Fix it to a list.")
                         (COND
                            [(EQ (fetch (PAGEREGION REGIONFILLMETHOD) of OPAGEFRAMES)
                                 'SEQUENCE)
                             (SETQ FIRST (CAR (fetch (PAGEREGION REGIONSUBBOXES) of OPAGEFRAMES)))
                             (SETQ REST (CADR (fetch (PAGEREGION REGIONSUBBOXES) of OPAGEFRAMES)))
                             (COND
                                [(EQ (fetch (PAGEREGION REGIONFILLMETHOD) of REST)
                                     'ALTERNATE)
                                 (SETQ OPAGEFRAMES (CONS FIRST (fetch (PAGEREGION REGIONSUBBOXES)
                                                                  of REST]
                                (T (SETQ OPAGEFRAMES NIL]
                            (T (SETQ OPAGEFRAMES NIL))))
                     (CL:UNLESS OPAGEFRAMES                  (* ; 
                          "If the formatting isn't in our simplified 3-way format, punt out of this.")
                         (TEDIT.PROMPTPRINT MAINTEXT "Format too complex to edit." T)
                         (SETQ PAGEID NIL))
                     (SELECTQ PAGEID
                         (FIRST (SETQ NEWLOOKS (CAR OPAGEFRAMES)))
                         (LEFT (SETQ NEWLOOKS (CADR OPAGEFRAMES))
                               (SETQ PAPERSIZE (LISTGET [CAR (FLAST (TEDIT.UNPARSE.PAGEFORMAT
                                                                     (CAR OPAGEFRAMES)
                                                                     'PICAS]
                                                      'PAPERSIZE)))
                         (RIGHT (SETQ NEWLOOKS (CADDR OPAGEFRAMES))
                                (SETQ PAPERSIZE (LISTGET [CAR (FLAST (TEDIT.UNPARSE.PAGEFORMAT
                                                                      (CAR OPAGEFRAMES)
                                                                      'PICAS]
                                                       'PAPERSIZE)))
                         NIL)
                     (COND
                        (PAGEID (SETQ NEWLOOKS (TEDIT.UNPARSE.PAGEFORMAT NEWLOOKS 'PICAS))
                               (SETQ PAGEPROPS (CAR (FLAST NEWLOOKS)))
                               [COND
                                  ((EQ PAGEID 'FIRST)
                                   (SETQ PAPERSIZE (LISTGET PAGEPROPS 'PAPERSIZE]
                               (SETQ CH# (ADD1 (CDR NEXTB))) (* ; "Move past the kind-of-page button")
                               (SETQ STARTINGPAGE# (LISTGET PAGEPROPS 'STARTINGPAGE#))
                                                             (* ; 
                                                             "Grab a potential starting page number.")
                               (MBUTTON.SET.NEXT.FIELD TEXTOBJ CH# STARTINGPAGE#)
                               (SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ CH#))
                               (SETQ CH# (ADD1 (CDR NEXTB)))
                               (IMAGEOBJPROP (CAR NEXTB)
                                      'STATE
                                      (OR PAPERSIZE 'Letter))
                               (SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ CH#))
                               (SETQ CH# (ADD1 (CDR NEXTB)))
                               [IMAGEOBJPROP (CAR NEXTB)
                                      'STATE
                                      (COND
                                         ((LISTGET PAGEPROPS 'LANDSCAPE?)
                                          'ON)
                                         (T 'OFF]            (* ; 
                                                   "Tell whether the page is to be landscape or not.")
                               (SETQ FOLIOINFO (LISTGET PAGEPROPS 'FOLIOINFO))
                                                             (* ; "Page number fomratting info")
                               (SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ CH#))
                               (SETQ CH# (ADD1 (CDR NEXTB)))
                               [IMAGEOBJPROP (CAR NEXTB)
                                      'STATE
                                      (COND
                                         ((pop NEWLOOKS)
                                          'Yes)
                                         (T 'No]
                               (SETQ BUTTON (CAR NEXTB))
                               (MBUTTON.SET.NEXT.FIELD TEXTOBJ (ADD1 (CDR NEXTB))
                                      (pop NEWLOOKS))        (* ; "Page # X location")
                               (MBUTTON.SET.NEXT.FIELD TEXTOBJ (ADD1 (GETSEL SCRATCHSEL CH#))
                                      (pop NEWLOOKS))        (* ; "Page # Y location")
                               (SETQ PFONT (pop NEWLOOKS))   (* ; "Skip the font info for now.")
                               [SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ (ADD1 (GETSEL SCRATCHSEL
                                                                                          CH#]
                               (SETQ CH# (ADD1 (CDR NEXTB)))
                               (SETQ BUTTON (CAR NEXTB))
                               (IMAGEOBJPROP BUTTON 'STATE (SELECTQ (pop FOLIOINFO)
                                                               (ARABIC 123)
                                                               (LOWERROMAN 'xiv)
                                                               (UPPERROMAN 'XIV)
                                                               123))
                                                             (* ; "The format for the page number")
                               (SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ CH#))
                               (SETQ CH# (ADD1 (CDR NEXTB)))
                               (SETQ BUTTON (CAR NEXTB))     (* ; "How to align the page number")
                               (IMAGEOBJPROP BUTTON 'STATE (SELECTQ (pop NEWLOOKS)
                                                               (LEFT 'Left)
                                                               (RIGHT 'Right)
                                                               (CENTERED 'Centered)
                                                               'Centered))
                               (MBUTTON.SET.NEXT.FIELD TEXTOBJ CH# (pop FOLIOINFO))
                                                             (* ; 
                                                             "The text to surround the page number")
                               (MBUTTON.SET.NEXT.FIELD TEXTOBJ (ADD1 (GETSEL SCRATCHSEL CH#))
                                      (pop FOLIOINFO))
                               (MBUTTON.SET.NEXT.FIELD TEXTOBJ (ADD1 (GETSEL SCRATCHSEL CH#))
                                      (pop NEWLOOKS))        (* ; "Left Margin")
                               (MBUTTON.SET.NEXT.FIELD TEXTOBJ (ADD1 (GETSEL SCRATCHSEL CH#))
                                      (pop NEWLOOKS))        (* ; "Right Margin")
                               (MBUTTON.SET.NEXT.FIELD TEXTOBJ (ADD1 (GETSEL SCRATCHSEL CH#))
                                      (pop NEWLOOKS))        (* ; "Top margin")
                               (MBUTTON.SET.NEXT.FIELD TEXTOBJ (ADD1 (GETSEL SCRATCHSEL CH#))
                                      (pop NEWLOOKS))        (* ; "Bottom Margin")
                               (MBUTTON.SET.NEXT.FIELD TEXTOBJ (ADD1 (GETSEL SCRATCHSEL CH#))
                                      (pop NEWLOOKS))        (* ; "# of columns")
                               (MBUTTON.SET.NEXT.FIELD TEXTOBJ (ADD1 (GETSEL SCRATCHSEL CH#))
                                      (pop NEWLOOKS))        (* ; "Column width")
                               (MBUTTON.SET.NEXT.FIELD TEXTOBJ (ADD1 (GETSEL SCRATCHSEL CH#))
                                      (pop NEWLOOKS))        (* ; "Intercolumn spacing")
                               (SETQ HEADINGS (pop NEWLOOKS))
                               (for HEADING# from 1 to 8 do 
                                                            (* ;; 
                                    "Insert info about up to 8 headings (the # of spots in the menu)")

                                                            (SETQ HEADING (pop HEADINGS))
                                                            (MBUTTON.SET.NEXT.FIELD
                                                             TEXTOBJ
                                                             (ADD1 (GETSEL SCRATCHSEL CH#))
                                                             (pop HEADING))
                                                            (MBUTTON.SET.NEXT.FIELD
                                                             TEXTOBJ
                                                             (ADD1 (GETSEL SCRATCHSEL CH#))
                                                             (pop HEADING))
                                                            (MBUTTON.SET.NEXT.FIELD
                                                             TEXTOBJ
                                                             (ADD1 (GETSEL SCRATCHSEL CH#))
                                                             (pop HEADING)))
                               (CL:WHEN HEADINGS

                                   (* ;; "There were headings left over, so warn user.")

                                   (TEDIT.PROMPTPRINT TEXTOBJ (CONCAT 
                                                                    "Note: The menu shows only 8 of "
                                                                     (IPLUS 8 (LENGTH HEADINGS))
                                                                     " headings")
                                          T T))              (* ; 
                                                        "The font for the page numbers to appear in.")
                               (\TEDIT.FILL.IN.CHARLOOKS.MENU TEXTOBJ (ADD1 (GETSEL SCRATCHSEL CH#))
                                      (OR PFONT (GETTEXTPROP TEXTOBJ 'FOLIO.LOOKS])])

(\TEDITPAGEMENU.CREATE
  [LAMBDA NIL                                                (* gbn " 8-Oct-84 18:25")
                                                             (* Creates the TEdit Expanded Menu)
    (SETQ TEDIT.EXPANDED.PAGEMENU (\TEXTMENU.DOC.CREATE (APPEND TEDIT.PAGEMENU.SPEC 
                                                               TEDIT.MENUDIVIDER.SPEC
                                                               [LIST (create MB.TEXT
                                                                            MBSTRING _ 
                                                               "Character Looks for Page Numbers:   "
                                                                            MBFONT _
                                                                            (FONTCREATE 'HELVETICA 10
                                                                                   'BOLD]
                                                               TEDIT.CHARLOOKSMENU.SPEC])

(\TEDIT.APPLY.PAGEFORMATTING
  [LAMBDA (OBJ SEL W)                                        (* ; "Edited 21-Dec-2023 12:31 by rmk")
                                                             (* ; "Edited  8-Aug-2023 00:02 by rmk")
                                                             (* ; "Edited 21-Oct-2022 18:51 by rmk")
                                                             (* ; 
                                                        "Edited  4-Jun-93 12:04 by sybalsky:mv:envos")

(* ;;; "Change the page formatting for this document")

    (PROG ((TEXTOBJ (fetch (SELECTION SELTEXTOBJ) of SEL))
           (MAINTEXT (WINDOWPROP (WINDOWPROP W 'MAINWINDOW)
                            'TEXTOBJ))
           (CH# (ADD1 (fetch (SELECTION CH#) of SEL)))
           SCRATCHSEL NEXTB BUTTON OPAGEFRAMES PAGEID PX PY LEFT BOTTOM TOP RIGHT ALIGNMENT PAGENOS 
           COLS COLWIDTH INTERCOL PFONT NPAGEFORMAT HEADINGTYPE HEADINGX HEADINGY HEADINGS 
           HEADINGINVALID STARTINGPAGE# FOLIOFORMAT FOLIOPRETEXT FOLIOPOSTTEXT PAGEOPTIONS 
           NFPAGEFORMAT PAPERSIZE LANDSCAPE?)
          (SETQ SCRATCHSEL (fetch (TEXTOBJ SCRATCHSEL) of TEXTOBJ))
          [SETQ CH# (ADD1 (CDR (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ CH#]
                                                             (* ; "Skip the SHOW button.")
          (SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ CH#))
          (SETQ CH# (ADD1 (CDR NEXTB)))
          (SELECTQ (IMAGEOBJPROP (CAR NEXTB)
                          'STATE)
              (|First(&Default)| 
                   (SETQ PAGEID 'FIRST))
              (Other% Left (SETQ PAGEID 'LEFT))
              (Other% Right (SETQ PAGEID 'RIGHT))
              (PROGN (TEDIT.PROMPTPRINT MAINTEXT "Set KIND OF PAGE before APPLYing." T)
                     (RETURN)))                              (* ; "Find which page, for later.")
          (SETQ STARTINGPAGE# (AND (EQ PAGEID 'FIRST)
                                   (MBUTTON.NEXT.FIELD.AS.NUMBER TEXTOBJ CH#)))
          (SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ CH#))
          (SETQ CH# (ADD1 (CDR NEXTB)))
          (SETQ PAPERSIZE (OR (IMAGEOBJPROP (CAR NEXTB)
                                     'STATE)
                              'Letter))                      (* ; 
                                                  "Get the size of paper this is to be formatted for")
          (SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ CH#))
          (SETQ CH# (ADD1 (CDR NEXTB)))
          (SETQ LANDSCAPE? (EQ (IMAGEOBJPROP (CAR NEXTB)
                                      'STATE)
                               'ON))                         (* ; 
                                         "Decide if this kind of page is to be printed landscape....")
          (SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ CH#))
          (SETQ CH# (ADD1 (CDR NEXTB)))
          (SELECTQ (IMAGEOBJPROP (CAR NEXTB)
                          'STATE)
              (No (SETQ PAGENOS NIL))
              (Yes (SETQ PAGENOS T))
              NIL)                                           (* ; "Find about page numbers")
          (SETQ PX (MBUTTON.NEXT.FIELD.AS.NUMBER TEXTOBJ CH#))
          [SETQ PY (MBUTTON.NEXT.FIELD.AS.NUMBER TEXTOBJ (ADD1 (fetch (SELECTION CH#) of SCRATCHSEL]
          [COND
             (PAGENOS                                        (* ; 
                                     "If he wants page numbers, make sure he said WHERE to put them.")
                    (COND
                       ((AND PX PY))
                       (T (TEDIT.PROMPTPRINT MAINTEXT 
                                 "Please set the X and Y location for page numbers before APPLYing."
                                 T)
                          (TEDIT.PROMPTFLASH MAINTEXT)
                          (RETURN]
          [SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ (ADD1 (fetch (SELECTION CH#) of SCRATCHSEL]
                                                             (* ; 
                                                             "Get to the numbering-format button")
          (SETQ BUTTON (CAR NEXTB))
          (SETQ FOLIOFORMAT (SELECTQ (IMAGEOBJPROP BUTTON 'STATE)
                                (123                         (* ; "arabic numbers")
                                     'ARABIC)
                                (xiv                         (* ; "lower-case roman numerals")
                                     'LOWERROMAN)
                                (XIV                         (* ; "Upper-case roman numerals")
                                     'UPPERROMAN)
                                'ARABIC))
          [SETQ NEXTB (MBUTTON.FIND.NEXT.BUTTON TEXTOBJ (ADD1 (CDR NEXTB]
                                                             (* ; 
                                                             "Get to the number alignment button")
          (SETQ BUTTON (CAR NEXTB))
          [SETQ ALIGNMENT (U-CASE (IMAGEOBJPROP BUTTON 'STATE]
                                                             (* ; "PX PY PFONT ALIGNMENT")
                                                             (* ; "Margins: LEFT, RIGHT, TOP, BOTTOM")
          (SETQ CH# (ADD1 (CDR NEXTB)))
          (SETQ FOLIOPRETEXT (MBUTTON.NEXT.FIELD.AS.TEXT TEXTOBJ CH#))
          [SETQ FOLIOPOSTTEXT (MBUTTON.NEXT.FIELD.AS.TEXT TEXTOBJ (ADD1 (fetch (SELECTION CH#)
                                                                           of SCRATCHSEL]

(* ;;; "Now get the margins on the paper")

          [SETQ LEFT (MBUTTON.NEXT.FIELD.AS.NUMBER TEXTOBJ (ADD1 (fetch (SELECTION CH#) of SCRATCHSEL
                                                                        ]
          [SETQ RIGHT (MBUTTON.NEXT.FIELD.AS.NUMBER TEXTOBJ (ADD1 (fetch (SELECTION CH#) of 
                                                                                           SCRATCHSEL
                                                                         ]
          [SETQ TOP (MBUTTON.NEXT.FIELD.AS.NUMBER TEXTOBJ (ADD1 (fetch (SELECTION CH#) of SCRATCHSEL]
          [SETQ BOTTOM (MBUTTON.NEXT.FIELD.AS.NUMBER TEXTOBJ (ADD1 (fetch (SELECTION CH#)
                                                                      of SCRATCHSEL]
          (CL:UNLESS [SETQ COLS (MBUTTON.NEXT.FIELD.AS.NUMBER TEXTOBJ (ADD1 (fetch (SELECTION CH#)
                                                                               of SCRATCHSEL]
              (TEDIT.PROMPTPRINT MAINTEXT "Please specify how many columns there should be." T)
              (TEDIT.PROMPTFLASH MAINTEXT))
          [SETQ COLWIDTH (MBUTTON.NEXT.FIELD.AS.NUMBER TEXTOBJ (ADD1 (fetch (SELECTION CH#)
                                                                        of SCRATCHSEL]
          [SETQ INTERCOL (MBUTTON.NEXT.FIELD.AS.NUMBER TEXTOBJ (ADD1 (fetch (SELECTION CH#)
                                                                        of SCRATCHSEL]
                                                             (* ; "Col count, width, spacing")
          (SETQ HEADINGS (for HEADING# from 1 to 8
                            when (PROG1 [SETQ HEADINGTYPE (MBUTTON.NEXT.FIELD.AS.ATOM
                                                           TEXTOBJ
                                                           (ADD1 (fetch (SELECTION CH#) of SCRATCHSEL
                                                                        ]
                                     [SETQ HEADINGX (MBUTTON.NEXT.FIELD.AS.NUMBER
                                                     TEXTOBJ
                                                     (ADD1 (fetch (SELECTION CH#) of SCRATCHSEL]
                                     [SETQ HEADINGY (MBUTTON.NEXT.FIELD.AS.NUMBER
                                                     TEXTOBJ
                                                     (ADD1 (fetch (SELECTION CH#) of SCRATCHSEL])
                            collect (CL:UNLESS (AND HEADINGX HEADINGY)
                                        (TEDIT.PROMPTPRINT MAINTEXT (CONCAT "You need to say WHERE "
                                                                           HEADINGTYPE 
                                                                           " headings go.")
                                               T)
                                        (TEDIT.PROMPTFLASH MAINTEXT)
                                        (SETQ HEADINGINVALID T))
                                  (LIST HEADINGTYPE HEADINGX HEADINGY)))
          (CL:WHEN HEADINGINVALID                            (* ; "Headings invalid.")
              (RETURN))
          [SETQ PFONT (\TEDIT.PARSE.CHARLOOKS.MENU TEXTOBJ (ADD1 (fetch (SELECTION CH#) of SCRATCHSEL
                                                                        ]

(* ;;; "Glom all the oddball options (starting page, folio format &c) together")

          (SETQ PAGEOPTIONS (AND STARTINGPAGE# (LIST 'STARTINGPAGE# STARTINGPAGE#)))
          (push PAGEOPTIONS 'FOLIOINFO (LIST FOLIOFORMAT FOLIOPRETEXT FOLIOPOSTTEXT))
          (COND
             (LANDSCAPE?                                     (* ; 
                                        "The pages are to be printed landscape.  Remember that fact.")
                    (push PAGEOPTIONS LANDSCAPE? T)))
          (SETQ NPAGEFORMAT (TEDIT.SINGLE.PAGEFORMAT PAGENOS PX PY PFONT (AND (NEQ ALIGNMENT
                                                                                   'OFF)
                                                                              ALIGNMENT)
                                   LEFT RIGHT TOP BOTTOM COLS COLWIDTH INTERCOL HEADINGS 'PICAS 
                                   PAGEOPTIONS PAPERSIZE))
          (SETQ OPAGEFRAMES (fetch (TEXTOBJ TXTPAGEFRAMES) of MAINTEXT))
          (CL:UNLESS (LISTP OPAGEFRAMES)
              [COND
                 ((EQ PAGEID 'FIRST)                         (* ; 
                                                             "Setting the first page sets them all")
                  (SETQ PAGEOPTIONS (COPY PAGEOPTIONS))
                  (LISTPUT PAGEOPTIONS 'STARTINGPAGE# NIL)   (* ; 
                                     "Starting page nubmer makes no sense on other than first pages.")
                  (SETQ NFPAGEFORMAT (TEDIT.SINGLE.PAGEFORMAT PAGENOS PX PY PFONT
                                            (AND (NEQ ALIGNMENT 'OFF)
                                                 ALIGNMENT)
                                            LEFT RIGHT TOP BOTTOM COLS COLWIDTH INTERCOL HEADINGS
                                            'PICAS PAGEOPTIONS PAPERSIZE))
                  (SETQ OPAGEFRAMES (LIST NPAGEFORMAT NFPAGEFORMAT NFPAGEFORMAT)))
                 (T                                          (* ; 
                                                      "Otherwise, start from the default page layout")
                    (SETQ OPAGEFRAMES (COPY TEDIT.PAGE.FRAMES])
          (SELECTQ PAGEID
              (FIRST (RPLACA OPAGEFRAMES NPAGEFORMAT))
              (LEFT (RPLACA (CDR OPAGEFRAMES)
                           NPAGEFORMAT))
              (RIGHT (RPLACA (CDDR OPAGEFRAMES)
                            NPAGEFORMAT))
              NIL)
          (TEDIT.PAGEFORMAT MAINTEXT OPAGEFRAMES)
          (TTY.PROCESS (WINDOWPROP (WINDOWPROP W 'MAINWINDOW)
                              'PROCESS])

(TEDIT.UNPARSE.PAGEFORMAT
  [LAMBDA (PAGEREGION UNITS)                                (* ; "Edited 12-Jun-90 18:59 by mitani")

(* ;;; "Take a page layout and unparse it into a PList of specs.")

    (LET* ((PAPER (fetch (PAGEREGION REGIONSPEC) of PAGEREGION))
           (PAPERWIDTH (fetch (REGION WIDTH) of PAPER))
           (PAPERHEIGHT (fetch (REGION HEIGHT) of PAPER))
           (REGIONS (fetch (PAGEREGION REGIONSUBBOXES) of PAGEREGION))
           PX PY PFONT PQUAD PINFO LEFT RIGHT TOP BOTTOM (COLS 0)
           COLWIDTH
           (INTERCOL 0)
           SPECS PAGENOS (OLDRIGHT NIL)
           SCALEFACTOR HEADINGS)
          [for REGION in REGIONS do 
                                    (* ;; 
               "Run thru the regions on the page, calculating information about the page as a whole.")

                                    (COND
                                       ((EQ (fetch (PAGEREGION REGIONFILLMETHOD) of REGION)
                                            'FOLIO)          (* ; "A page-number (%"Folio%") region")
                                        (SETQ PAGENOS T)
                                        (SETQ PX (fetch (REGION LEFT) of (fetch REGIONSPEC
                                                                            of REGION)))
                                        (SETQ PY (fetch (REGION BOTTOM) of (fetch REGIONSPEC
                                                                              of REGION)))
                                        (SETQ SPECS (fetch REGIONLOCALINFO of REGION))
                                        (SETQ PFONT (LISTGET SPECS 'CHARLOOKS))
                                        [SETQ PQUAD (CADR (LISTGET SPECS 'PARALOOKS]
                                        (SELECTQ PQUAD
                                            (LEFT)
                                            (RIGHT (SETQ PX (IPLUS PX 288)))
                                            (CENTERED (SETQ PX (IPLUS PX 144)))
                                            NIL))
                                       [(EQ (fetch (PAGEREGION REGIONFILLMETHOD) of REGION)
                                            'HEADING)        (* ; "A page-heading region")
                                        (SETQ HEADINGS (NCONC1 HEADINGS
                                                              (LIST (LISTGET (fetch REGIONLOCALINFO
                                                                                of REGION)
                                                                           'HEADINGTYPE)
                                                                    (fetch (REGION LEFT)
                                                                       of (fetch REGIONSPEC
                                                                             of REGION))
                                                                    (fetch (REGION BOTTOM)
                                                                       of (fetch REGIONSPEC
                                                                             of REGION]
                                       (T                    (* ; "A regular-text region.")
                                          (add COLS 1)       (* ; "Count columns")
                                          (SETQ COLWIDTH (fetch (REGION WIDTH)
                                                            of (fetch REGIONSPEC of REGION)))
                                          [SETQ RIGHT (IDIFFERENCE PAPERWIDTH
                                                             (ADD1 (fetch (REGION RIGHT)
                                                                      of (fetch REGIONSPEC
                                                                            of REGION]
                                          (COND
                                             ((EQ OLDRIGHT T))
                                             (OLDRIGHT (SETQ INTERCOL
                                                        (IDIFFERENCE (fetch (REGION LEFT)
                                                                        of (fetch REGIONSPEC
                                                                              of REGION))
                                                               OLDRIGHT))
                                                    (SETQ OLDRIGHT T))
                                             (T (SETQ OLDRIGHT (fetch (REGION RIGHT)
                                                                  of (fetch REGIONSPEC of REGION)))
                                                (SETQ LEFT (fetch (REGION LEFT)
                                                              of (fetch REGIONSPEC of REGION)))
                                                [SETQ TOP (IDIFFERENCE PAPERHEIGHT
                                                                 (fetch (REGION PTOP)
                                                                    of (fetch REGIONSPEC of REGION]
                                                (SETQ BOTTOM (fetch (REGION BOTTOM)
                                                                of (fetch REGIONSPEC of REGION]
          (SELECTQ UNITS
              ((POINTS NIL)                                  (* If units are in printers points, 
                                                             the default, do no scaling)
                   )
              (PICAS                                         (* The units are in picas--12pts per.
                                                             Scale all values.)
                     (SETQ SCALEFACTOR 0.12))
              (INCHES                                        (* The units are in inches, at 
                                                             72.27pts per. Set the scale factor)
                      (SETQ SCALEFACTOR 0.7227))
              (CM                                            (* Units are in CM, at 72.27/2.54pts 
                                                             per.)
                  (SETQ SCALEFACTOR (CONSTANT (FQUOTIENT 0.7227 2.54))))
              (\ILLEGAL.ARG UNITS))
          [COND
             (SCALEFACTOR                                    (* We need to do the scaling.)
                    (AND PX (SETQ PX (FQUOTIENT (FIXR (FQUOTIENT PX SCALEFACTOR))
                                            100)))
                    (AND PY (SETQ PY (FQUOTIENT (FIXR (FQUOTIENT PY SCALEFACTOR))
                                            100)))
                    (AND LEFT (SETQ LEFT (FQUOTIENT (FIXR (FQUOTIENT LEFT SCALEFACTOR))
                                                100)))
                    (AND RIGHT (SETQ RIGHT (FQUOTIENT (FIXR (FQUOTIENT RIGHT SCALEFACTOR))
                                                  100)))
                    (AND TOP (SETQ TOP (FQUOTIENT (FIXR (FQUOTIENT TOP SCALEFACTOR))
                                              100)))
                    (AND BOTTOM (SETQ BOTTOM (FQUOTIENT (FIXR (FQUOTIENT BOTTOM SCALEFACTOR))
                                                    100)))
                    (AND COLWIDTH (SETQ COLWIDTH (FQUOTIENT (FIXR (FQUOTIENT COLWIDTH SCALEFACTOR))
                                                        100)))
                    (AND INTERCOL (SETQ INTERCOL (FQUOTIENT (FIXR (FQUOTIENT INTERCOL SCALEFACTOR))
                                                        100)))
                    (SETQ HEADINGS (for HDG in HEADINGS
                                      collect (LIST (CAR HDG)
                                                    (FQUOTIENT (FIXR (FQUOTIENT (CADR HDG)
                                                                            SCALEFACTOR))
                                                           100)
                                                    (FQUOTIENT (FIXR (FQUOTIENT (CADDR HDG)
                                                                            SCALEFACTOR))
                                                           100]
          (LIST PAGENOS PX PY PFONT PQUAD LEFT RIGHT TOP BOTTOM COLS COLWIDTH INTERCOL HEADINGS
                (fetch (PAGEREGION REGIONLOCALINFO) of PAGEREGION])
)



(* ; "Initialization Code")

(DECLARE%: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS TEDIT.EXPANDED.MENU TEDIT.EXPANDEDPARA.MENU TEDIT.CHARLOOKS.MENU TEDIT.MENUDIVIDER.SPEC 
       TEDIT.EXPANDEDMENU.SPEC TEDIT.CHARLOOKSMENU.SPEC TEDIT.PARAMENU.SPEC TEDIT.PAGEMENU.SPEC 
       TEDIT.EXPANDED.PAGEMENU)
)
(DEFINEQ

(\TEDIT.MENU.INIT
  [LAMBDA NIL                                                (* ; "Edited 12-Nov-2023 19:32 by rmk")
                                                             (* ; "Edited 24-Jul-2023 17:04 by rmk")
                                                             (* ; "Edited  6-Mar-2023 22:02 by rmk")
                                                             (* ; "Edited 10-Oct-2022 00:20 by rmk")
                                                            (* ; "Edited 29-Apr-2021 22:44 by rmk:")
                                                             (* ; "Edited 30-Mar-94 15:53 by jds")

(* ;;; "Initialize the descriptions for all TEdit menus")

(* ;;; "Divides between the main page layout menu and page-# font submenu")

    (SETQ TEDIT.MENUDIVIDER.SPEC (LIST (create MB.TEXT
                                              MBSTRING _ "

")))

(* ;;; "The principal expanded menu")

    (SETQ TEDIT.EXPANDEDMENU.SPEC (LIST (create MB.BUTTON
                                               MBLABEL _ "Quit")
                                        (create MB.TEXT
                                               MBSTRING _ "	")
                                        (create MB.BUTTON
                                               MBLABEL _ "Page Layout")
                                        (create MB.TEXT
                                               MBSTRING _ "	")
                                        (create MB.BUTTON
                                               MBLABEL _ "Char Looks")
                                        (create MB.TEXT
                                               MBSTRING _ "	")
                                        (create MB.BUTTON
                                               MBLABEL _ "Para Looks")
                                        (create MB.TEXT
                                               MBSTRING _ "	")
                                        (create MB.BUTTON
                                               MBLABEL _ "All")
                                        (create MB.TEXT
                                               MBSTRING _ "	")
                                        (create MB.TOGGLE
                                               MBTEXT _ "Unformatted"
                                               MBCHANGESTATEFN _ (FUNCTION 
                                                                  \TEDITMENU.RECORD.UNFORMATTED))
                                        (create MB.TEXT
                                               MBSTRING _ "
")
                                        (create MB.BUTTON
                                               MBLABEL _ "Get")
                                        (create MB.INSERT)
                                        (create MB.TEXT
                                               MBSTRING _ "	")
                                        (create MB.BUTTON
                                               MBLABEL _ "Put")
                                        (create MB.INSERT)
                                        (create MB.TEXT
                                               MBSTRING _ "	")
                                        (create MB.BUTTON
                                               MBLABEL _ "Include")
                                        (create MB.INSERT)
                                        (create MB.TEXT
                                               MBSTRING _ "
")
                                        (create MB.BUTTON
                                               MBLABEL _ "Find")
                                        (create MB.INSERT)
                                        (create MB.TEXT
                                               MBSTRING _ "	")
                                        (create MB.BUTTON
                                               MBLABEL _ "Substitute")
                                        (create MB.INSERT)
                                        (create MB.TEXT
                                               MBSTRING _ "  for")
                                        (create MB.INSERT)
                                        (create MB.TEXT
                                               MBSTRING _ "   ")
                                        (create MB.TOGGLE
                                               MBTEXT _ "Confirm")
                                        (create MB.TEXT
                                               MBSTRING _ "	")
                                        (create MB.TOGGLE
                                               MBTEXT _ "Use New Looks")
                                        (create MB.TEXT
                                               MBSTRING _ "
")
                                        (create MB.BUTTON
                                               MBLABEL _ "Hardcopy")
                                        (create MB.TEXT
                                               MBSTRING _ "  server:")
                                        (create MB.INSERT)
                                        (create MB.TEXT
                                               MBSTRING _ "  copies:")
                                        (create MB.INSERT)
                                        (create MB.TEXT
                                               MBSTRING _ "
")
                                        (create MB.TEXT
                                               MBSTRING _ "Print ")
                                        (create MB.NWAY
                                               MBBUTTONS _ '(One% Side Duplex)
                                               MBMAXITEMSPERLINE _ 5)
                                        (create MB.TEXT
                                               MBSTRING _ "   Message/Phone#:")
                                        (create MB.INSERT)))

(* ;;; "The character-looks (font, etc.) menu")

    (SETQ TEDIT.CHARLOOKSMENU.SPEC (LIST (create MB.TEXT
                                                MBSTRING _ "Props:   "
                                                MBFONT _ (FONTCREATE 'HELVETICA 8))
                                         (create MB.3STATE
                                                MBLABEL _ 'Bold)
                                         (create MB.TEXT
                                                MBSTRING _ "   ")
                                         (create MB.3STATE
                                                MBLABEL _ 'Italic)
                                         (create MB.TEXT
                                                MBSTRING _ "   ")
                                         (create MB.3STATE
                                                MBLABEL _ 'Underline)
                                         (create MB.TEXT
                                                MBSTRING _ "   ")
                                         (create MB.3STATE
                                                MBLABEL _ 'StrikeThru)
                                         (create MB.TEXT
                                                MBSTRING _ "   ")
                                         (create MB.3STATE
                                                MBLABEL _ 'Overbar)
                                         (create MB.TEXT
                                                MBSTRING _ "   ")
                                         (create MB.3STATE
                                                MBLABEL _ 'Unbreakable)
                                         (create MB.TEXT
                                                MBSTRING _ "
")
                                         (create MB.NWAY
                                                MBBUTTONS _ '(TimesRoman Helvetica Modern Classic 
                                                                    Terminal Other)
                                                MBMAXITEMSPERLINE _ 5)
                                         (create MB.TEXT
                                                MBSTRING _ "other font:")
                                         (create MB.INSERT)
                                         (create MB.TEXT
                                                MBSTRING _ "
")
                                         (create MB.TEXT
                                                MBSTRING _ "Size: "
                                                MBFONT _ (FONTCREATE 'HELVETICA 8))
                                         (create MB.INSERT)
                                         (create MB.TEXT
                                                MBSTRING _ "   ")
                                         (create MB.NWAY
                                                MBBUTTONS _ '(Normal Superscript Subscript))
                                         (create MB.TEXT
                                                MBSTRING _ "  distance: "
                                                MBFONT _ (FONTCREATE 'HELVETICA 8))
                                         (create MB.INSERT)))

(* ;;; "The paragraph-formatting menu (margins, etc.)")

    (SETQ TEDIT.PARAMENU.SPEC (LIST (create MB.BUTTON
                                           MBLABEL _ 'APPLY
                                           MBBUTTONEVENTFN _ (FUNCTION \TEDIT.APPLY.PARALOOKS))
                                    (create MB.TEXT
                                           MBSTRING _ "   ")
                                    (create MB.BUTTON
                                           MBLABEL _ 'SHOW
                                           MBBUTTONEVENTFN _ (FUNCTION \TEDIT.SHOW.PARALOOKS))
                                    (create MB.TEXT
                                           MBSTRING _ "   ")
                                    (create MB.BUTTON
                                           MBLABEL _ 'NEUTRAL
                                           MBBUTTONEVENTFN _ (FUNCTION 
                                                              \TEDIT.NEUTRALIZE.PARALOOKS.MENU))
                                    (create MB.TEXT
                                           MBSTRING _ "
")
                                    (create MB.NWAY
                                           MBBUTTONS _ '(Left Right Centered Justified))
                                    (create MB.TEXT
                                           MBSTRING _ "	")
                                    (create MB.3STATE
                                           MBLABEL _ "Page Heading")
                                    (create MB.TEXT
                                           MBSTRING _ "  type:")
                                    (create MB.INSERT)
                                    (create MB.TEXT
                                           MBSTRING _ "
Line leading:"
                                           MBFONT _ (FONTCREATE 'HELVETICA 8))
                                    (create MB.INSERT)
                                    (create MB.TEXT
                                           MBSTRING _ "pts   Para Leading:"
                                           MBFONT _ (FONTCREATE 'HELVETICA 8))
                                    (create MB.INSERT)
                                    (create MB.TEXT
                                           MBSTRING _ "pts   Special Locn:  X"
                                           MBFONT _ (FONTCREATE 'HELVETICA 8))
                                    (create MB.INSERT)
                                    (create MB.TEXT
                                           MBSTRING _ "picas,  Y"
                                           MBFONT _ (FONTCREATE 'HELVETICA 8))
                                    (create MB.INSERT)
                                    (create MB.TEXT
                                           MBSTRING _ "picas
New Page:  "
                                           MBFONT _ (FONTCREATE 'HELVETICA 8))
                                    (create MB.3STATE
                                           MBLABEL _ "Before")
                                    (create MB.TEXT
                                           MBSTRING _ "  ")
                                    (create MB.3STATE
                                           MBLABEL _ "After")
                                    (create MB.TEXT
                                           MBSTRING _ "	Display mode:  "
                                           MBFONT _ (FONTCREATE 'HELVETICA 8))
                                    (create MB.3STATE
                                           MBLABEL _ "Hardcopy")
                                    (create MB.TEXT
                                           MBSTRING _ "	Keep:  "
                                           MBFONT _ (FONTCREATE 'HELVETICA 8))
                                    (create MB.3STATE
                                           MBLABEL _ "Heading")
                                    (create MB.TEXT
                                           MBSTRING _ "
Tab Type:  "
                                           MBFONT _ (FONTCREATE 'HELVETICA 8))
                                    [create MB.NWAY
                                           MBBUTTONS _ '((Left \TEDIT.TABTYPE.SET)
                                                         (Right \TEDIT.TABTYPE.SET)
                                                         (Centered \TEDIT.TABTYPE.SET)
                                                         (Decimal \TEDIT.TABTYPE.SET]
                                    (create MB.TEXT
                                           MBSTRING _ "  ")
                                    (create MB.TOGGLE
                                           MBTEXT _ "Dotted Leader"
                                           MBCHANGESTATEFN _ (FUNCTION \TEDIT.RECORD.TABLEADERS))
                                    (create MB.TEXT
                                           MBSTRING _ "	Default Tab Size:"
                                           MBFONT _ (FONTCREATE 'HELVETICA 8))
                                    (create MB.INSERT)
                                    (create MB.TEXT
                                           MBSTRING _ "pts")
                                    (create MB.TEXT
                                           MBSTRING _ "
")
                                    (create MB.MARGINBAR)
                                    (create MB.TEXT
                                           MBSTRING _ "
")))

(* ;;; "Page-layout menu for columns, page headings, page numbers, etc.")

    (SETQ TEDIT.PAGEMENU.SPEC (APPEND (LIST (create MB.BUTTON
                                                   MBLABEL _ 'APPLY
                                                   MBBUTTONEVENTFN _ (FUNCTION 
                                                                      \TEDIT.APPLY.PAGEFORMATTING))
                                            (create MB.TEXT
                                                   MBSTRING _ "   "
                                                   MBFONT _ (FONTCREATE 'HELVETICA 8 'BOLD))
                                            (create MB.BUTTON
                                                   MBLABEL _ 'SHOW
                                                   MBBUTTONEVENTFN _ (FUNCTION 
                                                                      \TEDIT.SHOW.PAGEFORMATTING))
                                            (create MB.TEXT
                                                   MBSTRING _ "
")
                                            (create MB.TEXT
                                                   MBSTRING _ "For page:  ")
                                            (create MB.NWAY
                                                   MBBUTTONS _ '(|First(&Default)| Other% Left 
                                                                       Other% Right))
                                            (create MB.TEXT
                                                   MBSTRING _ "
   Starting Page #:  ")
                                            (create MB.INSERT
                                                   MBINITENTRY _ 1)
                                            (create MB.TEXT
                                                   MBSTRING _ "	Paper Size:  ")
                                            (create MB.NWAY
                                                   MBBUTTONS _ '(Letter Legal A4)
                                                   MBINITSTATE _ 'Letter)
                                            (create MB.TEXT
                                                   MBSTRING _ "  ")
                                            (create MB.TOGGLE
                                                   MBTEXT _ "Landscape")
                                            (create MB.TEXT
                                                   MBSTRING _ "

")
                                            (create MB.TEXT
                                                   MBSTRING _ "Page numbers:  ")
                                            (create MB.TEXT
                                                   MBSTRING _ "  "
                                                   MBFONT _ (FONTCREATE 'HELVETICA 8 'BOLD))
                                            (create MB.NWAY
                                                   MBBUTTONS _ '(No Yes)
                                                   MBINITSTATE _ 'Yes)
                                            (create MB.TEXT
                                                   MBSTRING _ "  ")
                                            (create MB.TEXT
                                                   MBSTRING _ "X: ")
                                            (create MB.INSERT
                                                   MBINITENTRY _ 25.5)
                                            (create MB.TEXT
                                                   MBSTRING _ "  ")
                                            (create MB.TEXT
                                                   MBSTRING _ "Y: ")
                                            (create MB.INSERT
                                                   MBINITENTRY _ 3)
                                            (create MB.TEXT
                                                   MBSTRING _ "    Format:  ")
                                            (create MB.NWAY
                                                   MBBUTTONS _ '(123 xiv XIV)
                                                   MBINITSTATE _ '123)
                                            (create MB.TEXT
                                                   MBSTRING _ "

		")
                                            (create MB.TEXT
                                                   MBSTRING _ "Alignment: ")
                                            (create MB.NWAY
                                                   MBBUTTONS _ '(Left Centered Right)
                                                   MBINITSTATE _ 'Centered)
                                            (create MB.TEXT
                                                   MBSTRING _ "
")
                                            (create MB.TEXT
                                                   MBSTRING _ "		Text before number:  ")
                                            (create MB.INSERT
                                                   MBINITENTRY _ "")
                                            (create MB.TEXT
                                                   MBSTRING _ "   Text after number:  ")
                                            (create MB.INSERT
                                                   MBINITENTRY _ "")
                                            (create MB.TEXT
                                                   MBSTRING _ "
"))
                                     (LIST (create MB.TEXT
                                                  MBSTRING _ "Margins:   Left")
                                           (create MB.INSERT
                                                  MBINITENTRY _ 6)
                                           (create MB.TEXT
                                                  MBSTRING _ "  Right")
                                           (create MB.INSERT
                                                  MBINITENTRY _ 6)
                                           (create MB.TEXT
                                                  MBSTRING _ "   Top")
                                           (create MB.INSERT
                                                  MBINITENTRY _ 6)
                                           (create MB.TEXT
                                                  MBSTRING _ "   Bottom")
                                           (create MB.INSERT
                                                  MBINITENTRY _ 6)
                                           (create MB.TEXT
                                                  MBSTRING _ "
")
                                           (create MB.TEXT
                                                  MBSTRING _ "Columns: ")
                                           (create MB.INSERT
                                                  MBINITENTRY _ 1)
                                           (create MB.TEXT
                                                  MBSTRING _ "	Col Width: ")
                                           (create MB.INSERT)
                                           (create MB.TEXT
                                                  MBSTRING _ "	Space between cols: ")
                                           (create MB.INSERT
                                                  MBINITENTRY _ 1)
                                           (create MB.TEXT
                                                  MBSTRING _ "
")
                                           (create MB.TEXT
                                                  MBSTRING _ "Page Headings:"
                                                  MBFONT _ (FONTCREATE 'HELVETICA 10 'BOLD))
                                           (create MB.TEXT
                                                  MBSTRING _ "
	Heading Type:")
                                           (create MB.INSERT)
                                           (create MB.TEXT
                                                  MBSTRING _ "  X:")
                                           (create MB.INSERT)
                                           (create MB.TEXT
                                                  MBSTRING _ "  Y:")
                                           (create MB.INSERT)
                                           (create MB.TEXT
                                                  MBSTRING _ "	Heading Type:")
                                           (create MB.INSERT)
                                           (create MB.TEXT
                                                  MBSTRING _ "  X:")
                                           (create MB.INSERT)
                                           (create MB.TEXT
                                                  MBSTRING _ "  Y:")
                                           (create MB.INSERT)
                                           (create MB.TEXT
                                                  MBSTRING _ "
	Heading Type:")
                                           (create MB.INSERT)
                                           (create MB.TEXT
                                                  MBSTRING _ "  X:")
                                           (create MB.INSERT)
                                           (create MB.TEXT
                                                  MBSTRING _ "  Y:")
                                           (create MB.INSERT)
                                           (create MB.TEXT
                                                  MBSTRING _ "	Heading Type:")
                                           (create MB.INSERT)
                                           (create MB.TEXT
                                                  MBSTRING _ "  X:")
                                           (create MB.INSERT)
                                           (create MB.TEXT
                                                  MBSTRING _ "  Y:")
                                           (create MB.INSERT)
                                           (create MB.TEXT
                                                  MBSTRING _ "
	Heading Type:")
                                           (create MB.INSERT)
                                           (create MB.TEXT
                                                  MBSTRING _ "  X:")
                                           (create MB.INSERT)
                                           (create MB.TEXT
                                                  MBSTRING _ "  Y:")
                                           (create MB.INSERT)
                                           (create MB.TEXT
                                                  MBSTRING _ "	Heading Type:")
                                           (create MB.INSERT)
                                           (create MB.TEXT
                                                  MBSTRING _ "  X:")
                                           (create MB.INSERT)
                                           (create MB.TEXT
                                                  MBSTRING _ "  Y:")
                                           (create MB.INSERT)
                                           (create MB.TEXT
                                                  MBSTRING _ "
	Heading Type:")
                                           (create MB.INSERT)
                                           (create MB.TEXT
                                                  MBSTRING _ "  X:")
                                           (create MB.INSERT)
                                           (create MB.TEXT
                                                  MBSTRING _ "  Y:")
                                           (create MB.INSERT)
                                           (create MB.TEXT
                                                  MBSTRING _ "	Heading Type:")
                                           (create MB.INSERT)
                                           (create MB.TEXT
                                                  MBSTRING _ "  X:")
                                           (create MB.INSERT)
                                           (create MB.TEXT
                                                  MBSTRING _ "  Y:")
                                           (create MB.INSERT])
)
(DECLARE%: DONTEVAL@LOAD DOCOPY 

(\TEDIT.MENU.INIT)

(\TEDITMENU.CREATE)

(\TEDIT.CHARLOOKSMENU.CREATE)

(\TEDITPARAMENU.CREATE)

(\TEDITPAGEMENU.CREATE)
)
(DECLARE%: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS 

(ADDTOVAR NLAMA )

(ADDTOVAR NLAML )

(ADDTOVAR LAMA )
)
(DECLARE%: DONTCOPY
  (FILEMAP (NIL (10423 34010 (MB.BUTTONEVENTINFN 10433 . 11655) (MB.DISPLAY 11657 . 13614) (MB.SETIMAGE 
13616 . 14570) (MB.SELFN 14572 . 16086) (MB.SIZEFN 16088 . 17066) (MB.WHENOPERATEDFN 17068 . 17396) (
MB.COPYFN 17398 . 17856) (MB.GETFN 17858 . 18596) (MB.PUTFN 18598 . 19475) (MB.SHOWSELFN 19477 . 20403
) (MBUTTON.CREATE 20405 . 21637) (MBUTTON.CHANGENAME 21639 . 22018) (MBUTTON.FIND.BUTTON 22020 . 22928
) (MBUTTON.FIND.NEXT.BUTTON 22930 . 24152) (MBUTTON.FIND.NEXT.FIELD 24154 . 26772) (MBUTTON.INIT 26774
 . 27560) (MBUTTON.NEXT.FIELD.AS.NUMBER 27562 . 28494) (MBUTTON.NEXT.FIELD.AS.TEXT 28496 . 28922) (
MBUTTON.NEXT.FIELD.AS.ATOM 28924 . 29810) (MBUTTON.SET.FIELD 29812 . 31788) (MBUTTON.SET.NEXT.FIELD 
31790 . 33072) (MBUTTON.SET.NEXT.BUTTON.STATE 33074 . 33554) (TEDITMENU.STREAM 33556 . 34008)) (34314 
44693 (MB.CREATE.THREESTATEBUTTON 34324 . 35491) (MB.THREESTATE.DISPLAY 35493 . 38199) (
MB.THREESTATE.SHOWSELFN 38201 . 41124) (MB.THREESTATE.WHENOPERATEDFN 41126 . 42410) (
MB.THREESTATEBUTTON.FN 42412 . 43631) (THREESTATE.INIT 43633 . 44691)) (44794 64501 (
MB.CREATE.NWAYBUTTON 44804 . 48873) (MB.NB.DISPLAYFN 48875 . 51143) (MB.NB.WHENOPERATEDFN 51145 . 
52293) (MB.NB.SIZEFN 52295 . 55923) (MB.NWAYBUTTON.SELFN 55925 . 57958) (MB.NWAYMENU.NEWBUTTON 57960
 . 58547) (NWAYBUTTON.INIT 58549 . 59398) (MB.NB.PACKITEMS 59400 . 61379) (MB.NWAYBUTTON.ADDITEM 61381
 . 64499)) (64755 73616 (\TEXTMENU.TOGGLE.CREATE 64765 . 66255) (\TEXTMENU.TOGGLE.DISPLAY 66257 . 
68690) (\TEXTMENU.TOGGLE.SHOWSELFN 68692 . 69292) (\TEXTMENU.TOGGLE.WHENOPERATEDFN 69294 . 70587) (
\TEXTMENU.TOGGLEFN 70589 . 71788) (\TEXTMENU.TOGGLE.INIT 71790 . 72621) (\TEXTMENU.SET.TOGGLE 72623 . 
73614)) (73868 110083 (DRAWMARGINSCALE 73878 . 77337) (MARGINBAR 77339 . 84200) (MARGINBAR.CREATE 
84202 . 87074) (MB.MARGINBAR.SELFN 87076 . 99113) (MB.MARGINBAR.SIZEFN 99115 . 99473) (
MB.MARGINBAR.DISPLAYFN 99475 . 102277) (MDESCALE 102279 . 102819) (MSCALE 102821 . 103151) (
MB.MARGINBAR.SHOWTAB 103153 . 105476) (MB.MARGINBAR.TABTRACK 105478 . 106863) (\TEDIT.TABTYPE.SET 
106865 . 109196) (MARGINBAR.INIT 109198 . 110081)) (111100 125783 (\TEDIT.MENU.START 111110 . 115802) 
(\TEDIT.MENU.BUTTONEVENTFN 115804 . 116288) (\TEXTMENU.DOC.CREATE 116290 . 125781)) (126093 145386 (
\TEDITMENU.CREATE 126103 . 126399) (\TEDIT.EXPANDED.MENU 126401 . 127347) (MB.DEFAULTBUTTON.FN 127349
 . 130454) (\TEDITMENU.RECORD.UNFORMATTED 130456 . 130789) (MB.DEFAULTBUTTON.ACTIONFN 130791 . 145384)
) (145387 172872 (\TEDIT.CHARLOOKSMENU.CREATE 145397 . 147611) (\TEDIT.EXPANDEDCHARLOOKS.MENU 147613
 . 148191) (\TEDIT.APPLY.BOLDNESS 148193 . 148474) (\TEDIT.APPLY.CHARLOOKS 148476 . 150493) (
\TEDIT.APPLY.OLINE 150495 . 150772) (\TEDIT.APPLY.UNBREAKABLE 150774 . 151172) (\TEDIT.SHOW.CHARLOOKS 
151174 . 153243) (\TEDIT.NEUTRALIZE.CHARLOOKS 153245 . 154184) (\TEDIT.FILL.IN.CHARLOOKS.MENU 154186
 . 161590) (\TEDIT.NEUTRALIZE.CHARLOOKS.MENU 161592 . 164165) (\TEDIT.PARSE.CHARLOOKS.MENU 164167 . 
172023) (\TEDIT.APPLY.SLOPE 172025 . 172304) (\TEDIT.APPLY.STRIKEOUT 172306 . 172589) (
\TEDIT.APPLY.ULINE 172591 . 172870)) (172873 197955 (\TEDITPARAMENU.CREATE 172883 . 173259) (
\TEDIT.EXPANDEDPARA.MENU 173261 . 173691) (\TEDIT.APPLY.PARALOOKS 173693 . 183813) (
\TEDIT.SHOW.PARALOOKS 183815 . 191204) (\TEDIT.NEUTRALIZE.PARALOOKS.MENU 191206 . 196642) (
\TEDIT.RECORD.TABLEADERS 196644 . 197953)) (197956 232665 (\TEDIT.SHOW.PAGEFORMATTING 197966 . 211256)
 (\TEDITPAGEMENU.CREATE 211258 . 212297) (\TEDIT.APPLY.PAGEFORMATTING 212299 . 224070) (
TEDIT.UNPARSE.PAGEFORMAT 224072 . 232663)) (232970 260764 (\TEDIT.MENU.INIT 232980 . 260762)))))
STOP
