(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)

(FILECREATED "18-Jan-2024 17:04:56" {WMEDLEY}<library>tedit>TEDIT-PAGE.;135 112856 

      :EDIT-BY rmk

      :CHANGES-TO (FNS TEDIT.FORMATFOLIO)

      :PREVIOUS-DATE "16-Jan-2024 14:30:54" {WMEDLEY}<library>tedit>TEDIT-PAGE.;134)


(PRETTYCOMPRINT TEDIT-PAGECOMS)

(RPAQQ TEDIT-PAGECOMS
       ((DECLARE%: EVAL@COMPILE DONTCOPY (RECORDS TEDITPAPERSIZE)
               (EXPORT (RECORDS PAGEFORMATTINGSTATE PAGEREGION))
               (MACROS \FIRST-COLUMN-START)
               
               (* ;; "Replaces CL:MULTIPLE-VALUE-SETQ, to avoid CL:VALUES")

               (MACROS TEDIT.SETQS TEDIT.VALUES))
        (INITRECORDS PAGEREGION)
        [COMS 
              (* ;; "Page-numbering font specification/default.  ")

              
              (* ;; "(Must come before calls to TEDIT.SINGLE.PAGEFORMAT below.)")

              (GLOBALVARS TEDIT.DEFAULT.FOLIO.LOOKS)
              (INITVARS (TEDIT.DEFAULT.FOLIO.LOOKS (CHARLOOKS.FROM.FONT (FONTCOPY NIL
                                                                               '(FAMILY MODERN SIZE 
                                                                                       10 WEIGHT 
                                                                                       MEDIUM SLOPE 
                                                                                       REGULAR]
        [VARS (MAXPAGE# 65535)
              (MINPAGE# 1)
              (TEDIT.PAGE.FRAMES (LIST (TEDIT.SINGLE.PAGEFORMAT NIL NIL NIL NIL NIL 72 72 72 72 NIL 1
                                              )
                                       (TEDIT.SINGLE.PAGEFORMAT T 72 756 NIL 'LEFT 72 72 72 72 NIL 1)
                                       (TEDIT.SINGLE.PAGEFORMAT T 540 756 NIL 'RIGHT 72 72 72 72 NIL
                                              1]
        (COMS 
              (* ;; "Creation, GET, and PUT of page frames.")

              (FNS \TEDIT.PARSE.PAGEFRAMES \TEDIT.PUT.PAGEFRAMES \TEDIT.UNPARSE.PAGEFRAMES))
        (COMS 
              (* ;; "Public functions for setting up page layouts")

              (FNS TEDIT.SINGLE.PAGEFORMAT TEDIT.COMPOUND.PAGEFORMAT TEDIT.PAGEFORMAT))
        (COMS 
              (* ;; "Perform page layout, based on a regular expression of typed regions.")

              (FNS TEDIT.FORMAT.HARDCOPY TEDIT.FORMATBOX TEDIT.FORMATHEADING TEDIT.FORMATPAGE 
                   TEDIT.FORMATTEXTBOX TEDIT.FORMATFOLIO \TEDIT.FORMAT.FOUNDBOX? 
                   TEDIT.SKIP.SPECIALCOND)
              
              (* ;; "Aux function to capture page headings during line formatting:")

              (FNS TEDIT.HARDCOPY.PAGEHEADINGS)
              
              (* ;; 
         " Aux function to handle end-of-column processing (paragraph keep, widow elimination, etc):")

              (FNS TEDIT.HARDCOPY-COLUMN-END))
        [COMS 
              (* ;; "Handle varying paper sizes")

              (FNS SCALEPAGEUNITS SCALEPAGEXUNITS SCALEPAGEYUNITS \TEDIT.PAPERHEIGHT 
                   \TEDIT.PAPERWIDTH)
              (GLOBALVARS TEDIT.PAPER.SIZES)
              (VARS (TEDIT.PAPER.SIZES '((A0 2384 3370)
                                         (A1 1684 2384)
                                         (A2 1191 1684)
                                         (A3 842 1191)
                                         (A4 595 842)
                                         (A5 420 595)
                                         (B0 2835 4008)
                                         (B1 2004 2835)
                                         (B2 1417 2004)
                                         (B3 1001 1417)
                                         (B4 709 1001)
                                         (B5 499 709]
        (COMS                                                (* ; "Page numbering option support")
              (FNS ROMANNUMERALS))
        (COMS 
              (* ;; "Foot note support")

              (FNS \TEDIT.FORMAT.FOOTNOTE))))
(DECLARE%: EVAL@COMPILE DONTCOPY 
(DECLARE%: EVAL@COMPILE

(RECORD TEDITPAPERSIZE (
                        (* ;; 
                        "Describe the size of a sheet of paper (in points), given a paper size-name.")

                        TPSNAME                              (* ; "The name, as a litatom")
                        TPSWIDTH                             (* ; "Paper width, in points")
                        TPSHEIGHT                            (* ; "Paper Height, in points")
                        TPSLANDSCAPE?                        (* ; 
                                         "T if we have to rotate things to print them on this paper.")
                        ))
)

(* "FOLLOWING DEFINITIONS EXPORTED")(DECLARE%: EVAL@COMPILE

(RECORD PAGEFORMATTINGSTATE (
                             (* ;; "Contains the state for a TEdit page-formatting job.")

                             PAGE#                           (* ; 
                                                           "The current page number.  Counted from 1")
                             FIRSTPAGE

                             (* ;; "T if the current page is the 'first page' .  Is set initially, and can be set again by the user at will.  Gets reset after each page image is printed.")

                             MINPAGE#                        (* ; 
                                                 "The page # of the first page to be printed, or NIL")
                             MAXPAGE#                        (* ; 
                                                  "The page # of the last page to be printed, or NIL")
                             STATE                           (* ; "One of FORMATTING or SEARCHING.")
                             REQUIREDREGIONTYPE              (* ; "If STATE is SEARCHING, the kind of box we're looking for.  If STATE is :SEARCHING-FOR-EQUIVALENT-PAGE, this is the page count for the matching page.")
                             MAINSTREAM                      (* ; 
                                                             "The principal textobj/stream source")
                             CHNO                            (* ; "Our position in that stream")
                             PRESSREGION                     (* ; "The press code's REGION info.")
                             PAGEHEADINGS                    (* ; 
                                  "The list of current values to be printed, indexed by heading type")
                             PAGE#GENERATOR                  (* ; "List of page numbers;  later, maybe, a function to generate page numbers.  Used to fill in PAGE#TEXT, below")
                             PAGE#TEXT                       (* ; "If special page numbers are in use, this is the place to take them from.  PAGE# is still used for recto/verso decisions &c")
                             PAGEISRECTO                     (* ; 
                                               "T if this is a recto page, NIL if it's a VERSO page.")
                             PAGEFOOTNOTELINES               (* ; 
                         "A list of extant footnote lines that should appear at the next opportunity")
                             PAGEFLOATINGTOPLINES            (* ; 
                           "A list of lines that should float to the top of the next available place")
                             PAGECOUNT                       (* ; 
                                                        "The number of pages we've formatted so far.")
                             PAGELINECACHE                   (* ; "A cache for pre-created LINEDESCRIPTOR/THISLINE sets, to avoid the overhead of re-allocating them all the time")
                             NEWPAGELAYOUT                   (* ; "If we switch page layouts in mid-document, this is where the new layout gets cached until we get started again.")
                             )
                            PAGECOUNT _ 0)

(DATATYPE PAGEREGION (
                      (* ;; 
            "Describe a part of a page for page formatting.  Can be made into compound descriptions.")

                      REGIONFILLMETHOD                       (* ; 
                                    "What kind of a region this is -- TEXT, FOLIO, PAGEHEADING, etc.")
                      REGIONSPEC                             (* ; 
                                                             "The page-relative region this occupies")
                      REGIONLOCALINFO                        (* ; "A PLIST for local information")
                      (REGIONPARENT FULLXPOINTER)            (* ; 
                                                        "The parent node for this box, for sub-boxes")
                      REGIONSUBBOXES                         (* ; "The sub-regions of this region")
                      REGIONTYPE                             (* ; "A user-settable region type")
                      ))
)

(/DECLAREDATATYPE 'PAGEREGION '(POINTER POINTER POINTER FULLXPOINTER POINTER POINTER)
       '((PAGEREGION 0 POINTER)
         (PAGEREGION 2 POINTER)
         (PAGEREGION 4 POINTER)
         (PAGEREGION 6 FULLXPOINTER)
         (PAGEREGION 8 POINTER)
         (PAGEREGION 10 POINTER))
       '12)

(* "END EXPORTED DEFINITIONS")


(DECLARE%: EVAL@COMPILE 

(PUTPROPS \FIRST-COLUMN-START MACRO [(LINE FMTSPEC)
                                     (AND (FGETLD LINE 1STLN)
                                          (EQ (FFETCH (FMTSPEC FMTCOLUMN) OF FMTSPEC)
                                              'FIRST])
)

(DECLARE%: EVAL@COMPILE 

(PUTPROPS TEDIT.SETQS MACRO
          [ARGS `(LET (($$VALUES ,(CADR ARGS))
                       ($$PRIMARY))
                      (DECLARE (LOCALVARS $$VALUES))
                      (PROG1 (CAR $$VALUES)
                          ,@[FOR V IN (CAR ARGS) collect (COND
                                                            [V `(SETQ ,V (POP $$VALUES]
                                                            (T `(SETQ $$VALUES (CDR $$VALUES])])

(PUTPROPS TEDIT.VALUES MACRO [ARGS `(LIST ,@ARGS])
)
)

(/DECLAREDATATYPE 'PAGEREGION '(POINTER POINTER POINTER FULLXPOINTER POINTER POINTER)
       '((PAGEREGION 0 POINTER)
         (PAGEREGION 2 POINTER)
         (PAGEREGION 4 POINTER)
         (PAGEREGION 6 FULLXPOINTER)
         (PAGEREGION 8 POINTER)
         (PAGEREGION 10 POINTER))
       '12)



(* ;; "Page-numbering font specification/default.  ")




(* ;; "(Must come before calls to TEDIT.SINGLE.PAGEFORMAT below.)")

(DECLARE%: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS TEDIT.DEFAULT.FOLIO.LOOKS)
)

(RPAQ? TEDIT.DEFAULT.FOLIO.LOOKS [CHARLOOKS.FROM.FONT (FONTCOPY NIL
                                                             '(FAMILY MODERN SIZE 10 WEIGHT MEDIUM 
                                                                     SLOPE REGULAR])

(RPAQQ MAXPAGE# 65535)

(RPAQQ MINPAGE# 1)

(RPAQ TEDIT.PAGE.FRAMES
      (LIST (TEDIT.SINGLE.PAGEFORMAT NIL NIL NIL NIL NIL 72 72 72 72 NIL 1)
            (TEDIT.SINGLE.PAGEFORMAT T 72 756 NIL 'LEFT 72 72 72 72 NIL 1)
            (TEDIT.SINGLE.PAGEFORMAT T 540 756 NIL 'RIGHT 72 72 72 72 NIL 1)))



(* ;; "Creation, GET, and PUT of page frames.")

(DEFINEQ

(\TEDIT.PARSE.PAGEFRAMES
  [LAMBDA (PAGELIST PARENT)                                  (* ; "Edited 13-Nov-2023 00:14 by rmk")
                                                             (* ; "Edited  4-Oct-2022 16:57 by rmk")
                                                             (* jds "31-Jul-84 15:30")

    (* ;; "Internalize an external pageframe.")

    (* ;; "Exactly like TEDIT.PARSE.PAGEFRAMES1, except this doesn't scale the region specs")

    (LET (FRAMETYPE PAGEFRAME)
         (COND
            ((type? PAGEREGION PAGELIST)
             PAGELIST)
            ((NEQ 'LIST (SETQ FRAMETYPE (pop PAGELIST)))
             [SETQ PAGEFRAME (create PAGEREGION
                                    REGIONFILLMETHOD _ FRAMETYPE
                                    REGIONTYPE _ (pop PAGELIST)
                                    REGIONLOCALINFO _ (pop PAGELIST)
                                    REGIONSPEC _ (OR (pop PAGELIST)
                                                     (LIST 0 0 0 0]
             (replace REGIONSUBBOXES of PAGEFRAME with (for ALIST in (pop PAGELIST)
                                                          collect (\TEDIT.PARSE.PAGEFRAMES ALIST 
                                                                         PAGEFRAME)))
             PAGEFRAME)
            (T (for FRAMESPEC in (CAR PAGELIST) collect (\TEDIT.PARSE.PAGEFRAMES FRAMESPEC NIL])

(\TEDIT.PUT.PAGEFRAMES
  [LAMBDA (LOOKSFILE PAGEFRAMES)                             (* ; "Edited 22-Dec-2023 09:03 by rmk")
                                                             (* ; "Edited 19-Dec-2023 10:25 by rmk")
                                                             (* ; "Edited 26-Aug-2023 08:29 by rmk")
                                                             (* jds "13-Nov-86 20:10")

    (* ;; "Put out a description of a set of page-layout frames")

    (\DWOUT LOOKSFILE 0)                                     (* ; "The length of this run of looks")
    (\WOUT LOOKSFILE \PieceDescriptorPAGEFRAME)              (* ; "Mark this as a set of page frames")
    (PRIN4 (\TEDIT.UNPARSE.PAGEFRAMES PAGEFRAMES)
           LOOKSFILE *TEDIT-FILE-READTABLE*])

(\TEDIT.UNPARSE.PAGEFRAMES
  [LAMBDA (PAGEFRAME)                                        (* ; "Edited 22-Dec-2023 09:04 by rmk")
                                                             (* jds "31-Jul-84 15:00")

    (* ;; "Take an internal page frame, and create an equivalent list structure.")

    (COND
       [(LISTP PAGEFRAME)
        (LIST 'LIST (for FRAME in PAGEFRAME collect (\TEDIT.UNPARSE.PAGEFRAMES FRAME]
       (T (LIST (fetch REGIONFILLMETHOD of PAGEFRAME)
                (fetch REGIONTYPE of PAGEFRAME)
                (fetch REGIONLOCALINFO of PAGEFRAME)
                (fetch REGIONSPEC of PAGEFRAME)
                (for SUBREGION in (fetch REGIONSUBBOXES of PAGEFRAME) collect (
                                                                            \TEDIT.UNPARSE.PAGEFRAMES
                                                                               SUBREGION])
)



(* ;; "Public functions for setting up page layouts")

(DEFINEQ

(TEDIT.SINGLE.PAGEFORMAT
  [LAMBDA (PAGE#S? PX PY PFONT PQUAD LEFT RIGHT TOP BOTTOM COLS COLWIDTH INTERCOL HEADINGS UNITS 
                 PAGEPROPS PAPERSIZE)                        (* ; "Edited 13-Nov-2023 08:59 by rmk")
                                                             (* ; "Edited 10-Aug-2023 08:14 by rmk")
                                                             (* ; "Edited 17-Dec-87 14:54 by jds")

    (* ;; "Given a description in the args, create a pageframe to describe a single kind of page.")

    (LET* ((LANDSCAPE? (LISTGET PAGEPROPS 'LANDSCAPE?))
           (PAPERWIDTH (\TEDIT.PAPERWIDTH PAPERSIZE LANDSCAPE?))
           (PAPERHEIGHT (\TEDIT.PAPERHEIGHT PAPERSIZE LANDSCAPE?))
           [PAGEREGION (create PAGEREGION
                              REGIONFILLMETHOD _ 'PAGE
                              REGIONSPEC _
                              (create REGION
                                     LEFT _ 0
                                     BOTTOM _ 0
                                     WIDTH _ PAPERWIDTH
                                     HEIGHT _ PAPERHEIGHT)
                              REGIONLOCALINFO _ (CONS 'PAPERSIZE (CONS PAPERSIZE PAGEPROPS]
           PAGEWIDTH SUBREGIONS FOLIOLEFT SCALEFACTOR HEADINGREGIONS)
          (SELECTQ UNITS
              ((POINTS NIL)                                  (* ; 
                                        "If units are in printers points, the default, do no scaling")
                   (SETQ SCALEFACTOR 1))
              (PICAS                                         (* ; 
                                              "The units are in picas--12pts per.  Scale all values.")
                     (SETQ SCALEFACTOR 12))
              (INCHES                                        (* ; 
                                      "The units are in inches, at 72 pts per.  Set the scale factor")
                      (SETQ SCALEFACTOR 72))
              (MICAS                                         (* ; 
                                                          "The units are MICAS, at 2540 to the inch.")
                     (SETQ SCALEFACTOR 0.02834646))
              (CM                                            (* ; 
                                                             "Units are in CM, at 72.27/2.54pts per.")
                  (SETQ SCALEFACTOR (CONSTANT (FQUOTIENT 72 2.54))))
              (\ILLEGAL.ARG UNITS))                          (* ; "We need to do the scaling.")
          (SETQ PX (SCALEPAGEXUNITS PX SCALEFACTOR PAPERSIZE LANDSCAPE?))
          (SETQ PY (SCALEPAGEYUNITS PY SCALEFACTOR PAPERSIZE LANDSCAPE?))
          (AND LEFT (SETQ LEFT (HCSCALE SCALEFACTOR LEFT)))
          (AND RIGHT (SETQ RIGHT (HCSCALE SCALEFACTOR RIGHT)))
          (AND TOP (SETQ TOP (HCSCALE SCALEFACTOR TOP)))
          (AND BOTTOM (SETQ BOTTOM (HCSCALE SCALEFACTOR BOTTOM)))
          (AND COLWIDTH (SETQ COLWIDTH (HCSCALE SCALEFACTOR COLWIDTH)))
          (AND INTERCOL (SETQ INTERCOL (HCSCALE SCALEFACTOR INTERCOL)))
          (SETQ PAGEWIDTH (IDIFFERENCE (IDIFFERENCE PAPERWIDTH RIGHT)
                                 LEFT))
          (CL:WHEN PAGE#S?
              (SELECTQ PQUAD
                  (LEFT                                      (* ; 
                   "If the page number is flush left, set up the region to start where he specified.")
                        (SETQ FOLIOLEFT PX))
                  (RIGHT                                     (* ; 
                                                "If it's flush right, set up the region to END there")
                         (SETQ FOLIOLEFT (IDIFFERENCE PX 288)))
                  ((CENTERED NIL)                            (* ; 
                                    "Otherwise, center the page number around the point he specifies")
                       (SETQ FOLIOLEFT (IDIFFERENCE PX 144)))
                  (SHOULDNT))

              (* ;; "Note that the folio charlooks is a charlooks spec-list, not a CHARLOOKS.  The parse/unparse is just to get the priority union of PFONT with  the defaults.")

              [SETQ SUBREGIONS
               (LIST (create PAGEREGION
                            REGIONFILLMETHOD _ 'FOLIO
                            REGIONSPEC _
                            (create REGION
                                   LEFT _ FOLIOLEFT
                                   BOTTOM _ PY
                                   WIDTH _ 288
                                   HEIGHT _ 36)
                            REGIONLOCALINFO _ `(PARALOOKS [QUAD ,(OR PQUAD 'CENTERED]
                                                      CHARLOOKS
                                                      ,(\TEDIT.UNPARSE.CHARLOOKS.LIST (
                                                                          \TEDIT.PARSE.CHARLOOKS.LIST
                                                                                       PFONT 
                                                                            TEDIT.DEFAULT.FOLIO.LOOKS
                                                                                       ))
                                                      FORMATINFO
                                                      ,(LISTGET PAGEPROPS 'FOLIOINFO])
          (CL:WHEN HEADINGS
              [SETQ HEADINGREGIONS (for HDG LEFT in HEADINGS
                                      collect 

                                 (* ;; "Run thru the list of headings, building a box for each.  By default, a heading will have the same width right margin as the left margin that was specified.")

                                            (SETQ LEFT (SCALEPAGEXUNITS (CADR HDG)
                                                              SCALEFACTOR PAPERSIZE LANDSCAPE?))
                                            (create PAGEREGION
                                                   REGIONFILLMETHOD _ 'HEADING
                                                   REGIONSPEC _ (create REGION
                                                                       LEFT _ LEFT
                                                                       BOTTOM _ (SCALEPAGEYUNITS
                                                                                 (CADDR HDG)
                                                                                 SCALEFACTOR 
                                                                                 PAPERSIZE LANDSCAPE?
                                                                                 )
                                                                       WIDTH _
                                                                       (IMAX (IDIFFERENCE PAPERWIDTH
                                                                                    LEFT)
                                                                             72)
                                                                       HEIGHT _ 36)
                                                   REGIONLOCALINFO _ (LIST 'HEADINGTYPE (CAR HDG]
              (SETQ SUBREGIONS (APPEND SUBREGIONS HEADINGREGIONS)))
          [COND
             [(OR (NULL COLS)
                  (IEQP COLS 1))                             (* ; 
         "There is a single column, so treat it as just one text region bounded by the page margins.")
              (SETQ SUBREGIONS
               (NCONC1 SUBREGIONS
                      (create PAGEREGION
                             REGIONFILLMETHOD _ 'TEXT
                             REGIONSPEC _
                             (create REGION
                                    LEFT _ LEFT
                                    BOTTOM _ BOTTOM
                                    WIDTH _ PAGEWIDTH
                                    HEIGHT _ (IDIFFERENCE (IDIFFERENCE PAPERHEIGHT TOP)
                                                    BOTTOM]
             (T                                              (* ; 
                             "There are several columns.  We need to create a text box for each col.")
                [COND
                   [(NULL COLWIDTH)                          (* ; 
                    "He wants us to fill in the column width, given margins and intercolumn spacing.")
                    (COND
                       [INTERCOL (SETQ COLWIDTH (FIXR (FQUOTIENT (IDIFFERENCE PAGEWIDTH
                                                                        (ITIMES INTERCOL (SUB1 COLS))
                                                                        )
                                                             COLS]
                       (T                                    (* ; "Can't default both of them.")
                          (SHOULDNT "Can't default both Col width and spacing"]
                   ((NULL INTERCOL)                          (* ; 
                       "Or else he wants to give us just the col width and have us calc the spacing.")
                    (SETQ INTERCOL (FIXR (FQUOTIENT (IDIFFERENCE PAGEWIDTH (ITIMES COLWIDTH COLS))
                                                (SUB1 COLS]
                (for COL from 1 to COLS as CLEFT from LEFT by (IPLUS COLWIDTH INTERCOL)
                   do (SETQ SUBREGIONS
                       (NCONC1 SUBREGIONS
                              (create PAGEREGION
                                     REGIONFILLMETHOD _ 'TEXT
                                     REGIONSPEC _
                                     (create REGION
                                            LEFT _ CLEFT
                                            BOTTOM _ BOTTOM
                                            WIDTH _ COLWIDTH
                                            HEIGHT _ (IDIFFERENCE (IDIFFERENCE PAPERHEIGHT TOP)
                                                            BOTTOM]
          (replace REGIONSUBBOXES of PAGEREGION with SUBREGIONS)
          PAGEREGION])

(TEDIT.COMPOUND.PAGEFORMAT
  [LAMBDA (FIRST VERSO RECTO)                                (* ; "Edited 16-Jan-2024 14:24 by rmk")
                                                             (* jds "27-Jul-84 10:15")
                                                             (* was (create PAGEREGION 
                                                             REGIONFILLMETHOD _ (QUOTE SEQUENCE) 
                                                             REGIONSUBBOXES _ (LIST FIRST
                                                             (create PAGEREGION REGIONFILLMETHOD _
                                                             (QUOTE ALTERNATE) REGIONSUBBOXES _
                                                             (LIST (OR VERSO FIRST)
                                                             (OR RECTO VERSO FIRST)) REGIONSPEC _
                                                             (LIST 0 0 0 0))) REGIONSPEC _
                                                             (LIST 0 0 0 0)))
    (CL:UNLESS (TYPE? PAGEREGION FIRST)
           (ERROR "NOT A PAGEFORMAT" FIRST))
    (CL:UNLESS VERSO (SETQ VERSO FIRST))
    (CL:UNLESS RECTO (SETQ RECTO FIRST))
    (CL:UNLESS (TYPE? PAGEREGION VERSO)
           (ERROR "NOT A PAGEFORMAT" VERSO))
    (CL:UNLESS (TYPE? PAGEREGION RECTO)
           (ERROR "NOT A PAGEFORMAT" RECTO))
    (LIST FIRST VERSO RECTO])

(TEDIT.PAGEFORMAT
  [LAMBDA (STREAM FORMAT PAGETYPE)                           (* ; "Edited 16-Jan-2024 14:25 by rmk")
                                                             (* ; "Edited 21-Dec-2023 12:32 by rmk")
                                                            (* ; "Edited 12-Jun-90 19:13 by mitani")

    (* ;; "Programmatic interface for page formatting. If FORMAT is a single page format, it is applied only to PAGETYPE if not NIL.  If NIL, it is applied to all pages. If FORMAT is a composite, then PAGETYPE must be NIL.")

    (* ;; "PAGETYPE argument was not documented. But this preserves the original semantics: a single format with no PAGETYPE is taken as the first and default, wipes out whatever else might have been there.")

    (* ;; "FORMAT can also be another text, in which case its formats are take as FORMAT--essentially the copy case.")

    (* ;; 
    "Note that PAGETYPE and the TEXT-format case are extensions, not in the original documentation.")

    (LET* ((TEXTOBJ (TEXTOBJ STREAM))
           (OLDFORMAT (GETTOBJ TEXTOBJ TXTPAGEFRAMES)))
          (CL:WHEN (TEXTOBJ FORMAT T)
              (SETQ FORMAT (GETTOBJ (TEXTOBJ FORMAT)
                                  TXTPAGEFRAMES)))
          (if (AND (type? PAGEREGION FORMAT)
                   (EQ 'PAGE (fetch (PAGEREGION REGIONFILLMETHOD) of FORMAT)))
              then (SETQ FORMAT (LIST FORMAT FORMAT FORMAT))
            elseif [AND (EQLENGTH FORMAT 3)
                        (for F in FORMAT always (AND (type? PAGEREGION F)
                                                     (EQ 'PAGE (fetch (PAGEREGION REGIONFILLMETHOD)
                                                                  of F]
            else (\ILLEGAL.ARG FORMAT))

          (* ;; "FORMAT is now a triple of new components.")

          (SETQ FORMAT (SELECTQ PAGETYPE
                           (NIL (COPY FORMAT))
                           (DEFAULT (LIST (CAR FORMAT)
                                          (CAR FORMAT)
                                          (CAR FORMAT)))
                           (FIRST (LIST (CAR FORMAT)
                                        (CADR OLDFORMAT)
                                        (CADDR OLDFORMAT)))
                           ((LEFT VERSO) 
                                (LIST (CAR OLDFORMAT)
                                      (CADR FORMAT)
                                      (CADDR OLDFORMAT)))
                           ((RIGHT RECTO (LIST (CAR OLDFORMAT)
                                               (CADR OLDFORMAT)
                                               (CADDR FORMAT))))
                           (\ILLEGAL.ARG PAGETYPE)))

          (* ;; "FORMAT is now a new 3-part list with desired substituions, ready to install. This assumes that \TEDIT.APPLY.PAGEFORMATTING doesn't smash old formats, creates new ones (by calling TEDIT.SINGLE.PAGEFORMAT).")

          (\TEDIT.HISTORYADD TEXTOBJ (create TEDITHISTORYEVENT
                                            THACTION _ :PageFormat
                                            THOLDINFO _ OLDFORMAT))
          (SETTOBJ TEXTOBJ TXTPAGEFRAMES FORMAT)
          (SETTOBJ TEXTOBJ \DIRTY T)
          STREAM])
)



(* ;; "Perform page layout, based on a regular expression of typed regions.")

(DEFINEQ

(TEDIT.FORMAT.HARDCOPY
  [LAMBDA (STREAM FILE DONTSEND BREAKPAGETITLE SERVER PRINTOPTIONS IMAGETYPE FIRSTPG# STARTPG ENDPG)
                                                             (* ; "Edited 24-Dec-2023 14:10 by rmk")
                                                             (* ; "Edited 15-Nov-2023 23:56 by rmk")
                                                             (* ; "Edited 22-Sep-2023 20:38 by rmk")
                                                             (* ; "Edited  4-Jul-2023 11:16 by rmk")
                                                             (* ; "Edited  2-Oct-2022 00:00 by rmk")
                                                             (* ; 
                                                        "Edited 25-May-93 13:06 by sybalsky:mv:envos")

(* ;;; "Format a document for hardcopy.  STREAM is referenced in advice on doctools>IMINDEX, don't change it.  But that could be eliminated if the AFTERHARDCOPYFN can be stored as a TEXTPROP in the file.")

(* ;;; "Returns the number of pages printed (not the final page number!).  Returns NIL if the before-print-fn said not to print.")

    (* ;; "You want both TEXTOBJ and TEXTSTREAM here so that it hangs onto them even if the window goes away out from under it.  DON'T REMOVE THEM!!!!")

    (RESETLST
        (PROG ((TEXTOBJ (TEXTOBJ STREAM))
               (TEXTSTREAM (TEXTSTREAM STREAM))
               [FORMATTINGSTATE (create PAGEFORMATTINGSTATE
                                       PAGE# _ (FIXP FIRSTPG#)
                                       FIRSTPAGE _ T
                                       STATE _ FIRSTPG#
                                       MINPAGE# _ STARTPG
                                       MAXPAGE# _ (OR ENDPG 65535)
                                       CHNO _ 1
                                       PAGEHEADINGS _ (LIST NIL NIL)
                                       PAGE#GENERATOR _ (AND (LISTP FIRSTPG#)
                                                             (CDR FIRSTPG#))
                                       PAGE#TEXT _ (AND (LISTP FIRSTPG#)
                                                        (CAR FIRSTPG#]
               TEXTLEN PRSTREAM PAGEFRAMES SCRATCHFILE BEFOREFN AFTERFN NPAGES WASOPEN TARGETFILENAME
               )
              (CL:WHEN (AND (SETQ BEFOREFN (GETTEXTPROP TEXTOBJ 'BEFOREHARDCOPYFN))
                            (EQ 'DON'T (APPLY* BEFOREFN TEXTSTREAM TEXTOBJ)))
                                                             (* ; 
                                                 "Do pre-hardcopy processing as indicated, or refuse")
                  (RETURN))
              (SETQ PAGEFRAMES (OR (FGETTOBJ TEXTOBJ TXTPAGEFRAMES)
                                   TEDIT.PAGE.FRAMES))
              (CL:WHEN (LISTP PAGEFRAMES)                    (* ; 
                                                  "If it's a list, pack it into a real set of specs.")
                  (SETQ PAGEFRAMES (TEDIT.COMPOUND.PAGEFORMAT (CAR PAGEFRAMES)
                                          (CADR PAGEFRAMES)
                                          (CADDR PAGEFRAMES))))
              (replace PRESSREGION of FORMATTINGSTATE with TEDIT.DEFAULTPAGEREGION)
                                                             (* ; 
                                                             "Print in the usual region on the page")
              (CL:UNLESS BREAKPAGETITLE
                  [SETQ BREAKPAGETITLE (COND
                                          ((LISTGET PRINTOPTIONS 'DOCUMENT.NAME))
                                          ([OR (NOT (FGETTOBJ TEXTOBJ TXTFILE))
                                               (STRINGP (FGETTOBJ TEXTOBJ TXTFILE))
                                               (type? STREAM (fetch (STREAM FULLNAME)
                                                                of (FGETTOBJ TEXTOBJ TXTFILE)))
                                               (STRINGP (fetch (STREAM FULLNAME)
                                                           of (FGETTOBJ TEXTOBJ TXTFILE]
                                                             (* ; 
                        "This isn't a real file, so print a generic name on the document break page.")
                                           "TEdit Hardcopy Output")
                                          (T                 (* ; 
                                          "It's a real file, so use the file name on the break page.")
                                             (fetch (STREAM FULLNAME) of (FGETTOBJ TEXTOBJ TXTFILE])
              [SETQ SCRATCHFILE (OR FILE (PRINTER.SCRATCH.FILE (TEXTSTREAM STREAM]
              (RESETLST
                  (CL:WHEN (SETQ AFTERFN (GETTEXTPROP TEXTOBJ 'AFTERHARDCOPYFN))
                      (RESETSAVE NIL (LIST AFTERFN TEXTSTREAM TEXTOBJ)))
                                                             (* ; 
                                           "Set up to do the user's cleanup on the way out, as well.")
                  (TEDIT.PROMPTPRINT TEXTOBJ "Formatting for print..." T)
                  [COND
                     ((AND FILE (OPENP FILE)
                           (IMAGESTREAMTYPE FILE))           (* ; 
             "The file he handed us is already an image-type file.  Just append the new stuff to it.")
                      (SETQ WASOPEN T)
                      (SETQ PRSTREAM FILE))
                     (T                                      (* ; 
                                                    "T'wasn't an image stream, so let's open us one.")
                        (RESETSAVE (SETQ PRSTREAM (OPENIMAGESTREAM
                                                   SCRATCHFILE
                                                   [OR IMAGETYPE (SETQ IMAGETYPE
                                                                  (CAR (PRINTERPROP (PRINTERTYPE
                                                                                     SERVER)
                                                                              'CANPRINT]
                                                   (LIST 'FONT (FONTCREATE 'TERMINAL 10)
                                                         'BREAKPAGEFILENAME BREAKPAGETITLE)))
                               '(AND RESETSTATE (DELFILE (CLOSEF? OLDVALUE]
                                                             (* ; 
                                                "So we close and delete the file in case of trouble.")

                  (* ;; "The right margin must be big enough to prevent line wrap on landscaped 14 inch paper, with Postscript's scaling of .01-point increments. (~ 101,000).  This will cause a performance hit.  Sigh.  JDS 9/5/89")

                  (DSPRIGHTMARGIN 131072 PRSTREAM)
                  [while (ILEQ (fetch CHNO of FORMATTINGSTATE)
                               (FGETTOBJ TEXTOBJ TEXTLEN))
                     do 
                        (* ;; "Format pages according to the existing layout:")

                        (for PAGEREGION inside PAGEFRAMES do (TEDIT.FORMATBOX TEXTOBJ PRSTREAM
                                                                    (fetch CHNO of FORMATTINGSTATE)
                                                                    PAGEREGION FORMATTINGSTATE 
                                                                    IMAGETYPE))
                        (CL:WHEN (EQ (fetch (PAGEFORMATTINGSTATE STATE) of FORMATTINGSTATE)
                                     :NEW-PAGE-LAYOUT)

                            (* ;; "New page layout got specified.  Prepare to re-enter the formatting code and skip to the equivalent page in the new format.")

                            (SETQ PAGEFRAMES (fetch (PAGEFORMATTINGSTATE NEWPAGELAYOUT) of 
                                                                                      FORMATTINGSTATE
                                                    ))

                            (* ;; "Set up the formatting state so code knows we're looking for an equivalent page, and which page it is. (The SUB1 is because we counted an extra page for the page on which the new payout was detected.)")

                            (replace (PAGEFORMATTINGSTATE REQUIREDREGIONTYPE) of FORMATTINGSTATE
                               with (SUB1 (fetch (PAGEFORMATTINGSTATE PAGECOUNT) of FORMATTINGSTATE))
                                   )
                            (replace (PAGEFORMATTINGSTATE PAGECOUNT) of FORMATTINGSTATE with 0)
                            (replace (PAGEFORMATTINGSTATE STATE) of FORMATTINGSTATE with 
                                                                       :SEARCHING-FOR-EQUIVALENT-PAGE
                                   )
                            (CL:WHEN (LISTP PAGEFRAMES)      (* ; 
                                                  "If it's a list, pack it into a real set of specs.")
                                (SETQ PAGEFRAMES (TEDIT.COMPOUND.PAGEFORMAT (CAR PAGEFRAMES)
                                                        (CADR PAGEFRAMES)
                                                        (CADDR PAGEFRAMES)))))]
                  (SETQ TARGETFILENAME (STREAMPROP PRSTREAM 'PDFTARGETINFO))
                  (CL:UNLESS WASOPEN                         (* ; 
                                            "Only if we created the image stream should we close it.")
                      (SETQ PRSTREAM (CLOSEF PRSTREAM))
                      (CL:UNLESS DONTSEND
                          (SEND.FILE.TO.PRINTER PRSTREAM SERVER (APPEND PRINTOPTIONS
                                                                       (LIST 'DOCUMENT.NAME 
                                                                             BREAKPAGETITLE)))))
                  (CL:UNLESS FILE (DELFILE SCRATCHFILE)))
              (SETQ NPAGES (fetch (PAGEFORMATTINGSTATE PAGECOUNT) of FORMATTINGSTATE))
              (TEDIT.PROMPTPRINT TEXTOBJ (CONCAT NPAGES " page" (CL:IF (EQ 1 NPAGES)
                                                                    ""
                                                                    "s")
                                                " printed"
                                                (CL:IF (EQ FILE SCRATCHFILE)
                                                    (CONCAT " to " (OR TARGETFILENAME (FULLNAME
                                                                                       FILE)))
                                                    ""))
                     T)
              (RETURN NPAGES)))])

(TEDIT.FORMATBOX
  [LAMBDA (TEXTOBJ PRSTREAM CH# PAGEREGION FORMATTINGSTATE)  (* ; "Edited 28-Jun-2023 15:54 by rmk")
                                                             (* ; "Edited 22-Jun-2023 21:50 by rmk")
                                                             (* ; "Edited  9-May-2023 18:22 by rmk")
                                                             (* ; "Edited 15-Feb-2023 23:47 by rmk")
                                                             (* ; "Edited 30-May-91 12:51 by jds")

    (* ;; "Grab text from the TEXTOBJ, starting with CH#, and use it to fill REGION on a page.  Return a list of line descriptors which, taken together, fill the region.")

    (* ;; "This updates the CHNO field of the  PAGEFORMATTINGSTATE")

    (LET ((REGION (fetch (PAGEREGION REGIONSPEC) of PAGEREGION))
          CHNO LINES LAST-CHNO SUBREGIONSPEC)
         (SELECTQ (fetch REGIONFILLMETHOD of PAGEREGION)
             (TEXT                                           (* ; 
                                  "A normal text region.  Fill it with text formatted the usual way.")
                   (CL:WHEN (\TEDIT.FORMAT.FOUNDBOX? PAGEREGION FORMATTINGSTATE)
                                                             (* ; 
                                               "Only format if we're not looking for something else.")
                       (TEDIT.SETQS (LINES NIL LAST-CHNO)
                              (TEDIT.FORMATTEXTBOX TEXTOBJ PRSTREAM CH# PAGEREGION FORMATTINGSTATE))))
             (FOLIO                                          (* ; 
                                           "A Page Number.  Fill it in according to the instructions")
                    (CL:WHEN (\TEDIT.FORMAT.FOUNDBOX? PAGEREGION FORMATTINGSTATE)
                                                             (* ; 
                                               "Only format if we're not looking for something else.")
                        (SETQ LINES (TEDIT.FORMATFOLIO TEXTOBJ PRSTREAM FORMATTINGSTATE PAGEREGION))))
             (HEADING                                        (* ; 
                          "A Page heading.  Fill it in from a text source we saved for the occasion.")
                      (CL:WHEN (\TEDIT.FORMAT.FOUNDBOX? PAGEREGION FORMATTINGSTATE)
                                                             (* ; 
                                               "Only format if we're not looking for something else.")
                          (SETQ LINES (TEDIT.FORMATHEADING TEXTOBJ PRSTREAM FORMATTINGSTATE 
                                             PAGEREGION))))
             (PAGE 
                   (* ;; "This box is really a PAGE FRAME, no lines here.  Fill it in and do whatever other processing is needful for end of page.")

                   (\TEDIT.FORMAT.FOUNDBOX? PAGEREGION FORMATTINGSTATE)
                                                             (* ; 
                      "So that if this is the box he's looking for, we'll spot it and stop searching")
                   (TEDIT.FORMATPAGE TEXTOBJ PRSTREAM CH# PAGEREGION FORMATTINGSTATE))
             ((RECURSIVE SEQUENCE ALTERNATE SELECTION REPEAT) 
                                                             (* ; 
                                                    "This box is really a list of boxes.  Fill them.")
                  (\TEDIT.FORMAT.FOUNDBOX? PAGEREGION FORMATTINGSTATE)
                                                             (* ; 
                      "So that if this is the box he's looking for, we'll spot it and stop searching")
                  (SELECTQ (fetch REGIONFILLMETHOD of PAGEREGION)
                      ((SEQUENCE RECURSIVE)                  (* ; 
                                                   "Just run thru filling in the sub-boxes in order.")
                           (bind SUBREGIONSPEC for SUBREGION in (fetch (PAGEREGION REGIONSUBBOXES)
                                                                   of PAGEREGION)
                              while (AND (ILEQ (fetch (PAGEFORMATTINGSTATE CHNO) of FORMATTINGSTATE)
                                               (fetch (TEXTOBJ TEXTLEN) of TEXTOBJ))
                                         (OR (NOT (fetch (PAGEFORMATTINGSTATE PAGE#) of 
                                                                                      FORMATTINGSTATE
                                                         ))
                                             (NOT (fetch (PAGEFORMATTINGSTATE MAXPAGE#) of 
                                                                                      FORMATTINGSTATE
                                                         ))
                                             (ILEQ (fetch (PAGEFORMATTINGSTATE PAGE#) of 
                                                                                      FORMATTINGSTATE
                                                          )
                                                   (fetch (PAGEFORMATTINGSTATE MAXPAGE#) of 
                                                                                      FORMATTINGSTATE
                                                          )))
                                         (NEQ (fetch (PAGEFORMATTINGSTATE STATE) of FORMATTINGSTATE)
                                              :NEW-PAGE-LAYOUT))
                              do [SETQ SUBREGIONSPEC (create REGION
                                                        using (fetch REGIONSPEC of SUBREGION)
                                                              LEFT _
                                                              (IPLUS (fetch (REGION LEFT)
                                                                        of (fetch REGIONSPEC
                                                                              of SUBREGION))
                                                                     (fetch (REGION LEFT)
                                                                        of REGION))
                                                              BOTTOM _
                                                              (IPLUS (fetch (REGION BOTTOM)
                                                                        of (fetch REGIONSPEC
                                                                              of SUBREGION))
                                                                     (fetch (REGION BOTTOM)
                                                                        of REGION]
                                 (TEDIT.FORMATBOX TEXTOBJ PRSTREAM (fetch (PAGEFORMATTINGSTATE CHNO)
                                                                      of FORMATTINGSTATE)
                                        (create PAGEREGION using SUBREGION REGIONSPEC _ SUBREGIONSPEC
                                               )
                                        FORMATTINGSTATE)))
                      (ALTERNATE                             (* ; 
                                                  "Run through the sub-boxes repeatedly in sequence.")
                                 (while (AND (ILEQ (fetch (PAGEFORMATTINGSTATE CHNO) of 
                                                                                      FORMATTINGSTATE
                                                          )
                                                   (fetch (TEXTOBJ TEXTLEN) of TEXTOBJ))
                                             (NEQ :NEW-PAGE-LAYOUT (fetch (PAGEFORMATTINGSTATE STATE)
                                                                      of FORMATTINGSTATE)))
                                    do (bind SUBREGIONSPEC for SUBREGION
                                          in (fetch (PAGEREGION REGIONSUBBOXES) of PAGEREGION)
                                          while (AND (ILEQ (fetch (PAGEFORMATTINGSTATE CHNO)
                                                              of FORMATTINGSTATE)
                                                           (TEXTLEN TEXTOBJ))
                                                     (NEQ (fetch (PAGEFORMATTINGSTATE STATE)
                                                             of FORMATTINGSTATE)
                                                          :NEW-PAGE-LAYOUT))
                                          do [SETQ SUBREGIONSPEC
                                              (create REGION
                                                 using (fetch REGIONSPEC of SUBREGION)
                                                       LEFT _ (IPLUS (fetch (REGION LEFT)
                                                                        of (fetch REGIONSPEC
                                                                              of SUBREGION))
                                                                     (fetch (REGION LEFT)
                                                                        of REGION))
                                                       BOTTOM _ (IPLUS (fetch (REGION BOTTOM)
                                                                          of (fetch REGIONSPEC
                                                                                of SUBREGION))
                                                                       (fetch (REGION BOTTOM)
                                                                          of REGION]
                                             (TEDIT.FORMATBOX TEXTOBJ PRSTREAM (fetch (
                                                                                  PAGEFORMATTINGSTATE
                                                                                       CHNO)
                                                                                  of FORMATTINGSTATE)
                                                    (create PAGEREGION using SUBREGION REGIONSPEC _ 
                                                                             SUBREGIONSPEC)
                                                    FORMATTINGSTATE))))
                      (SELECTION                             (* ; 
                                                "Do one or another box, depending on some criterion."))
                      (SHOULDNT))                            (* ; 
                                                             "For now, draw a box around it, too.")
                  )
             NIL)
         (for LINE in LINES when LINE do                     (* ; 
                                                            "Run thru the lines displaying them all.")
                                         (BLOCK)
                                         (CL:WHEN (OR (NOT (fetch (PAGEFORMATTINGSTATE MINPAGE#)
                                                              of FORMATTINGSTATE))
                                                      (IGEQ (fetch (PAGEFORMATTINGSTATE PAGE#)
                                                               of FORMATTINGSTATE)
                                                            (fetch (PAGEFORMATTINGSTATE MINPAGE#)
                                                               of FORMATTINGSTATE)))
                                                             (* ; 
                                    "We're beyond the min page number -- go ahead and print the line")
                                             (\TEDIT.HARDCOPY.DISPLAYLINE (GETLD LINE LTEXTOBJ)
                                                    LINE
                                                    (SCALEREGION (DSPSCALE NIL PRSTREAM)
                                                           REGION)
                                                    PRSTREAM FORMATTINGSTATE))
                                         (CL:WHEN (EQ TEXTOBJ (GETLD LINE LTEXTOBJ))

                                             (* ;; 
                        "This line refers back to the main text, so update the current-char pointer.")

                                             (* ;; 
                     "[NB that footnotes could cause the count to be non-monotonic; hence the IMAX.]")

                                             [SETQ CHNO (IMAX (OR CHNO 0)
                                                              (ADD1 (GETLD LINE LCHARLIM])
                                         (push (fetch (PAGEFORMATTINGSTATE PAGELINECACHE)
                                                  of FORMATTINGSTATE)
                                               LINE)
                                         (SETLD LINE LTEXTOBJ NIL))
         (COND
            (LAST-CHNO                                       (* ; 
                                                    "We got a definite last chno from FORMATTEXTBOX.")
                   (replace (PAGEFORMATTINGSTATE CHNO) of FORMATTINGSTATE with LAST-CHNO))
            (CHNO                                            (* ; 
                                                 "Otherwise, use the new char no if we computed one.")
                  (replace (PAGEFORMATTINGSTATE CHNO) of FORMATTINGSTATE with CHNO])

(TEDIT.FORMATHEADING
  [LAMBDA (TEXTOBJ PRSTREAM FORMATTINGSTATE PAGEREGION)      (* ; "Edited  9-Sep-2023 22:17 by rmk")
                                                             (* ; "Edited 19-May-2023 21:15 by rmk")
                                                             (* ; "Edited  9-May-2023 20:30 by rmk")
                                                             (* ; "Edited  9-Oct-90 13:24 by jds")

    (* ;; "Grab heading pieces from the FORMATTINGSTATE and use them to fill REGION on a page.  Return a list of line descriptors which fill the region.")

    (LET ((REGION (SCALEREGION (DSPSCALE NIL PRSTREAM)
                         (fetch (PAGEREGION REGIONSPEC) of PAGEREGION)))
          (LOCALINFO (fetch (PAGEREGION REGIONLOCALINFO) of PAGEREGION))
          HEADINGTEXTOBJ FORCENEXTPAGE HEADING)
         (CL:WHEN [AND (for FORM inside (LISTGET LOCALINFO 'PRECONDITIONS) always (EVAL FORM))
                       (SETQ HEADING (LISTGET (fetch (PAGEFORMATTINGSTATE PAGEHEADINGS) of 
                                                                                      FORMATTINGSTATE
                                                     )
                                            (LISTGET LOCALINFO 'HEADINGTYPE]
             [SETQ HEADINGTEXTOBJ (fetch (TEXTSTREAM TEXTOBJ)
                                     of (OPENTEXTSTREAM
                                         NIL NIL NIL NIL
                                         `(PARALOOKS ,(PPARALOOKS (fetch (SELPIECES SPFIRST)
                                                                     of HEADING]
             (\INSERTSELPIECES HEADING HEADINGTEXTOBJ 1)     (* ; 
                                                      "Insert the heading pieces into HEADINGTEXTOBJ")

             (* ;; "")

             (* ;; "Why is BOTTOM said to be the %"top%" of the region to be filled?")

             (bind LINE YBOT (BOTTOM _ (fetch (REGION BOTTOM) of REGION))
                   (LEN _ (TEXTLEN HEADINGTEXTOBJ))
                   (CHNO _ 1) while (ILESSP CHNO LEN) until FORCENEXTPAGE
                collect 

                      (* ;; "Format the next line from HEADINGTEXTOBJ pieces")

                      (SETQ LINE (\FORMATLINE HEADINGTEXTOBJ CHNO NIL REGION PRSTREAM FORMATTINGSTATE
                                        ))
                      (SETQ FORCENEXTPAGE (EQ (CHARCODE FORM)
                                              (GETLD LINE FORCED-END)))
                      [SETQ YBOT (COND
                                    (YBOT                    (* ; 
                                                             "Take account of this line's height")
                                          (IDIFFERENCE YBOT (FGETLD LINE LHEIGHT)))
                                    (T                       (* ; 
                                                 "First line:  position it at the top of the region.")
                                       (IDIFFERENCE BOTTOM (FGETLD LINE DESCENT]
                      (SETYPOS LINE YBOT)
                      (SETQ CHNO (ADD1 (FGETLD LINE LCHARLIM))) 
                                                             (* ; "Set the start of the next line")
                      LINE))])

(TEDIT.FORMATPAGE
  [LAMBDA (TEXTOBJ PRSTREAM CHNO PAGEREGION FORMATTINGSTATE) (* ; "Edited 11-Dec-2023 22:02 by rmk")
                                                             (* ; "Edited 13-Nov-2023 00:15 by rmk")
                                                             (* ; "Edited 22-Sep-2023 20:37 by rmk")
                                                             (* ; "Edited 15-Jul-2023 22:22 by rmk")
                                                             (* ; "Edited  5-Jul-2023 12:49 by rmk")
                                                             (* ; "Edited  8-Mar-2023 18:20 by rmk")
                                                             (* ; "Edited  4-Mar-2023 22:10 by rmk")
                                                             (* ; "Edited  9-Oct-2022 17:24 by rmk")
                                                             (* ; 
                                                        "Edited  4-Jul-93 00:29 by sybalskY:MV:ENVOS")

    (* ;; "Format a whole page -- run thru the page's sub-boxes filling them in by type:")

    (* ;; "   FOLIO -- page number")

    (* ;; "   PAGEHEADING -- running heads/footers")

    (* ;; "   TEXT -- plain running text.")

    (CL:UNLESS (EQ :SEARCHING-FOR-EQUIVALENT-PAGE (fetch (PAGEFORMATTINGSTATE STATE) of 
                                                                                      FORMATTINGSTATE
                                                         ))

        (* ;; "Only do real page formatting work if we're not trying to get ourselves to an equivalent page frame spec (having switched page layouts in mid-document).")

        [PROG ((PAGE# (fetch (PAGEFORMATTINGSTATE PAGE#) of FORMATTINGSTATE))
               (PAGEPROPS (fetch (PAGEREGION REGIONLOCALINFO) of PAGEREGION))
               (REGION (\TEDIT.SCALEREGION (DSPSCALE NIL PRSTREAM)
                              (fetch (PAGEREGION REGIONSPEC) of PAGEREGION)))
               (END-OF-PAGE-FN (GETTEXTPROP TEXTOBJ 'END-OF-PAGE-FN))
               (PRE-EXISTING-FONT (DSPFONT NIL PRSTREAM))
               (TEXTLEN (TEXTLEN TEXTOBJ))
               END-OF-PAGE-MARKER STARTING-FILEPTR PC NEWPARALOOKS)

         (* ;; "For real page independence, we need to reset the font to where it was as of the beginning of the page before calling DSPNEWPAGE.  This avoids font creation in a page prolog, which might get missed otherwise.")
                                                             (* ; 
                                                             "Print in the usual region on the page")
              (CL:UNLESS (ILEQ CHNO TEXTLEN)
                     (RETURN))
              (SETQ PC (\ALIGNEDPIECE CHNO TEXTOBJ))
              (SETQ NEWPARALOOKS (\TEDIT.APPLY.PARASTYLES (PPARALOOKS PC)
                                        PC TEXTOBJ))         (* ; 
                                                "RMK: Why both 'NEWPAGELAYOUT and :NEW-PAGE-LAYOUT ?")
              (CL:WHEN (EQ 'NEWPAGELAYOUT (fetch (FMTSPEC FMTPARATYPE) of NEWPARALOOKS))

                  (* ;; "The first paragraph on this page starts a new page layout.")

                  (replace (PAGEFORMATTINGSTATE STATE) of FORMATTINGSTATE with :NEW-PAGE-LAYOUT)

                  (* ;; "The first character of the paragraph after the one containing PC:")

                  [replace (PAGEFORMATTINGSTATE CHNO) of FORMATTINGSTATE
                     with (ADD1 (CAR (\TEDIT.PARA.LAST TEXTOBJ PC]
                  [replace (PAGEFORMATTINGSTATE NEWPAGELAYOUT) of FORMATTINGSTATE
                     with (\TEDIT.PARSE.PAGEFRAMES (LISTGET (fetch (FMTSPEC FMTUSERINFO) of 
                                                                                         NEWPARALOOKS
                                                                   )
                                                          'NEWPAGELAYOUT]
                  (RETURN))

         (* ;; "")

              (CL:UNLESS PAGE#

                  (* ;; "If this page template specifies a starting page number, use it.")

                  (SETQ PAGE# (OR (LISTGET PAGEPROPS 'STARTINGPAGE#)
                                  1))
                  (replace (PAGEFORMATTINGSTATE PAGE#) of FORMATTINGSTATE with PAGE#))
              (CL:WHEN (LISTGET PAGEPROPS 'LANDSCAPE?)       (* ; "This is a landscape page.")
                  (STREAMPROP PRSTREAM 'PRINTERMODE 'LANDSCAPE)
                                                             (* ; "Put the info. into stream ")
                  (DSPPUSHSTATE PRSTREAM)
                  (DSPROTATE 90 PRSTREAM)
                  (DSPTRANSLATE 0 (IMINUS (ffetch (REGION HEIGHT) of REGION))
                         PRSTREAM))
              (DSPCLIPPINGREGION REGION PRSTREAM)            (* ; "Clip to the whole sheet.")
              (DSPRIGHTMARGIN (fetch (REGION WIDTH) of REGION)
                     PRSTREAM)

         (* ;; "Go thru any leading page heading paras on the page, collecting copies of those pieces in the FORMATTINGSTATE. The value is the first CHNO of the start of the first non-heading piece.")

              (SETQ CHNO (TEDIT.HARDCOPY.PAGEHEADINGS TEXTOBJ CHNO FORMATTINGSTATE))

         (* ;; "")

         (* ;; "We now fill up the next complete page. Afterwards, we either continue to the next page (DPSNEWPAGE) or finish up.  TEDIT.FORMATBOX is responsible for setting up NEWPAGEBEFORFE and NEWPAGEAFTER")

              (replace (PAGEFORMATTINGSTATE CHNO) of FORMATTINGSTATE with CHNO)
              (for SUBREGION in (fetch (PAGEREGION REGIONSUBBOXES) of PAGEREGION)
                 while (ILEQ (fetch (PAGEFORMATTINGSTATE CHNO) of FORMATTINGSTATE)
                             TEXTLEN) do 
                                         (* ;; 
                 "Now format the subregions of the page. The CHNO field may be updated by each call.")

                                         (TEDIT.FORMATBOX TEXTOBJ PRSTREAM (fetch (
                                                                                  PAGEFORMATTINGSTATE
                                                                                   CHNO) of 
                                                                                      FORMATTINGSTATE
                                                                                  )
                                                SUBREGION FORMATTINGSTATE))

         (* ;; "")

              (DSPFONT PRE-EXISTING-FONT PRSTREAM)
              (CL:WHEN (LISTGET PAGEPROPS 'LANDSCAPE?)       (* ; "This is a landscape page.")
                  (STREAMPROP PRSTREAM 'PRINTERMODE NIL)
                  (DSPTRANSLATE 0 (ffetch (REGION HEIGHT) of REGION)
                         PRSTREAM)
                  (DSPROTATE 0 PRSTREAM)
                  (DSPPOPSTATE PRSTREAM))
              [COND
                 ([AND (ILEQ (fetch (PAGEFORMATTINGSTATE CHNO) of FORMATTINGSTATE)
                             TEXTLEN)
                       [NOT (AND END-OF-PAGE-FN (EQ 'DON'T (SETQ END-OF-PAGE-MARKER
                                                            (APPLY* END-OF-PAGE-FN TEXTOBJ 
                                                                   FORMATTINGSTATE]
                       [NOT (AND (fetch (PAGEFORMATTINGSTATE MINPAGE#) of FORMATTINGSTATE)
                                 (ILESSP PAGE# (fetch (PAGEFORMATTINGSTATE MINPAGE#) of 
                                                                                      FORMATTINGSTATE
                                                      ]
                       (NOT (AND (fetch (PAGEFORMATTINGSTATE MAXPAGE#) of FORMATTINGSTATE)
                                 (IEQ PAGE# (fetch (PAGEFORMATTINGSTATE MAXPAGE#) of FORMATTINGSTATE]
                                                             (* ; "There is more to print....")
                                                             (* ; "Force the new page")
                  (DSPNEWPAGE PRSTREAM))
                 ((AND (fetch (PAGEFORMATTINGSTATE MAXPAGE#) of FORMATTINGSTATE)
                       (IGEQ PAGE# (fetch (PAGEFORMATTINGSTATE MAXPAGE#) of FORMATTINGSTATE)))
                                                             (* ; 
                                  "We've run past the last page it wants formatted.  Stop the world.")
                  (replace (PAGEFORMATTINGSTATE CHNO) of FORMATTINGSTATE with (ADD1 TEXTLEN)))
                 ((EQ END-OF-PAGE-MARKER 'DON'T)             (* ; 
                                                         "The guy's e-o-page fn said stop.  So stop.")
                  (replace (PAGEFORMATTINGSTATE CHNO) of FORMATTINGSTATE with (ADD1 TEXTLEN]
              (add (fetch (PAGEFORMATTINGSTATE PAGE#) of FORMATTINGSTATE)
                   1)
              (replace (PAGEFORMATTINGSTATE FIRSTPAGE) of FORMATTINGSTATE with NIL)
              (replace (PAGEFORMATTINGSTATE PAGE#TEXT) of FORMATTINGSTATE
                 with (pop (fetch (PAGEFORMATTINGSTATE PAGE#GENERATOR) of FORMATTINGSTATE])

    (* ;; "Some things happen regardless of whether we're searching or not:  Need to count pages we pass over to find an equivalent page in the new layout:")

    (add (fetch (PAGEFORMATTINGSTATE PAGECOUNT) of FORMATTINGSTATE)
         1])

(TEDIT.FORMATTEXTBOX
  [LAMBDA (TEXTOBJ PRSTREAM CHNO PAGEREGION FORMATTINGSTATE) (* ; "Edited  4-Dec-2023 12:34 by rmk")
                                                             (* ; "Edited  4-Jul-2023 08:02 by rmk")
                                                             (* ; "Edited  2-Jul-2023 20:49 by rmk")
                                                             (* ; "Edited  1-Jun-2023 15:32 by rmk")
                                                             (* ; "Edited 27-May-2023 12:19 by rmk")
                                                             (* ; "Edited 30-Sep-2022 10:06 by rmk")
                                                             (* ; "Edited 24-Aug-2022 11:45 by rmk")
                                                             (* ; 
                                                        "Edited  3-Jul-93 22:14 by sybalskY:MV:ENVOS")

    (* ;; "Grab text from the TEXTOBJ, starting with CH#, and use it to fill REGION on a page.  Return a list of line descriptors which, taken together, fill the region.")

    (CL:UNLESS (EQ (fetch (PAGEFORMATTINGSTATE STATE) of FORMATTINGSTATE)
                   'SEARCHING)

        (* ;; "Only format text if we're really formatting.")

        (LET*
         ((REGION (SCALEREGION (DSPSCALE NIL PRSTREAM)
                         (ffetch (PAGEREGION REGIONSPEC) of PAGEREGION)))
          (COLUMNBOTTOM (fetch (REGION BOTTOM) of REGION))
          (RTOP (fetch (REGION TOP) of REGION))
          (FIRSTLINE T)
          (FOOTNOTELINES (ffetch PAGEFOOTNOTELINES of FORMATTINGSTATE))
          FORCENEXTPAGE PAGEFOOTNOTES PRIOR-COLUMN-YBOT LINES ORPHAN FINAL-CHNO FOOTNOTE-REMNANTS)

         (* ;; "Account for lines carried over from prior columns:")

         (bind LINE KEPT-ONE-LINE while (AND (ILEQ COLUMNBOTTOM RTOP)
                                             (SETQ LINE (pop FOOTNOTELINES)))
            do 
               (* ;; "Move as many potential footnote lines into this column as will fit. And move the bottom of the column up to account for them.")

               (CL:WHEN (IGREATERP (+ COLUMNBOTTOM (FGETLD LINE LHEIGHT))
                               RTOP)

                   (* ;; "If we ran out of room for footnotes, put this line back on the queue")

                   (TEDIT.SETQS (PAGEFOOTNOTES FOOTNOTE-REMNANTS KEPT-ONE-LINE)
                          (TEDIT.HARDCOPY-COLUMN-END PAGEFOOTNOTES LINE NIL 1 NIL REGION TEXTOBJ 
                                 FORMATTINGSTATE))
                   (CL:WHEN KEPT-ONE-LINE
                       (add COLUMNBOTTOM (FGETLD LINE LHEIGHT)))
                   (SETQ FOOTNOTELINES (APPEND FOOTNOTE-REMNANTS FOOTNOTELINES))
                   (RETURN))
               (SETQ PAGEFOOTNOTES (NCONC1 PAGEFOOTNOTES LINE))
               (add COLUMNBOTTOM (FGETLD LINE LHEIGHT)))
         (freplace (PAGEFORMATTINGSTATE PAGEFOOTNOTELINES) of FORMATTINGSTATE with FOOTNOTELINES)
                                                             (* ; "Remember any remaining footnotes")
         [SETQ LINES
          (bind LINE FMTSPEC LHEIGHT PREVLINE SPECIALYPOS BREAKAFTERLASTPARA YBOT NEWPAGETYPE 
                COLUMN-YBASE (TEXTLEN _ (TEXTLEN TEXTOBJ)) while (AND (ILEQ CHNO TEXTLEN)
                                                                      (NOT FORCENEXTPAGE))
             collect (BLOCK) 

                   (* ;; "Grab a line descriptor from the recycling list, or create a new one.")

                   (SETQ LINE (pop (fetch (PAGEFORMATTINGSTATE PAGELINECACHE) of FORMATTINGSTATE))) 
                                                             (* ; 
                                                             "Format the line, noting any form-feeds")
                   (SETQ LINE (\FORMATLINE TEXTOBJ CHNO LINE REGION PRSTREAM FORMATTINGSTATE))
                   (SETQ FORCENEXTPAGE (AND (EQ (CHARCODE FORM)
                                                (FGETLD LINE FORCED-END))
                                            'USERBREAK))
                   (SETQ LHEIGHT (FGETLD LINE LHEIGHT))
                   (SETQ FMTSPEC (FGETLD LINE LFMTSPEC))
                   (COND
                      ((FGETLD LINE LMARK)

                       (* ;; "This line is a placeholder for a page heading, OR for a conditional line that is to be skipped (e.g., an EVEN text para on an odd page).  All it tells us is what character to skip to so we can continue.")

                       (SETQ CHNO (ADD1 (FGETLD LINE LCHARLIM)))
                       LINE)
                      ((LISTGET (fetch (FMTSPEC FMTUSERINFO) of FMTSPEC)
                              'FOOTNOTE)

                       (* ;; "This paragraph is a footnote para.")

                       (CL:WHEN FORCENEXTPAGE                (* ; 
                                                             "HELP in original code.  SHOULDNT ?")
                           (SHOULDNT))
                       (SETQ FOOTNOTELINES (\TEDIT.FORMAT.FOOTNOTE TEXTOBJ PRSTREAM LINE REGION 
                                                  FORMATTINGSTATE))
                       (SETQ CHNO (ADD1 (FGETLD (CAR (FLAST FOOTNOTELINES))
                                               LCHARLIM)))   (* ; "Grab the lines of this footnote")
                       [COND
                          [(fetch (PAGEFORMATTINGSTATE PAGEFOOTNOTELINES) of FORMATTINGSTATE)

                           (* ;; 
                           "There are overflow footnote lines from this page already.  Add to them.")

                           (replace (PAGEFORMATTINGSTATE PAGEFOOTNOTELINES) of FORMATTINGSTATE
                              with (COPY (APPEND (fetch (PAGEFORMATTINGSTATE PAGEFOOTNOTELINES)
                                                    of FORMATTINGSTATE)
                                                FOOTNOTELINES]
                          (T 
                             (* ;; 
                   "No overflow footnote lines yet.   Try adding more footnotes to this page/column.")

                             (for LTAIL LINE on FOOTNOTELINES
                                do (SETQ LINE (CAR LTAIL))
                                   (add COLUMNBOTTOM LHEIGHT)
                                   (CL:WHEN (IGREATERP COLUMNBOTTOM (OR YBOT RTOP))

                                       (* ;; "This one overflows")

                                       (TEDIT.SETQS (PAGEFOOTNOTES FOOTNOTE-REMNANTS)
                                              (TEDIT.HARDCOPY-COLUMN-END PAGEFOOTNOTES LINE NIL 1 NIL
                                                     REGION TEXTOBJ FORMATTINGSTATE 3 (NOT FIRSTLINE)
                                                     ))
                                       [replace (PAGEFORMATTINGSTATE PAGEFOOTNOTELINES) of 
                                                                                      FORMATTINGSTATE
                                          with (COPY (APPEND FOOTNOTE-REMNANTS (CDR LTAIL]
                                       [SETQ FINAL-CHNO (IMAX CHNO (ADD1 (GETLD (CAR (FLAST LTAIL))
                                                                                LCHARLIM]
                                       (RETURN))
                                   (SETQ PAGEFOOTNOTES (NCONC1 PAGEFOOTNOTES LINE]

                       (* ;; "Don't accumulate footnote lines.")

                       NIL)
                      (T 
                         (* ;; "This line is not a page heading or a footnote, format it.")

                         (SETQ SPECIALYPOS NIL)

                         (* ;; "So that only the first line of a specially-placed paragraph is guaranteed to appear in the current box.")

                         [SETQ YBOT (COND
                                       ((AND (fetch (FMTSPEC FMTSPECIALY) of FMTSPEC)
                                             (NOT (ZEROP (fetch (FMTSPEC FMTSPECIALY) of FMTSPEC)))
                                             (FGETLD LINE 1STLN))
                                                             (* ; 
                                      "There is a special Y location for this paragraph.  Move there")
                                        (SETQ SPECIALYPOS (ffetch (FMTSPEC FMTSPECIALY) of FMTSPEC)))
                                       ((AND COLUMN-YBASE (FGETLD LINE 1STLN)
                                             (EQ (ffetch (FMTSPEC FMTCOLUMN) OF FMTSPEC)
                                                 'NEXT))

                                        (* ;; 
             "This is the first line of a new column; back YBOT back down to match the prior column.")

                                        (- COLUMN-YBASE (FGETLD LINE DESCENT)))
                                       [YBOT 

                                 (* ;; "We're into it;  take account of this line's height. Original code did the complicated LHEIGHT calculation and threw it away.  I assume that that was an error, that the new setting of LHEIGHT is for the benefit of the new YBOT value (which I pulled out of an alternative branch of a COND.")

                                             (CL:WHEN (fetch (FMTSPEC FMTBASETOBASE) of FMTSPEC)
                                                 [SETQ LHEIGHT
                                                  (IPLUS (FGETLD LINE DESCENT)
                                                         (fetch (FMTSPEC FMTBASETOBASE) of FMTSPEC)
                                                         (COND
                                                            [(FGETLD LINE 1STLN)
                                                             (IPLUS (fetch (FMTSPEC LEADBEFORE)
                                                                       of FMTSPEC)
                                                                    (fetch (FMTSPEC LEADAFTER)
                                                                       of (GETLD PREVLINE LFMTSPEC]
                                                            (T 0])
                                             (COND
                                                ((\FIRST-COLUMN-START LINE FMTSPEC)
                                                 (IDIFFERENCE (IMIN PRIOR-COLUMN-YBOT YBOT)
                                                        LHEIGHT))
                                                (T (IDIFFERENCE YBOT LHEIGHT]
                                       (T                    (* ; 
   "Just starting out;  find the line's position with respect to the top of the region to be filled.")
                                          (IDIFFERENCE RTOP (IPLUS (FGETLD LINE LTRUEASCENT)
                                                                   (FGETLD LINE DESCENT]
                         (COND
                            ((AND (ILESSP YBOT COLUMNBOTTOM)
                                  (NOT SPECIALYPOS))

                             (* ;; "This line hangs off the bottom;  (and isn't the first line of a specially-placed paragraph) punt it.")

                             (SETQ FORCENEXTPAGE T)
                             (SETQ FINAL-CHNO (FGETLD LINE LCHAR1))
                             (SETQ ORPHAN LINE)              (* ; "Remember this potential orphan")
                             NIL)
                            ((AND (NOT FIRSTLINE)
                                  (FGETLD LINE 1STLN)
                                  (SETQ NEWPAGETYPE (OR (fetch (FMTSPEC FMTNEWPAGEBEFORE)
                                                           of (FGETLD LINE LFMTSPEC))
                                                        BREAKAFTERLASTPARA)))

                             (* ;; 
                 "We're supposed to put this line at the start of a new page/column (any box, later)")

                             (SETQ FORCENEXTPAGE 'USERBREAK)
                             (SETQ FINAL-CHNO (FGETLD LINE LCHAR1))
                             (SETQ ORPHAN NIL)
                             (CL:UNLESS (EQ NEWPAGETYPE T)   (* ; 
                           "This isn't simply go to a new box;  we need to set up the search for it.")
                                 (replace (PAGEFORMATTINGSTATE STATE) of FORMATTINGSTATE
                                    with 'SEARCHING)
                                 (replace (PAGEFORMATTINGSTATE REQUIREDREGIONTYPE) of FORMATTINGSTATE
                                    with NEWPAGETYPE))
                             NIL)
                            (T                               (* ; "This line is good;  use it.")
                               (CL:WHEN (AND (fetch (FMTSPEC FMTNEWPAGEAFTER) of FMTSPEC))
                                                             (* ; 
   "We're supposed to put the line after this one at the start of a new page/column (any box, later)")
                                   (SETQ BREAKAFTERLASTPARA T))
                               (SETQ PRIOR-COLUMN-YBOT (CL:IF PRIOR-COLUMN-YBOT
                                                           (IMIN PRIOR-COLUMN-YBOT YBOT)
                                                           YBOT))
                               (SETYPOS LINE YBOT)
                               (CL:WHEN (\FIRST-COLUMN-START LINE FMTSPEC)

                                   (* ;; "This is the start of a new group of paragraphs to be lined up in columns.  Save the YBASE for these guys for the other columns.")

                                   (SETQ COLUMN-YBASE (GETLD LINE YBASE)))
                               (SETQ FIRSTLINE NIL)          (* ; 
                   "Note that we have put text out on this page/column/box, for first line checking.")
                               (SETQ CHNO (ADD1 (GETLD LINE LCHARLIM)))
                                                             (* ; 
                                                             "Keep track of the next character...")
                               (SETQ PREVLINE LINE)
                               LINE]
         (SETQ LINES (DREMOVE NIL LINES))                    (* ; 
   "Remove any NILs from the line list;  they're artifacts of running across page headings in-stream")
         (TEDIT.HARDCOPY-COLUMN-END LINES ORPHAN FORCENEXTPAGE CHNO PAGEFOOTNOTES REGION TEXTOBJ 
                FORMATTINGSTATE FINAL-CHNO)))])

(TEDIT.FORMATFOLIO
  [LAMBDA (TEXTOBJ PRSTREAM FORMATTINGSTATE PAGEREGION)      (* ; "Edited 18-Jan-2024 17:04 by rmk")
                                                             (* ; "Edited 13-Nov-2023 00:24 by rmk")
                                                             (* ; "Edited  1-Jun-2023 00:12 by rmk")
                                                             (* ; "Edited  9-May-2023 21:39 by rmk")
                                                             (* ; "Edited 30-May-91 12:51 by jds")

    (* ;; "Print a page number (called a %"folio%" in the biz) at the location and with the alignment specified in the REGIONSPEC.")

    (LET ((REGION (SCALEREGION (DSPSCALE NIL PRSTREAM)
                         (fetch (PAGEREGION REGIONSPEC) of PAGEREGION)))
          (FOLIOINFO (fetch (PAGEREGION REGIONLOCALINFO) of PAGEREGION))
          FOLIOTEXTOBJ PAGE# FOLIOFORMAT PRETEXT POSTTEXT INFOLIST)
         (CL:UNLESS (AND (fetch (PAGEFORMATTINGSTATE FIRSTPAGE) of FORMATTINGSTATE)
                         (LISTGET FOLIOINFO 'NOFIRSTPAGE))   (* ; 
       "If this isn't the first page, OR we want a page # on the first page, go ahead and format it.")
             (SETQ INFOLIST (LISTGET FOLIOINFO 'FORMATINFO)) (* ; 
                                                             "A LIST OF (FORMAT PRETEXT POSTTEXT)")
             (SETQ FOLIOFORMAT (CAR INFOLIST))
             (SETQ PRETEXT (OR (CADR INFOLIST)
                               ""))
             (SETQ POSTTEXT (OR (CADDR INFOLIST)
                                ""))
             [SETQ PAGE# (COND
                            ((fetch (PAGEFORMATTINGSTATE PAGE#TEXT) of FORMATTINGSTATE)
                             (MKSTRING (fetch (PAGEFORMATTINGSTATE PAGE#TEXT) of FORMATTINGSTATE)))
                            (T (SELECTQ FOLIOFORMAT
                                   (LOWERROMAN (ROMANNUMERALS (fetch (PAGEFORMATTINGSTATE PAGE#)
                                                                 of FORMATTINGSTATE)))
                                   (UPPERROMAN (ROMANNUMERALS (fetch (PAGEFORMATTINGSTATE PAGE#)
                                                                 of FORMATTINGSTATE)
                                                      T))
                                   (MKSTRING (fetch (PAGEFORMATTINGSTATE PAGE#) of FORMATTINGSTATE]
             [SETQ FOLIOTEXTOBJ (TEXTOBJ (OPENTEXTSTREAM NIL NIL NIL NIL
                                                `(PARALOOKS ,(LISTGET FOLIOINFO 'PARALOOKS)
                                                        LOOKS
                                                        ,(LISTGET FOLIOINFO 'CHARLOOKS]
             (TEDIT.INSERT FOLIOTEXTOBJ (CONCAT PRETEXT PAGE# POSTTEXT)
                    1 NIL T)
             (bind LINE YBOT FORCENEXTPAGE (TEXTLEN _ (TEXTLEN FOLIOTEXTOBJ))
                   (BOTTOM _ (fetch (REGION BOTTOM) of REGION))
                   (CHNO _ 1) while (ILEQ CHNO TEXTLEN) until FORCENEXTPAGE
                collect (SETQ LINE (\FORMATLINE FOLIOTEXTOBJ CHNO NIL REGION PRSTREAM FORMATTINGSTATE
                                          ))
                      (SETQ FORCENEXTPAGE (EQ (CHARCODE FORM)
                                              (GETLD LINE FORCED-END))) 
                                                             (* ; "Format the next possible line")
                      (SETQ CHNO (ADD1 (FGETLD LINE LCHARLIM))) 
                                                             (* ; 
                                                             "Keep track of the next character...")
                      [SETQ YBOT (COND
                                    (YBOT                    (* ; 
                                                 "We're into it;  take account of this line's height")
                                          (IDIFFERENCE YBOT (FGETLD LINE LHEIGHT)))
                                    (T                       (* ; 
   "Just starting out;  find the line's position with respect to the top of the region to be filled.")
                                       (IDIFFERENCE BOTTOM (FGETLD LINE DESCENT]
                      (CL:WHEN (ILESSP YBOT (IDIFFERENCE BOTTOM (FGETLD LINE DESCENT)))
                             (GO $$ITERATE))
                      (SETYPOS LINE YBOT)                    (* ; "This line is still good")
                      LINE))])

(\TEDIT.FORMAT.FOUNDBOX?
  [LAMBDA (PAGEREGION FORMATTINGSTATE)                       (* ; "Edited  2-Jul-2023 19:07 by rmk")
                                                             (* ; "Edited 19-Apr-88 17:35 by jds")

(* ;;; "Return T if we're either not looking to begin in a new box, or we are and we've found it.")

(* ;;; "This is part of generalizing the 'go to a new page' code to allow going to an arbitrary new formatting box.")

    (SELECTQ (fetch (PAGEFORMATTINGSTATE STATE) of FORMATTINGSTATE)
        (FORMATTING                                          (* ; 
                                                 "we're just munching along formatting.  Keep going.")
                    T)
        (SEARCHING                                           (* ; 
                    "We're searching for a page box of the right type.  Decide if this is it or not.")
                   (CL:WHEN (EQ (fetch (PAGEFORMATTINGSTATE REQUIREDREGIONTYPE) of FORMATTINGSTATE)
                                (fetch (PAGEREGION REGIONTYPE) of PAGEREGION))
                                                             (* ; 
                   "What we're looking for matches what we've got.  Turn off the search and return T")
                       (replace (PAGEFORMATTINGSTATE STATE) of FORMATTINGSTATE with 'FORMATTING)
                       T))
        (:SEARCHING-FOR-EQUIVALENT-PAGE 
                                        (* ;; "We've switched document formats in mid-document, and need to find the corresponding page frame to continue properly.")

             (CL:WHEN (IEQP (fetch (PAGEFORMATTINGSTATE REQUIREDREGIONTYPE) of FORMATTINGSTATE)
                            (fetch (PAGEFORMATTINGSTATE PAGECOUNT) of FORMATTINGSTATE))
                                                             (* ; 
                                                            "We've formatted enough pages up to now.")
                 (replace (PAGEFORMATTINGSTATE STATE) of FORMATTINGSTATE with 'FORMATTING)))
        T])

(TEDIT.SKIP.SPECIALCOND
  [LAMBDA (TSTREAM LINE PARALOOKS CHNO)                      (* ; "Edited  5-Jul-2023 14:19 by rmk")
                                                             (* ; "Edited 15-May-2023 22:36 by rmk")
                                                             (* ; "Edited 16-Feb-2023 00:08 by rmk")
                                                             (* ; 
                                                        "Edited 25-May-93 13:44 by sybalsky:mv:envos")

    (* ;; "This is a special-paragraph that should be skipped in this context (e.g. an EVEN para on an odd page).  This is done by setting LINE:LCHARLIM to the last character of the heading so it will move the document ahead to the next real text.")

    (SETLD LINE LMARK 'SPECIAL)
    (SETLD LINE 1STLN T)
    (SETLD LINE LSTLN T)
    (SETLD LINE LHEIGHT 0)
    (SETLD LINE ASCENT 0)
    (SETLD LINE DESCENT 0)
    (SETLD LINE LTRUEASCENT 0)
    (SETLD LINE LTRUEDESCENT 0)
    (SETLD LINE LCHARLIM (SUB1 (IPLUS CHNO (for PC (HEADINGTYPE _ (fetch (FMTSPEC FMTPARASUBTYPE)
                                                                     of PARALOOKS))
                                              inpieces (fetch (TEXTSTREAM PIECE) of TSTREAM)
                                              while [AND (EQ 'PAGEHEADING (fetch (FMTSPEC FMTPARATYPE
                                                                                        )
                                                                             of (PPARALOOKS PC)))
                                                         (EQ HEADINGTYPE (fetch (FMTSPEC 
                                                                                       FMTPARASUBTYPE
                                                                                       )
                                                                            of (PPARALOOKS PC]
                                              sum (PLEN PC])
)



(* ;; "Aux function to capture page headings during line formatting:")

(DEFINEQ

(TEDIT.HARDCOPY.PAGEHEADINGS
  [LAMBDA (TEXTOBJ CHNO FORMATTINGSTATE)                     (* ; "Edited  9-May-2023 17:46 by rmk")
                                                             (* ; "Edited  7-May-2023 23:45 by rmk")
                                                             (* ; "Edited  9-Oct-2022 17:12 by rmk")

    (* ;; "This runs thru all the headings starting at CHNO, copying the pieces of the different heading types into FORMATTINGSTATE, and returning the  starting CHNO of the first non-heading piece.  ")

    (CL:UNLESS FORMATTINGSTATE                               (* ; 
                                                     "If it isn't there, we would loose the headings")
        (SHOULDNT "NIL FORMATTINGSTATE"))
    (bind HEADINGSUBTYPE (PC _ (\CHTOPC CHNO TEXTOBJ)) while [AND PC (EQ 'PAGEHEADING
                                                                         (fetch FMTPARATYPE
                                                                            of (PPARALOOKS PC]
       do (SETQ HEADINGSUBTYPE (fetch FMTPARASUBTYPE of (PPARALOOKS PC)))
          (for P (START _ CHNO) inpieces PC while [AND (EQ 'PAGEHEADING (fetch FMTPARATYPE
                                                                           of (PPARALOOKS P)))
                                                       (EQ HEADINGSUBTYPE (fetch FMTPARASUBTYPE
                                                                             of (PPARALOOKS P]
             do 
                (* ;; "We loop at least once, because P=PC satisfies the while. We need the CHNO, not the piece for the piecerange")

                (add CHNO (PLEN P)) finally (LISTPUT (fetch PAGEHEADINGS of FORMATTINGSTATE)
                                                   HEADINGSUBTYPE
                                                   (\SELPIECES.COPY (\SELPIECES START CHNO TEXTOBJ)))
                                          
                                          (* ;; 
                                          "Set PC to continue looking for the next headingtype.")

                                          (SETQ PC P)))
    CHNO])
)



(* ;; " Aux function to handle end-of-column processing (paragraph keep, widow elimination, etc):")

(DEFINEQ

(TEDIT.HARDCOPY-COLUMN-END
  [LAMBDA (ORIGINAL-LINES ORPHAN FORCENEXTPAGE CHNO FOOTNOTELINES REGION TEXTOBJ FORMATTINGSTATE 
                 FINAL-CHNO DONT-KEEP-SINGLE-LINE)           (* ; "Edited 29-Oct-2023 18:40 by rmk")
                                                             (* ; "Edited  4-Jul-2023 21:00 by rmk")
                                                             (* ; "Edited 15-Feb-2023 23:45 by rmk")
                                                             (* ; "Edited  3-Oct-2022 18:08 by rmk")
                                                             (* ; "Edited 11-May-93 01:21 by jds")

    (* ;; "Do column-end processing for TEdit hardcopy -- widow elimination, respect keep-together specifications, etc.")

    (* ;; "RETURNS:")

    (* ;; "    -- List of line descriptors in the column")

    (* ;; "    -- List of line descriptors removed from the end of the column.")

    (* ;; "    -- Flag to say that it kept one line")

    (SETQ ORIGINAL-LINES (DREMOVE NIL ORIGINAL-LINES))       (* ; "Remove any NILs from the list of lines; they're artifacts of running into page headings in mid-page.")
    (LET ((LINES (COPY ORIGINAL-LINES))
          LASTLINE
          (REMOVED-LINES (LIST ORPHAN)))
         (CL:WHEN LINES                                      (* ; 
                       "Only worry about widows and orphans if there are really lines to worry about")
             [for LINE in LINES when (GETLD LINE LMARK LINE)
                do (DREMOVE LINE LINES)
                   (SETQ FINAL-CHNO (AND FINAL-CHNO (IMAX FINAL-CHNO (ADD1 (GETLD LINE LCHARLIM]
             (SETQ LASTLINE (CAR (FLAST LINES)))             (* ; 
                                                    "Find the last line in this box (column or page)")
             (CL:WHEN (AND ORPHAN (GETLD ORPHAN LSTLN)
                           (NOT (GETLD ORPHAN 1STLN)))

                 (* ;; "There was an overhanging line, and it was the last line of the paragraph.  Remove the penultimate line.")

                 (SETQ LINES (DREMOVE LASTLINE LINES))
                 (PUSH REMOVED-LINES LASTLINE)
                 (SETQ FINAL-CHNO (GETLD LASTLINE LCHAR1))
                 (SETQ LASTLINE (CAR (FLAST LINES))))
             (CL:WHEN (AND LASTLINE (GETLD LASTLINE 1STLN)
                           (NOT (GETLD LASTLINE LSTLN))
                           (ILESSP (GETLD LASTLINE LCHARLIM)
                                  (TEXTLEN TEXTOBJ)))        (* ; 
                                             "The last line on the page is a widow.  Remove it, too.")
                 (SETQ LINES (DREMOVE LASTLINE LINES))
                 (PUSH REMOVED-LINES LASTLINE)
                 (SETQ FINAL-CHNO (GETLD LASTLINE LCHAR1))
                 (SETQ LASTLINE (CAR (FLAST LINES))))
             [COND
                [(NOT LINES)

                 (* ;; "This is a 2- or 3-line paragraph, with only the first 1 or 2 lines fitting on ANY page.  Just return the first 1 or two lines, and we'll have to eat the widow.")

                 (SETQ LINES ORIGINAL-LINES)
                 (SETQ FINAL-CHNO (COND
                                     (ORPHAN (GETLD ORPHAN LCHAR1))
                                     (T (ADD1 (GETLD (CAR (FLAST ORIGINAL-LINES))
                                                     LCHARLIM]
                ([AND (NEQ FORCENEXTPAGE 'USERBREAK)
                      (ILEQ CHNO (TEXTLEN TEXTOBJ))
                      (OR (fetch (FMTSPEC FMTHEADINGKEEP) of (GETLD LASTLINE LFMTSPEC))
                          (AND (fetch (FMTSPEC FMTKEEP) of (GETLD LASTLINE LFMTSPEC))
                               (NOT (GETLD LASTLINE LSTLN]

                 (* ;; "Only do widow/orphan detection if this is NOT a page break the user asked for.  And this isn't the end of the document.")

                 (for LASTLINE in (REVERSE LINES) while [OR (fetch (FMTSPEC FMTHEADINGKEEP)
                                                               of (GETLD LASTLINE LFMTSPEC))
                                                            (AND (fetch (FMTSPEC FMTKEEP)
                                                                    of (GETLD LASTLINE LFMTSPEC))
                                                                 (NOT (GETLD LASTLINE LSTLN]
                    do 
                       (* ;; "Run thru, removing any trailing headings.  However, assure that there's at least one line on a page.")
 finally (COND
            ((AND LASTLINE (AND (NOT (fetch (FMTSPEC FMTHEADINGKEEP) of (GETLD LASTLINE LFMTSPEC)))
                                (GETLD LASTLINE LSTLN)))

             (* ;; "OK we found a line that DOESN'T need to be kept with the other paragraphs.  Chop off the list starting AFTER it.")

             (SETQ LASTLINE (CDR (MEMB LASTLINE LINES)))
             (SETQ LINES (LDIFF LINES LASTLINE))
             (SETQ REMOVED-LINES (APPEND LASTLINE REMOVED-LINES))
             (SETQ FINAL-CHNO (GETLD (CAR LASTLINE)
                                     LCHAR1)))
            (T (TEDIT.PROMPTPRINT TEXTOBJ (CONCAT "WARNING: Page " (fetch (PAGEFORMATTINGSTATE PAGE#)
                                                                      of FORMATTINGSTATE)
                                                 " is completely full of headings ")
                      T])
         (CL:WHEN FOOTNOTELINES

             (* ;; "There are footnotes--fix up their vertical locations, so they're aligned on the botton of the column.")

             (bind (YBOT _ (IDIFFERENCE (fetch (REGION BOTTOM) of REGION)
                                  (GETLD (CAR (FLAST FOOTNOTELINES))
                                         DESCENT))) for LINE in (REVERSE FOOTNOTELINES)
                do (SETYPOS LINE YBOT)
                   (add YBOT (FGETLD LINE LHEIGHT))))
         (COND
            ((OR LINES FOOTNOTELINES)                        (* ; 
                                          "There really ARE lines in this column; take care of them.")
             (TEDIT.VALUES (APPEND LINES FOOTNOTELINES)
                    REMOVED-LINES NIL))
            [(AND ORPHAN (NOT ORIGINAL-LINES)
                  (NOT DONT-KEEP-SINGLE-LINE))               (* ; 
                                      "If there's only one line left for this box, return it anyhow.")
             (TEDIT.VALUES (CONS ORPHAN FOOTNOTELINES)
                    NIL
                    (ADD1 (GETLD ORPHAN LCHARLIM]
            [(AND (NOT DONT-KEEP-SINGLE-LINE)
                  REMOVED-LINES)
             (SETQ LASTLINE (CAR REMOVED-LINES))
             (TEDIT.VALUES (LIST LASTLINE)
                    (CDR REMOVED-LINES)
                    (AND LASTLINE (ADD1 (GETLD LASTLINE LCHARLIM]
            (ORPHAN 

                   (* ;; "There's only the one line, so let's go back and try again.")

                   (TEDIT.VALUES NIL (LIST ORPHAN)
                          FINAL-CHNO])
)



(* ;; "Handle varying paper sizes")

(DEFINEQ

(SCALEPAGEUNITS
  [LAMBDA (VALUE FACTOR PAPERSIZE)                           (* jds "14-Jun-85 15:34")

         (* Scale a page-relative value into points%: Scale VALUE by FACTOR, then allow 
         for negative values to mean "come in from the other side by that much")

    (AND VALUE (PROG [(TVAL (FIXR (FTIMES VALUE FACTOR)))
                      (OTHEREDGE (SELECTQ PAPERSIZE
                                     ((NIL LETTER) 
                                          612)
                                     (LEGAL 612)
                                     (fetch (TEDITPAPERSIZE TPSWIDTH) of (ASSOC PAPERSIZE 
                                                                                TEDIT.PAPER.SIZES]
                     [COND
                        ((ILESSP TVAL 0)                     (* He specified this value as an 
                                                             offset from the opposite edge.
                                                             Convert it.)
                         (SETQ TVAL (IPLUS OTHEREDGE TVAL]
                     (RETURN TVAL])

(SCALEPAGEXUNITS
  [LAMBDA (VALUE FACTOR PAPERSIZE LANDSCAPE?)                (* ; "Edited 21-Apr-88 10:46 by jds")

    (* ;; "Scale a page-relative value into points: Scale VALUE by FACTOR, then allow for negative values to mean 'come in from the other side by that much'")

    (AND VALUE (PROG ((TVAL (FIXR (FTIMES VALUE FACTOR)))
                      OTHEREDGE)
                     [COND
                        ((ILESSP TVAL 0)                     (* ; 
                          "He specified this value as an offset from the opposite edge.  Convert it.")
                         (SETQ OTHEREDGE (\TEDIT.PAPERWIDTH PAPERSIZE LANDSCAPE?))
                         (SETQ TVAL (IPLUS OTHEREDGE TVAL]
                     (RETURN TVAL])

(SCALEPAGEYUNITS
  [LAMBDA (VALUE FACTOR PAPERSIZE LANDSCAPE?)                (* ; "Edited 17-Dec-87 14:52 by jds")

    (* ;; "Scale a page-relative value into points: Scale VALUE by FACTOR, then allow for negative values to mean 'come in from the other side by that much'")

    (AND VALUE (PROG ((TVAL (FIXR (FTIMES VALUE FACTOR)))
                      OTHEREDGE)
                     [COND
                        ((ILESSP TVAL 0)                     (* ; 
                          "He specified this value as an offset from the opposite edge.  Convert it.")
                         (SETQ OTHEREDGE (\TEDIT.PAPERHEIGHT PAPERSIZE LANDSCAPE?))
                         (SETQ TVAL (IPLUS OTHEREDGE TVAL]
                     (RETURN TVAL])

(\TEDIT.PAPERHEIGHT
  [LAMBDA (PAPERSIZE LANDSCAPE?)                             (* ; "Edited 29-Dec-86 15:06 by jds")

(* ;;; "Compute the HEIGHT of a sheet of paper, according to PAPERSIZE, in points.")

    (COND
       (LANDSCAPE?                                           (* ; 
                 "The paper is landscape, so its height is the WIDTH of the same paper size, normal.")
              (\TEDIT.PAPERWIDTH PAPERSIZE NIL))
       (T                                                    (* ; 
                                                           "Not landscape, so look up the size spec:")
          (SELECTQ PAPERSIZE
              ((NIL LETTER Letter) 
                   792)
              ((Legal 8.5x14 LEGAL) 
                   1008)
              ((A4 a4) 
                   842)
              (fetch (TEDITPAPERSIZE TPSHEIGHT) of (ASSOC PAPERSIZE TEDIT.PAPER.SIZES])

(\TEDIT.PAPERWIDTH
  [LAMBDA (PAPERSIZE LANDSCAPE?)                             (* ; "Edited  9-Dec-87 20:10 by jds")

(* ;;; "Compute the WIDTH of a sheet of paper, according to PAPERSIZE and LANDSCAPE?")

    (LET (CANONICAL-PAPERSIZE)
         (COND
            (LANDSCAPE?                                      (* ; 
                     "It's landscape paper, so look at the HEIGHT of the corresponding normal paper.")
                   (\TEDIT.PAPERHEIGHT PAPERSIZE NIL))
            (T                                               (* ; 
                                                           "Not landscape, so look up the size spec:")
               (SELECTQ PAPERSIZE
                   ((NIL Letter LETTER 8.5x11)               (* ; "letter size paper, 8.5inx11in")
                        612)
                   ((Legal LEGAL 8.5x14) 
                        612)
                   ((A4 a4)                                  (* ; "A4 ISO-size paper, 210mmx297mm")
                        595)
                   (COND
                      ((SETQ CANONICAL-PAPERSIZE (ASSOC PAPERSIZE TEDIT.PAPER.SIZES))
                       (fetch (TEDITPAPERSIZE TPSWIDTH) of CANONICAL-PAPERSIZE))
                      (T (\ILLEGAL.ARG PAPERSIZE])
)
(DECLARE%: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS TEDIT.PAPER.SIZES)
)

(RPAQQ TEDIT.PAPER.SIZES
       ((A0 2384 3370)
        (A1 1684 2384)
        (A2 1191 1684)
        (A3 842 1191)
        (A4 595 842)
        (A5 420 595)
        (B0 2835 4008)
        (B1 2004 2835)
        (B2 1417 2004)
        (B3 1001 1417)
        (B4 709 1001)
        (B5 499 709)))



(* ; "Page numbering option support")

(DEFINEQ

(ROMANNUMERALS
  [LAMBDA (NUMBER UCFLG)                                     (* jds "12-Jul-85 13:19")

         (* * Take a NUMBER, and render it as a string of roman numerals.
         If UCFLG, then the numerals will be upper-case;
         otherwise, they are lower-case.)

    (PROG ((CHARS NIL))
          [while (NOT (ZEROP NUMBER)) do (COND
                                            ((IGEQ NUMBER 1000)
                                             (push CHARS 'm)
                                             (add NUMBER -1000))
                                            ((IGEQ NUMBER 900)
                                             (push CHARS 'c)
                                             (push CHARS 'm)
                                             (add NUMBER -900))
                                            ((IGEQ NUMBER 500)
                                             (push CHARS 'd)
                                             (add NUMBER -500))
                                            ((IGEQ NUMBER 400)
                                             (push CHARS 'c)
                                             (push CHARS 'd)
                                             (add NUMBER -400))
                                            ((IGEQ NUMBER 100)
                                             (push CHARS 'c)
                                             (add NUMBER -100))
                                            ((IGEQ NUMBER 90)
                                             (push CHARS 'x)
                                             (push CHARS 'c)
                                             (add NUMBER -90))
                                            ((IGEQ NUMBER 50)
                                             (push CHARS 'l)
                                             (add NUMBER -50))
                                            ((IGEQ NUMBER 40)
                                             (push CHARS 'x)
                                             (push CHARS 'l)
                                             (add NUMBER -40))
                                            ((IGEQ NUMBER 10)
                                             (push CHARS 'x)
                                             (add NUMBER -10))
                                            ((IGEQ NUMBER 9)
                                             (push CHARS 'i)
                                             (push CHARS 'x)
                                             (add NUMBER -9))
                                            ((IGEQ NUMBER 5)
                                             (push CHARS 'v)
                                             (add NUMBER -5))
                                            ((IGEQ NUMBER 4)
                                             (push CHARS 'i)
                                             (push CHARS 'v)
                                             (add NUMBER -4))
                                            (T (push CHARS 'i)
                                               (add NUMBER -1]
          (RETURN (COND
                     [UCFLG                                  (* The caller wants his roman numerals 
                                                             upper case)
                            (U-CASE (CONCATLIST (REVERSE CHARS]
                     (T (CONCATLIST (REVERSE CHARS])
)



(* ;; "Foot note support")

(DEFINEQ

(\TEDIT.FORMAT.FOOTNOTE
  [LAMBDA (TEXTOBJ PRSTREAM LINE REGION FORMATTINGSTATE)     (* ; "Edited  6-May-2023 20:38 by rmk")
                                                             (* ; "Edited  7-Mar-2023 13:11 by rmk")
                                                             (* ; "Edited 30-May-91 12:52 by jds")

    (* ;; "Grab text from the TEXTOBJ, starting with CHNO, and use it to fill REGION on a page.  Return a list of line descriptors which, taken together, fill the region.")

    (BLOCK)                                                  (* ; 
                                                             "Footnotes aren't so long, but why not?")
    (bind PREVLINE (LEFT _ (fetch (REGION LEFT) of REGION))
          (TEXTLEN _ (TEXTLEN TEXTOBJ))
          (CHNO _ (GETLD LINE LCHAR1)) while (ILEQ CHNO TEXTLEN) until (AND PREVLINE (GETLD PREVLINE
                                                                                            LSTLN))
       collect 

             (* ;; "Grab a line descriptor from the formatting list, or create a new one.")

             (SETQ LINE (\FORMATLINE TEXTOBJ CHNO (fetch (PAGEFORMATTINGSTATE PAGELINECACHE)
                                                     of FORMATTINGSTATE)
                               REGION PRSTREAM FORMATTINGSTATE)) 
                                                             (* ; 
                                                             "Format the line, noting any form-feeds")
             (SETLD LINE LTEXTOBJ TEXTOBJ)                   (* ; 
                                                            "And remember the document it came from.")
             (add (FGETLD LINE LEFTMARGIN)
                  LEFT)
             (add (FGETLD LINE RIGHTMARGIN)
                  LEFT)                                      (* ; "Format the next possible line")
             (SETQ CHNO (ADD1 (FGETLD LINE LCHARLIM)))       (* ; 
                                                             "Keep track of the next character...")
             (SETQ PREVLINE LINE)
             LINE finally                                    (* ; 
   "Remove any NILs from the line list;  they're artifacts of running across page headings in-stream")
                        (RETURN (DREMOVE NIL $$VAL])
)
(DECLARE%: DONTCOPY
  (FILEMAP (NIL (11576 14909 (\TEDIT.PARSE.PAGEFRAMES 11586 . 13086) (\TEDIT.PUT.PAGEFRAMES 13088 . 
13912) (\TEDIT.UNPARSE.PAGEFRAMES 13914 . 14907)) (14972 29999 (TEDIT.SINGLE.PAGEFORMAT 14982 . 25200)
 (TEDIT.COMPOUND.PAGEFORMAT 25202 . 26673) (TEDIT.PAGEFORMAT 26675 . 29997)) (30086 91759 (
TEDIT.FORMAT.HARDCOPY 30096 . 41024) (TEDIT.FORMATBOX 41026 . 54896) (TEDIT.FORMATHEADING 54898 . 
58298) (TEDIT.FORMATPAGE 58300 . 68077) (TEDIT.FORMATTEXTBOX 68079 . 82947) (TEDIT.FORMATFOLIO 82949
 . 87546) (\TEDIT.FORMAT.FOUNDBOX? 87548 . 89692) (TEDIT.SKIP.SPECIALCOND 89694 . 91757)) (91839 94120
 (TEDIT.HARDCOPY.PAGEHEADINGS 91849 . 94118)) (94229 101405 (TEDIT.HARDCOPY-COLUMN-END 94239 . 101403)
) (101450 106391 (SCALEPAGEUNITS 101460 . 102601) (SCALEPAGEXUNITS 102603 . 103373) (SCALEPAGEYUNITS 
103375 . 104146) (\TEDIT.PAPERHEIGHT 104148 . 105083) (\TEDIT.PAPERWIDTH 105085 . 106389)) (106807 
110375 (ROMANNUMERALS 106817 . 110373)) (110411 112833 (\TEDIT.FORMAT.FOOTNOTE 110421 . 112831)))))
STOP
