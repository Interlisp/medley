(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)

(FILECREATED " 4-Nov-2022 23:13:19" {WMEDLEY}<library>tedit>TEDIT-PCTREE.;102 41602  

      :CHANGES-TO (I.S.OPRS inpieces)
                  (VARS TEDIT-PCTREECOMS)

      :PREVIOUS-DATE " 5-Oct-2022 08:47:07" {WMEDLEY}<library>tedit>TEDIT-PCTREE.;101)


(PRETTYCOMPRINT TEDIT-PCTREECOMS)

(RPAQQ TEDIT-PCTREECOMS
       [
        (* ;; "Balanced tree PIECE TABLE supporting functions")

        (DECLARE%: EVAL@COMPILE DONTCOPY 

               (* ;; 
       "\BTREEMAXCOUNT = number of children in a full node = maximum value for a node's COUNT field.")

               (EXPORT (CONSTANTS (\BTREEWORDSPERSLOT 4)
                              (\BTREEMAXCOUNT 8))
                      (RECORDS BTREENODE BTSLOT)
                      (MACROS \NTHSLOT \NEXTSLOT \PREVSLOT \LASTSLOT \FIRSTSLOT \MOVESLOT \FILLSLOT 
                             \FINDSLOT)
                      (I.S.OPRS inslots inpiecerange inpieces)))
        (INITRECORDS BTREENODE)
        (FNS \MAKEPCTB \UPDATEPCNODES \FIRSTPIECE \DELETETREE \INSERTTREE \LASTPIECE \MATCHPCS 
             \SPLITTREE \PCTOCH \CHTOPC \TEDIT.SET-TOTLEN \PIECERANGE)
        (COMS                                                (* ; "Debugging ")
              (FNS BTVALIDATE CHECK-BTREE CHECK-BTREE1)
              (INITVARS (BTVALIDATETAGS))
              (GLOBALVARS BTVALIDATETAGS))
        (DECLARE%: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS (ADDVARS (NLAMA)
                                                                             (NLAML)
                                                                             (LAMA])



(* ;; "Balanced tree PIECE TABLE supporting functions")

(DECLARE%: EVAL@COMPILE DONTCOPY 
(* "FOLLOWING DEFINITIONS EXPORTED")(DECLARE%: EVAL@COMPILE 

(RPAQQ \BTREEWORDSPERSLOT 4)

(RPAQQ \BTREEMAXCOUNT 8)


(CONSTANTS (\BTREEWORDSPERSLOT 4)
       (\BTREEMAXCOUNT 8))
)
(DECLARE%: EVAL@COMPILE

(DATATYPE BTREENODE (
                     (* ;; "An order-4 BTREE node for representing the piece table for TEdit.")

                     DOWN1
                     (DLEN1 FIXP)
                     DOWN2
                     (DLEN2 FIXP)
                     DOWN3
                     (DLEN3 FIXP)
                     DOWN4
                     (DLEN4 FIXP)
                     DOWN5
                     (DLEN5 FIXP)
                     DOWN6
                     (DLEN6 FIXP)
                     DOWN7
                     (DLEN7 FIXP)
                     DOWN8
                     (DLEN8 FIXP)
                     (COUNT BYTE)                            (* ; "# of children of this node. Must not be BITS 4 because \PUTBASEPTR optimizations smash the high-order bits.")
                     (UPWARD XPOINTER)                       (* ; "Parent of this node, if any.")
                     (TOTLEN FIXP)                           (* ; 
                                                             "Total length of this tree and subtrees")
                     ))

(BLOCKRECORD BTSLOT (DOWN (DLEN FIXP)))
)

(/DECLAREDATATYPE 'BTREENODE
       '(POINTER FIXP POINTER FIXP POINTER FIXP POINTER FIXP POINTER FIXP POINTER FIXP POINTER FIXP 
               POINTER FIXP BYTE XPOINTER FIXP)
       '((BTREENODE 0 POINTER)
         (BTREENODE 2 FIXP)
         (BTREENODE 4 POINTER)
         (BTREENODE 6 FIXP)
         (BTREENODE 8 POINTER)
         (BTREENODE 10 FIXP)
         (BTREENODE 12 POINTER)
         (BTREENODE 14 FIXP)
         (BTREENODE 16 POINTER)
         (BTREENODE 18 FIXP)
         (BTREENODE 20 POINTER)
         (BTREENODE 22 FIXP)
         (BTREENODE 24 POINTER)
         (BTREENODE 26 FIXP)
         (BTREENODE 28 POINTER)
         (BTREENODE 30 FIXP)
         (BTREENODE 32 (BITS . 7))
         (BTREENODE 34 XPOINTER)
         (BTREENODE 36 FIXP))
       '38)
(DECLARE%: EVAL@COMPILE 

(PUTPROPS \NTHSLOT MACRO ((BTREENODE N)
                          (\ADDBASE BTREENODE (UNFOLD (SUB1 N)
                                                     \BTREEWORDSPERSLOT))))

(PUTPROPS \NEXTSLOT MACRO ((SLOT)
                           (\ADDBASE SLOT \BTREEWORDSPERSLOT)))

(PUTPROPS \PREVSLOT MACRO ((SLOT)
                           (\ADDBASE SLOT (IMINUS \BTREEWORDSPERSLOT))))

(PUTPROPS \LASTSLOT MACRO ((BTNODE)
                           (\ADDBASE BTNODE (UNFOLD (SUB1 (fetch (BTREENODE COUNT) of BTNODE))
                                                   \BTREEWORDSPERSLOT))))

(PUTPROPS \FIRSTSLOT MACRO ((BTNODE)
                            BTNODE))

(PUTPROPS \MOVESLOT MACRO ((FROMSLOT TOSLOT)

                           (* ;; 
                     "Moves the slot information from FROMSLOT to TOSLOT, and also clears FROMSLOT. ")

                           (\PUTBASEPTR TOSLOT 0 (ffetch (BTSLOT DOWN) of FROMSLOT))
                                                             (* ; 
                                             "Avoid refcnt fiddling (assumes we are uninterruptable)")
                           (\PUTBASEPTR FROMSLOT 0 NIL)
                           (freplace (BTSLOT DLEN) of TOSLOT with (ffetch (BTSLOT DLEN) of FROMSLOT))
                           (freplace (BTSLOT DLEN) of FROMSLOT with 0)))

(PUTPROPS \FILLSLOT MACRO ((SLOT DWN DWNL)
                           (freplace (BTSLOT DOWN) of SLOT with DWN)
                           (freplace (BTSLOT DLEN) of SLOT with DWNL)))

(PUTPROPS \FINDSLOT MACRO [(BTNODE ITEM)
                           (find S inslots BTNODE suchthat (EQ ITEM (ffetch (BTSLOT DOWN)
                                                                       of S])
)
(DECLARE%: EVAL@COMPILE 

(I.S.OPR 'inslots NIL '[SUBST (GETDUMMYVAR)
                              '$$BTBODY
                              '(bind $$BTBODY _ BODY $$BTEND declare (LOCALVARS $$BTBODY $$BTEND)
                                  first (SETQ I.V. (\FIRSTSLOT $$BTBODY))
                                        (SETQ $$BTEND (\LASTSLOT $$BTBODY))
                                  repeatuntil (EQ I.V. $$BTEND) by (\ADDBASE I.V. \BTREEWORDSPERSLOT]
       T)

(I.S.OPR 'inpiecerange NIL '[SUBST (GETDUMMYVAR)
                                   '$$RANGE
                                   '(bind $$PC1 $$PCN $$LENGTH $$RANGE _ BODY
                                       declare (LOCALVARS $$RANGE $$PC1 $$PCN)
                                       first (SETQ $$PC1 (CAR $$RANGE))
                                             (SETQ $$PCN (CADR $$RANGE))
                                             (SETQ $$LENGTH (CADDR $$RANGE))
                                             (SETQ I.V. $$PC1) while I.V.
                                       repeatuntil (EQ I.V. $$PCN) by (NEXTPIECE I.V.]
       T)

[I.S.OPR 'inpieces NIL '(first (SETQ I.V. (OR BODY (GO $$OUT))) by (OR (NEXTPIECE I.V.)
                                                                       (GO $$OUT]
)

(* "END EXPORTED DEFINITIONS")

)

(/DECLAREDATATYPE 'BTREENODE
       '(POINTER FIXP POINTER FIXP POINTER FIXP POINTER FIXP POINTER FIXP POINTER FIXP POINTER FIXP 
               POINTER FIXP BYTE XPOINTER FIXP)
       '((BTREENODE 0 POINTER)
         (BTREENODE 2 FIXP)
         (BTREENODE 4 POINTER)
         (BTREENODE 6 FIXP)
         (BTREENODE 8 POINTER)
         (BTREENODE 10 FIXP)
         (BTREENODE 12 POINTER)
         (BTREENODE 14 FIXP)
         (BTREENODE 16 POINTER)
         (BTREENODE 18 FIXP)
         (BTREENODE 20 POINTER)
         (BTREENODE 22 FIXP)
         (BTREENODE 24 POINTER)
         (BTREENODE 26 FIXP)
         (BTREENODE 28 POINTER)
         (BTREENODE 30 FIXP)
         (BTREENODE 32 (BITS . 7))
         (BTREENODE 34 XPOINTER)
         (BTREENODE 36 FIXP))
       '38)
(DEFINEQ

(\MAKEPCTB
  [LAMBDA (TEXTOBJ FIRSTPIECE DEFAULTLOOKS DEFAULTPARALOOKS) (* ; "Edited  3-Oct-2022 20:40 by rmk")
                                                             (* ; "Edited  2-Sep-2022 17:12 by rmk")
                                                             (* ; "Edited 21-Aug-2022 17:30 by rmk")
                                                             (* ; "Edited 20-Aug-2022 14:55 by rmk")
                                                             (* ; "Edited 10-Aug-2022 00:06 by rmk")
                                                             (* ; "Edited 15-Apr-93 15:48 by jds")
    (LET ((PCTB (create BTREENODE
                       COUNT _ 1
                       TOTLEN _ 0
                       DLEN1 _ 0)))
         (replace (BTREENODE DOWN1) of PCTB
            with (create PIECE
                        PTYPE _ THINSTRING.PTYPE
                        PCONTENTS _ (CONCAT "")
                        PLEN _ 0
                        PTREENODE _ PCTB
                        PLOOKS _ DEFAULTLOOKS
                        PPARALOOKS _ DEFAULTPARALOOKS))
         (freplace (TEXTOBJ LASTPIECE) of TEXTOBJ with (ffetch (BTREENODE DOWN1) of PCTB))
         (freplace (TEXTOBJ PCTB) of TEXTOBJ with PCTB)
         (CL:WHEN FIRSTPIECE                                 (* ; 
                                                          "Convenient for a few initialization calls")
             (\INSERTPIECE FIRSTPIECE NIL TEXTOBJ))
         PCTB])

(\UPDATEPCNODES
  [LAMBDA (PC DELTA TEXTOBJ)                                 (* ; "Edited  1-Sep-2022 16:46 by rmk")
                                                             (* ; "Edited 24-Aug-2022 23:14 by rmk")
                                                             (* ; "Edited 20-Aug-2022 23:26 by rmk")
                                                             (* ; "Edited 19-Aug-2022 16:08 by rmk")
                                                             (* ; "Edited 21-Apr-93 16:09 by jds")

    (* ;; 
    "The size of the text represented by PC has grown by DELTA (negative if text is being deleted).")

    (* ;; "For insertions, this is called by either \INSERTPIECE, if a new piece is being inserted, or by \INSERTCH.EXTEND if the insertion is a string insertion physically adjacent to a previous insertion.")

    (* ;; "It is assumed that PC PLEN and the corresponding DLEN in its node are consistent and correct, this updates the local TOTLEN and then propagates the DELTA upwards to all ancestors.")

    (bind NODE UPWARD first (SETQ NODE (ffetch (PIECE PTREENODE) of PC))
                            (SETQ UPWARD (ffetch (BTREENODE UPWARD) of NODE))
                            (add (ffetch (BTREENODE TOTLEN) of NODE)
                                 DELTA) while UPWARD do (add (ffetch (BTSLOT DLEN)
                                                                of (\FINDSLOT UPWARD NODE))
                                                             DELTA)
                                                        (add (ffetch (BTREENODE TOTLEN) of UPWARD)
                                                             DELTA)
                                                        (SETQ NODE UPWARD)
                                                        (SETQ UPWARD (ffetch (BTREENODE UPWARD)
                                                                        of NODE))
       finally (add (ffetch (TEXTOBJ TEXTLEN) of TEXTOBJ)
                    DELTA)
             (BTVALIDATE '\UPDATEPCNODES "-AFTER" TEXTOBJ])

(\FIRSTPIECE
  [LAMBDA (TEXTOBJ)                                          (* ; "Edited 24-Aug-2022 12:45 by rmk")
                                                             (* ; "Edited 22-Aug-2022 14:44 by rmk")
    (for (NODE _ (ffetch (TEXTOBJ PCTB) of TEXTOBJ)) by (ffetch (BTREENODE DOWN1) of NODE)
       unless (type? BTREENODE NODE) do 

                                 (* ;; "If we don't bottom out in a piece, something else is screwed up.  But we return NIL for the LASTPIECE, which is only there so hold the PREV pointer to the real last piece.")

                                        (RETURN (CL:UNLESS (EQ 'LASTPIECE (fetch (PIECE PCONTENTS)
                                                                             of NODE))
                                                       NODE])

(\DELETETREE
  [LAMBDA (OLD PCNODE)                                       (* ; "Edited  5-Sep-2022 14:24 by rmk")
                                                             (* ; 
                                                        "Edited 21-Mar-95 15:29 by sybalsky:mv:envos")

    (* ;; 
    "Old can be a piece or a node, since its length is taken from the commonly correlated DLEN.")

    (if (EQ 1 (ffetch (BTREENODE COUNT) of PCNODE))
        then 
             (* ;; "OLD was the last child, delete the whole node")

             (\DELETETREE PCNODE (fetch (BTREENODE UPWARD) of PCNODE))
      else 
           (* ;; "Move each of the downs above OLDSLOT forward one slot")

           (UNINTERRUPTABLY
               
               (* ;; "Slide everything after OLD's slot one slot to the left")

               (bind TARGET OLDSLOT OLDLEN (LAST _ (\LASTSLOT PCNODE))
                  first (SETQ OLDSLOT (\FINDSLOT PCNODE OLD))
                        (CL:UNLESS OLDSLOT (HELP "Piece/node not in PCNODE"))
                        (SETQ OLDLEN (ffetch (BTSLOT DLEN) of OLDSLOT))
                        (CL:WHEN (EQ OLDSLOT LAST)           (* ; "Just shrink by one")
                            (\FILLSLOT OLDSLOT NIL 0)
                            (GO $$OUT))
                        (SETQ TARGET OLDSLOT) until (EQ TARGET LAST) do (\MOVESLOT (\NEXTSLOT TARGET)
                                                                               TARGET)
                                                                        (SETQ TARGET (\NEXTSLOT
                                                                                      TARGET))
                  finally 

                        (* ;; 
                  "Make PCNODE consistent with this removal, \DELETEPIECES will fix things up above.")

                        (* ;; "If we recursed up the 1-entry branch above, we ended higher up, and every thing between that dangling piece and a node with at least 2 entries is gone.  Those nodes are still accessible from the piece, and \UPDATEPCNODES will climb up and adjust them needlessly.  But it will eventually get to the ones that matter.  Otherwise, \UPDATEPCNODES would have to worry about nodes vs pieces.")

                        (add (ffetch (BTREENODE COUNT) of PCNODE)
                             -1)))])

(\INSERTTREE
  [LAMBDA (NEW NEXT PCNODE)                                  (* ; "Edited 16-Sep-2022 12:52 by rmk")
                                                             (* ; 
                                                        "Edited 21-Mar-95 15:29 by sybalsky:mv:envos")

    (* ;; "")

    (* ;; "Inserts NEW in front of NEXT in PCNODE.  NEW/NEXT are pieces or nodes. The caller guarantees that PCNODE contains NEXT.")

    (CL:WHEN (EQ \BTREEMAXCOUNT (ffetch (BTREENODE COUNT) of PCNODE))

        (* ;; "If adding would overflow PCNODE, \SPLITTREE returns a new treenode with a slot that NEW will fit into. ")

        (SETQ PCNODE (\SPLITTREE PCNODE NEXT)))

    (* ;; "")

    (LET (NEWLEN (NEXTSLOT (\FINDSLOT PCNODE NEXT)))

         (* ;; "Push NEXT and everything after it back by one, and insert NEW in NEXTSLOT.")

         (* ;; "Bump the count after the search, to open up the trailing slot")

         (add (ffetch (BTREENODE COUNT) of PCNODE)
              1)

         (* ;; "Move the contents of NEXTSLOT and later slots backwards")

         (for (S _ (\LASTSLOT PCNODE))
              PREV by PREV do (SETQ PREV (\PREVSLOT S))
                              (\MOVESLOT PREV S) repeatuntil (EQ PREV NEXTSLOT))

         (* ;; "Insert NEW into the slot now vacated by NEXT.")

         (SETQ NEWLEN (if (type? BTREENODE NEW)
                          then (freplace (BTREENODE UPWARD) of NEW with PCNODE)
                               (ffetch (BTREENODE TOTLEN) of NEW)
                        else (freplace (PIECE PTREENODE) of NEW with PCNODE)
                             (ffetch (PIECE PLEN) of NEW)))
         (\FILLSLOT NEXTSLOT NEW NEWLEN)

         (* ;; "The tree now contains the insert, whether a new piece or a split of an old one.  The counts, PLEN  and DLEN are locally consistent, but it is left to INSERTPIECE to update TOTLEN and propagate length-deltas upwards.  There is no point in doing that in the recursive \SPLITTREE calls.")

         NEW])

(\LASTPIECE
  [LAMBDA (TREE)                                             (* ; "Edited 21-Aug-2022 17:13 by rmk")
                                                             (* ; "Edited 16-Aug-2022 10:16 by rmk")
                                                             (* ; "Edited 14-Apr-93 16:29 by jds")

    (* ;; "Returns the LASTPIECE")

    (bind (CHILD _ TREE) while (type? BTREENODE CHILD) do (SETQ CHILD (ffetch (BTSLOT DOWN)
                                                                         of (\LASTSLOT CHILD)))
       finally (RETURN CHILD])

(\MATCHPCS
  [LAMBDA (NODE)                                             (* ; "Edited 17-Aug-2022 19:03 by rmk")
                                                             (* ; "Edited 15-Aug-2022 23:06 by rmk")
                                                             (* ; "Edited  5-May-93 17:57 by jds")

    (* ;; "Make sure that any downs pointed to by this node point back to this node.")

    (for S DOWN inslots NODE do (SETQ DOWN (ffetch (BTSLOT DOWN) of S))
                                (if (type? PIECE DOWN)
                                    then (freplace (PIECE PTREENODE) of DOWN with NODE)
                                  elseif (type? BTREENODE DOWN)
                                    then (freplace (BTREENODE UPWARD) of DOWN with NODE])

(\SPLITTREE
  [LAMBDA (PCNODE NEXT)                                      (* ; "Edited 16-Sep-2022 12:54 by rmk")
                                                             (* ; 
                                                        "Edited 21-Mar-95 15:26 by sybalsky:mv:envos")

    (* ;; "All the slots of PCNODE are full.   Replace all the items in PCNODE with 2 new nodes, each with half of the original items.  Returns the half that NEXT ended up in, guaranteed to have at least one free slot.  We also guarantee that all of the counts and lengths are correct when this exits, since nothing has actually been added.")

    (* ;; "PREFIXNODE will hold the first half of the entries in PCNODE, SUFFIXNODE will hold the trailing entries (moved to the beginning).  In the end they will be the only items in PCNODE.")

    (LET (PREFIXNODE SUFFIXNODE (HALFCOUNT (FOLDLO (ffetch (BTREENODE COUNT) of PCNODE)
                                                  2))
                (PREFIXTOTLEN 0))
         (SETQ PREFIXNODE (create BTREENODE
                                 COUNT _ HALFCOUNT))

         (* ;; "Move the lower entries of PCNODE across to be the lower entries of the new PREFIXNODE, deleting them from PCNODE. The HALFCOUNT count stops the iteration.")

         (for PRSLOT inslots PREFIXNODE as (PCSLOT _ (\FIRSTSLOT PCNODE)) by (\NEXTSLOT PCSLOT)
            do (\MOVESLOT PCSLOT PRSLOT)
               (add PREFIXTOTLEN (ffetch (BTSLOT DLEN) of PRSLOT)))
         (freplace (BTREENODE TOTLEN) of PREFIXNODE with PREFIXTOTLEN)
         (\MATCHPCS PREFIXNODE)

         (* ;; "PREFIXNODE is now complete. The lower HALFCOUNT entries of PCNODE have also been nuked (refcnts just moved)")

         (* ;; "")

         (* ;; "Move the uppers of PCNODE to the bottom of SUFFIXNODE (= PCNODE right now).")

         (freplace (BTREENODE COUNT) of PCNODE with HALFCOUNT)
                                                             (* ; "Stops the iteration")
         (for SUSLOT inslots PCNODE as (PCSLOT _ (\NTHSLOT PCNODE (ADD1 HALFCOUNT)))
            by (\NEXTSLOT PCSLOT) do (\MOVESLOT PCSLOT SUSLOT))
         (add (ffetch (BTREENODE TOTLEN) of PCNODE)
              (IMINUS PREFIXTOTLEN))

         (* ;; "PCNODE is a candidate suffix node, with adjusted TOTLEN  ")

         (* ;; "")

         (* ;; 
         "Install the two new daughters into the now-empty (because of \MOVESLOT) original PCNODE. ")

         [if (fetch (BTREENODE UPWARD) of PCNODE)
             then 
                  (* ;; "Not the root.  Insert the PREFIXNODE next to the shrunken PCNODE in  PCNODE's parent (and possibly higher up, if the parent is full).  The DLEN of PCNODE in its parent should be consistent with its now-reduced TOTLEN, since at this point the PREFIXNODE entries have been taken out.  \INSERTTREE will add them back in. ")

                  (CL:WHEN NIL
                      (HELP 'NOTROOT (LIST PREFIXNODE PCNODE)))
                  (add (ffetch (BTSLOT DLEN) of (\FINDSLOT (fetch (BTREENODE UPWARD) of PCNODE)
                                                       PCNODE))
                       (IMINUS PREFIXTOTLEN))
                  (SETQ SUFFIXNODE PCNODE)                   (* ; "For the exit search below")
                  (\INSERTTREE PREFIXNODE SUFFIXNODE (fetch (BTREENODE UPWARD) of PCNODE))
           else 
                (* ;; 
  "PCNODE is the root.  Stick in our 2 nodes,  Upper part of bottom half still needs to be emptied. ")

                (SETQ SUFFIXNODE (create BTREENODE using PCNODE))
                (\MATCHPCS SUFFIXNODE)
                (CL:WHEN NIL
                    (HELP 'SPLITTREE-ROOT (LIST PREFIXNODE SUFFIXNODE PCNODE))
                    OK) 

                (* ;; "SUFFIXNODE is now separate and ready to go. Add prefix and suffix to the root")

                (\FILLSLOT (\FIRSTSLOT PCNODE)
                       PREFIXNODE
                       (ffetch (BTREENODE TOTLEN) of PREFIXNODE))
                (freplace (BTREENODE UPWARD) of PREFIXNODE with PCNODE)
                (\FILLSLOT (\NTHSLOT PCNODE 2)
                       SUFFIXNODE
                       (ffetch (BTREENODE TOTLEN) of SUFFIXNODE))
                (freplace (BTREENODE UPWARD) of SUFFIXNODE with PCNODE) 

                (* ;; "Clean out the unused upper slots")

                (for (S _ (\NTHSLOT PCNODE 3)) by (\NEXTSLOT S) bind (LAST _ (\LASTSLOT PCNODE))
                   repeatuntil (EQ S LAST) do (\FILLSLOT S NIL 0))
                (freplace (BTREENODE COUNT) of PCNODE with 2)
                (freplace (BTREENODE TOTLEN) of PCNODE with (IPLUS (ffetch (BTREENODE TOTLEN)
                                                                      of PREFIXNODE)
                                                                   (ffetch (BTREENODE TOTLEN)
                                                                      of SUFFIXNODE]

         (* ;; "")

         (* ;; "Return the node that contains NEXT.  Optimize this search for the frequent case that inserts concatenate at the end")

         (if (find (S _ (\LASTSLOT SUFFIXNODE)) by (\PREVSLOT S) repeatuntil (EQ S (\FIRSTSLOT 
                                                                                          SUFFIXNODE)
                                                                                 )
                suchthat (EQ NEXT (ffetch (BTSLOT DOWN) of S)))
             then SUFFIXNODE
           else PREFIXNODE])

(\PCTOCH
  [LAMBDA (PC)                                               (* ; "Edited 19-Aug-2022 22:58 by rmk")
                                                             (* ; "Edited 18-Aug-2022 13:48 by rmk")
                                                             (* ; "Edited  8-Aug-2022 21:50 by rmk")

    (* ;; "This returns the character number in the text stream of the first character of PC.  Equivalent to mapping through the next chains from the beginning, but only needs to visit the BNODES above and to the left, so more logarithmic than linear.")

    (bind (PCNODE _ (fetch (PIECE PTREENODE) of PC))
          (CHARCOUNT _ 1) while PCNODE do (add CHARCOUNT (for S inslots PCNODE
                                                            until (EQ PC (ffetch (BTSLOT DOWN)
                                                                            of S))
                                                            sum (ffetch (BTSLOT DLEN) of S)))
                                          (SETQ PC PCNODE)
                                          (SETQ PCNODE (fetch (BTREENODE UPWARD) of PCNODE))
       finally (RETURN CHARCOUNT])

(\CHTOPC
  [LAMBDA (CH# TEXTOBJ TELL-PC-START?)                       (* ; "Edited 11-Sep-2022 13:24 by rmk")
                                                             (* ; "Edited 15-Apr-93 16:05 by jds")

    (* ;; "Given a character # in a text object, return a pointer to the piece containing that character, else NIL.")

    (* ;; "The basic algorithm is a logarithmic scan of the B-tree, skipping branches at each level until the branch with CH# is reached.")

    (* ;; "There are 2 acceleration cases:")

    (* ;; "     if CH# is after the current text length, the pseudo LASTPIECE is returned to the caller wo can retrieve its looks and PREV (the piece containing the last actual character.")

    (* ;; "    If the TEXTOBJ contains a HINTPC and CH# is in the range HINTPCSTARTC and HINTPCSTARTCH+PLEN-1, then HINTPC is returned.")

    (* ;; "If TELL-PC-START? is not NIL, sets the free variable START-OF-PIECE to the ch# of the piece's start.")

    (DECLARE (USEDFREE START-OF-PIECE))
    (LET (HINTPC STARTCH)
         (if (IGREATERP CH# (ffetch (TEXTOBJ TEXTLEN) of TEXTOBJ))
             then                                            (* ; 
                                                     "Return NIL instead of last piece, at the end??")
                  (CL:WHEN TELL-PC-START?
                      (SETQ START-OF-PIECE (ADD1 (ffetch (TEXTOBJ TEXTLEN) of TEXTOBJ))))
                  NIL
           elseif (AND (SETQ HINTPC (ffetch (TEXTOBJ HINTPC) of TEXTOBJ))
                       (IGEQ CH# (SETQ STARTCH (ffetch (TEXTOBJ HINTPCSTARTCH#) of TEXTOBJ)))
                       (ILESSP (IDIFFERENCE CH# STARTCH)
                              (PLEN HINTPC)))
             then (CL:WHEN TELL-PC-START? (SETQ START-OF-PIECE STARTCH))
                  HINTPC
           elseif (ILEQ CH# 0)
             then (CL:WHEN TELL-PC-START? (SETQ START-OF-PIECE 0))
                  NIL
           else (bind (NODE _ (ffetch (TEXTOBJ PCTB) of TEXTOBJ))
                      (BASE-CH# _ 1)
                      NBASE-CH# while (type? BTREENODE NODE)
                   do [SETQ NODE (for S inslots NODE
                                    do (if (IGREATERP (SETQ NBASE-CH# (IPLUS BASE-CH#
                                                                             (ffetch (BTSLOT DLEN)
                                                                                of S)))
                                                  CH#)
                                           then (RETURN (ffetch (BTSLOT DOWN) of S))
                                         else (SETQ BASE-CH# NBASE-CH#]
                   finally 

                         (* ;; "Eventually NODE is a piece or NIL")

                         (CL:WHEN TELL-PC-START? (SETQ START-OF-PIECE BASE-CH#))
                         (RETURN NODE])

(\TEDIT.SET-TOTLEN
  [LAMBDA (PCNODE)                                           (* ; "Edited 15-Aug-2022 17:15 by rmk")
                                                             (* ; "Edited  9-May-93 15:40 by jds")

    (* ;; "Fix the TOTLEN field of a node to match the sum of its childrens' lengths")

    (replace (BTREENODE TOTLEN) of PCNODE with (for S inslots PCNODE sum (fetch (BTSLOT DLEN)
                                                                            of S])

(\PIECERANGE
  [LAMBDA (CH# CHLIM TEXTOBJ)                                (* ; "Edited  5-Sep-2022 14:40 by rmk")

    (* ;; "Returns a triple (PC1 PCN LENGTH)  where the first character of PC1 is character CH# in TEXTOBJ and the last character of PCN is character CHLIM-1 in TEXTOBJ.  A prefix of the piece containing CH# may be split off, to provide a suffix PC1 with this alignment.  Likewise, a suffix of the piece containing CHLIM-1 may be split off, to povide a prefix PCN with this alignment.")

    (* ;; "LENGTH is the number of characters in the range, possibly restricted to the text's beginning and end.")

    (* ;; "In essence, this maps the start and length of a selection into a range of corresponding pieces.  The I.S.OPR inpiecerange then iterates over those pieces.")

    (BTVALIDATE '\PIECERANGE 'START TEXTOBJ)
    (CL:WHEN (AND (TYPE? SELECTION CH#)
                  (NULL CHLIM))                              (* ; "For convenience")
        (SETQ CHLIM (ffetch (SELECTION CHLIM) of CH#))
        (SETQ CH# (ffetch (SELECTION CH#) of CH#)))
    (LET (PC1 PCN START-OF-PIECE (TEXTLEN (ffetch (TEXTOBJ TEXTLEN) of TEXTOBJ)))
         (DECLARE (SPECVARS START-OF-PIECE))
         (SETQ CH# (IMIN CH# TEXTLEN))
         (SETQ PC1 (\CHTOPC CH# TEXTOBJ T))
         (CL:UNLESS (IEQP START-OF-PIECE CH#)
             (\SPLITPIECE PC1 (IDIFFERENCE CH# START-OF-PIECE)
                    TEXTOBJ))
         (CL:WHEN (IGREATERP CHLIM TEXTLEN)
             (SETQ CHLIM (ADD1 TEXTLEN)))
         (CL:WHEN (SETQ PCN (\CHTOPC CHLIM TEXTOBJ T))
             (if (EQ PC1 PCN)
                 then 
                      (* ;; "Same piece, split off the suffix, keep the prefix")

                      (SETQ PC1 (SETQ PCN (\SPLITPIECE PCN (IDIFFERENCE CHLIM START-OF-PIECE)
                                                 TEXTOBJ)))
               elseif (IEQP CHLIM START-OF-PIECE)
                 then 
                      (* ;; "CHLIM is the start of a new piece.  Use prevpiece as PCN")

                      (SETQ PCN (PREVPIECE PCN))
               else 
                    (* ;; 
                   "The last+1 isn't the first of a new piece, strip off the suffix, keep the prefix")

                    (SETQ PCN (\SPLITPIECE PCN (IDIFFERENCE CHLIM START-OF-PIECE)
                                     TEXTOBJ))))
         (BTVALIDATE '\PIECERANGE 'END TEXTOBJ)
         (LIST PC1 PCN (IDIFFERENCE CHLIM CH#])
)



(* ; "Debugging ")

(DEFINEQ

(BTVALIDATE
  [LAMBDA (TAG MSG TOBJ)                                     (* ; "Edited  5-Sep-2022 11:43 by rmk")
                                                             (* ; "Edited 29-Aug-2022 12:10 by rmk")
    (DECLARE (USEDFREE TEXTOBJ TSTREAM))
    (CL:WHEN (OR (EQMEMB TAG BTVALIDATETAGS)
                 (EQMEMB 'ALL BTVALIDATETAGS))
        (CHECK-BTREE (OR TOBJ TEXTOBJ TSTREAM)
               (CONCAT TAG " " (CL:IF MSG ""))))])

(CHECK-BTREE
  [LAMBDA (TSTR EMBEDDED)                                    (* ; "Edited  7-Sep-2022 09:43 by rmk")
                                                             (* ; "Edited  4-Sep-2022 16:37 by rmk")
                                                             (* ; "Edited 25-Aug-2022 10:13 by rmk")
    (DECLARE (USEDFREE TSTREAM))
    (if (TEXTSTREAMP TSTR)
      elseif (AND (NULL TSTR)
                  (TEXTSTREAMP TSTREAM))
        then (SETQ TSTR TSTREAM)
      elseif (TEXTOBJ TSTR)
        then (SETQ TSTR (TEXTOBJ TSTR))
      else (ERROR "NOT A TEXTSTREAM" TSTR))
    (LET (DEPTHHIST COUNTHIST PLENHIST (NNODES 0)
                (NPIECES 0)
                (TEXTOBJ (TEXTOBJ TSTR))
                LASTPIECE)
         (DECLARE (SPECVARS DEPTHHIST COUNTHIST NNODES NPIECES PLENHIST TEXTOBJ LASTPIECE))
         (SETQ LASTPIECE (fetch (TEXTOBJ LASTPIECE) of TEXTOBJ))
         (CHECK-BTREE1 (fetch (TEXTOBJ PCTB) of TEXTOBJ)
                0 NIL)
         (for (PC _ (\FIRSTPIECE TEXTOBJ)) while PC by (NEXTPIECE PC)
            do (SELECTC (PTYPE PC)
                   (FILE.PTYPES (CL:UNLESS (STREAMP (PCONTENTS PC))
                                       (HELP "FILE PIECE WITHOUT A STREAM" PC)))
                   (STRING.PTYPES (CL:UNLESS (STRINGP (PCONTENTS PC))
                                         (HELP "STRING PIECE WITHOUT A STRING" PC)))
                   (OBJECT.PTYPE (CL:UNLESS (IMAGEOBJP (PCONTENTS PC))
                                        (HELP "OBJECT PIECE WITHOUT ANOBJECT" PC)))
                   NIL))
         (CL:WHEN (AND (ffetch (TEXTOBJ HINTPC) of TEXTOBJ)
                       (ffetch (TEXTOBJ HINTPCSTARTCH#) of TEXTOBJ))
             (CL:UNLESS (IEQP (ffetch (TEXTOBJ HINTPCSTARTCH#) of TEXTOBJ)
                              (\PCTOCH (ffetch (TEXTOBJ HINTPC) of TEXTOBJ)))
                 [HELP "HINTPC IS NOT VALID" (LIST (ffetch (TEXTOBJ HINTPC) of TEXTOBJ)
                                                   (ffetch (TEXTOBJ HINTPCSTARTCH#) of TEXTOBJ)
                                                   (\PCTOCH (ffetch (TEXTOBJ HINTPC) of TEXTOBJ]))
         (CL:UNLESS EMBEDDED
             (CL:WHEN TEXTOBJ
                 (CL:UNLESS (IEQP (fetch (TEXTOBJ TEXTLEN) of TEXTOBJ)
                                  (for S inslots (fetch (TEXTOBJ PCTB) of TEXTOBJ)
                                     sum (fetch (BTSLOT DLEN) of S)))
                        (HELP "TEXTLEN IS INCONSISTENT" TSTR)))
             (SETQ DEPTHHIST (SORT DEPTHHIST T))
             (SETQ COUNTHIST (SORT COUNTHIST T))
             (SETQ PLENHIST (SORT PLENHIST T))
             (PRINTOUT T "Number of nodes: " NNODES T "Number of pieces: " NPIECES T 
                    "Minimum depth: " (CAAR DEPTHHIST)
                    T "Maximum depth: " (CAAR (LAST DEPTHHIST))
                    T "Average depth: " .F3.1 (FQUOTIENT (for DH in DEPTHHIST
                                                            sum (TIMES (CAR DH)
                                                                       (CDR DH)))
                                                     NPIECES)
                    T "Maximum count: " (CAAR (LAST COUNTHIST))
                    T "Average count: " .F1.2 (FQUOTIENT (for CH in COUNTHIST
                                                            sum (TIMES (CAR CH)
                                                                       (CDR CH)))
                                                     NNODES)
                    T "Average PLEN: " .F5.1 (FQUOTIENT (for PLH in PLENHIST
                                                           sum (TIMES (CAR PLH)
                                                                      (CDR PLH)))
                                                    NPIECES)
                    T "Maximum PLEN: " .I3 (CAAR (LAST PLENHIST))
                    T))
         'VALID])

(CHECK-BTREE1
  [LAMBDA (NODE DEPTH PARENT)                                (* ; "Edited  1-Sep-2022 09:49 by rmk")
                                                             (* ; "Edited 25-Aug-2022 12:53 by rmk")
                                                             (* ; "Edited 21-Aug-2022 16:46 by rmk")

    (* ;; 
  "Returns the TOTLEN/PLEN of NODE, after verifying that all of the nodes underneath are consistent.")

    (DECLARE (USEDFREE DEPTHHIST COUNTHIST PLENHIST NNODES NPIECES TEXTOBJ LASTPIECE))
    (ADD DEPTH 1)
    (if (type? PIECE NODE)
        then [if (EQ NODE LASTPIECE)
                 then (CL:WHEN (AND (PREVPIECE LASTPIECE)
                                    (NEXTPIECE (PREVPIECE LASTPIECE)))
                             (HELP "(NEXT (PPREV of LASTPIECE is not NULL" LASTPIECE))
               else (CL:UNLESS (IGEQ (PLEN NODE)
                                     0)
                           (HELP "NEGATIVE PLEN" NODE))
                    (CL:UNLESS (OR (NEXTPIECE NODE)
                                   (EQ NODE (PREVPIECE LASTPIECE)))
                           (HELP "PIECE with no NEXT is not PREV of LASTPIECE" NODE))
                    (CL:UNLESS (EQ PARENT (fetch (PIECE PTREENODE) of NODE))
                           (HELP "PIECE WITH WRONG PTREENODE" NODE))
                    (CL:WHEN (PREVPIECE NODE)
                        (CL:UNLESS (OR (EQ NODE (NEXTPIECE (PREVPIECE NODE)))
                                       (AND (NULL (NEXTPIECE (PREVPIECE NODE)))
                                            (EQ NODE LASTPIECE)))
                               (HELP "PREVPIECE IS NOT CONSISTENT" NODE)))
                    (CL:WHEN (OR (NEXTPIECE NODE)
                                 LASTPIECE)
                        (CL:UNLESS (EQ NODE (PREVPIECE (OR (NEXTPIECE NODE)
                                                           LASTPIECE)))
                               (HELP "NEXTPIECE IS NOT CONSISTENT" NODE)))]
             (add NPIECES 1)
             (add [CDR (OR (SASSOC DEPTH DEPTHHIST)
                           (CAR (PUSH DEPTHHIST (CONS DEPTH 0]
                  1)
             (add [CDR (OR (ASSOC (fetch (PIECE PLEN) of NODE)
                                  PLENHIST)
                           (CAR (PUSH PLENHIST (CONS (PLEN NODE)
                                                     0]
                  1)
             (PLEN NODE)
      else (CL:UNLESS (EQ PARENT (fetch (BTREENODE UPWARD) of NODE))
                  (HELP "NODE WITH WRONG UPWARD" NODE))
           (add NNODES 1)
           (add [CDR (OR (ASSOC (fetch (BTREENODE COUNT) of NODE)
                                COUNTHIST)
                         (CAR (PUSH COUNTHIST (CONS (fetch (BTREENODE COUNT) of NODE)
                                                    0]
                1)
           (for I S from (ADD1 (fetch (BTREENODE COUNT) of NODE)) to \BTREEMAXCOUNT
              eachtime (SETQ S (\NTHSLOT NODE I)) unless (AND (NULL (fetch (BTSLOT DOWN) of S))
                                                              (EQ 0 (fetch (BTSLOT DLEN) of S)))
              do (HELP "UPPER NODE ENTRIES ARE NOT EMPTY" NODE))
           (for S DLEN CHECKLEN inslots NODE sum (SETQ DLEN (fetch (BTSLOT DLEN) of S))
                                                 (CL:UNLESS (IGEQ DLEN 0)
                                                        (HELP "NEGATIVE DLEN" NODE))
                                                 (SETQ CHECKLEN (CHECK-BTREE1 (fetch (BTSLOT DOWN)
                                                                                 of S)
                                                                       DEPTH NODE))
                                                 (CL:UNLESS (IEQP DLEN CHECKLEN)
                                                     (HELP "MISMATCHING DLEN" (LIST NODE DLEN 
                                                                                    CHECKLEN)))
                                                 DLEN
              finally (CL:UNLESS (IEQP (fetch (BTREENODE TOTLEN) of NODE)
                                       $$VAL)
                          (HELP "MISMATCHING TOTLEN" (LIST NODE (fetch (BTREENODE TOTLEN)
                                                                   of NODE)
                                                           $$VAL)))])
)

(RPAQ? BTVALIDATETAGS )
(DECLARE%: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS BTVALIDATETAGS)
)
(DECLARE%: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS 

(ADDTOVAR NLAMA )

(ADDTOVAR NLAML )

(ADDTOVAR LAMA )
)
(DECLARE%: DONTCOPY
  (FILEMAP (NIL (8012 32078 (\MAKEPCTB 8022 . 9618) (\UPDATEPCNODES 9620 . 11841) (\FIRSTPIECE 11843 . 
12721) (\DELETETREE 12723 . 15197) (\INSERTTREE 15199 . 17347) (\LASTPIECE 17349 . 17977) (\MATCHPCS 
17979 . 18848) (\SPLITTREE 18850 . 24710) (\PCTOCH 24712 . 25970) (\CHTOPC 25972 . 28987) (
\TEDIT.SET-TOTLEN 28989 . 29529) (\PIECERANGE 29531 . 32076)) (32106 41351 (BTVALIDATE 32116 . 32588) 
(CHECK-BTREE 32590 . 36726) (CHECK-BTREE1 36728 . 41349)))))
STOP
