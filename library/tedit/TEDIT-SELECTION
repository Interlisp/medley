(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)

(FILECREATED "15-Mar-2023 22:05:33" {WMEDLEY}<library>tedit>TEDIT-SELECTION.;175 122317 

      :CHANGES-TO (FNS \FIXSEL \TEDIT.FIXINSSEL)

      :PREVIOUS-DATE "12-Mar-2023 11:12:07" {WMEDLEY}<library>tedit>TEDIT-SELECTION.;168)


(PRETTYCOMPRINT TEDIT-SELECTIONCOMS)

(RPAQQ TEDIT-SELECTIONCOMS
       ([DECLARE%: EVAL@COMPILE DONTCOPY (MACROS WITHINLINEP)
               (EXPORT (RECORDS SELECTION)
                      (CONSTANTS (COPYSELSHADE 30583)
                             (COPYLOOKSSELSHADE 30583)
                             (EDITMOVESHADE -1)
                             (EDITGRAY 32800]
        (INITRECORDS SELECTION)
        (FNS TEDIT.SEL.AS.STRING TEDIT.SELECTED.PIECES \TEDIT.FIND.FIRST.LINE \TEDIT.FIND.LAST.LINE 
             \TEDIT.FIND.OVERLAPPING.LINE \TEDIT.FIND.PROTECTED.END \TEDIT.FIND.PROTECTED.START 
             \TEDIT.WORD.BOUND)
        (INITVARS (TEDIT.EXTEND.PENDING.DELETE T))
        (FNS \CREATE.TEDIT.SELECTION \CREATE.TEDIT.SHIFTEDSELECTION \CREATE.TEDIT.MOVESELECTION 
             \CREATE.TEDIT.DELETESELECTION)
                                                             (* ; 
                                                         "Added by yabu.fx, for LOADUP without DWIM.")
        (VARS (TEDIT.SELECTION (\CREATE.TEDIT.SELECTION))
                                                             (* ; 
                                                             "Original was %"(create SELECTION)%".")
              (TEDIT.SCRATCHSELECTION (\CREATE.TEDIT.SELECTION))
                                                             (* ; 
                                                             "Original was %"(create SELECTION)%".")
              (TEDIT.SHIFTEDSELECTION (\CREATE.TEDIT.SHIFTEDSELECTION))
                                                             (* ; 
                                                "Original was %"(create SELECTION HASCARET _ NIL)%".")
              (TEDIT.COPYLOOKSSELECTION (\CREATE.TEDIT.SHIFTEDSELECTION))
                                                             (* ; 
                                                "Original was %"(create SELECTION HASCARET _ NIL)%".")
              (TEDIT.MOVESELECTION (\CREATE.TEDIT.MOVESELECTION))
                                                             (* ; 
                              "Original was %"(CREATE SELECTION HASCARET _ NIL HOWHEIGHT _ 32767)%".")
              (TEDIT.DELETESELECTION (\CREATE.TEDIT.DELETESELECTION))
                                                             (* ; 
             "Original was %"(CREATE SELECTION HOW _ BLACKSHADE HASCARET _ NIL HOWHEIGHT _ 32767)%".")
                                                             (* ; 
                                                       "Changed by yabu.fx, for LOADUP without DWIM.")
              (TEDIT.SELPENDING NIL))
        (GLOBALVARS TEDIT.SELECTION TEDIT.SCRATCHSELECTION TEDIT.MOVESELECTION TEDIT.SHIFTEDSELECTION
               TEDIT.COPYLOOKSSELECTION TEDIT.DELETESELECTION TEDIT.SELPENDING 
               TEDIT.EXTEND.PENDING.DELETE)
        (COMS                                                (* ; "Selection manipulating code")
              (FNS TEDIT.EXTEND.SEL TEDIT.SELECT TEDIT.SCAN.LINE \TEDIT.SCAN.LINE.WORD 
                   TEDIT.SELECT.LINE.SCANNER \TEDIT.SELECT.OBJECT \PARALINES)
              (FNS \FIXSEL \TEDIT.FIXDELSEL \TEDIT.FIXINSSEL \TEDIT.FIXSELS \CHTOX)
              (FNS TEDIT.RESET.EXTEND.PENDING.DELETE \TEDIT.SET.SEL.LOOKS)
              (FNS \SHOWSEL \SHOWSEL.HILIGHT \TEDIT.UPDATE.SHOWSEL \TEDIT.SHOWSELS 
                   \TEDIT.REFRESH.SHOWSEL)
              (FNS \COPYSEL \TEDIT.SEL.CHANGED?))
        (COMS 
              (* ;; "User entries to the selection code")

              (FNS TEDIT.GETPOINT TEDIT.GETSEL TEDIT.MAKESEL TEDIT.SCANSEL TEDIT.SET.SEL.LOOKS 
                   TEDIT.SETSEL TEDIT.SHOWSEL))))
(DECLARE%: EVAL@COMPILE DONTCOPY 
(DECLARE%: EVAL@COMPILE 

(PUTPROPS WITHINLINEP MACRO [OPENLAMBDA (CHNO LINE)
                              (AND (IGEQ CHNO (fetch (LINEDESCRIPTOR LCHAR1) of LINE))
                                   (ILEQ CHNO (fetch (LINEDESCRIPTOR LCHARLIM) of LINE])
)

(* "FOLLOWING DEFINITIONS EXPORTED")(DECLARE%: EVAL@COMPILE

(DATATYPE SELECTION 
          (
           (* ;; "Description of a piece of selected text for TEdit.  Text has to be selected before it can be operated on by the user.")

           Y0                                                (* ; 
                                                             "Y value of topmost line of selection")
           X0                                                (* ; 
                                                "X value of left edge of selection on the first line")
           NIL                                               (* ; 
                                               "Was DX: Width of the selection, if it's on one line.")
           CH#                                               (* ; 
                                                             "CH# of the first selected character")
           XLIM                                              (* ; 
                                  "X value of right edge of last selected character on the last line")
           CHLIM                                             (* ; "Last character is at (SUB1 CHLIM)")
           DCH                                               (* ; 
                                 "# of characters selected (can be zero, for empty/point selection.)")
           L1                                                (* ; 
                              "-> line descriptor for the line where the first selected character is")
           LN                                                (* ; 
                            "-> line descriptor for the line which contains the end of the selection")
           YLIM                                              (* ; 
                                          "Y value of the bottom of the line that ends the selection")
           POINT                                             (* ; 
                                             "Which end should the caret appear at?  (LEFT or RIGHT)")
           (SET FLAG)                                        (* ; 
                                                           "T if this selection is real;  NIL if not")
           (SELTEXTOBJ FULLXPOINTER)                         (* ; 
                                                           "TEXTOBJ that describes the selected text")
           SELKIND                                           (* ; 
                                              "What kind of selection?  CHAR or WORD or LINE or PARA")
           HOW                                               (* ; 
                                                             "SHADE used to highlight this selection")
           HOWHEIGHT                                         (* ; 
                             "Height of the highlight (1 usually, full line for delete selection...)")
           (HASCARET FLAG)                                   (* ; 
                                                    "T if there should be a caret for this selection")
           SELOBJ                                            (* ; 
                                               "If this selection is inside an object, which object?")
           (ONFLG FLAG)                                      (* ; 
                                          "T if the selection is highlighted on the screen, else NIL")
           SELOBJINFO                                        (* ; 
                         "A Place for the selected object to put info about selection inside itself.")
           )
          SET _ NIL HOW _ BLACKSHADE HOWHEIGHT _ 1 HASCARET _ T Y0 _ 0 X0 _ 0 POINT _ 'LEFT L1 _
          (LIST NIL)
          LN _ (LIST NIL))
)

(/DECLAREDATATYPE 'SELECTION
       '(POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER FLAG
               FULLXPOINTER POINTER POINTER POINTER FLAG POINTER FLAG POINTER)
       '((SELECTION 0 POINTER)
         (SELECTION 2 POINTER)
         (SELECTION 4 POINTER)
         (SELECTION 6 POINTER)
         (SELECTION 8 POINTER)
         (SELECTION 10 POINTER)
         (SELECTION 12 POINTER)
         (SELECTION 14 POINTER)
         (SELECTION 16 POINTER)
         (SELECTION 18 POINTER)
         (SELECTION 20 POINTER)
         (SELECTION 20 (FLAGBITS . 0))
         (SELECTION 22 FULLXPOINTER)
         (SELECTION 24 POINTER)
         (SELECTION 26 POINTER)
         (SELECTION 28 POINTER)
         (SELECTION 28 (FLAGBITS . 0))
         (SELECTION 30 POINTER)
         (SELECTION 30 (FLAGBITS . 0))
         (SELECTION 32 POINTER))
       '34)
(DECLARE%: EVAL@COMPILE 

(RPAQQ COPYSELSHADE 30583)

(RPAQQ COPYLOOKSSELSHADE 30583)

(RPAQQ EDITMOVESHADE -1)

(RPAQQ EDITGRAY 32800)


(CONSTANTS (COPYSELSHADE 30583)
       (COPYLOOKSSELSHADE 30583)
       (EDITMOVESHADE -1)
       (EDITGRAY 32800))
)

(* "END EXPORTED DEFINITIONS")

)

(/DECLAREDATATYPE 'SELECTION
       '(POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER FLAG
               FULLXPOINTER POINTER POINTER POINTER FLAG POINTER FLAG POINTER)
       '((SELECTION 0 POINTER)
         (SELECTION 2 POINTER)
         (SELECTION 4 POINTER)
         (SELECTION 6 POINTER)
         (SELECTION 8 POINTER)
         (SELECTION 10 POINTER)
         (SELECTION 12 POINTER)
         (SELECTION 14 POINTER)
         (SELECTION 16 POINTER)
         (SELECTION 18 POINTER)
         (SELECTION 20 POINTER)
         (SELECTION 20 (FLAGBITS . 0))
         (SELECTION 22 FULLXPOINTER)
         (SELECTION 24 POINTER)
         (SELECTION 26 POINTER)
         (SELECTION 28 POINTER)
         (SELECTION 28 (FLAGBITS . 0))
         (SELECTION 30 POINTER)
         (SELECTION 30 (FLAGBITS . 0))
         (SELECTION 32 POINTER))
       '34)
(DEFINEQ

(TEDIT.SEL.AS.STRING
  [LAMBDA (TSTREAM SEL)                                      (* ; "Edited  8-Sep-2022 23:35 by rmk")
                                                             (* ; "Edited 22-Apr-93 16:44 by jds")

    (* ;; "RMK:  WHAT IF THE STREAM CONTAINS AN OBJECT?")

    (* ;; 
    "Given a text stream, go to the TEXTOBJ, get the current selection, and return it as a string.")

    (CL:UNLESS SEL
        (SETQ SEL (fetch (TEXTOBJ SEL) of (fetch (TEXTSTREAM TEXTOBJ) of TSTREAM))))
    (SETQ TSTREAM (TEXTSTREAM TSTREAM))
    (LET (RESULT (LEN (fetch (SELECTION DCH) of SEL)))
         (COND
            ((ZEROP LEN)                                     (* ; 
                                              "There is no selection, or it's zero-width.  Return ''")
             (CONCAT ""))
            (T (SETQ RESULT (ALLOCSTRING LEN (CHARCODE SPACE)))
                                                             (* ; "The resulting string")
               (\TEXTSETFILEPTR TSTREAM (SUB1 (fetch (SELECTION CH#) of SEL)))
                                                             (* ; 
                                               "Starting point for the string is start of selection.")
               (for I from 1 to LEN do (RPLCHARCODE RESULT I (BIN TSTREAM)))
               RESULT])

(TEDIT.SELECTED.PIECES
  [LAMBDA (TEXTOBJ SEL PIECEMAPFN FNARG1 FNARG2)             (* ; "Edited 10-Feb-2023 17:40 by rmk")
                                                             (* ; "Edited 22-Oct-2022 15:12 by rmk")
                                                             (* ; "Edited  9-Oct-2022 12:12 by rmk")
                                                             (* ; "Edited  7-Sep-2022 23:04 by rmk")
                                                             (* ; "Edited  5-Sep-2022 14:41 by rmk")
                                                             (* ; "Edited 20-Apr-93 17:06 by jds")

    (* ;; "Create a list of pieces corresponding to the selection;  if FNARG, apply it to each piece, and use the result as the copy of the piece")

    (CL:UNLESS (ZEROP (fetch (TEXTOBJ TEXTLEN) of TEXTOBJ))
        (for PC inpiecerange (\PIECERANGE SEL NIL TEXTOBJ)
           collect (CL:IF PIECEMAPFN
                       (APPLY* PIECEMAPFN PC TEXTOBJ FNARG1 FNARG2)
                       PC)))])

(\TEDIT.FIND.FIRST.LINE
  [LAMBDA (TEXTOBJ WHEIGHT CH# WINDOW)                       (* ; "Edited 24-Feb-2023 00:10 by rmk")
                                                             (* ; "Edited 22-Feb-2023 09:00 by rmk")
                                                             (* ; "Edited 16-Feb-2023 00:06 by rmk")
                                                             (* ; "Edited  6-Feb-2023 21:49 by rmk")
                                                             (* ; "Edited  8-Sep-2022 21:02 by rmk")
                                                             (* ; "Edited 30-May-91 23:02 by jds")

    (* ;; "Find the first line to be displayed, given that it must include character CH#")

    (PROG ((LINES (OR (AND WINDOW (fetch (TEXTWINDOW WLINES) of WINDOW))
                      (fetch (TEXTOBJ LINES) of TEXTOBJ)))
           (WWIDTH (fetch (TEXTOBJ WRIGHT) of TEXTOBJ))
           LINE CHNO)
          (CL:WHEN (ZEROP (fetch (TEXTOBJ TEXTLEN) of TEXTOBJ))
                                                             (* ; 
                                                            "If there's no text, force an empty line")
              (replace (LINEDESCRIPTOR NEXTLINE) of LINES with NIL)
              (RETURN LINES))
          (CL:WHEN (IGREATERP CH# (fetch (TEXTOBJ TEXTLEN) of TEXTOBJ))
                                                             (* ; 
                                                  "If there's no text on the screen, just return nil")
              (RETURN NIL))
          [if (fetch (TEXTOBJ FORMATTEDP) of TEXTOBJ)
              then 
                   (* ;; "For a para-formatted object, back up to the prior para bound.")

                   (SETQ CHNO (CAR (\TEDIT.PARABOUNDS TEXTOBJ CH#)))
            else 
                 (* ;; "Otherwise, move back thru the text until we find a for-sure line break")

                 [SETQ CHNO (find I (TSTREAM _ (fetch (TEXTOBJ STREAMHINT) of TEXTOBJ))
                               from (SUB1 CH#) to 2 by -1 first (\TEXTSETFILEPTR TSTREAM (SUB1 CH#))
                                                                
                                                             (* ; 
                                                      "Because fileptrs are one back from characters")
                               suchthat (EQ (CHARCODE EOL)
                                            (\BACKBIN TSTREAM]
                 (SETQ CHNO (if (NULL CHNO)
                                then 
                                     (* ;; 
                     "If we didn't find a preceding EOL, move forward from the beginning of the file")

                                     1
                              elseif (IEQP CHNO CH#)
                                then 
                                     (* ;; 
                            "If we landed on an EOL first shot, let's try moving forward from there.")

                                     CH#
                              else 
                                   (* ;; "Otherwise, skip the EOL we passed over")

                                   (ADD1 CHNO]
          [repeatwhile (ILEQ CHNO CH#) do 
                                          (* ;; "Starting from the known line break, format forward until we find the line which has the right CH# in it")

                                          (SETQ LINE (\FORMATLINE TEXTOBJ CHNO))
                                          (replace (LINEDESCRIPTOR YBOT) of LINE with WHEIGHT)
                                          (replace (LINEDESCRIPTOR NEXTLINE) of LINES with LINE)
                                          (replace (LINEDESCRIPTOR PREVLINE) of LINE with LINES)
                                          (SETQ LINES LINE)
                                          (SETQ CHNO (ADD1 (fetch (LINEDESCRIPTOR LCHARLIM)
                                                              of LINE]
          (RETURN LINE])

(\TEDIT.FIND.LAST.LINE
  [LAMBDA (TEXTOBJ LINES)                                    (* ; "Edited 30-May-91 23:02 by jds")

         (* Among the line descriptors in LINES, find the last one on the screen;
         then return it.)

    (OR LINES (SETQ LINES (fetch (TEXTOBJ LINES) of TEXTOBJ)))
                                                             (* Make sure a list of line 
                                                             descriptors is specified.)
    (COND
       ((fetch (TEXTOBJ \WINDOW) of TEXTOBJ)                 (* If there's no window, return NIL.)
        (bind (OLINE _ LINES)
              (LINE _ LINES)
              (CURY _ (fetch (LINEDESCRIPTOR YBOT) of LINES))
           while (AND LINE (IGEQ (fetch (LINEDESCRIPTOR YBOT) of LINE)
                                 (fetch (TEXTOBJ WBOTTOM) of TEXTOBJ)))
           do                                                (* Find the lowest line above screen 
                                                             bottom, and put it in OLINE.)
              (SETQ OLINE LINE)
              (SETQ LINE (fetch (LINEDESCRIPTOR NEXTLINE) of LINE)) finally (RETURN OLINE)))
       (T NIL])

(\TEDIT.FIND.OVERLAPPING.LINE
  [LAMBDA (LINES Y)                                          (* ; "Edited 30-May-91 22:57 by jds")
    (while LINES do (COND
                       ((ILEQ (fetch (LINEDESCRIPTOR YBOT) of LINES)
                              Y)
                        (RETURN LINES))
                       (T (SETQ LINES (fetch (LINEDESCRIPTOR NEXTLINE) of LINES])

(\TEDIT.FIND.PROTECTED.END
  [LAMBDA (TEXTOBJ CH# LIMITCH#)                             (* ; "Edited 23-Oct-2022 17:44 by rmk")
                                                             (* ; "Edited  5-Sep-2022 15:31 by rmk")
                                                             (* ; "Edited 22-Aug-2022 13:21 by rmk")
                                                             (* ; "Edited 18-Apr-93 23:49 by jds")

    (* ;; "Starting from a CH# in a selectable region, find the CH# of the last selectable character following that.  This is used to limit selections to unprotected text, and to prevent selection of the protected text between tow unprotected areas.")

    (* ;; "If LIMITCH# is given, the search will stop there.")

    (bind (OURLIMIT _ (IMIN (OR LIMITCH# (fetch (TEXTOBJ TEXTLEN) of TEXTOBJ))
                            (fetch (TEXTOBJ TEXTLEN) of TEXTOBJ)))
          START-OF-PIECE PC first (SETQ PC (\CHTOPC CH# TEXTOBJ T)) while PC
       do 
          (* ;; "Move forward thru the pieces of the document, looking for one that contains protected text.  If that comes before the end of the region we're interested in, tell the caller about the earlier end to selectable text.")

          [COND
             ((IGREATERP START-OF-PIECE OURLIMIT)            (* ; 
                         "We've passed the limit, so it's time to give up.  Just return the LIMITCH#")
              (RETURN OURLIMIT))
             ((fetch (CHARLOOKS CLPROTECTED) of (PLOOKS PC))

              (* ;; "We've found the beginning of a protected region -- i.e., the end of the selectable region.  Tell the caller about it.")

              (RETURN (SUB1 START-OF-PIECE]
          (add START-OF-PIECE (PLEN PC))
          (SETQ PC (NEXTPIECE PC)) finally (RETURN (fetch (TEXTOBJ TEXTLEN) of TEXTOBJ])

(\TEDIT.FIND.PROTECTED.START
  [LAMBDA (TEXTOBJ CH# LIMITCH#)                             (* ; "Edited  4-Feb-2023 10:23 by rmk")
                                                             (* ; "Edited 23-Oct-2022 16:20 by rmk")
                                                             (* ; "Edited  2-Sep-2022 15:26 by rmk")
                                                             (* ; "Edited 22-Aug-2022 13:20 by rmk")
                                                             (* ; "Edited 30-Apr-93 01:39 by jds")

    (* ;; "Starting from a CH# in a selectable region, find the CH# of the earliest contiguously-selectable character preceding that.  This is used to limit selections to unprotected text, and to prevent selection of the protected text between two unprotected areas.")

    (* ;; "Will stop looking when it passes LIMITCH#, or at the beginning of the document.")

    (bind (OURLIMIT _ (OR LIMITCH# 1))
          PC START-OF-PIECE declare (SPECVARS START-OF-PIECE)
       first 
             (* ;; 
          "RMK: Not sure about the double call.  NIL on the first one is beyond the end of the text?")

             (SETQ PC (OR (\CHTOPC CH# TEXTOBJ T)
                          (\CHTOPC (SUB1 START-OF-PIECE)
                                 TEXTOBJ T))) while PC do [COND
                                                             ((ILEQ START-OF-PIECE OURLIMIT)
                                                             (* ; 
          "If he specified a LIMITCH#, and we have passed it, stop bothering and return the LIMITCH#")
                                                              (RETURN OURLIMIT))
                                                             ((fetch (CHARLOOKS CLPROTECTED)
                                                                 of (PLOOKS PC))

                                        (* ;; "We hit a PROTECTED piece of text.  This is the place to stop.  Return the CH# just AFTER the protected text we found.")

                                                              (RETURN (IPLUS START-OF-PIECE
                                                                             (PLEN PC]
                                                          (SETQ PC (PREVPIECE PC))
                                                          (add START-OF-PIECE (IMINUS (PLEN PC])

(\TEDIT.WORD.BOUND
  [LAMBDA (TEXTOBJ PREVCH CH)                                (* ; "Edited 27-Sep-2022 23:54 by rmk")
                                                             (* ; "Edited 25-Sep-2022 23:48 by rmk")
                                                             (* ; "Edited 30-May-91 23:02 by jds")
    (CL:WHEN (AND (FIXP PREVCH)
                  (FIXP CH))
        (LET [(READSA (fetch READSA of (OR (fetch (TEXTOBJ TXTWTBL) of TEXTOBJ)
                                           TEDIT.WORDBOUND.READTABLE]
             (NEQ (\SYNCODE READSA PREVCH)
                  (\SYNCODE READSA CH))))])
)

(RPAQ? TEDIT.EXTEND.PENDING.DELETE T)
(DEFINEQ

(\CREATE.TEDIT.SELECTION
  [LAMBDA NIL
    (create SELECTION])

(\CREATE.TEDIT.SHIFTEDSELECTION
  [LAMBDA NIL
    (create SELECTION
           HASCARET _ NIL])

(\CREATE.TEDIT.MOVESELECTION
  [LAMBDA NIL
    (CREATE SELECTION
           HASCARET _ NIL
           HOWHEIGHT _ 32767])

(\CREATE.TEDIT.DELETESELECTION
  [LAMBDA NIL
    (CREATE SELECTION
           HOW _ BLACKSHADE
           HASCARET _ NIL
           HOWHEIGHT _ 32767])
)



(* ; "Added by yabu.fx, for LOADUP without DWIM.")


(RPAQ TEDIT.SELECTION (\CREATE.TEDIT.SELECTION))

(RPAQ TEDIT.SCRATCHSELECTION (\CREATE.TEDIT.SELECTION))

(RPAQ TEDIT.SHIFTEDSELECTION (\CREATE.TEDIT.SHIFTEDSELECTION))

(RPAQ TEDIT.COPYLOOKSSELECTION (\CREATE.TEDIT.SHIFTEDSELECTION))

(RPAQ TEDIT.MOVESELECTION (\CREATE.TEDIT.MOVESELECTION))

(RPAQ TEDIT.DELETESELECTION (\CREATE.TEDIT.DELETESELECTION))

(RPAQQ TEDIT.SELPENDING NIL)
(DECLARE%: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS TEDIT.SELECTION TEDIT.SCRATCHSELECTION TEDIT.MOVESELECTION TEDIT.SHIFTEDSELECTION 
       TEDIT.COPYLOOKSSELECTION TEDIT.DELETESELECTION TEDIT.SELPENDING TEDIT.EXTEND.PENDING.DELETE)
)



(* ; "Selection manipulating code")

(DEFINEQ

(TEDIT.EXTEND.SEL
  [LAMBDA (X Y OSEL TEXTOBJ SELOPERATION SELWINDOW)          (* ; "Edited  2-Mar-2023 14:57 by rmk")
                                                             (* ; "Edited  6-Feb-2023 15:50 by rmk")
                                                             (* ; "Edited  4-Feb-2023 23:20 by rmk")
                                                             (* ; "Edited  7-Nov-2022 23:12 by rmk")
                                                             (* ; "Edited  5-Nov-2022 11:42 by rmk")
                                                             (* ; "Edited 19-Apr-93 13:49 by jds")

    (* ;; "Note:  CHLIM is one past the last character, hence ADD1/SUB1 in some places below.")

    (* ;; 
    "Gather a new selected character, and extend OSEL to include it.  Return the extended selection.")

    (PROG (NPOINT SETOSELFLG FIXUPNEEDED (NEWSEL (TEDIT.SELECT X Y TEXTOBJ (SELECTQ (fetch
                                                                                     (SELECTION
                                                                                      SELKIND)
                                                                                       of OSEL)
                                                                               ((LINE PARA) 
                                                                                    'LINE)
                                                                               ((WORD CHAR) 
                                                                                    'TEXT)
                                                                               'TEXT)
                                                        (OR (EQ (fetch (SELECTION SELKIND)
                                                                   of OSEL)
                                                                'WORD)
                                                            (EQ (fetch (SELECTION SELKIND)
                                                                   of OSEL)
                                                                'PARA))
                                                        SELOPERATION SELWINDOW T)))
          (CL:WHEN (ZEROP (fetch (TEXTOBJ TEXTLEN) of TEXTOBJ))
                                                             (* ; 
                                              "No sense in extending a selection if there's no text!")
              (RETURN NEWSEL))
          (CL:UNLESS (AND NEWSEL (fetch (SELECTION SET) of NEWSEL))
                                                             (* ; "No new selection, return OSEL")
              (RETURN OSEL))
          (\TEDIT.SET.SEL.LOOKS NEWSEL SELOPERATION)

     (* ;; "Make the new selection be the same kind as the original, as to what it's for -- regular, copy-source, etc.")

          [SETQ NPOINT (COND
                          ((IGEQ (fetch (SELECTION CHLIM) of NEWSEL)
                                 (fetch (SELECTION CHLIM) of OSEL))
                                                             (* ; 
                               "The new selection ends to the right of the old one.  Move this edge.")
                           'RIGHT)
                          ((ILEQ (fetch (SELECTION CH#) of NEWSEL)
                                 (fetch (SELECTION CH#) of OSEL))
                                                             (* ; 
                             "If the new selection starts to left of old one, caret goes at the LEFT")
                           'LEFT)
                          ([IGREATERP (IABS (IDIFFERENCE (fetch (SELECTION CHLIM) of NEWSEL)
                                                   (fetch (SELECTION CHLIM) of OSEL)))
                                  (IABS (IDIFFERENCE (fetch (SELECTION CH#) of NEWSEL)
                                               (fetch (SELECTION CH#) of OSEL]

                           (* ;; 
      "New X (right click) is in the middle of an old selection.  Bump OLDSEL's left end to NEWSEL's")

                           (SETQ SETOSELFLG T)
                           'LEFT)
                          (T 
                             (* ;; 
                            "Must be shrinking from the right.  Move OLDSEL's CHLIM back to NEWSEL's")

                             (SETQ SETOSELFLG T)
                             'RIGHT]
          (SELECTQ NPOINT
              (LEFT                                          (* ; 
                                                          "Caret's to the new left, copy old right  ")
                    (replace (SELECTION CHLIM) of NEWSEL with (IMAX (fetch (SELECTION CHLIM)
                                                                       of NEWSEL)
                                                                    (fetch (SELECTION CHLIM)
                                                                       of OSEL)))
                    (replace (SELECTION XLIM) of NEWSEL with (fetch (SELECTION XLIM) of OSEL))
                    (replace (SELECTION YLIM) of NEWSEL with (fetch (SELECTION YLIM) of OSEL))
                    (replace (SELECTION LN) of NEWSEL with (COPY (fetch (SELECTION LN) of OSEL)))

                    (* ;; "Only copying is allowed from a protected area (menu).  Otherwise, only extend to its start. If CH# changes, L1 may also change, so need to fixup")

                    (CL:UNLESS (EQ SELOPERATION 'COPY)
                        (CL:UNLESS [IEQP (fetch (SELECTION CH#) of NEWSEL)
                                         (replace (SELECTION CH#) of NEWSEL
                                            with (IMAX (fetch (SELECTION CH#) of NEWSEL)
                                                       (\TEDIT.FIND.PROTECTED.START
                                                        TEXTOBJ
                                                        (SUB1 (fetch (SELECTION CHLIM) of OSEL))
                                                        (fetch (SELECTION CH#) of NEWSEL]
                               (SETQ FIXUPNEEDED T))))
              (RIGHT                                         (* ; 
                                                           "Caret's to the new right, copy old left.")
                     (replace (SELECTION CH#) of NEWSEL with (IMIN (fetch (SELECTION CH#)
                                                                      of NEWSEL)
                                                                   (fetch (SELECTION CH#)
                                                                      of OSEL)))
                     (replace (SELECTION X0) of NEWSEL with (fetch (SELECTION X0) of OSEL))
                     (replace (SELECTION Y0) of NEWSEL with (fetch (SELECTION Y0) of OSEL))
                     (replace (SELECTION L1) of NEWSEL with (COPY (fetch (SELECTION L1) of OSEL)))

                     (* ;; "Only copying is allowed from a protected area (menu).  Otherwise, only extend to its end. If CHLIM changes, LN may also change, so need to fixup")

                     (CL:UNLESS (EQ SELOPERATION 'COPY)
                         (CL:UNLESS 
                             [IEQP
                              (fetch (SELECTION CHLIM) of NEWSEL)
                              (replace (SELECTION CHLIM) of NEWSEL
                                 with (IMIN (fetch (SELECTION CHLIM) of NEWSEL)
                                            (ADD1 (\TEDIT.FIND.PROTECTED.END
                                                   TEXTOBJ
                                                   (fetch (SELECTION CH#) of OSEL)
                                                   (ADD1 (\TEDIT.FIND.PROTECTED.END
                                                          TEXTOBJ
                                                          (fetch (SELECTION CH#) of OSEL)
                                                          (SUB1 (fetch (SELECTION CHLIM) of NEWSEL]
                             (SETQ FIXUPNEEDED T)
                             (replace (SELECTION CH#) of NEWSEL
                                with (IMIN (SUB1 (fetch (SELECTION CHLIM) of NEWSEL))
                                           (fetch (SELECTION CH#) of NEWSEL))))))
              NIL)
          (replace DCH of NEWSEL with (IDIFFERENCE (fetch CHLIM of NEWSEL)
                                             (fetch CH# of NEWSEL)))
          (replace POINT of NEWSEL with NPOINT)

     (* ;; "DX only used in \TEDIT.OBJECT.SHOWSEL, only valid if selection contains only the object?")

          (CL:UNLESS (EQ (fetch SELOBJ of OSEL)
                         (fetch SELOBJ of NEWSEL))           (* ; 
                                                          "Keep object if it is in overlapping part?")
              (replace SELOBJ of NEWSEL with NIL))
          (CL:WHEN FIXUPNEEDED

              (* ;; "We're in a menu, and this selection got contracted because of a protection violation.  Fix up everything.")

              (\FIXSEL NEWSEL TEXTOBJ))
          (CL:WHEN SETOSELFLG                                (* ; 
                                                   "It is wise to copy the new sel into the old one.")
              (\COPYSEL NEWSEL OSEL))
          (RETURN NEWSEL])

(TEDIT.SELECT
  [LAMBDA (X Y TEXTOBJ REGION WORDSELFLG SELOPERATION WINDOW EXTENDING)
                                                             (* ; "Edited 19-Feb-2023 23:51 by rmk")
                                                             (* ; "Edited 15-Feb-2023 23:20 by rmk")
                                                             (* ; "Edited 24-Oct-2022 15:55 by rmk")
                                                             (* ; "Edited 21-Oct-2022 18:37 by rmk")
                                                             (* ; "Edited  4-Oct-2022 13:18 by rmk")
                                                             (* ; "Edited  1-Oct-2022 15:59 by rmk")
                                                             (* ; "Edited 30-May-91 23:07 by jds")

    (* ;; "Select the character word, line, or paragraph the mouse is pointing at.")

    (LET (SEL)
         (SETQ SEL (TEDIT.SELECT.LINE.SCANNER X Y TEXTOBJ (\TEDIT.LINE.LIST TEXTOBJ WINDOW)
                          REGION WORDSELFLG SELOPERATION WINDOW EXTENDING))
         (CL:WHEN (AND (type? SELECTION SEL)
                       (fetch (SELECTION SET) of SEL))       (* ; 
                                                        "He pointed at something real;  return that.")
             (\TEDIT.SET.SEL.LOOKS SEL SELOPERATION)
             (\FIXSEL SEL TEXTOBJ)
             SEL)])

(TEDIT.SCAN.LINE
  [LAMBDA (TEXTOBJ LINE X Y WORDSELFLG SELOPERATION WINDOW EXTENDING)
                                                             (* ; "Edited  7-Mar-2023 23:12 by rmk")
                                                             (* ; "Edited  5-Mar-2023 23:35 by rmk")
                                                             (* ; "Edited  4-Mar-2023 20:41 by rmk")
                                                             (* ; "Edited  2-Mar-2023 17:34 by rmk")
                                                             (* ; "Edited 22-Oct-2022 22:45 by rmk")
                                                             (* ; "Edited 18-Oct-2022 21:59 by rmk")
                                                             (* ; "Edited 31-May-91 12:26 by jds")

    (* ;; "Given that LINE meets the mouse-Y criterion, find the selection picked out by the mouse X  coordinate.  This may run to the right if the mouse-position is protected.")

    (PROG (SEL CHARSLOT CLOOKS CHNO TXB TX SELSLOT SELCHAR SELHERE PASTRIGHT
               (THISLINE (ffetch (TEXTOBJ THISLINE) of TEXTOBJ)))
          (CL:UNLESS (EQ LINE (fetch DESC of THISLINE))      (* ; 
                                                            "Make sure the cache describes this line")
              (SETQ LINE (\FORMATLINE TEXTOBJ (fetch (LINEDESCRIPTOR LCHAR1) of LINE)
                                LINE)))                      (* ; 
                                                          "Convert X's display units to LINE's scale")
          (SETQ TX (ffetch (LINEDESCRIPTOR LX1) of LINE))
          (SETQ TXB TX)
          (SETQ X (IMAX X TX))                               (* ; 
                                                     "Move over if the click was in the left margin.")
          (SETQ CHNO (ffetch (LINEDESCRIPTOR LCHAR1) of LINE))

     (* ;; "")

     (* ;; "Step 1:  Find the slot, character number, and ending TX for the character at the incoming mouse X position. ")

          (CL:WHEN (SETQ PASTRIGHT (IGREATERP X (fetch (LINEDESCRIPTOR LXLIM) of LINE)))
                                                             (* ; 
                                                     "Past the end, put it inside the last character")
              (SETQ X (SUB1 (fetch (LINEDESCRIPTOR LXLIM) of LINE))))
          (for old CHARSLOT incharslots THISLINE
             do (CL:UNLESS CHAR                              (* ; "Invisible or charlooks")
                    (CL:IF (SMALLP CHARW)
                        (add CHNO CHARW)
                        (SETQ CLOOKS CHARW))
                    (GO $$ITERATE))
                (SETQ TXB TX)
                (add TX CHARW)
                (CL:WHEN (IGEQ TX X)
                    (if SELHERE
                        then (SETQ TX TXB)                   (* ; 
                                      "Now presumaby looking at }, we want a 0-char selection at TXB")
                             (SETQ X TX)
                             (RETURN)
                      else 
                           (* ;; "Presumably the end of a selected region in a menu, probably {.  It appears that we want to go one more")

                           (SETQ SELHERE (fetch (CHARLOOKS CLSELHERE) of CLOOKS)))
                    (CL:UNLESS (fetch (CHARLOOKS CLPROTECTED) of CLOOKS)
                                                             (* ; 
                                                     "If protected, we keep going beyond the given X")
                        (RETURN)))
                (add CHNO 1) finally 

                                   (* ;; "We lose if all characters after X are protected.")

                                   (CL:WHEN (fetch (CHARLOOKS CLPROTECTED) of CLOOKS)
                                          (SETQ CHARSLOT NIL)))
          (CL:UNLESS CHARSLOT                                (* ; "Everything after X was protected.")
              (RETURN 'DON'T))
          (CL:WHEN [AND (FETCH (LINEDESCRIPTOR FORCED-END) of LINE)
                        (MEMB (CHAR CHARSLOT)
                              (CHARCODE (EOL FORM]

              (* ;; "We always select to the left of the EOL/FORM that forced a line end. We're still pointing at the EOL, but shift the X backwards")

              (add TX (IMINUS (CHARW CHARSLOT)))
              (SETQ X TX)
              (SETQ PASTRIGHT NIL))

     (* ;; "CHNO and CHARSLOT:  the character pointed to, CLOOKS the looks of that character.")

     (* ;; "CHNO and CHARSLOT are either flagged as CLSELHERE or are not flagged as CLPROTECTED.")

     (* ;; "TXB the end of CHNO-1, TX the end of CHNO.  They both may be beyond X, if protected.")

     (* ;; "")

          (SETQ SELSLOT CHARSLOT)
          (SETQ SELCHAR (CHAR SELSLOT))

     (* ;; 
     " CHNO and SELSLOT define a selectable character/object SELCHAR that runs from TXB to TX.    ")

     (* ;; "")

     (* ;; "The selection runs from TXB to TX and from CHNOB to CHNO.  In the character case, CHNOB=CHNO and TX-TB is the selection width (DX).")

     (* ;; "If the selected piece is SELHERE (presumably in a menu), the selection is specialized in various ways..")

          (SETQ SEL (fetch (TEXTOBJ SCRATCHSEL) of TEXTOBJ))
          [with SELECTION SEL (SETQ SELTEXTOBJ TEXTOBJ)
                (SETQ SET T)
                (SETQ SELKIND 'CHAR)
                (SETQ X0 TX)
                (SETQ XLIM TX)
                (SETQ Y0 (fetch (LINEDESCRIPTOR YBOT) of LINE))
                (SETQ YLIM (fetch (LINEDESCRIPTOR YBOT) of LINE))
                (SETQ CH# CHNO)
                (SETQ CHLIM (CL:IF SELHERE
                                CHNO
                                (ADD1 CHNO)))
                (SETQ DCH (CL:IF SELHERE
                              0
                              (IDIFFERENCE (ADD1 CHNO)
                                     CHNO)))
                (SETQ POINT (if [OR SELHERE (AND (IGEQ (IDIFFERENCE TX TXB)
                                                       3)
                                                 (IGEQ X (FOLDLO (IPLUS TX TXB)
                                                                2]
                                then 

                                 (* ;; "To the right of an otherwise-protected insertion, past the middle of a selection that is wide enough (3 points) to discriminate, and not at the  end of an EOL-terminated line. ")

                                     'RIGHT
                              else 'LEFT]
          (CL:WHEN WORDSELFLG                                (* ; 
                                                        "Expand the selection to its word boundaries")
              (\TEDIT.SCAN.LINE.WORD X TEXTOBJ THISLINE SEL SELSLOT CLOOKS))
          (CL:WHEN (AND (type? IMAGEOBJ SELCHAR)
                        (NOT PASTRIGHT))                     (* ; 
                                                 "Don't interpret an object that X was backed up to.")
              (\TEDIT.SELECT.OBJECT TEXTOBJ SEL SELCHAR LINE X Y TXB WINDOW SELOPERATION
                     (COND
                        (EXTENDING 'RIGHT)
                        (WORDSELFLG 'MIDDLE)
                        (T 'LEFT))
                     EXTENDING))
          (for L1 on (fetch (SELECTION L1) of SEL) as LN on (fetch (SELECTION LN) of SEL)
             as PANE inside (fetch (TEXTOBJ \WINDOW) of TEXTOBJ) when (EQ PANE WINDOW)
             do (RPLACA L1 LINE)
                (RPLACA LN LINE))
          (RETURN SEL])

(\TEDIT.SCAN.LINE.WORD
  [LAMBDA (X TEXTOBJ THISLINE SEL SELSLOT SELLOOKS)          (* ; "Edited  6-Mar-2023 22:22 by rmk")
                                                             (* ; "Edited  2-Mar-2023 14:56 by rmk")
                                                             (* ; "Edited 26-Feb-2023 15:55 by rmk")

    (* ;; "SEL is a character selection at the SELSLOT character in THISLINE.  This expands it to its surrounding word boundaries. ")

    (* ;; " ")

    (CL:UNLESS (EQ 'CHAR (fetch (SELECTION SELKIND) of SEL))
           (SHOULDNT "Can only expand CHAR selections to WORD selections"))
    (LET (CH# CHLIM X0 XLIM)

         (* ;; "CH# will be the first charno of the word selection")

         (* ;; "CHLIM will be one past the last charno of the word selection")

         (* ;; "X0 will be the X at the beginning of CHNOF")

         (* ;; "XLIM will be the X at the end of CHNOL")

         (SETQ CH# (fetch (SELECTION CH#) of SEL))
         (SETQ CHLIM (fetch (SELECTION CHLIM) of SEL))       (* ; "")
         (SETQ X0 (fetch (SELECTION X0) of SEL))
         (SETQ XLIM (fetch (SELECTION XLIM) of SEL))
         (for CHARSLOT (CLOOKS _ SELLOOKS)
              (LASTCHAR _ (CHAR SELSLOT)) backcharslots (PREVCHARSLOT SELSLOT)
            do (CL:UNLESS CHAR
                   (CL:IF (SMALLP CHARW)
                       (add CH# (IMINUS CHARW))
                       (SETQ CLOOKS CHARW))
                   (GO $$ITERATE))
               (CL:WHEN (OR (type? IMAGEOBJ CHAR)
                            (\TEDIT.WORD.BOUND TEXTOBJ CHAR LASTCHAR)
                            (fetch (CHARLOOKS CLPROTECTED) of CLOOKS))
                                                             (* ; "Stop at a protection bounary")
                   (RETURN))
               (SETQ LASTCHAR CHAR)
               (ADD X0 (IMINUS CHARW))
               (ADD CH# -1))

         (* ;; "And search forward for the end of the word")

         (for CHARSLOT (CLOOKS _ SELLOOKS)
              (PREVCHAR _ (CHAR SELSLOT)) incharslots (NEXTCHARSLOT SELSLOT)
            do (CL:UNLESS CHAR
                   (CL:IF (SMALLP CHARW)
                       (add CHLIM CHARW)
                       (SETQ CLOOKS CHARW))
                   (GO $$ITERATE))
               (CL:WHEN (OR (type? IMAGEOBJ CHAR)
                            (\TEDIT.WORD.BOUND TEXTOBJ PREVCHAR CHAR)
                            (fetch (CHARLOOKS CLPROTECTED) of CLOOKS))

                   (* ;; "XLIM is now the end of the last character of the word.")

                   (* ;; "CHLIM and XLIM should be OK if we run off the end.")

                   (RETURN))
               (add XLIM CHARW)
               (add CHLIM 1)
               (SETQ PREVCHAR CHAR))
         (replace (SELECTION SELKIND) of SEL with 'WORD)
         (replace (SELECTION CH#) of SEL with CH#)
         (replace (SELECTION CHLIM) of SEL with CHLIM)
         (replace (SELECTION DCH) of SEL with (IDIFFERENCE CHLIM CH#))
         (replace (SELECTION X0) of SEL with X0)
         (replace (SELECTION XLIM) of SEL with XLIM)

         (* ;; "Move the point to the intended side of the word: To the right of an otherwise-protected insertion, past the middle of a selection that is wide enough to discriminate, and not at the  end of an EOL-terminated line. 3 is points.")

         (replace (SELECTION POINT) of SEL
            with (if [OR (fetch (CHARLOOKS CLSELHERE) of SELLOOKS)
                         (AND (IGEQ (IDIFFERENCE XLIM X0)
                                    3)
                              (IGEQ X (FOLDLO (IPLUS XLIM X0)
                                             2]
                     then 'RIGHT
                   else 'LEFT])

(TEDIT.SELECT.LINE.SCANNER
  [LAMBDA (X Y TEXTOBJ LINES REGION WORDSELFLG SELOPERATION WINDOW EXTENDING)
                                                             (* ; "Edited  7-Mar-2023 23:12 by rmk")
                                                             (* ; "Edited  5-Mar-2023 23:40 by rmk")
                                                             (* ; "Edited  2-Mar-2023 14:55 by rmk")
                                                             (* ; "Edited 25-Feb-2023 17:12 by rmk")
                                                             (* ; "Edited 19-Feb-2023 23:17 by rmk")
                                                             (* ; "Edited 31-May-91 12:26 by jds")
    (CL:WHEN (INSIDEP (DSPCLIPPINGREGION NIL WINDOW)
                    X Y)                                     (* ; "Else, how did we get here?")
        (PROG (LINE SEL PARALINES PARAFIRSTLINE PARALASTLINE PL1 PLN)
              [SETQ LINE (find L PREVLINE inlines (fetch (LINEDESCRIPTOR NEXTLINE) of LINES)
                            suchthat (SETQ PREVLINE (fetch (LINEDESCRIPTOR PREVLINE) of L))
                                  (ILEQ (fetch (LINEDESCRIPTOR YBOT) of L)
                                        Y) finally 

                                                 (* ;; 
                                          "Y is below thelast line.  Assume it points to the last.  ")

                                                 (RETURN (OR L PREVLINE]
              (CL:UNLESS LINE                                (* ; "Can this happen?  Empty?")
                  (RETURN NIL))
              (SELECTQ REGION
                  ((TEXT WINDOW)                             (* ; 
                                                   "We're in the regular text area, which character?")
                       (CL:WHEN (AND (IGEQ (fetch (LINEDESCRIPTOR LCHARLIM) of LINE)
                                           (fetch (TEXTOBJ TEXTLEN) of TEXTOBJ))
                                     (IGREATERP (fetch (LINEDESCRIPTOR YBOT) of LINE)
                                            Y))

                           (* ;; 
              "Y is below the last line of the text: force selection past the very end of that line.")

                           (SETQ X (ADD1 (fetch (LINEDESCRIPTOR LXLIM) of LINE))))
                       (RETURN (TEDIT.SCAN.LINE TEXTOBJ LINE X Y WORDSELFLG SELOPERATION WINDOW 
                                      EXTENDING)))
                  (LINE                                      (* ; 
                                                             "We're in the line/paragraph region.")
                        (SETQ SEL (fetch (TEXTOBJ SCRATCHSEL) of TEXTOBJ))
                        (CL:WHEN (AND (fetch (LINEDESCRIPTOR LHASPROT) of LINE)
                                      (NEQ SELOPERATION 'COPY))
                                                             (* ; 
                                       "In a TEDIT menu, you can't select a whole paragraph or line.")
                            (replace (SELECTION SET) of SEL with NIL)
                            (RETURN SEL))
                        (replace (SELECTION SELTEXTOBJ) of SEL with TEXTOBJ)
                        (replace (SELECTION SET) of SEL with T)
                                                             (* ; "Mark it valid.")
                        (replace (SELECTION SELOBJ) of SEL with NIL)
                                                             (* ; "Not selecting an object just yet")

                        (* ;; "Get the lines selected in this pane.  How does SCRATCHSEL know this?")

                        (find PANE inside (fetch (TEXTOBJ \WINDOW) of TEXTOBJ) as old PL1
                           on (fetch (SELECTION L1) of SEL) as old PLN
                           on (fetch (SELECTION LN) of SEL) suchthat (EQ PANE WINDOW))
                        [COND
                           (WORDSELFLG                       (* ; 
                                                          "Select a paragraph: find first/last lines")
                                  (replace (SELECTION SELKIND) of SEL with 'PARA)
                                  (SETQ PARALINES (\PARALINES LINE TEXTOBJ))
                                  (SETQ PARAFIRSTLINE (CAR PARALINES))
                                  (SETQ PARALASTLINE (CADR PARALINES))
                                  (RPLACA PL1 PARAFIRSTLINE)
                                  (RPLACA PLN PARALASTLINE)
                                  (with SELECTION SEL (SETQ CH# (fetch (LINEDESCRIPTOR LCHAR1)
                                                                   of PARAFIRSTLINE))
                                        (SETQ CHLIM (ADD1 (fetch (LINEDESCRIPTOR LCHARLIM)
                                                             of PARALASTLINE)))

                                        (* ;; 
                                        "Put the caret at one end of the actually selected line")

                                        [SETQ POINT (COND
                                                       ((ILEQ (IDIFFERENCE (fetch (LINEDESCRIPTOR
                                                                                   LCHAR1)
                                                                              of LINE)
                                                                     (fetch (SELECTION CH#)
                                                                        of SEL))
                                                              (IDIFFERENCE (fetch (SELECTION CHLIM)
                                                                              of SEL)
                                                                     (fetch (LINEDESCRIPTOR LCHARLIM)
                                                                        of LINE)))
                                                        'LEFT)
                                                       (T 'RIGHT]
                                        (SETQ DCH (IDIFFERENCE CHLIM CH#)))
                                  (\FIXSEL SEL TEXTOBJ))
                           (T                                (* ; 
                                                            "Select just the line we're pointing at.")
                              (RPLACA PL1 LINE)
                              (RPLACA PLN LINE)
                              (with SELECTION SEL (SETQ SELKIND 'LINE)
                                    (SETQ CH# (fetch (LINEDESCRIPTOR LCHAR1) of LINE))
                                    (SETQ CHLIM (ADD1 (fetch (LINEDESCRIPTOR LCHARLIM) of LINE)))
                                    (SETQ X0 (fetch (LINEDESCRIPTOR LX1) of LINE))
                                    (SETQ XLIM (fetch (LINEDESCRIPTOR LXLIM) of LINE))
                                    (SETQ Y0 (fetch (LINEDESCRIPTOR YBOT) of LINE))
                                    (SETQ YLIM (fetch (LINEDESCRIPTOR YBOT) of LINE))
                                    (SETQ DCH (IDIFFERENCE CHLIM CH#))
                                    (SETQ POINT 'LEFT)
                                    (SETQ SET T]
                        (RETURN SEL))
                  (SHOULDNT "Unknown text/line-bar region?"))))])

(\TEDIT.SELECT.OBJECT
  [LAMBDA (TEXTOBJ SEL OBJ LINE X Y TXB SELWINDOW SELOPERATION WHERE)
                                                             (* ; "Edited 18-Feb-2023 11:41 by rmk")
                                                             (* ; "Edited  7-Nov-2022 22:10 by rmk")
                                                             (* ; "Edited 16-Oct-2022 21:42 by rmk")
                                                             (* ; "Edited 12-Oct-2022 11:28 by rmk")
                                                             (* ; "Edited 29-Mar-94 13:28 by jds")
    (replace (SELECTION SELOBJ) of SEL with OBJ)
    (replace (SELECTION X0) of SEL with TXB)
    (replace (SELECTION Y0) of SEL with (fetch (LINEDESCRIPTOR YBOT) of LINE))
    (LET ([OBJBOX (OR (IMAGEOBJPROP OBJ 'BOUNDBOX)
                      (IMAGEBOX OBJ SELWINDOW 'DISPLAY]
          (DS (WINDOWPROP SELWINDOW 'DSP))
          SELRES)
         (RESETLST
             (RESETSAVE (DSPXOFFSET (IDIFFERENCE (IPLUS TXB (DSPXOFFSET NIL DS))
                                           (fetch XKERN of OBJBOX))
                               DS)
                    (LIST (FUNCTION DSPXOFFSET)
                          (DSPXOFFSET NIL DS)
                          DS))
             (RESETSAVE (DSPYOFFSET (IDIFFERENCE (IPLUS (fetch (LINEDESCRIPTOR YBASE) of LINE)
                                                        (DSPYOFFSET NIL DS))
                                           (fetch YDESC of OBJBOX))
                               DS)
                    (LIST (FUNCTION DSPYOFFSET)
                          (DSPYOFFSET NIL DS)
                          DS))
             (RESETSAVE (DSPCLIPPINGREGION (create REGION
                                                  LEFT _ 0
                                                  BOTTOM _ 0
                                                  WIDTH _ (IMIN (fetch XSIZE of OBJBOX)
                                                                (IDIFFERENCE (fetch (TEXTOBJ WRIGHT)
                                                                                of TEXTOBJ)
                                                                       TXB))
                                                  HEIGHT _ (fetch YSIZE of OBJBOX))
                               DS)
                    (LIST (FUNCTION DSPCLIPPINGREGION)
                          (DSPCLIPPINGREGION NIL DS)
                          DS))                               (* ; 
                                                             "Go tell him he's being pointed at.")
             (SETQ SELRES (ERSETQ (APPLY* (IMAGEOBJPROP OBJ 'BUTTONEVENTINFN)
                                         OBJ DS SEL (IDIFFERENCE X TXB)
                                         (IDIFFERENCE Y (fetch (LINEDESCRIPTOR YBASE) of LINE))
                                         SELWINDOW
                                         (fetch (TEXTOBJ STREAMHINT) of TEXTOBJ)
                                         WHERE SELOPERATION))))

         (* ;; "The clipping region is now restored.")

         (CL:WHEN (LISTP SELRES)                             (* ; "If not a LIST, an ereror happened")
             (SELECTQ (CAR SELRES)
                 (NIL                                        (* ; "Do nothing untoward")
                      (replace (SELECTION SELOBJ) of SEL with NIL))
                 (DON'T                                      (* ; 
                            "The object declines to be selected.  Don't permit the select to happen.")
                        (replace (SELECTION SET) of SEL with NIL))
                 (CHANGED                                    (* ; "Update the screen")
                          (TEDIT.OBJECT.CHANGED TEXTOBJ (fetch (SELECTION SELOBJ) of SEL)))
                 NIL))])

(\PARALINES
  [LAMBDA (LINE TEXTOBJ)                                     (* ; "Edited  7-Mar-2023 12:07 by rmk")
                                                             (* ; "Edited 18-Feb-2023 21:45 by rmk")

    (* ;; "Returns the first and last lines of the paragraph containing LINE (visible in WREG ?)")

    (LET (PARABOUNDS PARASTART PARAEND FIRSTLINE LASTLINE (FORMATTEDP (fetch (TEXTOBJ FORMATTEDP)
                                                                         of TEXTOBJ)))
         (CL:WHEN FORMATTEDP

             (* ;; "If this is a para-formatted document, use the paragraph bounds.  Otherwise, delimit a para by the surrounding EOLs.")

             (SETQ PARABOUNDS (\TEDIT.PARABOUNDS TEXTOBJ (fetch (LINEDESCRIPTOR LCHAR1) of LINE)))
             (SETQ PARASTART (\TEDIT.FIND.PROTECTED.START TEXTOBJ (fetch (LINEDESCRIPTOR LCHAR1)
                                                                     of LINE)
                                    (CAR PARABOUNDS)))
             (SETQ PARAEND (\TEDIT.FIND.PROTECTED.END TEXTOBJ (fetch (LINEDESCRIPTOR LCHAR1)
                                                                 of LINE)
                                  (CDR PARABOUNDS))))

         (* ;; "Walk forward thru the lines, looking for the last line in the paragraph.")

         (SETQ LASTLINE (bind (LL _ LINE)
                              (TEXTLEN _ (fetch (TEXTOBJ TEXTLEN) of TEXTOBJ))
                           while (AND [COND
                                         (FORMATTEDP (ILESSP (fetch (LINEDESCRIPTOR LCHARLIM)
                                                                of LL)
                                                            PARAEND))
                                         (T (NOT (fetch (LINEDESCRIPTOR FORCED-END) of LL]
                                      (ILESSP (fetch (LINEDESCRIPTOR LCHARLIM) of LL)
                                             TEXTLEN))
                           do [SETQ LL (COND
                                          ((fetch (LINEDESCRIPTOR NEXTLINE) of LL))
                                          (T [replace (LINEDESCRIPTOR NEXTLINE) of LL
                                                with (\FORMATLINE TEXTOBJ (ADD1 (fetch (
                                                                                       LINEDESCRIPTOR
                                                                                        LCHARLIM)
                                                                                   of LL]
                                             (replace (LINEDESCRIPTOR PREVLINE)
                                                of (fetch (LINEDESCRIPTOR NEXTLINE) of LL)
                                                with LL)
                                             (fetch (LINEDESCRIPTOR NEXTLINE) of LL]
                           finally (RETURN LL)))

         (* ;; 
 "Search back to a line preceded by EOL or beginning-of-text, if we aren't already on the first line")

         (SETQ FIRSTLINE (bind (LL _ LINE)
                            while [AND (IGREATERP (fetch (LINEDESCRIPTOR LCHAR1) of LL)
                                              1)
                                       (COND
                                          (FORMATTEDP (IGREATERP (fetch (LINEDESCRIPTOR LCHAR1)
                                                                    of LL)
                                                             PARASTART))
                                          (T (NOT (fetch (LINEDESCRIPTOR FORCED-END)
                                                     of (fetch (LINEDESCRIPTOR PREVLINE) of LL]
                            do 
                               (* ;; "Back up until we find the first line of the paragraph, or we hit the dummy top line (which claims to end in EOL.)")

                               (SETQ LL (fetch (LINEDESCRIPTOR PREVLINE) of LL))
                            finally (RETURN LL)))
         (LIST FIRSTLINE LASTLINE])
)
(DEFINEQ

(\FIXSEL
  [LAMBDA (SEL TEXTOBJ PANE)                                 (* ; "Edited 15-Mar-2023 22:02 by rmk")
                                                             (* ; "Edited 14-Mar-2023 13:14 by rmk")
                                                             (* ; "Edited 10-Mar-2023 22:17 by rmk")
                                                             (* ; "Edited  7-Mar-2023 12:08 by rmk")
                                                             (* ; "Edited  2-Mar-2023 14:55 by rmk")
                                                             (* ; "Edited 31-May-91 12:26 by jds")

    (* ;; "Given that the selection SEL contains the correct CH# and CHLIM, reset the X0 XLIM Y0 YLIM and DX values for the lines that those pick out.")

    (* ;; "See TEDIT-NOTES for documentation.")

    (* ;; "Selection L1 and LN are sequences of CONS cells one for each pane that the text appears in. The running (CAR L1) heads the sub-chain of lines selected for the current pane, the running (CAR LN) points to the pane's last selected line.")

    (* ;; "")

    (* ;; "PANE is a subwindow provided on the call from \TEDIT.UNSPLITW")

    (* ;; "TEXTOBJ LINES is chain-header for the line previous to the first one that appears in any pane.  (The dummy is needed because the PREVLINE is a FULLXPOINTER, so we can't just look backwards when we want to chain something in.)")

    (CL:WHEN (AND (fetch (TEXTOBJ \WINDOW) of TEXTOBJ)
                  (ffetch (SELECTION SET) of SEL))

        (* ;; "Originally, this would happen unless a particular window was to be avoided, on calls from TEDIT.SELECT.  Maybe having to do with splitting?")

        [replace (SELECTION Y0) of SEL with (fetch PTOP of (DSPCLIPPINGREGION NIL (OR PANE
                                                                                      (\TEDIT.MAINW
                                                                                       TEXTOBJ]
        (replace (SELECTION YLIM) of SEL with -1)

        (* ;; "SUB1 because CHLIM is one past, except in the funky initialization case where CH# is 1 and CHLIM is 0.  Should be 1 and 2, with DCH=0.  ")

        (for PANE PSTARTLINE PENDLINE APPENDTOEND X0 XLIM Y0 YLIM (CH# _ (fetch (SELECTION CH#)
                                                                            of SEL))
             [CHLIM _ (IMAX 1 (SUB1 (fetch (SELECTION CHLIM) of SEL] inside (ffetch (TEXTOBJ \WINDOW)
                                                                               of TEXTOBJ)
           as LINES inside (ffetch (TEXTOBJ LINES) of TEXTOBJ) as L1 on (fetch (SELECTION L1)
                                                                           of SEL) as LN
           on (fetch (SELECTION LN) of SEL) eachtime 

                                                  (* ;; 
                                "Turn off the selection's old lines for PANE, then see what happens.")

                                                  (RPLACA L1 NIL)
                                                  (RPLACA LN NIL) 

                                                  (* ;; "Skip the pane's dummy first line.  ")
 when [SETQ PSTARTLINE (find LINE PREVLINE first (SETQ PREVLINE (fetch (LINEDESCRIPTOR PREVLINE)
                                                                   of LINES)) 

                                                 (* ;; 
                                     "Just after the last character, presumably before the dummy end")

                                                 [SETQ APPENDTOEND (AND (IEQP CH# (fetch (TEXTOBJ
                                                                                          TEXTLEN)
                                                                                     of TEXTOBJ))
                                                                        (EQ 'RIGHT
                                                                            (fetch (SELECTION POINT)
                                                                               of SEL]
                          inlines (fetch (LINEDESCRIPTOR NEXTLINE) of LINES)
                          do (CL:WHEN (WITHINLINEP CH# LINE)
                                    (RETURN LINE))
                             (SETQ PREVLINE LINE)
                          finally (CL:WHEN (AND (IGREATERP CH# (fetch (TEXTOBJ TEXTLEN) of TEXTOBJ))
                                                (IEQP CH# (ADD1 (fetch (LINEDESCRIPTOR LCHARLIM)
                                                                   of PREVLINE)))
                                                (ZEROP (fetch (SELECTION DCH) of SEL)))

                                      (* ;; 
         "Point selection at the end of PREVLINE, the last line of the text (e.g. continued typing).")

                                      (SETQ APPENDTOEND T)
                                      (RETURN PREVLINE))]
           do (CL:WHEN (AND (IEQP (fetch (LINEDESCRIPTOR LCHARLIM) of PSTARTLINE)
                                  CHLIM)
                            (fetch (LINEDESCRIPTOR FORCED-END) of PSTARTLINE)
                            (EQ (fetch (SELECTION POINT) of SEL)
                                'RIGHT)
                            (ZEROP (fetch (SELECTION DCH) of SEL))
                            (fetch (LINEDESCRIPTOR NEXTLINE) of PSTARTLINE))

                  (* ;; "If this is a point selection AFTER but not including the EOL/FORM ending a line, go to the next line. Have to pretend that that's what was selected, to get X positions.  RMK:  translated from old code, not sure this ever happens")

                  (SETQ PSTARTLINE (fetch (LINEDESCRIPTOR NEXTLINE) of PSTARTLINE))
                  (SETQ CH# (SETQ CHLIM (fetch (LINEDESCRIPTOR LCHAR1) of PSTARTLINE))))
              (SETQ X0 (\CHTOX TEXTOBJ PSTARTLINE CH# APPENDTOEND))
              (SETQ Y0 (fetch (LINEDESCRIPTOR YBOT) of PSTARTLINE))
              (if (ZEROP (fetch (SELECTION DCH) of SEL))
                  then 
                       (* ;; "Point selection, ends at the start. CHLIM doesn't matter")

                       (SETQ XLIM X0)
                       (SETQ YLIM Y0)
                       (SETQ PENDLINE PSTARTLINE)            (* ; "Old code left it at NIL but ...")
                else 
                     (* ;; 
                     "Some line after the startline must be the last one visible in this pane. ")

                     (SETQ PENDLINE (find LINE PREVLINE first (SETQ PREVLINE (fetch (LINEDESCRIPTOR
                                                                                     PREVLINE)
                                                                                of PSTARTLINE))
                                       inlines PSTARTLINE do (CL:WHEN (WITHINLINEP CHLIM LINE)
                                                                    (RETURN LINE))
                                                             (SETQ PREVLINE LINE)
                                       finally 

                                             (* ;; 
                          "Selection extends beyond window, %"shrink%" X to end of last visible line")

                                             (SETQ CHLIM (fetch (LINEDESCRIPTOR LCHARLIM)
                                                            of PREVLINE))
                                             (RETURN PREVLINE)))
                     (SETQ XLIM (\CHTOX TEXTOBJ PENDLINE CHLIM T))
                     (SETQ YLIM (fetch (LINEDESCRIPTOR YBOT) of PENDLINE)))
              (RPLACA L1 PSTARTLINE)
              (RPLACA LN PENDLINE)
              (replace (SELECTION X0) of SEL with X0)
              (replace (SELECTION XLIM) of SEL with XLIM)
              (replace (SELECTION Y0) of SEL with Y0)
              (replace (SELECTION YLIM) of SEL with YLIM)))
    SEL])

(\TEDIT.FIXDELSEL
  [LAMBDA (SELTOFIX TEXTOBJ CH#1 CH#LIM DCH)                 (* ; "Edited 23-Oct-2022 09:47 by rmk")
                                                             (* ; "Edited 21-Oct-2022 18:38 by rmk")
                                                             (* ; "Edited 30-May-91 23:00 by jds")

    (* ;; "Fix up a SELTOFIX after deletion inside that textobj")
                                                             (* ; 
                                               "Only if the Selection is set, and is in THIS textobj")
    (CL:WHEN (AND (fetch (SELECTION SET) of SELTOFIX)
                  (EQ TEXTOBJ (fetch (SELECTION SELTEXTOBJ) of SELTOFIX)))
        [COND
           ((IGEQ (fetch (SELECTION CH#) of SELTOFIX)
                  CH#LIM)                                    (* ; 
                                     "The selection is after the deleted text.  Just move it forward")
            (replace (SELECTION CH#) of SELTOFIX with (IDIFFERENCE (fetch (SELECTION CH#)
                                                                      of SELTOFIX)
                                                             DCH))
            (replace (SELECTION CHLIM) of SELTOFIX with (IDIFFERENCE (fetch (SELECTION CHLIM)
                                                                        of SELTOFIX)
                                                               DCH)))
           ((IGREATERP (fetch (SELECTION CHLIM) of SELTOFIX)
                   CH#1)                                     (* ; "It overlaps, at least partially.")
            (CL:WHEN (IGEQ (fetch (SELECTION CH#) of SELTOFIX)
                           CH#1)

                (* ;; "If the start of the selection was inside the deleted area, it now starts where the deletion left off.")

                (replace (SELECTION CH#) of SELTOFIX with CH#1))
            (replace (SELECTION CHLIM) of SELTOFIX with (IMAX CH#1 (IDIFFERENCE (fetch (SELECTION
                                                                                        CHLIM)
                                                                                   of SELTOFIX)
                                                                          DCH)))
            (replace (SELECTION DCH) of SELTOFIX with (CL:IF (IEQP (fetch (SELECTION CHLIM)
                                                                      of SELTOFIX)
                                                                   CH#1)
                                                          0
                                                          (IDIFFERENCE (fetch (SELECTION CHLIM)
                                                                          of SELTOFIX)
                                                                 (fetch (SELECTION CH#) of SELTOFIX)))
                   ])])

(\TEDIT.FIXINSSEL
  [LAMBDA (SELTOFIX TEXTOBJ NCHARSADDED)                     (* ; "Edited 14-Mar-2023 22:12 by rmk")
                                                             (* ; "Edited 21-Feb-2023 14:35 by rmk")
                                                             (* ; "Edited 21-Oct-2022 18:38 by rmk")
                                                             (* ; "Edited 23-Aug-2022 11:50 by rmk")
                                                             (* ; "Edited 30-May-91 23:00 by jds")

    (* ;; "At this point we know that NCHARSADDED have been added in front of CH#, so in order to point to the original selection we have to translate CH# and CHLIM upwards by that amount..  Eventually the selection will be reduced to a point selection just after the new material.")

    (CL:WHEN (EQ TEXTOBJ (fetch (SELECTION SELTEXTOBJ) of SELTOFIX))
                                                             (* ; "May not have been initialized")
        (add (ffetch (SELECTION CH#) of SELTOFIX)
             NCHARSADDED)
        (add (ffetch (SELECTION CHLIM) of SELTOFIX)
             NCHARSADDED))])

(\TEDIT.FIXSELS
  [LAMBDA (TEXTOBJ EXCEPT)                                   (* ; "Edited 30-May-91 23:03 by jds")
                                                             (* Fixes all the sels for a given 
                                                             textobj.)
    (for SELN in (LIST (fetch (TEXTOBJ SEL) of TEXTOBJ)
                       (fetch (TEXTOBJ SHIFTEDSEL) of TEXTOBJ)
                       (fetch (TEXTOBJ MOVESEL) of TEXTOBJ)
                       (fetch (TEXTOBJ DELETESEL) of TEXTOBJ)) when (NEQ SELN EXCEPT)
       do (AND (fetch (SELECTION SET) of SELN)
               (\FIXSEL SELN TEXTOBJ])

(\CHTOX
  [LAMBDA (TEXTOBJ LINE CH# AFTER)                           (* ; "Edited  7-Mar-2023 23:12 by rmk")
                                                             (* ; "Edited  5-Mar-2023 23:38 by rmk")
                                                             (* ; "Edited  4-Mar-2023 20:37 by rmk")
                                                             (* ; "Edited 28-Feb-2023 21:34 by rmk")
                                                             (* ; "Edited 25-Feb-2023 22:16 by rmk")
                                                             (* ; "Edited 19-Feb-2023 23:10 by rmk")
                                                             (* ; "Edited 16-Feb-2023 23:27 by rmk")

    (* ;; "Return the screen-point X position of character CH# in LINE.  May need to reformat.")

    (* ;; "If AFTER, returns the Xposition at the end of CH#, otherwise at the beginning.")

    (* ;; "it is an error if CH# is before LCHAR1 or after LCHARLIM.")

    (LET (X (THISLINE (fetch (TEXTOBJ THISLINE) of TEXTOBJ)))

         (* ;; "Can avoid all the work if we are asking about the first or last characters.")

         [SETQ X (if (AND AFTER (IEQP CH# (fetch (LINEDESCRIPTOR LCHARLIM) of LINE)))
                     then (fetch (LINEDESCRIPTOR LXLIM) of LINE)
                   elseif (AND (NOT AFTER)
                               (IEQP CH# (fetch (LINEDESCRIPTOR LCHAR1) of LINE)))
                     then (fetch (LINEDESCRIPTOR LX1) of LINE)
                   else (CL:UNLESS (EQ LINE (fetch DESC of THISLINE))
                                                             (* ; 
                                              "Reformat if not cached in THISLINE. LINE gets smashed")
                            (\FORMATLINE TEXTOBJ (fetch (LINEDESCRIPTOR LCHAR1) of LINE)
                                   LINE))
                        (SETQ X (fetch (LINEDESCRIPTOR LX1) of LINE))
                        (for CHARSLOT (CHNO _ (fetch (LINEDESCRIPTOR LCHAR1) of LINE)) incharslots
                                                                                       THISLINE
                           unless (type? CHARLOOKS CHARW)
                           do 
                              (* ;; "Update the running X-position in the line, skiping look-slots")

                              (CL:WHEN (IEQP CHNO CH#)
                                  (if AFTER
                                      then (add X (CHARW CHARSLOT)))

                                  (* ;; 
                               "Scale selection X down to points for lines in hardcopy-display mode.")

                                  (RETURN X))
                              (if CHAR
                                  then (add CHNO 1)
                                       (add X CHARW)
                                elseif (SMALLP CHARW)
                                  then 
                                       (* ;; "Invisible run, we don't see CHARLOOKS")

                                       (add CHNO CHARW))
                           finally (CL:WHEN (AND (IEQP CH# (fetch (LINEDESCRIPTOR LCHAR1)
                                                              of LINE))
                                                 (IGEQ (fetch (LINEDESCRIPTOR LCHARLIM) of LINE)
                                                       (fetch (TEXTOBJ TEXTLEN) of TEXTOBJ))
                                                 (EQ (fetch (LINEDESCRIPTOR LXLIM) of LINE)
                                                     (fetch (LINEDESCRIPTOR LX1) of LINE)))

                                       (* ;; "CH# not found in empty final line, return left margin")

                                       (RETURN (fetch (LINEDESCRIPTOR LX1) of LINE)))]
         X])
)
(DEFINEQ

(TEDIT.RESET.EXTEND.PENDING.DELETE
  [LAMBDA (SEL)                                              (* ; "Edited 21-Oct-2022 18:41 by rmk")
                                                             (* ; "Edited 30-May-91 23:03 by jds")

    (* ;; "Reset the 'Extend Pending Delete' status")

    (AND SEL (\TEDIT.SET.SEL.LOOKS SEL 'NORMAL))
    (SETQ TEDIT.PENDINGDEL NIL)
    (CL:WHEN (fetch (SELECTION SELTEXTOBJ) of SEL)
        (replace (TEXTOBJ BLUEPENDINGDELETE) of (fetch (SELECTION SELTEXTOBJ) of SEL) with NIL))])

(\TEDIT.SET.SEL.LOOKS
  [LAMBDA (SEL OPERATION)                                    (* ; "Edited 30-May-91 23:00 by jds")
                                                             (* Set what the selection should be 
                                                             displayed like, given what it's for
                                                             (NORMAL, COPY, MOVE, etc.))
    (SELECTQ OPERATION
        (NORMAL                                              (* Regular selection)
                (replace (SELECTION HOW) of SEL with BLACKSHADE)
                (replace (SELECTION HOWHEIGHT) of SEL with 1)
                (replace (SELECTION HASCARET) of SEL with T))
        (COPY                                                (* Copy source)
              (replace (SELECTION HOW) of SEL with COPYSELSHADE)
              (replace (SELECTION HOWHEIGHT) of SEL with 1)
              (replace (SELECTION HASCARET) of SEL with NIL))
        (COPYLOOKS                                           (* copylooks source)
                   (replace (SELECTION HOW) of SEL with COPYLOOKSSELSHADE)
                   (replace (SELECTION HOWHEIGHT) of SEL with 2)
                   (replace (SELECTION HASCARET) of SEL with NIL))
        (MOVE                                                (* Copy source)
              (replace (SELECTION HOW) of SEL with EDITMOVESHADE)
              (replace (SELECTION HOWHEIGHT) of SEL with 16384)
              (replace (SELECTION HASCARET) of SEL with NIL))
        (DELETE                                              (* To be deleted instantly)
                (replace (SELECTION HOW) of SEL with BLACKSHADE)
                (replace (SELECTION HOWHEIGHT) of SEL with 16384)
                (replace (SELECTION HASCARET) of SEL with NIL)
                NIL)
        (PENDINGDEL                                          (* Delete at next type-in)
                    (replace (SELECTION HOW) of SEL with BLACKSHADE)
                    (replace (SELECTION HOWHEIGHT) of SEL with 16384)
                    (replace (SELECTION HASCARET) of SEL with T)
                    NIL)
        (INVERTED                                            (* For people who really want to see 
                                                             what's selected.)
                  (replace (SELECTION HOW) of SEL with BLACKSHADE)
                  (replace (SELECTION HOWHEIGHT) of SEL with 16384)
                  (replace (SELECTION HASCARET) of SEL with T)
                  NIL)
        NIL])
)
(DEFINEQ

(\SHOWSEL
  [LAMBDA (SEL HOW ON)                                       (* ; "Edited 21-Oct-2022 18:41 by rmk")
                                                             (* ; "Edited  5-Oct-2022 16:03 by rmk")
                                                             (* ; "Edited 22-May-92 16:11 by jds")

    (* ;; "Highlight the selection SEL, according to HOW, turning it on or off according to ON")

    (PROG ((TEXTOBJ (fetch (SELECTION SELTEXTOBJ) of SEL))
           (SHADE (OR (fetch (SELECTION HOW) of SEL)
                      BLACKSHADE))
           (SHADEHEIGHT (OR (fetch (SELECTION HOWHEIGHT) of SEL)
                            1)))

     (* ;; "This operation only makes sense if there is a set selection and a window to highlighting, and we are allowed to update.")

          (CL:UNLESS (AND (fetch (SELECTION SET) of SEL)
                          (fetch (TEXTOBJ \WINDOW) of (fetch (SELECTION SELTEXTOBJ) of SEL))
                          (NOT (fetch (TEXTOBJ TXTDON'TUPDATE) of TEXTOBJ)))
                 (RETURN))
          [for DS inside (fetch (TEXTOBJ \WINDOW) of TEXTOBJ) as LINES
             inside (fetch (TEXTOBJ LINES) of TEXTOBJ) as L1 in (fetch (SELECTION L1) of SEL)
             as LN in (fetch (SELECTION LN) of SEL) as CARET inside (fetch (TEXTOBJ CARET)
                                                                       of TEXTOBJ)
             do (CL:WHEN (fetch (SELECTION SELOBJ) of SEL)   (* ; "Hand off to the object")
                    (\TEDIT.OBJECT.SHOWSEL TEXTOBJ SEL ON DS)
                    (RETURN))
                (COND
                   [(AND ON (NOT (fetch (SELECTION ONFLG) of SEL)))
                                                             (* ; 
                                                             "It's off and we want to turn it on")
                    (\SHOWSEL.HILIGHT TEXTOBJ SEL LINES L1 LN DS SHADEHEIGHT SHADE)
                    (COND
                       [(AND (fetch (SELECTION HASCARET) of SEL)
                             (ffetch (TEXTOBJ TXTEDITING) of TEXTOBJ))

                        (* ;; 
      "If the selection has a caret, turn one on. But only if the document is actively being edited.")

                        (COND
                           [(EQ (fetch (SELECTION POINT) of SEL)
                                'LEFT)                       (* ; "At the LEFT end of the selection")
                            (COND
                               ((AND L1 (IGEQ (fetch (LINEDESCRIPTOR YBOT) of L1)
                                              0))
                                (\SETCARET (fetch (SELECTION X0) of SEL)
                                       (fetch (LINEDESCRIPTOR YBASE) of L1)
                                       DS TEXTOBJ CARET))
                               (T (MOVETO -10 -10 DS]
                           ((AND LN (IGEQ (fetch (LINEDESCRIPTOR YBOT) of LN)
                                          0))                (* ; "Or at the RIGHT end.")
                            (\SETCARET (fetch (SELECTION XLIM) of SEL)
                                   (fetch (LINEDESCRIPTOR YBASE) of LN)
                                   DS TEXTOBJ CARET))
                           (T                                (* ; 
             "Neither end is on screen.  For self-caret flashers, move the caret location off-screen")
                              (MOVETO -10 -10 DS]
                       (T (SELECTQ (fetch (SELECTION POINT) of SEL)
                              (LEFT (AND L1 (MOVETO (fetch (SELECTION X0) of SEL)
                                                   (fetch (LINEDESCRIPTOR YBASE) of L1)
                                                   DS)))
                              (RIGHT (AND LN (MOVETO (fetch (SELECTION XLIM) of SEL)
                                                    (fetch (LINEDESCRIPTOR YBASE) of LN)
                                                    DS)))
                              NIL]
                   ((AND (NOT ON)
                         (fetch (SELECTION ONFLG) of SEL))   (* ; 
                                                         "Turn off a currently highlighted selection")
                    (COND
                       ((AND (fetch (SELECTION HASCARET) of SEL)
                             (NOT (fetch (TEXTOBJ TXTREADONLY) of TEXTOBJ))
                             (ffetch (TEXTOBJ TXTEDITING) of TEXTOBJ))

                        (* ;; 
               "If the selection has a caret, make sure it's turned off, and pick it off the screen.")

                        (\EDIT.UPCARET CARET)))
                    (\SHOWSEL.HILIGHT TEXTOBJ SEL LINES L1 LN DS SHADEHEIGHT SHADE]
          (replace (SELECTION ONFLG) of SEL with ON])

(\SHOWSEL.HILIGHT
  [LAMBDA (TEXTOBJ SEL LINES L1 LN DS SHADEHEIGHT SHADE X0 XLIM)
                                                             (* ; "Edited  4-Mar-2023 20:39 by rmk")
                                                             (* ; "Edited  8-Nov-2022 13:36 by rmk")
                                                             (* ; "Edited  4-Nov-2022 12:43 by rmk")
                                                             (* ; "Edited 11-Oct-2022 20:55 by rmk")
                                                             (* ; "Edited  5-Oct-2022 16:12 by rmk")
                                                             (* ; "Edited  4-Oct-2022 13:12 by rmk")
                                                             (* ; "Edited  1-Oct-2022 16:11 by rmk")
                                                             (* ; "Edited 30-May-91 23:07 by jds")

(* ;;; "Do the actual highlighting and unhighlighting of a selection for \SHOWSEL")

    (CL:UNLESS X0
        (SETQ X0 (fetch (SELECTION X0) of SEL)))
    (CL:UNLESS XLIM
        (SETQ XLIM (fetch (SELECTION XLIM) of SEL)))
    (PROG (LL LEFT RIGHT (DISTBELOW 0))
          (CL:WHEN (OR L1 LN)                                (* ; 
                  "One end or the other is on-screen, so it makes sense to try displaying something.")
              [COND
                 ((AND L1 (EQ L1 LN)
                       (IGEQ (fetch (LINEDESCRIPTOR YBOT) of L1)
                             0))                             (* ; 
                           "It's all in a single line;  just underline the right section and beat it")
                  (BITBLT NIL 0 0 DS X0 (IDIFFERENCE (fetch (LINEDESCRIPTOR YBOT) of L1)
                                               DISTBELOW)
                         (IDIFFERENCE XLIM X0)
                         (IMIN SHADEHEIGHT (fetch (LINEDESCRIPTOR LHEIGHT) of L1))
                         'TEXTURE
                         'INVERT SHADE))
                 (T                                          (* ; "Different lines.")
                    (CL:WHEN (AND L1 (IGEQ (fetch (LINEDESCRIPTOR YBOT) of L1)
                                           0))               (* ; 
                                     "If the first line is known, underline the right section of it.")
                        (CL:SETQ RIGHT (fetch (LINEDESCRIPTOR LXLIM) of L1))
                        (BITBLT NIL 0 0 DS X0 (IDIFFERENCE (fetch (LINEDESCRIPTOR YBOT) of L1)
                                                     DISTBELOW)
                               (IDIFFERENCE RIGHT X0)
                               (IMIN SHADEHEIGHT (fetch (LINEDESCRIPTOR LHEIGHT) of L1))
                               'TEXTURE
                               'INVERT SHADE))
                    (SETQ LL (OR L1 LINES))
                    (AND LL (SETQ LL (fetch (LINEDESCRIPTOR NEXTLINE) of LL)))
                                                             (* ; 
          "The line after the first, or the top line on the screen -- if we didn't have a first line")
                    (for old LL by (fetch (LINEDESCRIPTOR NEXTLINE) of LL) while LL
                       until (OR (EQ LL LN)
                                 (ILESSP (fetch (LINEDESCRIPTOR YBOT) of LL)
                                        (fetch (TEXTOBJ WBOTTOM) of TEXTOBJ)))
                       do                                    (* ; 
                                                        "Highlight every line between first and last")
                          (SETQ LEFT (fetch (LINEDESCRIPTOR LEFTMARGIN) of LL))
                          (SETQ RIGHT (fetch (LINEDESCRIPTOR LXLIM) of LL))
                          (BITBLT NIL 0 0 DS LEFT (IDIFFERENCE (fetch (LINEDESCRIPTOR YBOT)
                                                                  of LL)
                                                         DISTBELOW)
                                 (IDIFFERENCE RIGHT LEFT)
                                 (IMIN SHADEHEIGHT (fetch (LINEDESCRIPTOR LHEIGHT) of LL))
                                 'TEXTURE
                                 'INVERT SHADE))
                    (CL:WHEN (AND LL (IGEQ (fetch (LINEDESCRIPTOR YBOT) of LL)
                                           (fetch (TEXTOBJ WBOTTOM) of TEXTOBJ)))
                                                             (* ; 
                                                     "The final line is on-screen.  Hilight it, too.")
                        (SETQ LEFT (fetch (LINEDESCRIPTOR LEFTMARGIN) of LL))
                        (BITBLT NIL 0 0 DS LEFT (IDIFFERENCE (fetch (LINEDESCRIPTOR YBOT)
                                                                of LN)
                                                       DISTBELOW)
                               (IDIFFERENCE (OR XLIM (fetch (SELECTION XLIM) of SEL))
                                      LEFT)
                               (IMIN SHADEHEIGHT (fetch (LINEDESCRIPTOR LHEIGHT) of LL))
                               'TEXTURE
                               'INVERT SHADE))])])

(\TEDIT.UPDATE.SHOWSEL
  [LAMBDA (NSEL OSEL TSTFLG)                                 (* ; "Edited 21-Oct-2022 18:41 by rmk")
                                                             (* ; "Edited 30-May-91 23:03 by jds")
                                                             (* Update the selection highlighting 
                                                             to reflect the differences between 
                                                             NSEL and OSEL)
    (PROG ((TEXTOBJ (fetch (SELECTION SELTEXTOBJ) of OSEL)))
          (PROG ((SHADE (OR (fetch (SELECTION HOW) of OSEL)
                            BLACKSHADE))
                 (SHADEHEIGHT (OR (fetch (SELECTION HOWHEIGHT) of OSEL)
                                  1))
                 (EXCHFLG NIL)
                 TSEL LL)
                (replace (SELECTION ONFLG) of NSEL with T)   (* Make the new selection think that 
                                                             we've really displayed all its new 
                                                             aspects.)
                [COND
                   ((fetch (SELECTION HASCARET) of OSEL)     (* Turn off the caret, if need be)
                    (for CARET inside (fetch (TEXTOBJ CARET) of TEXTOBJ) do (\EDIT.UPCARET CARET]
                [COND
                   ((NEQ (fetch (SELECTION CH#) of NSEL)
                         (fetch (SELECTION CH#) of OSEL))    (* The new selection starts earlier;
                                                             add hilight at the front)
                    (COND
                       ((ILESSP (fetch (SELECTION CH#) of OSEL)
                               (fetch (SELECTION CH#) of NSEL))
                                                             (* Actually, it starts later;
                                                             just exchange the selections)
                        (swap OSEL NSEL)
                        (SETQ EXCHFLG T)))
                    (for NEWL1 inside (fetch (SELECTION L1) of NSEL) as OLDL1
                       inside (fetch (SELECTION L1) of OSEL) as LINES
                       inside (fetch (TEXTOBJ LINES) of TEXTOBJ) as DS
                       inside (fetch (TEXTOBJ \WINDOW) of TEXTOBJ)
                       do (\SHOWSEL.HILIGHT TEXTOBJ OSEL LINES NEWL1 OLDL1 DS SHADEHEIGHT SHADE
                                 (fetch (SELECTION X0) of NSEL)
                                 (fetch (SELECTION X0) of OSEL]
                (COND
                   (EXCHFLG                                  (* Put the selections back as they 
                                                             were.)
                          (swap OSEL NSEL)
                          (SETQ EXCHFLG NIL)))
                (COND
                   ((ILESSP (fetch (SELECTION CHLIM) of NSEL)
                           (fetch (SELECTION CHLIM) of OSEL))

         (* Arrange for NSEL to be the selection that ends later, so that one set of code 
         will do both earlier AND later cases.)

                    (swap OSEL NSEL)
                    (SETQ EXCHFLG T)))
                (for OLDLN in (fetch (SELECTION LN) of OSEL) as NEWLN
                   in (fetch (SELECTION LN) of NSEL) as LINES inside (fetch (TEXTOBJ LINES)
                                                                        of TEXTOBJ) as OLDL1
                   in (fetch (SELECTION L1) of OSEL) as DS inside (fetch (TEXTOBJ \WINDOW)
                                                                     of TEXTOBJ)
                   do (\SHOWSEL.HILIGHT TEXTOBJ OSEL LINES OLDLN NEWLN DS SHADEHEIGHT SHADE
                             (fetch (SELECTION XLIM) of OSEL)
                             (fetch (SELECTION XLIM) of NSEL)))
                (COND
                   (EXCHFLG                                  (* Put the selections back as they 
                                                             were.)
                          (SETQ TSEL OSEL)
                          (SETQ OSEL NSEL)
                          (SETQ NSEL TSEL)))
                (COND
                   ((fetch (SELECTION HASCARET) of NSEL)     (* Now put the caret back up.)
                    (for L1 in (fetch (SELECTION L1) of NSEL) as LN in (fetch (SELECTION LN)
                                                                          of NSEL) as DS
                       inside (fetch (TEXTOBJ \WINDOW) of TEXTOBJ) as CARET
                       inside (fetch (TEXTOBJ CARET) of TEXTOBJ)
                       do (COND
                             ((EQ (fetch (SELECTION POINT) of NSEL)
                                  'LEFT)                     (* Left end of the selection)
                              (AND L1 (\SETCARET (fetch (SELECTION X0) of NSEL)
                                             (fetch (LINEDESCRIPTOR YBOT) of L1)
                                             DS TEXTOBJ CARET)))
                             (LN                             (* Right end of the selection)
                                 (\SETCARET (fetch (SELECTION XLIM) of NSEL)
                                        (fetch (LINEDESCRIPTOR YBOT) of LN)
                                        DS TEXTOBJ CARET])

(\TEDIT.SHOWSELS
  [LAMBDA (TEXTOBJ HOW ON)                                   (* ; "Edited 30-May-91 23:03 by jds")
                                                             (* Turns all the selections for a 
                                                             given Textobj on or off)
    (for SELN in (LIST (fetch (TEXTOBJ SEL) of TEXTOBJ)
                       (fetch (TEXTOBJ SHIFTEDSEL) of TEXTOBJ)
                       (fetch (TEXTOBJ MOVESEL) of TEXTOBJ)
                       (fetch (TEXTOBJ DELETESEL) of TEXTOBJ))
       do (AND (fetch (SELECTION SET) of SELN)
               (\SHOWSEL SELN HOW ON])

(\TEDIT.REFRESH.SHOWSEL
  [LAMBDA (TEXTOBJ NEWSEL OLDSEL OLDOP NEWOP EXTENDING)      (* ; "Edited 30-May-91 23:03 by jds")

         (* * Update the screen hilighting to account for the changes that have taken 
         place between OLDSEL and NEWSEL.)

    (DECLARE (USEDFREE . GLOBALSEL))
    (PROG (NOSEL)
          (COND
             ((AND EXTENDING (EQ OLDOP NEWOP))

         (* If we're extending a selection and the looks haven't changed, we can do it the 
         fast way, to prevent flicker.)

              (\TEDIT.UPDATE.SHOWSEL NEWSEL OLDSEL)
              (\COPYSEL NEWSEL OLDSEL)
              (replace (SELECTION ONFLG) of OLDSEL with T))
             (T 

         (* Otherwise, we have to turn the old one off, change things, and turn the new 
         one on.)

                (\SHOWSEL OLDSEL NIL NIL)
                (COND
                   ((NEQ OLDOP NEWOP)

         (* He changed his mind about copying, deleting, or whatever --
         change the kind of selection it is.)

                    (SELECTQ NEWOP
                        ((NORMAL PENDINGDEL) 
                             (SETQ GLOBALSEL TEDIT.SELECTION)
                             (SETQ NOSEL (fetch (TEXTOBJ SEL) of TEXTOBJ)))
                        (COPY (SETQ GLOBALSEL TEDIT.SHIFTEDSELECTION)
                              (SETQ NOSEL (fetch (TEXTOBJ SHIFTEDSEL) of TEXTOBJ)))
                        (MOVE (SETQ GLOBALSEL TEDIT.MOVESELECTION)
                              (SETQ NOSEL (fetch (TEXTOBJ MOVESEL) of TEXTOBJ)))
                        (DELETE (SETQ GLOBALSEL TEDIT.DELETESELECTION)
                                (SETQ NOSEL (fetch (TEXTOBJ DELETESEL) of TEXTOBJ)))
                        (COPYLOOKS (SETQ GLOBALSEL TEDIT.COPYLOOKSSELECTION)
                                   (SETQ NOSEL (fetch (TEXTOBJ SHIFTEDSEL) of TEXTOBJ)))
                        NIL)                                 (* Remember the new operation type.)
                    (replace (SELECTION SET) of OLDSEL with NIL)
                                                             (* Turn off the old kind of selection, 
                                                             so it doesn't reappear to haunt us.)
                    (AND (fetch (SELECTION SET) of NOSEL)
                         (\SHOWSEL NOSEL NIL NIL))           (* If there was a new-type selection 
                                                             around, turn it off.)
                    (SETQ OLDSEL NOSEL)                      (* Now cut over to the new selection)
                    (\TEDIT.SET.SEL.LOOKS OLDSEL NEWOP)      (* And set it up looking right.)
                    ))
                (\COPYSEL NEWSEL OLDSEL)
                (replace (SELECTION ONFLG) of OLDSEL with NIL)
                                                             (* Make sure we can turn the 
                                                             highlighting on.)
                (\SHOWSEL OLDSEL NIL T)))
          (RETURN (OR NOSEL OLDSEL])
)
(DEFINEQ

(\COPYSEL
  [LAMBDA (FROM TO)                                          (* ; "Edited  2-Mar-2023 14:55 by rmk")
                                                             (* ; "Edited 21-Oct-2022 18:42 by rmk")
                                                             (* ; "Edited 31-May-91 12:27 by jds")

    (* ;; "Copy a SELECTION record from FROM to TO, without creating any new ones")

    (replace (SELECTION Y0) of TO with (fetch (SELECTION Y0) of FROM))
    (replace (SELECTION X0) of TO with (fetch (SELECTION X0) of FROM))
    (replace (SELECTION CH#) of TO with (fetch (SELECTION CH#) of FROM))
    (replace (SELECTION XLIM) of TO with (fetch (SELECTION XLIM) of FROM))
    (replace (SELECTION CHLIM) of TO with (fetch (SELECTION CHLIM) of FROM))
    (replace (SELECTION DCH) of TO with (fetch (SELECTION DCH) of FROM))
    (replace (SELECTION L1) of TO with (COPY (fetch (SELECTION L1) of FROM)))
    (replace (SELECTION LN) of TO with (COPY (fetch (SELECTION LN) of FROM)))
    (replace (SELECTION YLIM) of TO with (fetch (SELECTION YLIM) of FROM))
    (replace (SELECTION POINT) of TO with (fetch (SELECTION POINT) of FROM))
    (replace (SELECTION SET) of TO with (fetch (SELECTION SET) of FROM))
    (replace (SELECTION SELTEXTOBJ) of TO with (fetch (SELECTION SELTEXTOBJ) of FROM))
    (replace (SELECTION SELKIND) of TO with (fetch (SELECTION SELKIND) of FROM))
    (replace (SELECTION HOW) of TO with (fetch (SELECTION HOW) of FROM))
    (replace (SELECTION HOWHEIGHT) of TO with (fetch (SELECTION HOWHEIGHT) of FROM))
    (replace (SELECTION HASCARET) of TO with (fetch (SELECTION HASCARET) of FROM))
    (replace (SELECTION SELOBJ) of TO with (fetch (SELECTION SELOBJ) of FROM))
    (replace (SELECTION ONFLG) of TO with (fetch (SELECTION ONFLG) of FROM])

(\TEDIT.SEL.CHANGED?
  [LAMBDA (NEWSEL OLDSEL OLDSELOP NEWSELOP)                  (* ; "Edited  4-Feb-2023 23:09 by rmk")
                                                             (* ; "Edited 21-Oct-2022 18:41 by rmk")
                                                             (* ; "Edited 30-May-91 23:01 by jds")

    (* ;; "Decide whether there has been an interesting change in the selection, so we can decide whether to refresh its hilighting on the screen.")

    (AND NEWSEL (fetch (SELECTION SET) of NEWSEL)
         (NOT (AND (fetch (SELECTION SET) of OLDSEL)
                   (EQ (fetch (SELECTION SET) of OLDSEL)
                       (fetch (SELECTION SET) of NEWSEL))
                   (EQUAL (fetch (SELECTION CH#) of NEWSEL)
                          (fetch (SELECTION CH#) of OLDSEL))
                   (EQUAL (fetch (SELECTION CHLIM) of NEWSEL)
                          (fetch (SELECTION CHLIM) of OLDSEL))
                   (EQ (fetch (SELECTION SELTEXTOBJ) of NEWSEL)
                       (fetch (SELECTION SELTEXTOBJ) of OLDSEL))
                   (EQ (fetch (SELECTION POINT) of NEWSEL)
                       (fetch (SELECTION POINT) of OLDSEL))
                   (EQ (fetch (SELECTION HOW) of NEWSEL)
                       (fetch (SELECTION HOW) of OLDSEL))
                   (EQ (fetch (SELECTION HOWHEIGHT) of NEWSEL)
                       (fetch (SELECTION HOWHEIGHT) of OLDSEL))
                   (EQ OLDSELOP NEWSELOP])
)



(* ;; "User entries to the selection code")

(DEFINEQ

(TEDIT.GETPOINT
  [LAMBDA (STREAM SEL)                                       (* ; "Edited  6-Feb-2023 15:54 by rmk")
                                                             (* ; "Edited 30-May-91 23:03 by jds")

    (* ;; "Given a selection, tell the CH# that type-in would be inserted in front of.  IF SEL is given, use it to decide.  Otherwise, use STREAM's current selection.")

    (CL:UNLESS SEL
        (SETQ SEL (fetch (TEXTOBJ SEL) of (TEXTOBJ STREAM))))
    (SELECTQ (fetch (SELECTION POINT) of SEL)
        (LEFT (fetch (SELECTION CH#) of SEL))
        (RIGHT (fetch (SELECTION CHLIM) of SEL))
        (SHOULDNT "Selection's POINT is neither RIGHT nor LEFT."])

(TEDIT.GETSEL
  [LAMBDA (STREAM)                                           (* ; "Edited 30-May-91 23:03 by jds")
    (create SELECTION using (fetch (TEXTOBJ SEL) of (fetch (TEXTSTREAM TEXTOBJ) of STREAM])

(TEDIT.MAKESEL
  [LAMBDA (STREAM CH# LEN POINT)                             (* ; "Edited 21-Oct-2022 18:37 by rmk")
                                                             (* ; "Edited 30-May-91 23:03 by jds")
    (PROG ((SEL (fetch (TEXTOBJ SEL) of (fetch (TEXTSTREAM TEXTOBJ) of STREAM)))
           (TEXTOBJ (fetch (TEXTSTREAM TEXTOBJ) of STREAM)))
          (\SHOWSEL SEL NIL NIL)
          (replace (SELECTION CH#) of SEL with CH#)
          (replace (SELECTION CHLIM) of SEL with (IMAX CH# (IPLUS CH# LEN)))
          (replace (SELECTION DCH) of SEL with LEN)
          (replace (SELECTION POINT) of SEL with (OR POINT 'LEFT))
          (replace (SELECTION SELTEXTOBJ) of SEL with TEXTOBJ)
          (replace (SELECTION SET) of SEL with T)
          (AND (fetch (TEXTOBJ \WINDOW) of TEXTOBJ)
               (\FIXSEL SEL TEXTOBJ))
          (\SHOWSEL SEL NIL T])

(TEDIT.SCANSEL
  [LAMBDA (TSTREAM)                                          (* ; "Edited  8-Sep-2022 23:29 by rmk")
                                                             (* ; "Edited 30-May-91 23:03 by jds")

    (* ;; "Set up to read the selected text;  return the sel's length or NIL if nothing selected.")

    (LET (SEL)
         (SETQ SEL (fetch (TEXTOBJ SEL) of (fetch (TEXTSTREAM TEXTOBJ) of STREAM)))
         (CL:WHEN (fetch (SELECTION SET) of SEL)
             (\TEXTSETFILEPTR TSTREAM (SUB1 (fetch (SELECTION CH#) of SEL)))
             (fetch (SELECTION DCH) of SEL))])

(TEDIT.SET.SEL.LOOKS
  [LAMBDA (SEL OPERATION)                                    (* ; "Edited 30-May-91 23:01 by jds")
                                                             (* Set what the selection should be 
                                                             displayed like, given what it's for
                                                             (NORMAL, COPY, MOVE, etc.))
    (PROG ((WASON (fetch (SELECTION ONFLG) of SEL)))
          (\SHOWSEL SEL NIL NIL)
          (SELECTQ OPERATION
              (NORMAL                                        (* Regular selection)
                      (replace (SELECTION HOW) of SEL with BLACKSHADE)
                      (replace (SELECTION HOWHEIGHT) of SEL with 1)
                      (replace (SELECTION HASCARET) of SEL with T))
              (COPY                                          (* Copy source)
                    (replace (SELECTION HOW) of SEL with COPYSELSHADE)
                    (replace (SELECTION HOWHEIGHT) of SEL with 1)
                    (replace (SELECTION HASCARET) of SEL with NIL))
              (COPYLOOKS                                     (* copylooks source)
                         (replace (SELECTION HOW) of SEL with COPYLOOKSSELSHADE)
                         (replace (SELECTION HOWHEIGHT) of SEL with 2)
                         (replace (SELECTION HASCARET) of SEL with NIL))
              (MOVE                                          (* Copy source)
                    (replace (SELECTION HOW) of SEL with EDITMOVESHADE)
                    (replace (SELECTION HOWHEIGHT) of SEL with 16384)
                    (replace (SELECTION HASCARET) of SEL with NIL))
              (DELETE                                        (* To be deleted instantly)
                      (replace (SELECTION HOW) of SEL with BLACKSHADE)
                      (replace (SELECTION HOWHEIGHT) of SEL with 16384)
                      (replace (SELECTION HASCARET) of SEL with NIL)
                      NIL)
              (PENDINGDEL                                    (* Delete at next type-in)
                          (replace (SELECTION HOW) of SEL with BLACKSHADE)
                          (replace (SELECTION HOWHEIGHT) of SEL with 16384)
                          (replace (SELECTION HASCARET) of SEL with T)
                          NIL)
              (INVERTED                                      (* For people who really want to see 
                                                             what's selected.)
                        (replace (SELECTION HOW) of SEL with BLACKSHADE)
                        (replace (SELECTION HOWHEIGHT) of SEL with 16384)
                        (replace (SELECTION HASCARET) of SEL with T)
                        NIL)
              NIL)
          (\SHOWSEL SEL NIL WASON])

(TEDIT.SETSEL
  [LAMBDA (STREAM CH# LEN POINT PENDINGDELFLG LEAVECARETLOOKS OPERATION)
                                                             (* ; "Edited 15-Feb-2023 17:36 by rmk")
                                                             (* ; "Edited  9-Nov-2022 23:17 by rmk")
                                                             (* ; "Edited  8-Nov-2022 14:18 by rmk")
                                                             (* ; "Edited 21-Oct-2022 18:35 by rmk")
                                                             (* ; "Edited 24-Aug-2022 14:11 by rmk")
                                                             (* ; "Edited 13-Aug-2022 21:32 by rmk")
                                                             (* ; "Edited  6-Aug-2022 21:51 by rmk")
                                                             (* ; "Edited 30-May-91 23:05 by jds")

    (* ;; "Given a text stream or textobj, and a piece of text to select, set the internal selection, and return it.")
                                                             (* ; "Make sure we got a stream")
    (LET ((TEXTOBJ (TEXTOBJ STREAM))
          SEL TEXTLEN PC)
         (SETQ SEL (fetch (TEXTOBJ SEL) of TEXTOBJ))
         (SETQ TEXTLEN (fetch (TEXTOBJ TEXTLEN) of TEXTOBJ))
         (\SHOWSEL SEL NIL NIL)                              (* ; "First turn the old sel off.")
         [COND
            ((type? SELECTION CH#)                           (* ; 
                                                          "He gave use a selection;  just plug it in")
             (\COPYSEL CH# SEL)                              (* ; 
                                                             "And make sure it can be turned on.")
             (replace (SELECTION ONFLG) of SEL with NIL))
            (T                                               (* ; "He fed us numbers;  use them")
               (SETQ LEN (IMAX 0 LEN))                       (* ; "Length must be positive")
               (SETQ CH# (IMIN (IMAX 1 CH#)
                               (ADD1 TEXTLEN)))              (* ; 
                                        "Starting character. If beyond  TEXTLEN, then just after EOF")
               (replace (SELECTION CH#) of SEL with CH#)
               [replace (SELECTION CHLIM) of SEL with (IMAX CH# (IMIN (IPLUS CH# LEN)
                                                                      (ADD1 TEXTLEN]

               (* ;; "LEN may have been reduced by TEXTLEN")

               (SETQ LEN (IDIFFERENCE (fetch (SELECTION CHLIM) of SEL)
                                (fetch (SELECTION CH#) of SEL)))
               (replace (SELECTION DCH) of SEL with LEN)
               (replace (SELECTION POINT) of SEL with (OR (AND (IGREATERP CH# TEXTLEN)
                                                               'LEFT)
                                                          POINT
                                                          'LEFT))
                                                             (* ; "Which side the caret should go on")
               (freplace (SELECTION SELOBJ) of SEL with (CL:WHEN (EQ 1 LEN)
                                                             (* ; "If CH# beyond TEXTLEN, LEN is 0")
                                                            (SETQ PC (\CHTOPC (fetch (SELECTION
                                                                                      CH#)
                                                                                 of SEL)
                                                                            TEXTOBJ))
                                                            (CL:WHEN (EQ OBJECT.PTYPE (PTYPE PC))
                                                                   (PCONTENTS PC)))]
         (replace (SELECTION SELTEXTOBJ) of SEL with TEXTOBJ)(* ; 
                                                             "Link it back to the associated textobj")
         [COND
            (PENDINGDELFLG                                   (* ; 
                                                    "This selection is to be a pending-deletion sel.")
                   (replace (TEXTOBJ BLUEPENDINGDELETE) of TEXTOBJ with T)
                                                             (* ; 
                                                         "Warn TEdit that there's a deletion pending")
                   (\TEDIT.SET.SEL.LOOKS SEL (OR OPERATION 'PENDINGDEL))
                                                             (* ; 
                                                             "And make the selection look right.")
                   )
            (T                                               (* ; 
                                                    "This selection is to be a pending-deletion sel.")
               (TEDIT.RESET.EXTEND.PENDING.DELETE SEL)
               (\TEDIT.SET.SEL.LOOKS SEL (OR OPERATION 'NORMAL]
         (replace (SELECTION SET) of SEL with T)             (* ; 
                                                      "Mark the selection as valid for others to use")
         (CL:UNLESS LEAVECARETLOOKS                          (* ; 
                                                             "And set the insertion looks to follow.")
             (replace (TEXTOBJ CARETLOOKS) of TEXTOBJ with (\TEDIT.GET.INSERT.CHARLOOKS TEXTOBJ SEL)))
         (\FIXSEL SEL TEXTOBJ)                               (* ; 
                                                             "Update the selection's screen location")
         (\SHOWSEL SEL NIL T)                                (* ; "Highlight it on the screen")
         SEL])

(TEDIT.SHOWSEL
  [LAMBDA (STREAM ONFLG SEL)                                 (* ; "Edited 21-Oct-2022 18:36 by rmk")
                                                             (* ; "Edited 30-May-91 23:04 by jds")
    (PROG ((TEXTOBJ (fetch (TEXTSTREAM TEXTOBJ) of STREAM)))
          (CL:WHEN SEL                                       (* ; 
                              "He's giving us a selection to highlight.  Connect it to this textobj.")
              (replace (SELECTION SELTEXTOBJ) of SEL with TEXTOBJ)
              (\FIXSEL SEL TEXTOBJ))
          (\SHOWSEL (OR SEL (fetch (TEXTOBJ SEL) of TEXTOBJ))
                 NIL ONFLG])
)
(DECLARE%: DONTCOPY
  (FILEMAP (NIL (10335 23863 (TEDIT.SEL.AS.STRING 10345 . 11752) (TEDIT.SELECTED.PIECES 11754 . 12861) (
\TEDIT.FIND.FIRST.LINE 12863 . 17112) (\TEDIT.FIND.LAST.LINE 17114 . 18394) (
\TEDIT.FIND.OVERLAPPING.LINE 18396 . 18810) (\TEDIT.FIND.PROTECTED.END 18812 . 20740) (
\TEDIT.FIND.PROTECTED.START 20742 . 23198) (\TEDIT.WORD.BOUND 23200 . 23861)) (23907 24386 (
\CREATE.TEDIT.SELECTION 23917 . 23987) (\CREATE.TEDIT.SHIFTEDSELECTION 23989 . 24092) (
\CREATE.TEDIT.MOVESELECTION 24094 . 24223) (\CREATE.TEDIT.DELETESELECTION 24225 . 24384)) (25138 64577
 (TEDIT.EXTEND.SEL 25148 . 35073) (TEDIT.SELECT 35075 . 36554) (TEDIT.SCAN.LINE 36556 . 44502) (
\TEDIT.SCAN.LINE.WORD 44504 . 48507) (TEDIT.SELECT.LINE.SCANNER 48509 . 56256) (\TEDIT.SELECT.OBJECT 
56258 . 60305) (\PARALINES 60307 . 64575)) (64578 82097 (\FIXSEL 64588 . 73011) (\TEDIT.FIXDELSEL 
73013 . 76069) (\TEDIT.FIXINSSEL 76071 . 77286) (\TEDIT.FIXSELS 77288 . 78000) (\CHTOX 78002 . 82095))
 (82098 85552 (TEDIT.RESET.EXTEND.PENDING.DELETE 82108 . 82685) (\TEDIT.SET.SEL.LOOKS 82687 . 85550)) 
(85553 105853 (\SHOWSEL 85563 . 90711) (\SHOWSEL.HILIGHT 90713 . 96136) (\TEDIT.UPDATE.SHOWSEL 96138
 . 101931) (\TEDIT.SHOWSELS 101933 . 102634) (\TEDIT.REFRESH.SHOWSEL 102636 . 105851)) (105854 109679 
(\COPYSEL 105864 . 108046) (\TEDIT.SEL.CHANGED? 108048 . 109677)) (109732 122294 (TEDIT.GETPOINT 
109742 . 110473) (TEDIT.GETSEL 110475 . 110715) (TEDIT.MAKESEL 110717 . 111725) (TEDIT.SCANSEL 111727
 . 112379) (TEDIT.SET.SEL.LOOKS 112381 . 115536) (TEDIT.SETSEL 115538 . 121586) (TEDIT.SHOWSEL 121588
 . 122292)))))
STOP
