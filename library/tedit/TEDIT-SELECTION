(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)

(FILECREATED " 9-Oct-2023 23:07:10" {WMEDLEY}<library>tedit>TEDIT-SELECTION.;338 111275 

      :EDIT-BY rmk

      :CHANGES-TO (FNS \SHOWSEL \TEDIT.UPDATE.SHOWSEL TEDIT.EXTEND.SEL \TEDIT.REFRESH.SHOWSEL 
                       \SHOWSEL.HILIGHT)

      :PREVIOUS-DATE " 2-Oct-2023 09:09:22" {WMEDLEY}<library>tedit>TEDIT-SELECTION.;330)


(PRETTYCOMPRINT TEDIT-SELECTIONCOMS)

(RPAQQ TEDIT-SELECTIONCOMS
       ((DECLARE%: EVAL@COMPILE DONTCOPY (EXPORT (RECORDS SELECTION)
                                                (CONSTANTS (COPYSELSHADE 30583)
                                                       (COPYLOOKSSELSHADE 30583)
                                                       (EDITMOVESHADE -1)
                                                       (EDITGRAY 32800))
                                                (MACROS WITHINLINEP LINESELECTEDP)
                                                (MACROS GETSEL SETSEL FGETSEL FSETSEL)))
        (INITRECORDS SELECTION)
        (FNS \TEDIT.SELECTION.DEFPRINT)
        (FNS TEDIT.SEL.AS.STRING TEDIT.SEL.AS.SEXPR TEDIT.SELECTED.PIECES \TEDIT.FIND.FIRST.LINE 
             \TEDIT.FIND.OVERLAPPING.LINE \TEDIT.FIND.PROTECTED.END \TEDIT.FIND.PROTECTED.START 
             \TEDIT.WORD.BOUND)
        (INITVARS (TEDIT.EXTEND.PENDING.DELETE T))
                                                             (* ; "Setting for a %"Laurel%" mode")
        (FNS \CREATE.TEDIT.SELECTION \CREATE.TEDIT.SHIFTEDSELECTION \CREATE.TEDIT.MOVESELECTION 
             \CREATE.TEDIT.DELETESELECTION)
                                                             (* ; 
                                                         "Added by yabu.fx, for LOADUP without DWIM.")
        (VARS (TEDIT.SELECTION (\CREATE.TEDIT.SELECTION))
              (TEDIT.SCRATCHSELECTION (\CREATE.TEDIT.SELECTION))
              (TEDIT.SHIFTEDSELECTION (\CREATE.TEDIT.SHIFTEDSELECTION))
              (TEDIT.COPYLOOKSSELECTION (\CREATE.TEDIT.SHIFTEDSELECTION))
              (TEDIT.MOVESELECTION (\CREATE.TEDIT.MOVESELECTION))
              (TEDIT.DELETESELECTION (\CREATE.TEDIT.DELETESELECTION))
              (TEDIT.SELPENDING NIL))
        (GLOBALVARS TEDIT.SELECTION TEDIT.SCRATCHSELECTION TEDIT.MOVESELECTION TEDIT.SHIFTEDSELECTION
               TEDIT.COPYLOOKSSELECTION TEDIT.DELETESELECTION TEDIT.SELPENDING 
               TEDIT.EXTEND.PENDING.DELETE)
        (COMS                                                (* ; "Selection manipulating code")
              (FNS TEDIT.EXTEND.SEL TEDIT.SELECT TEDIT.SCAN.LINE \TEDIT.SCAN.LINE.WORD 
                   TEDIT.SELECT.LINE.SCANNER \TEDIT.SELECT.OBJECT \PARALINES)
              (FNS \FIXSEL \TEDIT.ADJUST.SELS \CHTOX \TEDIT.COLLECTSELS \TEDIT.SELECTION.UNSET)
              (FNS TEDIT.RESET.EXTEND.PENDING.DELETE \TEDIT.SET.SEL.LOOKS)
              (FNS \SHOWSEL \SHOWSEL.HILIGHT \TEDIT.UPDATE.SHOWSEL \TEDIT.SHOWSELS 
                   \TEDIT.REFRESH.SHOWSEL \TEDIT.UPDATE.SEL)
              (FNS \COPYSEL \TEDIT.SEL.CHANGED?)
              (FNS TEDIT.SELECTALL))
        (COMS 
              (* ;; "User entries to the selection code")

              (FNS TEDIT.GETPOINT TEDIT.MAKEPOINT TEDIT.GETSEL TEDIT.MAKESEL TEDIT.SCANSEL 
                   TEDIT.SET.SEL.LOOKS TEDIT.SETSEL TEDIT.SHOWSEL))))
(DECLARE%: EVAL@COMPILE DONTCOPY 
(* "FOLLOWING DEFINITIONS EXPORTED")(DECLARE%: EVAL@COMPILE

(DATATYPE SELECTION 
          (
           (* ;; "Description of a piece of selected text for TEdit.  Text has to be selected before it can be operated on by the user. The caret is to the left of CH# if POINT is LEFT, to the keft of CHLIM if POINT is RIGHT.")

           (* ;; "If DCH > 0, highlighting goes from CH# to (SUB1 CHLIM = (SUB1 (IPLUS CH# DCH)).")

           (* ;; "If DCH=0, this is a caret-only selection, with no highlighting.  In that case CHLIM=(ADD1 CH#) and POINT essentially indicates whether the caret blinks before or after CH#.")

           Y0                                                (* ; 
                                                             "Y value of topmost line of selection")
           X0                                                (* ; 
                                                "X value of left edge of selection on the first line")
           NIL                                               (* ; 
                                               "Was DX: Width of the selection, if it's on one line.")
           CH#                                               (* ; 
                                                             "CH# of the first selected character")
           XLIM                                              (* ; 
                                  "X value of right edge of last selected character on the last line")
           CHLIM                                             (* ; "Last character is at (SUB1 CHLIM)")
           DCH                                               (* ; 
      "# of characters selected (can be zero, for empty/point selection.) This controls highlighting")
           L1                                                (* ; 
                              "-> line descriptor for the line where the first selected character is")
           LN                                                (* ; 
                            "-> line descriptor for the line which contains the end of the selection")
           YLIM                                              (* ; 
                                          "Y value of the bottom of the line that ends the selection")
           POINT                                             (* ; 
                                             "Which end should the caret appear at?  (LEFT or RIGHT)")
           (SET FLAG)                                        (* ; 
                                                           "T if this selection is real;  NIL if not")
           (SELTEXTOBJ FULLXPOINTER)                         (* ; 
                                                           "TEXTOBJ that describes the selected text")
           SELKIND                                           (* ; 
                                              "What kind of selection?  CHAR or WORD or LINE or PARA")
           HOW                                               (* ; 
                                                             "SHADE used to highlight this selection")
           HOWHEIGHT                                         (* ; 
                             "Height of the highlight (1 usually, full line for delete selection...)")
           (HASCARET FLAG)                                   (* ; 
                                                    "T if there should be a caret for this selection")
           SELOBJ                                            (* ; 
                                               "If this selection is inside an object, which object?")
           (ONFLG FLAG)                                      (* ; 
                                          "T if the selection is highlighted on the screen, else NIL")
           SELOBJINFO                                        (* ; 
                         "A Place for the selected object to put info about selection inside itself.")
           )
          (INIT (DEFPRINT 'SELECTION (FUNCTION \TEDIT.SELECTION.DEFPRINT)))
          [ACCESSFNS (DX (AND (FIXP (fetch (SELECTION X0) of DATUM))
                              (FIXP (fetch (SELECTION XLIM) of DATUM))
                              (IDIFFERENCE (fetch (SELECTION XLIM) of DATUM)
                                     (fetch (SELECTION X0) of DATUM]
          SET _ NIL HOW _ BLACKSHADE HOWHEIGHT _ 1 HASCARET _ T Y0 _ 0 X0 _ 0 POINT _ 'LEFT L1 _
          (LIST NIL)
          LN _ (LIST NIL))
)

(/DECLAREDATATYPE 'SELECTION
       '(POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER FLAG
               FULLXPOINTER POINTER POINTER POINTER FLAG POINTER FLAG POINTER)
       '((SELECTION 0 POINTER)
         (SELECTION 2 POINTER)
         (SELECTION 4 POINTER)
         (SELECTION 6 POINTER)
         (SELECTION 8 POINTER)
         (SELECTION 10 POINTER)
         (SELECTION 12 POINTER)
         (SELECTION 14 POINTER)
         (SELECTION 16 POINTER)
         (SELECTION 18 POINTER)
         (SELECTION 20 POINTER)
         (SELECTION 20 (FLAGBITS . 0))
         (SELECTION 22 FULLXPOINTER)
         (SELECTION 24 POINTER)
         (SELECTION 26 POINTER)
         (SELECTION 28 POINTER)
         (SELECTION 28 (FLAGBITS . 0))
         (SELECTION 30 POINTER)
         (SELECTION 30 (FLAGBITS . 0))
         (SELECTION 32 POINTER))
       '34)

(DEFPRINT 'SELECTION (FUNCTION \TEDIT.SELECTION.DEFPRINT))
(DECLARE%: EVAL@COMPILE 

(RPAQQ COPYSELSHADE 30583)

(RPAQQ COPYLOOKSSELSHADE 30583)

(RPAQQ EDITMOVESHADE -1)

(RPAQQ EDITGRAY 32800)


(CONSTANTS (COPYSELSHADE 30583)
       (COPYLOOKSSELSHADE 30583)
       (EDITMOVESHADE -1)
       (EDITGRAY 32800))
)
(DECLARE%: EVAL@COMPILE 

(PUTPROPS WITHINLINEP MACRO [OPENLAMBDA (CHNO LINE)
                              (AND (IGEQ CHNO (fetch (LINEDESCRIPTOR LCHAR1) of LINE))
                                   (ILEQ CHNO (fetch (LINEDESCRIPTOR LCHARLIM) of LINE])

(PUTPROPS LINESELECTEDP MACRO [OPENLAMBDA (L CH# CHLIM)
                                (AND (IGEQ CHLIM (GETLD L LCHAR1))
                                     (ILEQ CH# (FGETLD L LCHARLIM])
)
(DECLARE%: EVAL@COMPILE 

(PUTPROPS GETSEL MACRO ((S FIELD)
                        (fetch (SELECTION FIELD) of S)))

(PUTPROPS SETSEL MACRO ((S FIELD NEWVALUE)
                        (replace (SELECTION FIELD) of S with NEWVALUE)))

(PUTPROPS FGETSEL MACRO ((S FIELD)
                         (ffetch (SELECTION FIELD) of S)))

(PUTPROPS FSETSEL MACRO ((S FIELD NEWVALUE)
                         (freplace (SELECTION FIELD) of S with NEWVALUE)))
)

(* "END EXPORTED DEFINITIONS")

)

(/DECLAREDATATYPE 'SELECTION
       '(POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER FLAG
               FULLXPOINTER POINTER POINTER POINTER FLAG POINTER FLAG POINTER)
       '((SELECTION 0 POINTER)
         (SELECTION 2 POINTER)
         (SELECTION 4 POINTER)
         (SELECTION 6 POINTER)
         (SELECTION 8 POINTER)
         (SELECTION 10 POINTER)
         (SELECTION 12 POINTER)
         (SELECTION 14 POINTER)
         (SELECTION 16 POINTER)
         (SELECTION 18 POINTER)
         (SELECTION 20 POINTER)
         (SELECTION 20 (FLAGBITS . 0))
         (SELECTION 22 FULLXPOINTER)
         (SELECTION 24 POINTER)
         (SELECTION 26 POINTER)
         (SELECTION 28 POINTER)
         (SELECTION 28 (FLAGBITS . 0))
         (SELECTION 30 POINTER)
         (SELECTION 30 (FLAGBITS . 0))
         (SELECTION 32 POINTER))
       '34)

(DEFPRINT 'SELECTION (FUNCTION \TEDIT.SELECTION.DEFPRINT))
(DEFINEQ

(\TEDIT.SELECTION.DEFPRINT
  [LAMBDA (SEL STREAM)                                       (* ; "Edited 23-May-2023 00:06 by rmk")
                                                             (* ; "Edited 21-May-2023 09:15 by rmk")
    (LET ((TEXTOBJ (fetch (SELECTION SELTEXTOBJ) of SEL))
          WHICH INFO LOC)
         (CL:WHEN TEXTOBJ
             (SETQ WHICH (if (EQ SEL (fetch (TEXTOBJ SEL) of TEXTOBJ))
                             then 'SEL
                           elseif (EQ SEL (fetch (TEXTOBJ SHIFTEDSEL) of TEXTOBJ))
                             then 'SHIFTED
                           elseif (EQ SEL (fetch (TEXTOBJ MOVESEL) of TEXTOBJ))
                             then 'MOVE
                           elseif (EQ SEL (fetch (TEXTOBJ DELETESEL) of TEXTOBJ))
                             then 'DELETE
                           elseif (EQ SEL (fetch (TEXTOBJ SCRATCHSEL) of TEXTOBJ))
                             then 'SCRATCH)))
         (SETQ INFO (if (GETSEL SEL SET)
                        then (CONCAT (GETSEL SEL CH#)
                                    "-"
                                    (GETSEL SEL DCH)
                                    "-"
                                    (NTHCHAR (GETSEL SEL POINT)
                                           1)
                                    " "
                                    (CL:IF (EQ (GETSEL SEL HOWHEIGHT)
                                               1)
                                        "_"
                                        (CHARACTER 127)))
                      else "unset"))
         (SETQ LOC (LOC SEL))
         (CONS (CONCAT "{S:" (OR WHICH "?")
                      " " INFO " " (CAR LOC)
                      "/"
                      (CDR LOC)
                      "}"])
)
(DEFINEQ

(TEDIT.SEL.AS.STRING
  [LAMBDA (TSTREAM SEL)                                      (* ; "Edited 23-May-2023 12:36 by rmk")
                                                             (* ; "Edited  8-Sep-2022 23:35 by rmk")
                                                             (* ; "Edited 22-Apr-93 16:44 by jds")

    (* ;; "RMK:  WHAT IF THE STREAM CONTAINS AN OBJECT?")

    (* ;; 
    "Given a text stream, go to the TEXTOBJ, get the current selection, and return it as a string.")

    (CL:UNLESS SEL
        (SETQ SEL (fetch (TEXTOBJ SEL) of (fetch (TEXTSTREAM TEXTOBJ) of TSTREAM))))
    (SETQ TSTREAM (TEXTSTREAM TSTREAM))
    (LET (RESULT (LEN (GETSEL SEL DCH)))
         (COND
            ((ZEROP LEN)                                     (* ; 
                                              "There is no selection, or it's zero-width.  Return ''")
             (CONCAT ""))
            (T (SETQ RESULT (ALLOCSTRING LEN (CHARCODE SPACE)))
                                                             (* ; "The resulting string")
               (\TEXTSETFILEPTR TSTREAM (SUB1 (GETSEL SEL CH#)))
                                                             (* ; 
                                               "Starting point for the string is start of selection.")
               (for I from 1 to LEN do (RPLCHARCODE RESULT I (BIN TSTREAM)))
               RESULT])

(TEDIT.SEL.AS.SEXPR
  [LAMBDA (TSTREAM SEL RDTBL FLG)                            (* ; "Edited  9-Jul-2023 09:37 by rmk")
                                                             (* ; "Edited 22-Apr-93 16:44 by jds")

    (* ;; "Applies READ to the characters in the selection.  For a point selection it just takes that as the starting point and goes until the read completes.")

    (* ;; 
    "Given a text stream, go to the TEXTOBJ, get the current selection, and return it as a string.")

    (SETQ TSTREAM (TEXTSTREAM TSTREAM))
    (CL:UNLESS SEL
        (SETQ SEL (TEXTSEL (TEXTOBJ TSTREAM))))
    (COND
       ((ZEROP (GETSEL SEL DCH))                             (* ; "Point selection, read forward")
        (\TEXTSETFILEPTR TSTREAM (SUB1 (GETSEL SEL CH#)))
        (READ TSTREAM RDTBL FLG))
       (T (LET [(SCRATCH (OPENSTREAM '{NODIRCORE} 'BOTH]
               (COPYBYTES TSTREAM SCRATCH (GETSEL SEL CH#)
                      (SUB1 (GETSEL SEL CHLIM)))
               (SETFILEPTR SCRATCH 0)
               (READ SCRATCH RDTBL FLG])

(TEDIT.SELECTED.PIECES
  [LAMBDA (TEXTOBJ SEL PIECEMAPFN FNARG1 FNARG2)             (* ; "Edited 21-Jun-2023 20:30 by rmk")
                                                             (* ; "Edited  9-May-2023 13:16 by rmk")
                                                             (* ; "Edited 11-Apr-2023 12:07 by rmk")
                                                             (* ; "Edited 20-Apr-93 17:06 by jds")

    (* ;; "Create a list of pieces corresponding to the selection;  if FNARG, apply it to each piece, and use the result instead of the piece")

    (CL:UNLESS (ZEROP (TEXTLEN TEXTOBJ))
        (for PC inselpieces (\SELPIECES SEL NIL TEXTOBJ)
           collect (CL:IF PIECEMAPFN
                       (APPLY* PIECEMAPFN PC TEXTOBJ FNARG1 FNARG2)
                       PC)))])

(\TEDIT.FIND.FIRST.LINE
  [LAMBDA (TEXTOBJ CH# PANE)                                 (* ; "Edited 11-May-2023 10:02 by rmk")
                                                             (* ; "Edited  5-Apr-2023 09:19 by rmk")
                                                             (* ; "Edited 27-Mar-2023 15:29 by rmk")
                                                             (* ; "Edited  8-Sep-2022 21:02 by rmk")
                                                             (* ; "Edited 30-May-91 23:02 by jds")

    (* ;; "Starting from the closest prior known line break, format forward until we create the line that has the right CH# in it.")

    (* ;; "Replaces by \TEDIT.PREVIOUS.LINEBREAK")

    (HELP)
    (CL:WHEN (ILEQ CH# (TEXTLEN TEXTOBJ))
        (if (ILESSP (TEXTLEN TEXTOBJ)
                   1)
            then (SETLD (fetch (TEXTWINDOW PLINES) of PANE)
                        NEXTLINE NIL)
                 (fetch (TEXTWINDOW PLINES) of PANE)
          else (bind LINE (PHEIGHT _ (fetch (REGION HEIGHT) of (DSPCLIPPINGREGION NIL PANE)))
                     (PREV _ (fetch (TEXTWINDOW PLINES) of PANE))
                     (CHNO _ (\TEDIT.PREVIOUS.LINEBREAK TEXTOBJ CH#))
                  do (SETQ LINE (\FORMATLINE TEXTOBJ CHNO))
                     (SETYPOS LINE PHEIGHT)                  (* ; 
                                                             "These lines are all %"above%" the pane")
                     (LINKLD PREVLINE LINE)
                     (SETQ PREV LINE)
                     (SETQ CHNO (ADD1 (GETLD LINE LCHARLIM))) repeatwhile (ILEQ CHNO CH#)
                  finally (RETURN LINE))))])

(\TEDIT.FIND.OVERLAPPING.LINE
  [LAMBDA (LINES Y)                                          (* ; "Edited  4-May-2023 12:23 by rmk")
                                                             (* ; "Edited 30-May-91 22:57 by jds")
    (find L inlines LINES suchthat (ILEQ (GETLD L YBOT)
                                         Y])

(\TEDIT.FIND.PROTECTED.END
  [LAMBDA (TEXTOBJ CH# LIMITCH#)                             (* ; "Edited  7-Apr-2023 22:13 by rmk")
                                                             (* ; "Edited 23-Oct-2022 17:44 by rmk")
                                                             (* ; "Edited  5-Sep-2022 15:31 by rmk")
                                                             (* ; "Edited 22-Aug-2022 13:21 by rmk")
                                                             (* ; "Edited 18-Apr-93 23:49 by jds")

    (* ;; "If LIMITCH# is given, the search will stop there.")

    (SETQ LIMITCH# (IMIN LIMITCH# (TEXTLEN TEXTOBJ)))
    (LET (START-OF-PIECE)
         (DECLARE (SPECVARS START-OF-PIECE))
         (for PC inpieces (\CHTOPC CH# TEXTOBJ T) until (IGREATERP START-OF-PIECE LIMITCH#)
            do 
               (* ;; "Move forward thru the pieces of the document, looking for one that contains protected text.  If that comes before the end of the region we're interested in, tell the caller about the earlier end to selectable text.")

               (CL:WHEN (fetch (CHARLOOKS CLPROTECTED) of (PLOOKS PC))

                   (* ;; 
           "We've found the beginning of a protected region, previous char is the last selectable.  ")

                   (RETURN (SUB1 START-OF-PIECE)))
               (add START-OF-PIECE (PLEN PC)) finally (RETURN LIMITCH#])

(\TEDIT.FIND.PROTECTED.START
  [LAMBDA (TEXTOBJ CH# LIMITCH#)                             (* ; "Edited  7-Apr-2023 21:59 by rmk")
                                                             (* ; "Edited  4-Feb-2023 10:23 by rmk")
                                                             (* ; "Edited 23-Oct-2022 16:20 by rmk")
                                                             (* ; "Edited  2-Sep-2022 15:26 by rmk")
                                                             (* ; "Edited 22-Aug-2022 13:20 by rmk")
                                                             (* ; "Edited 30-Apr-93 01:39 by jds")

    (* ;; "Starting from a CH# in a selectable region, returns the char-number just after the end of the first preceding protected piece.  This is used to limit selections to unprotected text, and to prevent selection of the protected text between two unprotected areas.")

    (* ;; "Will stop looking when it passes LIMITCH#, or at the beginning of the document.")

    (LET (START-OF-PIECE)                                    (* ; 
                                                             "Gets us to the beginning of CH# piece")
         (DECLARE (SPECVARS START-OF-PIECE))
         (for PC backpieces (PREVPIECE (\CHTOPC CH# TEXTOBJ T)) until (ILEQ START-OF-PIECE LIMITCH#)
            do (CL:WHEN (fetch (CHARLOOKS CLPROTECTED) of (PLOOKS PC))

                   (* ;; "Return the CH# just AFTER this first protected piece.")

                   (RETURN START-OF-PIECE))
               (add START-OF-PIECE (IMINUS (PLEN PC))) finally (RETURN LIMITCH#])

(\TEDIT.WORD.BOUND
  [LAMBDA (TEXTOBJ PREVCH CH)                                (* ; "Edited 27-Sep-2022 23:54 by rmk")
                                                             (* ; "Edited 25-Sep-2022 23:48 by rmk")
                                                             (* ; "Edited 30-May-91 23:02 by jds")
    (CL:WHEN (AND (FIXP PREVCH)
                  (FIXP CH))
        (LET [(READSA (fetch READSA of (OR (fetch (TEXTOBJ TXTWTBL) of TEXTOBJ)
                                           TEDIT.WORDBOUND.READTABLE]
             (NEQ (\SYNCODE READSA PREVCH)
                  (\SYNCODE READSA CH))))])
)

(RPAQ? TEDIT.EXTEND.PENDING.DELETE T)



(* ; "Setting for a %"Laurel%" mode")

(DEFINEQ

(\CREATE.TEDIT.SELECTION
  [LAMBDA NIL
    (create SELECTION])

(\CREATE.TEDIT.SHIFTEDSELECTION
  [LAMBDA NIL
    (create SELECTION
           HASCARET _ NIL])

(\CREATE.TEDIT.MOVESELECTION
  [LAMBDA NIL
    (CREATE SELECTION
           HASCARET _ NIL
           HOWHEIGHT _ 32767])

(\CREATE.TEDIT.DELETESELECTION
  [LAMBDA NIL
    (CREATE SELECTION
           HOW _ BLACKSHADE
           HASCARET _ NIL
           HOWHEIGHT _ 32767])
)



(* ; "Added by yabu.fx, for LOADUP without DWIM.")


(RPAQ TEDIT.SELECTION (\CREATE.TEDIT.SELECTION))

(RPAQ TEDIT.SCRATCHSELECTION (\CREATE.TEDIT.SELECTION))

(RPAQ TEDIT.SHIFTEDSELECTION (\CREATE.TEDIT.SHIFTEDSELECTION))

(RPAQ TEDIT.COPYLOOKSSELECTION (\CREATE.TEDIT.SHIFTEDSELECTION))

(RPAQ TEDIT.MOVESELECTION (\CREATE.TEDIT.MOVESELECTION))

(RPAQ TEDIT.DELETESELECTION (\CREATE.TEDIT.DELETESELECTION))

(RPAQQ TEDIT.SELPENDING NIL)
(DECLARE%: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS TEDIT.SELECTION TEDIT.SCRATCHSELECTION TEDIT.MOVESELECTION TEDIT.SHIFTEDSELECTION 
       TEDIT.COPYLOOKSSELECTION TEDIT.DELETESELECTION TEDIT.SELPENDING TEDIT.EXTEND.PENDING.DELETE)
)



(* ; "Selection manipulating code")

(DEFINEQ

(TEDIT.EXTEND.SEL
  [LAMBDA (X Y OSEL TEXTOBJ SELOPERATION PANE)               (* ; "Edited  5-Oct-2023 22:08 by rmk")
                                                             (* ; "Edited 19-Apr-2023 17:36 by rmk")
                                                             (* ; "Edited 19-Apr-93 13:49 by jds")

    (* ;; "Note:  CHLIM is one past the last character, hence ADD1/SUB1 in some places below.")

    (* ;; 
    "Gather a new selected character, and extend OSEL to include it.  Return the extended selection.")

    (CL:UNLESS (ZEROP (TEXTLEN TEXTOBJ))
        (PROG (NPOINT SETOSELFLG (NEWSEL (TEDIT.SELECT X Y TEXTOBJ (SELECTQ (GETSEL OSEL SELKIND)
                                                                       ((LINE PARA) 
                                                                            'LINE)
                                                                       ((WORD CHAR) 
                                                                            'TEXT)
                                                                       'TEXT)
                                                (OR (EQ (GETSEL OSEL SELKIND)
                                                        'WORD)
                                                    (EQ (GETSEL OSEL SELKIND)
                                                        'PARA))
                                                SELOPERATION PANE T)))
              (CL:UNLESS (AND NEWSEL (GETSEL NEWSEL SET))    (* ; "No new selection, return OSEL")
                  (RETURN OSEL))
              (\TEDIT.SET.SEL.LOOKS NEWSEL SELOPERATION)

         (* ;; "Make the new selection be the same kind as the original, as to what it's for -- regular, copy-source, etc.")

              [SETQ NPOINT (COND
                              ((IGEQ (GETSEL NEWSEL CHLIM)
                                     (GETSEL OSEL CHLIM))    (* ; 
                               "The new selection ends to the right of the old one.  Move this edge.")
                               'RIGHT)
                              ((ILEQ (GETSEL NEWSEL CH#)
                                     (GETSEL OSEL CH#))      (* ; 
                             "If the new selection starts to left of old one, caret goes at the LEFT")
                               'LEFT)
                              ([IGREATERP (IABS (IDIFFERENCE (GETSEL NEWSEL CHLIM)
                                                       (GETSEL OSEL CHLIM)))
                                      (IABS (IDIFFERENCE (GETSEL NEWSEL CH#)
                                                   (GETSEL OSEL CH#]

                               (* ;; 
      "New X (right click) is in the middle of an old selection.  Bump OLDSEL's left end to NEWSEL's")

                               (SETQ SETOSELFLG T)
                               'LEFT)
                              (T 
                                 (* ;; 
                            "Must be shrinking from the right.  Move OLDSEL's CHLIM back to NEWSEL's")

                                 (SETQ SETOSELFLG T)
                                 'RIGHT]
              (SELECTQ NPOINT
                  (LEFT                                      (* ; 
                                                          "Caret's to the new left, copy old right  ")
                        (SETSEL NEWSEL CHLIM (IMAX (GETSEL NEWSEL CHLIM)
                                                   (GETSEL OSEL CHLIM)))
                        (SETSEL NEWSEL XLIM (GETSEL OSEL XLIM))
                        (SETSEL NEWSEL YLIM (GETSEL OSEL YLIM))
                        (SETSEL NEWSEL LN (COPY (GETSEL OSEL LN)))

                        (* ;; "Only copying is allowed from a protected area (menu).  Otherwise, only extend to its start. If CH# changes, L1 may also change, so need to fixup")

                        (CL:UNLESS (EQ SELOPERATION 'COPY)
                            [SETSEL NEWSEL CH# (IMAX (GETSEL NEWSEL CH#)
                                                     (\TEDIT.FIND.PROTECTED.START TEXTOBJ
                                                            (SUB1 (GETSEL OSEL CHLIM))
                                                            (GETSEL NEWSEL CH#]))
                  (RIGHT                                     (* ; 
                                                           "Caret's to the new right, copy old left.")
                         (SETSEL NEWSEL CH# (IMIN (GETSEL NEWSEL CH#)
                                                  (GETSEL OSEL CH#)))
                         (SETSEL NEWSEL X0 (GETSEL OSEL X0))
                         (SETSEL NEWSEL Y0 (GETSEL OSEL Y0))
                         (SETSEL NEWSEL L1 (COPY (GETSEL OSEL L1)))

                         (* ;; "Only copying is allowed from a protected area (menu).  Otherwise, only extend to its end. If CHLIM changes, LN may also change, so need to fixup")

                         (CL:UNLESS (EQ SELOPERATION 'COPY)
                             [SETSEL NEWSEL CHLIM
                                    (IMIN (GETSEL NEWSEL CHLIM)
                                          (ADD1 (\TEDIT.FIND.PROTECTED.END
                                                 TEXTOBJ
                                                 (GETSEL OSEL CH#)
                                                 (ADD1 (\TEDIT.FIND.PROTECTED.END TEXTOBJ
                                                              (GETSEL OSEL CH#)
                                                              (SUB1 (GETSEL NEWSEL CHLIM]
                             (SETSEL NEWSEL CH# (IMIN (SUB1 (GETSEL NEWSEL CHLIM))
                                                      (GETSEL NEWSEL CH#)))))
                  NIL)
              (SETSEL NEWSEL DCH (IDIFFERENCE (GETSEL NEWSEL CHLIM)
                                        (GETSEL NEWSEL CH#)))
              (SETSEL NEWSEL POINT NPOINT)
              (CL:UNLESS (EQ (GETSEL OSEL SELOBJ)
                             (GETSEL NEWSEL SELOBJ))         (* ; 
                                                          "Keep object if it is in overlapping part?")
                  (SETSEL NEWSEL SELOBJ NIL))
              (\FIXSEL NEWSEL TEXTOBJ)
              (CL:WHEN SETOSELFLG                            (* ; 
                                                   "It is wise to copy the new sel into the old one.")
                  (\COPYSEL NEWSEL OSEL))
              (RETURN NEWSEL)))])

(TEDIT.SELECT
  [LAMBDA (X Y TEXTOBJ REGION WORDSELFLG SELOPERATION PANE EXTENDING)
                                                             (* ; "Edited 23-May-2023 12:38 by rmk")
                                                             (* ; "Edited  9-Apr-2023 23:01 by rmk")
                                                             (* ; "Edited 30-May-91 23:07 by jds")

    (* ;; "Select the character word, line, or paragraph the mouse is pointing at.")

    (LET ((SEL (TEDIT.SELECT.LINE.SCANNER X Y TEXTOBJ (\TEDIT.LINE.LIST TEXTOBJ PANE)
                      REGION WORDSELFLG SELOPERATION PANE EXTENDING)))
         (CL:WHEN (AND (type? SELECTION SEL)
                       (GETSEL SEL SET))                     (* ; 
                                                        "He pointed at something real;  return that.")
             (\TEDIT.SET.SEL.LOOKS SEL SELOPERATION)
             (\FIXSEL SEL TEXTOBJ PANE)                      (* ; 
                                                          "This PANE is good, fix all the other ones")
             SEL)])

(TEDIT.SCAN.LINE
  [LAMBDA (TEXTOBJ LINE X Y WORDSELFLG SELOPERATION PANE EXTENDING)
                                                             (* ; "Edited  5-May-2023 00:18 by rmk")
                                                             (* ; "Edited 18-Apr-2023 23:09 by rmk")
                                                             (* ; "Edited  9-Apr-2023 18:21 by rmk")
                                                             (* ; "Edited 31-May-91 12:26 by jds")

    (* ;; "Given that LINE meets the mouse-Y criterion, find the selection picked out by the mouse X  coordinate.  This may run to the right if the mouse-position is protected.")

    (PROG (SEL CHARSLOT CLOOKS CHNO TXB TX SELSLOT SELCHAR SELHERE PASTRIGHT
               (THISLINE (fetch (TEXTOBJ THISLINE) of TEXTOBJ)))
          (CL:UNLESS (EQ LINE (fetch DESC of THISLINE))      (* ; 
                                                            "Make sure the cache describes this line")
              (SETQ LINE (\FORMATLINE TEXTOBJ (GETLD LINE LCHAR1)
                                LINE)))                      (* ; 
                                                          "Convert X's display units to LINE's scale")
          (SETQ TX (GETLD LINE LX1))
          (SETQ TXB TX)
          (SETQ X (IMAX X TX))                               (* ; 
                                                     "Move over if the click was in the left margin.")
          (SETQ CHNO (FGETLD LINE LCHAR1))

     (* ;; "")

     (* ;; "Step 1:  Find the slot, character number, and ending TX for the character at the incoming mouse X position. ")

          (CL:WHEN (SETQ PASTRIGHT (IGREATERP X (FGETLD LINE LXLIM)))
                                                             (* ; 
                                                     "Past the end, put it inside the last character")
              (SETQ X (SUB1 (FGETLD LINE LXLIM))))
          (for old CHARSLOT incharslots THISLINE
             do (CL:UNLESS CHAR                              (* ; "Invisible or charlooks")
                    (CL:IF (SMALLP CHARW)
                        (add CHNO CHARW)
                        (SETQ CLOOKS CHARW))
                    (GO $$ITERATE))
                (SETQ TXB TX)
                (add TX CHARW)
                (CL:WHEN (IGEQ TX X)
                    (if SELHERE
                        then (SETQ TX TXB)                   (* ; 
                                      "Now presumaby looking at }, we want a 0-char selection at TXB")
                             (SETQ X TX)
                             (RETURN)
                      else 
                           (* ;; "Presumably the end of a selected region in a menu, probably {.  It appears that we want to go one more")

                           (SETQ SELHERE (fetch (CHARLOOKS CLSELHERE) of CLOOKS)))
                    (CL:UNLESS (fetch (CHARLOOKS CLPROTECTED) of CLOOKS)
                                                             (* ; 
                                                     "If protected, we keep going beyond the given X")
                        (RETURN)))
                (add CHNO 1) finally 

                                   (* ;; "We lose if all characters after X are protected.")

                                   (CL:WHEN (fetch (CHARLOOKS CLPROTECTED) of CLOOKS)
                                          (SETQ CHARSLOT NIL)))
          (CL:UNLESS CHARSLOT                                (* ; "Everything after X was protected.")
              (RETURN 'DON'T))

     (* ;; "CHNO and CHARSLOT:  the character pointed to, CLOOKS the looks of that character.")

     (* ;; "CHNO and CHARSLOT are either flagged as CLSELHERE or are not flagged as CLPROTECTED.")

     (* ;; "TXB the end of CHNO-1, TX the end of CHNO.  They both may be beyond X, if protected.")

     (* ;; "")

          (SETQ SELSLOT CHARSLOT)
          (SETQ SELCHAR (CHAR SELSLOT))

     (* ;; 
     " CHNO and SELSLOT define a selectable character/object SELCHAR that runs from TXB to TX.    ")

     (* ;; "")

     (* ;; "The selection runs from TXB to TX and from CHNOB to CHNO.  In the character case, CHNOB=CHNO and TX-TB is the selection width (DX).")

     (* ;; "If the selected piece is SELHERE (presumably in a menu), the selection is specialized in various ways..")

          (SETQ SEL (fetch (TEXTOBJ SCRATCHSEL) of TEXTOBJ))
          [with SELECTION SEL (SETQ SELTEXTOBJ TEXTOBJ)
                (SETQ SET T)
                (SETQ SELKIND 'CHAR)
                (SETQ X0 TXB)                                (* ; 
   "X and Y values will be reset by \FIXSEL, but we have to track X for word selection and image obj")
                (SETQ XLIM TX)
                (SETQ Y0 (FGETLD LINE YBOT))
                (SETQ YLIM (FGETLD LINE YBOT))
                (SETQ CH# CHNO)
                (SETQ CHLIM (ADD1 CHNO))
                (SETQ SELOBJ NIL)
                (SETQ DCH (CL:IF SELHERE
                              0
                              1))                            (* ; "SELHERE is a point selection")
                (SETQ POINT (if (OR SELHERE (AND PASTRIGHT (FGETLD LINE FORCED-END)))
                                then 

                                 (* ;; "This is coordinated with the point selection in \FIXSEL. If we are past the end of an EOL-line, we want the caret to blink on the left but select and underline the EOL.")

                                     'LEFT
                              elseif (AND (IGEQ (IDIFFERENCE TX TXB)
                                                3)
                                          (IGEQ X (FOLDLO (IPLUS TX TXB)
                                                         2)))
                                then 

                                 (* ;; "To the right of an otherwise-protected insertion, past the middle of a selection that is wide enough (3 points) to discriminate, and not at the  end of an EOL-terminated line. ")

                                     'RIGHT
                              else 'LEFT]
          (CL:WHEN WORDSELFLG                                (* ; 
                                                        "Expand the selection to its word boundaries")
              (\TEDIT.SCAN.LINE.WORD X TEXTOBJ THISLINE SEL SELSLOT CLOOKS))
          (CL:WHEN (AND (type? IMAGEOBJ SELCHAR)
                        (NOT PASTRIGHT))                     (* ; 
                                                 "Don't interpret an object that X was backed up to.")
              (\TEDIT.SELECT.OBJECT TEXTOBJ SEL SELCHAR LINE X Y TXB PANE SELOPERATION
                     (COND
                        (EXTENDING 'RIGHT)
                        (WORDSELFLG 'MIDDLE)
                        (T 'LEFT))
                     EXTENDING))
          (for L1 on (GETSEL SEL L1) as LN on (GETSEL SEL LN) as P inpanes TEXTOBJ
             when (EQ P PANE) do (RPLACA L1 LINE)
                                 (RPLACA LN LINE))
          (RETURN SEL])

(\TEDIT.SCAN.LINE.WORD
  [LAMBDA (X TEXTOBJ THISLINE SEL SELSLOT SELLOOKS)          (* ; "Edited 26-May-2023 23:05 by rmk")
                                                             (* ; "Edited 20-Mar-2023 23:42 by rmk")
                                                             (* ; "Edited  6-Mar-2023 22:22 by rmk")
                                                             (* ; "Edited  2-Mar-2023 14:56 by rmk")
                                                             (* ; "Edited 26-Feb-2023 15:55 by rmk")

    (* ;; "SEL is a character selection at the SELSLOT character in THISLINE.  This expands it to its surrounding word boundaries. Looks are tracked for protection.")

    (* ;; " ")

    (CL:UNLESS (EQ 'CHAR (GETSEL SEL SELKIND))
           (SHOULDNT "Can only expand CHAR selections to WORD selections"))
    (LET (CH# CHLIM X0 XLIM)

         (* ;; "CH# will be the first charno of the word selection")

         (* ;; "CHLIM will be one past the last charno of the word selection")

         (* ;; "X0 will be the X at the beginning of the first char")

         (* ;; "XLIM will be the X at the end of last charL")

         (SETQ CH# (GETSEL SEL CH#))
         (SETQ CHLIM (GETSEL SEL CHLIM))                     (* ; "")
         (SETQ X0 (GETSEL SEL X0))
         (SETQ XLIM (GETSEL SEL XLIM))
         (for CHARSLOT (CLOOKS _ SELLOOKS)
              (LASTCHAR _ (CHAR SELSLOT)) backcharslots (PREVCHARSLOT SELSLOT)
            do (CL:UNLESS CHAR
                   (CL:IF (SMALLP CHARW)
                       (add CH# (IMINUS CHARW))
                       (SETQ CLOOKS CHARW))
                   (GO $$ITERATE))
               (CL:WHEN (OR (type? IMAGEOBJ CHAR)
                            (\TEDIT.WORD.BOUND TEXTOBJ CHAR LASTCHAR)
                            (fetch (CHARLOOKS CLPROTECTED) of CLOOKS))
                                                             (* ; "Stop at a protection bounary")
                   (RETURN))
               (SETQ LASTCHAR CHAR)
               (ADD X0 (IMINUS CHARW))
               (ADD CH# -1))

         (* ;; "And search forward for the end of the word")

         (for CHARSLOT (CLOOKS _ SELLOOKS)
              (PREVCHAR _ (CHAR SELSLOT)) incharslots (NEXTCHARSLOT SELSLOT)
            do (CL:UNLESS CHAR
                   (CL:IF (SMALLP CHARW)
                       (add CHLIM CHARW)
                       (SETQ CLOOKS CHARW))
                   (GO $$ITERATE))
               (CL:WHEN (OR (type? IMAGEOBJ CHAR)
                            (\TEDIT.WORD.BOUND TEXTOBJ PREVCHAR CHAR)
                            (fetch (CHARLOOKS CLPROTECTED) of CLOOKS))

                   (* ;; "XLIM is now the end of the last character of the word.")

                   (* ;; "CHLIM and XLIM should be OK if we run off the end.")

                   (RETURN))
               (add XLIM CHARW)
               (add CHLIM 1)
               (SETQ PREVCHAR CHAR))
         (SETSEL SEL SELKIND 'WORD)
         (SETSEL SEL CH# CH#)
         (SETSEL SEL CHLIM CHLIM)
         (SETSEL SEL DCH (IDIFFERENCE CHLIM CH#))
         (SETSEL SEL X0 X0)
         (SETSEL SEL XLIM XLIM)

         (* ;; "Move the point to the intended side of the word: To the right of an otherwise-protected insertion, past the middle of a selection that is wide enough to discriminate, and not at the  end of an EOL-terminated line. 3 is points.")

         (SETSEL SEL POINT (if [OR (fetch (CHARLOOKS CLSELHERE) of SELLOOKS)
                                   (AND (IGEQ (IDIFFERENCE XLIM X0)
                                              3)
                                        (IGEQ X (FOLDLO (IPLUS XLIM X0)
                                                       2]
                               then 'RIGHT
                             else 'LEFT])

(TEDIT.SELECT.LINE.SCANNER
  [LAMBDA (X Y TEXTOBJ LINES REGION WORDSELFLG SELOPERATION PANE EXTENDING)
                                                             (* ; "Edited 20-Jul-2023 20:38 by rmk")
                                                             (* ; "Edited 30-May-2023 14:17 by rmk")
                                                             (* ; "Edited 27-May-2023 15:18 by rmk")
                                                             (* ; "Edited 31-May-91 12:26 by jds")
    (CL:WHEN (INSIDEP (DSPCLIPPINGREGION NIL PANE)
                    X Y)                                     (* ; "Else, how did we get here? ")
        (PROG (LINE SEL PARALINES PARAFIRSTLINE PARALASTLINE PL1 PLN)
              [SETQ LINE (find L PREV inlines (GETLD LINES NEXTLINE)
                            suchthat (SETQ PREV (GETLD L PREVLINE))
                                  (ILEQ (GETLD L YBOT)
                                        Y) finally 

                                                 (* ;; 
                                          "Y is below thelast line.  Assume it points to the last.  ")

                                                 (RETURN (OR L PREV]
              (CL:UNLESS LINE                                (* ; "Can this happen?  Empty?")
                  (RETURN NIL))
              (SELECTQ REGION
                  ((TEXT PANE)                               (* ; 
                                                   "We're in the regular text area, which character?")
                       (CL:WHEN (AND (IGEQ (GETLD LINE LCHARLIM)
                                           (TEXTLEN TEXTOBJ))
                                     (IGREATERP (GETLD LINE YBOT)
                                            Y))

                           (* ;; 
              "Y is below the last line of the text: force selection past the very end of that line.")

                           (SETQ X (ADD1 (GETLD LINE LXLIM))))
                       (RETURN (TEDIT.SCAN.LINE TEXTOBJ LINE X Y WORDSELFLG SELOPERATION PANE 
                                      EXTENDING)))
                  (LINE                                      (* ; 
                                                             "We're in the line/paragraph region.")
                        (SETQ SEL (fetch (TEXTOBJ SCRATCHSEL) of TEXTOBJ))
                        (CL:WHEN (AND (GETLD LINE LHASPROT)
                                      (NEQ SELOPERATION 'COPY))

                            (* ;; "In a TEDIT menu, you can't select a whole paragraph or line.")

                            (SETSEL SEL SET NIL)
                            (RETURN SEL))
                        (SETSEL SEL SELTEXTOBJ TEXTOBJ)
                        (SETSEL SEL SET T)                   (* ; "Mark it valid.")
                        (SETSEL SEL SELOBJ NIL)              (* ; "Not selecting an object just yet")

                        (* ;; "Get the lines selected in this pane.  How does SCRATCHSEL know this?")

                        (for P inpanes TEXTOBJ as PL1 on (GETSEL SEL L1) as PLN
                           on (GETSEL SEL LN) when (EQ P PANE)
                           do (COND
                                 [WORDSELFLG                 (* ; 
                                                          "Select a paragraph: find first/last lines")
                                        (SETSEL SEL SELKIND 'PARA)
                                        (SETQ PARALINES (\PARALINES LINE TEXTOBJ))
                                        (SETQ PARAFIRSTLINE (CAR PARALINES))
                                        (SETQ PARALASTLINE (CADR PARALINES))
                                        (RPLACA PL1 PARAFIRSTLINE)
                                        (RPLACA PLN PARALASTLINE)

                                        (* ;; 
                                        "Put the caret at one end of the actually selected line")

                                        (\TEDIT.UPDATE.SEL SEL (GETLD PARAFIRSTLINE LCHAR1)
                                               (IDIFFERENCE (ADD1 (GETLD PARALASTLINE LCHARLIM))
                                                      (GETLD PARAFIRSTLINE LCHAR1))
                                               (COND
                                                  ((ILEQ (IDIFFERENCE (GETLD LINE LCHAR1)
                                                                (GETLD PARAFIRSTLINE LCHAR1))
                                                         (IDIFFERENCE (ADD1 (GETLD PARALASTLINE 
                                                                                   LCHARLIM))
                                                                (GETLD LINE LCHARLIM)))
                                                   'LEFT)
                                                  (T 'RIGHT]
                                 (T                          (* ; 
                                                            "Select just the line we're pointing at.")
                                    (RPLACA PL1 LINE)
                                    (RPLACA PLN LINE)
                                    (SETSEL SEL SELKIND 'LINE)
                                    (SETSEL SEL CH# (GETLD LINE LCHAR1))
                                    (SETSEL SEL CHLIM (ADD1 (GETLD LINE LCHARLIM)))
                                    (SETSEL SEL DCH (IDIFFERENCE (GETSEL SEL CHLIM)
                                                           (GETSEL SEL CH#)))
                                    (SETSEL SEL X0 (GETLD LINE LX1))
                                    (SETSEL SEL XLIM (GETLD LINE LXLIM))
                                    (SETSEL SEL Y0 (GETLD LINE YBOT))
                                    (SETSEL SEL YLIM (GETLD LINE YBOT))
                                    (SETSEL SEL POINT 'LEFT)
                                    (SETSEL SEL SET T)))
                              (RETURN))
                        (RETURN SEL))
                  (SHOULDNT "Unknown text/line-bar region?"))))])

(\TEDIT.SELECT.OBJECT
  [LAMBDA (TEXTOBJ SEL OBJ LINE X Y TXB SELPANE SELOPERATION WHERE)
                                                             (* ; "Edited 10-Apr-2023 08:38 by rmk")
                                                             (* ; "Edited 29-Mar-94 13:28 by jds")
    (replace (SELECTION SELOBJ) of SEL with OBJ)
    (replace (SELECTION X0) of SEL with TXB)
    (replace (SELECTION Y0) of SEL with (GETLD LINE YBOT LINE))
    (LET ([OBJBOX (OR (IMAGEOBJPROP OBJ 'BOUNDBOX)
                      (IMAGEBOX OBJ SELPANE 'DISPLAY]
          (DS (WINDOWPROP SELPANE 'DSP))
          SELRES)
         (RESETLST
             (RESETSAVE (DSPXOFFSET (IDIFFERENCE (IPLUS TXB (DSPXOFFSET NIL DS))
                                           (fetch XKERN of OBJBOX))
                               DS)
                    (LIST (FUNCTION DSPXOFFSET)
                          (DSPXOFFSET NIL DS)
                          DS))
             (RESETSAVE (DSPYOFFSET (IDIFFERENCE (IPLUS (GETLD LINE YBASE)
                                                        (DSPYOFFSET NIL DS))
                                           (fetch YDESC of OBJBOX))
                               DS)
                    (LIST (FUNCTION DSPYOFFSET)
                          (DSPYOFFSET NIL DS)
                          DS))
             (RESETSAVE (DSPCLIPPINGREGION (create REGION
                                                  LEFT _ 0
                                                  BOTTOM _ 0
                                                  WIDTH _ (IMIN (fetch XSIZE of OBJBOX)
                                                                (IDIFFERENCE (fetch (TEXTOBJ WRIGHT)
                                                                                of TEXTOBJ)
                                                                       TXB))
                                                  HEIGHT _ (fetch YSIZE of OBJBOX))
                               DS)
                    (LIST (FUNCTION DSPCLIPPINGREGION)
                          (DSPCLIPPINGREGION NIL DS)
                          DS))                               (* ; 
                                                             "Go tell him he's being pointed at.")
             (SETQ SELRES (ERSETQ (APPLY* (IMAGEOBJPROP OBJ 'BUTTONEVENTINFN)
                                         OBJ DS SEL (IDIFFERENCE X TXB)
                                         (IDIFFERENCE Y (GETLD LINE YBASE))
                                         SELPANE
                                         (fetch (TEXTOBJ STREAMHINT) of TEXTOBJ)
                                         WHERE SELOPERATION))))

         (* ;; "The clipping region is now restored.")

         (CL:WHEN (LISTP SELRES)                             (* ; "If not a LIST, an ereror happened")
             (SELECTQ (CAR SELRES)
                 (NIL                                        (* ; "Do nothing untoward")
                      (replace (SELECTION SELOBJ) of SEL with NIL))
                 (DON'T                                      (* ; 
                                                             "The object declines to be selected.  ")
                        (replace (SELECTION SET) of SEL with NIL))
                 (CHANGED                                    (* ; "Update the screen")
                          (\FORMATLINE TEXTOBJ (GETLD LINE LCHAR1)
                                 LINE)
                          (\DISPLAYLINE TEXTOBJ LINE SELPANE)
                          (TEDIT.OBJECT.CHANGED TEXTOBJ (fetch (SELECTION SELOBJ) of SEL)))
                 NIL))])

(\PARALINES
  [LAMBDA (LINE TEXTOBJ)                                     (* ; "Edited 16-May-2023 21:52 by rmk")
                                                             (* ; "Edited  7-Mar-2023 12:07 by rmk")
                                                             (* ; "Edited 18-Feb-2023 21:45 by rmk")

    (* ;; "Returns the first and last lines of the paragraph containing LINE (visible in WREG ?)")

    (LET (PARABOUNDS PARASTART PARAEND FIRSTLINE LASTLINE (FORMATTEDP (fetch (TEXTOBJ FORMATTEDP)
                                                                         of TEXTOBJ)))
         (CL:WHEN FORMATTEDP

             (* ;; "If this is a para-formatted document, use the paragraph bounds.  Otherwise, delimit a para by the surrounding EOLs.")

             (SETQ PARABOUNDS (\TEDIT.PARABOUNDS TEXTOBJ (GETLD LINE LCHAR1)))
             (SETQ PARASTART (\TEDIT.FIND.PROTECTED.START TEXTOBJ (GETLD LINE LCHAR1)
                                    (CAR PARABOUNDS)))
             (SETQ PARAEND (\TEDIT.FIND.PROTECTED.END TEXTOBJ (GETLD LINE LCHAR1)
                                  (CDR PARABOUNDS))))

         (* ;; "Walk forward thru the lines, looking for the last line in the paragraph.")

         (SETQ LASTLINE (bind (LL _ LINE)
                              (TEXTLEN _ (TEXTLEN TEXTOBJ))
                           while (AND [COND
                                         (FORMATTEDP (ILESSP (GETLD LL LCHARLIM)
                                                            PARAEND))
                                         (T (NOT (GETLD LL FORCED-END]
                                      (ILESSP (GETLD LL LCHARLIM)
                                             TEXTLEN))
                           do [SETQ LL (COND
                                          ((GETLD LL NEXTLINE))
                                          (T [SETLD LL NEXTLINE (\FORMATLINE TEXTOBJ
                                                                       (ADD1 (GETLD LL LCHARLIM]
                                             (SETLD (GETLD LL NEXTLINE)
                                                    PREVLINE LL)
                                             (GETLD LL NEXTLINE] finally (RETURN LL)))

         (* ;; 
 "Search back to a line preceded by EOL or beginning-of-text, if we aren't already on the first line")

         (SETQ FIRSTLINE (bind (LL _ LINE)
                            while [AND (IGREATERP (GETLD LL LCHAR1)
                                              1)
                                       (COND
                                          (FORMATTEDP (IGREATERP (GETLD LL LCHAR1)
                                                             PARASTART))
                                          (T (NOT (GETLD (GETLD LL PREVLINE)
                                                         FORCED-END] do 

                                          (* ;; "Back up until we find the first line of the paragraph, or we hit the dummy top line (which claims to end in EOL.)")

                                                                        (SETQ LL (GETLD LL PREVLINE))
                            finally (RETURN LL)))
         (LIST FIRSTLINE LASTLINE])
)
(DEFINEQ

(\FIXSEL
  [LAMBDA (SEL TEXTOBJ AVOIDPANE ONLYPANE)                   (* ; "Edited  2-Oct-2023 09:06 by rmk")
                                                             (* ; "Edited 26-Sep-2023 08:32 by rmk")
                                                             (* ; "Edited 28-Jul-2023 15:58 by rmk")
                                                             (* ; "Edited 22-Jun-2023 16:05 by rmk")
                                                             (* ; "Edited  6-Jun-2023 13:26 by rmk")
                                                             (* ; "Edited  1-Jun-2023 17:41 by rmk")
                                                             (* ; "Edited 31-May-91 12:26 by jds")

    (* ;; "This calculates which lines are currently visible in each pane, given the selected character positions. It also calculates the corresponding X and Y coordinates of the first and last lines visislble in each pane.")

    (* ;; "")

    (* ;; "AVOIDPANE if provided is a pane that may be skipped, e.g. the current selection pane.  Its properties are already known, no point in doing extra work.")

    (* ;; "ONLYPANE is specified in scrolling. to avoid disturbing and redisplaying panes that are not been scrolled.")

    (* ;; "")

    (* ;; "Assumes that the per-pane lines are properly broken so that a forced-end selection can safely move to the next line (after an EOL insertion). ")

    (* ;; " ")

    (* ;; "See TEDIT-NOTES for further documentation.")

    (* ;; "Selection L1 and LN are sequences of CONS cells one for each pane that the text appears in. The running (CAR L1) heads the sub-chain of lines selected for the current pane, the running (CAR LN) points to the pane's last selected line.")

    (* ;; "")

    (* ;; "Each pane's PLINES is a constant (dummy) line somewhere previous to the first visible line in that pane.   ")

    (* ;; 
 "If TXTDON'TUPDATE, the lines may not correspond to anything reasonable, don't try to find X and Y.")

    (CL:UNLESS TEXTOBJ
        (SETQ TEXTOBJ (GETSEL SEL SELTEXTOBJ)))
    (CL:WHEN (AND (fetch (TEXTOBJ \WINDOW) of TEXTOBJ)
                  (GETSEL SEL SET)
                  (NOT (fetch (TEXTOBJ TXTDON'TUPDATE) of TEXTOBJ)))
        (for PANE PSTARTLINE PENDLINE X0 XLIM Y0 YLIM (CHNO _ (IMAX 1 (GETSEL SEL CH#)))
             [LASTCHNO _ (IMAX 1 (SUB1 (FGETSEL SEL CHLIM] first 

                                                (* ;; "CH# is the first selected character, CHLIM is the character just after the last one, hence the SUB1. ")

                                 (* ;; "For a point selection, CHLIM=(ADD1 CH#) so CHNO=LASTCHNO, and the caret position is determined by POINT.  Highlighting is determined separately by DCH, which is 0 for point selections.")

                                                                  inpanes TEXTOBJ as L1
           on (FGETSEL SEL L1) as LN on (FGETSEL SEL LN) unless (EQ PANE AVOIDPANE)
           when (OR (NULL ONLYPANE)
                    (EQ PANE ONLYPANE)) when (SETQ PSTARTLINE (find L
                                                                 inlines (GETLD (fetch (TEXTWINDOW
                                                                                        PLINES)
                                                                                   of PANE)
                                                                                NEXTLINE)
                                                                 suchthat 

                                                                    (* ;; 
                                    "The first visible line in PANE that contains or follows CHNO.  ")

                                                                       (LINESELECTEDP L CHNO LASTCHNO
                                                                              )
                                                                 finally 

                                                     (* ;; 
      "Always here: start by asserting no visible lines,  $$VAL=NIL if no visible lines in this pane")

                                                                       (RPLACA L1 NIL)
                                                                       (RPLACA LN NIL)))
           do (if (EQ 0 (FGETSEL SEL DCH))
                  then 
                       (* ;; "Point selection, CHNO=LASTCHNO, POINT determines whether the caret blinks before or after that character.")

                       (CL:WHEN (AND (FGETLD PSTARTLINE FORCED-END)
                                     (IEQP CHNO (GETLD PSTARTLINE LCHARLIM))
                                     (EQ 'RIGHT (FGETSEL SEL POINT))
                                     (FGETLD PSTARTLINE NEXTLINE))

                           (* ;; 
     "Point to the right of the EOL that forced a line.  Advance to the beginning of the next line..")

                           (SETQ PSTARTLINE (FGETLD PSTARTLINE NEXTLINE))
                           (SETQ CHNO (FGETLD PSTARTLINE LCHAR1))
                           (SETQ LASTCHNO CHNO)
                           (FSETSEL SEL CH# CHNO)
                           (FSETSEL SEL CHLIM (ADD1 CHNO))
                           (FSETSEL SEL POINT 'LEFT))
                       (SETQ PENDLINE PSTARTLINE)
                       [SETQ X0 (\CHTOX TEXTOBJ PSTARTLINE CHNO (EQ 'RIGHT (FGETSEL SEL POINT]
                       (SETQ XLIM X0)
                else 
                     (* ;; "Highlighting selection, X0 is the left-edge of the first selected character visible in PSTARTLINE, XLIM is the right edge of the last selected character in PENDLINE.  If these are not the beginning or endlng lines of the selection, then the respective margins are used.  (Except:  If LASTCHNO is after a text-final EOL, X0 is the right-edge.)")

                     [SETQ PENDLINE (for L (PBOTTOM _ (FETCH (REGION BOTTOM) of (DSPCLIPPINGREGION
                                                                                 NIL PANE)))
                                       inlines PSTARTLINE do 
                                                             (* ;; 
                                         "Stop when L is beyond  the selection or below the screen. ")

                                                             (CL:WHEN (ILEQ LASTCHNO (GETLD L 
                                                                                            LCHARLIM)
                                                                            )
                                                                    (RETURN L))
                                                             (CL:WHEN (ILEQ (GETLD L YBOT)
                                                                            PBOTTOM)
                                                             (* ; 
                                           "This can happen if LASTCHAR is not visible on the screen")
                                                                 (RETURN $$PREVLINE))
                                       finally 

                                             (* ;; 
                        "If $$PREVLINE is NIL, we didn't advance--so we must have ended at the start")

                                             (RETURN (OR $$PREVLINE PSTARTLINE] 

                     (* ;; 
        "IMAX to use the first character of PSTARTLINE if it is not the first line of the selection ")

                     [SETQ X0 (\CHTOX TEXTOBJ PSTARTLINE (IMAX CHNO (FGETLD PSTARTLINE LCHAR1))
                                     (AND (IGREATERP CHNO (TEXTLEN TEXTOBJ))
                                          (GETLD (FGETLD PSTARTLINE PREVLINE)
                                                 FORCED-END] 

                     (* ;; 
            "IMIN to use the last character of PENDLINE if it is not the last line of the selection ")

                     (SETQ XLIM (\CHTOX TEXTOBJ PENDLINE (IMIN LASTCHNO (FGETLD PENDLINE LCHARLIM))
                                       T)))
              (CL:UNLESS XLIM (HELP "NO XLIM - RON" SEL)) 

              (* ;; "Y0 and YBOT are the bottoms of the start and end lines, respectively. ")

              (SETQ Y0 (FGETLD PSTARTLINE YBOT))
              (SETQ YLIM (FGETLD PENDLINE YBOT)) 

              (* ;; "Fill in the selection")

              (RPLACA L1 PSTARTLINE)
              (RPLACA LN PENDLINE)
              (FSETSEL SEL X0 X0)
              (FSETSEL SEL XLIM XLIM)
              (FSETSEL SEL Y0 Y0)
              (FSETSEL SEL YLIM YLIM)))
    SEL])

(\TEDIT.ADJUST.SELS
  [LAMBDA (TEXTOBJ REASON FIRSTCHANGEDCHNO NCHARSCHANGED AVOIDSEL)
                                                             (* ; "Edited  4-Jun-2023 23:46 by rmk")
                                                             (* ; "Edited 21-May-2023 00:02 by rmk")
                                                             (* ; "Edited 18-May-2023 22:50 by rmk")
                                                             (* ; "Edited 17-May-2023 14:13 by rmk")

    (* ;; "Adjust all TEXTOBJ selections to reflect character number translations after an insertion or deletion.  NCHARSCHANGED is negative for deletions.")

    (CL:WHEN (type? SELECTION FIRSTCHANGEDCHNO)
        (SETQ NCHARSCHANGED (GETSEL FIRSTCHANGEDCHNO DCH))
        (SETQ FIRSTCHANGEDCHNO (GETSEL FIRSTCHANGEDCHNO CH#)))
    (for SELTOFIX (DELTA _ (SELECTQ REASON
                               (INSERTION NCHARSCHANGED)
                               (DELETION (IMINUS NCHARSCHANGED))
                               (APPEARANCE 0)
                               (SHOULDNT "BAD REASON FOR ADJUSTING SELECTIONS")))
         (LASTCHANGEDCHNO _ (IPLUS FIRSTCHANGEDCHNO NCHARSCHANGED)) in (\TEDIT.COLLECTSELS TEXTOBJ 
                                                                              AVOIDSEL)
       when (AND (GETSEL SELTOFIX SET)
                 (IGEQ (GETSEL SELTOFIX CH#)
                       FIRSTCHANGEDCHNO)) do 
                                             (* ;; 
             "Nothing to do if the selection is not set or the change happened before the selection.")

                                             (COND
                                                ((IGREATERP (GETSEL SELTOFIX CH#)
                                                        LASTCHANGEDCHNO)
                                                             (* ; "The selection is after the change")
                                                 (add (GETSEL SELTOFIX CH#)
                                                      DELTA)
                                                 (add (GETSEL SELTOFIX CHLIM)
                                                      DELTA))
                                                (T 

                                 (* ;; "This must be a deletion and the selection must have started inside the deleted area.   It now starts where the deletion left off and it only picks out the suffix of characters that still remain.")

                                                   (\TEDIT.UPDATE.SEL SELTOFIX FIRSTCHANGEDCHNO
                                                          (ADD1 (IDIFFERENCE LASTCHANGEDCHNO
                                                                       (GETSEL SELTOFIX CHLIM)))
                                                          NIL NIL T])

(\CHTOX
  [LAMBDA (TEXTOBJ LINE CH# AFTER)                           (* ; "Edited 16-May-2023 00:20 by rmk")
                                                             (* ; "Edited 23-Mar-2023 23:04 by rmk")

    (* ;; "Return the screen-point X position of character CH# in LINE.   ")

    (* ;; "If AFTER, returns the Xposition at the end of CH#, otherwise at the beginning.")

    (* ;; "it is an error if CH# is before LCHAR1 or after LCHARLIM.")

    (LET (X (THISLINE (fetch (TEXTOBJ THISLINE) of TEXTOBJ)))
         (CL:WHEN (OR (GETLD LINE DIRTY)
                      (NEQ LINE (fetch DESC of THISLINE)))

             (* ;; "Reformat if LINE is dirty or not cached in THISLINE. ")

             (\FORMATLINE TEXTOBJ (GETLD LINE LCHAR1)
                    LINE))

         (* ;; "Can avoid another loop if we are asking about the first or last characters.")

         (if (AND AFTER (IEQP CH# (GETLD LINE LCHARLIM)))
             then (GETLD LINE LXLIM)
           elseif (AND (NOT AFTER)
                       (IEQP CH# (GETLD LINE LCHAR1)))
             then (GETLD LINE LX1)
           else (for CHARSLOT (X _ (GETLD LINE LX1))
                     (CHNO _ (GETLD LINE LCHAR1)) incharslots THISLINE unless (type? CHARLOOKS CHARW)
                   do 
                      (* ;; "Update the running X-position in the line, skiping look-slots")

                      (CL:WHEN (IEQP CHNO CH#)
                          (if AFTER
                              then (add X (CHARW CHARSLOT)))

                          (* ;; 
                          "Scale selection X down to points for lines in hardcopy-display mode.")

                          (RETURN X))
                      (if CHAR
                          then (add CHNO 1)
                               (add X CHARW)
                        elseif (SMALLP CHARW)
                          then 
                               (* ;; "Invisible run; we ignore CHARLOOKS")

                               (add CHNO CHARW)) finally (CL:WHEN (AND (IEQP CH# (GETLD LINE LCHAR1))
                                                                       (IGEQ (GETLD LINE LCHARLIM)
                                                                             (TEXTLEN TEXTOBJ))
                                                                       (EQ (GETLD LINE LXLIM)
                                                                           (GETLD LINE LX1)))

                                                             (* ;; 
                                              "CH# not found in empty final line, return left margin")

                                                             (RETURN (GETLD LINE LX1)))])

(\TEDIT.COLLECTSELS
  [LAMBDA (TEXTOBJ AVOIDSEL)                                 (* ; "Edited 20-Sep-2023 17:02 by rmk")
                                                             (* ; "Edited  9-Sep-2023 17:15 by rmk")
                                                             (* ; "Edited 26-Mar-2023 20:30 by rmk")
                                                             (* ; "Edited 30-May-91 23:03 by jds")

    (* ;; "AVOIDSEL to avoid double hits on selections that we might be dealing with separately (e.g. SCRATCHSEL)")

    (\DTEST TEXTOBJ 'TEXTOBJ)
    (DREMOVE AVOIDSEL (DREMOVE NIL (LIST (FGETTOBJ TEXTOBJ SEL)
                                         (FGETTOBJ TEXTOBJ SHIFTEDSEL)
                                         (FGETTOBJ TEXTOBJ MOVESEL)
                                         (FGETTOBJ TEXTOBJ DELETESEL)
                                         (FGETTOBJ TEXTOBJ SCRATCHSEL])

(\TEDIT.SELECTION.UNSET
  [LAMBDA (SEL)                                              (* ; "Edited 23-May-2023 13:52 by rmk")

    (* ;; "Unsets a selection, wiping out things that are no longer needed and might be confusing")

    (SETSEL SEL SET NIL)
    (SETSEL SEL L1 NIL)
    (SETSEL SEL LN NIL])
)
(DEFINEQ

(TEDIT.RESET.EXTEND.PENDING.DELETE
  [LAMBDA (SEL)                                              (* ; "Edited  4-May-2023 00:08 by rmk")
                                                             (* ; "Edited 21-Oct-2022 18:41 by rmk")
                                                             (* ; "Edited 30-May-91 23:03 by jds")

    (* ;; "Reset the 'Extend Pending Delete' status")

    (AND SEL (\TEDIT.SET.SEL.LOOKS SEL 'NORMAL))
    (SETQ TEDIT.PENDINGDEL NIL)
    (CL:WHEN (GETSEL SEL SELTEXTOBJ)
        (replace (TEXTOBJ BLUEPENDINGDELETE) of (GETSEL SEL SELTEXTOBJ) with NIL))])

(\TEDIT.SET.SEL.LOOKS
  [LAMBDA (SEL OPERATION)                                    (* ; "Edited 23-May-2023 12:48 by rmk")
                                                             (* ; "Edited 30-May-91 23:00 by jds")

    (* ;; 
    "Set what the selection should be displayed like, given what it's for (NORMAL, COPY, MOVE, etc.)")

    (SELECTQ OPERATION
        (NORMAL                                              (* ; "Regular selection")
                (SETSEL SEL HOW BLACKSHADE)
                (SETSEL SEL HOWHEIGHT 1)
                (SETSEL SEL HASCARET T))
        (COPY                                                (* ; "Copy source")
              (SETSEL SEL HOW COPYSELSHADE)
              (SETSEL SEL HOWHEIGHT 1)
              (SETSEL SEL HASCARET NIL))
        (COPYLOOKS                                           (* ; "copylooks source")
                   (SETSEL SEL HOW COPYLOOKSSELSHADE)
                   (SETSEL SEL HOWHEIGHT 2)
                   (SETSEL SEL HASCARET NIL))
        (MOVE                                                (* ; "Copy source")
              (SETSEL SEL HOW EDITMOVESHADE)
              (SETSEL SEL HOWHEIGHT 16384)
              (SETSEL SEL HASCARET NIL))
        (DELETE                                              (* ; "To be deleted instantly")
                (SETSEL SEL HOW BLACKSHADE)
                (SETSEL SEL HOWHEIGHT 16384)
                (SETSEL SEL HASCARET NIL)
                NIL)
        (PENDINGDEL                                          (* ; "Delete at next type-in")
                    (SETSEL SEL HOW BLACKSHADE)
                    (SETSEL SEL HOWHEIGHT 16384)
                    (SETSEL SEL HASCARET T)
                    NIL)
        (INVERTED                                            (* ; 
                                                 "For people who really want to see what's selected.")
                  (SETSEL SEL HOW BLACKSHADE)
                  (SETSEL SEL HOWHEIGHT 16384)
                  (SETSEL SEL HASCARET T)
                  NIL)
        NIL])
)
(DEFINEQ

(\SHOWSEL
  [LAMBDA (SEL ON ONLYPANE)                                  (* ; "Edited  9-Oct-2023 23:05 by rmk")
                                                             (* ; "Edited  5-Oct-2023 17:03 by rmk")
                                                             (* ; "Edited  2-Oct-2023 09:08 by rmk")
                                                             (* ; "Edited 23-May-2023 12:37 by rmk")
                                                             (* ; "Edited  1-May-2023 14:34 by rmk")
                                                             (* ; "Edited 20-Apr-2023 14:29 by rmk")
                                                             (* ; "Edited  9-Apr-2023 15:13 by rmk")
                                                             (* ; "Edited  5-Apr-2023 09:13 by rmk")
                                                             (* ; "Edited 22-May-92 16:11 by jds")
    (\DTEST SEL 'SELECTION)

    (* ;; "Highlight the selection SEL, according to HOW, turning it on or off according to ON. ONLYPANE is specified in calls from the \TEDIT.SCROLLFN to confine operations to only the pane currently being scrolled.  Other panes are neither unhighlighted or rehighlighted.")

    (* ;; "The selection's lines [L1...LN] are the subset of lines selected globally by CH# to CHLIM that are visible within each pane.")

    (PROG ((TEXTOBJ (FGETSEL SEL SELTEXTOBJ)))

     (* ;; "This operation only makes sense if there is a set selection and at least one pane to highlight in, and we are allowed to update.")

          (CL:UNLESS (FGETSEL SEL SET)
                 (RETURN))
          (\DTEST TEXTOBJ 'TEXTOBJ)
          (CL:UNLESS (AND (FGETTOBJ TEXTOBJ \WINDOW)
                          (NOT (FGETTOBJ TEXTOBJ TXTDON'TUPDATE)))
                 (RETURN))
          (\DTEST TEXTOBJ 'TEXTOBJ)
          (CL:WHEN (FGETSEL SEL SELOBJ)

              (* ;; "SELOBJ if the selection consisted only of a single image object.  It presumably did its own operation when it was selected, but is otherwise immune to normal highlighting.  But it does act just as a normal character in all panes if it is part of a longer selection.  Not clear what happens if it is a single selection that appears in more than one pane.")

              (\TEDIT.OBJECT.SHOWSEL TEXTOBJ SEL ON (CAR (FGETTOBJ TEXTOBJ \WINDOW)))
              (SETSEL SEL ONFLG ON)
              (RETURN))
          (CL:WHEN (EQ ON (FGETSEL SEL ONFLG))               (* ; 
                                             "No change, nothing to do, Should this be above SELOBJ?")
              (RETURN))

     (* ;; "")

          (for PANE (CH# _ (FGETSEL SEL CH#))
               (CHLAST _ (SUB1 (FGETSEL SEL CHLIM)))
               (POINT _ (FGETSEL SEL POINT)) inpanes (PROGN TEXTOBJ) as L1
             in (FGETSEL SEL L1) as LN in (FGETSEL SEL LN) as CARET in (FGETTOBJ TEXTOBJ CARET)
             when (OR (NULL ONLYPANE)
                      (EQ PANE ONLYPANE)) do (CL:WHEN (AND L1 LN (NEQ 0 (FGETSEL SEL DCH)))
                                                             (* ; "Hilight if not a point selection")
                                                 (\SHOWSEL.HILIGHT TEXTOBJ L1 LN PANE SEL
                                                        (CL:WHEN (WITHINLINEP CH# L1)
                                                               (FGETSEL SEL X0))
                                                        (CL:WHEN (WITHINLINEP CHLAST LN)
                                                               (FGETSEL SEL XLIM))))
                                             (\TEDIT.SETCARET (CL:IF (EQ POINT 'LEFT)
                                                                  L1
                                                                  LN)
                                                    SEL PANE TEXTOBJ CARET ON))
          (FSETSEL SEL ONFLG ON])

(\SHOWSEL.HILIGHT
  [LAMBDA (TEXTOBJ L1 LN PANE SEL X0 XLIM)                   (* ; "Edited  9-Oct-2023 11:45 by rmk")
                                                             (* ; "Edited 22-Apr-2023 15:32 by rmk")
                                                             (* ; "Edited  7-Apr-2023 18:24 by rmk")
                                                             (* ; "Edited  5-Apr-2023 09:13 by rmk")
                                                             (* ; "Edited 30-May-91 23:07 by jds")

    (* ;; "")

    (* ;; "Do the actual highlighting and unhighlighting of a selection for \SHOWSEL.  L1 is the first selected line visible line in PANE, LN is the last selected line.  But there may be other selected lines visible in other panes but not here.  X0 and XLIM are the x values to be use for the first and last lines, presumably at the ends of the selection within those lines.")

    (* ;; "SEL is used only to determine the shading.")

    (\DTEST L1 'LINEDESCRIPTOR)
    (\DTEST LN 'LINEDESCRIPTOR)

    (* ;; "If the first visible line (L1) is also the first line of the selection, then X0 is the left boundary of the highlight.  Otherwise, the left boundary is the left boundary of L1 (its LX1).  The test is (EQ L L1).  ")

    (* ;; "")

    (* ;; "Similarly, if the last visible line (LN) is also the last line of the selection, in which case the last boundary of the highlight is XLIM. Otherwise it is LN's LXLIM.")

    (for L LEFT RIGHT (SHADE _ (OR (FGETSEL SEL HOW)
                                   BLACKSHADE))
         (SHADEHEIGHT _ (OR (FGETSEL SEL HOWHEIGHT)
                            1))
         (PBOTTOM _ (fetch BOTTOM of (DSPCLIPPINGREGION NIL PANE)))
         DISTBELOW first 
                         (* ;; "DISTBELOW=1 would give a 1-pt spacing between the line and the underline. In terms of 1 point highlighting (as opposed to full-height), it might be better to do 1 pt below the baseline instead of the YBOT.  Or at least not to include the interline spacing.")

                         (SETQ DISTBELOW (CL:IF (EQ 1 SHADEHEIGHT)
                                             0
                                             0)) inlines L1 while (IGEQ (GETLD L YBOT)
                                                                        PBOTTOM)
       do (SETQ LEFT (OR (AND (EQ L L1)
                              X0)
                         (FGETLD L LX1)))
          (SETQ RIGHT (OR (AND (EQ L LN)
                               XLIM)
                          (FGETLD L LXLIM)))
          (BITBLT NIL 0 0 PANE LEFT (IDIFFERENCE (FGETLD L YBOT)
                                           DISTBELOW)
                 (IDIFFERENCE RIGHT LEFT)
                 (IMIN SHADEHEIGHT (FGETLD L LHEIGHT))
                 'TEXTURE
                 'INVERT SHADE) repeatuntil (EQ L LN])

(\TEDIT.UPDATE.SHOWSEL
  [LAMBDA (NSEL OSEL TEXTOBJ)                                (* ; "Edited  9-Oct-2023 23:02 by rmk")
                                                             (* ; "Edited 14-Jun-2023 16:35 by rmk")
                                                             (* ; "Edited 20-Apr-2023 12:49 by rmk")
                                                             (* ; "Edited  8-Apr-2023 22:49 by rmk")
                                                             (* ; "Edited 21-Oct-2022 18:41 by rmk")
                                                             (* ; "Edited 30-May-91 23:03 by jds")

    (* ;; "Update the selection highlighting and caret flashing to represent NSEL. Instead of normal \SHOWSEL, the goal is to avoid changing the highlighting on the screen for the pixels that are common between the 2 selections, to just flip whatever bits need to be flipped in order for the screen to reflect NSEL's highlighting.  We know that both selections are from the same TEXTOBJ, and that they both implement the same operation (copy, delete) so have the same HOW and HOWHEIGHT.  And we know that OSEL is ON.")

    (* ;; 
    "It is also the case that the lines of NSEL and OSELfor each pane are drawn from the same lists.")

    (* ;; "")

    (* ;; "There are 4 cases to consider:")

    (* ;; "    1.  The NSEL operates on the first line of OSEL (NSEL POINT)=LEFT")

    (* ;; "           a.  (NSEL CH#) < (OSEL CH#).  The old selection is growing to the left--more highlighting")

    (* ;; 
    "           b.  (NSEL CH#) > (OSEL CH#).  The old selection is shrinking--less highlighting")

    (* ;; "    2.   The NSEL operates on the last line of OSEL:  (NSEL POINT)=RIGHT")

    (* ;; "           a.  (NSEL CHLIM) < (OSEL CHLIM).  The old selection is shrinking at the bottom")

    (* ;; "           b.  (NSELC CHLIM) > OSEL CHLIM). The old selection is growing.")

    (* ;; "")

    (* ;; "The nicest implementation would be to create a selection that describes just the characters whose highlighting has changed (either on or off), and then do (\SHOWSEL of that selection)")

    (LET ((NPOINT (FGETSEL NSEL POINT))
          NEWLINES OLDLINES NCH# OCH# NLASTCH OLASTCH CARETXPOS)
         (FSETSEL NSEL ONFLG T)

         (* ;; " ")

         (SELECTQ NPOINT
             (LEFT                                           (* ; "Case 1: NSEL changes OSEL top")
                   (SETQ NEWLINES (FGETSEL NSEL L1))
                   (SETQ OLDLINES (FGETSEL OSEL L1))
                   (SETQ NCH# (FGETSEL NSEL CH#))
                   (SETQ OCH# (FGETSEL OSEL CH#)))
             (RIGHT (SETQ NEWLINES (FGETSEL NSEL LN))        (* ; "Case 2: NSEL changes OSEL bottom")
                    (SETQ OLDLINES (FGETSEL OSEL LN))
                    (SETQ NLASTCH (SUB1 (FGETSEL NSEL CHLIM)))
                    (SETQ OLASTCH (SUB1 (FGETSEL OSEL CHLIM))))
             (SHOULDNT))
         (CL:WHEN (FGETSEL OSEL HASCARET)                    (* ; "Take up the caret in every pane")
             (for PCARET in (FGETTOBJ TEXTOBJ CARET) do (\TEDIT.UPCARET PCARET)))
         (for NEWL in NEWLINES as OLDL in OLDLINES as PANE inpanes (PROGN TEXTOBJ) as PCARET
            in (FGETTOBJ TEXTOBJ CARET)
            do (CL:WHEN (AND NEWL OLDL)                      (* ; 
                                                           "NSEL is passed just to provide the shade")
                   (SELECTQ NPOINT
                       (LEFT [if (ILESSP (FGETSEL NSEL CH#)
                                        (FGETSEL OSEL CH#))
                                 then                        (* ; "1a:  Selection-front is growing")
                                      (\SHOWSEL.HILIGHT TEXTOBJ NEWL OLDL PANE NSEL
                                             (CL:WHEN (WITHINLINEP NCH# NEWL)
                                                    (FGETSEL NSEL X0))
                                             (CL:WHEN (WITHINLINEP OCH# OLDL)
                                                    (FGETSEL OSEL X0)))
                               else                          (* ; "1b:  Selection-front is shrinking")
                                    (\SHOWSEL.HILIGHT TEXTOBJ OLDL NEWL PANE NSEL
                                           (CL:WHEN (WITHINLINEP OCH# OLDL)
                                                  (FGETSEL OSEL X0))
                                           (CL:WHEN (WITHINLINEP NCH# NEWL)
                                                  (FGETSEL NSEL X0])
                       (RIGHT [if (IGREATERP (FGETSEL NSEL CHLIM)
                                         (FGETSEL OSEL CHLIM))
                                  then                       (* ; "2a:  Selection-end is growing ")
                                       (\SHOWSEL.HILIGHT TEXTOBJ OLDL NEWL PANE NSEL
                                              (CL:WHEN (WITHINLINEP OLASTCH OLDL)
                                                     (FGETSEL OSEL XLIM))
                                              (CL:WHEN (WITHINLINEP NLASTCH NEWL)
                                                     (FGETSEL NSEL XLIM)))
                                else                         (* ; " 2b: Selection-end is shrinking")
                                     (\SHOWSEL.HILIGHT TEXTOBJ NEWL OLDL PANE NSEL
                                            (CL:WHEN (WITHINLINEP NLASTCH NEWL)
                                                   (FGETSEL NSEL XLIM))
                                            (CL:WHEN (WITHINLINEP OLASTCH OLDL)
                                                   (FGETSEL OSEL XLIM])
                       NIL))
               (\TEDIT.SETCARET NEWL NSEL PANE TEXTOBJ PCARET T])

(\TEDIT.SHOWSELS
  [LAMBDA (TEXTOBJ ON)                                       (* ; "Edited 20-Sep-2023 17:01 by rmk")
                                                             (* ; "Edited 18-Apr-2023 23:40 by rmk")
                                                             (* ; "Edited 26-Mar-2023 20:31 by rmk")
                                                             (* ; "Edited 30-May-91 23:03 by jds")

    (* ;; "Turns all the selections for a given Textobj on or off")

    (for SELN in (\TEDIT.COLLECTSELS TEXTOBJ (FGETTOBJ TEXTOBJ SCRATCHSEL))
       when (GETSEL SELN SET) do (\SHOWSEL SELN ON])

(\TEDIT.REFRESH.SHOWSEL
  [LAMBDA (TEXTOBJ NEWSEL OLDSEL OLDOP NEWOP EXTENDFLG)      (* ; "Edited  9-Oct-2023 11:48 by rmk")
                                                             (* ; "Edited  6-Oct-2023 12:00 by rmk")
                                                             (* ; "Edited 14-Jun-2023 16:35 by rmk")
                                                             (* ; "Edited 27-May-2023 15:11 by rmk")
                                                             (* ; "Edited 18-Apr-2023 23:54 by rmk")
                                                             (* ; "Edited  9-Apr-2023 13:24 by rmk")
                                                             (* ; "Edited 30-May-91 23:03 by jds")

    (* ;; "Update the screen hilighting to account for the changes that have taken place between OLDSEL and NEWSEL.")

    (DECLARE (USEDFREE GLOBALSEL))
    (LET (NOSEL)
         (COND
            ((AND EXTENDFLG (EQ OLDOP NEWOP)
                  (GETSEL OLDSEL ONFLG))

             (* ;; "If we're extending a selection and the looks haven't changed, we can try doing it the fast way, to prevent flicker.")

             (\TEDIT.UPDATE.SHOWSEL NEWSEL OLDSEL TEXTOBJ)
             (\COPYSEL NEWSEL OLDSEL)
             (SETSEL OLDSEL ONFLG T))
            (T                                               (* ; 
                "Otherwise, we have to turn the old one off, change things, and turn the new one on.")
               (\SHOWSEL OLDSEL NIL)
               (CL:UNLESS (EQ OLDOP NEWOP)                   (* ; 
    "He changed his mind about copying, deleting, or whatever -- change the kind of selection it is.")
                   (SELECTQ NEWOP
                       ((NORMAL PENDINGDEL) 
                            (SETQ GLOBALSEL TEDIT.SELECTION)
                            (SETQ NOSEL (fetch (TEXTOBJ SEL) of TEXTOBJ)))
                       (COPY (SETQ GLOBALSEL TEDIT.SHIFTEDSELECTION)
                             (SETQ NOSEL (fetch (TEXTOBJ SHIFTEDSEL) of TEXTOBJ)))
                       (MOVE (SETQ GLOBALSEL TEDIT.MOVESELECTION)
                             (SETQ NOSEL (fetch (TEXTOBJ MOVESEL) of TEXTOBJ)))
                       (DELETE (SETQ GLOBALSEL TEDIT.DELETESELECTION)
                               (SETQ NOSEL (fetch (TEXTOBJ DELETESEL) of TEXTOBJ)))
                       (COPYLOOKS (SETQ GLOBALSEL TEDIT.COPYLOOKSSELECTION)
                                  (SETQ NOSEL (fetch (TEXTOBJ SHIFTEDSEL) of TEXTOBJ)))
                       NIL)                                  (* ; "Remember the new operation type.")
                   (SETSEL OLDSEL SET NIL)                   (* ; 
                            "Turn off the old kind of selection, so it doesn't reappear to haunt us.")
                   (CL:WHEN (GETSEL NOSEL SET)
                          (\SHOWSEL NOSEL NIL))              (* ; 
                                             "If there was a new-type selection around, turn it off.")
                   (SETQ OLDSEL NOSEL)                       (* ; "Now cut over to the new selection")
                                                             (* ; "And set it up looking right.")
                   (\TEDIT.SET.SEL.LOOKS OLDSEL NEWOP))
               (\COPYSEL NEWSEL OLDSEL)
               (SETSEL OLDSEL ONFLG NIL)                     (* ; 
                                                         "Make sure we can turn the highlighting on.")
               (\SHOWSEL OLDSEL T)))
         (OR NOSEL OLDSEL])

(\TEDIT.UPDATE.SEL
  [LAMBDA (SEL CH# DCH POINT SELLOOKS DONTFIX)               (* ; "Edited 17-Sep-2023 00:05 by rmk")
                                                             (* ; "Edited 12-Aug-2023 08:27 by rmk")
                                                             (* ; "Edited  6-Jun-2023 13:24 by rmk")
                                                             (* ; "Edited  7-May-2023 19:03 by rmk")

    (* ;; "Translates the selection SEL to new positions.  DCH=0 means point selection with caret blinking either before or after CH#, depending on POINT.  If CH# is a history event, that defines the new selection parameters.  Otherwise, if any of the variables are NIL, the value for that field in SEL is not changed.")

    (* ;; "Unless DONTFIX, \FIXSEL is called to figure out the pane-lines and screen coordinates.")

    [if (type? TEDITHISTORYEVENT CH#)
        then                                                 (* ; "History is a pseudo-selection")
             (SETQ DCH (GETTH CH# THLEN))
             (SETQ POINT (GETTH CH# THPOINT CH#))
             (SETQ CH# (GETTH CH# THCH#))
      else 
           (* ;; "Get defaults from SEL (either a selection or a textobj whose SEL is indicated)")

           (CL:WHEN (type? TEXTOBJ SEL)
               (SETQ SEL (TEXTSEL SEL)))
           (CL:UNLESS CH#
               (SETQ CH# (GETSEL SEL CH#)))
           (CL:UNLESS DCH
               (SETQ DCH (FGETSEL SEL DCH)))
           (CL:UNLESS POINT
               (SETQ POINT (FGETSEL SEL POINT)))]

    (* ;; "Restrict CH# to [1..TEXTLEN], using POINT to designate below or above")

    (LET ((TEXTLEN (TEXTLEN (GETSEL SEL SELTEXTOBJ)))
          CHLIM)
         (CL:WHEN (ILESSP CH# 1)
             (SETQ CH# 1)
             (SETQ POINT 'LEFT))
         (CL:WHEN (IGREATERP CH# TEXTLEN)
             (SETQ CH# (ADD1 TEXTLEN))
             (SETQ POINT 'LEFT))

         (* ;; "POINT=LEFT means before CH#, POINT=RIGHT means before CHLIM. If DCH=0, caret is between (and CHLIM - CH# is not DCH=0).")

         [SETQ CHLIM (CL:IF (EQ DCH 0)
                         (ADD1 CH#)
                         (IMIN (IPLUS CH# DCH)
                               (ADD1 TEXTLEN)))]
         (SETSEL SEL CH# CH#)
         (FSETSEL SEL DCH DCH)
         (FSETSEL SEL CHLIM CHLIM)
         (FSETSEL SEL POINT POINT)
         (CL:WHEN SELLOOKS (\TEDIT.SET.SEL.LOOKS SEL SELLOOKS))
         (CL:UNLESS DONTFIX (\FIXSEL SEL))
         SEL])
)
(DEFINEQ

(\COPYSEL
  [LAMBDA (FROM TO)                                          (* ; "Edited 23-Apr-2023 12:16 by rmk")
                                                             (* ; "Edited  2-Mar-2023 14:55 by rmk")
                                                             (* ; "Edited 21-Oct-2022 18:42 by rmk")
                                                             (* ; "Edited 31-May-91 12:27 by jds")

    (* ;; "Copy a SELECTION record from FROM to TO")

    (if TO
        then (replace (SELECTION Y0) of TO with (fetch (SELECTION Y0) of FROM))
             (replace (SELECTION X0) of TO with (fetch (SELECTION X0) of FROM))
             (replace (SELECTION CH#) of TO with (fetch (SELECTION CH#) of FROM))
             (replace (SELECTION XLIM) of TO with (fetch (SELECTION XLIM) of FROM))
             (replace (SELECTION CHLIM) of TO with (fetch (SELECTION CHLIM) of FROM))
             (replace (SELECTION DCH) of TO with (fetch (SELECTION DCH) of FROM))
             (replace (SELECTION L1) of TO with (COPY (fetch (SELECTION L1) of FROM)))
             (replace (SELECTION LN) of TO with (COPY (fetch (SELECTION LN) of FROM)))
             (replace (SELECTION YLIM) of TO with (fetch (SELECTION YLIM) of FROM))
             (replace (SELECTION POINT) of TO with (fetch (SELECTION POINT) of FROM))
             (replace (SELECTION SET) of TO with (fetch (SELECTION SET) of FROM))
             (replace (SELECTION SELTEXTOBJ) of TO with (fetch (SELECTION SELTEXTOBJ) of FROM))
             (replace (SELECTION SELKIND) of TO with (fetch (SELECTION SELKIND) of FROM))
             (replace (SELECTION HOW) of TO with (fetch (SELECTION HOW) of FROM))
             (replace (SELECTION HOWHEIGHT) of TO with (fetch (SELECTION HOWHEIGHT) of FROM))
             (replace (SELECTION HASCARET) of TO with (fetch (SELECTION HASCARET) of FROM))
             (replace (SELECTION SELOBJ) of TO with (fetch (SELECTION SELOBJ) of FROM))
             (replace (SELECTION ONFLG) of TO with (fetch (SELECTION ONFLG) of FROM))
      else (create SELECTION using FROM])

(\TEDIT.SEL.CHANGED?
  [LAMBDA (NEWSEL OLDSEL OLDSELOP NEWSELOP)                  (* ; "Edited 13-Jun-2023 21:50 by rmk")
                                                             (* ; "Edited 23-May-2023 12:22 by rmk")
                                                             (* ; "Edited  9-Apr-2023 23:15 by rmk")
                                                             (* ; "Edited 30-May-91 23:01 by jds")

    (* ;; "Decide whether there has been an interesting change in the selection, so we can decide whether to refresh its hilighting on the screen.")

    (AND NEWSEL (GETSEL NEWSEL SET)
         (NOT (AND (GETSEL OLDSEL SET)
                   (IEQP (GETSEL NEWSEL CH#)
                         (GETSEL OLDSEL CH#))
                   (IEQP (GETSEL NEWSEL CHLIM)
                         (GETSEL OLDSEL CHLIM))
                   (IEQP (GETSEL NEWSEL DCH)
                         (GETSEL OLDSEL DCH))
                   (EQ (GETSEL NEWSEL SELTEXTOBJ)
                       (GETSEL OLDSEL SELTEXTOBJ))
                   (EQ (GETSEL NEWSEL POINT)
                       (GETSEL OLDSEL POINT))
                   (EQ (GETSEL NEWSEL HOW)
                       (GETSEL OLDSEL HOW))
                   (EQ (GETSEL NEWSEL HOWHEIGHT)
                       (GETSEL OLDSEL HOWHEIGHT))
                   (EQ OLDSELOP NEWSELOP])
)
(DEFINEQ

(TEDIT.SELECTALL
  [LAMBDA (TEXTSTREAM TEXTOBJ SEL)                           (* ; "Edited 14-Jun-2023 16:58 by rmk")
                                                            (* ; "Edited  3-May-2020 17:29 by rmk:")
    (TEDIT.SETSEL TEXTSTREAM 0 (ADD1 (TEXTLEN (TEXTOBJ TEXTSTREAM)))
           'LEFT])
)



(* ;; "User entries to the selection code")

(DEFINEQ

(TEDIT.GETPOINT
  [LAMBDA (STREAM SEL)                                       (* ; "Edited  5-Jun-2023 15:30 by rmk")
                                                             (* ; "Edited 30-May-91 23:03 by jds")

    (* ;; "Given a selection, tell the CHNO that type-in would be inserted in front of.  IF SEL is given, use it to decide.  Otherwise, use STREAM's current selection.  SEL can also be a character number, which is simply returned.")

    (CL:UNLESS SEL
        (SETQ SEL (TEXTSEL (TEXTOBJ STREAM))))
    (if (NOT (type? SELECTION SEL))
        then SEL
      elseif (FGETSEL SEL SET)
        then 
             (* ;; "LEFT and RIGHT are the same for a point (DCH=0) selection.")

             (SELECTQ (FGETSEL SEL POINT)
                 (LEFT (FGETSEL SEL CH#))
                 (RIGHT (FGETSEL SEL CHLIM))
                 (SHOULDNT "Selection's POINT is neither RIGHT nor LEFT."])

(TEDIT.MAKEPOINT
  [LAMBDA (SEL CHNO POINT SELLOOKS)                          (* ; "Edited  5-Jun-2023 22:43 by rmk")
                                                             (* ; "Edited 22-May-2023 11:06 by rmk")
                                                             (* ; "Edited  7-May-2023 22:27 by rmk")

    (* ;; " Converts SEL to a point selection for a character flashing before CHNO. POINT is ignored for a point selection, LEFT just as a reminder.")

    (\TEDIT.UPDATE.SEL SEL CHNO 0 POINT SELLOOKS])

(TEDIT.GETSEL
  [LAMBDA (TSTREAM)                                          (* ; "Edited  1-May-2023 21:07 by rmk")
                                                             (* ; "Edited 30-May-91 23:03 by jds")
    (create SELECTION using (fetch (TEXTOBJ SEL) of (TEXTOBJ TSTREAM])

(TEDIT.MAKESEL
  [LAMBDA (STREAM CH# LEN POINT)                             (* ; "Edited 23-May-2023 12:39 by rmk")
                                                             (* ; "Edited 18-Apr-2023 23:53 by rmk")
                                                             (* ; "Edited 21-Oct-2022 18:37 by rmk")
                                                             (* ; "Edited 30-May-91 23:03 by jds")
    (PROG ((SEL (fetch (TEXTOBJ SEL) of (fetch (TEXTSTREAM TEXTOBJ) of STREAM)))
           (TEXTOBJ (fetch (TEXTSTREAM TEXTOBJ) of STREAM)))
          (\SHOWSEL SEL NIL)
          (SETSEL SEL CH# CH#)
          (SETSEL SEL CHLIM (IMAX CH# (IPLUS CH# LEN)))
          (SETSEL SEL DCH LEN)
          (SETSEL SEL POINT (OR POINT 'LEFT))
          (SETSEL SEL SELTEXTOBJ TEXTOBJ)
          (SETSEL SEL SET T)
          (CL:WHEN (fetch (TEXTOBJ \WINDOW) of TEXTOBJ)
                 (\FIXSEL SEL TEXTOBJ))
          (\SHOWSEL SEL T])

(TEDIT.SCANSEL
  [LAMBDA (TSTREAM)                                          (* ; "Edited 26-May-2023 22:35 by rmk")
                                                             (* ; "Edited  8-Sep-2022 23:29 by rmk")
                                                             (* ; "Edited 30-May-91 23:03 by jds")

    (* ;; "Set up to read the selected text;  return the sel's length or NIL if nothing selected.")

    (LET [(SEL (fetch (TEXTOBJ SEL) of (fetch (TEXTSTREAM TEXTOBJ) of STREAM]
         (CL:WHEN (GETSEL SEL SET)
             (\TEXTSETFILEPTR TSTREAM (SUB1 (GETSEL SEL CH#)))
             (GETSEL SEL DCH))])

(TEDIT.SET.SEL.LOOKS
  [LAMBDA (SEL OPERATION)                                    (* ; "Edited 10-Jun-2023 13:35 by rmk")
                                                             (* ; "Edited 20-May-2023 23:53 by rmk")
                                                             (* ; "Edited 18-Apr-2023 23:53 by rmk")
                                                             (* ; "Edited 30-May-91 23:01 by jds")

    (* ;; 
    "Set what the selection should be displayed like, given what it's for (NORMAL, COPY, MOVE, etc.)")

    (LET ((WASON (GETSEL SEL ONFLG)))
         (\SHOWSEL SEL NIL)
         (SELECTQ OPERATION
             (NORMAL                                         (* ; "Regular selection")
                     (SETSEL SEL HOW BLACKSHADE)
                     (SETSEL SEL HOWHEIGHT 1)
                     (SETSEL SEL HASCARET T))
             (COPY                                           (* ; "Copy source")
                   (SETSEL SEL HOW COPYSELSHADE)
                   (SETSEL SEL HOWHEIGHT 1)
                   (SETSEL SEL HASCARET NIL))
             (COPYLOOKS                                      (* ; "copylooks source")
                        (SETSEL SEL HOW COPYLOOKSSELSHADE)
                        (SETSEL SEL HOWHEIGHT 2)
                        (SETSEL SEL HASCARET NIL))
             (MOVE                                           (* ; "Copy source")
                   (SETSEL SEL HOW EDITMOVESHADE)
                   (SETSEL SEL HOWHEIGHT 16384)
                   (SETSEL SEL HASCARET NIL))
             (DELETE                                         (* ; "To be deleted instantly")
                     (SETSEL SEL HOW BLACKSHADE)
                     (SETSEL SEL HOWHEIGHT 16384)
                     (SETSEL SEL HASCARET NIL))
             (PENDINGDEL                                     (* ; "Delete at next type-in")
                         (SETSEL SEL HOW BLACKSHADE)
                         (SETSEL SEL HOWHEIGHT 16384)
                         (SETSEL SEL HASCARET T))
             (INVERTED                                       (* ; 
                                                 "For people who really want to see what's selected.")
                       (SETSEL SEL HOW BLACKSHADE)
                       (SETSEL SEL HOWHEIGHT 16384)
                       (SETSEL SEL HASCARET T))
             (SHOULDNT))
         (\SHOWSEL SEL WASON)
         SEL])

(TEDIT.SETSEL
  [LAMBDA (STREAM CH# LEN POINT PENDINGDELFLG LEAVECARETLOOKS OPERATION)
                                                             (* ; "Edited 22-Sep-2023 18:09 by rmk")
                                                             (* ; "Edited  3-Aug-2023 23:12 by rmk")
                                                             (* ; "Edited 23-May-2023 16:50 by rmk")
                                                             (* ; "Edited 18-Apr-2023 23:54 by rmk")
                                                             (* ; "Edited 27-Mar-2023 13:07 by rmk")
                                                             (* ; "Edited 30-May-91 23:05 by jds")

    (* ;; "Given a text stream or textobj, and a piece of text to select, set the internal selection, and return it.")

    (LET ((TEXTOBJ (TEXTOBJ STREAM))
          SEL TEXTLEN PC)
         (SETQ SEL (TEXTSEL TEXTOBJ))
         (SETQ TEXTLEN (TEXTLEN TEXTOBJ))
         (\SHOWSEL SEL NIL)                                  (* ; "First turn the old sel off.")
         [COND
            ((type? SELECTION CH#)                           (* ; 
                                                          "He gave use a selection;  just plug it in")
             (\COPYSEL CH# SEL)                              (* ; 
                                                             "And make sure it can be turned on.")
             (SETSEL SEL ONFLG NIL))
            (T                                               (* ; 
                                       "Documentation doesn't allow NIL, but DINFO.SHOWSEL passes it")
               (SELECTQ POINT
                   (LEFT)
                   (RIGHT)
                   (NIL (SETQ POINT 'LEFT))
                   (ERROR POINT "is an illegal POINT"))      (* ; "He fed us numbers;  use them")
               (SETQ LEN (IMAX 0 LEN))                       (* ; "Length must be positive")
               (SETQ CH# (IMIN (IMAX 1 CH#)
                               (ADD1 TEXTLEN)))              (* ; 
                                        "Starting character. If beyond  TEXTLEN, then just after EOF")
               (SETSEL SEL CH# CH#)
               [SETSEL SEL CHLIM (IMAX CH# (IMIN (IPLUS CH# LEN)
                                                 (ADD1 TEXTLEN]

               (* ;; "LEN may have been reduced by TEXTLEN")

               (SETQ LEN (IDIFFERENCE (GETSEL SEL CHLIM)
                                (GETSEL SEL CH#)))
               (SETSEL SEL DCH LEN)
               (SETSEL SEL POINT (if (IGREATERP CH# TEXTLEN)
                                     then 'LEFT
                                   elseif POINT
                                   else 'LEFT))              (* ; "Which side the caret should go on")
               (FSETSEL SEL SELOBJ (CL:WHEN (EQ 1 LEN)       (* ; "If CH# beyond TEXTLEN, LEN is 0")
                                       (SETQ PC (\CHTOPC (GETSEL SEL CH#)
                                                       TEXTOBJ))
                                       (CL:WHEN (EQ OBJECT.PTYPE (PTYPE PC))
                                              (PCONTENTS PC)))]
         (SETSEL SEL SELTEXTOBJ TEXTOBJ)                     (* ; 
                                                             "Link it back to the associated textobj")
         [COND
            [PENDINGDELFLG                                   (* ; 
                                                    "This selection is to be a pending-deletion sel.")
                   (SETTOBJ TEXTOBJ BLUEPENDINGDELETE T)     (* ; 
                                                         "Warn TEdit that there's a deletion pending")
                   (\TEDIT.SET.SEL.LOOKS SEL (OR OPERATION 'PENDINGDEL]
            (T                                               (* ; 
                                                    "This selection is to be a pending-deletion sel.")
               (TEDIT.RESET.EXTEND.PENDING.DELETE SEL)
               (\TEDIT.SET.SEL.LOOKS SEL (OR OPERATION 'NORMAL]
         (SETSEL SEL SET T)                                  (* ; 
                                                      "Mark the selection as valid for others to use")
         (CL:UNLESS LEAVECARETLOOKS                          (* ; 
                                                             "And set the insertion looks to follow.")
             (SETTOBJ TEXTOBJ CARETLOOKS (\TEDIT.GET.INSERT.CHARLOOKS TEXTOBJ SEL)))
         (\FIXSEL SEL TEXTOBJ)                               (* ; 
                                                             "Update the selection's screen location")
         (\SHOWSEL SEL T)                                    (* ; "Highlight it on the screen")
         SEL])

(TEDIT.SHOWSEL
  [LAMBDA (STREAM ONFLG SEL)                                 (* ; "Edited  3-May-2023 09:23 by rmk")
                                                             (* ; "Edited 18-Apr-2023 23:54 by rmk")
                                                             (* ; "Edited 21-Oct-2022 18:36 by rmk")

    (* ;; "He's giving us a selection to highlight and to  connect it to this textobj.")
                                                             (* ; "Edited 30-May-91 23:04 by jds")
    (LET ((TEXTOBJ (TEXTOBJ STREAM)))
         (CL:UNLESS SEL
             (SETQ SEL (fetch (TEXTOBJ SEL) of TEXTOBJ)))
         (CL:WHEN SEL
             (SETSEL SEL SELTEXTOBJ TEXTOBJ)
             (\FIXSEL SEL TEXTOBJ)
             (\SHOWSEL SEL ONFLG))])
)
(DECLARE%: DONTCOPY
  (FILEMAP (NIL (11292 13213 (\TEDIT.SELECTION.DEFPRINT 11302 . 13211)) (13214 22642 (
TEDIT.SEL.AS.STRING 13224 . 14696) (TEDIT.SEL.AS.SEXPR 14698 . 15781) (TEDIT.SELECTED.PIECES 15783 . 
16639) (\TEDIT.FIND.FIRST.LINE 16641 . 18415) (\TEDIT.FIND.OVERLAPPING.LINE 18417 . 18779) (
\TEDIT.FIND.PROTECTED.END 18781 . 20270) (\TEDIT.FIND.PROTECTED.START 20272 . 21977) (
\TEDIT.WORD.BOUND 21979 . 22640)) (22732 23211 (\CREATE.TEDIT.SELECTION 22742 . 22812) (
\CREATE.TEDIT.SHIFTEDSELECTION 22814 . 22917) (\CREATE.TEDIT.MOVESELECTION 22919 . 23048) (
\CREATE.TEDIT.DELETESELECTION 23050 . 23209)) (23963 56450 (TEDIT.EXTEND.SEL 23973 . 30585) (
TEDIT.SELECT 30587 . 31737) (TEDIT.SCAN.LINE 31739 . 39097) (\TEDIT.SCAN.LINE.WORD 39099 . 43088) (
TEDIT.SELECT.LINE.SCANNER 43090 . 49335) (\TEDIT.SELECT.OBJECT 49337 . 53137) (\PARALINES 53139 . 
56448)) (56451 72424 (\FIXSEL 56461 . 65369) (\TEDIT.ADJUST.SELS 65371 . 68283) (\CHTOX 68285 . 71148)
 (\TEDIT.COLLECTSELS 71150 . 72104) (\TEDIT.SELECTION.UNSET 72106 . 72422)) (72425 75204 (
TEDIT.RESET.EXTEND.PENDING.DELETE 72435 . 73077) (\TEDIT.SET.SEL.LOOKS 73079 . 75202)) (75205 95105 (
\SHOWSEL 75215 . 79253) (\SHOWSEL.HILIGHT 79255 . 82207) (\TEDIT.UPDATE.SHOWSEL 82209 . 88176) (
\TEDIT.SHOWSELS 88178 . 88859) (\TEDIT.REFRESH.SHOWSEL 88861 . 92558) (\TEDIT.UPDATE.SEL 92560 . 95103
)) (95106 99001 (\COPYSEL 95116 . 97611) (\TEDIT.SEL.CHANGED? 97613 . 98999)) (99002 99344 (
TEDIT.SELECTALL 99012 . 99342)) (99397 111252 (TEDIT.GETPOINT 99407 . 100356) (TEDIT.MAKEPOINT 100358
 . 100917) (TEDIT.GETSEL 100919 . 101239) (TEDIT.MAKESEL 101241 . 102267) (TEDIT.SCANSEL 102269 . 
102943) (TEDIT.SET.SEL.LOOKS 102945 . 105459) (TEDIT.SETSEL 105461 . 110427) (TEDIT.SHOWSEL 110429 . 
111250)))))
STOP
