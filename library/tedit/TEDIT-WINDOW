(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)

(FILECREATED " 9-Sep-2023 17:14:34" {WMEDLEY}<library>tedit>TEDIT-WINDOW.;145 165500 

      :EDIT-BY rmk

      :CHANGES-TO (FNS \TEDIT.MAKEFILENAME \TEDIT.ORIGINAL.WINDOW.TITLE)

      :PREVIOUS-DATE " 2-Sep-2023 16:22:17" {WMEDLEY}<library>tedit>TEDIT-WINDOW.;143)


(PRETTYCOMPRINT TEDIT-WINDOWCOMS)

(RPAQQ TEDIT-WINDOWCOMS
       [(DECLARE%: EVAL@COMPILE DONTCOPY (EXPORT (RECORDS TEDITCARET TEXTWINDOW PANE)
                                                (I.S.OPRS inpanes inpanelines)))
        (INITRECORDS TEDITCARET)
        (FILES ATTACHEDWINDOW)
        (FNS TEDIT.CREATEW \TEDIT.CREATEW.FROM.REGION TEDIT.CURSORMOVEDFN TEDIT.CURSOROUTFN 
             TEDIT.MINIMAL.WINDOW.SETUP \TEDIT.ACTIVE.WINDOWP \TEDIT.BUTTONEVENTFN \TEDIT.WINDOW.OPS
             \TEDIT.EXPANDFN \TEDIT.MAINW \TEDIT.PRIMARYW \TEDIT.COPYINSERTFN \TEDIT.NEWREGIONFN 
             \TEDIT.SET.WINDOW.EXTENT \TEDIT.SHRINK.ICONCREATE \TEDIT.SHRINKFN \TEDIT.SPLITW 
             \TEDIT.UNSPLITW \TEDIT.WINDOW.SETUP \PANEREGION)
        (INITVARS (\TEDIT.OP.WIDTH 12)
               (\TEDIT.OP.BOTTOM 12))
        (DECLARE%: DONTEVAL@LOAD DOCOPY (GLOBALVARS \TEDIT.OP.WIDTH \TEDIT.OP.BOTTOM))
        (CURSORS BXCARET BXHICARET TEDIT.LINECURSOR \TEDIT.SPLITCURSOR \TEDIT.MOVESPLITCURSOR 
               \TEDIT.UNSPLITCURSOR \TEDIT.MAKESPLITCURSOR)
        (INITVARS (TEDIT.DEFAULT.WINDOW NIL))
        (GLOBALVARS TEDIT.DEFAULT.WINDOW)
        (COMS                                                (* ; 
                                                   "User-level %"is this a TEdit window?%" function.")
              (FNS TEDITWINDOWP))
        (COMS                                                (* ; "User-typein support")
              (FNS TEDIT.GETINPUT \TEDIT.MAKEFILENAME))
        (COMS                                                (* ; "Attached Prompt window support.")
              (FNS TEDIT.PROMPTPRINT TEDIT.PROMPTCLEAR TEDIT.PROMPTFLASH \TEDIT.PROMPT.PAGEFULLFN)
              (INITVARS (TEDIT.PROMPT.FONT (FONTCREATE 'TERMINAL 10))
                     (TEDIT.PROMPTWINDOW.HEIGHT NIL))
              (GLOBALVARS TEDIT.PROMPT.FONT TEDIT.PROMPTWINDOW.HEIGHT))
        (COMS                                                (* ; "Title creation and update")
              (FNS TEXTSTREAM.TITLE \TEDIT.ORIGINAL.WINDOW.TITLE \TEDIT.WINDOW.TITLE 
                   \TEXTSTREAM.FILENAME \TEDIT.UPDATE.TITLE))
        (COMS                                                (* ; "Screen updating utilities")
              (FNS TEDIT.DEACTIVATE.WINDOW \TEDIT.REPAINTFN \TEDIT.RESHAPEFN \TEDIT.PANEWITHINSCREEN?
                   )
              (FNS \TEDIT.SCROLLFN \TEDIT.SCROLLFLOAT \TEDIT.SCROLLUP \TEDIT.SCROLLDOWN))
        (COMS                                                (* ; "Process-world interfaces")
              (FNS \TEDIT.PROCIDLEFN \TEDIT.PROCENTRYFN \TEDIT.PROCEXITFN))
        (COMS (INITVARS (\CARETRATE 333))
                                                             (* ; "Caret handler;  stolen from CHAT.")
              (FNS \EDIT.DOWNCARET \EDIT.FLIPCARET TEDIT.FLASHCARET \EDIT.UPCARET 
                   TEDIT.NORMALIZECARET \SETCARET \TEDIT.CARET))
        [COMS                                                (* ; "Menu interfacing")
              (FNS TEDIT.ADD.MENUITEM TEDIT.DEFAULT.MENUFN TEDIT.REMOVE.MENUITEM \TEDIT.CREATEMENU 
                   \TEDIT.MENU.WHENHELDFN \TEDIT.MENU.WHENSELECTEDFN)
              (GLOBALVARS TEDIT.DEFAULT.MENU)
              [DECLARE%: DONTEVAL@LOAD DOCOPY
                     (VARS (TEDIT.DEFAULT.MENU (\TEDIT.CREATEMENU '((Put 'Put NIL (SUBITEMS 
                                                                             |Put Formatted Document|
                                                                                         Plain-Text))
                                                                    (Get 'Get NIL (SUBITEMS 
                                                                             |Get Formatted Document|
                                                                                         
                                                                                     Unformatted% Get
                                                                                         ))
                                                                    Include Find Looks Substitute 
                                                                    Quit
                                                                    (Expanded% Menu 'Expanded% Menu 
                                                                           NIL
                                                                           (SUBITEMS Expanded% Menu 
                                                                                  Character% Looks 
                                                                                Paragraph% Formatting
                                                                                  Page% Layout]
              (DECLARE%: DONTEVAL@LOAD DOCOPY (P [OR (SASSOC 'TEdit BackgroundMenuCommands)
                                                     (NCONC1 BackgroundMenuCommands
                                                            '(TEdit '(TEDIT)
                                                                    "Opens a TEdit window for use."]
                                                 (SETQ BackgroundMenu NIL]
        (COMS                                                (* ; "titled icon info")
              (FILES ICONW)
              (BITMAPS TEDITICON TEDITMASK)
              (INITVARS (TEDIT.ICON.FONT (FONTCREATE 'HELVETICA 8 'BOLD))
                     [TEDIT.ICON.TITLE.REGION (CONS 16 (CONS 4 (CONS 64 (CONS 77 NIL]
                                                             (* ; 
                          "Original was (create REGION BOTTOM _ 4 LEFT _ 16 WIDTH _ 64 HEIGHT _ 77).")
                                                             (* ; 
                                                    "Changed by yabu.fx, for SUNLOADUP without DWIM.")
                     [TEDIT.TITLED.ICON.TEMPLATE (CONS TEDITICON (CONS TEDITMASK (CONS 
                                                                              TEDIT.ICON.TITLE.REGION
                                                                                       NIL]
                                                             (* ; "Original was (create TITLEDICON ICON _ TEDITICON MASK _ TEDITMASK TITLEREG _ TEDIT.ICON.TITLE.REGION).")
                                                             (* ; 
                                                    "Changed by yabu.fx, for SUNLOADUP without DWIM.")
                     ])
(DECLARE%: EVAL@COMPILE DONTCOPY 
(* "FOLLOWING DEFINITIONS EXPORTED")(DECLARE%: EVAL@COMPILE

(DATATYPE TEDITCARET (TCNOWTIME 

         (* Used to hold the current time, when checking to see if a transition is due)

                            TCTHENTIME                       (* Time when the next transition is to 
                                                             take place)
                            TCFORCEDDOWN                     (* TCFORCEDOWN = T means
                                                             (Make the caret visible at the next 
                                                             call to \EDIT.FLIPCARET.))
                            TCUP

         (* TCUP = T => The caret is NOT VISIBLE. Used to track the current state of the 
         caret)

                            TCCARETDS                        (* The display stream that the caret 
                                                             appears in)
                            TCCURSORBM                       (* The CURSOR representing the caret)
                            TCCARETRATE                      (* %# of MSEC between caret up/down 
                                                             transitions)
                            TCFORCEUP

         (* T => The caret is not allowed to become visible.
         Used to keep the caret up during screen updates)

                            TCCARETX                         (* X position in the window that the 
                                                             caret appears at)
                            TCCARETY                         (* Y position in the window where the 
                                                             caret appears)
                            TCCARET                          (* A lisp CARET to be flashed
                                                             (eventually))
                            )
                     TCNOWTIME _ (CREATECELL \FIXP)
                     TCTHENTIME _ (CREATECELL \FIXP)
                     TCCURSORBM _ BXCARET TCCARETRATE _ \CARETRATE TCUP _ T TCCARET _ (\CARET.CREATE
                                                                                       BXCARET))

(ACCESSFNS TEXTWINDOW ((NEXTPANE (GETWINDOWPROP DATUM 'TEDIT-NEXT-PANE-DOWN)
                              (PUTWINDOWPROP DATUM 'TEDIT-NEXT-PANE-DOWN NEWVALUE))
                       (WTEXTSTREAM (GETWINDOWPROP DATUM 'TEXTSTREAM)
                              (PUTWINDOWPROP DATUM 'TEXTSTREAM NEWVALUE))
                       (WTEXTOBJ (GETWINDOWPROP DATUM 'TEXTOBJ)
                              (PUTWINDOWPROP DATUM 'TEXTOBJ NEWVALUE))
                       (PTEXTOBJ (GETWINDOWPROP DATUM 'TEXTOBJ)
                              (PUTWINDOWPROP DATUM 'TEXTOBJ NEWVALUE))
                       (WLINES (GETWINDOWPROP DATUM 'LINES)
                              (PUTWINDOWPROP DATUM 'LINES NEWVALUE))
                       (PLINES (GETWINDOWPROP DATUM 'LINES)
                              (PUTWINDOWPROP DATUM 'LINES NEWVALUE))
                       (CLOSINGFILE (GETWINDOWPROP DATUM 'TEDIT-CLOSING-FILE)
                              (PUTWINDOWPROP DATUM 'TEDIT-CLOSING-FILE NIL))
                       (WITHINSCREEN (GETWINDOWPROP DATUM 'TEDIT-WITHIN-SCREEN)
                              (LET ((NV NEWVALUE))
                                   (PUTWINDOWPROP DATUM 'TEDIT-WITHIN-SCREEN NV)
                                   NV))))

(RECORD PANE (PWINDOW PL1 PLN PCARET HOLDDUMMYFIRSTLINE))
)

(/DECLAREDATATYPE 'TEDITCARET '(POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER 
                                      POINTER POINTER POINTER)
       '((TEDITCARET 0 POINTER)
         (TEDITCARET 2 POINTER)
         (TEDITCARET 4 POINTER)
         (TEDITCARET 6 POINTER)
         (TEDITCARET 8 POINTER)
         (TEDITCARET 10 POINTER)
         (TEDITCARET 12 POINTER)
         (TEDITCARET 14 POINTER)
         (TEDITCARET 16 POINTER)
         (TEDITCARET 18 POINTER)
         (TEDITCARET 20 POINTER))
       '22)
(DECLARE%: EVAL@COMPILE 

[I.S.OPR 'inpanes NIL '(inside (fetch (TEXTOBJ \WINDOW) of BODY]

[I.S.OPR 'inpanelines NIL '(inside (fetch (TEXTOBJ LINES) of BODY]
)

(* "END EXPORTED DEFINITIONS")

)

(/DECLAREDATATYPE 'TEDITCARET '(POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER 
                                      POINTER POINTER POINTER)
       '((TEDITCARET 0 POINTER)
         (TEDITCARET 2 POINTER)
         (TEDITCARET 4 POINTER)
         (TEDITCARET 6 POINTER)
         (TEDITCARET 8 POINTER)
         (TEDITCARET 10 POINTER)
         (TEDITCARET 12 POINTER)
         (TEDITCARET 14 POINTER)
         (TEDITCARET 16 POINTER)
         (TEDITCARET 18 POINTER)
         (TEDITCARET 20 POINTER))
       '22)

(FILESLOAD ATTACHEDWINDOW)
(DEFINEQ

(TEDIT.CREATEW
  [LAMBDA (PROMPT FILE PROPS)                                (* ; "Edited  1-Jan-2022 23:54 by rmk")
                                                             (* ; "Edited 30-Dec-2021 23:00 by rmk")
                                                             (* ; "Edited 29-Dec-2021 16:35 by rmk")
                                                             (* ; "Edited 24-Dec-2021 19:21 by rmk")
                                                            (* ; "Edited 27-Oct-2021 12:25 by rmk:")

    (* ;; "RMK: PROPS are passed to CREATEW and \TEDIT.ORIGINAL.WINDOW.TITLE.  .")

    (* ;; 
    "RMK:  If PROMPTWINDOW is in PROPS, I don't see how it gets attached to the new Tedit window.")

    (* ;; 
    "Also odd:  The argument PROMPT gets printed, but then gets replaced by the property PROMPT")

    (* ;; "Don't set the global TEDIT default window if we have a region property, that must be special purpose.")
                                                             (* jds "23-May-85 15:19")
    (CLRPROMPT)
    (printout PROMPTWINDOW PROMPT T)
    (LET ((PROMPT (LISTGET PROPS 'PROMPTWINDOW))
          (PHEIGHT 0)
          REGION
          (REGIONTYPE (LISTGET PROPS 'REGION-TYPE))
          WINDOW)

         (* ;; "All this prompt-height calculation would be unnecessary if the attachment in GETPROMPTWINDOW does the proper shrinking of the main window.")

         [COND
            ((EQ PROMPT 'DON'T))
            [PROMPT (CL:WHEN (WINDOWP PROMPT)                (* ; 
                                                            "RMK: If not a window, PHEIGHT remains 0")
                        (SETQ PHEIGHT (FETCH (REGION HEIGHT) OF (WINDOWREGION PROMPT))))]
            (T (SETQ PHEIGHT (HEIGHTIFWINDOW (ITIMES (OR (LISTGET PROPS 'PROMPTWINDOWHEIGHT)
                                                         TEDIT.PROMPTWINDOW.HEIGHT 1)
                                                    (FONTPROP TEDIT.PROMPT.FONT 'HEIGHT]
         (SETQ REGION (OR (REGIONP REGIONTYPE)
                          (GETREGION 32 (IPLUS PHEIGHT 32)
                                 REGIONTYPE)))
         (add (fetch HEIGHT of REGION)
              (IMINUS PHEIGHT))
         (SETQ WINDOW (CREATEW REGION (\TEDIT.ORIGINAL.WINDOW.TITLE FILE NIL PROPS)
                             NIL NIL PROPS))
         (WINDOWPROP WINDOW 'TEDITCREATED T)
         (OR PROMPT (GETPROMPTWINDOW WINDOW (OR (LISTGET PROPS 'PROMPTWINDOWHEIGHT)
                                                TEDIT.PROMPTWINDOW.HEIGHT 1)
                           TEDIT.PROMPT.FONT))
         (CL:UNLESS REGIONTYPE (SETQ TEDIT.DEFAULT.WINDOW WINDOW))
         WINDOW])

(\TEDIT.CREATEW.FROM.REGION
  [LAMBDA (REGION FILE PROPS)                                (* ; "Edited  6-Apr-2023 15:01 by rmk")
                                                             (* gbn "15-Nov-84 18:04")
    (PROG ((PROMPT (LISTGET PROPS 'PROMPTWINDOW))
           (PHEIGHT 0)
           PWINDOW)
          [COND
             ((EQ PROMPT 'DON'T))
             (PROMPT)
             (T (SETQ PHEIGHT (HEIGHTIFWINDOW (ITIMES (OR (LISTGET PROPS 'PROMPTWINDOWHEIGHT)
                                                          TEDIT.PROMPTWINDOW.HEIGHT 1)
                                                     (FONTPROP TEDIT.PROMPT.FONT 'HEIGHT]
          (SETQ TEDIT.DEFAULT.WINDOW (CREATEW (create REGION using REGION)
                                            (\TEDIT.ORIGINAL.WINDOW.TITLE FILE)))
          (WINDOWPROP TEDIT.DEFAULT.WINDOW 'TEDITCREATED T)
          (OR PROMPT (GETPROMPTWINDOW TEDIT.DEFAULT.WINDOW (OR (LISTGET PROPS 'PROMPTWINDOWHEIGHT)
                                                               TEDIT.PROMPTWINDOW.HEIGHT 1)
                            TEDIT.PROMPT.FONT)))
    TEDIT.DEFAULT.WINDOW])

(TEDIT.CURSORMOVEDFN
  [LAMBDA (PANE)                                             (* ; "Edited 20-Jul-2023 20:30 by rmk")
                                                             (* ; "Edited  4-May-2023 12:31 by rmk")
                                                             (* ; "Edited  4-Mar-2023 20:43 by rmk")
                                                             (* ; "Edited  4-Oct-2022 13:23 by rmk")
                                                             (* ; "Edited  1-Oct-2022 16:07 by rmk")

    (* ;; "Watch the mouse and change the cursor to reflect the region of the pane it's in (line select, pane split eventually?)")

    (PROG ((X (LASTMOUSEX PANE))
           (Y (LASTMOUSEY PANE))
           (TEXTOBJ (WINDOWPROP PANE 'TEXTOBJ))
           (CURSORREG (WINDOWPROP PANE 'TEDIT.CURSORREGION))
           LINE LEFT RIGHT)
          (CL:UNLESS (INSIDE? CURSORREG X Y)
              (SETQ LINE (\TEDIT.FIND.OVERLAPPING.LINE (find L inpanelines TEXTOBJ as P inpanes
                                                                                        TEXTOBJ
                                                          suchthat (EQ PANE P))
                                Y))
              (CL:WHEN LINE
                  (replace BOTTOM of CURSORREG with (GETLD LINE YBOT))
                  (replace HEIGHT of CURSORREG with (GETLD LINE LHEIGHT)))
              (SELECTQ (GETTOBJ TEXTOBJ MOUSEREGION)
                  (TEXT [COND
                           ((AND (IGEQ X (SETQ LEFT (IDIFFERENCE (GETTOBJ TEXTOBJ WRIGHT)
                                                           \TEDIT.OP.WIDTH)))
                                 (IGEQ Y (IPLUS (GETTOBJ TEXTOBJ WBOTTOM)
                                                \TEDIT.OP.BOTTOM)))

                            (* ;; "The region to the right of text, for splitting operations.")

                            (CURSOR \TEDIT.SPLITCURSOR)
                            (SETTOBJ TEXTOBJ MOUSEREGION 'PANE)
                            (replace LEFT of CURSORREG with LEFT)
                            (replace WIDTH of CURSORREG with \TEDIT.OP.WIDTH))
                           ([ILESSP X (SETQ LEFT (OR (AND LINE (GETLD LINE LEFTMARGIN))
                                                     (IPLUS (GETTOBJ TEXTOBJ WLEFT)
                                                            8]
                                                             (* ; 
                                                  "In left margin;  switch to the line-select cursor")
                            (CURSOR TEDIT.LINECURSOR)
                            (SETTOBJ TEXTOBJ MOUSEREGION 'LINE)
                            (replace LEFT of CURSORREG with 0)
                            (replace WIDTH of CURSORREG with LEFT))
                           (T (replace LEFT of CURSORREG with LEFT)
                              (replace WIDTH of CURSORREG with (IDIFFERENCE (GETTOBJ TEXTOBJ WRIGHT)
                                                                      (IPLUS LEFT 8])
                  (LINE (COND
                           ((AND (IGEQ X (SETQ LEFT (IDIFFERENCE (GETTOBJ TEXTOBJ WRIGHT)
                                                           \TEDIT.OP.WIDTH)))
                                 (IGEQ Y (IPLUS (GETTOBJ TEXTOBJ WBOTTOM)
                                                \TEDIT.OP.BOTTOM)))
                            (CURSOR \TEDIT.SPLITCURSOR)
                            (SETTOBJ TEXTOBJ MOUSEREGION 'PANE)
                            (replace LEFT of CURSORREG with LEFT)
                            (replace WIDTH of CURSORREG with \TEDIT.OP.WIDTH))
                           [[IGEQ X (SETQ LEFT (OR (AND LINE (GETLD LINE LEFTMARGIN))
                                                   (IPLUS (fetch (TEXTOBJ WLEFT) of TEXTOBJ)
                                                          8]
                            (CURSOR T)
                            (SETTOBJ TEXTOBJ MOUSEREGION 'TEXT)
                            (replace LEFT of CURSORREG with LEFT)
                            (replace WIDTH of CURSORREG with (IDIFFERENCE (GETTOBJ TEXTOBJ WRIGHT)
                                                                    (IPLUS LEFT 8]
                           (T (replace LEFT of CURSORREG with 0)
                              (replace WIDTH of CURSORREG with LEFT))))
                  (PANE (COND
                           ((AND (IGEQ X (SETQ LEFT (IDIFFERENCE (GETTOBJ TEXTOBJ WRIGHT)
                                                           \TEDIT.OP.WIDTH)))
                                 (IGEQ Y (IPLUS (fetch (TEXTOBJ WBOTTOM) of TEXTOBJ)
                                                \TEDIT.OP.BOTTOM)))
                            (SETTOBJ TEXTOBJ MOUSEREGION 'PANE)
                            (replace LEFT of CURSORREG with LEFT)
                            (replace WIDTH of CURSORREG with \TEDIT.OP.WIDTH))
                           ([IGEQ X (SETQ LEFT (OR (AND LINE (GETLD LINE LEFTMARGIN))
                                                   (IPLUS (GETTOBJ TEXTOBJ WLEFT)
                                                          8]
                            (CURSOR T)
                            (SETTOBJ TEXTOBJ MOUSEREGION 'TEXT)
                            (replace LEFT of CURSORREG with LEFT)
                            (replace WIDTH of CURSORREG with (IDIFFERENCE (GETTOBJ TEXTOBJ WRIGHT)
                                                                    LEFT)))
                           (T (CURSOR TEDIT.LINECURSOR)
                              (replace LEFT of CURSORREG with 0)
                              (replace WIDTH of CURSORREG with LEFT))))
                  NIL))])

(TEDIT.CURSOROUTFN
  [LAMBDA (PANE)                                             (* ; "Edited 20-Jul-2023 20:32 by rmk")
                                                             (* ; "Edited 30-May-91 23:32 by jds")

    (* ;; "Cursor leaves edit pane;  make sure we think we're in the text region.")

    (CURSOR T)
    (SETTOBJ (fetch (TEXTWINDOW PTEXTOBJ) of PANE)
           MOUSEREGION
           'TEXT])

(TEDIT.MINIMAL.WINDOW.SETUP
  [LAMBDA (WINDOW TEXTOBJ TSTREAM PROPS AFTERWINDOW)         (* ; "Edited  6-Jun-2023 10:33 by rmk")
                                                             (* ; "Edited 18-Apr-2023 23:54 by rmk")
                                                             (* ; "Edited 25-Mar-2023 11:19 by rmk")
                                                             (* ; "Edited 21-Feb-2023 13:01 by rmk")
                                                             (* ; "Edited  5-Nov-2022 11:49 by rmk")
                                                             (* ; "Edited  6-Sep-2022 11:03 by rmk")
                                                             (* ; "Edited 30-May-91 23:33 by jds")

    (* ;; "Do the absolute minimum setup so that TEXTOBJ and WINDOW know about each other.  Does NOT include mouse interface or scrolling.")

    (* ;; "If AFTERWINDOW is non-NIL, the new window will be placed after AFTERWINDOW in the TEXTOBJ's list.  This lists us maintain an ordering of windows, for splitting and unsplitting.")

    (\DTEST WINDOW 'WINDOW)
    (PROG ((SEL (TEXTSEL TEXTOBJ))
           TEDITPROMPTWINDOW DS PROP TWIDTH THEIGHT LINES OLDWINDOWS)
          (replace (TEDITCARET TCCARETDS) of (COND
                                                [(LISTP (fetch (TEXTOBJ CARET) of TEXTOBJ))
                                                 (CAR (FLAST (fetch (TEXTOBJ CARET) of TEXTOBJ]
                                                (T (fetch (TEXTOBJ CARET) of TEXTOBJ)))
             with (WINDOWPROP WINDOW 'DSP))                  (* ; 
                                                           "The displaystream for flashing the caret")
          (replace (TEXTOBJ SELWINDOW) of TEXTOBJ with WINDOW)
          (WINDOWPROP WINDOW 'PROCESS NIL)                   (* ; 
                                                         "For the moment, this window has no process")
          (WINDOWPROP WINDOW 'TEDIT.PROPS PROPS)             (* ; 
                                     "Put the props on the window for others ...  **this should go**")
          (WINDOWPROP WINDOW 'TEXTSTREAM TSTREAM)            (* ; 
                                        "Save the text stream for the user to get at via the window.")
          (WINDOWPROP WINDOW 'TEXTOBJ TEXTOBJ)               (* ; 
                                            "Give a handle on the TEXTOBJ for the text being edited.")
          (WINDOWPROP WINDOW 'TEDIT.CURSORREGION (LIST 0 0 0 0))
                                                             (* ; "Used by CursorMovedFn")
          (WINDOWPROP WINDOW 'CURSORMOVEDFN (FUNCTION TEDIT.CURSORMOVEDFN))
          (WINDOWPROP WINDOW 'CURSOROUTFN (FUNCTION TEDIT.CURSOROUTFN))
          (SETQ DS (WINDOWPROP WINDOW 'DSP))
          (DSPRIGHTMARGIN 32767 DS)                          (* ; 
                                         "So we don't get spurious RETURNs printed out by the system")
          (SETQ OLDWINDOWS (fetch (TEXTOBJ \WINDOW) of TEXTOBJ))
          [replace (TEXTOBJ \WINDOW) of TEXTOBJ
             with (COND
                     [(LISTP OLDWINDOWS)                     (* ; 
                                                  "There are windows already.  Add this to the list.")
                      (COND
                         (AFTERWINDOW                        (* ; 
                                                "We know which window to put it after.  Put it there")
                                [RPLACD (FMEMB AFTERWINDOW OLDWINDOWS)
                                       (CONS WINDOW (CDR (FMEMB AFTERWINDOW OLDWINDOWS]
                                OLDWINDOWS)
                         (T                                  (* ; 
                                                      "Otherwise, just add it at the end of the list")
                            (NCONC1 OLDWINDOWS WINDOW]
                     (WINDOW (LIST WINDOW]
          (replace (TEXTOBJ DISPLAYCACHE) of TEXTOBJ with (CAR (\TEDIT.CREATE.LINECACHE 1)))
                                                             (* ; 
                                                   "and a CACHE for creating line images for display")
          [replace (TEXTOBJ DISPLAYCACHEDS) of TEXTOBJ with (DSPCREATE (fetch LCBITMAP
                                                                          of (fetch (TEXTOBJ 
                                                                                         DISPLAYCACHE
                                                                                           )
                                                                                of TEXTOBJ]
                                                             (* ; 
                                                     "A displaystream for changeing the image caches")
          (DSPOPERATION 'PAINT (fetch (TEXTOBJ DISPLAYCACHEDS) of TEXTOBJ))
          (DSPCLIPPINGREGION (create REGION
                                    LEFT _ 0
                                    BOTTOM _ 0
                                    WIDTH _ 100
                                    HEIGHT _ 15)
                 (fetch (TEXTOBJ DISPLAYCACHEDS) of TEXTOBJ))(* ; "Remember its size, too.")
          [COND
             ((SETQ PROP (LISTGET PROPS 'REGION))            (* ; 
                                                         "The caller wants to set a region.  Use his")
              (replace (TEXTOBJ WTOP) of TEXTOBJ with (fetch PTOP of PROP))
              (replace (TEXTOBJ WRIGHT) of TEXTOBJ with (fetch RIGHT of PROP))
              (replace (TEXTOBJ WBOTTOM) of TEXTOBJ with (fetch BOTTOM of PROP))
              (replace (TEXTOBJ WLEFT) of TEXTOBJ with (fetch LEFT of PROP)))
             (T                                              (* ; 
                                                             "Otherwise, default to the whole window")
                (replace (TEXTOBJ WLEFT) of TEXTOBJ with 0)
                (replace (TEXTOBJ WBOTTOM) of TEXTOBJ with 0)
                (replace (TEXTOBJ WTOP) of TEXTOBJ with (fetch HEIGHT of (DSPCLIPPINGREGION NIL DS)))
                (replace (TEXTOBJ WRIGHT) of TEXTOBJ with (fetch WIDTH of (DSPCLIPPINGREGION NIL DS]
          (SETQ LINES (\SHOWTEXT TEXTOBJ WINDOW))
          [replace (TEXTOBJ LINES) of TEXTOBJ
             with (COND
                     [AFTERWINDOW (for LINE inpanelines TEXTOBJ as WINDOW in OLDWINDOWS
                                     join (COND
                                             ((EQ WINDOW AFTERWINDOW)
                                              (LIST LINE LINES))
                                             (T (LIST LINE]
                     ((LISTP (fetch (TEXTOBJ LINES) of TEXTOBJ))
                      (NCONC1 (fetch (TEXTOBJ LINES) of TEXTOBJ)
                             LINES))
                     (LINES (LIST LINES]
          (\FIXSEL SEL TEXTOBJ)
          (TEDIT.NORMALIZECARET TEXTOBJ SEL)
          (\SHOWSEL SEL T)
          (\TEDIT.SET.WINDOW.EXTENT TEXTOBJ WINDOW)
          (\COPYSEL SEL TEDIT.SELECTION])

(\TEDIT.ACTIVE.WINDOWP
  [LAMBDA (W)                                                (* ; "Edited 30-May-91 23:33 by jds")

         (* Decides whether a TEdit window is really in use.
         The function TEDIT will set the TEXTOBJ prop of the window to T pro tem, to 
         reserve a window. Once the TEdit has really started, the TEXTOBJ property will be 
         a real textobj.)

    (PROG [(TEXTOBJ (OR (WINDOWPROP W 'TEXTOBJ)
                        (AND (WINDOWPROP W 'TEXTSTREAM)
                             (TEXTOBJ (WINDOWPROP W 'TEXTSTREAM]
          (RETURN (COND
                     ((EQ TEXTOBJ T)                         (* Can have a TEXTOBJ of T as a 
                                                             placeholder during creation...)
                      T)
                     (TEXTOBJ (AND (NOT (fetch (TEXTOBJ EDITFINISHEDFLG) of TEXTOBJ))
                                   (PROCESSP (WINDOWPROP W 'PROCESS])

(\TEDIT.BUTTONEVENTFN
  [LAMBDA (PANE STREAM)                                      (* ; "Edited 20-Jul-2023 21:52 by rmk")
                                                             (* ; "Edited  9-Apr-2023 22:59 by rmk")
                                                             (* ; "Edited  7-Apr-2023 11:07 by rmk")
                                                            (* ; "Edited 19-Sep-2021 22:58 by rmk:")

    (* ;; "Handle button events for a TEdit pane.  If no button is down, we got control on button-up transition, so ignore it.")

    (TOTOPW PANE)

    (* ;; "RMK: 2021/9 TOTOPW was in (almost) all the conditional branches, I moved it up so that it always happens, even if the click is perhaps in a menu.  There were cases where a second click in the window was needed to bring it above an overlapping window that it was under.  I think perhaps it was because the mouse button may not have been seen as down on the first click, so it would return before it raised the window.  But that was really bizarre--maybe the click was to see what was obscured by the overlapping window.")

    (CL:WHEN (AND (MOUSESTATE (OR LEFT MIDDLE RIGHT))
                  (NOT TEDIT.SELPENDING))

        (* ;; " Bail out if the mouse isn't down or there is a pending selection--don't want another selection to interfere.")

        (CL:WHEN STREAM
            (SETQ STREAM (TEXTOBJ STREAM)))
        [PROG ([TEXTOBJ (OR STREAM (WINDOWPROP PANE 'TEXTOBJ]
               (DS (WINDOWPROP PANE 'DSP))
               (GLOBALSEL TEDIT.SELECTION)
               (X (LASTMOUSEX PANE))
               (Y (LASTMOUSEY PANE))
               (CLIPREGION (DSPCLIPPINGREGION NIL PANE))
               (SELOPERATION 'NORMAL)
               (OLDX -32000)
               (OLDY -32000)
               OSEL SEL USERFN SELFN EXTENDFLG SELFINALFN PROC NOSEL)

         (* ;; "The prolog picks off and returns from a bunch of peripheral situations, then we fall through to the complexities of normal text selection.")

              (CL:UNLESS TEXTOBJ (RETURN))
              (CL:UNLESS [AND (NOT (GETTOBJ TEXTOBJ EDITFINISHEDFLG))
                              (OR (WINDOWPROP PANE 'PROCESS)
                                  (GETTOBJ TEXTOBJ TXTREADONLY)
                                  (SHIFTDOWNP 'SHIFT)
                                  (SHIFTDOWNP 'CTRL)
                                  (SHIFTDOWNP 'META)
                                  (KEYDOWNP 'MOVE)
                                  (KEYDOWNP 'COPY]           (* ; "There's no edit session behind this window.  You can only do window ops, or re-establish a session.")
                  (COND
                     ((\TEDIT.MOUSESTATE RIGHT)              (* ; 
                                                          "Right button gets the window command menu")
                      (DOWINDOWCOM PANE))
                     ((AND TEXTOBJ (NOT (TEXTPROP TEXTOBJ 'READONLY))
                           (NOT (TEXTPROP TEXTOBJ 'SELECTONLY))
                           [NOT (PROCESSP (WINDOWPROP PANE 'PROCESS]
                           (\TEDIT.MOUSESTATE MIDDLE)
                           (EQ (MENU TEDIT.RESTART.MENU)
                               'NewEditProcess))             (* ; 
                                  "Middle button on a dead window gives a menu for re-starting TEDIT")
                      (SETTOBJ TEXTOBJ EDITOPACTIVE NIL)
                      (TEDIT (GETTOBJ TEXTOBJ STREAMHINT)
                             PANE)))
                  (RETURN))
              (CL:WHEN (IGREATERP Y (fetch TOP of CLIPREGION))
                                                             (* ; 
                                       "It's not inside the window's REAL region, so call on a menu.")
                  [COND
                     ((\TEDIT.MOUSESTATE RIGHT)
                      (DOWINDOWCOM PANE))
                     ((AND (OR (SHIFTDOWNP 'SHIFT)
                               (KEYDOWNP 'COPY))
                           (MOUSESTATE LEFT))
                      (bind THING unless (OR (SHIFTDOWNP 'SHIFT)
                                             (KEYDOWNP 'COPY))
                         do (GETMOUSESTATE)
                            (CL:UNLESS (INSIDEP CLIPREGION (LASTMOUSEX PANE)
                                              (LASTMOUSEY PANE))
                                (CL:WHEN [SETQ THING (OR (GETTOBJ TEXTOBJ TXTFILE)
                                                         (TEXTPROP TEXTOBJ 'ITEM-NAME]
                                    (COPYINSERT (CL:IF (STREAMP THING)
                                                    (MKSTRING (FULLNAME THING))
                                                    THING))))
                            (RETURN)))
                     ((MOUSESTATE (OR LEFT MIDDLE))
                      (CL:WHEN (AND (SETQ USERFN (WINDOWPROP PANE 'TEDIT.TITLEMENUFN))
                                    (NEQ USERFN 'DON'T))
                          (ADD.PROCESS (LIST USERFN (KWOTE PANE))))]
                  (RETURN))
              (CL:WHEN (EQ (GETTOBJ TEXTOBJ MOUSEREGION)
                           'PANE)                            (* ; 
                            "In the window-ops region of the window.  Do a window split or something")
                  (\TEDIT.WINDOW.OPS TEXTOBJ PANE)
                  (RETURN))
              (CL:WHEN (GETTOBJ TEXTOBJ EDITOPACTIVE)        (* ; "Something else going on")
                  (RETURN))

         (* ;; "")

         (* ;; "Finally, the usual case -- he's really selecting something.  And there's nothing else going on now.")

              (SETQ SELFN (TEXTPROP TEXTOBJ 'SELFN))
              (SETSEL TEDIT.SCRATCHSELECTION CH# 0)          (* ; 
                       "Mark the user-visible scratch selection fresh, so changes can be detected...")
              (\CARET.DOWN)                                  (* ; 
                                                         "Make sure the caret isn't being displayed.")
              (RESETLST
                  (RESETSAVE TEDIT.SELPENDING TEXTOBJ)

                  (* ;; "Tell all TEdits not to run, since there is a selection in progress.  This is reset to NIL on return from here, to re-enable TEdit runs.")

                  (RESETSAVE (for CARET inside (GETTOBJ TEXTOBJ CARET)
                                do (replace TCCARET of CARET with (\CARET.CREATE BXHICARET)))
                         (LIST '\TEDIT.CARET (GETTOBJ TEXTOBJ CARET)))
                                                             (* ; 
                                     "Then make the caret be the special, tall one so he can see it.")
                  (COND
                     ((KEYDOWNP 'COPY)                       (* ; 
                                                        "In a read-only document, you can only copy.")
                      (SETQ GLOBALSEL TEDIT.SHIFTEDSELECTION)
                      (SETQ OSEL (GETTOBJ TEXTOBJ SHIFTEDSEL))
                      (SETQ SELOPERATION 'COPY))
                     ((AND (KEYDOWNP 'MOVE)
                           (NOT (GETTOBJ TEXTOBJ TXTREADONLY)))
                                                             (* ; 
                                                            "The MOVE key is down, so set MOVE mode.")
                      (SETQ GLOBALSEL TEDIT.MOVESELECTION)
                      (SETQ OSEL (GETTOBJ TEXTOBJ MOVESEL))
                      (SETQ SELOPERATION 'MOVE))
                     [(SHIFTDOWNP 'SHIFT)                    (* ; 
                                      "the SHIFT key is down;  mark this selection for COPY or MOVE.")
                      (COND
                         ((AND (SHIFTDOWNP 'CTRL)
                               (NOT (GETTOBJ TEXTOBJ TXTREADONLY)))
                                                             (* ; "CTRL-SHIFT select means MOVE.")
                          (SETQ GLOBALSEL TEDIT.MOVESELECTION)
                          (SETQ OSEL (GETTOBJ TEXTOBJ MOVESEL))
                          (SETQ SELOPERATION 'MOVE))
                         (T (SETQ GLOBALSEL TEDIT.SHIFTEDSELECTION)
                            (SETQ OSEL (GETTOBJ TEXTOBJ SHIFTEDSEL))
                            (SETQ SELOPERATION 'COPY]
                     ((SHIFTDOWNP 'META)                     (* ; 
                                          "He's holding the meta key down , do a copylooks selection")
                      (SETQ GLOBALSEL TEDIT.COPYLOOKSSELECTION)
                      (SETQ OSEL (GETTOBJ TEXTOBJ SHIFTEDSEL))
                      (SETQ SELOPERATION 'COPYLOOKS))
                     ((AND (SHIFTDOWNP 'CTRL)
                           (NOT (GETTOBJ TEXTOBJ TXTREADONLY)))
                                                             (* ; 
                                                       "Note that he's holding the control key down.")
                      (\SHOWSEL (GETTOBJ TEXTOBJ SEL)
                             NIL)
                      (SETQ GLOBALSEL TEDIT.DELETESELECTION)
                      (CL:UNLESS (GETSEL (GETTOBJ TEXTOBJ DELETESEL)
                                        SET)                 (* ; 
         "If there is a pending delete selectio, use it, and turn off the existing normal selection.")
                          (\COPYSEL (GETTOBJ TEXTOBJ SEL)
                                 (GETTOBJ TEXTOBJ DELETESEL)))
                      (SETSEL (GETTOBJ TEXTOBJ SEL)
                             SET NIL)

                      (* ;; "Remember to turn off the normal selection, since we'll be moving it to a new spot after the deletion.")

                      (SETQ OSEL (GETTOBJ TEXTOBJ DELETESEL))
                      (SETQ SELOPERATION 'DELETE)
                      (TEDIT.SET.SEL.LOOKS OSEL 'DELETE)
                      (SETTOBJ TEXTOBJ BLUEPENDINGDELETE NIL))
                     (T (SETQ OSEL (GETTOBJ TEXTOBJ SEL))
                        (SETTOBJ TEXTOBJ BLUEPENDINGDELETE NIL)))
                  (\COPYSEL OSEL GLOBALSEL)

                  (* ;; "")

                  (* ;; "Polling loop")

                  (bind (OSELOP _ SELOPERATION) while [OR (SHIFTDOWNP 'SHIFT)
                                                          (SHIFTDOWNP 'CTRL)
                                                          (SHIFTDOWNP 'META)
                                                          (KEYDOWNP 'MOVE)
                                                          (KEYDOWNP 'COPY)
                                                          (NOT (ZEROP (LOGAND LASTMOUSEBUTTONS 7]
                     do                                      (* ; 
                                                     "Poll the selection & display its current state")
                        [COND
                           ((ZEROP (LOGAND LASTMOUSEBUTTONS 7))
                                                             (* ; 
                                                    "No mouse buttons are down;  don't try anything.")
                            (SETQ OLDX -32000)               (* ; 
         "However, remember that pushing a mouse button is a change of status that we should notice.")
                            )
                           ((KEYDOWNP 'MOVE)                 (* ; 
                                               "the MOVE key is down;  mark this selection for MOVE.")
                            (SETQ SELOPERATION 'MOVE))
                           [(OR (SHIFTDOWNP 'SHIFT)
                                (KEYDOWNP 'COPY))            (* ; 
                                           "the SHIFT key is down;  COPY or MOVE depending on CTRL..")
                            (SETQ SELOPERATION (CL:IF (SHIFTDOWNP 'CTRL)
                                                   'MOVE
                                                   'COPY)]
                           ((SHIFTDOWNP 'META)               (* ; 
                                                    "He's holding the meta key down;  note the fact.")
                            (SETQ SELOPERATION 'COPYLOOKS))
                           ((SHIFTDOWNP 'CTRL)               (* ; 
                                 "He's holding only the CTRL key -- mark the selection for deletion.")
                            (SETQ SELOPERATION 'DELETE))
                           (T                                (* ; 
                                               "No key being held down;  revert to normal selection.")
                              (SETQ SELOPERATION 'NORMAL]
                        (COND
                           [(AND (OR [NOT (IEQP OLDX (SETQ X (LASTMOUSEX DS]
                                     [NOT (IEQP OLDY (SETQ Y (LASTMOUSEY DS]
                                     (NEQ OSELOP SELOPERATION))
                                 (INSIDEP CLIPREGION X Y))

                            (* ;; "Only do selection if (1) the mouse is inside the window proper and (2) the mouse has moved, or the kind of selection has changed")

                            (* ;; "Must precede the scroll-region test, so that we don't try to scroll while the mouse is inside the main window, even if the scroll bar overlaps the window (at left edge of screen, say)")

                            (SETQ OLDX X)
                            (SETQ OLDY Y)
                            [COND
                               ((\TEDIT.MOUSESTATE LEFT)     (* ; 
                                                             "Left button is character selection")
                                (SETQ SEL (TEDIT.SELECT X Y TEXTOBJ (GETTOBJ TEXTOBJ MOUSEREGION)
                                                 NIL SELOPERATION PANE))
                                (SETQ EXTENDFLG NIL))
                               ((\TEDIT.MOUSESTATE MIDDLE)   (* ; "Middle button is word selection")
                                (SETQ SEL (TEDIT.SELECT X Y TEXTOBJ (GETTOBJ TEXTOBJ MOUSEREGION)
                                                 T SELOPERATION PANE))
                                (SETQ EXTENDFLG NIL))
                               ((\TEDIT.MOUSESTATE RIGHT)    (* ; "RIght button extends selections")
                                (CL:UNLESS (EQ SELOPERATION OSELOP)

                                 (* ;; "Things changed since the last selection.  Grab the prior selection info, so that the extension is taken from the selection NOW being made, rather than the last existing old-type selection.")

                                    (\COPYSEL OSEL GLOBALSEL))
                                (CL:WHEN (GETSEL GLOBALSEL SET)
                                    (CL:WHEN (AND TEDIT.EXTEND.PENDING.DELETE (EQ SELOPERATION
                                                                                  'NORMAL)
                                                  (SETQ SELOPERATION 'PENDINGDEL))

                                        (* ;; 
         "If TeditBluePendingDelete flag is set, then simulate Laurel's blue-pending-delete feature.")

                                        (SETTOBJ TEXTOBJ BLUEPENDINGDELETE T))
                                    (SETQ SEL (TEDIT.EXTEND.SEL X Y GLOBALSEL TEXTOBJ SELOPERATION 
                                                     PANE))
                                    (SETQ EXTENDFLG T)))
                               (T 
                                  (* ;; 
                          "The mouse buttons are up, leaving us with a pro-tem 'permanent' selection")

                                  (\COPYSEL OSEL GLOBALSEL)  (* ; 
                         "And SEL is NOT SET ANY LONGER, so it won't get copied into OSEL down below")
                                  (CL:WHEN SEL (SETSEL SEL SET NIL]
                            (CL:WHEN [AND SEL (GETSEL SEL SET)
                                          SELFN
                                          (EQ 'DON'T (APPLY* SELFN TEXTOBJ SEL SELOPERATION
                                                            'TENTATIVE]
                                                             (* ; 
                                                "The selfn vetoed this selection, so mark it un-set.")
                                (SETSEL SEL SET NIL))
                            (COND
                               ((\TEDIT.SEL.CHANGED? SEL OSEL OSELOP SELOPERATION)
                                                             (* ; 
               "Something interesting about the selection changed.  We have to re-display its image.")
                                (CL:WHEN (MEMB SELOPERATION '(NORMAL PENDINGDEL))
                                                             (* ; 
                          "For a normal selection, set the 'window last selected in' for the TEXTOBJ")
                                    (SETTOBJ TEXTOBJ SELWINDOW PANE))
                                (SETQ OSEL (\TEDIT.REFRESH.SHOWSEL TEXTOBJ SEL OSEL OSELOP 
                                                  SELOPERATION EXTENDFLG))
                                (SETQ OSELOP SELOPERATION))
                               ([AND OSEL (GETSEL OSEL SET)
                                     (EQ (GETSEL OSEL SELKIND)
                                         'VOLATILE)
                                     (OR (NOT SEL)
                                         (NOT (GETSEL SEL SET]

                                (* ;; "There is an old selection around, but it is VOLATILE -- i.e., it shouldn't last longer than something is pointing at it.  Turn it off.")

                                (\SHOWSEL OSEL NIL)
                                (SETSEL OSEL SET NIL]
                           ((IN/SCROLL/BAR? PANE LASTMOUSEX LASTMOUSEY)
                                                             (* ; 
                                      "If he moves to the scroll bar, let him scroll without trouble")
                            (SCROLL.HANDLER PANE)))
                        (BLOCK)                              (* ; "Give other processes a chance")
                        (GETMOUSESTATE)                      (* ; "And get the new mouse info")
                        (TEDIT.CURSORMOVEDFN PANE))

                  (* ;; "End Polling loop")

                  (* ;; "")

                  (\COPYSEL OSEL GLOBALSEL)
                  (CL:WHEN (GETSEL OSEL SET)                 (* ; 
                                          "Only if a selection REALLY got made should we do this....")
                      (SELECTQ SELOPERATION
                          (COPY                              (* ; 
             "A COPY selection -- set the copy flag, and see if this is a copy to a non-TEdit window")
                                (SETQ TEDIT.COPY.PENDING T)
                                (SETSEL OSEL SET NIL)        (* ; 
                                                  "And turn off OSEL, to avoid spurious highlighting")
                                (\TEDIT.FOREIGN.COPY? GLOBALSEL))
                          (COPYLOOKS                         (* ; "A COPYLOOKS selection")
                                     (SETQ TEDIT.COPYLOOKS.PENDING T)
                                                             (* ; 
                                                  "And turn off OSEL, to avoid spurious highlighting")
                                     (SETSEL OSEL SET NIL))
                          (MOVE                              (* ; 
                                 "A MOVE selection -- set the flag to signal the TEdit command loop,")
                                (SETQ TEDIT.MOVE.PENDING T)  (* ; 
                                                  "And turn off OSEL, to avoid spurious highlighting")
                                (SETSEL OSEL SET NIL))
                          (DELETE (SETQ TEDIT.DEL.PENDING T) (* ; 
                                                  "And turn off OSEL, to avoid spurious highlighting")
                                  (SETSEL OSEL SET NIL))
                          (NORMAL                            (* ; 
                                                   "This is a normal selection;  set the caret looks")
                                  (SETTOBJ TEXTOBJ CARETLOOKS (\TEDIT.GET.INSERT.CHARLOOKS TEXTOBJ 
                                                                     OSEL)))
                          NIL))
                  (CL:WHEN SELFN
                      (APPLY* SELFN TEXTOBJ GLOBALSEL SELOPERATION 'FINAL))
                                                             (* ; 
                               "Give a user exit routine control, perhaps for logging of selections.")
                  (for CARET inside (GETTOBJ TEXTOBJ CARET) unless (fetch TCUP of CARET)
                     do (\EDIT.FLIPCARET CARET T)))
              (CL:WHEN [AND OSEL (GETSEL OSEL SET)
                            (GETSEL OSEL SELOBJ)
                            (SETQ SELFINALFN (IMAGEOBJPROP (GETSEL OSEL SELOBJ)
                                                    'WHENOPERATEDONFN]
                  (APPLY* SELFINALFN (GETSEL OSEL SELOBJ)
                         (WINDOWPROP PANE 'DSP)
                         'SELECTED OSEL (GETTOBJ TEXTOBJ STREAMHINT)))])])

(\TEDIT.WINDOW.OPS
  [LAMBDA (TEXTOBJ WINDOWTOSPLIT)                           (* ; "Edited 12-Oct-2021 15:01 by rmk:")

(* ;;; "Do window operations for TEdit, e.g., splitting a window, moving the split location, or unsplitting.")

    (PROG ([WINDOWOPREGION (create REGION
                                  LEFT _ (DIFFERENCE (fetch (TEXTOBJ WRIGHT) of TEXTOBJ)
                                                \TEDIT.OP.WIDTH)
                                  BOTTOM _ \TEDIT.OP.BOTTOM
                                  WIDTH _ \TEDIT.OP.WIDTH
                                  HEIGHT _ (fetch (REGION HEIGHT) of (WINDOWPROP WINDOWTOSPLIT
                                                                            'REGION]
           Y OPERATION)
          [while [AND (MOUSESTATE (OR LEFT MIDDLE RIGHT))
                      (INSIDE? WINDOWOPREGION (LASTMOUSEX WINDOWTOSPLIT)
                             (SETQ Y (LASTMOUSEY WINDOWTOSPLIT] do 

                                                              (* ;; 
                        "Wait until he lets up on a button, and signal which button was last pushed.")

                                                                   (BLOCK)
                                                                   (COND
                                                                      ((MOUSESTATE MIDDLE)
                                                                       (CURSOR \TEDIT.MAKESPLITCURSOR
                                                                              )
                                                                       (SETQ OPERATION 'SPLIT))
                                                                      ((MOUSESTATE LEFT)
                                                                       (CURSOR \TEDIT.MOVESPLITCURSOR
                                                                              )
                                                                       (SETQ OPERATION 'MOVE))
                                                                      ((MOUSESTATE RIGHT)
                                                                       (CURSOR \TEDIT.UNSPLITCURSOR)
                                                                       (SETQ OPERATION 'UNSPLIT]
          (COND
             ((INSIDE? WINDOWOPREGION (LASTMOUSEX WINDOWTOSPLIT)
                     (SETQ Y (LASTMOUSEY WINDOWTOSPLIT)))
              (CURSOR \TEDIT.SPLITCURSOR)
              (SELECTQ OPERATION
                  (SPLIT                                     (* ; "Splitting the window")
                         (\TEDIT.SPLITW WINDOWTOSPLIT Y))
                  (UNSPLIT                                   (* ; "Rejoining two panes")
                           (\TEDIT.UNSPLITW WINDOWTOSPLIT))
                  (MOVE                                      (* ; 
                                                             "Moving the divider between two panes.")
                        (TEDIT.PROMPTPRINT TEXTOBJ "Split-point moving is not yet implemented" T))
                  (SHOULDNT)))
             (T (CURSOR T])

(\TEDIT.EXPANDFN
  [LAMBDA (W)                                                (* jds " 7-May-85 15:56")
                                                             (* steals back the tty for us when the 
                                                             TEdit window is expanded.)
    (COND
       ((WINDOWPROP W 'PROCESS)                              (* There's a process to go with this 
                                                             edit window. Give it the TTY.)
        (TTY.PROCESS (WINDOWPROP W 'PROCESS])

(\TEDIT.MAINW
  [LAMBDA (TEXTSTREAM)                                       (* ; "Edited  6-May-2023 17:29 by rmk")
                                                             (* ; "Edited  5-Nov-2022 12:21 by rmk")
                                                             (* ; "Edited 30-May-91 23:33 by jds")

    (* ;; "Get the primary/top edit window for this edit session (i.e., the one with the title, and all the props & stuff). Generally it is (CAR PANES) and is not attached to anything else, but we don't want to count on the order or whether an appilcation might attach a primary Tedit window to something else.")

    (LET ((TEXTOBJ (TEXTOBJ TEXTSTREAM))
          PANES)
         (SETQ PANES (fetch (TEXTOBJ \WINDOW) of TEXTOBJ))
         (for PANE M inside PANES do (SETQ M (WINDOWPROP PANE 'MAINWINDOW))
                                     (if M
                                         then 

                                           (* ;; "This is attached to something.  If what it is attached to is not one of our panes, then it must be our primary.")

                                              (CL:UNLESS (MEMB M PANES)
                                                     (RETURN M))
                                       else (RETURN PANE])

(\TEDIT.PRIMARYW
  [LAMBDA (TEXTSTREAM)                                       (* ; "Edited 30-May-91 23:33 by jds")

         (* Given an edit session with possibly several PANES on the same document, give 
         me the PRINCIPAL one of them--i.e., the original edit window that has all the 
         back pointers, props &c on it.)

    (PROG ((TEXTOBJ (TEXTOBJ TEXTSTREAM))
           WINDOWS WINDOW)
          (SETQ WINDOWS (fetch (TEXTOBJ \WINDOW) of (TEXTOBJ TEXTSTREAM)))
                                                             (* The edit window (s) associated with 
                                                             this edit session)
          (SETQ WINDOW (COND
                          ((LISTP WINDOWS)

         (* If there are several panes, the first one in the list is the original window)

                           (CAR WINDOWS))
                          (T                                 (* If there's only the one window, 
                                                             that's the guy.)
                             WINDOWS)))
          (RETURN WINDOW])

(\TEDIT.COPYINSERTFN
  [LAMBDA (INSERTIONS WW)                                    (* ; "Edited 17-Jun-2023 16:17 by rmk")

    (* ;; "Given a string, an imageobj, or a list of any of them, insert it in the tedit window WW.")

    (* ;; "At least in some contexts, WW doesn't seem by itself to be a tedit window--but its MAINWINDOW is.  Don't know who creates that magic window.")

    (for INSERTION SEL [TEXTOBJ _ (TEXTOBJ (\TEDIT.MAINW (OR (TEXTOBJ WW T)
                                                             (WINDOWPROP WW 'MAINWINDOW] inside
                                                                                         INSERTIONS
       first (SETQ SEL (TEXTSEL TEXTOBJ)) do 
                                             (* ;; 
                                     "For multiple insertions, SEL gets updated so things move along")

                                             (COND
                                                ((IMAGEOBJP INSERTION)
                                                 (TEDIT.INSERT.OBJECT INSERTION TEXTOBJ SEL))
                                                (T (TEDIT.INSERT TEXTOBJ INSERTION SEL])

(\TEDIT.NEWREGIONFN
  [LAMBDA (FIXEDPOINT MOVINGPOINT WINDOW)                    (* jds "24-FEB-83 17:43")

         (* This function is called whenever a new region for the window is needed.
         It constrains the size of the window so that the menu and/or titles will fit)

    (COND
       ((NULL MOVINGPOINT)                                   (* This is true only the first time 
                                                             the function is called)
        FIXEDPOINT)
       (T (PROG (%#OFMENUITEMS MENUWIDTH XDELTA YDELTA)

         (* The NEWREGIONFNARG can be either a window or a list consisting of the number 
         of items in the menu and the minimum width of the window neede to hold the menu 
         an titles)

                (SETQ XDELTA (IDIFFERENCE (fetch (POSITION XCOORD) of MOVINGPOINT)
                                    (fetch (POSITION XCOORD) of FIXEDPOINT)))
                (SETQ YDELTA (IDIFFERENCE (fetch (POSITION YCOORD) of MOVINGPOINT)
                                    (fetch (POSITION YCOORD) of FIXEDPOINT)))
                [COND
                   [(IGEQ XDELTA 0)
                    (replace (POSITION XCOORD) of MOVINGPOINT with (IPLUS (fetch (POSITION XCOORD)
                                                                             of FIXEDPOINT)
                                                                          (IMAX 32 XDELTA]
                   (T (replace (POSITION XCOORD) of MOVINGPOINT with (IPLUS (fetch (POSITION XCOORD)
                                                                               of FIXEDPOINT)
                                                                            (IMIN -32 XDELTA]
                [COND
                   [(IGEQ YDELTA 0)
                    (replace (POSITION YCOORD) of MOVINGPOINT with (IPLUS (fetch (POSITION YCOORD)
                                                                             of FIXEDPOINT)
                                                                          (IMAX 32 YDELTA]
                   (T (replace (POSITION YCOORD) of MOVINGPOINT with (IPLUS (fetch (POSITION YCOORD)
                                                                               of FIXEDPOINT)
                                                                            (IMIN -32 YDELTA]
                (RETURN MOVINGPOINT])

(\TEDIT.SET.WINDOW.EXTENT
  [LAMBDA (TEXTOBJ PANE)                                     (* ; "Edited 11-May-2023 00:35 by rmk")
                                                             (* ; "Edited  4-May-2023 21:52 by rmk")
                                                             (* ; "Edited 28-Apr-2023 11:23 by rmk")
                                                             (* ; "Edited 15-Feb-2023 23:41 by rmk")
                                                             (* ; "Edited  3-Nov-2022 23:23 by rmk")
                                                             (* ; "Edited 30-May-91 23:33 by jds")

    (* ;; "Set the window's EXTENT property according to 1st and last char on screen.")

    (CL:UNLESS (TEXTPROP TEXTOBJ 'NOEXTENT)
        (CL:WHEN PANE
            (LET (FIRSTLINE LASTLINE PREG PHEIGHT PBOTTOM TOPCHAR BOTCHAR EXTHEIGHT EXTBOT YBOT
                        (TEXTLEN (TEXTLEN TEXTOBJ)))
                 (SETQ PREG (DSPCLIPPINGREGION NIL PANE))
                 (SETQ PHEIGHT (fetch HEIGHT of PREG))
                 (SETQ PBOTTOM (fetch BOTTOM of PREG))

                 (* ;; "First visible line")

                 (SETQ FIRSTLINE (find L inlines (fetch (TEXTWINDOW PLINES) of PANE)
                                    suchthat (ILESSP (GETLD L YBOT)
                                                    PHEIGHT)))

                 (* ;; "Last visible line")

                 (for L inlines FIRSTLINE while (IGEQ (GETLD L YBOT)
                                                      PBOTTOM) do (SETQ LASTLINE L))

                 (* ;; "Start of first visible line")

                 (SETQ TOPCHAR (CL:IF FIRSTLINE
                                   (GETLD FIRSTLINE LCHAR1)
                                   TEXTLEN))
                 (COND
                    (LASTLINE 

                           (* ;; "There IS a last line on the screen.  Grab its last character as the bottom character on the screen, and set the lowest-Y position to the bottom of that line")

                           (SETQ BOTCHAR (IMIN TEXTLEN (GETLD LASTLINE LCHARLIM)))
                           (SETQ YBOT (GETLD LASTLINE YBOT)))
                    (T 
                       (* ;; "Everything is off the top of the screen.  Bottom character is also the last char in the document, and the lowest Y we encountered is the top of the edit window.")

                       (SETQ BOTCHAR TEXTLEN)
                       (SETQ YBOT PHEIGHT)))
                 [COND
                    ((AND (IEQP BOTCHAR TEXTLEN)
                          (IEQP TOPCHAR TEXTLEN))            (* ; "At the bottom of the document")
                     (SETQ EXTBOT (SUB1 YBOT))
                     (SETQ EXTHEIGHT PHEIGHT))
                    (T 
                       (* ;; "Otherwise, set the bottom in proportion to what is left below the bottom of the screen, and the extent height in proportion to how much text appears in the window")

                       [SETQ EXTHEIGHT (FIXR (FQUOTIENT (ITIMES (IDIFFERENCE PHEIGHT YBOT)
                                                               TEXTLEN)
                                                    (IMAX (IDIFFERENCE BOTCHAR TOPCHAR)
                                                          1]
                       (SETQ EXTBOT (IDIFFERENCE YBOT (FIXR (FQUOTIENT (ITIMES (IDIFFERENCE PHEIGHT 
                                                                                      YBOT)
                                                                              (IDIFFERENCE TEXTLEN 
                                                                                     BOTCHAR))
                                                                   (IMAX (IDIFFERENCE BOTCHAR TOPCHAR
                                                                                )
                                                                         1]
                 (WINDOWPROP PANE 'EXTENT (create REGION
                                                 BOTTOM _ EXTBOT
                                                 HEIGHT _ (IMAX 1 EXTHEIGHT)
                                                 WIDTH _ (fetch WIDTH of PREG)
                                                 LEFT _ 0)))))])

(\TEDIT.SHRINK.ICONCREATE
  [LAMBDA (W ICON ICON-POSITION)                             (* ; "Edited 10-Apr-2023 09:44 by rmk")
                                                             (* ; "Edited 25-Apr-88 23:53 by jds")

    (* ;; "Create the icon that represents this window.")

    [PROG [(ICON (WINDOWPROP W 'ICON))
           (ICONTITLE (WINDOWPROP W 'TEDIT.ICON.TITLE))
           (SHRINKFN (WINDOWPROP W 'SHRINKFN]
          (COND
             ((NOT (WINDOWPROP W 'TEXTOBJ))                  (* ; 
                                      "This isn't really a TEdit window any more.  Don't do anything")
              NIL)
             ((TEDITMENUP W)                                 (* ; 
                                                    "This is a text menu, and shrinks without trace.")
              NIL)
             ((OR (IGREATERP (FLENGTH SHRINKFN)
                         3)
                  (AND (NOT (FMEMB 'SHRINKATTACHEDWINDOWS SHRINKFN))
                       (IGREATERP (FLENGTH SHRINKFN)
                              2)))                           (* ; 
                               "There are other functions that expect to handle this.  Don't bother.")
              NIL)
             ((OR [AND ICONTITLE (EQUAL ICONTITLE (TEXTSTREAM.TITLE (TEXTSTREAM W]
                  (AND (NOT ICONTITLE)
                       ICON))

              (* ;; 
        "we built this and the title is the same, or he has already put an icon on this.  Do nothing")

              NIL)
             (ICON 
                   (* ;; "There's an existing icon window;  change the title in it")

                   [WINDOWPROP W 'TEDIT.ICON.TITLE (SETQ ICONTITLE (TEXTSTREAM.TITLE (TEXTSTREAM
                                                                                      W]
                   (ICONTITLE ICONTITLE NIL NIL ICON))
             (T                                              (* ; "install a new icon")
                [WINDOWPROP W 'TEDIT.ICON.TITLE (SETQ ICONTITLE (TEXTSTREAM.TITLE (TEXTSTREAM W]
                (WINDOWPROP W 'ICON (TITLEDICONW TEDIT.TITLED.ICON.TEMPLATE ICONTITLE TEDIT.ICON.FONT
                                           ICON-POSITION T NIL 'FILE]
    (WINDOWPROP W 'ICON])

(\TEDIT.SHRINKFN
  [LAMBDA (W ICON ICONW)                                     (* jds "14-Dec-84 08:56")
                                                             (* hands off the tty to the exec 
                                                             process)
    (COND
       ((AND (EQ (WINDOWPROP W 'PROCESS)
                 (TTY.PROCESS)))
        (TTY.PROCESS T)

         (* per bvm, this means "Hand the TTY to some other process" %.
         It tries EXEC first; if that's not found, it hands it to MOUSE.)

        ])

(\TEDIT.SPLITW
  [LAMBDA (WINDOW Y)                                         (* ; "Edited  5-Nov-2022 23:51 by rmk")
                                                             (* ; "Edited 30-May-91 23:38 by jds")

    (* ;; "SPLIT WINDOW W AT W-RELATIVE Y into 2 %"panes%" that can scroll independently.")

    (PROG* ((WREG (WINDOWPROP WINDOW 'REGION))
            (TEXTOBJ (WINDOWPROP WINDOW 'TEXTOBJ))
            (PANES (COPY (fetch (TEXTOBJ \WINDOW) of TEXTOBJ)))
            (NEXTPANE (fetch (TEXTWINDOW NEXTPANE) of WINDOW))
            ATTACHEDWINDOWS NEWW OLDW OTITLE OLDCARET NEWCARET)
           (SETQ Y (OR Y (LASTMOUSEY WINDOW)))               (* ; "Get the Y-position where we're to make the split--it's either supplied or we use the mouse's Y position.")
           (CL:WHEN NEXTPANE                                 (* ; 
                                "If there's already a pane below this one, detach it for the moment.")
               (DETACHWINDOW NEXTPANE))
           (SHAPEW WINDOW (create REGION using WREG BOTTOM _ (IPLUS (fetch BOTTOM of WREG)
                                                                    Y)
                                               HEIGHT _ (IDIFFERENCE (fetch HEIGHT of WREG)
                                                               Y)))
                                                             (* ; 
                                            "Reshape the original window to form the upper %"pane%".")

     (* ;; "Attach the new window, without disturbing the pre-existing attached windows")

           (SETQ ATTACHEDWINDOWS (WINDOWPROP WINDOW 'ATTACHEDWINDOWS NIL))
           (ATTACHWINDOW (SETQ NEWW (CREATEW (create REGION using WREG HEIGHT _ Y)
                                           NIL NIL NIL))
                  WINDOW
                  'BOTTOM
                  'JUSTIFY
                  'MAIN)                                     (* ; "and attach a lower %"pane%".")
           [WINDOWPROP WINDOW 'ATTACHEDWINDOWS (APPEND ATTACHEDWINDOWS (WINDOWPROP WINDOW
                                                                              'ATTACHEDWINDOWS]

     (* ;; "[end of attached-window hackery to prevent disturbance]")

           (WINDOWPROP NEWW 'TEDITCREATED T)
           (DSPFONT (fetch (CHARLOOKS CLFONT) of (fetch (TEXTOBJ CARETLOOKS) of TEXTOBJ))
                  NEWW)                                      (* ; 
                           "Set the font on the display stream to be the current one from CARETLOOKS")
           (SETQ OLDW (fetch (TEXTOBJ \WINDOW) of TEXTOBJ))
           (SETQ OTITLE (\TEDIT.WINDOW.TITLE TEXTOBJ))
           (SETQ OLDCARET (fetch (TEXTOBJ CARET) of TEXTOBJ))
           (SETQ NEWCARET (create TEDITCARET
                                 TCCARETDS _ (WINDOWPROP NEWW 'DSP)
                                 TCFORCEUP _ T))
           (replace (TEXTOBJ CARET) of TEXTOBJ with (CL:IF (LISTP OLDCARET)
                                                        (NCONC1 OLDCARET NEWCARET)
                                                        (LIST OLDCARET NEWCARET)))
           (for SEL in (LIST (fetch (TEXTOBJ SEL) of TEXTOBJ)
                             (fetch (TEXTOBJ SCRATCHSEL) of TEXTOBJ)
                             (fetch (TEXTOBJ MOVESEL) of TEXTOBJ)
                             (fetch (TEXTOBJ SHIFTEDSEL) of TEXTOBJ)
                             (fetch (TEXTOBJ DELETESEL) of TEXTOBJ))
              do (change (fetch (SELECTION L1) of SEL)
                        (NCONC1 DATUM NIL))
                 (change (fetch (SELECTION LN) of SEL)
                        (NCONC1 DATUM NIL)))
           (\TEDIT.WINDOW.SETUP NEWW TEXTOBJ (fetch (TEXTOBJ STREAMHINT) of TEXTOBJ)
                  (APPEND '(NOTITLE T PROMPTWINDOW DON'T)
                         (fetch (TEXTOBJ EDITPROPS) of TEXTOBJ))
                  WINDOW)
           [for CARET in (fetch (TEXTOBJ CARET) of TEXTOBJ) as PANE in (fetch (TEXTOBJ \WINDOW)
                                                                          of TEXTOBJ)
              do (replace TCCARETDS of CARET with (WINDOWPROP PANE 'DSP]
           (replace (TEXTOBJ WINDOWTITLE) of TEXTOBJ with OTITLE)
           (WINDOWPROP NEWW 'PROCESS (WINDOWPROP WINDOW 'PROCESS))
           (replace (TEXTWINDOW NEXTPANE) of WINDOW with NEWW)
                                                             (* ; 
                                                     "Tell the main window about its new lower pane.")
           (CL:WHEN NEXTPANE                                 (* ; 
                          "There was already a pane below this one. Attach it to the new lower pane.")
               (ATTACHWINDOW NEXTPANE NEWW 'BOTTOM 'JUSTIFY 'MAIN)
                                                             (* ; 
                                                  "Tell the lower pane about its lower, lower pane..")
               (replace (TEXTWINDOW NEXTPANE) of NEWW with NEXTPANE))])

(\TEDIT.UNSPLITW
  [LAMBDA (PANE)                                             (* ; "Edited  2-Sep-2023 16:18 by rmk")
                                                             (* ; "Edited 18-Apr-2023 23:41 by rmk")
                                                             (* ; "Edited  6-Nov-2022 00:06 by rmk")
    (PROG* ((TEXTOBJ (WINDOWPROP PANE 'TEXTOBJ))
            (PANES (GETTOBJ TEXTOBJ \WINDOW))
            (PRIMARYPANE (\TEDIT.MAINW PANE))
            (SEL (TEXTSEL TEXTOBJ))
            (SCRATCHSEL (GETTOBJ TEXTOBJ SCRATCHSEL))
            PRIORPANE NEXTPANE)
           (CL:WHEN (EQ PANE PRIMARYPANE)
               (AND NIL (TEDIT.PROMPTPRINT TEXTOBJ "Can't UNSPLIT the main window." T))
               (RETURN))
           [SETQ PRIORPANE (find P in PANES suchthat (EQ PANE (fetch (TEXTWINDOW NEXTPANE)
                                                                 of P]
           (SETQ NEXTPANE (fetch (TEXTWINDOW NEXTPANE) of PANE))
           (\TEDIT.SHOWSELS TEXTOBJ NIL)                     (* ; 
                                                            "Turn off selections during the unsplit.")
           (SETTOBJ TEXTOBJ SELWINDOW PRIMARYPANE)
           (for P in PANES as CARET in (GETTOBJ TEXTOBJ CARET) as LINE in (GETTOBJ TEXTOBJ LINES)
              when (EQ PANE P) do (change (GETTOBJ TEXTOBJ CARET TEXTOBJ)
                                         (DREMOVE CARET DATUM))
                                  (change (GETTOBJ TEXTOBJ LINES)
                                         (DREMOVE LINE DATUM))
                                  (RETURN))

     (* ;; "Same logic, can't combine because DWIM says too many concurrent loops")

           (for P in PANES as SL1 in (GETSEL SEL L1) as SLN in (GETSEL SEL LN) as SCL1
              in (GETSEL SCRATCHSEL L1) as SCLN in (GETSEL SCRATCHSEL LN)
              when (EQ PANE P) do (change (GETSEL SEL L1)
                                         (DREMOVE SL1 DATUM))
                                  (change (GETSEL SEL LN)
                                         (DREMOVE SLN DATUM))
                                  (change (GETSEL SCRATCHSEL L1)
                                         (DREMOVE SCL1 DATUM))
                                  (change (GETSEL SCRATCHSEL LN)
                                         (DREMOVE SCLN DATUM))
                                  (RETURN))
           (SETTOBJ TEXTOBJ \WINDOW (DREMOVE PANE PANES))
           (replace (TEXTWINDOW NEXTPANE) of PANE with NIL)
           (TEDIT.DEACTIVATE.WINDOW PANE T T)
           (\FIXSEL (TEXTSEL TEXTOBJ)
                  TEXTOBJ)

     (* ;; "Done with the TEDIT stuff. ")

     (* ;; 
     "Now rearrange the pane window-attachment linkages. This gives PANE's region to its prior pane.")

           (DETACHWINDOW PANE)
           (replace (TEXTWINDOW NEXTPANE) of PRIORPANE with NEXTPANE)
           [SHAPEW PRIORPANE (UNIONREGIONS (WINDOWPROP PANE 'REGION)
                                    (WINDOWPROP PRIORPANE 'REGION]
           (CL:WHEN NEXTPANE

               (* ;; 
     "PANE had a yet lower pane attached to it.  Promote it to PANE's position in the NEXTPANE chain")

               (DETACHWINDOW NEXTPANE)
               (ATTACHWINDOW NEXTPANE PRIORPANE 'BOTTOM 'JUSTIFY 'MAIN))
           (CLOSEW PANE)
           (\TEDIT.SHOWSELS TEXTOBJ T])

(\TEDIT.WINDOW.SETUP
  [LAMBDA (WINDOW TEXTOBJ TEXTSTREAM PROPS AFTERWINDOW)      (* ; "Edited 19-Aug-2023 11:44 by rmk")
                                                             (* ; "Edited 30-Jul-2023 23:25 by rmk")
                                                             (* ; "Edited 15-May-2023 23:42 by rmk")
                                                             (* ; "Edited 10-May-2023 23:47 by rmk")
                                                             (* ; "Edited  5-Nov-2022 23:13 by rmk")
                                                             (* ; "Edited 11-Jun-99 15:48 by rmk:")
                                                             (* ; "Edited 30-May-91 23:34 by jds")

    (* ;; "Set up the window and TEXTOBJ so they correspond, and the window is a TEDIT window.")

    (* ;; "Do the minimal, everyone-wants-it style of setup.  Leave more specialized setup for other functions.")

    (CL:UNLESS WINDOW (\ILLEGAL.ARG WINDOW))
    (LET (TEDITPROMPTWINDOW MENUPROP)
         (WINDOWPROP WINDOW 'BUTTONEVENTFN (FUNCTION \TEDIT.BUTTONEVENTFN))
                                                             (* ; 
                                       "Set the window up with the right mouse interfaces for TEDIT.")
         (WINDOWPROP WINDOW 'RIGHTBUTTONFN (FUNCTION \TEDIT.BUTTONEVENTFN))
         (WINDOWPROP WINDOW 'HARDCOPYFN (FUNCTION TEDIT.HARDCOPYFN))
                                                             (* ; 
                                                   "Hook into the system standard hardcopy interface")
         (SETQ MENUPROP (LISTGET PROPS 'MENU))               (* ; 
                                                          "The Command menu, or list of items for it")
         (COND
            ((type? MENU MENUPROP)                           (* ; "It's a menu.  just use it.")
             (WINDOWPROP WINDOW 'TEDIT.MENU MENUPROP))
            (MENUPROP                                        (* ; 
                                "It's a list of menu items.  Force a new menu on next middle button.")
                   (WINDOWPROP WINDOW 'TEDIT.MENU.COMMANDS MENUPROP)
                   (WINDOWPROP WINDOW 'TEDIT.MENU NIL)))
         (TEDIT.MINIMAL.WINDOW.SETUP WINDOW TEXTOBJ TEXTSTREAM PROPS AFTERWINDOW)

         (* ;; "Do the general-purpose window setting up--the kind that every user will want.")

         (* ;; "Then do the stuff that a TEdit session needs as well.")

         (WINDOWADDPROP WINDOW 'RESHAPEFN (FUNCTION \TEDIT.RESHAPEFN))
         (WINDOWADDPROP WINDOW 'NEWREGIONFN (FUNCTION \TEDIT.NEWREGIONFN))
         (CL:UNLESS (WINDOWPROP WINDOW 'SCROLLFN)
             (WINDOWPROP WINDOW 'SCROLLFN (FUNCTION \TEDIT.SCROLLFN)))
         (WINDOWPROP WINDOW 'REPAINTFN (FUNCTION \TEDIT.REPAINTFN))
         (CL:UNLESS (WINDOWPROP WINDOW 'TEDIT.TITLEMENUFN)
             (WINDOWPROP WINDOW 'TEDIT.TITLEMENUFN (OR (LISTGET PROPS 'TITLEMENUFN)
                                                       (FUNCTION TEDIT.DEFAULT.MENUFN))))
                                                             (* ; 
                      "Only put our menu function on the window if the originator didn't supply one.")
         (WINDOWADDPROP WINDOW 'CLOSEFN (FUNCTION TEDIT.DEACTIVATE.WINDOW)
                T)                                           (* ; 
                                                             "To clean up when the window is closed")
         (WINDOWPROP WINDOW 'WINDOWENTRYFN (FUNCTION \TEDIT.PROCIDLEFN))
                                                             (* ; 
                                           "For grabbing the TTY when the mouse clicks in the window")
         (CL:UNLESS (WINDOWPROP WINDOW 'ICONFN)
             (WINDOWPROP WINDOW 'ICONFN (FUNCTION \TEDIT.SHRINK.ICONCREATE)))
                                                             (* ; 
                                            "Only set up to create a shrink icon if nobody else has.")
         (WINDOWADDPROP WINDOW 'SHRINKFN (FUNCTION \TEDIT.SHRINKFN))
                                                             (* ; 
                                           "But always give up control of the keyboard on shrinking.")
         (WINDOWADDPROP WINDOW 'EXPANDFN (FUNCTION \TEDIT.EXPANDFN))
                                                             (* ; "And grab it back on expansion")
         (WINDOWPROP WINDOW 'TEDIT.CURSORREGION (LIST 0 0 0 0))
         [WINDOWPROP WINDOW 'HARDCOPYFILEFN (FUNCTION (LAMBDA (W EXT)
                                                        (LET ((STRM (GETTOBJ (TEXTOBJ W)
                                                                           TXTFILE)))
                                                             (CL:WHEN STRM
                                                                 (PACKFILENAME 'VERSION NIL
                                                                        'EXTENSION
                                                                        (OR EXT 'IMAGEFILE)
                                                                        'BODY
                                                                        (FULLNAME STRM)))]
                                                             (* ; "Used by CursorMovedFn")
         (CL:UNLESS AFTERWINDOW                              (* ; "We aren't splitting windows.")
             (\TEDIT.WINDOW.TITLE TEXTOBJ (\TEDIT.ORIGINAL.WINDOW.TITLE WINDOW (GETTOBJ TEXTOBJ 
                                                                                      \DIRTY)))
             (CL:UNLESS (OR (EQ 'DON'T (LISTGET PROPS 'PROMPTWINDOW))
                            (AND NIL (LISTGET PROPS 'READONLY))
                            (SETTOBJ TEXTOBJ PROMPTWINDOW (LISTGET PROPS 'PROMPTWINDOW))
                            (GETTOBJ TEXTOBJ MENUFLG))       (* ; 
                                                   "RMK: Add a prompt for messages even if readonly.")
                 (SETQ TEDITPROMPTWINDOW (GETPROMPTWINDOW WINDOW (OR (LISTGET PROPS 
                                                                            'PROMPTWINDOWHEIGHT)
                                                                     TEDIT.PROMPTWINDOW.HEIGHT 1)
                                                TEDIT.PROMPT.FONT))
                 (SETTOBJ TEXTOBJ PROMPTWINDOW TEDITPROMPTWINDOW)
                 (WINDOWPROP TEDITPROMPTWINDOW 'TEDIT.PROMPTWINDOW T)
                                                             (* ; 
                                           "And remember that this is a TEdit-supplied prompt window")
                 (WINDOWPROP TEDITPROMPTWINDOW 'PAGEFULLFN (FUNCTION \TEDIT.PROMPT.PAGEFULLFN))))])

(\PANEREGION
  [LAMBDA (PANE)                                             (* ; "Edited 10-May-2023 23:15 by rmk")

    (* ;; "Value may be a shrunken version of PANE's clipping region, reduced to the subregion that is visible on the screen in its original coordinates.  That is, if the bottom is now 100 points below the screen, then 100 is added to BOTTOM and taken away from HEIGHT.")

    (LET [(PREG (DSPCLIPPINGREGION NIL PANE))
          (WREG (WINDOWPROP PANE 'REGION]
         (if (OR (ILESSP (fetch (REGION LEFT) of WREG)
                        0)
                 (ILESSP (fetch (REGION BOTTOM) of WREG)
                        0)
                 (IGREATERP (fetch (REGION PRIGHT) of WREG)
                        SCREENWIDTH)
                 (IGREATERP (fetch (REGION PTOP) of WREG)
                        SCREENHEIGHT))
             then [LET [[LDIFF (IMAX 0 (IDIFFERENCE 0 (fetch (REGION LEFT) of WREG]
                        [BDIFF (IMAX 0 (IDIFFERENCE 0 (fetch (REGION BOTTOM) of WREG]
                        (RDIFF (IMAX 0 (IDIFFERENCE (fetch (REGION RIGHT) of WREG)
                                              SCREENWIDTH)))
                        (TDIFF (IMAX 0 (IDIFFERENCE (fetch (REGION HEIGHT) of WREG)
                                              SCREENHEIGHT]

                       (* ;; 
      "The diffs are positive or 0--how much is outside the screen and needs to be added/subtracted.")

                       (CREATEREGION (IPLUS (fetch (REGION LEFT) of PREG)
                                            LDIFF)
                              (IPLUS (fetch (REGION BOTTOM) of PREG)
                                     BDIFF)
                              (IDIFFERENCE (fetch (REGION WIDTH) of PREG)
                                     (IPLUS LDIFF RDIFF))
                              (IDIFFERENCE (fetch (REGION HEIGHT) of PREG)
                                     (IPLUS BDIFF TDIFF]
           else PREG])
)

(RPAQ? \TEDIT.OP.WIDTH 12)

(RPAQ? \TEDIT.OP.BOTTOM 12)
(DECLARE%: DONTEVAL@LOAD DOCOPY 
(DECLARE%: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS \TEDIT.OP.WIDTH \TEDIT.OP.BOTTOM)
)
)
(RPAQ BXCARET (CURSORCREATE (QUOTE #*(16 16)@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@A@@@CH@@CH@@FL@@FL@@LF@@
) (QUOTE NIL) 3 4))
(RPAQ BXHICARET (CURSORCREATE (QUOTE #*(16 16)A@@@A@@@A@@@A@@@A@@@A@@@A@@@A@@@CH@@GL@@FL@@LF@@HB@@@@@@@@@@@@@@
) (QUOTE NIL) 4 7))
(RPAQ TEDIT.LINECURSOR (CURSORCREATE (QUOTE #*(16 16)@@@A@@@C@@@G@@@O@@AO@@CO@@GO@@@O@@AK@@AI@@C@@@C@@@F@@@F@@@L@@@L@
) (QUOTE NIL) 15 15))
(RPAQ \TEDIT.SPLITCURSOR (CURSORCREATE (QUOTE #*(16 16)@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@OO@@HA@@HA@@HA@@HA@@HA@@HA@@OO@@
) (QUOTE NIL) 4 4))
(RPAQ \TEDIT.MOVESPLITCURSOR (CURSORCREATE (QUOTE #*(16 16)@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@OO@@HA@@HA@@OO@@OO@@HA@@HA@@OO@@
) (QUOTE NIL) 4 4))
(RPAQ \TEDIT.UNSPLITCURSOR (CURSORCREATE (QUOTE #*(16 16)@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@OO@@HA@@JE@@II@@II@@JE@@HA@@OO@@
) (QUOTE NIL) 4 4))
(RPAQ \TEDIT.MAKESPLITCURSOR (CURSORCREATE (QUOTE #*(16 16)@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@OO@@HA@@HA@@MK@@MK@@HA@@HA@@OO@@
) (QUOTE NIL) 4 4))

(RPAQ? TEDIT.DEFAULT.WINDOW NIL)
(DECLARE%: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS TEDIT.DEFAULT.WINDOW)
)



(* ; "User-level %"is this a TEdit window?%" function.")

(DEFINEQ

(TEDITWINDOWP
  [LAMBDA (WINDOW)                                           (* ; "Edited 16-Jan-89 10:28 by jds")

    (* ;; "Returns non-NIL if WINDOW is a legal TEdit window:  I.e., if it has a TEXTOBJ property, and the TEXTOBJ thinks this is its window.")

    (COND
       ((WINDOWP WINDOW))
       ((DISPLAYSTREAMP WINDOW)
        (SETQ WINDOW (WFROMDS WINDOW)))
       (T (SETQ WINDOW NIL)))
    (LET* [(CHECKED-WINDOW (COND
                              ((WINDOWP WINDOW)
                               WINDOW)
                              ((DISPLAYSTREAMP WINDOW)
                               (WFROMDS WINDOW))
                              (T NIL)))
           (TEXTOBJ (AND CHECKED-WINDOW (WINDOWPROP CHECKED-WINDOW 'TEXTOBJ]
          (AND (type? TEXTOBJ TEXTOBJ)
               (MEMBER CHECKED-WINDOW (fetch (TEXTOBJ \WINDOW) of TEXTOBJ))
               T])
)



(* ; "User-typein support")

(DEFINEQ

(TEDIT.GETINPUT
  [LAMBDA (STREAM PROMPTSTRING DEFAULTSTRING DELIMITER.LIST) (* ; "Edited 30-Jul-2023 08:51 by rmk")
                                                             (* ; "Edited 21-Jan-2022 23:14 by rmk")
                                                             (* ; "Edited 30-May-91 23:34 by jds")

    (* ;; "Ask for input (file names, &c) for TEdit, perhaps with a default.")

    (LET* ((TEXTOBJ (TEXTOBJ STREAM))
           (TPROMPT (GETTOBJ TEXTOBJ PROMPTWINDOW))
           RESULT)
          (SETQ TPROMPT (SELECTQ TPROMPT
                            (DON'T [COND
                                      ((TEXTPROP TEXTOBJ 'PWINDOW.ON.DEMAND)
                                       (GETPROMPTWINDOW (\TEDIT.MAINW STREAM])
                            (NIL [GETPROMPTWINDOW (\TEDIT.MAINW STREAM)
                                        NIL NIL (NOT (TEXTPROP TEXTOBJ 'PWINDOW.ON.DEMAND])
                            TPROMPT))
          (COND
             (TPROMPT                                        (* ; 
                                                       "If it's our own promptwindow, just clear it.")
                    (CLEARW TPROMPT))
             (T                                              (* ; 
                                              "If it's the system's window, just move to a new line.")
                (FRESHLINE PROMPTWINDOW)))
          (SETQ RESULT (TTYINPROMPTFORWORD PROMPTSTRING DEFAULTSTRING NIL (OR TPROMPT PROMPTWINDOW)
                              NIL
                              'TTY
                              (OR DELIMITER.LIST (CHARCODE (EOL LF TAB ESCAPE)))
                              NIL))
          (CL:WHEN (AND (EQ (CHARCODE %")
                            (CHCON1 RESULT))
                        (EQ (CHARCODE %")
                            (NTHCHARCODE RESULT -1)))

              (* ;; "Presumably it is not intended to have a string with string quotes on the edges.")

              (SETQ RESULT (SUBSTRING RESULT 2 -2))
              (WINDOWPROP (OR TPROMPT PROMPTWINDOW)
                     'PROCESS NIL))
          RESULT])

(\TEDIT.MAKEFILENAME
  [LAMBDA (STRING)

    (* ;; "Edited  9-Sep-2023 17:13 by rmk")

    (* ;; "Edited 24-Oct-2022 00:02 by rmk:  Originally returned an atom, which is no longer a valid filename.")
                                                             (* jds " 8-Feb-85 11:25")

    (* ;; "Takes a string, removes leading and trailing spaces, and converts it to an ATOM.")

    (CL:UNLESS (STRING.EQUAL STRING NIL)
        (LET ((FIRSTNONSPACE (STRPOSL '(% )
                                    STRING NIL T))
              (LASTNONSPACE (STRPOSL '(% )
                                   STRING NIL T T)))
             (CL:WHEN (AND FIRSTNONSPACE LASTNONSPACE)
                    (SUBSTRING STRING FIRSTNONSPACE LASTNONSPACE))))])
)



(* ; "Attached Prompt window support.")

(DEFINEQ

(TEDIT.PROMPTPRINT
  [LAMBDA (TEXTSTREAM MSG CLEAR? FLASH?)                     (* ; "Edited 30-Jul-2023 08:52 by rmk")
                                                             (* ; "Edited  9-Jul-2023 12:37 by rmk")
                                                             (* ; "Edited  5-Apr-2023 15:08 by rmk")
                                                             (* ; 
                                                        "Edited  4-Jun-93 12:04 by sybalsky:mv:envos")

    (* ;; "Print a message in the editor's prompt window (if none, use the global promptwindow).  Optionally clear the window first.")

    (PROG (WINDOW PWINDOW (TEXTOBJ (TEXTOBJ TEXTSTREAM))
                 MAINTEXTOBJ)
          (COND
             [(AND TEXTOBJ (fetch (TEXTOBJ MENUFLG) of TEXTOBJ))
                                                             (* ; 
                 "There is a known textobj, and it's a menu.  Go use the main editor's promptwindow.")
              (SETQ MAINTEXTOBJ (WINDOWPROP (\TEDIT.MAINW TEXTOBJ)
                                       'TEXTOBJ))            (* ; 
                           "Find the TEXTOBJ for the main edit window, and use ITS prompting window.")
              (SETQ WINDOW (AND MAINTEXTOBJ (fetch (TEXTOBJ PROMPTWINDOW) of MAINTEXTOBJ]
             (TEXTOBJ (SETQ WINDOW (fetch (TEXTOBJ PROMPTWINDOW) of TEXTOBJ))
                                                             (* ; 
                                        "There IS an editor window to get to;  use its prompt window")
                    ))
          [SETQ WINDOW (CAR (NLSETQ (SELECTQ WINDOW
                                        (DON'T [COND
                                                  ((TEXTPROP TEXTOBJ 'PWINDOW.ON.DEMAND)
                                                   (GETPROMPTWINDOW (\TEDIT.MAINW TEXTSTREAM])
                                        (NIL [AND TEXTSTREAM (GETPROMPTWINDOW
                                                              (\TEDIT.MAINW TEXTSTREAM)
                                                              NIL NIL (NOT (TEXTPROP TEXTOBJ
                                                                                  'PWINDOW.ON.DEMAND])
                                        WINDOW]              (* ; 
                                              "Try to find an editor's prompt window for our message")
          (COND
             ((WINDOWP WINDOW)                               (* ; 
                                                      "We found a window to use.  Print the message.")

              (* ;; "WAS (RESETLST (RESETSAVE (TTYDISPLAYSTREAM WINDOW)) (COND (CLEAR? (CLEARW WINDOW))) (PRIN1 MSG WINDOW))")

              (CL:WHEN CLEAR? (CLEARW WINDOW))
              (CL:WHEN FLASH? (FLASHWINDOW WINDOW 1 75))
              (PRIN1 MSG WINDOW))
             (T                                              (* ; 
                                                             "Failing all else, use PROMPTWINDOW.")
                (FRESHLINE PROMPTWINDOW)
                (CL:WHEN FLASH? (FLASHWINDOW WINDOW 1 75))
                (printout PROMPTWINDOW MSG])

(TEDIT.PROMPTCLEAR
  [LAMBDA (TEXTSTREAM FONT)                                  (* ; "Edited 14-Mar-98 12:52 by rmk:")
                                                             (* ; "Edited 14-Oct-87 15:35 by bvm:")

    (* ;; "Clears the promptwindow attached to TEXTSTREAM and shrinks it back to a single line in font FONT (or TEDIT.PROMPT.FONT) if it has grown.  TEXTSTREAM could actually be a stream on the promptwindow itself.")

    (LET [MW (PW (IF (CAR (NLSETQ (GETPROMPTWINDOW (\TEDIT.MAINW TEXTSTREAM)
                                         NIL NIL T)))
                   ELSEIF (WINDOWPROP (WFROMDS TEXTSTREAM)
                                 'TEDIT.PROMPTWINDOW)
                     THEN (WFROMDS TEXTSTREAM]
         (CL:WHEN PW
             (WINDOWPROP PW 'TEDIT.NLINES 1)
             (CL:WHEN [AND (SETQ MW (WINDOWPROP PW 'MAINWINDOW))
                           (SETQ MW (LISTP (WINDOWPROP MW 'PROMPTWINDOW]
                    (RPLACD MW 1))
             (LET [PROP [HEIGHT (HEIGHTIFWINDOW (FONTPROP (OR FONT TEDIT.PROMPT.FONT)
                                                       'HEIGHT]
                        (REG (WINDOWPROP PW 'REGION]
                  (CL:UNLESS (EQ HEIGHT (FETCH HEIGHT OF REG))
                      (WINDOWPROP PW 'MINSIZE (CONS 0 HEIGHT))

                      (* ;; 
        "Have to adjust the fixed size of the window before shaping, since SHAPEW obeys the minimum.")

                      (WINDOWPROP PW 'MAXSIZE (CONS 64000 HEIGHT))
                      (SHAPEW PW (CREATE REGION USING REG HEIGHT _ HEIGHT)))
                  (CL:WHEN (OPENWP PW)
                         (CLEARW PW))))])

(TEDIT.PROMPTFLASH
  [LAMBDA (TEXTSTREAM)                                       (* ; "Edited 30-May-91 23:34 by jds")
                                                             (* Flash the TEdit prompt window, or 
                                                             the global promptwindow, if TEdit has 
                                                             none.)
    (PROG (WINDOW PWINDOW (TEXTOBJ (TEXTOBJ TEXTSTREAM))
                 MAINTEXTOBJ)
          (COND
             [(AND TEXTOBJ (fetch (TEXTOBJ MENUFLG) of TEXTOBJ))

         (* There is a known textobj, and it's a menu.
         Go use the main editor's promptwindow.)

              (SETQ MAINTEXTOBJ (WINDOWPROP (\TEDIT.MAINW TEXTOBJ)
                                       'TEXTOBJ))            (* Find the TEXTOBJ for the main edit 
                                                             window, and use ITS prompting window.)
              (SETQ WINDOW (AND MAINTEXTOBJ (fetch (TEXTOBJ PROMPTWINDOW) of MAINTEXTOBJ]
             ((AND TEXTOBJ (SETQ WINDOW (fetch (TEXTOBJ PROMPTWINDOW) of TEXTOBJ)))
                                                             (* There IS an editor window to get 
                                                             to; use its prompt window)
              )
             ((SETQ WINDOW (GETPROMPTWINDOW (\TEDIT.MAINW TEXTSTREAM)
                                  NIL NIL T))                (* Failing that, try any prompt window 
                                                             attached to the edit window.)
              ))                                             (* Try to find an editor's prompt 
                                                             window for our message)
          (FLASHWINDOW (OR WINDOW PROMPTWINDOW)
                 2])

(\TEDIT.PROMPT.PAGEFULLFN
  [LAMBDA (PROMPT-DISPLAY-STREAM)                            (* ; "Edited 18-Nov-87 14:44 by jds")

    (* ;; "Given a TEdit promptwindow, expand it to be a line taller--called when a message overflows the window.")

    (LET* [(PROMPT-WINDOW (WFROMDS PROMPT-DISPLAY-STREAM))
           (%#LINES (ADD1 (OR (WINDOWPROP PROMPT-WINDOW 'TEDIT.NLINES)
                              1)))
           (OLDREGION (WINDOWPROP PROMPT-WINDOW 'REGION))
           (OLDTOP (fetch (REGION TOP) of OLDREGION))
           (OLDBOTTOM (fetch (REGION BOTTOM) of OLDREGION))
           (MAINWINDOW (WINDOWPROP PROMPT-WINDOW 'MAINWINDOW))
           (ATTACHEDMENUS (REMOVE PROMPT-WINDOW (ATTACHEDWINDOWS MAINWINDOW]
          (GETPROMPTWINDOW MAINWINDOW %#LINES)               (* ; "Get the new window")
          (SETQ \CURRENTDISPLAYLINE (CL:1- %#LINES))         (* ; "Set this so the page-full code will fire again at the end of THIS line, rather than waiting for another screen-ful.  There ought to be an interface to this.")
          [SETQ NEWTOP (fetch (REGION TOP) of (WINDOWPROP PROMPT-WINDOW 'REGION]
          [for WINDOW in (REVERSE ATTACHEDMENUS) when (>= (fetch (REGION BOTTOM)
                                                             of (WINDOWPROP WINDOW 'REGION))
                                                          OLDBOTTOM)
             do (RELMOVEW WINDOW (CREATEPOSITION 0 (IDIFFERENCE NEWTOP OLDTOP]
          (WINDOWPROP PROMPT-WINDOW 'TEDIT.NLINES %#LINES])
)

(RPAQ? TEDIT.PROMPT.FONT (FONTCREATE 'TERMINAL 10))

(RPAQ? TEDIT.PROMPTWINDOW.HEIGHT NIL)
(DECLARE%: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS TEDIT.PROMPT.FONT TEDIT.PROMPTWINDOW.HEIGHT)
)



(* ; "Title creation and update")

(DEFINEQ

(TEXTSTREAM.TITLE
  [LAMBDA (STREAM)                                          (* ; "Edited 24-Aug-2021 23:25 by rmk:")

    (* ;; "returns a string with which you can talk to the user about this stream")

    (PROG ((TEXTOBJ (TEXTOBJ STREAM))
           TXTFILE)
          (SETQ TXTFILE (fetch (TEXTOBJ TXTFILE) of TEXTOBJ))
          (RETURN (OR (CL:TYPECASE TXTFILE
                          (STRINGP TXTFILE)
                          (STREAM (fetch (STREAM FULLNAME) of TXTFILE))
                          (LITATOM TXTFILE)
                          (T TXTFILE))
                      ""])

(\TEDIT.ORIGINAL.WINDOW.TITLE
  [LAMBDA (FILE DIRTY? PROPS)                                (* ; "Edited  8-Sep-2023 00:38 by rmk")
                                                            (* ; "Edited 27-Oct-2021 12:25 by rmk:")
                                                            (* ; "Edited 24-Aug-2021 23:25 by rmk:")

    (* ;; "Given a file name, derive a title for the TEdit window that is editing it.  RMK: Title may be provided in a property")

    (LET (TITLE)
         [SETQ TITLE (COND
                        ((LISTGET PROPS 'TITLE))
                        ((NULL FILE)                         (* ; 
                                            "Just calling (TEDIT) should give a 'Text Editor Window'")
                         "TEdit Window")
                        ((AND (STRINGP FILE)
                              (ZEROP (NCHARS FILE)))         (* ; "So should editing an empty string")
                         "TEdit Window")
                        ((WINDOWP FILE)                      (* ; 
                                                "if \TEDIT.WINDOW.SETUP has assigned a title, use it")
                         (OR (WINDOWPROP FILE 'TITLE)
                             "TEdit Window"))
                        (T                                   (* ; 
                                  "Strings use the string itself, otherwise grab the full file name.")
                           (CONCAT "TEdit " (CL:TYPECASE FILE
                                                (STRINGP FILE)
                                                (STREAM (fetch (STREAM FULLNAME) of FILE))
                                                (LITATOM FILE)
                                                (T FILE))]
         (COND
            (DIRTY? (CONCAT "* " TITLE))
            (T TITLE])

(\TEDIT.WINDOW.TITLE
  [LAMBDA (TEXTSTREAM NEW.TITLE)                             (* ; "Edited 24-Oct-2022 13:14 by rmk")
                                                             (* jds "23-May-85 15:20")
    (LET ((TEXTOBJ (TEXTOBJ TEXTSTREAM))
          W)
         (CL:WHEN (AND (SETQ W (\TEDIT.PRIMARYW TEXTOBJ))
                       (NOT (TEXTPROP TEXTOBJ 'NOTITLE))
                       (WINDOWPROP W 'TEDITCREATED))         (* ; 
                "Only change the title if there IS a window, and it isn't suppressing title changes.")
             [COND
                (NEW.TITLE (WINDOWPROP W 'TITLE NEW.TITLE))
                (T (WINDOWPROP W 'TITLE])])

(\TEXTSTREAM.FILENAME
  [LAMBDA (TEXTSTREAM)                                       (* ; "Edited 30-May-91 23:34 by jds")

    (* ;; "returns the name of the file associated with this stream if there is one.  NIL otherwise.  Version numbers suppressed")

    (PROG ((TEXTOBJ (TEXTOBJ TEXTSTREAM))
           OFILE)
          [COND
             ((type? STREAM (fetch (TEXTOBJ TXTFILE) of TEXTOBJ))
              (SETQ OFILE (PACKFILENAME 'VERSION NIL 'BODY (fetch FULLFILENAME (fetch (TEXTOBJ 
                                                                                             TXTFILE)
                                                                                  of TEXTOBJ]
          (RETURN OFILE])

(\TEDIT.UPDATE.TITLE
  [LAMBDA (TEXTOBJ FILENAME)                                 (* ; "Edited  1-Sep-2023 23:55 by rmk")

    (* ;; "find and set the title to reflect a new filename, and update the file fields of any attached menu too.")

    (LET ((TITLE (TEXTSTREAM.TITLE TEXTOBJ))
          MENUSTREAM)
         (\TEDIT.WINDOW.TITLE TEXTOBJ (\TEDIT.ORIGINAL.WINDOW.TITLE TITLE NIL))
         (SETQ MENUSTREAM (TEDITMENU.STREAM TEXTOBJ))
         (CL:WHEN (AND MENUSTREAM (type? LITATOM TITLE))     (* ; 
                            "if we have a filename then put it in the GET and PUT fields of the menu")
             (SETQ FILENAME (PACKFILENAME 'VERSION NIL 'BODY TITLE))
             (MBUTTON.SET.FIELD MENUSTREAM 'Get FILENAME)
             (MBUTTON.SET.FIELD MENUSTREAM 'Put FILENAME))])
)



(* ; "Screen updating utilities")

(DEFINEQ

(TEDIT.DEACTIVATE.WINDOW
  [LAMBDA (W FORCEFLG DISCONNECTONLYFLG)                     (* ; "Edited  2-Sep-2023 16:10 by rmk")
                                                             (* ; "Edited 18-Apr-2023 23:55 by rmk")
                                                             (* ; "Edited 10-Apr-2023 09:43 by rmk")
                                                             (* ; "Edited  9-Mar-2023 15:12 by rmk")
                                                             (* ; "Edited  5-Nov-2022 23:29 by rmk")
                                                            (* ; "Edited 16-Oct-2021 18:51 by rmk:")

    (* ;; "Deactivate the various button fns for this window")

    (PROG ((TEXTOBJ (fetch (TEXTWINDOW WTEXTOBJ) of W)))     (* ; 
                             "Can't be a call to TEXTOBJ, since window may NOT have a textobj on it.")
          (CL:UNLESS TEXTOBJ                                 (* ; 
                                                       "Not an editing window, don't even need DON'T")
              (RETURN))

     (* ;; "Always return DON'T If we don't close the window.  if we did quit, the window is closed already, and will be reopened to reclose it.")

          (CL:WHEN (GETTOBJ TEXTOBJ EDITOPACTIVE)

              (* ;; "If something is going on, DON'T CLOSE THE WINDOW")

              (TEDIT.PROMPTPRINT TEXTOBJ "Not closed; edit operation in progress" T)
              (RETURN 'DON'T))
          (CL:WHEN (AND (PROCESSP (WINDOWPROP W 'PROCESS))
                        (NOT (GETTOBJ TEXTOBJ TXTREADONLY))
                        (NOT FORCEFLG))
              (CL:UNLESS (\TEDIT.QUIT W T)

                  (* ;; "This is an un-quit TEdit window.  Try to QUIT out of TEdit.")

                  (RETURN 'DON'T)))
          (CL:UNLESS DISCONNECTONLYFLG (SETTOBJ TEXTOBJ EDITFINISHEDFLG T))
          (CL:WHEN [OR FORCEFLG (GETTOBJ TEXTOBJ TXTREADONLY)
                       (NOT (PROCESSP (WINDOWPROP W 'PROCESS](* ; 
                                     "Only do this if it's a TEdit window, and has been QUIT out of.")
              (CL:WHEN (AND (GETTOBJ TEXTOBJ PROMPTWINDOW)
                            (OPENWP (GETTOBJ TEXTOBJ PROMPTWINDOW)))
                  (CLEARW (GETTOBJ TEXTOBJ PROMPTWINDOW)))
              (\SHOWSEL (TEXTSEL TEXTOBJ)
                     NIL)                                    (* ; 
        "Before the window is closed, make SURE that the caret is down, or the window will reappear.")
              (CL:WHEN (AND (\TEDIT.WINDOW.TITLE TEXTOBJ)
                            (OPENWP (GETTOBJ TEXTOBJ PROMPTWINDOW))
                            (OPENWP W)
                            (NOT DISCONNECTONLYFLG)
                            (EQ W (\TEDIT.MAINW TEXTOBJ)))   (* ; 
                                               "Reset the window's title to a known 'inactive' value")
                  (\TEDIT.WINDOW.TITLE TEXTOBJ "Edit Window [Inactive]"))
              (CL:UNLESS DISCONNECTONLYFLG
                  (for PANE in (REVERSE (CDR (GETTOBJ TEXTOBJ \WINDOW))) do 

                                 (* ;; "Run thru any split-off sub-panes, and reattach them, so we get a whole window back before the end of the world. Presumably we run through backwards because it looks better if the windows close from the bottom up.")

                                                                            (\TEDIT.UNSPLITW PANE))
                  (SETTOBJ TEXTOBJ \WINDOW NIL)
                  (CL:WHEN (type? STREAM (GETTOBJ TEXTOBJ TXTFILE))
                                                             (* ; 
                                                       "Close the file that this window was open on.")
                      (CL:UNLESS (fetch (TEXTWINDOW CLOSINGFILE) of W)
                          (replace (TEXTWINDOW CLOSINGFILE) of W with T)
                          (CLOSEF? (GETTOBJ TEXTOBJ TXTFILE)))))
              (replace (TEXTWINDOW CLOSINGFILE) of W with NIL)
              (replace (TEXTWINDOW WTEXTOBJ) of W with NIL)  (* ; 
                                                    "Detach the edit data structures from the window")
              (replace (TEXTWINDOW WTEXTSTREAM) of W with NIL)
              (replace (TEXTWINDOW WLINES) of W with NIL)
              (WINDOWPROP W 'PROCESS.EXITFN NIL)
              (WINDOWPROP W 'PROCESS.IDLEFN NIL)
              (WINDOWPROP W 'CURSOROUTFN NIL)
              (WINDOWPROP W 'CURSORMOVEDFN NIL)
              (WINDOWPROP W 'BUTTONEVENTFN 'TOTOPW)          (* ; "And the button functions")
              (WINDOWPROP W 'RIGHTBUTTONFN 'DOWINDOWCOM)
              (WINDOWDELPROP W 'CLOSEFN 'TEDIT.DEACTIVATE.WINDOW)
              (WINDOWPROP W 'SCROLLFN NIL)
              (WINDOWDELPROP W 'RESHAPEFN '\EDITRESHAPEFN)
              (CL:UNLESS [OR DISCONNECTONLYFLG (NOT (WINDOWPROP W 'PROCESS]
                                                             (* ; "Restore any disarmed interrupts.")
                  (\TEDIT.INTERRUPT.SETUP (WINDOWPROP W 'PROCESS)
                         T))
              (for MENUW in (ATTACHEDWINDOWS W) when (TEDITMENUP MENUW)
                 do                                          (* ; "Detach all the TEDITMENU windows.")
                    (SETTOBJ (TEXTOBJ MENUW)
                           EDITFINISHEDFLG T)                (* ; "Mark it finished")
                    (WINDOWPROP MENUW 'TEDITMENU NIL)        (* ; 
                                                             "And mark it no longer a menu window")
                    (GIVE.TTY.PROCESS MENUW)                 (* ; 
                                                           "Then give it a chance to kill itself off")
                    (DISMISS 300))
              (CL:UNLESS DISCONNECTONLYFLG
                  (GIVE.TTY.PROCESS W)
                  (DISMISS 300))
              [SETTOBJ TEXTOBJ \WINDOW (CL:WHEN (LISTP (GETTOBJ TEXTOBJ \WINDOW))
                                                             (* ; "It's a list;  remove this pane")
                                           (DREMOVE W (GETTOBJ TEXTOBJ \WINDOW)))])])

(\TEDIT.REPAINTFN
  [LAMBDA (PANE)                                             (* ; "Edited 28-Jul-2023 22:22 by rmk")
                                                             (* ; "Edited 11-May-2023 11:35 by rmk")
                                                             (* ; "Edited 30-May-91 23:34 by jds")

    (* ;; "Will eventually do the right thing w/r/t text margins.  For now, it's a place holder.")

    (PROG ((TEXTOBJ (fetch (TEXTWINDOW PTEXTOBJ) of PANE))
           SEL)
          (CL:UNLESS TEXTOBJ (RETURN))
          (SETQ SEL (TEXTSEL TEXTOBJ))
          (\SHOWSEL SEL NIL)                                 (* ; 
                                                       "Turn off the selection while we make changes")
          (for LINE (PHEIGHT _ (fetch PTOP of (DSPCLIPPINGREGION NIL PANE)))
             inlines (fetch (TEXTWINDOW PLINES) of PANE) when (ILESSP (GETLD LINE YBOT)
                                                                     PHEIGHT)
             do (\DISPLAYLINE TEXTOBJ LINE PANE)             (* ; 
                                                     "Display the starting line, then fill  the pane")
             finally (\FILLPANE LINE TEXTOBJ PANE))
          (\FIXSEL SEL TEXTOBJ)                              (* ; 
                                                    "Account for any line shuffling and re-highlight")
          (\SHOWSEL SEL T])

(\TEDIT.RESHAPEFN
  [LAMBDA (PANE BITS OLDREGION)                              (* ; "Edited 11-May-2023 00:39 by rmk")
                                                             (* ; "Edited 18-Apr-2023 23:46 by rmk")
                                                             (* ; "Edited  5-Apr-2023 09:23 by rmk")
                                                             (* ; "Edited 30-May-91 23:34 by jds")

    (* ;; "Will eventually do the right thing w/r/t text margins.  For now, it's a place holder.")

    (PROG ((TEXTOBJ (WINDOWPROP PANE 'TEXTOBJ))
           (PREG (DSPCLIPPINGREGION NIL PANE))
           NEWPHEIGHT PLINES LINE)
          (CL:UNLESS (AND TEXTOBJ (SETQ PLINES (fetch (TEXTWINDOW PLINES) of PANE)))
                                                             (* ; 
                                                             "Not a text pane with displayed lines")
              (RETURN))
          (\SHOWSEL (fetch (TEXTOBJ SEL) of TEXTOBJ)
                 NIL)                                        (* ; 
                                                       "Turn off the selection while we make changes")
          (SETQ NEWPHEIGHT (fetch HEIGHT of PREG))
          (replace (TEXTOBJ WTOP) of TEXTOBJ with NEWPHEIGHT)(* ; 
                                                             "Save new height/width for later use")
          (replace (TEXTOBJ WRIGHT) of TEXTOBJ with (fetch WIDTH of PREG))
          (replace (TEXTOBJ WBOTTOM) of TEXTOBJ with 0)
          (replace (TEXTOBJ WLEFT) of TEXTOBJ with 0)

     (* ;; "Hunt for the first line that had been visible, so we can find the CH# that has to appear at the top of the pane.")

          (SETQ LINE (for L (OLDPHEIGHT _ (fetch HEIGHT of OLDREGION)) inlines PLINES
                        do (CL:WHEN (ILESSP (GETLD L YBOT)
                                           OLDPHEIGHT)
                                  (RETURN L)) 

                           (* ;; "We also adjust the Y positions of the preceding invisible lines. ")

                           (SETYPOS L NEWPHEIGHT)))
          (CL:WHEN LINE                                      (* ; 
                                                             "If nothing visible then, nothing now")
              [SETQ LINE (CADR (\FORMATBLOCK TEXTOBJ (GETLD LINE LCHAR1]
              (CL:UNLESS (EQ LINE PLINES)                    (* ; 
                                                           "Forget the old chain of line descriptors")
                  (SETLD PLINES NEXTLINE LINE)
                  (SETLD LINE PREVLINE PLINES))              (* ; 
                                                      "Fix the line to appear at the top of the pane")
              (SETYPOS LINE (IDIFFERENCE NEWPHEIGHT (GETLD LINE LHEIGHT)))
              (\DISPLAYLINE TEXTOBJ LINE PANE)               (* ; "Actually display it")
              (\FILLPANE LINE TEXTOBJ PANE))
          (\FIXSEL (fetch (TEXTOBJ SEL) of TEXTOBJ)
                 TEXTOBJ)                                    (* ; 
                            "Fix up the selection to account for the line shuffling and highlight it")
          (\SHOWSEL (fetch (TEXTOBJ SEL) of TEXTOBJ)
                 T])

(\TEDIT.PANEWITHINSCREEN?
  [LAMBDA (PANE)                                             (* ; "Edited 10-May-2023 23:37 by rmk")

    (* ;; "True if PANE is completely within the screen and therefore that it is safe to reuse image-bits that were previously displayed anywhere within PANE's clipping region.")

    (* ;; " \TEDIT.AFTERMOVEFN records this as a property on the PANE.  Also, if this is false after a move, then the aftermovefn forces a redisplay.  ")

    (LET [(PANEREG (WINDOWPROP PANE 'REGION]
         (AND (IGEQ (fetch (REGION BOTTOM) of PANEREG)
                    0)
              (IGEQ (fetch (REGION LEFT) of PANEREG)
                    0)
              (ILEQ (fetch (REGION PTOP) of PANEREG)
                    SCREENHEIGHT)
              (ILEQ (fetch (REGION PRIGHT) of PANEREG)
                    SCREENWIDTH])
)
(DEFINEQ

(\TEDIT.SCROLLFN
  [LAMBDA (PANE DX DY)

    (* ;; "Edited 11-May-2023 12:03 by rmk")

    (* ;; 
   "Edited 18-Feb-2022 14:53 by rmk: Repaint after scrolling for panes that are partially off-screen")

    (TOTOPW PANE)
    (PROG ((TEXTOBJ (WINDOWPROP PANE 'TEXTOBJ))
           ONSELS)
          (COND
             ((ZEROP (TEXTLEN TEXTOBJ))                      (* ; "Don't scroll a zero-length file")
              (RETURN))
             ((fetch (TEXTOBJ EDITOPACTIVE) of TEXTOBJ)      (* ; 
                                             "Don't scroll while something interesting is happening!")
              (TEDIT.PROMPTPRINT TEXTOBJ "Edit operation in progress." T)
              (RETURN)))
          (CL:WHEN (TEXTPROP TEXTOBJ 'PRESCROLLFN)
              (DOUSERFNS (TEXTPROP TEXTOBJ 'PRESCROLLFN)
                     PANE))                                  (* ; 
                                                             "Turn off selections during the scroll.")
          (SETQ ONSELS (for S in (\TEDIT.COLLECTSELS TEXTOBJ)
                          when (AND (GETSEL S SET)
                                    (GETSEL S ONFLG S)) collect (\SHOWSEL S NIL)
                                                              S))
          (if (FLOATP DY)
              then (\TEDIT.SCROLLFLOAT TEXTOBJ PANE DY)
            elseif (IGREATERP DY 0)
              then (\TEDIT.SCROLLUP TEXTOBJ PANE DY)
            elseif (ILESSP DY 0)
              then (\TEDIT.SCROLLDOWN TEXTOBJ PANE DY))
          (for S in ONSELS do 
                              (* ;; "The selection may not be visible in PANE")

                              (\FIXSEL S TEXTOBJ)
                              (\SHOWSEL S T))
          (\TEDIT.SET.WINDOW.EXTENT TEXTOBJ PANE)
          (CL:WHEN (TEXTPROP TEXTOBJ 'POSTSCROLLFN)          (* ; "For user subsystem cleanup")
              (DOUSERFNS (TEXTPROP TEXTOBJ 'POSTSCROLLFN)
                     PANE)))
    NIL])

(\TEDIT.SCROLLFLOAT
  [LAMBDA (TEXTOBJ PANE DY)                                  (* ; "Edited 11-May-2023 11:55 by rmk")
                                                             (* ; "Edited  8-Apr-2023 22:21 by rmk")
                                                             (* ; "Edited  5-Apr-2023 09:13 by rmk")
                                                             (* ; "Edited  1-Apr-2023 17:30 by rmk")
                                                             (* ; "Edited 30-Mar-2023 23:38 by rmk")

    (* ;; "Thumb scrolling, DY is FLOATP.")

    (LET ((CH# (IMAX [IMIN (SUB1 (TEXTLEN TEXTOBJ))
                           (FIXR (FTIMES DY (TEXTLEN TEXTOBJ]
                     1))
          (PREG (DSPCLIPPINGREGION NIL PANE))
          PHEIGHT PBOTTOM NEWTOP)
         (SETQ PHEIGHT (fetch HEIGHT of PREG))               (* ; "Height of the pane")
         (SETQ PBOTTOM (fetch BOTTOM of PREG))

         (* ;; 
      "Does any currently formatted  line include the target char? This will become the new top line")

         (SETQ NEWTOP (find L inlines (GETLD (fetch (TEXTWINDOW PLINES) of PANE)
                                             NEXTLINE) suchthat (WITHINLINEP CH# L)))
         (COND
            (NEWTOP 

                   (* ;; 
     "If so, convert to an integer scroll so the screen is not blanked and reformatted unnecessarily")

                   [SETQ DY (COND
                               [(ILEQ PHEIGHT (GETLD NEWTOP YBOT))
                                                             (* ; 
                                                             "NEWTOP is off the top of the window")
                                (IMINUS (for L inlines (GETLD NEWTOP NEXTLINE)
                                           while (ILEQ PHEIGHT (GETLD L YBOT))
                                           sum 
                                               (* ;; 
                           "sum the heights of all lines between the NEWTOP and the present top line")

                                               (GETLD L LHEIGHT]
                               (T                            (* ; 
                                                      "NEWTOP is in the window or below, raise it up")
                                  (IDIFFERENCE (IDIFFERENCE PHEIGHT (GETLD NEWTOP YBOT))
                                         (GETLD NEWTOP LHEIGHT]
                   (if (IGREATERP DY 0)
                       then (\TEDIT.SCROLLUP TEXTOBJ PANE DY)
                     elseif (ILESSP DY 0)
                       then (\TEDIT.SCROLLDOWN TEXTOBJ PANE DY)))
            (T 
               (* ;; "Jump to a currently off-screen line.  First clear the pane")

               (BITBLT NIL 0 0 PANE 0 PBOTTOM (fetch WIDTH of PREG)
                      (IDIFFERENCE PHEIGHT PBOTTOM)
                      'TEXTURE
                      'REPLACE WHITESHADE)

               (* ;; "The line containing CH# becomes the topline o f the pane")

               (SETQ NEWTOP (CADR (\FORMATBLOCK TEXTOBJ CH# PBOTTOM)))
               (SETYPOS NEWTOP (IDIFFERENCE PHEIGHT (GETLD NEWTOP LHEIGHT)))
               (LINKLD (fetch (TEXTWINDOW PLINES) of PANE)
                      NEWTOP)                                (* ; 
                                                        "New block lines replace previous pane lines")
               (\DISPLAYLINE TEXTOBJ NEWTOP PANE)            (* ; "And fill out the pane from there.")
               (\FILLPANE NEWTOP TEXTOBJ PANE)))

         (* ;; "This would be the case of pulling down from a pane that is somehow off screen.  Maybe this can happen earlier.")

         (CL:UNLESS (\TEDIT.PANEWITHINSCREEN? PANE)
                (\TEDIT.REPAINTFN PANE])

(\TEDIT.SCROLLUP
  [LAMBDA (TEXTOBJ PANE DY)                                  (* ; "Edited 15-May-2023 22:21 by rmk")
                                                             (* ; "Edited 11-May-2023 00:38 by rmk")
                                                             (* ; "Edited  8-May-2023 21:01 by rmk")
                                                             (* ; "Edited 28-Apr-2023 08:55 by rmk")
                                                             (* ; "Edited 24-Apr-2023 23:48 by rmk")

    (* ;; "Scrolling up, with positive integer DY.  We first have to find a line that is or would be DY below the top of the pane, then we move that line to the top and fill in beneath.")

    (PROG ((PREG (DSPCLIPPINGREGION NIL PANE))
           PHEIGHT PLINES NEWTOPLINE OLDTOPLINE)
          (SETQ PHEIGHT (fetch HEIGHT of PREG))              (* ; "Height of the pane")
          (SETQ PLINES (fetch (TEXTWINDOW PLINES) of PANE))  (* ; "Currently formatted PANE lines")

     (* ;; "Find the first line at least DY below the top of the pane.  ")

     (* ;; "The initial scan from PLINES is needed in case invisible lines have been kept in the chain above the current top line.  ")

          (SETQ OLDTOPLINE (find L inlines (GETLD PLINES NEXTLINE)
                              suchthat (ILEQ (GETLD L YTOP)
                                             PHEIGHT)))
          (CL:UNLESS OLDTOPLINE

              (* ;; "Relative scrolling doesn't make sense if there isn't at least one visible line currently at the top of the pane.")

              (RETURN))

     (* ;; "")

     (* ;; "Walk down a sequence of lines until we arrive at a line that is DY from the top. If we run off the bottom of existing lines, keep formatting until we finally exhaust DY or reach the end of the text. Unlike the scroll-down case, we know we are starting from a properly broken line, we don't have to search for a stable paragraph break.")

          [SETQ NEWTOPLINE (for L NEXT (TEXTLEN _ (TEXTLEN TEXTOBJ)) inlines OLDTOPLINE
                              do (add DY (IMINUS (GETLD L LHEIGHT)))
                                 (CL:WHEN (OR (ILEQ DY 0)
                                              (IGEQ (GETLD L LCHARLIM)
                                                    TEXTLEN))
                                        (RETURN L))
                                 (CL:UNLESS (GETLD L NEXTLINE)
                                                             (* ; 
                                                     "Continue by formatting a new, undisplayed line")
                                     [SETQ NEXT (\FORMATLINE TEXTOBJ (ADD1 (GETLD L LCHARLIM]
                                     (LINKLD L NEXT)
                                     (SETYPOS NEXT (\TEDIT.NEXT.LINE.BOTTOM NEXT)))]
          (CL:UNLESS NEWTOPLINE                              (* ; 
                                                             "If nothing found, nothing can be done")
              (RETURN))
          (CL:WHEN (AND (EQ OLDTOPLINE NEWTOPLINE)
                        (GETLD NEWTOPLINE NEXTLINE))         (* ; "Move at least one line")
              (SETQ NEWTOPLINE (GETLD NEWTOPLINE NEXTLINE)))
          (LINKLD PLINES NEWTOPLINE)

     (* ;; "This chops off now-invisible lines above OLDTOPLINE as being of marginal utility.  As a minor optimization for a subsequent scroll-down, we could elevate and keep a few of them so it might not have to search back to a preceding paragraph break.")

     (* ;; "")

          (CL:UNLESS (IGEQ (GETLD NEWTOPLINE YBOT)
                           (fetch BOTTOM of PREG))           (* ; 
                                      "Not visible, SUB1 to display not quite at the top, then raise")
              (SETYPOS NEWTOPLINE (\TEDIT.NEXT.LINE.BOTTOM NEWTOPLINE (SUB1 PHEIGHT)))
              (\DISPLAYLINE TEXTOBJ NEWTOPLINE PANE))

     (* ;; "")

          (\TEDIT.RAISE.LINES NEWTOPLINE PHEIGHT PANE TEXTOBJ])

(\TEDIT.SCROLLDOWN
  [LAMBDA (TEXTOBJ PANE DY)                                  (* ; "Edited 11-May-2023 11:53 by rmk")
                                                             (* ; "Edited  3-Apr-2023 10:00 by rmk")

    (* ;; 
   "Scrolling down with a negative integer DY. We move existing lines down, fill in new lines at top")
                                                             (* ; "Edited 26-Mar-2023 20:55 by rmk")
    (SETQ DY (IMINUS DY))                                    (* ; "Now positive")
    (PROG ((PREG (DSPCLIPPINGREGION NIL PANE))
           PHEIGHT PWIDTH PBOTTOM PLINES OLDTOP NEWTOP PREV YBOT THEIGHT)
          (SETQ PHEIGHT (fetch HEIGHT of PREG))              (* ; "Height of the pane")
          (SETQ PWIDTH (fetch WIDTH of PREG))                (* ; "Width of the pane")
          (SETQ PBOTTOM (fetch BOTTOM of PREG))
          (SETQ PLINES (fetch (TEXTWINDOW PLINES) of PANE))  (* ; 
                                                      "The dummy line heading PANE's formatted lines")
          (SETQ OLDTOP (find L inlines (GETLD PLINES NEXTLINE) suchthat (ILESSP (GETLD L YBOT)
                                                                               PHEIGHT)))

     (* ;; 
     "Look backwards from the line before OLDTOP. IMAX and HEIGHT+1 to scroll at least one line")

          (CL:WHEN (AND OLDTOP (ILEQ (GETLD OLDTOP LCHAR1)
                                     1))
                 (RETURN))
          (SETQ NEWTOP (if OLDTOP
                           then (\BACKFORMAT TEXTOBJ (IMAX DY (ADD1 (GETLD OLDTOP LHEIGHT)))
                                       (SUB1 (GETLD OLDTOP LCHAR1))
                                       (GETLD OLDTOP LHEIGHT))
                         else 
                              (* ;; "If we didn't find a visible line, we must be looking at the tail end of the text.  We will need to show some of its final lines. ")

                              (\BACKFORMAT TEXTOBJ DY (TEXTLEN TEXTOBJ)
                                     0)))

     (* ;; "NEWTOP is at least one line in front of OLDTOP")

          (CL:WHEN (AND NIL NEWTOP (GETLD NEWTOP NEXTLINE))  (* ; 
                              "Old code seems to advance.  Maybe \BACKFORMAT doesn't go down enough?")
              (SETQ NEWTOP (GETLD NEWTOP NEXTLINE)))
          (SETQ THEIGHT (GETLD NEWTOP YBOT))
          (SETQ THEIGHT (for L inlines NEWTOP sum (GETLD L LHEIGHT)))

     (* ;; "Push down OLDTOP and all the lines below it to make room for the new lines above--some old ones will fall out of the pane.")

     (* ;; "First we move the bitmap down.")

          (BITBLT PANE 0 THEIGHT PANE 0 0 PWIDTH (IDIFFERENCE PHEIGHT THEIGHT)
                 'INPUT
                 'REPLACE)

     (* ;; "Now adjust the YBOT's of the lines whose images we just blitted down")

          (for L (BOTTOMOFNEW _ (IPLUS PBOTTOM THEIGHT)) inlines OLDTOP
             do (SETQ YBOT (IDIFFERENCE (GETLD L YBOT)
                                  BOTTOMOFNEW))
                (SETYPOS L YBOT)
                (CL:WHEN (ILESSP YBOT PBOTTOM)

                    (* ;; "The first line to fall below the pane bottom and blank out any of its bits that may still be visible. ")

                    (BITBLT NIL 0 0 PANE 0 PBOTTOM PWIDTH (GETLD L YTOP)
                           'TEXTURE
                           'REPLACE WHITESHADE)

                    (* ;; "Like earlier code, we chop off the lower lines.  But maybe they would be useful in a later scroll up?  Maybe retain some particular number of them?")

                    (LINKLD (GETLD L PREVLINE)
                           NIL)
                    (RETURN)))

     (* ;; "Clear the target rectangle for the new lines, then display them.")

     (* ;; "Link the new lines after the dummy first line, replacing the chain that led to OLDTOP.  ")

          (LINKLD PLINES NEWTOP)
          (SETQ YBOT PHEIGHT)                                (* ; 
                                                      "The bottom of a %"line%" just above the pane.")
          (for L (PREV _ (GETLD NEWTOP PREVLINE)) inlines NEWTOP do 

                                       (* ;; "Go through the lines to be added, adjusting YBOT/YBASE as we display them.  At the end, link the last new one to OLDTOP ")

                                                                    (SETQ YBOT (
                                                                              \TEDIT.NEXT.LINE.BOTTOM
                                                                                L YBOT))
                                                                    (SETYPOS L YBOT)
                                                                    (\DISPLAYLINE TEXTOBJ L PANE)
                                                                    (SETQ PREV L)
             finally (LINKLD PREV OLDTOP))

     (* ;; 
     "This would be the case of pulling down from a pane that is partially off screen at the top.")

          (CL:UNLESS (\TEDIT.PANEWITHINSCREEN? PANE)
                 (\TEDIT.REPAINTFN PANE])
)



(* ; "Process-world interfaces")

(DEFINEQ

(\TEDIT.PROCIDLEFN
  [LAMBDA (WINDOW)                                           (* ; "Edited 30-May-91 23:35 by jds")

         (* TEDIT's PROC.IDLEFN for regaining control.
         If the shift key is down, we're not trying to restart this window, just to copy 
         from it.)

    (GETMOUSESTATE)
    (COND
       [[AND (INSIDE? (DSPCLIPPINGREGION NIL WINDOW)
                    (LASTMOUSEX WINDOW)
                    (LASTMOUSEY WINDOW))
             [NOT (OR (SHIFTDOWNP 'SHIFT)
                      (SHIFTDOWNP 'META)
                      (KEYDOWNP 'MOVE)
                      (KEYDOWNP 'COPY]
             (PROCESSP (WINDOWPROP WINDOW 'PROCESS]          (* No SHIFT key down;
                                                             let's regain control.)
        (TTY.PROCESS (WINDOWPROP WINDOW 'PROCESS))
        (COND
           ((fetch (TEXTOBJ MENUFLG) of (WINDOWPROP (WHICHW)
                                               'TEXTOBJ))    (* This is a MENU --
                                                             always select.)
            (\TEDIT.BUTTONEVENTFN WINDOW]
       (T                                                    (* Otherwise, let him select.)
          (\TEDIT.BUTTONEVENTFN WINDOW])

(\TEDIT.PROCENTRYFN
  [LAMBDA (NEWPROCESS OLDPROCESS)                            (* jds "15-Feb-84 16:59")
                                                             (* TEDIT's PROCESS.ENTRYFN, which 
                                                             disarms any dangerous interrupts 
                                                             within the editing world)
    (\TEDIT.INTERRUPT.SETUP NEWPROCESS])

(\TEDIT.PROCEXITFN
  [LAMBDA (THISP NEWP)                                       (* jds " 5-Apr-84 10:40")

         (* Re-arm any interrupts that TEdit turned off, so the poor user has them 
         available in other parts of the system.)

    (AND (WINDOWPROP (PROCESSPROP THISP 'WINDOW)
                'TEXTOBJ)
         (\TEDIT.INTERRUPT.SETUP THISP T])
)

(RPAQ? \CARETRATE 333)



(* ; "Caret handler;  stolen from CHAT.")

(DEFINEQ

(\EDIT.DOWNCARET
  [LAMBDA (CARET)                                            (* ; "Edited 13-Nov-87 08:25 by jds")

    (* ;; "Put the caret down -- i.e., MAKE IT VISIBLE -- as fast as possible")

    (LET* ((DS (fetch (TEDITCARET TCCARETDS) of CARET))
           (X (DSPXPOSITION NIL DS))
           (Y (DSPYPOSITION NIL DS)))
          (replace (TEDITCARET TCCARETX) of CARET with X)
          (replace (TEDITCARET TCCARETY) of CARET with Y)
          (replace (TEDITCARET TCFORCEUP) of CARET with NIL)
          (\CARET.FLASH? DS (fetch (TEDITCARET TCCARET) of CARET)
                 10 NIL X Y])

(\EDIT.FLIPCARET
  [LAMBDA (CARET FORCE)                                      (* ; "Edited 30-Mar-87 16:50 by jds")
                                                             (* ; 
                                                     "changes the caret from on to off or off to on.")

    (* ;; "(COND ((OR FORCE (fetch TCFORCEDDOWN of CARET) (AND (IGREATERP (CLOCK0 (fetch TCNOWTIME of CARET)) (fetch TCTHENTIME of CARET)) (NOT (fetch TCFORCEUP of CARET)))) (UNINTERRUPTABLY (* note the time of the next change.) (* must be done without creating boxes because happens during keyboard wait.) (\BOXIPLUS (CLOCK0 (fetch TCTHENTIME of CARET)) (fetch TCCARETRATE of CARET)) (* Set the time for the next caret transition) (replace TCUP of CARET with (NOT (fetch TCUP of CARET))) (* Invert the sense of the caret's UPness) (replace TCFORCEDDOWN of CARET with NIL) (* Turn off the force-down & Force-up flags) (replace TCFORCEUP of CARET with NIL) (PROG ((DS (fetch TCCARETDS of CARET)) (CURS (fetch TCCURSORBM of CARET))) (COND ((fetch TCUP of CARET)) (T (* We're putting the caret down -- set the new X,Y position) (replace TCCARETX of CARET with (DSPXPOSITION NIL DS)) (replace TCCARETY of CARET with (DSPYPOSITION NIL DS)))) (BITBLT (fetch (CURSOR CUIMAGE) of CURS) 0 0 DS (IDIFFERENCE (fetch TCCARETX of CARET) (fetch (CURSOR CUHOTSPOTX) of CURS)) (IDIFFERENCE (fetch TCCARETY of CARET) (fetch (CURSOR CUHOTSPOTY) of CURS)) CURSORWIDTH CURSORHEIGHT (QUOTE INPUT) (QUOTE INVERT))))))")

    NIL])

(TEDIT.FLASHCARET
  [LAMBDA (CARETS)                                           (* jds "16-Jul-85 12:35")
                                                             (* Unless the caret is constrained to 
                                                             be INVISIBLE, give it a chance to 
                                                             flash.)
    (bind (FIRSTTIME _ T) for CARET inside CARETS
       do (COND
             ((NOT (fetch TCFORCEUP of CARET))               (* The caret need not stay invisible.)
                                                             (* (\EDIT.FLIPCARET CARET))
              (COND
                 (FIRSTTIME (SETQ FIRSTTIME NIL)
                        (\CARET.FLASH? (fetch TCCARETDS of CARET)
                               (fetch TCCARET of CARET)
                               NIL NIL (fetch TCCARETX of CARET)
                               (fetch TCCARETY of CARET)))
                 (T (\CARET.FLASH.AGAIN (fetch TCCARET of CARET)
                           (fetch TCCARETDS of CARET)
                           (fetch TCCARETX of CARET)
                           (fetch TCCARETY of CARET])

(\EDIT.UPCARET
  [LAMBDA (CARET)                                            (* ; "Edited 13-Nov-87 08:27 by jds")

    (* ;; "Take the caret up -- i.e., MAKE IT INVISIBLE -- and keep it up")

    (\CARET.DOWN (fetch (TEDITCARET TCCARETDS) of CARET))

    (* ;; "The TCFORCEUP field is set so that the caret will stay off-screen:")

    (replace (TEDITCARET TCFORCEUP) of CARET with T])

(TEDIT.NORMALIZECARET
  [LAMBDA (TEXTOBJ SEL)                                      (* ; "Edited 11-May-2023 00:39 by rmk")
                                                             (* ; "Edited 30-May-91 23:35 by jds")

    (* ;; "This ensures that the caret is visible in the pane where the selection SEL was made.  Other panes are left alone (caret may or may not be visible), presumably because you don't want all the panes to jump to the caret when you are working in just one of them.")

    (SETQ TEXTOBJ (TEXTOBJ TEXTOBJ))
    (CL:UNLESS (fetch (TEXTOBJ TXTNEEDSUPDATE) of TEXTOBJ)
        (CL:UNLESS SEL
            (SETQ SEL (fetch (TEXTOBJ SEL) of TEXTOBJ)))
        (CL:WHEN (GETSEL SEL SET)                            (* ; 
                                                          "If the selection isn't set, don't bother.")

            (* ;; 
            "This is essentially %"find selpane in panes%"  and the corresponding L1/LN in SEL.")

            (for PANE CH# CARETYBOT TOPLINE PREG PHEIGHT PBOTTOM
                 [SELPANE _ (OR (fetch (TEXTOBJ SELWINDOW) of TEXTOBJ)
                                (CAR (fetch (TEXTOBJ \WINDOW) of TEXTOBJ] inpanes TEXTOBJ
               as L1 inside (GETSEL SEL L1) as LN inside (GETSEL SEL LN) first (CL:UNLESS SELPANE
                                                                                      (RETURN))
               do 
                  (* ;; "Find the YBOT in SELPANE of the line with the selected character, if known.")

                  (SETQ PREG (DSPCLIPPINGREGION NIL PANE))
                  (SETQ PHEIGHT (fetch PTOP of PREG))
                  (SETQ PBOTTOM (fetch BOTTOM of PREG)) 

                  (* ;; 
                  "Find the selected character either at the beginning or end of the selection.")

                  [SETQ CH# (IMAX 1 (IMIN (TEXTLEN TEXTOBJ)
                                          (SELECTQ (GETSEL SEL POINT)
                                              (LEFT (FGETSEL SEL CH# SEL))
                                              (RIGHT (SUB1 (FGETSEL SEL CHLIM SEL)))
                                              (SHOULDNT]
                  (SETQ CARETYBOT (SELECTQ (GETSEL SEL POINT)
                                      (LEFT (AND L1 (GETLD L1 YBOT)))
                                      (RIGHT (AND LN (GETLD LN YBOT)))
                                      NIL)) 

                  (* ;; "We don't want to jump around if the caret is already visible in SELPANE.  ")

                  (CL:WHEN (OR (NOT CARETYBOT)
                               (IGEQ CARETYBOT PHEIGHT)
                               (ILESSP CARETYBOT PBOTTOM))

                      (* ;; "Not visible, work to do: Make sure the line containing CH# is linked in and scrolled to the top of the pane.")

                      (\SHOWSEL SEL NIL)
                      (SETQ TOPLINE (CADR (\FORMATBLOCK TEXTOBJ (SUB1 CH#)
                                                 PHEIGHT)))
                      (SETYPOS TOPLINE (IDIFFERENCE PHEIGHT (GETLD TOPLINE LHEIGHT)))
                      (LINKLD (fetch (TEXTWINDOW PLINES) of SELPANE)
                             TOPLINE)

                      (* ;; 
                      "We're heading off, clear the window, display the first (caret) caret line.")

                      (BITBLT NIL 0 0 SELPANE 0 PBOTTOM (fetch WIDTH of PREG)
                             (IDIFFERENCE PHEIGHT PBOTTOM)
                             'TEXTURE
                             'REPLACE WHITESHADE)
                      (\DISPLAYLINE TEXTOBJ TOPLINE SELPANE)
                      (\FILLPANE TOPLINE TEXTOBJ SELPANE)    (* ; 
                                                             "And fill out the window from there.")
                      (\FIXSEL SEL TEXTOBJ)
                      (\TEDIT.SET.WINDOW.EXTENT TEXTOBJ SELPANE)
                      (\SHOWSEL SEL T)))))])

(\SETCARET
  [LAMBDA (X Y DS TEXTOBJ CARET)                             (* ; "Edited 20-Apr-2023 09:26 by rmk")
                                                             (* ; "Edited 30-May-91 23:35 by jds")
    (LET ((CLIPREGION (DSPCLIPPINGREGION NIL DS)))
         (COND
            ((AND (ILESSP Y (fetch PTOP of CLIPREGION))
                  (IGEQ Y (fetch BOTTOM of CLIPREGION)))
             (MOVETO X Y DS)
             (CL:UNLESS (fetch (TEXTOBJ TXTREADONLY) of TEXTOBJ)
                    (\EDIT.DOWNCARET CARET)))
            (T                                               (* ; 
              "The caret is off screen.  Do a MOVETO so the system carets don't appear at odd times.")
               (MOVETO (IPLUS (fetch PTOP of CLIPREGION)
                              12)
                      0 DS])

(\TEDIT.CARET
  [LAMBDA (CARETS)                                           (* jds "12-Jul-85 11:18")
                                                             (* Reset the caret to its normal state 
                                                             state, from the selection caret)
    (for CARET inside CARETS do (replace TCCARET of CARET with (\CARET.CREATE BXCARET])
)



(* ; "Menu interfacing")

(DEFINEQ

(TEDIT.ADD.MENUITEM
  [LAMBDA (MENU ITEM)                                        (* jds " 9-AUG-83 09:55")
                                                             (* Adds ITEM to the MENU, and updates 
                                                             all the stuff.)
    (PROG (OLDITM)
          (COND
             ((MEMBER ITEM (fetch ITEMS of MENU))            (* Do nothing--it's already in the 
                                                             menu)
              )
             ([AND (LISTP ITEM)
                   (SETQ OLDITM (SASSOC (CAR ITEM)
                                       (fetch ITEMS of MENU] (* The menu item exists.
                                                             Make sure the thing behind it is 
                                                             right.)
              (RPLACD OLDITM (CDR ITEM)))
             (T                                              (* It isn't in the menu, so go ahead 
                                                             and add it.)
                (replace ITEMS of MENU with (NCONC1 (fetch ITEMS of MENU)
                                                   ITEM))
                (COND
                   ((EQ (fetch MENUCOLUMNS of MENU)
                        1)                                   (* If there is only one column, force 
                                                             a re-figuring of the number of rows)
                    (replace MENUROWS of MENU with NIL))
                   ((EQ (fetch MENUROWS of MENU)
                        1)                                   (* There's only one row, so recompute 
                                                             %# of columns.)
                    (replace MENUCOLUMNS of MENU with NIL)))
                (replace ITEMWIDTH of MENU with 10000)
                (replace ITEMHEIGHT of MENU with 10000)
                (replace IMAGE of MENU with NIL)             (* Force it to create a new menu 
                                                             image.)
                (UPDATE/MENU/IMAGE MENU])

(TEDIT.DEFAULT.MENUFN
  [LAMBDA (W)                                                (* ; "Edited  6-May-2023 17:28 by rmk")
                                                             (* ; "Edited 30-May-91 23:35 by jds")

    (* ;; 
    "Default MENU Fn for editor windows--displays a menu of items & acts on the commands received.")

    (PROG ((TEXTOBJ (WINDOWPROP W 'TEXTOBJ))
           (WMENU (WINDOWPROP W 'TEDIT.MENU))
           THISMENU CH OFILE OCURSOR LINES SEL ITEM)
          (COND
             ((EQ (fetch (TEXTOBJ EDITOPACTIVE) of TEXTOBJ)
                  T)

              (* ;; 
              "We're busy doing something, but not sure what.  Give a general 'please wait' msg:")

              (TEDIT.PROMPTPRINT TEXTOBJ "Edit operation in progress; please wait." T)
              (RETURN))
             ((fetch (TEXTOBJ EDITOPACTIVE) of TEXTOBJ)

              (* ;; "We know specifically what's happening.  Tell him:")

              (TEDIT.PROMPTPRINT TEXTOBJ (CONCAT (fetch (TEXTOBJ EDITOPACTIVE) of TEXTOBJ)
                                                " in progress; please wait.")
                     T)
              (RETURN)))
          (SETQ THISMENU (COND
                            (WMENU)
                            ((SETQ WMENU (WINDOWPROP W 'TEDIT.MENU.COMMANDS))
                             (PROG1 (SETQ WMENU (\TEDIT.CREATEMENU WMENU))
                                 (WINDOWPROP W 'TEDIT.MENU WMENU)))
                            (TEDIT.DEFAULT.MENU)))
          (SETQ ITEM (MENU THISMENU))
          (ERSETQ (RESETLST
                      [RESETSAVE (\TEDIT.MARKACTIVE TEXTOBJ)
                             '(AND (\TEDIT.MARKINACTIVE OLDVALUE]
                      (replace (TEXTOBJ EDITOPACTIVE) of TEXTOBJ with (OR (CAR ITEM)
                                                                          T))
                                                             (* ; 
                                                          "So we ca ntell the guy WHAT op is active.")
                      [SELECTQ (CAR ITEM)
                          ((Put |Put Formatted Document|) 
                               (TEDIT.PUT TEXTOBJ NIL NIL (TEXTPROP TEXTOBJ 'CLEARPUT)))
                          (Plain-Text (TEDIT.PUT TEXTOBJ NIL NIL T))
                          ((Get |Get Formatted Document|)    (* ; 
                                                 "Get a new file (overwriting the one being edited.)")
                               (TEDIT.GET TEXTOBJ NIL (TEXTPROP TEXTOBJ 'CLEARGET)))
                          (Unformatted% Get 
                               (TEDIT.GET TEXTOBJ NIL T))
                          (Include                           (* ; "Insert a file where the caret is")
                                   (TEDIT.INCLUDE TEXTOBJ))
                          (Quit                              (* ; "Stop this session.")
                                (\TEDIT.QUIT W))
                          (Substitute                        (* ; "Search-and-replace")
                                      (RESETLST
                                          (RESETSAVE (CURSOR WAITINGCURSOR))
                                          (TEDIT.SUBSTITUTE TEXTOBJ)))
                          (Find                              (* ; 
                                                      "Case sensitive search, with * and # wildcards")
                                [SETQ OFILE (TEDIT.GETINPUT TEXTOBJ "Text to find: "
                                                   (WINDOWPROP W 'TEDIT.LAST.FIND.STRING)
                                                   (CHARCODE (EOL LF ESC]
                                [COND
                                   (OFILE (SETQ SEL (fetch (TEXTOBJ SEL) of TEXTOBJ))
                                          (\SHOWSEL SEL NIL)
                                          (TEDIT.PROMPTPRINT TEXTOBJ "Searching..." T)
                                          (SETQ CH (TEDIT.FIND TEXTOBJ (MKSTRING OFILE)
                                                          NIL NIL T))
                                          (COND
                                             (CH             (* ; "We found the target text.")
                                                 (TEDIT.PROMPTPRINT TEXTOBJ "Done.")
                                                 (replace (SELECTION CH#) of SEL with (CAR CH))
                                                             (* ; 
                                                             "Set up SELECTION to be the found text")
                                                 (replace (SELECTION CHLIM) of SEL
                                                    with (ADD1 (CADR CH)))
                                                 [replace (SELECTION DCH) of SEL
                                                    with (ADD1 (IDIFFERENCE (CADR CH)
                                                                      (CAR CH]
                                                 (replace (SELECTION POINT) of SEL
                                                    with 'RIGHT)
                                                 (replace (TEXTOBJ CARETLOOKS) of TEXTOBJ
                                                    with (\TEDIT.GET.INSERT.CHARLOOKS TEXTOBJ SEL))
                                                 (TEDIT.RESET.EXTEND.PENDING.DELETE SEL)
                                                             (* ; "And never pending a deletion.")
                                                 (\FIXSEL SEL TEXTOBJ)
                                                 (TEDIT.NORMALIZECARET TEXTOBJ)
                                                 (\SHOWSEL SEL T)
                                                             (* ; "And get it into the window")
                                                 (WINDOWPROP W 'TEDIT.LAST.FIND.STRING OFILE))
                                             (T (TEDIT.PROMPTPRINT TEXTOBJ "(not found)")
                                                (\SHOWSEL SEL T])
                          (Looks                             (* ; 
                                                 "He wants to set the font for the current selection")
                                 (\TEDIT.LOOKS TEXTOBJ))
                          (Hardcopy                          (* ; "Print this document")
                                    (TEDIT.HARDCOPY TEXTOBJ))
                          (Press% File                       (* ; 
                                                     "Make a hardcopy file with this document in it.")
                                       (TEDIT.HCPYFILE TEXTOBJ))
                          (Expanded% Menu                    (* ; 
                                                             "Open the expanded operations menu.")
                               (\TEDIT.EXPANDED.MENU TEXTOBJ))
                          (Character% Looks                  (* ; 
                                                          "Open the menu for setting character looks")
                               (\TEDIT.EXPANDEDCHARLOOKS.MENU TEXTOBJ))
                          (Paragraph% Formatting             (* ; 
                                                             "Open the paragraph formatting menu")
                               (\TEDIT.EXPANDEDPARA.MENU TEXTOBJ))
                          (Page% Layout                      (* ; "Open the page-layout menu")
                                        (\TEXTMENU.START (COPYTEXTSTREAM TEDIT.EXPANDED.PAGEMENU T)
                                               (\TEDIT.PRIMARYW TEXTOBJ)
                                               "Page Layout Menu" 150))
                          (COND
                             ((CAR ITEM)                     (* ; 
           "This is a user-supplied entry.  Get the function, and apply it to the TEXTSTREAM for him")
                              (APPLY* (CAR ITEM)
                                     (fetch (TEXTOBJ STREAMHINT) of TEXTOBJ])])

(TEDIT.REMOVE.MENUITEM
  [LAMBDA (MENU ITEM)                                        (* gbn "26-Apr-84 04:06")
    (PROG (ITEMLIST)
          [COND
             ((OR (LITATOM ITEM)
                  (STRINGP ITEM))
              (for X in (fetch ITEMS of MENU) do (COND
                                                    ((AND (LISTP X)
                                                          (EQUAL (CAR X)
                                                                 ITEM))
                                                     (RETURN (SETQ ITEM X]
          (RETURN (COND
                     ((MEMBER ITEM (SETQ ITEMLIST (fetch ITEMS of MENU)))
                      (replace ITEMS of MENU with (REMOVE ITEM ITEMLIST))
                      (replace MENUCOLUMNS of MENU with NIL)
                      (replace MENUROWS of MENU with NIL)
                      (UPDATE/MENU/IMAGE MENU))
                     (T NIL])

(\TEDIT.CREATEMENU
  [LAMBDA (ITEMS)                                            (* ; "Edited 16-Oct-87 14:21 by jds")

    (* ;; "Create a TEdit command menu, given a list of menu items.")

    (create MENU
           ITEMS _ ITEMS
           CENTERFLG _ T
           MENUFONT _ (FONTCREATE 'HELVETICA 10 'BOLD)
           WHENHELDFN _ '\TEDIT.MENU.WHENHELDFN
           WHENSELECTEDFN _ '\TEDIT.MENU.WHENSELECTEDFN])

(\TEDIT.MENU.WHENHELDFN
  [LAMBDA (ITEM MENU BUTTON)                                 (* ; "Edited  4-Oct-2022 09:17 by rmk")
                                                             (* jds "10-Apr-84 15:14")
    (COND
       ((ATOM ITEM)
        (CLRPROMPT)
        (PROMPTPRINT (SELECTQ ITEM
                         (Put "Sends the document to a file")
                         (Get "Gets a new file as the document to edit.")
                         (Looks "Changes the font/size/etc. of characters")
                         (Find "Searches for a string")
                         (Quit "Ends the edit session")
                         (Hardcopy "Formats and sends the file to a printer.")
                         (Hardcopy% File 
                              "Creates a hardcopy-format file of the document.")
                         "")))
       (T (DEFAULTMENUHELDFN ITEM])

(\TEDIT.MENU.WHENSELECTEDFN
  [LAMBDA (ITEM MENU BUTTON)                                 (* ; "Edited 16-Oct-87 14:21 by jds")

    (* ;; "A Selection fn for preserving the button pressed, for special handling in PUT, e.g.")

    (CONS (DEFAULTWHENSELECTEDFN ITEM MENU BUTTON)
          BUTTON])
)
(DECLARE%: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS TEDIT.DEFAULT.MENU)
)
(DECLARE%: DONTEVAL@LOAD DOCOPY 

(RPAQ TEDIT.DEFAULT.MENU
      [\TEDIT.CREATEMENU '((Put 'Put NIL (SUBITEMS |Put Formatted Document| Plain-Text))
                           (Get 'Get NIL (SUBITEMS |Get Formatted Document| Unformatted% Get))
                           Include Find Looks Substitute Quit (Expanded% Menu 'Expanded% Menu NIL
                                                                     (SUBITEMS Expanded% Menu 
                                                                            Character% Looks 
                                                                            Paragraph% Formatting 
                                                                            Page% Layout])
)
(DECLARE%: DONTEVAL@LOAD DOCOPY 

[OR (SASSOC 'TEdit BackgroundMenuCommands)
    (NCONC1 BackgroundMenuCommands '(TEdit '(TEDIT)
                                           "Opens a TEdit window for use."]

(SETQ BackgroundMenu NIL)
)



(* ; "titled icon info")


(FILESLOAD ICONW)

(RPAQQ TEDITICON #*(87 95)OOOOOOOOOOOOOOOOON@@@@@@OOOOOOOOOOOOOOOOON@@@@@@OOOOOOOOOOOOOOOOON@@@@@@O@AA@@CH@@@H@H@@@G@@@@@@OOOOOOOOOOOOOOOOOOH@@@@@OH@MJH@@F@@@@@@@B@N@@@@@OOOOOOOOOOOHGOOOOOOH@@@@MO@@@@@F@@@OL@@C@@@OH@@@LOOOOOOOOOOOOOOOOOOOON@@LGOOOOOOOOOOOOOOOOOOON@@LAOOOOOOOOOOOOOOOOOOON@@L@CN@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@LD@N@@@@@@@@@@@@@@@@@N@@MLDN@@@@@@@@@@@@@@@@@N@@LGBN@@@@@@@@@@@@@@@@@N@@LDNN@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@M@@N@@@@@@@@@@@@@@@@@N@@LGBN@@@@@@@@@@@@@@@@@N@@LDNN@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@MH@N@@@@@@@@@@@@@@@@@N@@MFBN@@@@@@@@@@@@@@@@@N@@LELN@@@@@@@@@@@@@@@@@N@@LDBN@@@@@@@@@@@@@@@@@N@@LBBN@@@@@@@@@@@@@@@@@N@@LALN@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@MH@N@@@@@@@@@@@@@@@@@N@@M@DN@@@@@@@@@@@@@@@@@N@@MDBN@@@@@@@@@@@@@@@@@N@@MCBN@@@@@@@@@@@@@@@@@N@@MNBN@@@@@@@@@@@@@@@@@N@@MCJN@@@@@@@@@@@@@@@@@N@@L@FN@@@@@@@@@@@@@@@@@N@@L@BN@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@MH@N@@@@@@@@@@@@@@@@@N@@M@@N@@@@@@@@@@@@@@@@@N@@M@@N@@@@@@@@@@@@@@@@@N@@ML@N@@@@@@@@@@@@@@@@@N@@MCJN@@@@@@@@@@@@@@@@@N@@M@FN@@@@@@@@@@@@@@@@@N@@MHBN@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@N@@N@@@@@@@@@@@@@@@@@N@@G@@N@@@@@@@@@@@@@@@@@N@@GH@N@@@@@@@@@@@@@@@@@N@@CN@N@@@@@@@@@@@@@@@@@N@@AOHN@@@@@@@@@@@@@@@@@N@@@GOOOOOOOOOOOOOOOOOOON@@@AOOOOOOOOOOOOOOOOOOON@@@@COOOOOOOOOOOOOOOOOON@@
)

(RPAQQ TEDITMASK
)

(RPAQ? TEDIT.ICON.FONT (FONTCREATE 'HELVETICA 8 'BOLD))

(RPAQ? TEDIT.ICON.TITLE.REGION [CONS 16 (CONS 4 (CONS 64 (CONS 77 NIL])

(RPAQ? TEDIT.TITLED.ICON.TEMPLATE (CONS TEDITICON (CONS TEDITMASK (CONS TEDIT.ICON.TITLE.REGION NIL))
                                        ))
(DECLARE%: DONTCOPY
  (FILEMAP (NIL (11907 87953 (TEDIT.CREATEW 11917 . 14690) (\TEDIT.CREATEW.FROM.REGION 14692 . 15855) (
TEDIT.CURSORMOVEDFN 15857 . 21931) (TEDIT.CURSOROUTFN 21933 . 22377) (TEDIT.MINIMAL.WINDOW.SETUP 22379
 . 29976) (\TEDIT.ACTIVE.WINDOWP 29978 . 30971) (\TEDIT.BUTTONEVENTFN 30973 . 52713) (
\TEDIT.WINDOW.OPS 52715 . 55927) (\TEDIT.EXPANDFN 55929 . 56492) (\TEDIT.MAINW 56494 . 57836) (
\TEDIT.PRIMARYW 57838 . 58999) (\TEDIT.COPYINSERTFN 59001 . 60208) (\TEDIT.NEWREGIONFN 60210 . 62726) 
(\TEDIT.SET.WINDOW.EXTENT 62728 . 67141) (\TEDIT.SHRINK.ICONCREATE 67143 . 69453) (\TEDIT.SHRINKFN 
69455 . 70014) (\TEDIT.SPLITW 70016 . 75352) (\TEDIT.UNSPLITW 75354 . 78922) (\TEDIT.WINDOW.SETUP 
78924 . 85864) (\PANEREGION 85866 . 87951)) (89283 90194 (TEDITWINDOWP 89293 . 90192)) (90231 93181 (
TEDIT.GETINPUT 90241 . 92417) (\TEDIT.MAKEFILENAME 92419 . 93179)) (93230 101722 (TEDIT.PROMPTPRINT 
93240 . 96518) (TEDIT.PROMPTCLEAR 96520 . 98239) (TEDIT.PROMPTFLASH 98241 . 100150) (
\TEDIT.PROMPT.PAGEFULLFN 100152 . 101720)) (101960 106776 (TEXTSTREAM.TITLE 101970 . 102595) (
\TEDIT.ORIGINAL.WINDOW.TITLE 102597 . 104479) (\TEDIT.WINDOW.TITLE 104481 . 105179) (
\TEXTSTREAM.FILENAME 105181 . 105934) (\TEDIT.UPDATE.TITLE 105936 . 106774)) (106819 119079 (
TEDIT.DEACTIVATE.WINDOW 106829 . 113235) (\TEDIT.REPAINTFN 113237 . 114742) (\TEDIT.RESHAPEFN 114744
 . 118186) (\TEDIT.PANEWITHINSCREEN? 118188 . 119077)) (119080 134575 (\TEDIT.SCROLLFN 119090 . 121159
) (\TEDIT.SCROLLFLOAT 121161 . 125116) (\TEDIT.SCROLLUP 125118 . 129257) (\TEDIT.SCROLLDOWN 129259 . 
134573)) (134617 136748 (\TEDIT.PROCIDLEFN 134627 . 135922) (\TEDIT.PROCENTRYFN 135924 . 136369) (
\TEDIT.PROCEXITFN 136371 . 136746)) (136827 146135 (\EDIT.DOWNCARET 136837 . 137506) (\EDIT.FLIPCARET 
137508 . 139027) (TEDIT.FLASHCARET 139029 . 140310) (\EDIT.UPCARET 140312 . 140737) (
TEDIT.NORMALIZECARET 140739 . 144823) (\SETCARET 144825 . 145708) (\TEDIT.CARET 145710 . 146133)) (
146169 159479 (TEDIT.ADD.MENUITEM 146179 . 148470) (TEDIT.DEFAULT.MENUFN 148472 . 156819) (
TEDIT.REMOVE.MENUITEM 156821 . 157818) (\TEDIT.CREATEMENU 157820 . 158257) (\TEDIT.MENU.WHENHELDFN 
158259 . 159164) (\TEDIT.MENU.WHENSELECTEDFN 159166 . 159477)))))
STOP
