(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)

(FILECREATED " 9-Mar-2023 22:59:36" {WMEDLEY}<library>TEDIT>TEDIT-WINDOW.;39 178808 

      :CHANGES-TO (FNS \TEDIT.SCROLLFN TEDIT.DEACTIVATE.WINDOW)

      :PREVIOUS-DATE " 4-Mar-2023 22:05:41" {WMEDLEY}<library>tedit>TEDIT-WINDOW.;36)


(PRETTYCOMPRINT TEDIT-WINDOWCOMS)

(RPAQQ TEDIT-WINDOWCOMS
       [(DECLARE%: EVAL@COMPILE DONTCOPY (EXPORT (RECORDS TEDITCARET TEXTWINDOW PANE)))
        (INITRECORDS TEDITCARET)
        (FILES ATTACHEDWINDOW)
        (FNS TEDIT.CREATEW \TEDIT.CREATEW.FROM.REGION TEDIT.CURSORMOVEDFN TEDIT.CURSOROUTFN 
             TEDIT.WINDOW.SETUP TEDIT.MINIMAL.WINDOW.SETUP \TEDIT.ACTIVE.WINDOWP \TEDIT.BUTTONEVENTFN
             \TEDIT.WINDOW.OPS \TEDIT.EXPANDFN \TEDIT.MAINW \TEDIT.PRIMARYW \TEDIT.COPYINSERTFN 
             \TEDIT.NEWREGIONFN \TEDIT.SET.WINDOW.EXTENT \TEDIT.SHRINK.ICONCREATE \TEDIT.SHRINKFN 
             \TEDIT.SPLITW \TEDIT.UNSPLITW \TEDIT.WINDOW.SETUP \SAFE.FIRST)
        (INITVARS (\TEDIT.OP.WIDTH 12)
               (\TEDIT.OP.BOTTOM 12))
        (DECLARE%: DONTEVAL@LOAD DOCOPY (GLOBALVARS \TEDIT.OP.WIDTH \TEDIT.OP.BOTTOM))
        (CURSORS BXCARET BXHICARET TEDIT.LINECURSOR \TEDIT.SPLITCURSOR \TEDIT.MOVESPLITCURSOR 
               \TEDIT.UNSPLITCURSOR \TEDIT.MAKESPLITCURSOR)
        (INITVARS (TEDIT.DEFAULT.WINDOW NIL))
        (GLOBALVARS TEDIT.DEFAULT.WINDOW)
        (COMS                                                (* ; 
                                                   "User-level %"is this a TEdit window?%" function.")
              (FNS TEDITWINDOWP))
        (COMS                                                (* ; "User-typein support")
              (FNS TEDIT.GETINPUT \TEDIT.MAKEFILENAME))
        (COMS                                                (* ; "Attached Prompt window support.")
              (FNS TEDIT.PROMPTPRINT TEDIT.PROMPTFLASH \TEDIT.PROMPT.PAGEFULLFN)
              (INITVARS (TEDIT.PROMPT.FONT (FONTCREATE 'TERMINAL 10))
                     (TEDIT.PROMPTWINDOW.HEIGHT NIL))
              (GLOBALVARS TEDIT.PROMPT.FONT TEDIT.PROMPTWINDOW.HEIGHT))
        (COMS                                                (* ; "Title creation and update")
              (FNS TEXTSTREAM.TITLE \TEDIT.ORIGINAL.WINDOW.TITLE \TEDIT.WINDOW.TITLE 
                   \TEXTSTREAM.FILENAME))
        (COMS                                                (* ; "Screen updating utilities")
              (FNS TEDIT.DEACTIVATE.WINDOW \TEDIT.REPAINTFN \TEDIT.RESHAPEFN \TEDIT.SCROLLFN))
        (COMS                                                (* ; "Process-world interfaces")
              (FNS \TEDIT.PROCIDLEFN \TEDIT.PROCENTRYFN \TEDIT.PROCEXITFN))
        (COMS (INITVARS (\CARETRATE 333))
                                                             (* ; "Caret handler;  stolen from CHAT.")
              (FNS \EDIT.DOWNCARET \EDIT.FLIPCARET TEDIT.FLASHCARET \EDIT.UPCARET 
                   TEDIT.NORMALIZECARET \SETCARET \TEDIT.CARET))
        [COMS                                                (* ; "Menu interfacing")
              (FNS TEDIT.ADD.MENUITEM TEDIT.DEFAULT.MENUFN TEDIT.REMOVE.MENUITEM \TEDIT.CREATEMENU 
                   \TEDIT.MENU.WHENHELDFN \TEDIT.MENU.WHENSELECTEDFN)
              (GLOBALVARS TEDIT.DEFAULT.MENU)
              [DECLARE%: DONTEVAL@LOAD DOCOPY
                     (VARS (TEDIT.DEFAULT.MENU (\TEDIT.CREATEMENU '((Put 'Put NIL (SUBITEMS 
                                                                             |Put Formatted Document|
                                                                                         Plain-Text))
                                                                    (Get 'Get NIL (SUBITEMS 
                                                                             |Get Formatted Document|
                                                                                         
                                                                                     Unformatted% Get
                                                                                         ))
                                                                    Include Find Looks Substitute 
                                                                    Quit
                                                                    (Expanded% Menu 'Expanded% Menu 
                                                                           NIL
                                                                           (SUBITEMS Expanded% Menu 
                                                                                  Character% Looks 
                                                                                Paragraph% Formatting
                                                                                  Page% Layout]
              (DECLARE%: DONTEVAL@LOAD DOCOPY (P [OR (SASSOC 'TEdit BackgroundMenuCommands)
                                                     (NCONC1 BackgroundMenuCommands
                                                            '(TEdit '(TEDIT)
                                                                    "Opens a TEdit window for use."]
                                                 (SETQ BackgroundMenu NIL]
        (COMS                                                (* ; "titled icon info")
              (FILES ICONW)
              (BITMAPS TEDITICON TEDITMASK)
              (INITVARS (TEDIT.ICON.FONT (FONTCREATE 'HELVETICA 8 'BOLD))
                     [TEDIT.ICON.TITLE.REGION (CONS 16 (CONS 4 (CONS 64 (CONS 77 NIL]
                                                             (* ; 
                          "Original was (create REGION BOTTOM _ 4 LEFT _ 16 WIDTH _ 64 HEIGHT _ 77).")
                                                             (* ; 
                                                    "Changed by yabu.fx, for SUNLOADUP without DWIM.")
                     [TEDIT.TITLED.ICON.TEMPLATE (CONS TEDITICON (CONS TEDITMASK (CONS 
                                                                              TEDIT.ICON.TITLE.REGION
                                                                                       NIL]
                                                             (* ; "Original was (create TITLEDICON ICON _ TEDITICON MASK _ TEDITMASK TITLEREG _ TEDIT.ICON.TITLE.REGION).")
                                                             (* ; 
                                                    "Changed by yabu.fx, for SUNLOADUP without DWIM.")
                     ])
(DECLARE%: EVAL@COMPILE DONTCOPY 
(* "FOLLOWING DEFINITIONS EXPORTED")(DECLARE%: EVAL@COMPILE

(DATATYPE TEDITCARET (TCNOWTIME 

         (* Used to hold the current time, when checking to see if a transition is due)

                            TCTHENTIME                       (* Time when the next transition is to 
                                                             take place)
                            TCFORCEDDOWN                     (* TCFORCEDOWN = T means
                                                             (Make the caret visible at the next 
                                                             call to \EDIT.FLIPCARET.))
                            TCUP

         (* TCUP = T => The caret is NOT VISIBLE. Used to track the current state of the 
         caret)

                            TCCARETDS                        (* The display stream that the caret 
                                                             appears in)
                            TCCURSORBM                       (* The CURSOR representing the caret)
                            TCCARETRATE                      (* %# of MSEC between caret up/down 
                                                             transitions)
                            TCFORCEUP

         (* T => The caret is not allowed to become visible.
         Used to keep the caret up during screen updates)

                            TCCARETX                         (* X position in the window that the 
                                                             caret appears at)
                            TCCARETY                         (* Y position in the window where the 
                                                             caret appears)
                            TCCARET                          (* A lisp CARET to be flashed
                                                             (eventually))
                            )
                     TCNOWTIME _ (CREATECELL \FIXP)
                     TCTHENTIME _ (CREATECELL \FIXP)
                     TCCURSORBM _ BXCARET TCCARETRATE _ \CARETRATE TCUP _ T TCCARET _ (\CARET.CREATE
                                                                                       BXCARET))

(ACCESSFNS TEXTWINDOW ((NEXTPANE (GETWINDOWPROP DATUM 'TEDIT-NEXT-PANE-DOWN)
                              (PUTWINDOWPROP DATUM 'TEDIT-NEXT-PANE-DOWN NEWVALUE))
                       (WTEXTSTREAM (GETWINDOWPROP DATUM 'TEXTSTREAM)
                              (PUTWINDOWPROP DATUM 'TEXTSTREAM NEWVALUE))
                       (WTEXTOBJ (GETWINDOWPROP DATUM 'TEXTOBJ)
                              (PUTWINDOWPROP DATUM 'TEXTOBJ NEWVALUE))
                       (WLINES (GETWINDOWPROP DATUM 'LINES)
                              (PUTWINDOWPROP DATUM 'LINES NEWVALUE))
                       (CLOSINGFILE (GETWINDOWPROP DATUM 'TEDIT-CLOSING-FILE)
                              (PUTWINDOWPROP DATUM 'TEDIT-CLOSING-FILE NIL))))

(RECORD PANE (PWINDOW PL1 PLN PCARET HOLDDUMMYFIRSTLINE))
)

(/DECLAREDATATYPE 'TEDITCARET '(POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER 
                                      POINTER POINTER POINTER)
       '((TEDITCARET 0 POINTER)
         (TEDITCARET 2 POINTER)
         (TEDITCARET 4 POINTER)
         (TEDITCARET 6 POINTER)
         (TEDITCARET 8 POINTER)
         (TEDITCARET 10 POINTER)
         (TEDITCARET 12 POINTER)
         (TEDITCARET 14 POINTER)
         (TEDITCARET 16 POINTER)
         (TEDITCARET 18 POINTER)
         (TEDITCARET 20 POINTER))
       '22)

(* "END EXPORTED DEFINITIONS")

)

(/DECLAREDATATYPE 'TEDITCARET '(POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER 
                                      POINTER POINTER POINTER)
       '((TEDITCARET 0 POINTER)
         (TEDITCARET 2 POINTER)
         (TEDITCARET 4 POINTER)
         (TEDITCARET 6 POINTER)
         (TEDITCARET 8 POINTER)
         (TEDITCARET 10 POINTER)
         (TEDITCARET 12 POINTER)
         (TEDITCARET 14 POINTER)
         (TEDITCARET 16 POINTER)
         (TEDITCARET 18 POINTER)
         (TEDITCARET 20 POINTER))
       '22)

(FILESLOAD ATTACHEDWINDOW)
(DEFINEQ

(TEDIT.CREATEW
  [LAMBDA (PROMPT FILE PROPS)                                (* ; "Edited  1-Jan-2022 23:54 by rmk")
                                                             (* ; "Edited 30-Dec-2021 23:00 by rmk")
                                                             (* ; "Edited 29-Dec-2021 16:35 by rmk")
                                                             (* ; "Edited 24-Dec-2021 19:21 by rmk")
                                                            (* ; "Edited 27-Oct-2021 12:25 by rmk:")

    (* ;; "RMK: PROPS are passed to CREATEW and \TEDIT.ORIGINAL.WINDOW.TITLE.  .")

    (* ;; 
    "RMK:  If PROMPTWINDOW is in PROPS, I don't see how it gets attached to the new Tedit window.")

    (* ;; 
    "Also odd:  The argument PROMPT gets printed, but then gets replaced by the property PROMPT")

    (* ;; "Don't set the global TEDIT default window if we have a region property, that must be special purpose.")
                                                             (* jds "23-May-85 15:19")
    (CLRPROMPT)
    (printout PROMPTWINDOW PROMPT T)
    (LET ((PROMPT (LISTGET PROPS 'PROMPTWINDOW))
          (PHEIGHT 0)
          REGION
          (REGIONTYPE (LISTGET PROPS 'REGION-TYPE))
          WINDOW)

         (* ;; "All this prompt-height calculation would be unnecessary if the attachment in GETPROMPTWINDOW does the proper shrinking of the main window.")

         [COND
            ((EQ PROMPT 'DON'T))
            [PROMPT (CL:WHEN (WINDOWP PROMPT)                (* ; 
                                                            "RMK: If not a window, PHEIGHT remains 0")
                        (SETQ PHEIGHT (FETCH (REGION HEIGHT) OF (WINDOWREGION PROMPT))))]
            (T (SETQ PHEIGHT (HEIGHTIFWINDOW (ITIMES (OR (LISTGET PROPS 'PROMPTWINDOWHEIGHT)
                                                         TEDIT.PROMPTWINDOW.HEIGHT 1)
                                                    (FONTPROP TEDIT.PROMPT.FONT 'HEIGHT]
         (SETQ REGION (OR (REGIONP REGIONTYPE)
                          (GETREGION 32 (IPLUS PHEIGHT 32)
                                 REGIONTYPE)))
         (add (fetch HEIGHT of REGION)
              (IMINUS PHEIGHT))
         (SETQ WINDOW (CREATEW REGION (\TEDIT.ORIGINAL.WINDOW.TITLE FILE NIL PROPS)
                             NIL NIL PROPS))
         (WINDOWPROP WINDOW 'TEDITCREATED T)
         (OR PROMPT (GETPROMPTWINDOW WINDOW (OR (LISTGET PROPS 'PROMPTWINDOWHEIGHT)
                                                TEDIT.PROMPTWINDOW.HEIGHT 1)
                           TEDIT.PROMPT.FONT))
         (CL:UNLESS REGIONTYPE (SETQ TEDIT.DEFAULT.WINDOW WINDOW))
         WINDOW])

(\TEDIT.CREATEW.FROM.REGION
  [LAMBDA (REGION FILE PROPS)                                (* gbn "15-Nov-84 18:04")
    (PROG ((PROMPT (LISTGET PROPS 'PROMPTWINDOW))
           (PHEIGHT 0)
           PWINDOW)
          [COND
             ((EQ PROMPT 'DON'T))
             (PROMPT)
             (T (SETQ PHEIGHT (HEIGHTIFWINDOW (ITIMES (OR (LISTGET PROPS 'PROMPTWINDOWHEIGHT)
                                                          TEDIT.PROMPTWINDOW.HEIGHT 1)
                                                     (FONTPROP TEDIT.PROMPT.FONT 'HEIGHT]
          (SETQ TEDIT.DEFAULT.WINDOW (CREATEW REGION (\TEDIT.ORIGINAL.WINDOW.TITLE FILE)))
          (WINDOWPROP TEDIT.DEFAULT.WINDOW 'TEDITCREATED T)
          (OR PROMPT (GETPROMPTWINDOW TEDIT.DEFAULT.WINDOW (OR (LISTGET PROPS 'PROMPTWINDOWHEIGHT)
                                                               TEDIT.PROMPTWINDOW.HEIGHT 1)
                            TEDIT.PROMPT.FONT)))
    TEDIT.DEFAULT.WINDOW])

(TEDIT.CURSORMOVEDFN
  [LAMBDA (W)                                                (* ; "Edited  4-Mar-2023 20:43 by rmk")
                                                             (* ; "Edited  4-Oct-2022 13:23 by rmk")
                                                             (* ; "Edited  1-Oct-2022 16:07 by rmk")

    (* ;; "Watch the mouse and change the cursor to reflect the region of the window it's in (line select, window split eventually?)")

    (PROG ((X (LASTMOUSEX W))
           (Y (LASTMOUSEY W))
           (TEXTOBJ (WINDOWPROP W 'TEXTOBJ))
           (CURSORREG (WINDOWPROP W 'TEDIT.CURSORREGION))
           LINE LEFT RIGHT)
          (CL:UNLESS (INSIDE? CURSORREG X Y)
              (SETQ LINE (\TEDIT.FIND.OVERLAPPING.LINE (for LINES inside (fetch (TEXTOBJ LINES)
                                                                            of TEXTOBJ) as WINDOW
                                                          inside (fetch (TEXTOBJ \WINDOW)
                                                                    of TEXTOBJ)
                                                          when (EQ W WINDOW)
                                                          do (RETURN LINES))
                                Y))
              (CL:WHEN LINE
                  (replace BOTTOM of CURSORREG with (fetch (LINEDESCRIPTOR YBOT) of LINE))
                  (replace HEIGHT of CURSORREG with (fetch (LINEDESCRIPTOR LHEIGHT) of LINE)))
              (SELECTQ (fetch (TEXTOBJ MOUSEREGION) of TEXTOBJ)
                  (TEXT [COND
                           ((AND (IGEQ X (SETQ LEFT (IDIFFERENCE (fetch (TEXTOBJ WRIGHT) of TEXTOBJ)
                                                           \TEDIT.OP.WIDTH)))
                                 (IGEQ Y (IPLUS (fetch (TEXTOBJ WBOTTOM) of TEXTOBJ)
                                                \TEDIT.OP.BOTTOM)))

                            (* ;; "The region to the right of text, for splitting operations.")

                            (CURSOR \TEDIT.SPLITCURSOR)
                            (replace (TEXTOBJ MOUSEREGION) of TEXTOBJ with 'WINDOW)
                            (replace LEFT of CURSORREG with LEFT)
                            (replace WIDTH of CURSORREG with \TEDIT.OP.WIDTH))
                           ([ILESSP X (SETQ LEFT (OR (AND LINE (fetch (LINEDESCRIPTOR LEFTMARGIN)
                                                                  of LINE))
                                                     (IPLUS (fetch (TEXTOBJ WLEFT) of TEXTOBJ)
                                                            8]
                                                             (* ; 
                                                  "In left margin;  switch to the line-select cursor")
                            (CURSOR TEDIT.LINECURSOR)
                            (replace (TEXTOBJ MOUSEREGION) of TEXTOBJ with 'LINE)
                            (replace LEFT of CURSORREG with 0)
                            (replace WIDTH of CURSORREG with LEFT))
                           (T (replace LEFT of CURSORREG with LEFT)
                              (replace WIDTH of CURSORREG with (IDIFFERENCE (fetch (TEXTOBJ WRIGHT)
                                                                               of TEXTOBJ)
                                                                      (IPLUS LEFT 8])
                  (LINE (COND
                           ((AND (IGEQ X (SETQ LEFT (IDIFFERENCE (fetch (TEXTOBJ WRIGHT) of TEXTOBJ)
                                                           \TEDIT.OP.WIDTH)))
                                 (IGEQ Y (IPLUS (fetch (TEXTOBJ WBOTTOM) of TEXTOBJ)
                                                \TEDIT.OP.BOTTOM)))
                            (CURSOR \TEDIT.SPLITCURSOR)
                            (replace (TEXTOBJ MOUSEREGION) of TEXTOBJ with 'WINDOW)
                            (replace LEFT of CURSORREG with LEFT)
                            (replace WIDTH of CURSORREG with \TEDIT.OP.WIDTH))
                           [[IGEQ X (SETQ LEFT (OR (AND LINE (fetch (LINEDESCRIPTOR LEFTMARGIN)
                                                                of LINE))
                                                   (IPLUS (fetch (TEXTOBJ WLEFT) of TEXTOBJ)
                                                          8]
                            (CURSOR T)
                            (replace (TEXTOBJ MOUSEREGION) of TEXTOBJ with 'TEXT)
                            (replace LEFT of CURSORREG with LEFT)
                            (replace WIDTH of CURSORREG with (IDIFFERENCE (fetch (TEXTOBJ WRIGHT)
                                                                             of TEXTOBJ)
                                                                    (IPLUS LEFT 8]
                           (T (replace LEFT of CURSORREG with 0)
                              (replace WIDTH of CURSORREG with LEFT))))
                  (WINDOW (COND
                             ((AND (IGEQ X (SETQ LEFT (IDIFFERENCE (fetch (TEXTOBJ WRIGHT)
                                                                      of TEXTOBJ)
                                                             \TEDIT.OP.WIDTH)))
                                   (IGEQ Y (IPLUS (fetch (TEXTOBJ WBOTTOM) of TEXTOBJ)
                                                  \TEDIT.OP.BOTTOM)))
                              (replace (TEXTOBJ MOUSEREGION) of TEXTOBJ with 'WINDOW)
                              (replace LEFT of CURSORREG with LEFT)
                              (replace WIDTH of CURSORREG with \TEDIT.OP.WIDTH))
                             ([IGEQ X (SETQ LEFT (OR (AND LINE (fetch (LINEDESCRIPTOR LEFTMARGIN)
                                                                  of LINE))
                                                     (IPLUS (fetch (TEXTOBJ WLEFT) of TEXTOBJ)
                                                            8]
                              (CURSOR T)
                              (replace (TEXTOBJ MOUSEREGION) of TEXTOBJ with 'TEXT)
                              (replace LEFT of CURSORREG with LEFT)
                              (replace WIDTH of CURSORREG with (IDIFFERENCE (fetch (TEXTOBJ WRIGHT)
                                                                               of TEXTOBJ)
                                                                      LEFT)))
                             (T (CURSOR TEDIT.LINECURSOR)
                                (replace LEFT of CURSORREG with 0)
                                (replace WIDTH of CURSORREG with LEFT))))
                  NIL))])

(TEDIT.CURSOROUTFN
  [LAMBDA (W)                                                (* ; "Edited 30-May-91 23:32 by jds")
                                                             (* Cursor leaves edit window;
                                                             make sure we think we're in the text 
                                                             region.)
    (PROG [(TEXTOBJ (WINDOWPROP W 'TEXTOBJ]
          (CURSOR T)
          (replace (TEXTOBJ MOUSEREGION) of TEXTOBJ with 'TEXT])

(TEDIT.WINDOW.SETUP
  [LAMBDA (WINDOW TEXTOBJ TEXTSTREAM PROPS AFTERWINDOW)      (* ; "Edited 30-May-91 23:32 by jds")

    (* ;; "Set up the window and TEXTOBJ so they correspond, and the window is a TEDIT window.")

    (* ;; "Do the minimal, everyone-wants-it style of setup.  Leave more specialized setup for other functions.")

    (PROG ((SEL (fetch (TEXTOBJ SEL) of TEXTOBJ))
           TEDITPROMPTWINDOW DS PROP TWIDTH THEIGHT)
          (OR WINDOW (\ILLEGAL.ARG WINDOW))
          (WINDOWPROP WINDOW 'BUTTONEVENTFN (FUNCTION \TEDIT.BUTTONEVENTFN))
                                                             (* ; 
                                       "Set the window up with the right mouse interfaces for TEDIT.")
          (WINDOWPROP WINDOW 'RIGHTBUTTONFN (FUNCTION \TEDIT.BUTTONEVENTFN))
          (WINDOWPROP WINDOW 'HARDCOPYFN (FUNCTION TEDIT.HARDCOPYFN))
                                                             (* ; 
                                                   "Hook into the system standard hardcopy interface")
          (SETQ PROP (LISTGET PROPS 'MENU))                  (* ; 
                                                          "The Command menu, or list of items for it")
          (COND
             ((type? MENU PROP)                              (* ; "It's a menu.  just use it.")
              (WINDOWPROP WINDOW 'TEDIT.MENU PROP))
             (PROP                                           (* ; 
                                "It's a list of menu items.  Force a new menu on next middle button.")
                   (WINDOWPROP WINDOW 'TEDIT.MENU.COMMANDS PROP)
                   (WINDOWPROP WINDOW 'TEDIT.MENU NIL)))
          (TEDIT.MINIMAL.WINDOW.SETUP WINDOW TEXTOBJ TEXTSTREAM PROPS AFTERWINDOW])

(TEDIT.MINIMAL.WINDOW.SETUP
  [LAMBDA (WINDOW TEXTOBJ TSTREAM PROPS AFTERWINDOW)         (* ; "Edited 21-Feb-2023 13:01 by rmk")
                                                             (* ; "Edited  5-Nov-2022 11:49 by rmk")
                                                             (* ; "Edited  6-Sep-2022 11:03 by rmk")
                                                             (* ; "Edited 30-May-91 23:33 by jds")

    (* ;; "Do the absolute minimum setup so that TEXTOBJ and WINDOW know about each other.  Does NOT include mouse interface or scrolling.")

    (* ;; "If AFTERWINDOW is non-NIL, the new window will be placed after AFTERWINDOW in the TEXTOBJ's list.  This lists us maintain an ordering of windows, for splitting and unsplitting.")

    (CL:UNLESS WINDOW (\ILLEGAL.ARG WINDOW))
    (PROG ((SEL (fetch (TEXTOBJ SEL) of TEXTOBJ))
           TEDITPROMPTWINDOW DS PROP TWIDTH THEIGHT LINES OLDWINDOWS)
          (replace (TEDITCARET TCCARETDS) of (COND
                                                [(LISTP (fetch (TEXTOBJ CARET) of TEXTOBJ))
                                                 (CAR (FLAST (fetch (TEXTOBJ CARET) of TEXTOBJ]
                                                (T (fetch (TEXTOBJ CARET) of TEXTOBJ)))
             with (WINDOWPROP WINDOW 'DSP))                  (* ; 
                                                           "The displaystream for flashing the caret")
          (replace (TEXTOBJ SELWINDOW) of TEXTOBJ with WINDOW)
          (WINDOWPROP WINDOW 'PROCESS NIL)                   (* ; 
                                                         "For the moment, this window has no process")
          (WINDOWPROP WINDOW 'TEDIT.PROPS PROPS)             (* ; 
                                     "Put the props on the window for others ...  **this should go**")
          (WINDOWPROP WINDOW 'TEXTSTREAM TSTREAM)            (* ; 
                                        "Save the text stream for the user to get at via the window.")
          (WINDOWPROP WINDOW 'TEXTOBJ TEXTOBJ)               (* ; 
                                            "Give a handle on the TEXTOBJ for the text being edited.")
          (WINDOWPROP WINDOW 'TEDIT.CURSORREGION (LIST 0 0 0 0))
                                                             (* ; "Used by CursorMovedFn")
          (WINDOWPROP WINDOW 'CURSORMOVEDFN (FUNCTION TEDIT.CURSORMOVEDFN))
          (WINDOWPROP WINDOW 'CURSOROUTFN (FUNCTION TEDIT.CURSOROUTFN))
          (SETQ DS (WINDOWPROP WINDOW 'DSP))
          (DSPRIGHTMARGIN 32767 DS)                          (* ; 
                                         "So we don't get spurious RETURNs printed out by the system")
          (SETQ OLDWINDOWS (fetch (TEXTOBJ \WINDOW) of TEXTOBJ))
          [replace (TEXTOBJ \WINDOW) of TEXTOBJ
             with (COND
                     [(LISTP OLDWINDOWS)                     (* ; 
                                                  "There are windows already.  Add this to the list.")
                      (COND
                         (AFTERWINDOW                        (* ; 
                                                "We know which window to put it after.  Put it there")
                                [RPLACD (FMEMB AFTERWINDOW OLDWINDOWS)
                                       (CONS WINDOW (CDR (FMEMB AFTERWINDOW OLDWINDOWS]
                                OLDWINDOWS)
                         (T                                  (* ; 
                                                      "Otherwise, just add it at the end of the list")
                            (NCONC1 OLDWINDOWS WINDOW]
                     (WINDOW (LIST WINDOW]
          (replace (TEXTOBJ DISPLAYCACHE) of TEXTOBJ with (CAR (\TEDIT.CREATE.LINECACHE 1)))
                                                             (* ; 
                                                   "and a CACHE for creating line images for display")
          [replace (TEXTOBJ DISPLAYCACHEDS) of TEXTOBJ with (DSPCREATE (fetch LCBITMAP
                                                                          of (fetch (TEXTOBJ 
                                                                                         DISPLAYCACHE
                                                                                           )
                                                                                of TEXTOBJ]
                                                             (* ; 
                                                     "A displaystream for changeing the image caches")
          (DSPOPERATION 'PAINT (fetch (TEXTOBJ DISPLAYCACHEDS) of TEXTOBJ))
          (DSPCLIPPINGREGION (create REGION
                                    LEFT _ 0
                                    BOTTOM _ 0
                                    WIDTH _ 100
                                    HEIGHT _ 15)
                 (fetch (TEXTOBJ DISPLAYCACHEDS) of TEXTOBJ))(* ; "Remember its size, too.")
          [COND
             ((SETQ PROP (LISTGET PROPS 'REGION))            (* ; 
                                                         "The caller wants to set a region.  Use his")
              (replace (TEXTOBJ WTOP) of TEXTOBJ with (fetch PTOP of PROP))
              (replace (TEXTOBJ WRIGHT) of TEXTOBJ with (fetch RIGHT of PROP))
              (replace (TEXTOBJ WBOTTOM) of TEXTOBJ with (fetch BOTTOM of PROP))
              (replace (TEXTOBJ WLEFT) of TEXTOBJ with (fetch LEFT of PROP)))
             (T                                              (* ; 
                                                             "Otherwise, default to the whole window")
                (replace (TEXTOBJ WLEFT) of TEXTOBJ with 0)
                (replace (TEXTOBJ WBOTTOM) of TEXTOBJ with 0)
                (replace (TEXTOBJ WTOP) of TEXTOBJ with (fetch HEIGHT of (DSPCLIPPINGREGION NIL DS)))
                (replace (TEXTOBJ WRIGHT) of TEXTOBJ with (fetch WIDTH of (DSPCLIPPINGREGION NIL DS]
          (SETQ LINES (\SHOWTEXT TEXTOBJ WINDOW))
          [replace (TEXTOBJ LINES) of TEXTOBJ with (COND
                                                      [AFTERWINDOW (for LINE
                                                                      in (fetch (TEXTOBJ LINES)
                                                                            of TEXTOBJ) as WINDOW
                                                                      in OLDWINDOWS
                                                                      join (COND
                                                                              ((EQ WINDOW AFTERWINDOW
                                                                                   )
                                                                               (LIST LINE LINES))
                                                                              (T (LIST LINE]
                                                      ((LISTP (fetch (TEXTOBJ LINES) of TEXTOBJ))
                                                       (NCONC1 (fetch (TEXTOBJ LINES) of TEXTOBJ)
                                                              LINES))
                                                      (LINES (LIST LINES]
          (\FIXSEL SEL TEXTOBJ)
          (TEDIT.NORMALIZECARET TEXTOBJ SEL)
          (\SHOWSEL SEL NIL T)
          (\TEDIT.SET.WINDOW.EXTENT TEXTOBJ WINDOW)
          (\COPYSEL SEL TEDIT.SELECTION])

(\TEDIT.ACTIVE.WINDOWP
  [LAMBDA (W)                                                (* ; "Edited 30-May-91 23:33 by jds")

         (* Decides whether a TEdit window is really in use.
         The function TEDIT will set the TEXTOBJ prop of the window to T pro tem, to 
         reserve a window. Once the TEdit has really started, the TEXTOBJ property will be 
         a real textobj.)

    (PROG [(TEXTOBJ (OR (WINDOWPROP W 'TEXTOBJ)
                        (AND (WINDOWPROP W 'TEXTSTREAM)
                             (TEXTOBJ (WINDOWPROP W 'TEXTSTREAM]
          (RETURN (COND
                     ((EQ TEXTOBJ T)                         (* Can have a TEXTOBJ of T as a 
                                                             placeholder during creation...)
                      T)
                     (TEXTOBJ (AND (NOT (fetch (TEXTOBJ EDITFINISHEDFLG) of TEXTOBJ))
                                   (PROCESSP (WINDOWPROP W 'PROCESS])

(\TEDIT.BUTTONEVENTFN
  [LAMBDA (W STREAM)                                        (* ; "Edited 19-Sep-2021 22:58 by rmk:")

    (* ;; "Handle button events for a TEdit window.  If no button is down, we got control on button-up transition, so ignore it.")

    (TOTOPW W)

    (* ;; "RMK: 2021/9 TOTOPW was in (almost) all the conditional branches, I moved it up so that it always happens, even if the click is perhaps in a menu.  There were cases where a second click in the window was needed to bring it above an overlapping window that it was under.  I think perhaps it was because the mouse button may not have been seen as down on the first click, so it would return before it raised the window.  But that was really bizarre--maybe the click was to see what was obscured by the overlapping window.")

    (CL:WHEN (AND (MOUSESTATE (OR LEFT MIDDLE RIGHT))
                  (NOT TEDIT.SELPENDING))

        (* ;; "(RMK:  old comment): Bail out if the mouse isn't down or there is a pending selection--don't want another selection to interfere.")

        (AND STREAM (SETQ STREAM (TEXTOBJ STREAM)))
        [LET* ((OSEL NIL)
               (SEL NIL)
               [TEXTOBJ (OR STREAM (WINDOWPROP W 'TEXTOBJ]
               (DS (WINDOWPROP W 'DSP))
               USERFN
               (GLOBALSEL TEDIT.SELECTION)
               (X (LASTMOUSEX W))
               (Y (LASTMOUSEY W))
               (CLIPREGION (DSPCLIPPINGREGION NIL W))
               (SELOPERATION 'NORMAL)
               (SELFN (TEXTPROP TEXTOBJ 'SELFN))
               (EXTENDFLG NIL)
               (OLDX -32000)
               (OLDY -32000)
               SELFINALFN PROC NOSEL)
              (replace (SELECTION CH#) of TEDIT.SCRATCHSELECTION with 0)
                                                             (* ; 
                       "Mark the user-visible scratch selection fresh, so changes can be detected...")
              (COND
                 [[OR (NOT TEXTOBJ)
                      (fetch (TEXTOBJ EDITFINISHEDFLG) of TEXTOBJ)
                      (AND (NOT (WINDOWPROP W 'PROCESS))
                           (NOT (TEXTPROP TEXTOBJ 'READONLY))
                           (NOT (SHIFTDOWNP 'SHIFT))
                           (NOT (SHIFTDOWNP 'CTRL))
                           (NOT (SHIFTDOWNP 'META))
                           (NOT (KEYDOWNP 'MOVE))
                           (NOT (KEYDOWNP 'COPY]             (* ; "There's no edit session behind this window.  You can only do window ops, or re-establish a session.")
                  (COND
                     ((\TEDIT.MOUSESTATE RIGHT)              (* ; 
                                                          "Right button gets the window command menu")
                      (DOWINDOWCOM W))
                     ((AND TEXTOBJ (NOT (TEXTPROP TEXTOBJ 'READONLY))
                           (NOT (TEXTPROP TEXTOBJ 'SELECTONLY))
                           [NOT (PROCESSP (WINDOWPROP W 'PROCESS]
                           (\TEDIT.MOUSESTATE MIDDLE))       (* ; 
                                  "Middle button on a dead window gives a menu for re-starting TEDIT")
                      (COND
                         ((EQ (MENU TEDIT.RESTART.MENU)
                              'NewEditProcess)
                          (replace (TEXTOBJ EDITOPACTIVE) of TEXTOBJ with NIL)
                          (TEDIT (fetch (TEXTOBJ STREAMHINT) of TEXTOBJ)
                                 W]
                 [(IGREATERP Y (fetch TOP of CLIPREGION))    (* ; 
                                       "It's not inside the window's REAL region, so call on a menu.")

                  (* ;; "RMK:  This comment was originally just after the DON'T below, which generated a value-of-comment used message.")

                  (* ;; "HAD BEEN:  (COND ((AND (SETQ PROC (WINDOWPROP W 'PROCESS)) (PROCESSP PROC)) ; This window has a live process behind it;  go evaluate the button fn there. (PROCESS.APPLY PROC USERFN (LIST W))) (T ; Otherwise, create a new process to handle the menu. (ADD.PROCESS (LIST USERFN (KWOTE W)))))")

                  (COND
                     ((\TEDIT.MOUSESTATE RIGHT)
                      (DOWINDOWCOM W))
                     ((MOUSESTATE (OR LEFT MIDDLE))
                      (AND TEXTOBJ (SETQ USERFN (WINDOWPROP W 'TEDIT.TITLEMENUFN))
                           (NEQ USERFN 'DON'T)
                           (ADD.PROCESS (LIST USERFN (KWOTE W]
                 ((AND TEXTOBJ (EQ (fetch (TEXTOBJ MOUSEREGION) of TEXTOBJ)
                                   'WINDOW))                 (* ; 
                      "We're in the window-ops region of the window.  Do a window split or something")
                  (\TEDIT.WINDOW.OPS TEXTOBJ W))
                 ((AND TEXTOBJ (NOT (fetch (TEXTOBJ EDITOPACTIVE) of TEXTOBJ)))
                                                             (* ; 
             "Usual case -- he's really selecting something.  And there's nothing else going on now.")
                  (\CARET.DOWN)                              (* ; 
                                                         "Make sure the caret isn't being displayed.")
                  (RESETLST
                      (RESETSAVE TEDIT.SELPENDING TEXTOBJ)

                      (* ;; "Tell all TEdits not to run, since there is a selection in progress.  This is reset to NIL on return from here, to re-enable TEdit runs.")

                      (RESETSAVE (for CARET inside (fetch (TEXTOBJ CARET) of TEXTOBJ)
                                    do (replace TCCARET of CARET with (\CARET.CREATE BXHICARET)))
                             (LIST '\TEDIT.CARET (fetch (TEXTOBJ CARET) of TEXTOBJ)))
                                                             (* ; 
                                     "Then make the caret be the special, tall one so he can see it.")
                      (COND
                         ((KEYDOWNP 'COPY)                   (* ; 
                                                        "In a read-only document, you can only copy.")
                          (SETQ GLOBALSEL TEDIT.SHIFTEDSELECTION)
                          (SETQ OSEL (fetch (TEXTOBJ SHIFTEDSEL) of TEXTOBJ))
                          (SETQ SELOPERATION 'COPY))
                         ((AND (KEYDOWNP 'MOVE)
                               (NOT (fetch (TEXTOBJ TXTREADONLY) of TEXTOBJ)))
                                                             (* ; 
                                                            "The MOVE key is down, so set MOVE mode.")
                          (SETQ GLOBALSEL TEDIT.MOVESELECTION)
                          (SETQ OSEL (fetch (TEXTOBJ MOVESEL) of TEXTOBJ))
                          (SETQ SELOPERATION 'MOVE))
                         [(SHIFTDOWNP 'SHIFT)                (* ; 
                                      "the SHIFT key is down;  mark this selection for COPY or MOVE.")
                          (COND
                             ((AND (SHIFTDOWNP 'CTRL)
                                   (NOT (fetch (TEXTOBJ TXTREADONLY) of TEXTOBJ)))
                                                             (* ; "CTRL-SHIFT select means MOVE.")
                              (SETQ GLOBALSEL TEDIT.MOVESELECTION)
                              (SETQ OSEL (fetch (TEXTOBJ MOVESEL) of TEXTOBJ))
                              (SETQ SELOPERATION 'MOVE))
                             (T (SETQ GLOBALSEL TEDIT.SHIFTEDSELECTION)
                                (SETQ OSEL (fetch (TEXTOBJ SHIFTEDSEL) of TEXTOBJ))
                                (SETQ SELOPERATION 'COPY]
                         ((SHIFTDOWNP 'META)                 (* ; 
                                          "He's holding the meta key down , do a copylooks selection")
                          (SETQ GLOBALSEL TEDIT.COPYLOOKSSELECTION)
                          (SETQ OSEL (fetch (TEXTOBJ SHIFTEDSEL) of TEXTOBJ))
                          (SETQ SELOPERATION 'COPYLOOKS))
                         ((AND (SHIFTDOWNP 'CTRL)
                               (NOT (fetch (TEXTOBJ TXTREADONLY) of TEXTOBJ)))
                                                             (* ; 
                                                 "He's holding the control key down;  note the fact.")
                          (\SHOWSEL (fetch (TEXTOBJ SEL) of TEXTOBJ)
                                 NIL NIL)
                          (SETQ GLOBALSEL TEDIT.DELETESELECTION)
                          [COND
                             ((fetch (SELECTION SET) of (fetch (TEXTOBJ DELETESEL) of TEXTOBJ))
                                                             (* ; 
           "There's a pending delete selection.  Use it, and turn off the existing normal selection.")
                              )
                             (T                              (* ; 
                       "No existing delete selection.  Use the normal selection as a starting point.")
                                (\COPYSEL (fetch (TEXTOBJ SEL) of TEXTOBJ)
                                       (fetch (TEXTOBJ DELETESEL) of TEXTOBJ]
                          (replace (SELECTION SET) of (fetch (TEXTOBJ SEL) of TEXTOBJ) with NIL)

                          (* ;; "Remember to turn off the normal selection, since we'll be moving it to a new spot after the deletion.")

                          (SETQ OSEL (fetch (TEXTOBJ DELETESEL) of TEXTOBJ))
                          (SETQ SELOPERATION 'DELETE)
                          (TEDIT.SET.SEL.LOOKS OSEL 'DELETE)
                          (replace (TEXTOBJ BLUEPENDINGDELETE) of TEXTOBJ with NIL))
                         (T (SETQ OSEL (fetch (TEXTOBJ SEL) of TEXTOBJ))
                            (replace (TEXTOBJ BLUEPENDINGDELETE) of TEXTOBJ with NIL)
                                                             (* ; "Reset the pending-delete flag.")
                            ))
                      (\COPYSEL OSEL GLOBALSEL)
                      (bind (OSELOP _ SELOPERATION)
                         while [OR (SHIFTDOWNP 'SHIFT)
                                   (SHIFTDOWNP 'CTRL)
                                   (SHIFTDOWNP 'META)
                                   (KEYDOWNP 'MOVE)
                                   (KEYDOWNP 'COPY)
                                   (NOT (ZEROP (LOGAND LASTMOUSEBUTTONS 7]
                         do                                  (* ; 
                                                     "Poll the selection & display its current state")
                            [COND
                               ((ZEROP (LOGAND LASTMOUSEBUTTONS 7))
                                                             (* ; 
                                                    "No mouse buttons are down;  don't try anything.")
                                (SETQ OLDX -32000)           (* ; 
         "However, remember that pushing a mouse button is a change of status that we should notice.")
                                )
                               ((KEYDOWNP 'MOVE)             (* ; 
                                               "the MOVE key is down;  mark this selection for MOVE.")
                                (SETQ SELOPERATION 'MOVE))
                               [(OR (SHIFTDOWNP 'SHIFT)
                                    (KEYDOWNP 'COPY))        (* ; 
                                      "the SHIFT key is down;  mark this selection for COPY or MOVE.")
                                (COND
                                   ((SHIFTDOWNP 'CTRL)       (* ; 
                                                "He's holding down both ctrl and shift -- do a move.")
                                    (SETQ SELOPERATION 'MOVE))
                                   (T                        (* ; "Just the SHIFT key.  It's a COPY")
                                      (SETQ SELOPERATION 'COPY]
                               ((SHIFTDOWNP 'META)           (* ; 
                                                    "He's holding the meta key down;  note the fact.")
                                (SETQ SELOPERATION 'COPYLOOKS))
                               ((SHIFTDOWNP 'CTRL)           (* ; 
                                 "He's holding only the CTRL key -- mark the selection for deletion.")
                                (SETQ SELOPERATION 'DELETE))
                               (T                            (* ; 
                                               "No key being held down;  revert to normal selection.")
                                  (SETQ SELOPERATION 'NORMAL]
                            (COND
                               [(AND (OR [NOT (IEQP OLDX (SETQ X (LASTMOUSEX DS]
                                         [NOT (IEQP OLDY (SETQ Y (LASTMOUSEY DS]
                                         (NEQ OSELOP SELOPERATION))
                                     (INSIDEP CLIPREGION X Y))

                                (* ;; "Only do selection if (1) the mouse is inside the window proper and (2) the mouse has moved, or the kind of selection has changed")

                                (* ;; "Must precede the scroll-region test, so that we don't try to scroll while the mouse is inside the main window, even if the scroll bar overlaps the window (at left edge of screen, say)")

                                (SETQ OLDX X)
                                (SETQ OLDY Y)
                                [COND
                                   ((\TEDIT.MOUSESTATE LEFT) (* ; 
                                                             "Left button is character selection")
                                    (SETQ SEL (TEDIT.SELECT X Y TEXTOBJ (fetch (TEXTOBJ MOUSEREGION)
                                                                           of TEXTOBJ)
                                                     NIL SELOPERATION W))
                                    (SETQ EXTENDFLG NIL))
                                   ((\TEDIT.MOUSESTATE MIDDLE)
                                                             (* ; "Middle button is word selection")
                                    (SETQ SEL (TEDIT.SELECT X Y TEXTOBJ (fetch (TEXTOBJ MOUSEREGION)
                                                                           of TEXTOBJ)
                                                     T SELOPERATION W))
                                    (SETQ EXTENDFLG NIL))
                                   [(\TEDIT.MOUSESTATE RIGHT)(* ; "RIght button extends selections")
                                    (COND
                                       ((NEQ SELOPERATION OSELOP)

                                 (* ;; "Things changed since the last selection.  Grab the prior selection info, so that the extension is taken from the selection NOW being made, rather than the last existing old-type selection.")

                                        (\COPYSEL OSEL GLOBALSEL)))
                                    (COND
                                       ((fetch (SELECTION SET) of GLOBALSEL)
                                        (AND TEDIT.EXTEND.PENDING.DELETE (EQ SELOPERATION
                                                                             'NORMAL)
                                             (SETQ SELOPERATION 'PENDINGDEL)
                                             (replace (TEXTOBJ BLUEPENDINGDELETE) of TEXTOBJ
                                                with T))     (* ; 
         "If TeditBluePendingDelete flag is set, then simulate Laurel's blue-pending-delete feature.")
                                        (SETQ SEL (TEDIT.EXTEND.SEL X Y GLOBALSEL TEXTOBJ 
                                                         SELOPERATION W))
                                        (SETQ EXTENDFLG T]
                                   (T                        (* ; 
                          "The mouse buttons are up, leaving us with a pro-tem 'permanent' selection")
                                      (\COPYSEL OSEL GLOBALSEL)
                                                             (* ; 
                         "And SEL is NOT SET ANY LONGER, so it won't get copied into OSEL down below")
                                      (AND SEL (replace (SELECTION SET) of SEL with NIL]
                                [COND
                                   ((AND SEL (fetch (SELECTION SET) of SEL)
                                         SELFN)              (* ; 
                                 "The selection was set, but there's a SELFN that has veto authority")
                                    (COND
                                       ((EQ (APPLY* SELFN TEXTOBJ SEL SELOPERATION 'TENTATIVE)
                                            'DON'T)          (* ; 
                                                "The selfn vetoed this selection, so mark it un-set.")
                                        (replace (SELECTION SET) of SEL with NIL]
                                (COND
                                   ((\TEDIT.SEL.CHANGED? SEL OSEL OSELOP SELOPERATION)
                                                             (* ; 
               "Something interesting about the selection changed.  We have to re-display its image.")
                                    (COND
                                       ((OR (EQ SELOPERATION 'NORMAL)
                                            (EQ SELOPERATION 'PENDINGDEL))
                                                             (* ; 
                          "For a normal selection, set the 'window last selected in' for the TEXTOBJ")
                                        (replace (TEXTOBJ SELWINDOW) of TEXTOBJ with W)))
                                    (SETQ OSEL (\TEDIT.REFRESH.SHOWSEL TEXTOBJ SEL OSEL OSELOP 
                                                      SELOPERATION EXTENDFLG))
                                    (SETQ OSELOP SELOPERATION))
                                   ([AND OSEL (fetch (SELECTION SET) of OSEL)
                                         (EQ (fetch (SELECTION SELKIND) of OSEL)
                                             'VOLATILE)
                                         (OR (NOT SEL)
                                             (NOT (fetch (SELECTION SET) of SEL]

                                 (* ;; "There is an old selection around, but it is VOLATILE -- i.e., it shouldn't last longer than something is pointing at it.  Turn it off.")

                                    (\SHOWSEL OSEL NIL NIL)
                                    (replace (SELECTION SET) of OSEL with NIL]
                               ((IN/SCROLL/BAR? W LASTMOUSEX LASTMOUSEY)
                                                             (* ; 
                                      "If he moves to the scroll bar, let him scroll without trouble")
                                (SCROLL.HANDLER W)))
                            (BLOCK)                          (* ; "Give other processes a chance")
                            (GETMOUSESTATE)                  (* ; "And get the new mouse info")
                            (TEDIT.CURSORMOVEDFN W))
                      (\COPYSEL OSEL GLOBALSEL)
                      (COND
                         ((fetch (SELECTION SET) of OSEL)    (* ; 
                                          "Only if a selection REALLY got made should we do this....")
                          (SELECTQ SELOPERATION
                              (COPY                          (* ; 
             "A COPY selection -- set the copy flag, and see if this is a copy to a non-TEdit window")
                                    (SETQ TEDIT.COPY.PENDING T)
                                    (replace (SELECTION SET) of OSEL with NIL)
                                                             (* ; 
                                                  "And turn off OSEL, to avoid spurious highlighting")
                                    (\TEDIT.FOREIGN.COPY? GLOBALSEL)
                                                             (* ; 
                                 "Maybe copy into the SYSBUF, if the recipient isn't a TEdit window.")
                                    )
                              (COPYLOOKS                     (* ; "A COPYLOOKS selection")
                                         (SETQ TEDIT.COPYLOOKS.PENDING T)
                                                             (* ; 
                                                  "And turn off OSEL, to avoid spurious highlighting")
                                         (replace (SELECTION SET) of OSEL with NIL))
                              (MOVE                          (* ; 
                                 "A MOVE selection -- set the flag to signal the TEdit command loop,")
                                    (SETQ TEDIT.MOVE.PENDING T)
                                                             (* ; 
                                                  "And turn off OSEL, to avoid spurious highlighting")
                                    (replace (SELECTION SET) of OSEL with NIL))
                              (DELETE (SETQ TEDIT.DEL.PENDING T)
                                      (replace (SELECTION SET) of OSEL with NIL)
                                                             (* ; 
                                                  "And turn off OSEL, to avoid spurious highlighting")
                                      )
                              (NORMAL                        (* ; 
                                                   "This is a normal selection;  set the caret looks")
                                      (replace (TEXTOBJ CARETLOOKS) of TEXTOBJ
                                         with (\TEDIT.GET.INSERT.CHARLOOKS TEXTOBJ OSEL)))
                              NIL)))
                      (AND SELFN (APPLY* SELFN TEXTOBJ GLOBALSEL SELOPERATION 'FINAL))
                                                             (* ; 
                               "Give a user exit routine control, perhaps for logging of selections.")
                      (for CARET inside (fetch (TEXTOBJ CARET) of TEXTOBJ)
                         do (OR (fetch TCUP of CARET)
                                (\EDIT.FLIPCARET CARET T))))
                  (AND OSEL (fetch (SELECTION SET) of OSEL)
                       (fetch (SELECTION SELOBJ) of OSEL)
                       (SETQ SELFINALFN (IMAGEOBJPROP (fetch (SELECTION SELOBJ) of OSEL)
                                               'WHENOPERATEDONFN))
                       (APPLY* SELFINALFN (fetch (SELECTION SELOBJ) of OSEL)
                              (WINDOWPROP W 'DSP)
                              'SELECTED OSEL (fetch (TEXTOBJ STREAMHINT) of TEXTOBJ])])

(\TEDIT.WINDOW.OPS
  [LAMBDA (TEXTOBJ WINDOWTOSPLIT)                           (* ; "Edited 12-Oct-2021 15:01 by rmk:")

(* ;;; "Do window operations for TEdit, e.g., splitting a window, moving the split location, or unsplitting.")

    (PROG ([WINDOWOPREGION (create REGION
                                  LEFT _ (DIFFERENCE (fetch (TEXTOBJ WRIGHT) of TEXTOBJ)
                                                \TEDIT.OP.WIDTH)
                                  BOTTOM _ \TEDIT.OP.BOTTOM
                                  WIDTH _ \TEDIT.OP.WIDTH
                                  HEIGHT _ (fetch (REGION HEIGHT) of (WINDOWPROP WINDOWTOSPLIT
                                                                            'REGION]
           Y OPERATION)
          [while [AND (MOUSESTATE (OR LEFT MIDDLE RIGHT))
                      (INSIDE? WINDOWOPREGION (LASTMOUSEX WINDOWTOSPLIT)
                             (SETQ Y (LASTMOUSEY WINDOWTOSPLIT] do 

                                                              (* ;; 
                        "Wait until he lets up on a button, and signal which button was last pushed.")

                                                                   (BLOCK)
                                                                   (COND
                                                                      ((MOUSESTATE MIDDLE)
                                                                       (CURSOR \TEDIT.MAKESPLITCURSOR
                                                                              )
                                                                       (SETQ OPERATION 'SPLIT))
                                                                      ((MOUSESTATE LEFT)
                                                                       (CURSOR \TEDIT.MOVESPLITCURSOR
                                                                              )
                                                                       (SETQ OPERATION 'MOVE))
                                                                      ((MOUSESTATE RIGHT)
                                                                       (CURSOR \TEDIT.UNSPLITCURSOR)
                                                                       (SETQ OPERATION 'UNSPLIT]
          (COND
             ((INSIDE? WINDOWOPREGION (LASTMOUSEX WINDOWTOSPLIT)
                     (SETQ Y (LASTMOUSEY WINDOWTOSPLIT)))
              (CURSOR \TEDIT.SPLITCURSOR)
              (SELECTQ OPERATION
                  (SPLIT                                     (* ; "Splitting the window")
                         (\TEDIT.SPLITW WINDOWTOSPLIT Y))
                  (UNSPLIT                                   (* ; "Rejoining two panes")
                           (\TEDIT.UNSPLITW WINDOWTOSPLIT))
                  (MOVE                                      (* ; 
                                                             "Moving the divider between two panes.")
                        (TEDIT.PROMPTPRINT TEXTOBJ "Split-point moving is not yet implemented" T))
                  (SHOULDNT)))
             (T (CURSOR T])

(\TEDIT.EXPANDFN
  [LAMBDA (W)                                                (* jds " 7-May-85 15:56")
                                                             (* steals back the tty for us when the 
                                                             TEdit window is expanded.)
    (COND
       ((WINDOWPROP W 'PROCESS)                              (* There's a process to go with this 
                                                             edit window. Give it the TTY.)
        (TTY.PROCESS (WINDOWPROP W 'PROCESS])

(\TEDIT.MAINW
  [LAMBDA (TEXTSTREAM)                                       (* ; "Edited  5-Nov-2022 12:21 by rmk")
                                                             (* ; "Edited 30-May-91 23:33 by jds")

    (* ;; "Get the primary/top edit window for this edit session (i.e., the one with the title, and all the props & stuff). Generally it is (CAR PANES) and is not attached to anything else, but we don't want to count on the order or whether an appilcation might attach a primary Tedit window to something else.")

    (LET ((TEXTOBJ (TEXTOBJ TEXTSTREAM))
          PANES)
         (SETQ PANES (fetch (TEXTOBJ \WINDOW) of (TEXTOBJ TEXTSTREAM)))
         (for PANE M inside PANES do (SETQ M (WINDOWPROP PANE 'MAINWINDOW))
                                     (if M
                                         then 

                                           (* ;; "This is attached to something.  If what it is attached to is not one of our panes, then it must be our primary.")

                                              (CL:UNLESS (MEMB M PANES)
                                                     (RETURN M))
                                       else (RETURN PANE])

(\TEDIT.PRIMARYW
  [LAMBDA (TEXTSTREAM)                                       (* ; "Edited 30-May-91 23:33 by jds")

         (* Given an edit session with possibly several PANES on the same document, give 
         me the PRINCIPAL one of them--i.e., the original edit window that has all the 
         back pointers, props &c on it.)

    (PROG ((TEXTOBJ (TEXTOBJ TEXTSTREAM))
           WINDOWS WINDOW)
          (SETQ WINDOWS (fetch (TEXTOBJ \WINDOW) of (TEXTOBJ TEXTSTREAM)))
                                                             (* The edit window (s) associated with 
                                                             this edit session)
          (SETQ WINDOW (COND
                          ((LISTP WINDOWS)

         (* If there are several panes, the first one in the list is the original window)

                           (CAR WINDOWS))
                          (T                                 (* If there's only the one window, 
                                                             that's the guy.)
                             WINDOWS)))
          (RETURN WINDOW])

(\TEDIT.COPYINSERTFN
  [LAMBDA (INSERTIONS WW)                                    (* ; "Edited 30-May-91 23:33 by jds")

         (* Given a string, an imageobj, or a list of any of them, insert it in the tedit 
         window WW.)

    (PROG [[TEXTSTREAM (TEXTSTREAM (WINDOWPROP WW 'MAINWINDOW]
           (SEL (fetch (TEXTOBJ SEL) of (TEXTOBJ (WINDOWPROP WW 'MAINWINDOW]
          (for INSERTION inside INSERTIONS do (COND
                                                 ((STRINGP INSERTION)
                                                  (TEDIT.INSERT TEXTSTREAM INSERTION SEL))
                                                 ((IMAGEOBJP INSERTION)
                                                  (TEDIT.INSERT.OBJECT INSERTION TEXTSTREAM SEL])

(\TEDIT.NEWREGIONFN
  [LAMBDA (FIXEDPOINT MOVINGPOINT WINDOW)                    (* jds "24-FEB-83 17:43")

         (* This function is called whenever a new region for the window is needed.
         It constrains the size of the window so that the menu and/or titles will fit)

    (COND
       ((NULL MOVINGPOINT)                                   (* This is true only the first time 
                                                             the function is called)
        FIXEDPOINT)
       (T (PROG (%#OFMENUITEMS MENUWIDTH XDELTA YDELTA)

         (* The NEWREGIONFNARG can be either a window or a list consisting of the number 
         of items in the menu and the minimum width of the window neede to hold the menu 
         an titles)

                (SETQ XDELTA (IDIFFERENCE (fetch (POSITION XCOORD) of MOVINGPOINT)
                                    (fetch (POSITION XCOORD) of FIXEDPOINT)))
                (SETQ YDELTA (IDIFFERENCE (fetch (POSITION YCOORD) of MOVINGPOINT)
                                    (fetch (POSITION YCOORD) of FIXEDPOINT)))
                [COND
                   [(IGEQ XDELTA 0)
                    (replace (POSITION XCOORD) of MOVINGPOINT with (IPLUS (fetch (POSITION XCOORD)
                                                                             of FIXEDPOINT)
                                                                          (IMAX 32 XDELTA]
                   (T (replace (POSITION XCOORD) of MOVINGPOINT with (IPLUS (fetch (POSITION XCOORD)
                                                                               of FIXEDPOINT)
                                                                            (IMIN -32 XDELTA]
                [COND
                   [(IGEQ YDELTA 0)
                    (replace (POSITION YCOORD) of MOVINGPOINT with (IPLUS (fetch (POSITION YCOORD)
                                                                             of FIXEDPOINT)
                                                                          (IMAX 32 YDELTA]
                   (T (replace (POSITION YCOORD) of MOVINGPOINT with (IPLUS (fetch (POSITION YCOORD)
                                                                               of FIXEDPOINT)
                                                                            (IMIN -32 YDELTA]
                (RETURN MOVINGPOINT])

(\TEDIT.SET.WINDOW.EXTENT
  [LAMBDA (TEXTOBJ WINDOWS)                                  (* ; "Edited 15-Feb-2023 23:41 by rmk")
                                                             (* ; "Edited  3-Nov-2022 23:23 by rmk")
                                                             (* ; "Edited 30-May-91 23:33 by jds")

    (* ;; "Set the window's EXTENT property according to 1st and last char on screen.")

    (CL:UNLESS (TEXTPROP TEXTOBJ 'NOEXTENT)
        (for WINDOW LINES WHEIGHT REGION TOPCHAR BOTCHAR PREVLINE EXTHEIGHT EXTBOT YBOT
             (TEXTLEN _ (fetch (TEXTOBJ TEXTLEN) of TEXTOBJ)) inside WINDOWS when WINDOW
           do (SETQ REGION (DSPCLIPPINGREGION NIL WINDOW))
              (SETQ WHEIGHT (fetch (REGION HEIGHT) of REGION))
              (SETQ LINES (WINDOWPROP WINDOW 'LINES))
              (while (AND LINES (IGEQ (fetch (LINEDESCRIPTOR YBOT) of LINES)
                                      WHEIGHT)) do           (* ; 
                                        "Run thru the lines looking for the first one on the screen.")
                                                   (SETQ LINES (fetch (LINEDESCRIPTOR NEXTLINE)
                                                                  of LINES)))
              (COND
                 (LINES 
                        (* ;; "IF there are lines on the screen, then get the CH# of the start of the first line -- notionally, the CH at the top of the screen.")

                        (SETQ TOPCHAR (fetch (LINEDESCRIPTOR LCHAR1) of LINES)))
                 (T                                          (* ; 
                                "Otherwise, everything is scrolled off the top, so we're at the end.")
                    (SETQ TOPCHAR TEXTLEN)))
              (while (AND LINES (IGEQ (fetch (LINEDESCRIPTOR YBOT) of LINES)
                                      (fetch (TEXTOBJ WBOTTOM) of TEXTOBJ)))
                 do                                          (* ; 
                                                    "Then go looking for the last line on the screen")
                    (SETQ PREVLINE LINES)
                    (SETQ LINES (fetch (LINEDESCRIPTOR NEXTLINE) of LINES)))
              (COND
                 (PREVLINE 

                        (* ;; "There IS a last line on the screen.  Grab its last character as the bottom character on the screen, and set the lowest-Y position to the bottom of that line")

                        (SETQ BOTCHAR (IMIN TEXTLEN (fetch (LINEDESCRIPTOR LCHARLIM) of PREVLINE)))
                        (SETQ YBOT (fetch (LINEDESCRIPTOR YBOT) of PREVLINE)))
                 (T 
                    (* ;; "Everything is off the top of the screen.  Bottom character is also the last char in the document, and the lowest Y we encountered is the top of the edit window.")

                    (SETQ BOTCHAR TEXTLEN)
                    (SETQ YBOT WHEIGHT)))
              [COND
                 ((AND (IEQP BOTCHAR TEXTLEN)
                       (IEQP TOPCHAR TEXTLEN))               (* ; 
                                                      "If we're really at the bottom of the document")
                  (SETQ EXTBOT (SUB1 YBOT))                  (* ; 
                                    "Set up the extent bottom and height fields to account for that.")
                  (SETQ EXTHEIGHT WHEIGHT))
                 (T 
                    (* ;; "Otherwise, set the bottom in proportion to what is left below the bottom of the screen, and the extent height in proportion to how much text appears in the window")

                    [SETQ EXTHEIGHT (FIXR (FQUOTIENT (ITIMES (IDIFFERENCE WHEIGHT YBOT)
                                                            TEXTLEN)
                                                 (IMAX (IDIFFERENCE BOTCHAR TOPCHAR)
                                                       1]
                    (SETQ EXTBOT (IDIFFERENCE YBOT (FIXR (FQUOTIENT (ITIMES (IDIFFERENCE WHEIGHT YBOT
                                                                                   )
                                                                           (IDIFFERENCE TEXTLEN 
                                                                                  BOTCHAR))
                                                                (IMAX (IDIFFERENCE BOTCHAR TOPCHAR)
                                                                      1]
              (WINDOWPROP WINDOW 'EXTENT (create REGION
                                                BOTTOM _ EXTBOT
                                                HEIGHT _ (IMAX 1 EXTHEIGHT)
                                                WIDTH _ (fetch (REGION WIDTH) of REGION)
                                                LEFT _ 0))))])

(\TEDIT.SHRINK.ICONCREATE
  [LAMBDA (W ICON ICON-POSITION)                             (* ; "Edited 25-Apr-88 23:53 by jds")

    (* ;; "Create the icon that represents this window.")

    [PROG [(ICON (WINDOWPROP W 'ICON))
           (ICONTITLE (WINDOWPROP W 'TEDIT.ICON.TITLE))
           (SHRINKFN (WINDOWPROP W 'SHRINKFN]
          (COND
             ((NOT (WINDOWPROP W 'TEXTOBJ))                  (* ; 
                                      "This isn't really a TEdit window any more.  Don't do anything")
              NIL)
             ((WINDOWPROP W 'TEDITMENU)                      (* ; 
                                                    "This is a text menu, and shrinks without trace.")
              NIL)
             ((OR (IGREATERP (FLENGTH SHRINKFN)
                         3)
                  (AND (NOT (FMEMB 'SHRINKATTACHEDWINDOWS SHRINKFN))
                       (IGREATERP (FLENGTH SHRINKFN)
                              2)))                           (* ; 
                               "There are other functions that expect to handle this.  Don't bother.")
              NIL)
             ((OR [AND ICONTITLE (EQUAL ICONTITLE (TEXTSTREAM.TITLE (TEXTSTREAM W]
                  (AND (NOT ICONTITLE)
                       ICON))

              (* ;; 
        "we built this and the title is the same, or he has already put an icon on this.  Do nothing")

              NIL)
             (ICON 
                   (* ;; "There's an existing icon window;  change the title in it")

                   [WINDOWPROP W 'TEDIT.ICON.TITLE (SETQ ICONTITLE (TEXTSTREAM.TITLE (TEXTSTREAM
                                                                                      W]
                   (ICONTITLE ICONTITLE NIL NIL ICON))
             (T                                              (* ; "install a new icon")
                [WINDOWPROP W 'TEDIT.ICON.TITLE (SETQ ICONTITLE (TEXTSTREAM.TITLE (TEXTSTREAM W]
                (WINDOWPROP W 'ICON (TITLEDICONW TEDIT.TITLED.ICON.TEMPLATE ICONTITLE TEDIT.ICON.FONT
                                           ICON-POSITION T NIL 'FILE]
    (WINDOWPROP W 'ICON])

(\TEDIT.SHRINKFN
  [LAMBDA (W ICON ICONW)                                     (* jds "14-Dec-84 08:56")
                                                             (* hands off the tty to the exec 
                                                             process)
    (COND
       ((AND (EQ (WINDOWPROP W 'PROCESS)
                 (TTY.PROCESS)))
        (TTY.PROCESS T)

         (* per bvm, this means "Hand the TTY to some other process" %.
         It tries EXEC first; if that's not found, it hands it to MOUSE.)

        ])

(\TEDIT.SPLITW
  [LAMBDA (WINDOW Y)                                         (* ; "Edited  5-Nov-2022 23:51 by rmk")
                                                             (* ; "Edited 30-May-91 23:38 by jds")

    (* ;; "SPLIT WINDOW W AT W-RELATIVE Y into 2 %"panes%" that can scroll independently.")

    (PROG* ((WREG (WINDOWPROP WINDOW 'REGION))
            (TEXTOBJ (WINDOWPROP WINDOW 'TEXTOBJ))
            (PANES (COPY (fetch (TEXTOBJ \WINDOW) of TEXTOBJ)))
            (NEXTPANE (fetch (TEXTWINDOW NEXTPANE) of WINDOW))
            ATTACHEDWINDOWS NEWW OLDW OTITLE OLDCARET NEWCARET)
           (SETQ Y (OR Y (LASTMOUSEY WINDOW)))               (* ; "Get the Y-position where we're to make the split--it's either supplied or we use the mouse's Y position.")
           (CL:WHEN NEXTPANE                                 (* ; 
                                "If there's already a pane below this one, detach it for the moment.")
               (DETACHWINDOW NEXTPANE))
           (SHAPEW WINDOW (create REGION using WREG BOTTOM _ (IPLUS (fetch BOTTOM of WREG)
                                                                    Y)
                                               HEIGHT _ (IDIFFERENCE (fetch HEIGHT of WREG)
                                                               Y)))
                                                             (* ; 
                                            "Reshape the original window to form the upper %"pane%".")

     (* ;; "Attach the new window, without disturbing the pre-existing attached windows")

           (SETQ ATTACHEDWINDOWS (WINDOWPROP WINDOW 'ATTACHEDWINDOWS NIL))
           (ATTACHWINDOW (SETQ NEWW (CREATEW (create REGION using WREG HEIGHT _ Y)
                                           NIL NIL NIL))
                  WINDOW
                  'BOTTOM
                  'JUSTIFY
                  'MAIN)                                     (* ; "and attach a lower %"pane%".")
           [WINDOWPROP WINDOW 'ATTACHEDWINDOWS (APPEND ATTACHEDWINDOWS (WINDOWPROP WINDOW
                                                                              'ATTACHEDWINDOWS]

     (* ;; "[end of attached-window hackery to prevent disturbance]")

           (WINDOWPROP NEWW 'TEDITCREATED T)
           (DSPFONT (fetch (CHARLOOKS CLFONT) of (fetch (TEXTOBJ CARETLOOKS) of TEXTOBJ))
                  NEWW)                                      (* ; 
                           "Set the font on the display stream to be the current one from CARETLOOKS")
           (SETQ OLDW (fetch (TEXTOBJ \WINDOW) of TEXTOBJ))
           (SETQ OTITLE (\TEDIT.WINDOW.TITLE TEXTOBJ))
           (SETQ OLDCARET (fetch (TEXTOBJ CARET) of TEXTOBJ))
           (SETQ NEWCARET (create TEDITCARET
                                 TCCARETDS _ (WINDOWPROP NEWW 'DSP)
                                 TCFORCEUP _ T))
           (replace (TEXTOBJ CARET) of TEXTOBJ with (CL:IF (LISTP OLDCARET)
                                                        (NCONC1 OLDCARET NEWCARET)
                                                        (LIST OLDCARET NEWCARET)))
           (for SEL in (LIST (fetch (TEXTOBJ SEL) of TEXTOBJ)
                             (fetch (TEXTOBJ SCRATCHSEL) of TEXTOBJ)
                             (fetch (TEXTOBJ MOVESEL) of TEXTOBJ)
                             (fetch (TEXTOBJ SHIFTEDSEL) of TEXTOBJ)
                             (fetch (TEXTOBJ DELETESEL) of TEXTOBJ))
              do (change (fetch (SELECTION L1) of SEL)
                        (NCONC1 DATUM NIL))
                 (change (fetch (SELECTION LN) of SEL)
                        (NCONC1 DATUM NIL)))
           (\TEDIT.WINDOW.SETUP NEWW TEXTOBJ (fetch (TEXTOBJ STREAMHINT) of TEXTOBJ)
                  (APPEND '(NOTITLE T PROMPTWINDOW DON'T)
                         (fetch (TEXTOBJ EDITPROPS) of TEXTOBJ))
                  WINDOW)
           [for CARET in (fetch (TEXTOBJ CARET) of TEXTOBJ) as PANE in (fetch (TEXTOBJ \WINDOW)
                                                                          of TEXTOBJ)
              do (replace TCCARETDS of CARET with (WINDOWPROP PANE 'DSP]
           (replace (TEXTOBJ WINDOWTITLE) of TEXTOBJ with OTITLE)
           (WINDOWPROP NEWW 'PROCESS (WINDOWPROP WINDOW 'PROCESS))
           (replace (TEXTWINDOW NEXTPANE) of WINDOW with NEWW)
                                                             (* ; 
                                                     "Tell the main window about its new lower pane.")
           (CL:WHEN NEXTPANE                                 (* ; 
                          "There was already a pane below this one. Attach it to the new lower pane.")
               (ATTACHWINDOW NEXTPANE NEWW 'BOTTOM 'JUSTIFY 'MAIN)
                                                             (* ; 
                                                  "Tell the lower pane about its lower, lower pane..")
               (replace (TEXTWINDOW NEXTPANE) of NEWW with NEXTPANE))])

(\TEDIT.UNSPLITW
  [LAMBDA (PANE)                                             (* ; "Edited  6-Nov-2022 00:06 by rmk")
    (PROG* ((TEXTOBJ (WINDOWPROP PANE 'TEXTOBJ))
            (PANES (fetch (TEXTOBJ \WINDOW) of TEXTOBJ))
            (PRIMARYPANE (\TEDIT.MAINW PANE))
            (SEL (fetch (TEXTOBJ SEL) of TEXTOBJ))
            (SCRATCHSEL (fetch (TEXTOBJ SCRATCHSEL) of TEXTOBJ))
            PRIORPANE NEXTPANE)
           (CL:WHEN (EQ PANE PRIMARYPANE)                    (* ; "")
               (TEDIT.PROMPTPRINT TEXTOBJ "Can't UNSPLIT the main window." T)
               (RETURN))
           [SETQ PRIORPANE (find P in PANES suchthat (EQ PANE (fetch (TEXTWINDOW NEXTPANE)
                                                                 of P]
           (SETQ NEXTPANE (fetch (TEXTWINDOW NEXTPANE) of PANE))
           (\TEDIT.SHOWSELS TEXTOBJ NIL NIL)                 (* ; 
                                                            "Turn off selections during the unsplit.")
           (replace (TEXTOBJ SELWINDOW) of TEXTOBJ with PRIMARYPANE)
           (for P in PANES as CARET in (fetch (TEXTOBJ CARET) of TEXTOBJ) as LINE
              in (fetch (TEXTOBJ LINES) of TEXTOBJ) when (EQ PANE P)
              do (change (fetch (TEXTOBJ CARET) of TEXTOBJ)
                        (DREMOVE CARET DATUM))
                 (change (fetch (TEXTOBJ LINES) of TEXTOBJ)
                        (DREMOVE LINE DATUM))
                 (RETURN))

     (* ;; "Same logic, can't combine because DWIM says too many concurrent loops")

           (for P in PANES as SL1 in (fetch (SELECTION L1) of SEL) as SLN
              in (fetch (SELECTION LN) of SEL) as SCL1 in (fetch (SELECTION L1) of SCRATCHSEL)
              as SCLN in (fetch (SELECTION LN) of SCRATCHSEL) when (EQ PANE P)
              do (change (fetch (SELECTION L1) of SEL)
                        (DREMOVE SL1 DATUM))
                 (change (fetch (SELECTION LN) of SEL)
                        (DREMOVE SLN DATUM))
                 (change (fetch (SELECTION L1) of SCRATCHSEL)
                        (DREMOVE SCL1 DATUM))
                 (change (fetch (SELECTION LN) of SCRATCHSEL)
                        (DREMOVE SCLN DATUM))
                 (RETURN))
           (replace (TEXTOBJ \WINDOW) of TEXTOBJ with (DREMOVE PANE PANES))
           (replace (TEXTWINDOW NEXTPANE) of PANE with NIL)
           (TEDIT.DEACTIVATE.WINDOW PANE T T)
           (\FIXSEL (fetch (TEXTOBJ SEL) of TEXTOBJ)
                  TEXTOBJ)

     (* ;; "Done with the TEDIT stuff. ")

     (* ;; 
     "Now rearrange the pane window-attachment linkages. This gives PANE's region to its prior pane.")

           (DETACHWINDOW PANE)
           (replace (TEXTWINDOW NEXTPANE) of PRIORPANE with NEXTPANE)
           [SHAPEW PRIORPANE (UNIONREGIONS (WINDOWPROP PANE 'REGION)
                                    (WINDOWPROP PRIORPANE 'REGION]
           (CL:WHEN NEXTPANE

               (* ;; 
     "PANE had a yet lower pane attached to it.  Promote it to PANE's position in the NEXTPANE chain")

               (DETACHWINDOW NEXTPANE)
               (ATTACHWINDOW NEXTPANE PRIORPANE 'BOTTOM 'JUSTIFY 'MAIN))
           (CLOSEW PANE)
           (\TEDIT.SHOWSELS TEXTOBJ NIL T])

(\TEDIT.WINDOW.SETUP
  [LAMBDA (WINDOW TEXTOBJ TEXTSTREAM PROPS AFTERWINDOW)      (* ; "Edited  5-Nov-2022 23:13 by rmk")
                                                             (* ; "Edited 11-Jun-99 15:48 by rmk:")
                                                             (* ; "Edited 30-May-91 23:34 by jds")

    (* ;; "Set up the window and TEXTOBJ so they correspond, and the window is a TEDIT window.")

    (CL:UNLESS WINDOW (\ILLEGAL.ARG WINDOW))
    (PROG (TEDITPROMPTWINDOW)
          (TEDIT.WINDOW.SETUP WINDOW TEXTOBJ TEXTSTREAM PROPS AFTERWINDOW)

     (* ;; "Do the general-purpose window setting up--the kind that every user will want.")

     (* ;; "Then do the stuff that a TEdit session needs as well.")

          (WINDOWADDPROP WINDOW 'RESHAPEFN (FUNCTION \TEDIT.RESHAPEFN))
          (WINDOWADDPROP WINDOW 'NEWREGIONFN (FUNCTION \TEDIT.NEWREGIONFN))
          (OR (WINDOWPROP WINDOW 'SCROLLFN)
              (WINDOWPROP WINDOW 'SCROLLFN (FUNCTION \TEDIT.SCROLLFN)))
          (WINDOWPROP WINDOW 'REPAINTFN (FUNCTION \TEDIT.REPAINTFN))
          (CL:UNLESS (WINDOWPROP WINDOW 'TEDIT.TITLEMENUFN)
              (WINDOWPROP WINDOW 'TEDIT.TITLEMENUFN (OR (LISTGET PROPS 'TITLEMENUFN)
                                                        (FUNCTION TEDIT.DEFAULT.MENUFN))))
                                                             (* ; 
                      "Only put our menu function on the window if the originator didn't supply one.")
          (WINDOWADDPROP WINDOW 'CLOSEFN (FUNCTION TEDIT.DEACTIVATE.WINDOW)
                 T)                                          (* ; 
                                                             "To clean up when the window is closed")
          (WINDOWPROP WINDOW 'WINDOWENTRYFN (FUNCTION \TEDIT.PROCIDLEFN))
                                                             (* ; 
                                           "For grabbing the TTY when the mouse clicks in the window")
          (CL:UNLESS (WINDOWPROP WINDOW 'ICONFN)
              (WINDOWPROP WINDOW 'ICONFN (FUNCTION \TEDIT.SHRINK.ICONCREATE)))
                                                             (* ; 
                                            "Only set up to create a shrink icon if nobody else has.")
          (WINDOWADDPROP WINDOW 'SHRINKFN (FUNCTION \TEDIT.SHRINKFN))
                                                             (* ; 
                                           "But always give up control of the keyboard on shrinking.")
          (WINDOWADDPROP WINDOW 'EXPANDFN (FUNCTION \TEDIT.EXPANDFN))
                                                             (* ; "And grab it back on expansion")
          (WINDOWPROP WINDOW 'TEDIT.CURSORREGION (LIST 0 0 0 0))
          [WINDOWPROP WINDOW 'HARDCOPYFILEFN (FUNCTION (LAMBDA (W EXT)
                                                         (LET [(STRM (FETCH (TEXTOBJ TXTFILE)
                                                                        OF (TEXTOBJ W]
                                                              (CL:WHEN STRM
                                                                  (PACKFILENAME 'VERSION NIL
                                                                         'EXTENSION
                                                                         (OR EXT 'IMAGEFILE)
                                                                         'BODY
                                                                         (FULLNAME STRM)))]
                                                             (* ; "Used by CursorMovedFn")
          (CL:UNLESS AFTERWINDOW                             (* ; "We aren't splitting windows.")
              (\TEDIT.WINDOW.TITLE TEXTOBJ (\TEDIT.ORIGINAL.WINDOW.TITLE WINDOW (fetch (TEXTOBJ
                                                                                        \DIRTY)
                                                                                   of TEXTOBJ)))
              (CL:UNLESS (OR (EQ 'DON'T (LISTGET PROPS 'PROMPTWINDOW))
                             (LISTGET PROPS 'READONLY)
                             (replace (TEXTOBJ PROMPTWINDOW) of TEXTOBJ with (LISTGET PROPS
                                                                                    'PROMPTWINDOW))
                             (fetch (TEXTOBJ MENUFLG) of TEXTOBJ))
                                                             (* ; 
                                             "The window is read-write, so give it a feedback region")
                  (SETQ TEDITPROMPTWINDOW (GETPROMPTWINDOW WINDOW (OR (LISTGET PROPS 
                                                                             'PROMPTWINDOWHEIGHT)
                                                                      TEDIT.PROMPTWINDOW.HEIGHT 1)
                                                 TEDIT.PROMPT.FONT))
                  (replace (TEXTOBJ PROMPTWINDOW) of TEXTOBJ with TEDITPROMPTWINDOW)
                  (WINDOWPROP TEDITPROMPTWINDOW 'TEDIT.PROMPTWINDOW T)
                                                             (* ; 
                                           "And remember that this is a TEdit-supplied prompt window")
                  (WINDOWPROP TEDITPROMPTWINDOW 'PAGEFULLFN (FUNCTION \TEDIT.PROMPT.PAGEFULLFN))))])

(\SAFE.FIRST
  [LAMBDA (LIST.OR.ATOM)                                     (* ; "Edited 26-Apr-91 13:00 by jds")
                                                             (* ; 
        "gives the first element whether the arg is a list or an atom.  Should be a macro eventually")
    (COND
       ((LISTP LIST.OR.ATOM)
        (CAR LIST.OR.ATOM))
       (T LIST.OR.ATOM])
)

(RPAQ? \TEDIT.OP.WIDTH 12)

(RPAQ? \TEDIT.OP.BOTTOM 12)
(DECLARE%: DONTEVAL@LOAD DOCOPY 
(DECLARE%: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS \TEDIT.OP.WIDTH \TEDIT.OP.BOTTOM)
)
)
(RPAQ BXCARET (CURSORCREATE (QUOTE #*(16 16)@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@A@@@CH@@CH@@FL@@FL@@LF@@
) (QUOTE NIL) 3 4))
(RPAQ BXHICARET (CURSORCREATE (QUOTE #*(16 16)A@@@A@@@A@@@A@@@A@@@A@@@A@@@A@@@CH@@GL@@FL@@LF@@HB@@@@@@@@@@@@@@
) (QUOTE NIL) 4 7))
(RPAQ TEDIT.LINECURSOR (CURSORCREATE (QUOTE #*(16 16)@@@A@@@C@@@G@@@O@@AO@@CO@@GO@@@O@@AK@@AI@@C@@@C@@@F@@@F@@@L@@@L@
) (QUOTE NIL) 15 15))
(RPAQ \TEDIT.SPLITCURSOR (CURSORCREATE (QUOTE #*(16 16)@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@OO@@HA@@HA@@HA@@HA@@HA@@HA@@OO@@
) (QUOTE NIL) 4 4))
(RPAQ \TEDIT.MOVESPLITCURSOR (CURSORCREATE (QUOTE #*(16 16)@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@OO@@HA@@HA@@OO@@OO@@HA@@HA@@OO@@
) (QUOTE NIL) 4 4))
(RPAQ \TEDIT.UNSPLITCURSOR (CURSORCREATE (QUOTE #*(16 16)@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@OO@@HA@@JE@@II@@II@@JE@@HA@@OO@@
) (QUOTE NIL) 4 4))
(RPAQ \TEDIT.MAKESPLITCURSOR (CURSORCREATE (QUOTE #*(16 16)@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@OO@@HA@@HA@@MK@@MK@@HA@@HA@@OO@@
) (QUOTE NIL) 4 4))

(RPAQ? TEDIT.DEFAULT.WINDOW NIL)
(DECLARE%: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS TEDIT.DEFAULT.WINDOW)
)



(* ; "User-level %"is this a TEdit window?%" function.")

(DEFINEQ

(TEDITWINDOWP
  [LAMBDA (WINDOW)                                           (* ; "Edited 16-Jan-89 10:28 by jds")

    (* ;; "Returns non-NIL if WINDOW is a legal TEdit window:  I.e., if it has a TEXTOBJ property, and the TEXTOBJ thinks this is its window.")

    (COND
       ((WINDOWP WINDOW))
       ((DISPLAYSTREAMP WINDOW)
        (SETQ WINDOW (WFROMDS WINDOW)))
       (T (SETQ WINDOW NIL)))
    (LET* [(CHECKED-WINDOW (COND
                              ((WINDOWP WINDOW)
                               WINDOW)
                              ((DISPLAYSTREAMP WINDOW)
                               (WFROMDS WINDOW))
                              (T NIL)))
           (TEXTOBJ (AND CHECKED-WINDOW (WINDOWPROP CHECKED-WINDOW 'TEXTOBJ]
          (AND (type? TEXTOBJ TEXTOBJ)
               (MEMBER CHECKED-WINDOW (fetch (TEXTOBJ \WINDOW) of TEXTOBJ))
               T])
)



(* ; "User-typein support")

(DEFINEQ

(TEDIT.GETINPUT
  [LAMBDA (STREAM PROMPTSTRING DEFAULTSTRING DELIMITER.LIST) (* ; "Edited 21-Jan-2022 23:14 by rmk")
                                                             (* ; "Edited 30-May-91 23:34 by jds")

    (* ;; "Ask for input (file names, &c) for TEdit, perhaps with a default.")

    (PROG* ((TEXTOBJ (TEXTOBJ STREAM))
            (TPROMPT (fetch (TEXTOBJ PROMPTWINDOW) of TEXTOBJ)))
           (SETQ TPROMPT (SELECTQ TPROMPT
                             (DON'T [COND
                                       ((TEXTPROP TEXTOBJ 'PWINDOW.ON.DEMAND)
                                        (GETPROMPTWINDOW (\TEDIT.MAINW STREAM])
                             (NIL [GETPROMPTWINDOW (\TEDIT.MAINW STREAM)
                                         NIL NIL (NOT (TEXTPROP TEXTOBJ 'PWINDOW.ON.DEMAND])
                             TPROMPT))
           (COND
              (TPROMPT                                       (* ; 
                                                       "If it's our own promptwindow, just clear it.")
                     (CLEARW TPROMPT))
              (T                                             (* ; 
                                              "If it's the system's window, just move to a new line.")
                 (FRESHLINE PROMPTWINDOW)))
           (RETURN (PROG1 (TTYINPROMPTFORWORD PROMPTSTRING DEFAULTSTRING NIL (OR TPROMPT PROMPTWINDOW
                                                                                 )
                                 NIL
                                 'TTY
                                 (OR DELIMITER.LIST (CHARCODE (EOL LF TAB ESCAPE)))
                                 NIL)                        (* ; "Get what the guy wants to tell us")
                       (WINDOWPROP (OR TPROMPT PROMPTWINDOW)
                              'PROCESS NIL)                  (* ; 
                             "Now detach the prompt window from its process, to avoid a circularity.")
                       )])

(\TEDIT.MAKEFILENAME
  [LAMBDA (STRING)

    (* ;; "Edited 24-Oct-2022 00:02 by rmk:  Originally returned an atom, which is no longer a valid filename.")
                                                             (* jds " 8-Feb-85 11:25")

    (* ;; "Takes a string, removes leading and trailing spaces, and converts it to an ATOM.")

    (LET ((FIRSTNONSPACE (STRPOSL '(% )
                                STRING NIL T))
          (LASTNONSPACE (STRPOSL '(% )
                               STRING NIL T T)))
         (CL:WHEN (AND FIRSTNONSPACE LASTNONSPACE)
                (SUBSTRING STRING FIRSTNONSPACE LASTNONSPACE])
)



(* ; "Attached Prompt window support.")

(DEFINEQ

(TEDIT.PROMPTPRINT
  [LAMBDA (TEXTSTREAM MSG CLEAR?)                            (* ; 
                                                        "Edited  4-Jun-93 12:04 by sybalsky:mv:envos")

    (* ;; "Print a message in the editor's prompt window (if none, use the global promptwindow).  Optionally clear the window first.")

    (PROG (WINDOW PWINDOW (TEXTOBJ (AND TEXTSTREAM (TEXTOBJ TEXTSTREAM)))
                 MAINTEXTOBJ)
          (COND
             [(AND TEXTOBJ (fetch (TEXTOBJ MENUFLG) of TEXTOBJ))
                                                             (* ; 
                 "There is a known textobj, and it's a menu.  Go use the main editor's promptwindow.")
              (SETQ MAINTEXTOBJ (WINDOWPROP (\TEDIT.MAINW TEXTOBJ)
                                       'TEXTOBJ))            (* ; 
                           "Find the TEXTOBJ for the main edit window, and use ITS prompting window.")
              (SETQ WINDOW (AND MAINTEXTOBJ (fetch (TEXTOBJ PROMPTWINDOW) of MAINTEXTOBJ]
             (TEXTOBJ (SETQ WINDOW (fetch (TEXTOBJ PROMPTWINDOW) of TEXTOBJ))
                                                             (* ; 
                                        "There IS an editor window to get to;  use its prompt window")
                    ))
          [SETQ WINDOW (CAR (NLSETQ (SELECTQ WINDOW
                                        (DON'T [COND
                                                  ((TEXTPROP TEXTOBJ 'PWINDOW.ON.DEMAND)
                                                   (GETPROMPTWINDOW (\TEDIT.MAINW STREAM])
                                        (NIL [AND TEXTSTREAM (GETPROMPTWINDOW
                                                              (\TEDIT.MAINW TEXTSTREAM)
                                                              NIL NIL (NOT (TEXTPROP TEXTOBJ
                                                                                  'PWINDOW.ON.DEMAND])
                                        WINDOW]              (* ; 
                                              "Try to find an editor's prompt window for our message")
          (COND
             (WINDOW                                         (* ; 
                                                      "We found a window to use.  Print the message.")

                    (* ;; "WAS (RESETLST (RESETSAVE (TTYDISPLAYSTREAM WINDOW)) (COND (CLEAR? (CLEARW WINDOW))) (PRIN1 MSG WINDOW))")

                    (COND
                       ((AND CLEAR? (WINDOWP WINDOW))
                        (CLEARW WINDOW)))
                    (PRIN1 MSG WINDOW))
             (T                                              (* ; 
                                                             "Failing all else, use PROMPTWINDOW.")
                (FRESHLINE PROMPTWINDOW)
                (printout PROMPTWINDOW MSG])

(TEDIT.PROMPTFLASH
  [LAMBDA (TEXTSTREAM)                                       (* ; "Edited 30-May-91 23:34 by jds")
                                                             (* Flash the TEdit prompt window, or 
                                                             the global promptwindow, if TEdit has 
                                                             none.)
    (PROG (WINDOW PWINDOW (TEXTOBJ (TEXTOBJ TEXTSTREAM))
                 MAINTEXTOBJ)
          (COND
             [(AND TEXTOBJ (fetch (TEXTOBJ MENUFLG) of TEXTOBJ))

         (* There is a known textobj, and it's a menu.
         Go use the main editor's promptwindow.)

              (SETQ MAINTEXTOBJ (WINDOWPROP (\TEDIT.MAINW TEXTOBJ)
                                       'TEXTOBJ))            (* Find the TEXTOBJ for the main edit 
                                                             window, and use ITS prompting window.)
              (SETQ WINDOW (AND MAINTEXTOBJ (fetch (TEXTOBJ PROMPTWINDOW) of MAINTEXTOBJ]
             ((AND TEXTOBJ (SETQ WINDOW (fetch (TEXTOBJ PROMPTWINDOW) of TEXTOBJ)))
                                                             (* There IS an editor window to get 
                                                             to; use its prompt window)
              )
             ((SETQ WINDOW (GETPROMPTWINDOW (\TEDIT.MAINW TEXTSTREAM)
                                  NIL NIL T))                (* Failing that, try any prompt window 
                                                             attached to the edit window.)
              ))                                             (* Try to find an editor's prompt 
                                                             window for our message)
          (FLASHWINDOW (OR WINDOW PROMPTWINDOW)
                 2])

(\TEDIT.PROMPT.PAGEFULLFN
  [LAMBDA (PROMPT-DISPLAY-STREAM)                            (* ; "Edited 18-Nov-87 14:44 by jds")

    (* ;; "Given a TEdit promptwindow, expand it to be a line taller--called when a message overflows the window.")

    (LET* [(PROMPT-WINDOW (WFROMDS PROMPT-DISPLAY-STREAM))
           (%#LINES (ADD1 (OR (WINDOWPROP PROMPT-WINDOW 'TEDIT.NLINES)
                              1)))
           (OLDREGION (WINDOWPROP PROMPT-WINDOW 'REGION))
           (OLDTOP (fetch (REGION TOP) of OLDREGION))
           (OLDBOTTOM (fetch (REGION BOTTOM) of OLDREGION))
           (MAINWINDOW (WINDOWPROP PROMPT-WINDOW 'MAINWINDOW))
           (ATTACHEDMENUS (REMOVE PROMPT-WINDOW (ATTACHEDWINDOWS MAINWINDOW]
          (GETPROMPTWINDOW MAINWINDOW %#LINES)               (* ; "Get the new window")
          (SETQ \CURRENTDISPLAYLINE (CL:1- %#LINES))         (* ; "Set this so the page-full code will fire again at the end of THIS line, rather than waiting for another screen-ful.  There ought to be an interface to this.")
          [SETQ NEWTOP (fetch (REGION TOP) of (WINDOWPROP PROMPT-WINDOW 'REGION]
          [for WINDOW in (REVERSE ATTACHEDMENUS) when (>= (fetch (REGION BOTTOM)
                                                             of (WINDOWPROP WINDOW 'REGION))
                                                          OLDBOTTOM)
             do (RELMOVEW WINDOW (CREATEPOSITION 0 (IDIFFERENCE NEWTOP OLDTOP]
          (WINDOWPROP PROMPT-WINDOW 'TEDIT.NLINES %#LINES])
)

(RPAQ? TEDIT.PROMPT.FONT (FONTCREATE 'TERMINAL 10))

(RPAQ? TEDIT.PROMPTWINDOW.HEIGHT NIL)
(DECLARE%: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS TEDIT.PROMPT.FONT TEDIT.PROMPTWINDOW.HEIGHT)
)



(* ; "Title creation and update")

(DEFINEQ

(TEXTSTREAM.TITLE
  [LAMBDA (STREAM)                                          (* ; "Edited 24-Aug-2021 23:25 by rmk:")

    (* ;; "returns a string with which you can talk to the user about this stream")

    (PROG ((TEXTOBJ (TEXTOBJ STREAM))
           TXTFILE)
          (SETQ TXTFILE (fetch (TEXTOBJ TXTFILE) of TEXTOBJ))
          (RETURN (OR (CL:TYPECASE TXTFILE
                          (STRINGP TXTFILE)
                          (STREAM (fetch (STREAM FULLNAME) of TXTFILE))
                          (LITATOM TXTFILE)
                          (T TXTFILE))
                      ""])

(\TEDIT.ORIGINAL.WINDOW.TITLE
  [LAMBDA (FILE DIRTY? PROPS)                               (* ; "Edited 27-Oct-2021 12:25 by rmk:")
                                                            (* ; "Edited 24-Aug-2021 23:25 by rmk:")

    (* ;; "Given a file name, derive a title for the TEdit window that is editing it.  RMK: Title may be provided in a property")

    (LET (TITLE)
         [SETQ TITLE (COND
                        ((LISTGET PROPS 'TITLE))
                        ((NULL FILE)                         (* ; 
                                            "Just calling (TEDIT) should give a 'Text Editor Window'")
                         "Text Editor Window")
                        ((AND (STRINGP FILE)
                              (ZEROP (NCHARS FILE)))         (* ; "So should editing an empty string")
                         "Text Editor Window")
                        ((WINDOWP FILE)                      (* ; 
                                                "if \TEDIT.WINDOW.SETUP has assigned a title, use it")
                         (OR (WINDOWPROP FILE 'TITLE)
                             "Text Editor Window"))
                        (T                                   (* ; 
                                  "Strings use the string itself, otherwise grab the full file name.")
                           (CONCAT "Edit Window for:  " (CL:TYPECASE FILE
                                                            (STRINGP FILE)
                                                            (STREAM (fetch (STREAM FULLNAME)
                                                                       of FILE))
                                                            (LITATOM FILE)
                                                            (T FILE))]
         (COND
            (DIRTY? (CONCAT "* " TITLE))
            (T TITLE])

(\TEDIT.WINDOW.TITLE
  [LAMBDA (TEXTSTREAM NEW.TITLE)                             (* ; "Edited 24-Oct-2022 13:14 by rmk")
                                                             (* jds "23-May-85 15:20")
    (LET ((TEXTOBJ (TEXTOBJ TEXTSTREAM))
          W)
         (CL:WHEN (AND (SETQ W (\TEDIT.PRIMARYW TEXTOBJ))
                       (NOT (TEXTPROP TEXTOBJ 'NOTITLE))
                       (WINDOWPROP W 'TEDITCREATED))         (* ; 
                "Only change the title if there IS a window, and it isn't suppressing title changes.")
             [COND
                (NEW.TITLE (WINDOWPROP W 'TITLE NEW.TITLE))
                (T (WINDOWPROP W 'TITLE])])

(\TEXTSTREAM.FILENAME
  [LAMBDA (TEXTSTREAM)                                       (* ; "Edited 30-May-91 23:34 by jds")

    (* ;; "returns the name of the file associated with this stream if there is one.  NIL otherwise.  Version numbers suppressed")

    (PROG ((TEXTOBJ (TEXTOBJ TEXTSTREAM))
           OFILE)
          [COND
             ((type? STREAM (fetch (TEXTOBJ TXTFILE) of TEXTOBJ))
              (SETQ OFILE (PACKFILENAME 'VERSION NIL 'BODY (fetch FULLFILENAME (fetch (TEXTOBJ 
                                                                                             TXTFILE)
                                                                                  of TEXTOBJ]
          (RETURN OFILE])
)



(* ; "Screen updating utilities")

(DEFINEQ

(TEDIT.DEACTIVATE.WINDOW
  [LAMBDA (W FORCEFLG DISCONNECTONLYFLG)                     (* ; "Edited  9-Mar-2023 15:12 by rmk")
                                                             (* ; "Edited  5-Nov-2022 23:29 by rmk")
                                                            (* ; "Edited 16-Oct-2021 18:51 by rmk:")

    (* ;; "Deactivate the various button fns for this window")

    (PROG ((TEXTOBJ (fetch (TEXTWINDOW WTEXTOBJ) of W)))     (* ; 
                             "Can't be a call to TEXTOBJ, since window may NOT have a textobj on it.")
          (CL:UNLESS TEXTOBJ                                 (* ; 
                                                       "Not an editing window, don't even need DON'T")
              (RETURN))

     (* ;; "Always return DON'T If we don't close the window.  if we did quit, the window is closed already, and will be reopened to reclose it.")

          (CL:WHEN (fetch (TEXTOBJ EDITOPACTIVE) of TEXTOBJ)

              (* ;; "If something is going on, DON'T CLOSE THE WINDOW")

              (TEDIT.PROMPTPRINT TEXTOBJ "Not closed; edit operation in progress" T)
              (RETURN 'DON'T))
          (CL:WHEN (AND (PROCESSP (WINDOWPROP W 'PROCESS))
                        (NOT (fetch (TEXTOBJ TXTREADONLY) of TEXTOBJ))
                        (NOT FORCEFLG))
              (CL:UNLESS (\TEDIT.QUIT W T)

                  (* ;; "This is an un-quit TEdit window.  Try to QUIT out of TEdit.")

                  (RETURN 'DON'T)))
          (CL:UNLESS DISCONNECTONLYFLG
              (replace (TEXTOBJ EDITFINISHEDFLG) of TEXTOBJ with T))
          (CL:WHEN [OR FORCEFLG (fetch (TEXTOBJ TXTREADONLY) of TEXTOBJ)
                       (NOT (PROCESSP (WINDOWPROP W 'PROCESS](* ; 
                                     "Only do this if it's a TEdit window, and has been QUIT out of.")
              (CL:WHEN (AND (fetch (TEXTOBJ PROMPTWINDOW) of TEXTOBJ)
                            (OPENWP (fetch (TEXTOBJ PROMPTWINDOW) of TEXTOBJ)))
                  (CLEARW (fetch (TEXTOBJ PROMPTWINDOW) of TEXTOBJ)))
              (\SHOWSEL (fetch (TEXTOBJ SEL) of TEXTOBJ)
                     NIL NIL)                                (* ; 
        "Before the window is closed, make SURE that the caret is down, or the window will reappear.")
              (CL:WHEN (AND (\TEDIT.WINDOW.TITLE TEXTOBJ)
                            (OPENWP (fetch (TEXTOBJ PROMPTWINDOW) of TEXTOBJ))
                            (OPENWP W)
                            (NOT DISCONNECTONLYFLG)
                            (EQ W (\TEDIT.MAINW TEXTOBJ)))   (* ; 
                                               "Reset the window's title to a known 'inactive' value")
                  (\TEDIT.WINDOW.TITLE TEXTOBJ "Edit Window [Inactive]"))
              (CL:UNLESS DISCONNECTONLYFLG
                  (for PANE in (REVERSE (CDR (fetch (TEXTOBJ \WINDOW) of TEXTOBJ)))
                     do 
                        (* ;; "Run thru any split-off sub-panes, and reattach them, so we get a whole window back before the end of the world. Presumably we run through backwards because it looks better if the windows close from the bottom up.")

                        (\TEDIT.UNSPLITW PANE))
                  (replace (TEXTOBJ \WINDOW) of TEXTOBJ with NIL)
                  (CL:WHEN (type? STREAM (fetch (TEXTOBJ TXTFILE) of TEXTOBJ))
                                                             (* ; 
                                                       "Close the file that this window was open on.")
                      (CL:UNLESS (fetch (TEXTWINDOW CLOSINGFILE) of W)
                          (replace (TEXTWINDOW CLOSINGFILE) of W with T)
                          (CLOSEF? (fetch (TEXTOBJ TXTFILE) of TEXTOBJ)))))
              (replace (TEXTWINDOW CLOSINGFILE) of W with NIL)
              (replace (TEXTWINDOW WTEXTOBJ) of W with NIL)  (* ; 
                                                    "Detach the edit data structures from the window")
              (replace (TEXTWINDOW WTEXTSTREAM) of W with NIL)
              (replace (TEXTWINDOW WLINES) of W with NIL)
              (WINDOWPROP W 'PROCESS.EXITFN NIL)
              (WINDOWPROP W 'PROCESS.IDLEFN NIL)
              (WINDOWPROP W 'CURSOROUTFN NIL)
              (WINDOWPROP W 'CURSORMOVEDFN NIL)
              (WINDOWPROP W 'BUTTONEVENTFN 'TOTOPW)          (* ; "And the button functions")
              (WINDOWPROP W 'RIGHTBUTTONFN 'DOWINDOWCOM)
              (WINDOWDELPROP W 'CLOSEFN 'TEDIT.DEACTIVATE.WINDOW)
              (WINDOWPROP W 'SCROLLFN NIL)
              (WINDOWDELPROP W 'RESHAPEFN '\EDITRESHAPEFN)
              (CL:UNLESS [OR DISCONNECTONLYFLG (NOT (WINDOWPROP W 'PROCESS]
                                                             (* ; "Restore any disarmed interrupts.")
                  (\TEDIT.INTERRUPT.SETUP (WINDOWPROP W 'PROCESS)
                         T))
              (for MENUW in (ATTACHEDWINDOWS W) when (AND (WINDOWPROP MENUW 'TEDITMENU)
                                                          (WINDOWPROP MENUW 'TEXTOBJ))
                 do                                          (* ; "Detach all the TEDITMENU windows.")
                    (replace (TEXTOBJ EDITFINISHEDFLG) of (TEXTOBJ MENUW) with T) 
                                                             (* ; "Mark it finished")
                    (WINDOWPROP MENUW 'TEDITMENU NIL)        (* ; 
                                                             "And mark it no longer a menu window")
                    (GIVE.TTY.PROCESS MENUW)                 (* ; 
                                                           "Then give it a chance to kill itself off")
                    (DISMISS 300))
              (CL:UNLESS DISCONNECTONLYFLG
                  (GIVE.TTY.PROCESS W)
                  (DISMISS 300))
              [replace (TEXTOBJ \WINDOW) of TEXTOBJ with (CL:WHEN (LISTP (fetch (TEXTOBJ \WINDOW)
                                                                            of TEXTOBJ))
                                                             (* ; "It's a list;  remove this pane")
                                                             (DREMOVE W (fetch (TEXTOBJ \WINDOW)
                                                                           of TEXTOBJ)))])])

(\TEDIT.REPAINTFN
  [LAMBDA (W)                                                (* ; "Edited 25-Feb-2023 14:03 by rmk")
                                                             (* ; "Edited 24-Feb-2023 00:16 by rmk")
                                                             (* ; "Edited 15-Feb-2023 23:40 by rmk")
                                                             (* ; "Edited 14-Sep-2022 11:15 by rmk")
                                                             (* ; "Edited 30-May-91 23:34 by jds")

    (* ;; "Will eventually do the right thing w/r/t text margins.  For now, it's a place holder.")

    (PROG [(TEXTOBJ (WINDOWPROP W 'TEXTOBJ]
          (CL:UNLESS TEXTOBJ (RETURN))
          (\SHOWSEL (fetch (TEXTOBJ SEL) of TEXTOBJ)
                 NIL NIL)                                    (* ; 
                                                       "Turn off the selection while we make changes")
          (for LINE (WHEIGHT _ (fetch PTOP of (DSPCLIPPINGREGION NIL W)))
             inlines (fetch (TEXTWINDOW WLINES) of W) when (ILESSP (fetch (LINEDESCRIPTOR YBOT)
                                                                      of LINE)
                                                                  WHEIGHT)
             do (\DISPLAYLINE TEXTOBJ LINE W)                (* ; 
                                                   "Display the starting line, then fill  the window")
                (\FILLWINDOW (fetch (LINEDESCRIPTOR YBOT) of LINE)
                       LINE TEXTOBJ W)
                (RETURN))
          (\FIXSEL (fetch (TEXTOBJ SEL) of TEXTOBJ)
                 TEXTOBJ)                                    (* ; 
                                                    "Account for any line shuffling and re-highlight")
          (\SHOWSEL (fetch (TEXTOBJ SEL) of TEXTOBJ)
                 NIL T])

(\TEDIT.RESHAPEFN
  [LAMBDA (W BITS OLDREGION)                                 (* ; "Edited 24-Feb-2023 00:17 by rmk")
                                                             (* ; "Edited 15-Feb-2023 23:39 by rmk")
                                                             (* ; "Edited 30-May-91 23:34 by jds")

    (* ;; "Will eventually do the right thing w/r/t text margins.  For now, it's a place holder.")

    (PROG ((TEXTOBJ (WINDOWPROP W 'TEXTOBJ))
           (TEXTSTREAM (WINDOWPROP W 'TEXTSTREAM))
           (NEWWHEIGHT (fetch HEIGHT of (DSPCLIPPINGREGION NIL W)))
           (NEWWWIDTH (fetch WIDTH of (DSPCLIPPINGREGION NIL W)))
           (NEWLEFT 0)
           (NEWBOTTOM 0)
           (CH# 0)
           WHEIGHT FIRSTCH# LINES LINE WWIDTH)
          (OR TEXTOBJ (RETURN))                              (* ; 
                                               "If this window has no TEXTOBJ on it yet, just leave.")
          (\SHOWSEL (fetch (TEXTOBJ SEL) of TEXTOBJ)
                 NIL NIL)                                    (* ; 
                                                       "Turn off the selection while we make changes")
          (SETQ WHEIGHT (fetch HEIGHT of OLDREGION))         (* ; "Old window height")
          (replace (TEXTOBJ WTOP) of TEXTOBJ with NEWWHEIGHT)(* ; 
                                                             "Save new height/width for later use")
          (replace (TEXTOBJ WRIGHT) of TEXTOBJ with NEWWWIDTH)
          (replace (TEXTOBJ WBOTTOM) of TEXTOBJ with NEWBOTTOM)
          (replace (TEXTOBJ WLEFT) of TEXTOBJ with NEWLEFT)
          (OR (SETQ LINES (WINDOWPROP W 'LINES))
              (RETURN))                                      (* ; 
                                                      "If no text has been displayed yet, just leave")
          (SETQ LINE LINES)
          (while LINE do 
                         (* ;; "Now hunt for the first line that had been visible, so we can find the CH# that has to appear at the top of the window.")

                         (COND
                            ((ILESSP (fetch (LINEDESCRIPTOR YBOT) of LINE)
                                    WHEIGHT)                 (* ; "This line was visible")
                             (SETQ FIRSTCH# (fetch (LINEDESCRIPTOR LCHAR1) of LINE))
                                                             (* ; "Note its first character #")
                             (RETURN))
                            (T (replace (LINEDESCRIPTOR YBOT) of LINE with NEWWHEIGHT)))
                         (SETQ LINE (fetch (LINEDESCRIPTOR NEXTLINE) of LINE)))
          (AND FIRSTCH# (SETQ LINE (\TEDIT.FIND.FIRST.LINE TEXTOBJ NEWWHEIGHT FIRSTCH# W)))
          (COND
             (LINE                                           (* ; 
                                 "You can only do this if there IS text on the screen to start with.")
                   (COND
                      ((NEQ LINE LINES)
                       (replace (LINEDESCRIPTOR NEXTLINE) of LINES with LINE)
                       (replace (LINEDESCRIPTOR PREVLINE) of LINE with LINES)))
                                                             (* ; 
                                                           "Forget the old chain of line descriptors")
                   (replace (LINEDESCRIPTOR YBOT) of LINE with (IDIFFERENCE NEWWHEIGHT
                                                                      (fetch (LINEDESCRIPTOR LHEIGHT)
                                                                         of LINE)))
                                                             (* ; 
                                                    "Fix the line to appear at the top of the window")
                   (replace (LINEDESCRIPTOR YBASE) of LINE with (IPLUS (fetch (LINEDESCRIPTOR YBOT)
                                                                          of LINE)
                                                                       (fetch (LINEDESCRIPTOR DESCENT
                                                                                     ) of LINE)))
                   (\DISPLAYLINE TEXTOBJ LINE W)             (* ; "Actually display it")
                   (\FILLWINDOW (fetch (LINEDESCRIPTOR YBOT) of LINE)
                          LINE TEXTOBJ W)                    (* ; 
                                             "Fill out the window with more lines, to fill or to EOF")
                   ))
          (\FIXSEL (fetch (TEXTOBJ SEL) of TEXTOBJ)
                 TEXTOBJ)                                    (* ; 
                                             "Fix up the selection to account for the line shuffling")
          (\SHOWSEL (fetch (TEXTOBJ SEL) of TEXTOBJ)
                 NIL T)                                      (* ; "And highlight it")
      ])

(\TEDIT.SCROLLFN
  [LAMBDA (W DX DY)

    (* ;; "Edited 24-Feb-2023 00:16 by rmk")

    (* ;; "Edited 21-Feb-2023 16:47 by rmk")

    (* ;; "Edited 15-Feb-2023 23:42 by rmk")

    (* ;; "Edited  5-Sep-2022 23:30 by rmk")

    (* ;; 
 "Edited 18-Feb-2022 14:53 by rmk: Repaint after scrolling for windows that are partially off-screen")

    (* ;; "Edited 19-Sep-2021 23:10 by rmk:")
                                                             (* ; 
                                                             "Handle scrolling of the edit window")
    (TOTOPW W)
    (PROG* (WHEIGHT (TEXTOBJ (WINDOWPROP W 'TEXTOBJ))
                  SELWASON SHIFTEDSELWASON MOVESELWASON DELETESELWASON (WREG (DSPCLIPPINGREGION
                                                                              NIL W))
                  LINES TRUEY WWIDTH SEL PREVLINE (PRESCROLLFN (TEXTPROP TEXTOBJ 'PRESCROLLFN))
                  (POSTSCROLLFN (TEXTPROP TEXTOBJ 'POSTSCROLLFN))
                  TEXTLEN THEIGHT TOPLINE RHEIGHT LOWESTY YBOT LINE CH#)
           (COND
              ((ZEROP (SETQ TEXTLEN (fetch (TEXTOBJ TEXTLEN) of TEXTOBJ)))
                                                             (* ; "Don't scroll a zero-length file")
               (RETURN))
              ((fetch (TEXTOBJ EDITOPACTIVE) of TEXTOBJ)     (* ; 
                                             "Don't scroll while something interesting is happening!")
               (TEDIT.PROMPTPRINT TEXTOBJ "Edit operation in progress." T)
               (RETURN)))                                    (* ; "Displaystream for the window")
           (SETQ WHEIGHT (fetch HEIGHT of WREG))             (* ; "Height of the window")
           (SETQ LOWESTY WHEIGHT)                            (* ; 
                                                             "Lowest Y of a line-bottom yet seet")
           (SETQ WWIDTH (fetch WIDTH of WREG))               (* ; "Width of the window")
           (SETQ LINES (WINDOWPROP W 'LINES))                (* ; "List of formatted lines")
           (CL:WHEN PRESCROLLFN (DOUSERFNS PRESCROLLFN W))   (* ; 
                                                        "If there's a pre-scroll fn, execute it now.")
           (COND
              ((fetch (SELECTION SET) of (SETQ SEL (fetch (TEXTOBJ SEL) of TEXTOBJ)))
                                                             (* ; 
                                                          "Turn off the selection during the scroll.")
               (SETQ SELWASON (fetch (SELECTION ONFLG) of SEL))
               (\SHOWSEL SEL NIL NIL)))
           (SETQ SHIFTEDSELWASON (fetch (SELECTION ONFLG) of (fetch (TEXTOBJ SHIFTEDSEL) of TEXTOBJ))
            )
           (\SHOWSEL (fetch (TEXTOBJ SHIFTEDSEL) of TEXTOBJ)
                  NIL NIL)
           (SETQ MOVESELWASON (fetch (SELECTION ONFLG) of (fetch (TEXTOBJ MOVESEL) of TEXTOBJ)))
           (\SHOWSEL (fetch (TEXTOBJ MOVESEL) of TEXTOBJ)
                  NIL NIL)
           (SETQ DELETESELWASON (fetch (SELECTION ONFLG) of (fetch (TEXTOBJ DELETESEL) of TEXTOBJ)))
           (\SHOWSEL (fetch (TEXTOBJ DELETESEL) of TEXTOBJ)
                  NIL NIL)
           (COND
              [(AND (FIXP DY)
                    (NOT (ZEROP DY)))                        (* ; "Regular up/down scrolling")
               (SETQ TRUEY (IDIFFERENCE WHEIGHT (IABS DY)))
               (COND
                  [(ILESSP 0 DY)                             (* ; "Scroll text up")
                   (SETQ LINE LINES)
                   (while (AND LINE (IGEQ (fetch (LINEDESCRIPTOR YBOT) of LINE)
                                          WHEIGHT)) do (SETQ LINE (fetch (LINEDESCRIPTOR NEXTLINE)
                                                                     of LINE)))
                   (first (CL:WHEN (AND LINE (ILESSP (fetch (LINEDESCRIPTOR YBOT) of LINE)
                                                    TRUEY))  (* ; 
                                                          "Make sure we scroll up at least one line.")
                              (replace (LINEDESCRIPTOR YBASE) of LINE
                                 with (IPLUS (fetch (LINEDESCRIPTOR DESCENT) of LINE)
                                             (replace (LINEDESCRIPTOR YBOT) of LINE with WHEIGHT)))
                              (SETQ LINE (fetch (LINEDESCRIPTOR NEXTLINE) of LINE))) while LINE
                      until (ILESSP (fetch (LINEDESCRIPTOR YBOT) of LINE)
                                   TRUEY) do                 (* ; 
                                        "Find the line whose top is to move to the top of the window")
                                             (replace (LINEDESCRIPTOR YBASE) of LINE
                                                with (IPLUS (fetch (LINEDESCRIPTOR DESCENT)
                                                               of LINE)
                                                            (replace (LINEDESCRIPTOR YBOT)
                                                               of LINE with WHEIGHT)))
                                             (SETQ PREVLINE LINE)
                                             (SETQ LINE (fetch (LINEDESCRIPTOR NEXTLINE) of LINE)))
                   (CL:WHEN LINE                             (* ; "There is a line to go to the top")
                       (SETQ RHEIGHT (IPLUS (fetch (LINEDESCRIPTOR YBASE) of LINE)
                                            (fetch (LINEDESCRIPTOR ASCENT) of LINE)))
                                                             (* ; 
                                                       "Find the Ypos of the top of the line's image")
                       (BITBLT W 0 0 W 0 (IDIFFERENCE WHEIGHT RHEIGHT)
                              WWIDTH RHEIGHT 'INPUT 'REPLACE)
                       (BITBLT NIL 0 0 W 0 0 WWIDTH (IDIFFERENCE WHEIGHT RHEIGHT)
                              'TEXTURE
                              'REPLACE WHITESHADE)
                       [bind NL (PL _ PREVLINE) for I from 1 to 50 while PL
                          do                                 (* ; 
                                          "Let him keep 50 lines above what he can see on the screen")
                             (SETQ PL (fetch (LINEDESCRIPTOR PREVLINE) of PL))
                          finally (CL:WHEN (AND PL (NEQ PL LINES))
                                                             (* ; 
     "There were more than 50 lines (and we aren't pointing at the root), so lop the spare ones off.")
                                      (SETQ NL (fetch (LINEDESCRIPTOR NEXTLINE) of LINES))
                                      (UNINTERRUPTABLY
                                          (replace (LINEDESCRIPTOR NEXTLINE) of LINES with PL)
                                          (replace (LINEDESCRIPTOR PREVLINE) of PL with LINES))
                                      (bind NNL while (AND NL (NEQ NL PL))
                                         do (SETQ NNL NL)
                                            (SETQ NL (fetch (LINEDESCRIPTOR NEXTLINE) of NL))
                                            (replace (LINEDESCRIPTOR NEXTLINE) of NNL with NIL)))]
                       (while (AND LINE (IGEQ (fetch (LINEDESCRIPTOR YBOT) of LINE)
                                              (fetch BOTTOM of WREG)))
                          do                                 (* ; "Update the bottom and baseline")
                             (replace (LINEDESCRIPTOR YBOT) of LINE with (IPLUS (fetch (
                                                                                       LINEDESCRIPTOR
                                                                                        YBOT)
                                                                                   of LINE)
                                                                                (IDIFFERENCE WHEIGHT
                                                                                       RHEIGHT)))
                             (replace (LINEDESCRIPTOR YBASE) of LINE
                                with (IPLUS (fetch (LINEDESCRIPTOR YBOT) of LINE)
                                            (fetch (LINEDESCRIPTOR DESCENT) of LINE)))
                             (SETQ PREVLINE LINE)
                             (SETQ LINE (fetch (LINEDESCRIPTOR NEXTLINE) of LINE))))
                   (COND
                      ((AND LINE (IGEQ (fetch (LINEDESCRIPTOR YBOT) of LINE)
                                       (fetch BOTTOM of WREG)))
                                                             (* ; "Fill the rest of the window")
                       (\FILLWINDOW (fetch (LINEDESCRIPTOR YBOT) of LINE)
                              LINE TEXTOBJ W))
                      (PREVLINE (\FILLWINDOW (fetch (LINEDESCRIPTOR YBOT) of PREVLINE)
                                       PREVLINE TEXTOBJ W]
                  (T                                         (* ; 
                                           "Scroll text down in window, adding lines at top to fill.")
                     (SETQ PREVLINE (SETQ TOPLINE LINES))    (* ; "Find the top line on the screen:")
                     (while TOPLINE until (ILESSP (fetch (LINEDESCRIPTOR YBOT) of TOPLINE)
                                                 WHEIGHT) do (* ; 
            "Run thru the lines, until we hit the first one that is below the top of the edit window")
                                                             (SETQ PREVLINE TOPLINE)
                                                             (SETQ TOPLINE (fetch (LINEDESCRIPTOR
                                                                                   NEXTLINE)
                                                                              of TOPLINE)))
                     (CL:WHEN (AND (EQ PREVLINE LINES)
                                   (OR (NOT (fetch (LINEDESCRIPTOR NEXTLINE) of PREVLINE))
                                       (IGREATERP (fetch (LINEDESCRIPTOR LCHAR1)
                                                     of (fetch (LINEDESCRIPTOR NEXTLINE) of PREVLINE)
                                                         )
                                              1)))           (* ; 
              "There's nothing between us and start of file that's formatted;  start by making some.")
                         (SETQ PREVLINE (\BACKFORMAT LINES TEXTOBJ WHEIGHT)))
                     (SETQ THEIGHT 0)

                     (* ;; "Accumulates the heights of the lines we've backed over.  When this exceeds the scrolling distance, we've found the line.")

                     (bind (FIRSTTIME _ T) while (OR FIRSTTIME (AND (ILESSP THEIGHT (IABS DY))
                                                                    (IGEQ (fetch (LINEDESCRIPTOR
                                                                                  LCHAR1)
                                                                             of PREVLINE)
                                                                          1)))
                        do 
                           (* ;; "Starting with PREVLINE, accumulate LHEIGHTs until we hit top of text or have accumulated enough lines to fill the screen")

                           (add THEIGHT (fetch (LINEDESCRIPTOR LHEIGHT) of PREVLINE))
                           (SETQ PREVLINE (fetch (LINEDESCRIPTOR PREVLINE) of PREVLINE))
                           [COND
                              ((OR (NOT PREVLINE)
                                   (ILESSP (fetch (LINEDESCRIPTOR LCHAR1) of PREVLINE)
                                          1))                (* ; 
                                       "We need to format some lines above where we are -- go do it.")
                               (SETQ PREVLINE (\BACKFORMAT LINES TEXTOBJ WHEIGHT]
                           (SETQ FIRSTTIME NIL))
                     [COND
                        ([OR (EQ TOPLINE (fetch (LINEDESCRIPTOR NEXTLINE) of PREVLINE))
                             (EQ TOPLINE (fetch (LINEDESCRIPTOR NEXTLINE) of (fetch (LINEDESCRIPTOR
                                                                                     NEXTLINE)
                                                                                of PREVLINE]
                                                             (* ; 
  "Always move at least one line backward.  So if we're about to move no lines, force a single line.")
                         )
                        ((ILESSP (IABS DY)
                                THEIGHT)                     (* ; 
                                        "BACK UP ONE LINE TO GET TO THE ONE WHICH PUSHED US OVER TOP")
                         (SETQ PREVLINE (fetch (LINEDESCRIPTOR NEXTLINE) of PREVLINE))
                         (SETQ THEIGHT (IDIFFERENCE THEIGHT (fetch (LINEDESCRIPTOR LHEIGHT)
                                                               of PREVLINE]
                     (CL:UNLESS (EQ TOPLINE (fetch (LINEDESCRIPTOR NEXTLINE) of PREVLINE))
                         (SETQ PREVLINE (fetch (LINEDESCRIPTOR NEXTLINE) of PREVLINE)))
                                                             (* ; 
                                                           "Move to the first line to be formatted.-")
                     (BITBLT W 0 THEIGHT W 0 0 WWIDTH (IDIFFERENCE WHEIGHT THEIGHT)
                            'INPUT
                            'REPLACE)
                     (BITBLT NIL 0 0 W 0 (IDIFFERENCE WHEIGHT THEIGHT)
                            WWIDTH THEIGHT 'TEXTURE 'REPLACE WHITESHADE)
                     (bind (LINE _ TOPLINE) while LINE
                        do (COND
                              ((IGEQ (fetch (LINEDESCRIPTOR YBOT) of LINE)
                                     (IPLUS (fetch BOTTOM of WREG)
                                            THEIGHT))        (* ; 
                                                "This line will be on screen.  Adjust its YBOT/YBASE")
                               (replace (LINEDESCRIPTOR YBOT) of LINE
                                  with (IDIFFERENCE (fetch (LINEDESCRIPTOR YBOT) of LINE)
                                              THEIGHT))
                               (replace (LINEDESCRIPTOR YBASE) of LINE
                                  with (IDIFFERENCE (fetch (LINEDESCRIPTOR YBASE) of LINE)
                                              THEIGHT))
                               (SETQ LOWESTY (fetch (LINEDESCRIPTOR YBOT) of LINE)))
                              (T (replace (LINEDESCRIPTOR YBOT) of LINE
                                    with (SUB1 (fetch BOTTOM of WREG)))
                                 (replace (LINEDESCRIPTOR NEXTLINE) of (fetch (LINEDESCRIPTOR 
                                                                                     PREVLINE)
                                                                          of LINE) with NIL)
                                 (SETQ LINE (fetch (LINEDESCRIPTOR PREVLINE) of LINE))
                                 (RETURN)))
                           (SETQ LINE (fetch (LINEDESCRIPTOR NEXTLINE) of LINE)) 
                                                             (* ; "Clear anything below us"))
                     (BITBLT NIL 0 0 W 0 (fetch BOTTOM of WREG)
                            WWIDTH
                            (IDIFFERENCE LOWESTY (fetch BOTTOM of WREG))
                            'TEXTURE
                            'REPLACE WHITESHADE)
                     (SETQ YBOT WHEIGHT)
                     (while (AND PREVLINE (NEQ PREVLINE TOPLINE))
                        do 
                           (* ;; "Move down lines to be added, adjusting YBOT/YBASE and DISPALYLINE-ing them, until the next line to do EQ TOPLINE")

                           [replace (LINEDESCRIPTOR YBOT) of PREVLINE
                              with (COND
                                      [(AND (fetch (LINEDESCRIPTOR PREVLINE) of PREVLINE)
                                            (IGREATERP (fetch (LINEDESCRIPTOR LCHAR1) of PREVLINE)
                                                   0)
                                            (fetch (FMTSPEC FMTBASETOBASE) of (fetch (LINEDESCRIPTOR
                                                                                      LFMTSPEC)
                                                                                 of PREVLINE)))
                                       (SETQ YBOT (IDIFFERENCE (IPLUS YBOT (fetch (LINEDESCRIPTOR
                                                                                   DESCENT)
                                                                              of (fetch (
                                                                                       LINEDESCRIPTOR
                                                                                         PREVLINE)
                                                                                    of PREVLINE)))
                                                         (IPLUS (fetch (FMTSPEC FMTBASETOBASE)
                                                                   of (fetch (LINEDESCRIPTOR LFMTSPEC
                                                                                    ) of PREVLINE))
                                                                (fetch (LINEDESCRIPTOR DESCENT)
                                                                   of PREVLINE]
                                      (T (SETQ YBOT (IDIFFERENCE YBOT (fetch (LINEDESCRIPTOR LHEIGHT)
                                                                         of PREVLINE]
                           (replace (LINEDESCRIPTOR YBASE) of PREVLINE
                              with (IPLUS (fetch (LINEDESCRIPTOR YBOT) of PREVLINE)
                                          (fetch (LINEDESCRIPTOR DESCENT) of PREVLINE)))
                           (\DISPLAYLINE TEXTOBJ PREVLINE W)
                           (SETQ PREVLINE (fetch (LINEDESCRIPTOR NEXTLINE) of PREVLINE]
              ((FLOATP DY)                                   (* ; "Do a thumbing-type scroll")
               (SETQ CH# (IMAX (IMIN (SUB1 TEXTLEN)
                                     (FIXR (FTIMES TEXTLEN DY)))
                               1))
               (SETQ LINE (fetch (LINEDESCRIPTOR NEXTLINE) of LINES))
               (while (AND LINE (ILESSP (fetch (LINEDESCRIPTOR LCHARLIM) of LINE)
                                       CH#)) do (SETQ LINE (fetch (LINEDESCRIPTOR NEXTLINE)
                                                              of LINE))
                  finally (CL:WHEN (AND LINE (IGREATERP (fetch (LINEDESCRIPTOR LCHAR1) of LINE)
                                                    CH#))
                                 (SETQ LINE NIL)))           (* ; 
                                  "find out if any line currently formatted includes the target char")
               (COND
                  ((AND LINE (fetch (LINEDESCRIPTOR NEXTLINE) of LINE)
                        (IGEQ (fetch (LINEDESCRIPTOR LCHAR1) of LINE)
                              1))                            (* ; 
                "If so, let's do this as a fast scroll, rather than a complete repaint of the screen")
                   [SETQ DY (COND
                               [(ILEQ WHEIGHT (fetch (LINEDESCRIPTOR YBOT) of LINE))
                                                             (* ; 
                                                             "this line is off the top of the window")
                                (IMINUS (for (DESCENDLINE _ (fetch (LINEDESCRIPTOR NEXTLINE)
                                                               of LINE))
                                           by (fetch (LINEDESCRIPTOR NEXTLINE) of DESCENDLINE)
                                           while (AND DESCENDLINE (ILEQ WHEIGHT (fetch (
                                                                                       LINEDESCRIPTOR
                                                                                        YBOT)
                                                                                   of DESCENDLINE)))
                                           sum               (* ; 
              "sum the heights of all the lines in between the new top line and the present top line")
                                               (fetch (LINEDESCRIPTOR LHEIGHT) of DESCENDLINE]
                               (T (IDIFFERENCE (IDIFFERENCE WHEIGHT (fetch (LINEDESCRIPTOR YBOT)
                                                                       of LINE))
                                         (fetch (LINEDESCRIPTOR LHEIGHT) of LINE]
                   (\TEDIT.SCROLLFN W 0 DY)

                   (* ;; "recurse telling to normally scroll instead of thumb scroll so that the screen is not blanked and reformatted unnecessarily")

                   )
                  (T [for LINE inside (fetch (SELECTION L1) of SEL) when LINE
                        do (replace (LINEDESCRIPTOR YBOT) of LINE with (SUB1 (fetch BOTTOM
                                                                                of WREG]
                                                             (* ; 
                                        "Make sure it thinks the old selection is off-screen for now")
                     [for LINE inside (fetch (SELECTION LN) of SEL) when LINE
                        do (replace (LINEDESCRIPTOR YBOT) of LINE with (SUB1 (fetch BOTTOM
                                                                                of WREG]
                     (BITBLT NIL 0 0 W 0 (fetch BOTTOM of WREG)
                            WWIDTH
                            (IDIFFERENCE WHEIGHT (fetch BOTTOM of WREG))
                            'TEXTURE
                            'REPLACE WHITESHADE)
                     (SETQ LINE (\TEDIT.FIND.FIRST.LINE TEXTOBJ WHEIGHT CH# W))
                                                             (* ; 
                                                            "Find the first line to go in the window")
                     (replace (LINEDESCRIPTOR YBOT) of LINE with (IDIFFERENCE WHEIGHT
                                                                        (fetch (LINEDESCRIPTOR 
                                                                                      LHEIGHT)
                                                                           of LINE)))
                                                             (* ; "Set it up as the top line.")
                     (replace (LINEDESCRIPTOR YBASE) of LINE with (IPLUS (fetch (LINEDESCRIPTOR
                                                                                 YBOT) of LINE)
                                                                         (fetch (LINEDESCRIPTOR
                                                                                 DESCENT)
                                                                            of LINE)))
                     (\DISPLAYLINE TEXTOBJ LINE W)
                     (\FILLWINDOW (fetch (LINEDESCRIPTOR YBOT) of LINE)
                            LINE TEXTOBJ W)))                (* ; 
                                                             "And fill out the window from there.")
               ))
           (CL:WHEN POSTSCROLLFN (DOUSERFNS POSTSCROLLFN W)) (* ; "For user subsystem cleanup")
           (CL:WHEN (fetch (SELECTION SET) of SEL)
               (\FIXSEL SEL TEXTOBJ)
               (CL:WHEN SELWASON (\SHOWSEL SEL NIL T)))
           (CL:WHEN (fetch (SELECTION SET) of (fetch (TEXTOBJ SHIFTEDSEL) of TEXTOBJ))
               (\FIXSEL (fetch (TEXTOBJ SHIFTEDSEL) of TEXTOBJ)
                      TEXTOBJ)
               (CL:WHEN SHIFTEDSELWASON
                   (\SHOWSEL (fetch (TEXTOBJ SHIFTEDSEL) of TEXTOBJ)
                          NIL T)))
           (CL:WHEN (fetch (SELECTION SET) of (fetch (TEXTOBJ MOVESEL) of TEXTOBJ))
               (\FIXSEL (fetch (TEXTOBJ MOVESEL) of TEXTOBJ)
                      TEXTOBJ)
               (CL:WHEN MOVESELWASON
                   (\SHOWSEL (fetch (TEXTOBJ MOVESEL) of TEXTOBJ)
                          NIL T)))
           (CL:WHEN (fetch (SELECTION SET) of (fetch (TEXTOBJ DELETESEL) of TEXTOBJ))
               (\FIXSEL (fetch (TEXTOBJ DELETESEL) of TEXTOBJ)
                      TEXTOBJ)
               (CL:WHEN DELETESELWASON
                   (\SHOWSEL (fetch (TEXTOBJ DELETESEL) of TEXTOBJ)
                          NIL T)))
           (\TEDIT.SET.WINDOW.EXTENT TEXTOBJ W))

    (* ;; "rmk: This makes scrolling for partially off-screen window work properly.")

    (CL:UNLESS (LET [(WREG (WINDOWPROP W 'REGION]
                    (AND (IGEQ (FETCH (REGION BOTTOM) OF WREG)
                               0)
                         (IGEQ (FETCH (REGION LEFT) OF WREG)
                               0)
                         (ILEQ (FETCH (REGION PTOP) OF WREG)
                               SCREENHEIGHT)
                         (ILEQ (FETCH (REGION PRIGHT) OF WREG)
                               SCREENWIDTH)))
           (\TEDIT.REPAINTFN W))
    NIL])
)



(* ; "Process-world interfaces")

(DEFINEQ

(\TEDIT.PROCIDLEFN
  [LAMBDA (WINDOW)                                           (* ; "Edited 30-May-91 23:35 by jds")

         (* TEDIT's PROC.IDLEFN for regaining control.
         If the shift key is down, we're not trying to restart this window, just to copy 
         from it.)

    (GETMOUSESTATE)
    (COND
       [[AND (INSIDE? (DSPCLIPPINGREGION NIL WINDOW)
                    (LASTMOUSEX WINDOW)
                    (LASTMOUSEY WINDOW))
             [NOT (OR (SHIFTDOWNP 'SHIFT)
                      (SHIFTDOWNP 'META)
                      (KEYDOWNP 'MOVE)
                      (KEYDOWNP 'COPY]
             (PROCESSP (WINDOWPROP WINDOW 'PROCESS]          (* No SHIFT key down;
                                                             let's regain control.)
        (TTY.PROCESS (WINDOWPROP WINDOW 'PROCESS))
        (COND
           ((fetch (TEXTOBJ MENUFLG) of (WINDOWPROP (WHICHW)
                                               'TEXTOBJ))    (* This is a MENU --
                                                             always select.)
            (\TEDIT.BUTTONEVENTFN WINDOW]
       (T                                                    (* Otherwise, let him select.)
          (\TEDIT.BUTTONEVENTFN WINDOW])

(\TEDIT.PROCENTRYFN
  [LAMBDA (NEWPROCESS OLDPROCESS)                            (* jds "15-Feb-84 16:59")
                                                             (* TEDIT's PROCESS.ENTRYFN, which 
                                                             disarms any dangerous interrupts 
                                                             within the editing world)
    (\TEDIT.INTERRUPT.SETUP NEWPROCESS])

(\TEDIT.PROCEXITFN
  [LAMBDA (THISP NEWP)                                       (* jds " 5-Apr-84 10:40")

         (* Re-arm any interrupts that TEdit turned off, so the poor user has them 
         available in other parts of the system.)

    (AND (WINDOWPROP (PROCESSPROP THISP 'WINDOW)
                'TEXTOBJ)
         (\TEDIT.INTERRUPT.SETUP THISP T])
)

(RPAQ? \CARETRATE 333)



(* ; "Caret handler;  stolen from CHAT.")

(DEFINEQ

(\EDIT.DOWNCARET
  [LAMBDA (CARET)                                            (* ; "Edited 13-Nov-87 08:25 by jds")

    (* ;; "Put the caret down -- i.e., MAKE IT VISIBLE -- as fast as possible")

    (LET* ((DS (fetch (TEDITCARET TCCARETDS) of CARET))
           (X (DSPXPOSITION NIL DS))
           (Y (DSPYPOSITION NIL DS)))
          (replace (TEDITCARET TCCARETX) of CARET with X)
          (replace (TEDITCARET TCCARETY) of CARET with Y)
          (replace (TEDITCARET TCFORCEUP) of CARET with NIL)
          (\CARET.FLASH? DS (fetch (TEDITCARET TCCARET) of CARET)
                 10 NIL X Y])

(\EDIT.FLIPCARET
  [LAMBDA (CARET FORCE)                                      (* ; "Edited 30-Mar-87 16:50 by jds")
                                                             (* ; 
                                                     "changes the caret from on to off or off to on.")

    (* ;; "(COND ((OR FORCE (fetch TCFORCEDDOWN of CARET) (AND (IGREATERP (CLOCK0 (fetch TCNOWTIME of CARET)) (fetch TCTHENTIME of CARET)) (NOT (fetch TCFORCEUP of CARET)))) (UNINTERRUPTABLY (* note the time of the next change.) (* must be done without creating boxes because happens during keyboard wait.) (\BOXIPLUS (CLOCK0 (fetch TCTHENTIME of CARET)) (fetch TCCARETRATE of CARET)) (* Set the time for the next caret transition) (replace TCUP of CARET with (NOT (fetch TCUP of CARET))) (* Invert the sense of the caret's UPness) (replace TCFORCEDDOWN of CARET with NIL) (* Turn off the force-down & Force-up flags) (replace TCFORCEUP of CARET with NIL) (PROG ((DS (fetch TCCARETDS of CARET)) (CURS (fetch TCCURSORBM of CARET))) (COND ((fetch TCUP of CARET)) (T (* We're putting the caret down -- set the new X,Y position) (replace TCCARETX of CARET with (DSPXPOSITION NIL DS)) (replace TCCARETY of CARET with (DSPYPOSITION NIL DS)))) (BITBLT (fetch (CURSOR CUIMAGE) of CURS) 0 0 DS (IDIFFERENCE (fetch TCCARETX of CARET) (fetch (CURSOR CUHOTSPOTX) of CURS)) (IDIFFERENCE (fetch TCCARETY of CARET) (fetch (CURSOR CUHOTSPOTY) of CURS)) CURSORWIDTH CURSORHEIGHT (QUOTE INPUT) (QUOTE INVERT))))))")

    NIL])

(TEDIT.FLASHCARET
  [LAMBDA (CARETS)                                           (* jds "16-Jul-85 12:35")
                                                             (* Unless the caret is constrained to 
                                                             be INVISIBLE, give it a chance to 
                                                             flash.)
    (bind (FIRSTTIME _ T) for CARET inside CARETS
       do (COND
             ((NOT (fetch TCFORCEUP of CARET))               (* The caret need not stay invisible.)
                                                             (* (\EDIT.FLIPCARET CARET))
              (COND
                 (FIRSTTIME (SETQ FIRSTTIME NIL)
                        (\CARET.FLASH? (fetch TCCARETDS of CARET)
                               (fetch TCCARET of CARET)
                               NIL NIL (fetch TCCARETX of CARET)
                               (fetch TCCARETY of CARET)))
                 (T (\CARET.FLASH.AGAIN (fetch TCCARET of CARET)
                           (fetch TCCARETDS of CARET)
                           (fetch TCCARETX of CARET)
                           (fetch TCCARETY of CARET])

(\EDIT.UPCARET
  [LAMBDA (CARET)                                            (* ; "Edited 13-Nov-87 08:27 by jds")

    (* ;; "Take the caret up -- i.e., MAKE IT INVISIBLE -- and keep it up")

    (\CARET.DOWN (fetch (TEDITCARET TCCARETDS) of CARET))

    (* ;; "The TCFORCEUP field is set so that the caret will stay off-screen:")

    (replace (TEDITCARET TCFORCEUP) of CARET with T])

(TEDIT.NORMALIZECARET
  [LAMBDA (TEXTOBJ SEL)                                      (* ; "Edited 24-Feb-2023 00:17 by rmk")
                                                             (* ; "Edited  3-Nov-2022 22:46 by rmk")
                                                             (* ; "Edited  7-Oct-2022 21:23 by rmk")
                                                             (* ; "Edited 30-May-91 23:35 by jds")

    (* ;; "Scroll the text window so that the caret is visible in it.")

    (SETQ TEXTOBJ (TEXTOBJ TEXTOBJ))
    (PROG* ((SEL (OR SEL (fetch (TEXTOBJ SEL) of TEXTOBJ)))
            [WINDOW (OR (fetch (TEXTOBJ SELWINDOW) of TEXTOBJ)
                        (CAR (fetch (TEXTOBJ \WINDOW) of TEXTOBJ]
            (WREG (AND WINDOW (DSPCLIPPINGREGION NIL WINDOW)))
            (WHEIGHT (AND WREG (fetch PTOP of WREG)))
            (WBOTTOM (AND WREG (fetch BOTTOM of WREG)))
            (SELWASON (fetch (SELECTION ONFLG) of SEL))
            CH# Y LINE)
           (CL:UNLESS (AND WINDOW (fetch (SELECTION SET) of SEL))
                  (RETURN))                                  (* ; 
                                                        "If there is no selection set, don't bother.")
           (CL:WHEN SELWASON                                 (* ; 
                                                          "The selection is hilited, so turn it off.")
               (\SHOWSEL SEL NIL NIL))
           (for WW inside (fetch (TEXTOBJ \WINDOW) of TEXTOBJ) as L1 inside (fetch (SELECTION L1)
                                                                               of SEL) as LN
              inside (fetch (SELECTION LN) of SEL) when (EQ WW WINDOW)
              do 
                 (* ;; "Get to the line info for the SELWINDOW.  (failing that, the main/only edit window) Use that info to decide where the caret is.")

                 (SELECTQ (fetch (SELECTION POINT) of SEL)
                     (LEFT                                   (* ; 
              "The caret is at the left end of the selection;  hunt for the first selected character")
                           (SETQ CH# (fetch (SELECTION CH#) of SEL))
                           (SETQ Y (OR (AND L1 (fetch (LINEDESCRIPTOR YBOT) of L1))
                                       (fetch (SELECTION Y0) of SEL))))
                     (RIGHT                                  (* ; 
              "The caret is at the right end of the selection;  hunt for the last selected character")
                            (SETQ CH# (SUB1 (fetch (SELECTION CHLIM) of SEL)))
                            (SETQ Y (OR (AND LN (fetch (LINEDESCRIPTOR YBOT) of LN))
                                        (fetch (SELECTION YLIM) of SEL))))
                     NIL))

     (* ;; "we have the Y and CH# for the selection in the SELWINDOW")

           (CL:WHEN (AND (OR (IGEQ Y WHEIGHT)
                             (ILESSP Y WBOTTOM))
                         (NOT (fetch (TEXTOBJ TXTNEEDSUPDATE) of TEXTOBJ)))
                                                             (* ; 
                                                      "The caret is off-screen.  Scroll to get it on")
               (for LINE inside (fetch (SELECTION L1) of SEL) when LINE
                  do (replace (LINEDESCRIPTOR YBOT) of LINE with (SUB1 WBOTTOM)))
                                                             (* ; 
                                        "Make sure it thinks the old selection is off-screen for now")
               (for LINE inside (fetch (SELECTION LN) of SEL) when LINE
                  do (replace (LINEDESCRIPTOR YBOT) of LINE with (SUB1 WBOTTOM)))
               (SETQ LINE (\TEDIT.FIND.FIRST.LINE TEXTOBJ WHEIGHT (IMAX 1 (IMIN CH#
                                                                                (fetch (TEXTOBJ
                                                                                        TEXTLEN)
                                                                                   of TEXTOBJ)))
                                 WINDOW))                    (* ; 
                                                            "Find the first line to go in the window")
               (replace (LINEDESCRIPTOR YBOT) of LINE with (IDIFFERENCE WHEIGHT (fetch (
                                                                                       LINEDESCRIPTOR
                                                                                        LHEIGHT)
                                                                                   of LINE)))
                                                             (* ; "Set it up as the top line.")
               (replace (LINEDESCRIPTOR YBASE) of LINE with (IPLUS (fetch (LINEDESCRIPTOR YBOT)
                                                                      of LINE)
                                                                   (fetch (LINEDESCRIPTOR DESCENT)
                                                                      of LINE)))
               (\DISPLAYLINE TEXTOBJ LINE WINDOW)
               (\FILLWINDOW (fetch (LINEDESCRIPTOR YBOT) of LINE)
                      LINE TEXTOBJ WINDOW)                   (* ; 
                                                             "And fill out the window from there.")
               (\FIXSEL SEL TEXTOBJ)
               (\TEDIT.SET.WINDOW.EXTENT TEXTOBJ WINDOW))
           (CL:WHEN SELWASON                                 (* ; 
                                                      "The selection is hilited, so turn it back on.")
               (\SHOWSEL SEL NIL T))])

(\SETCARET
  [LAMBDA (X Y DS TEXTOBJ CARET)                             (* ; "Edited 30-May-91 23:35 by jds")
    (PROG ((CLIPREGION (DSPCLIPPINGREGION NIL DS)))
          (COND
             [(AND (ILESSP Y (fetch PTOP of CLIPREGION))
                   (IGEQ Y (fetch BOTTOM of CLIPREGION)))
              (MOVETO X Y DS)
              (COND
                 ((NOT (fetch (TEXTOBJ TXTREADONLY) of TEXTOBJ))
                  (\EDIT.DOWNCARET CARET]
             (T 

         (* The caret is off screen. Do a MOVETO so the system carets don't appear at odd 
         times.)

                (MOVETO (IPLUS (fetch PTOP of CLIPREGION)
                               12)
                       0 DS)))                               (* Only put down the caret the line it 
                                                             points to is on-screen)
      ])

(\TEDIT.CARET
  [LAMBDA (CARETS)                                           (* jds "12-Jul-85 11:18")
                                                             (* Reset the caret to its normal state 
                                                             state, from the selection caret)
    (for CARET inside CARETS do (replace TCCARET of CARET with (\CARET.CREATE BXCARET])
)



(* ; "Menu interfacing")

(DEFINEQ

(TEDIT.ADD.MENUITEM
  [LAMBDA (MENU ITEM)                                        (* jds " 9-AUG-83 09:55")
                                                             (* Adds ITEM to the MENU, and updates 
                                                             all the stuff.)
    (PROG (OLDITM)
          (COND
             ((MEMBER ITEM (fetch ITEMS of MENU))            (* Do nothing--it's already in the 
                                                             menu)
              )
             ([AND (LISTP ITEM)
                   (SETQ OLDITM (SASSOC (CAR ITEM)
                                       (fetch ITEMS of MENU] (* The menu item exists.
                                                             Make sure the thing behind it is 
                                                             right.)
              (RPLACD OLDITM (CDR ITEM)))
             (T                                              (* It isn't in the menu, so go ahead 
                                                             and add it.)
                (replace ITEMS of MENU with (NCONC1 (fetch ITEMS of MENU)
                                                   ITEM))
                (COND
                   ((EQ (fetch MENUCOLUMNS of MENU)
                        1)                                   (* If there is only one column, force 
                                                             a re-figuring of the number of rows)
                    (replace MENUROWS of MENU with NIL))
                   ((EQ (fetch MENUROWS of MENU)
                        1)                                   (* There's only one row, so recompute 
                                                             %# of columns.)
                    (replace MENUCOLUMNS of MENU with NIL)))
                (replace ITEMWIDTH of MENU with 10000)
                (replace ITEMHEIGHT of MENU with 10000)
                (replace IMAGE of MENU with NIL)             (* Force it to create a new menu 
                                                             image.)
                (UPDATE/MENU/IMAGE MENU])

(TEDIT.DEFAULT.MENUFN
  [LAMBDA (W)                                                (* ; "Edited  9-Sep-2022 17:02 by rmk")
                                                             (* ; "Edited  5-Sep-2022 15:25 by rmk")
                                                             (* ; "Edited 23-Jul-2022 22:23 by rmk")
                                                             (* ; "Edited 30-May-91 23:35 by jds")

    (* ;; 
    "Default MENU Fn for editor windows--displays a menu of items & acts on the commands received.")

    (PROG ((TEXTOBJ (WINDOWPROP W 'TEXTOBJ))
           (WMENU (WINDOWPROP W 'TEDIT.MENU))
           THISMENU CH OFILE OCURSOR LINES SEL ITEM)
          (COND
             ((EQ (fetch (TEXTOBJ EDITOPACTIVE) of TEXTOBJ)
                  T)

              (* ;; 
              "We're busy doing something, but not sure what.  Give a general 'please wait' msg:")

              (TEDIT.PROMPTPRINT TEXTOBJ "Edit operation in progress; please wait." T)
              (RETURN))
             ((fetch (TEXTOBJ EDITOPACTIVE) of TEXTOBJ)

              (* ;; "We know specifically what's happening.  Tell him:")

              (TEDIT.PROMPTPRINT TEXTOBJ (CONCAT (fetch (TEXTOBJ EDITOPACTIVE) of TEXTOBJ)
                                                " in progress; please wait.")
                     T)
              (RETURN)))
          (SETQ THISMENU (COND
                            (WMENU)
                            ((SETQ WMENU (WINDOWPROP W 'TEDIT.MENU.COMMANDS))
                             (PROG1 (SETQ WMENU (\TEDIT.CREATEMENU WMENU))
                                 (WINDOWPROP W 'TEDIT.MENU WMENU)))
                            (TEDIT.DEFAULT.MENU)))
          (SETQ ITEM (MENU THISMENU))
          (ERSETQ (RESETLST
                      [RESETSAVE (\TEDIT.MARKACTIVE TEXTOBJ)
                             '(AND (\TEDIT.MARKINACTIVE OLDVALUE]
                      (replace (TEXTOBJ EDITOPACTIVE) of TEXTOBJ with (OR (CAR ITEM)
                                                                          T))
                                                             (* ; 
                                                          "So we ca ntell the guy WHAT op is active.")
                      [SELECTQ (CAR ITEM)
                          ((Put |Put Formatted Document|) 
                               (TEDIT.PUT TEXTOBJ NIL NIL (TEXTPROP TEXTOBJ 'CLEARPUT)))
                          (Plain-Text (TEDIT.PUT TEXTOBJ NIL NIL T))
                          ((Get |Get Formatted Document|)    (* ; 
                                                 "Get a new file (overwriting the one being edited.)")
                               (TEDIT.GET TEXTOBJ NIL (TEXTPROP TEXTOBJ 'CLEARGET)))
                          (Unformatted% Get 
                               (TEDIT.GET TEXTOBJ NIL T))
                          (Include                           (* ; "Insert a file where the caret is")
                                   (TEDIT.INCLUDE TEXTOBJ))
                          (Quit                              (* ; "Stop this session.")
                                (\TEDIT.QUIT W))
                          (Substitute                        (* ; "Search-and-replace")
                                      (RESETLST
                                          (RESETSAVE (CURSOR WAITINGCURSOR))
                                          (TEDIT.SUBSTITUTE (fetch (TEXTOBJ STREAMHINT) of TEXTOBJ))))
                          (Find                              (* ; 
                                                      "Case sensitive search, with * and # wildcards")
                                [SETQ OFILE (TEDIT.GETINPUT TEXTOBJ "Text to find: "
                                                   (WINDOWPROP W 'TEDIT.LAST.FIND.STRING)
                                                   (CHARCODE (EOL LF ESC]
                                [COND
                                   (OFILE (SETQ SEL (fetch (TEXTOBJ SEL) of TEXTOBJ))
                                          (\SHOWSEL SEL NIL NIL)
                                          (TEDIT.PROMPTPRINT TEXTOBJ "Searching..." T)
                                          (SETQ CH (TEDIT.FIND TEXTOBJ (MKSTRING OFILE)
                                                          NIL NIL T))
                                          (COND
                                             (CH             (* ; "We found the target text.")
                                                 (TEDIT.PROMPTPRINT TEXTOBJ "Done.")
                                                 (replace (SELECTION CH#) of SEL with (CAR CH))
                                                             (* ; 
                                                             "Set up SELECTION to be the found text")
                                                 (replace (SELECTION CHLIM) of SEL
                                                    with (ADD1 (CADR CH)))
                                                 [replace (SELECTION DCH) of SEL
                                                    with (ADD1 (IDIFFERENCE (CADR CH)
                                                                      (CAR CH]
                                                 (replace (SELECTION POINT) of SEL
                                                    with 'RIGHT)
                                                 (replace (TEXTOBJ CARETLOOKS) of TEXTOBJ
                                                    with (\TEDIT.GET.INSERT.CHARLOOKS TEXTOBJ SEL))
                                                 (TEDIT.RESET.EXTEND.PENDING.DELETE SEL)
                                                             (* ; "And never pending a deletion.")
                                                 (\FIXSEL SEL TEXTOBJ)
                                                 (TEDIT.NORMALIZECARET TEXTOBJ)
                                                 (\SHOWSEL SEL NIL T)
                                                             (* ; "And get it into the window")
                                                 (WINDOWPROP W 'TEDIT.LAST.FIND.STRING OFILE))
                                             (T (TEDIT.PROMPTPRINT TEXTOBJ "(not found)")
                                                (\SHOWSEL SEL NIL T])
                          (Looks                             (* ; 
                                                 "He wants to set the font for the current selection")
                                 (\TEDIT.LOOKS TEXTOBJ))
                          (Hardcopy                          (* ; "Print this document")
                                    (TEDIT.HARDCOPY TEXTOBJ))
                          (Press% File                       (* ; 
                                                     "Make a hardcopy file with this document in it.")
                                       (TEDIT.HCPYFILE TEXTOBJ))
                          (Expanded% Menu                    (* ; 
                                                             "Open the expanded operations menu.")
                               (\TEDIT.EXPANDED.MENU TEXTOBJ))
                          (Character% Looks                  (* ; 
                                                          "Open the menu for setting character looks")
                               (\TEDIT.EXPANDEDCHARLOOKS.MENU TEXTOBJ))
                          (Paragraph% Formatting             (* ; 
                                                             "Open the paragraph formatting menu")
                               (\TEDIT.EXPANDEDPARA.MENU TEXTOBJ))
                          (Page% Layout                      (* ; "Open the page-layout menu")
                                        (\TEXTMENU.START (COPYTEXTSTREAM TEDIT.EXPANDED.PAGEMENU T)
                                               (\TEDIT.PRIMARYW TEXTOBJ)
                                               "Page Layout Menu" 150))
                          (COND
                             ((CAR ITEM)                     (* ; 
           "This is a user-supplied entry.  Get the function, and apply it to the TEXTSTREAM for him")
                              (APPLY* (CAR ITEM)
                                     (fetch (TEXTOBJ STREAMHINT) of TEXTOBJ])])

(TEDIT.REMOVE.MENUITEM
  [LAMBDA (MENU ITEM)                                        (* gbn "26-Apr-84 04:06")
    (PROG (ITEMLIST)
          [COND
             ((OR (LITATOM ITEM)
                  (STRINGP ITEM))
              (for X in (fetch ITEMS of MENU) do (COND
                                                    ((AND (LISTP X)
                                                          (EQUAL (CAR X)
                                                                 ITEM))
                                                     (RETURN (SETQ ITEM X]
          (RETURN (COND
                     ((MEMBER ITEM (SETQ ITEMLIST (fetch ITEMS of MENU)))
                      (replace ITEMS of MENU with (REMOVE ITEM ITEMLIST))
                      (replace MENUCOLUMNS of MENU with NIL)
                      (replace MENUROWS of MENU with NIL)
                      (UPDATE/MENU/IMAGE MENU))
                     (T NIL])

(\TEDIT.CREATEMENU
  [LAMBDA (ITEMS)                                            (* ; "Edited 16-Oct-87 14:21 by jds")

    (* ;; "Create a TEdit command menu, given a list of menu items.")

    (create MENU
           ITEMS _ ITEMS
           CENTERFLG _ T
           MENUFONT _ (FONTCREATE 'HELVETICA 10 'BOLD)
           WHENHELDFN _ '\TEDIT.MENU.WHENHELDFN
           WHENSELECTEDFN _ '\TEDIT.MENU.WHENSELECTEDFN])

(\TEDIT.MENU.WHENHELDFN
  [LAMBDA (ITEM MENU BUTTON)                                 (* ; "Edited  4-Oct-2022 09:17 by rmk")
                                                             (* jds "10-Apr-84 15:14")
    (COND
       ((ATOM ITEM)
        (CLRPROMPT)
        (PROMPTPRINT (SELECTQ ITEM
                         (Put "Sends the document to a file")
                         (Get "Gets a new file as the document to edit.")
                         (Looks "Changes the font/size/etc. of characters")
                         (Find "Searches for a string")
                         (Quit "Ends the edit session")
                         (Hardcopy "Formats and sends the file to a printer.")
                         (Hardcopy% File 
                              "Creates a hardcopy-format file of the document.")
                         "")))
       (T (DEFAULTMENUHELDFN ITEM])

(\TEDIT.MENU.WHENSELECTEDFN
  [LAMBDA (ITEM MENU BUTTON)                                 (* ; "Edited 16-Oct-87 14:21 by jds")

    (* ;; "A Selection fn for preserving the button pressed, for special handling in PUT, e.g.")

    (CONS (DEFAULTWHENSELECTEDFN ITEM MENU BUTTON)
          BUTTON])
)
(DECLARE%: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS TEDIT.DEFAULT.MENU)
)
(DECLARE%: DONTEVAL@LOAD DOCOPY 

(RPAQ TEDIT.DEFAULT.MENU
      [\TEDIT.CREATEMENU '((Put 'Put NIL (SUBITEMS |Put Formatted Document| Plain-Text))
                           (Get 'Get NIL (SUBITEMS |Get Formatted Document| Unformatted% Get))
                           Include Find Looks Substitute Quit (Expanded% Menu 'Expanded% Menu NIL
                                                                     (SUBITEMS Expanded% Menu 
                                                                            Character% Looks 
                                                                            Paragraph% Formatting 
                                                                            Page% Layout])
)
(DECLARE%: DONTEVAL@LOAD DOCOPY 

[OR (SASSOC 'TEdit BackgroundMenuCommands)
    (NCONC1 BackgroundMenuCommands '(TEdit '(TEDIT)
                                           "Opens a TEdit window for use."]

(SETQ BackgroundMenu NIL)
)



(* ; "titled icon info")


(FILESLOAD ICONW)

(RPAQQ TEDITICON #*(87 95)OOOOOOOOOOOOOOOOON@@@@@@OOOOOOOOOOOOOOOOON@@@@@@OOOOOOOOOOOOOOOOON@@@@@@O@AA@@CH@@@H@H@@@G@@@@@@OOOOOOOOOOOOOOOOOOH@@@@@OH@MJH@@F@@@@@@@B@N@@@@@OOOOOOOOOOOHGOOOOOOH@@@@MO@@@@@F@@@OL@@C@@@OH@@@LOOOOOOOOOOOOOOOOOOOON@@LGOOOOOOOOOOOOOOOOOOON@@LAOOOOOOOOOOOOOOOOOOON@@L@CN@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@LD@N@@@@@@@@@@@@@@@@@N@@MLDN@@@@@@@@@@@@@@@@@N@@LGBN@@@@@@@@@@@@@@@@@N@@LDNN@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@M@@N@@@@@@@@@@@@@@@@@N@@LGBN@@@@@@@@@@@@@@@@@N@@LDNN@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@MH@N@@@@@@@@@@@@@@@@@N@@MFBN@@@@@@@@@@@@@@@@@N@@LELN@@@@@@@@@@@@@@@@@N@@LDBN@@@@@@@@@@@@@@@@@N@@LBBN@@@@@@@@@@@@@@@@@N@@LALN@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@MH@N@@@@@@@@@@@@@@@@@N@@M@DN@@@@@@@@@@@@@@@@@N@@MDBN@@@@@@@@@@@@@@@@@N@@MCBN@@@@@@@@@@@@@@@@@N@@MNBN@@@@@@@@@@@@@@@@@N@@MCJN@@@@@@@@@@@@@@@@@N@@L@FN@@@@@@@@@@@@@@@@@N@@L@BN@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@MH@N@@@@@@@@@@@@@@@@@N@@M@@N@@@@@@@@@@@@@@@@@N@@M@@N@@@@@@@@@@@@@@@@@N@@ML@N@@@@@@@@@@@@@@@@@N@@MCJN@@@@@@@@@@@@@@@@@N@@M@FN@@@@@@@@@@@@@@@@@N@@MHBN@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@L@@N@@@@@@@@@@@@@@@@@N@@N@@N@@@@@@@@@@@@@@@@@N@@G@@N@@@@@@@@@@@@@@@@@N@@GH@N@@@@@@@@@@@@@@@@@N@@CN@N@@@@@@@@@@@@@@@@@N@@AOHN@@@@@@@@@@@@@@@@@N@@@GOOOOOOOOOOOOOOOOOOON@@@AOOOOOOOOOOOOOOOOOOON@@@@COOOOOOOOOOOOOOOOOON@@
)

(RPAQQ TEDITMASK
)

(RPAQ? TEDIT.ICON.FONT (FONTCREATE 'HELVETICA 8 'BOLD))

(RPAQ? TEDIT.ICON.TITLE.REGION [CONS 16 (CONS 4 (CONS 64 (CONS 77 NIL])

(RPAQ? TEDIT.TITLED.ICON.TEMPLATE (CONS TEDITICON (CONS TEDITMASK (CONS TEDIT.ICON.TITLE.REGION NIL))
                                        ))
(DECLARE%: DONTCOPY
  (FILEMAP (NIL (10959 88968 (TEDIT.CREATEW 10969 . 13742) (\TEDIT.CREATEW.FROM.REGION 13744 . 14724) (
TEDIT.CURSORMOVEDFN 14726 . 21914) (TEDIT.CURSOROUTFN 21916 . 22459) (TEDIT.WINDOW.SETUP 22461 . 24286
) (TEDIT.MINIMAL.WINDOW.SETUP 24288 . 32212) (\TEDIT.ACTIVE.WINDOWP 32214 . 33207) (
\TEDIT.BUTTONEVENTFN 33209 . 56917) (\TEDIT.WINDOW.OPS 56919 . 60131) (\TEDIT.EXPANDFN 60133 . 60696) 
(\TEDIT.MAINW 60698 . 61944) (\TEDIT.PRIMARYW 61946 . 63107) (\TEDIT.COPYINSERTFN 63109 . 63905) (
\TEDIT.NEWREGIONFN 63907 . 66423) (\TEDIT.SET.WINDOW.EXTENT 66425 . 71396) (\TEDIT.SHRINK.ICONCREATE 
71398 . 73599) (\TEDIT.SHRINKFN 73601 . 74160) (\TEDIT.SPLITW 74162 . 79498) (\TEDIT.UNSPLITW 79500 . 
83088) (\TEDIT.WINDOW.SETUP 83090 . 88571) (\SAFE.FIRST 88573 . 88966)) (90298 91209 (TEDITWINDOWP 
90308 . 91207)) (91246 93961 (TEDIT.GETINPUT 91256 . 93316) (\TEDIT.MAKEFILENAME 93318 . 93959)) (
94010 100438 (TEDIT.PROMPTPRINT 94020 . 96955) (TEDIT.PROMPTFLASH 96957 . 98866) (
\TEDIT.PROMPT.PAGEFULLFN 98868 . 100436)) (100676 104692 (TEXTSTREAM.TITLE 100686 . 101311) (
\TEDIT.ORIGINAL.WINDOW.TITLE 101313 . 103235) (\TEDIT.WINDOW.TITLE 103237 . 103935) (
\TEXTSTREAM.FILENAME 103937 . 104690)) (104735 145611 (TEDIT.DEACTIVATE.WINDOW 104745 . 111460) (
\TEDIT.REPAINTFN 111462 . 113459) (\TEDIT.RESHAPEFN 113461 . 118637) (\TEDIT.SCROLLFN 118639 . 145609)
) (145653 147784 (\TEDIT.PROCIDLEFN 145663 . 146958) (\TEDIT.PROCENTRYFN 146960 . 147405) (
\TEDIT.PROCEXITFN 147407 . 147782)) (147863 159173 (\EDIT.DOWNCARET 147873 . 148542) (\EDIT.FLIPCARET 
148544 . 150063) (TEDIT.FLASHCARET 150065 . 151346) (\EDIT.UPCARET 151348 . 151773) (
TEDIT.NORMALIZECARET 151775 . 157816) (\SETCARET 157818 . 158746) (\TEDIT.CARET 158748 . 159171)) (
159207 172787 (TEDIT.ADD.MENUITEM 159217 . 161508) (TEDIT.DEFAULT.MENUFN 161510 . 170127) (
TEDIT.REMOVE.MENUITEM 170129 . 171126) (\TEDIT.CREATEMENU 171128 . 171565) (\TEDIT.MENU.WHENHELDFN 
171567 . 172472) (\TEDIT.MENU.WHENSELECTEDFN 172474 . 172785)))))
STOP
