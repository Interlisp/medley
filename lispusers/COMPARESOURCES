(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)
(FILECREATED " 5-Sep-2020 19:02:30" 
{DSK}<Users>kaplan>Local>medley3.5>lispcore>lispusers>COMPARESOURCES.;3 20197  

      changes to%:  (FNS \CS.COMPARE.MASTERS)

      previous date%: "19-Apr-2018 10:50:03" 
{DSK}<Users>kaplan>Local>medley3.5>lispcore>lispusers>COMPARESOURCES.;2)


(* ; "
Copyright (c) 1985, 1986, 1987, 1988, 2018, 2020 by Xerox Corporation.  All rights reserved.
")

(PRETTYCOMPRINT COMPARESOURCESCOMS)

(RPAQQ COMPARESOURCESCOMS
       ((FNS COMPARESOURCES \CS.COMPARE.MASTERS \CS.COMPARE.TYPES \CS.SORT.DECLARES \CS.SORT.DECLARE1
             \CS.FILTER.GARBAGE)
        (FNS \CS.ISVARFORM \CS.COMPARE.VARS \CS.ISMACROFORM \CS.ISRECFORM \CS.ISCOURIERFORM 
             \CS.ISTEMPLATEFORM \CS.COMPARE.TEMPLATES \CS.ISPROPFORM \CS.PROP.NAME \CS.COMPARE.PROPS
             \CS.ISADDVARFORM \CS.COMPARE.ADDVARS \CS.ISFPKGCOMFORM \CS.COMPARE.FPKGCOMS)
        (VARS COMPARESOURCETYPES DEFAULT.DECLARE.TAGS)
        (DECLARE%: EVAL@COMPILE DONTCOPY (RECORDS CSTYPE)
               (GLOBALVARS COMPARESOURCETYPES CLISPRECORDTYPES MACROPROPS DEFAULT.DECLARE.TAGS))))
(DEFINEQ

(COMPARESOURCES
  [LAMBDA (FILEX FILEY EXAMINE DW? LISTSTREAM)          (* ; "Edited 19-Apr-2018 10:49 by rmk:")

(* ;;; "Compare two lisp source files, reporting differences.")

    (DECLARE (SPECVARS FILEX FILEY EXAMINE DIFFERENCES))
    (PROG (DIFFERENCES BODYX BODYY ENVX ENVY DECLAREX DECLAREY)
          [SETQ FILEX (OR (FINDFILE FILEX T)
                          (RETURN (printout LISTSTREAM FILEX " not found" T]
          [SETQ FILEY (OR (FINDFILE FILEY T)
                          (RETURN (printout LISTSTREAM FILEY " not found" T]

     (* ;; "Read the two files, throwing out extraneous forms & such:")

          (CL:MULTIPLE-VALUE-SETQ (BODYX ENVX)
                 (READFILE FILEX))
          (SETQ BODYX (\CS.FILTER.GARBAGE BODYX))
          (CL:MULTIPLE-VALUE-SETQ (BODYY ENVY)
                 (READFILE FILEY))
          (SETQ BODYY (\CS.FILTER.GARBAGE BODYY))
          (printout LISTSTREAM "Comparing " FILEX " dated " (GETFILEINFO FILEX 'CREATIONDATE)
                 " and " FILEY " dated " (GETFILEINFO FILEY 'CREATIONDATE)
                 ":" T T)
          [SETQ DECLAREX (for EXPR in BODYX collect EXPR when (EQ (CAR EXPR)
                                                                                  'DECLARE%:]
          (SETQ BODYX (CL:SET-DIFFERENCE BODYX DECLAREX))
          [SETQ DECLAREY (for EXPR in BODYY collect EXPR when (EQ (CAR EXPR)
                                                                                  'DECLARE%:]
          (SETQ BODYY (CL:SET-DIFFERENCE BODYY DECLAREY))
          (WITH-READER-ENVIRONMENT (OR ENVX ENVY (MAKE-READER-ENVIRONMENT))
              (\CS.COMPARE.MASTERS BODYX BODYY DW? LISTSTREAM)

              (* ;; "Done with the non-DECLARE: expressions.  Now sort what's left according to when it is eval'ed so that we can hopefully further reduce the amount of stuff to compare")

              (SETQ BODYX (\CS.SORT.DECLARES DECLAREX))
              (SETQ BODYY (\CS.SORT.DECLARES DECLAREY))
              [SETQ BODYX (APPEND BODYX (for Y in BODYY collect (LIST (CAR Y))
                                           unless (SASSOC (CAR Y)
                                                             BODYX]
                                                             (* ; 
                "Add placeholders for any declaration types in Y not in X to simplify what follows")
              [for X in BODYX bind Y TYPE
                 do (SETQ Y (SASSOC (CAR X)
                                       BODYY))
                       (SETQ TYPE (CAR X))
                       [SETQ X (LDIFFERENCE (CDR X)
                                      (PROG1 (CDR Y)
                                          (SETQ Y (LDIFFERENCE (CDR Y)
                                                         X)))]
                       (COND
                          ((OR X Y)
                           (printout LISTSTREAM T "------" [CONS 'DECLARE%: (APPEND (
                                                                                    CL:SET-DIFFERENCE
                                                                                     TYPE 
                                                                                 DEFAULT.DECLARE.TAGS
                                                                                     )
                                                                                   '(--]
                                  " forms------" T)          (* ; 
                         "REVERSE because \CS.SORT.DECLARES delivered expressions in reverse order")
                           (\CS.COMPARE.MASTERS (REVERSE X)
                                  (REVERSE Y)
                                  DW? LISTSTREAM]
              (TERPRI LISTSTREAM))
          (RETURN (OR (REVERSE DIFFERENCES)
                      'SAME])

(\CS.COMPARE.MASTERS
  [LAMBDA (BODYX BODYY DW? LISTSTREAM)                  (* ; "Edited  5-Sep-2020 19:01 by rmk:")
                                                             (* ; "Edited 15-Apr-88 14:41 by bvm")
    (LET (FNSX FNSY YTHING XTHING PRED DIFS Y TMP DEFFERS)
         (DECLARE (USEDFREE DIFFERENCES))
         [SETQ FNSX (for EXPR in BODYX collect EXPR when (EQ (CAR EXPR)
                                                                             'DEFINEQ]
         (SETQ BODYX (CL:SET-DIFFERENCE BODYX FNSX))
         (SETQ FNSX (for BOD in FNSX join (CDR BOD)))
         [SETQ FNSY (for EXPR in BODYY collect EXPR when (EQ (CAR EXPR)
                                                                             'DEFINEQ]
         (SETQ BODYY (CL:SET-DIFFERENCE BODYY FNSY))
         (SETQ FNSY (for BOD in FNSY join (CDR BOD)))
         [COND
            ((OR FNSX FNSY)
             (printout LISTSTREAM "---Functions: " T)
             [COND
                (DW? (LET ((NOSPELLFLG T))
                          (DECLARE (SPECVARS NOSPELLFLG))
                          (for X in FNSX when (SETQ Y (ASSOC (CAR X)
                                                                         FNSY))
                             do                          (* ; 
                                              "Only bother dwimifying the ones that look different")
                                   (DWIMIFY (CADR X)
                                          T)
                                   (DWIMIFY (CADR Y)
                                          T]
             (COND
                ((SETQ DIFS (\CS.COMPARE.TYPES FNSX FNSY NIL [FUNCTION (LAMBDA (X Y STREAM)
                                                                             (COMPARELISTS
                                                                              (CADR X)
                                                                              (CADR Y)
                                                                              STREAM]
                                   (FUNCTION CAR)
                                   LISTSTREAM))
                 (push DIFFERENCES (CONS 'FNS DIFS]
         [for TYPE in FILEPKGTYPES when (AND (CL:SYMBOLP TYPE)
                                                         (SETQ DEFFERS (GET TYPE :DEFINED-BY)))
            do 

                  (* ;; "handle definer based things")

                  (for DEFFER in DEFFERS
                     do (SETQ XTHING (for X in BODYX collect X
                                            when (EQ (CAR X)
                                                         DEFFER)))
                           (SETQ YTHING (for X in BODYY collect X
                                           when (EQ (CAR X)
                                                        DEFFER)))
                           (SETQ BODYX (CL:SET-DIFFERENCE BODYX XTHING))
                           (SETQ BODYY (CL:SET-DIFFERENCE BODYY YTHING))
                           (COND
                              ((SETQ DIFS (\CS.COMPARE.TYPES XTHING YTHING
                                                 (CONCAT (OR (CL:DOCUMENTATION TYPE 'DEFINE-TYPES)
                                                             TYPE)
                                                        " defined by " DEFFER)
                                                 NIL
                                                 (GET DEFFER :DEFINITION-NAME)
                                                 LISTSTREAM))
                               (COND
                                  ((SETQ TMP (ASSOC TYPE DIFFERENCES))
                                   (NCONC TMP DIFS))
                                  (T (push DIFFERENCES (CONS TYPE DIFS]
         [for TYPE in COMPARESOURCETYPES
            do (SETQ PRED (fetch (CSTYPE PREDFN) of TYPE))
                  (SETQ XTHING (for X in BODYX collect X when (CL:FUNCALL PRED X)))
                  (SETQ YTHING (for X in BODYY collect X when (CL:FUNCALL PRED X)))
                  (SETQ BODYX (CL:SET-DIFFERENCE BODYX XTHING))
                  (SETQ BODYY (CL:SET-DIFFERENCE BODYY YTHING))
                  (COND
                     ((SETQ DIFS (\CS.COMPARE.TYPES XTHING YTHING
                                        (OR (fetch (CSTYPE TITLE) of TYPE)
                                            (L-CASE (MKSTRING (fetch (CSTYPE FPKGTYPE)
                                                                 of TYPE))
                                                   T))
                                        (fetch (CSTYPE COMPAREFN) of TYPE)
                                        (OR (fetch (CSTYPE IDFN) of TYPE)
                                            (FUNCTION CADR))
                                        LISTSTREAM))
                      (SETQ TYPE (fetch (CSTYPE FPKGTYPE) of TYPE))
                      (COND
                         ((SETQ TMP (ASSOC TYPE DIFFERENCES))
                          (NCONC TMP DIFS))
                         (T (push DIFFERENCES (CONS TYPE DIFS]
         [SETQ BODYY (LDIFFERENCE BODYY (PROG1 BODYX
                                            (SETQ BODYX (LDIFFERENCE BODYX BODYY)))]
         (COND
            ((OR BODYX BODYY)
             (printout LISTSTREAM T "---Expressions:" T)
             (LET ((COMMENTX 0)
                   (COMMENTY 0)
                   EXTRAS)                                   (* ; "Remove comments")
                  [SETQ BODYX (for X in BODYX collect X
                                 unless (COND
                                               ((EQ (CAR X)
                                                    COMMENTFLG)
                                                (add COMMENTX 1)
                                                T]
                  [SETQ BODYY (for Y in BODYY collect Y
                                 unless (COND
                                               ((EQ (CAR Y)
                                                    COMMENTFLG)
                                                (add COMMENTY 1)
                                                T]
                  (COND
                     ((OR (NEQ COMMENTX 0)
                          (NEQ COMMENTY 0))
                      (printout LISTSTREAM .I1 COMMENTX " comments -> " .I1 COMMENTY " comments." T T
                             )))
                  [COND
                     ((SETQ EXTRAS (COND
                                      (BODYX (COND
                                                (BODYY (COMPARELISTS BODYX BODYY LISTSTREAM)
                                                       NIL)
                                                (T (printout LISTSTREAM "These are not on " FILEY)
                                                   BODYX)))
                                      (BODYY (printout LISTSTREAM "These are not on " FILEX)
                                             BODYY)))
                      (printout LISTSTREAM ":" T)
                      (for X in EXTRAS do (LVLPRINT X LISTSTREAM 2 3]
                  [COND
                     ((AND (OR BODYX BODYY)
                           (OR (EQ EXAMINE T)
                               (EQMEMB 'MISC EXAMINE)))
                      (IF (EQMEMB 2WINDOWS EXAMINE)
                          THEN (EDITE BODYX)
                                (EDITE BODYY)
                        ELSE (EDITE (LIST BODYX BODYY]
                  (OR (ASSOC 'Other DIFFERENCES)
                      (push DIFFERENCES (LIST 'Other '--])

(\CS.COMPARE.TYPES
(LAMBDA (XTHING YTHING TITLE COMPAREFN IDFN LISTSTREAM) (DECLARE (USEDFREE FILEX FILEY EXAMINE)) (* ; "Edited 29-Dec-86 11:49 by jds") (* ;;; "Compare things using COMPAREFN.  Deltas -> LISTSTREAM.") (COND ((AND (OR XTHING YTHING) (PROGN (SETQ XTHING (LDIFFERENCE XTHING (PROG1 YTHING (SETQ YTHING (LDIFFERENCE YTHING XTHING))))) (OR XTHING YTHING))) (LET (X Y RESULT NAME) (AND TITLE (printout LISTSTREAM T "---" TITLE ":" T T)) (for TAIL on XTHING do (SETQ NAME (CL:FUNCALL IDFN (SETQ X (CAR TAIL)))) (COND ((NOT (SETQ Y (find Y in YTHING suchthat (EQUAL (CL:FUNCALL IDFN Y) NAME)))) (printout LISTSTREAM |.P2| NAME " is not on " FILEY T) (COND ((OR (EQ EXAMINE T) (EQMEMB (QUOTE NEW) EXAMINE)) (EDITE X)))) (T (printout LISTSTREAM |.P2| NAME ": " T) (COND (COMPAREFN (CL:FUNCALL COMPAREFN X Y LISTSTREAM)) (T (COMPARELISTS X Y LISTSTREAM))) (TERPRI LISTSTREAM) (COND ((OR (EQ EXAMINE T) (EQMEMB (QUOTE OLD) EXAMINE)) (EDITE (LIST X Y)))) (RPLACA (FMEMB Y YTHING)))) (RPLACA TAIL) (push RESULT NAME)) (for Y in (LDIFFERENCE YTHING XTHING) do (printout LISTSTREAM |.P2| (SETQ NAME (CL:FUNCALL IDFN Y)) " is not on " FILEX T) (COND ((OR (EQ EXAMINE T) (EQMEMB (QUOTE NEW) EXAMINE)) (EDITE Y))) (push RESULT NAME)) RESULT))))
)

(\CS.SORT.DECLARES
(LAMBDA (DECLS) (* bvm%: "15-Nov-85 18:58") (* ;;; "Sorts DECLS, a list of (DECLARE: --) expressions, into a set of declarations by tag, returning a list of entries of the form (tags  . expressions)") (LET (RESULT) (DECLARE (SPECVARS RESULT)) (for DEC in DECLS do (\CS.SORT.DECLARE1 DEC DEFAULT.DECLARE.TAGS)) RESULT))
)

(\CS.SORT.DECLARE1
(LAMBDA (DEC TAGLST) (* bvm%: "15-Nov-85 19:09") (DECLARE (USEDFREE RESULT)) (* ;;; "Process one DECLARE: expression, partitioning it into subdeclarations put on RESULT assuming that the default tags in effect by the time you get here are in TAGLST") (for TAIL on (CDR DEC) bind CURRENT TAG COMPLEMENT do (COND ((NLISTP (SETQ TAG (CAR TAIL))) (* ; "Canonicalize tag") (SELECTQ TAG (DOEVAL@LOAD (SETQQ TAG EVAL@LOAD)) (DOEVAL@COMPILE (SETQQ TAG EVAL@COMPILE)) (DOCOPY (SETQQ TAG COPY)) NIL) (COND ((NOT (MEMB TAG TAGLST)) (SETQ TAGLST (COND ((STRPOS (QUOTE WHEN) TAG) (* ; "These take an extra expression") (APPEND TAGLST (LIST TAG (CAR (SETQ TAIL (CDR TAIL)))))) ((FMEMB (SETQ COMPLEMENT (SELECTQ TAG (COPY (QUOTE DONTCOPY)) (DONTCOPY (QUOTE COPY)) (EVAL@COMPILE (QUOTE DONTEVAL@COMPILE)) (DONTEVAL@COMPILE (QUOTE EVAL@COMPILE)) (EVAL@LOAD (QUOTE DONTEVAL@LOAD)) (DONTEVAL@LOAD (QUOTE EVAL@LOAD)) (FIRST (QUOTE NOTFIRST)) (NOTFIRST (QUOTE FIRST)) NIL)) TAGLST) (SUBST TAG COMPLEMENT TAGLST)) (T (APPEND TAGLST (LIST TAG))))) (SETQ CURRENT NIL)))) ((EQ (CAR TAG) (QUOTE DECLARE%:)) (* ; "Process embedded declaration") (\CS.SORT.DECLARE1 TAG TAGLST)) (T (* ; "Stick this expression on the entry for the tags that tell when to eval it") (COND ((AND (NOT CURRENT) (NOT (SETQ CURRENT (SASSOC TAGLST RESULT)))) (SETQ RESULT (NCONC1 RESULT (SETQ CURRENT (LIST TAGLST)))))) (push (CDR CURRENT) TAG)))))
)

(\CS.FILTER.GARBAGE
(LAMBDA (FILECONTENTS) (* ; "Edited 29-Dec-86 10:44 by jds") (* ;;; "Remove %"Uninteresting%" items from files to be compared.  Removes FILECREATED form, filemap, copyright notice, and DECLARE: DONTCOPY items.") (for X in FILECONTENTS collect X unless (OR (EQ (CAR X) (QUOTE FILECREATED)) (AND (EQ (CAR X) (QUOTE DECLARE%:)) (EQ (CADR X) (QUOTE DONTCOPY)) (LISTP (CADDR X)) (OR (FMEMB (QUOTE COPYRIGHT) (CADDR X)) (FMEMB (QUOTE FILEMAP) (CADDR X)))))))
)
)
(DEFINEQ

(\CS.ISVARFORM
(LAMBDA (X) (* bvm%: "25-Sep-85 12:05") (SELECTQ (CAR X) ((RPAQ RPAQQ RPAQ?) T) NIL)))

(\CS.COMPARE.VARS
(LAMBDA (X Y STREAM) (* ; "Edited 29-Dec-86 12:15 by jds") (* ;;; "Compares two variable setting forms") (COND ((EQ (CAR X) (CAR Y)) (* ; "Same type of setting fn") (COMPARELISTS (CADDR X) (CADDR Y) STREAM)) (T (LET ((XVAL (COND ((EQ (CAR X) (QUOTE RPAQQ)) (KWOTE (CADDR X))) (T (CADDR X)))) (YVAL (COND ((EQ (CAR Y) (QUOTE RPAQQ)) (KWOTE (CADDR Y))) (T (CADDR Y))))) (COND ((EQUAL XVAL YVAL) (* ; "Same value, different setter") (printout STREAM (COND ((EQ (CAR X) (QUOTE RPAQ?)) (QUOTE INITVARS)) (T (QUOTE VARS))) " -> " (COND ((EQ (CAR Y) (QUOTE RPAQ?)) (QUOTE INITVARS)) (T (QUOTE VARS))) T)) (T (COMPARELISTS XVAL YVAL STREAM)))))))
)

(\CS.ISMACROFORM
(LAMBDA (X) (* bvm%: "25-Sep-85 12:19") (SELECTQ (CAR X) (DEFMACRO T) (PUTPROPS (FMEMB (CADDR X) MACROPROPS)) NIL))
)

(\CS.ISRECFORM
(LAMBDA (X) (* bvm%: "25-Sep-85 12:20") (FMEMB (CAR X) CLISPRECORDTYPES)))

(\CS.ISCOURIERFORM
(LAMBDA (X) (* bvm%: "13-Mar-86 16:21") (EQ (CAR X) (QUOTE COURIERPROGRAM))))

(\CS.ISTEMPLATEFORM
(LAMBDA (X) (* bvm%: "13-Mar-86 16:20") (EQ (CAR X) (QUOTE SETTEMPLATE))))

(\CS.COMPARE.TEMPLATES
(LAMBDA (X Y STREAM) (* ; "Edited 29-Dec-86 12:15 by jds") (* ;;; "Templates usually look like (SETTEMPLATE (QUOTE FN) (QUOTE TEMPLATE))") (COND ((AND (EQUAL (CADR X) (CADR Y)) (EQ (CAR (CADDR X)) (QUOTE QUOTE)) (EQ (CAR (CADDR Y)) (QUOTE QUOTE))) (COMPARELISTS (CADR (CADDR X)) (CADR (CADDR Y)) STREAM)) (T (COMPARELISTS X Y STREAM))))
)

(\CS.ISPROPFORM
(LAMBDA (X) (* bvm%: "13-Mar-86 16:34") (* ;;; "(PUTPROPS SYMBOL PROP VALUE)") (AND (EQ (CAR X) (QUOTE PUTPROPS)) (NULL (CDDDDR X))))
)

(\CS.PROP.NAME
(LAMBDA (X) (* bvm%: "13-Mar-86 16:29") (* ;;; "The 'Name' of a property is its atom/value pair") (LIST (CADR X) (CADDR X)))
)

(\CS.COMPARE.PROPS
(LAMBDA (X Y STREAM) (* ; "Edited 29-Dec-86 12:15 by jds") (* ;;; "Compare the values") (COMPARELISTS (CADDDR X) (CADDDR Y) STREAM))
)

(\CS.ISADDVARFORM
(LAMBDA (X) (* bvm%: "13-Mar-86 16:40") (EQ (CAR X) (QUOTE ADDTOVAR))))

(\CS.COMPARE.ADDVARS
(LAMBDA (X Y STREAM) (* ; "Edited 29-Dec-86 12:15 by jds") (* ;;; "(ADDTOVAR ListName . values)") (COMPARELISTS (CDDR X) (CDDR Y) STREAM))
)

(\CS.ISFPKGCOMFORM
(LAMBDA (X) (* bvm%: "13-Mar-86 16:50") (* * (PUTDEF (QUOTE name) (QUOTE FILEPKGCOMS) (QUOTE stuff))) (AND (EQ (CAR X) (QUOTE PUTDEF)) (EQUAL (CADDR X) (QUOTE (QUOTE FILEPKGCOMS)))))
)

(\CS.COMPARE.FPKGCOMS
(LAMBDA (X Y STREAM) (* ; "Edited 29-Dec-86 12:16 by jds") (* * (PUTDEF (QUOTE name) (QUOTE FILEPKGCOMS) (QUOTE stuff))) (COMPARELISTS (CADR (CADDDR X)) (CADR (CADDDR Y)) STREAM))
)
)

(RPAQQ COMPARESOURCETYPES
       ((VARS \CS.ISVARFORM \CS.COMPARE.VARS)
        (MACROS \CS.ISMACROFORM)
        (RECORDS \CS.ISRECFORM)
        (PROPS \CS.ISPROPFORM \CS.COMPARE.PROPS \CS.PROP.NAME "Properties")
        (ADDVARS \CS.ISADDVARFORM \CS.COMPARE.ADDVARS CADR "Additions to lists")
        (TEMPLATES \CS.ISTEMPLATEFORM \CS.COMPARE.TEMPLATES CADADR)
        (COURIERPROGRAMS \CS.ISCOURIERFORM)
        (FILEPKGCOMS \CS.ISFPKGCOMFORM \CS.COMPARE.FPKGCOMS CADADR)))

(RPAQQ DEFAULT.DECLARE.TAGS (EVAL@LOAD DONTEVAL@COMPILE COPY NOTFIRST))
(DECLARE%: EVAL@COMPILE DONTCOPY 
(DECLARE%: EVAL@COMPILE

(RECORD CSTYPE (FPKGTYPE PREDFN COMPAREFN IDFN TITLE))
)

(DECLARE%: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS COMPARESOURCETYPES CLISPRECORDTYPES MACROPROPS DEFAULT.DECLARE.TAGS)
)
)
(PUTPROPS COMPARESOURCES COPYRIGHT ("Xerox Corporation" 1985 1986 1987 1988 2018 2020))
(DECLARE%: DONTCOPY
  (FILEMAP (NIL (1166 16557 (COMPARESOURCES 1176 . 5134) (\CS.COMPARE.MASTERS 5136 . 13057) (
\CS.COMPARE.TYPES 13059 . 14308) (\CS.SORT.DECLARES 14310 . 14653) (\CS.SORT.DECLARE1 14655 . 16075) (
\CS.FILTER.GARBAGE 16077 . 16555)) (16558 19286 (\CS.ISVARFORM 16568 . 16673) (\CS.COMPARE.VARS 16675
 . 17337) (\CS.ISMACROFORM 17339 . 17477) (\CS.ISRECFORM 17479 . 17572) (\CS.ISCOURIERFORM 17574 . 
17674) (\CS.ISTEMPLATEFORM 17676 . 17774) (\CS.COMPARE.TEMPLATES 17776 . 18141) (\CS.ISPROPFORM 18143
 . 18298) (\CS.PROP.NAME 18300 . 18445) (\CS.COMPARE.PROPS 18447 . 18604) (\CS.ISADDVARFORM 18606 . 
18699) (\CS.COMPARE.ADDVARS 18701 . 18866) (\CS.ISFPKGCOMFORM 18868 . 19075) (\CS.COMPARE.FPKGCOMS 
19077 . 19284)))))
STOP
