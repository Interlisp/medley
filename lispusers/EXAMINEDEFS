(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)

(FILECREATED "19-Jan-2022 15:47:26" 
{DSK}<Users>kaplan>Local>medley3.5>my-medley>lispusers>EXAMINEDEFS.;27 9302   

      :CHANGES-TO (VARS EXAMINEDEFSCOMS)

      :PREVIOUS-DATE "18-Jan-2022 22:41:25" 
{DSK}<Users>kaplan>Local>medley3.5>my-medley>lispusers>EXAMINEDEFS.;26)


(PRETTYCOMPRINT EXAMINEDEFSCOMS)

(RPAQQ EXAMINEDEFSCOMS ((FNS EXAMINEDEFS TEDITDEF)
                        (INITVARS (EXAMINEDEFS-PROCESS-LIST)
                               (EXAMINEWITH 'COMPARETEXT))
                        (FILES (SYSLOAD)
                               COMPARETEXT)))
(DEFINEQ

(EXAMINEDEFS
  [LAMBDA (NAME TYPE SOURCE1 SOURCE2 TITLE1 TITLE2 REGION)   (* ; "Edited 18-Jan-2022 22:40 by rmk")
                                                             (* ; "Edited 12-Jan-2022 17:29 by rmk")
                                                             (* ; "Edited 24-Dec-2021 22:39 by rmk")
                                                             (* ; "Edited 20-Dec-2021 11:06 by rmk")

    (* ;; "This provides for side-by-side examination of separate but presumably related expressions.  The (LISTP) expressions can be provided directly as SOURCE1 and SOURCE2 or, if NAME is given the copies of the definitions of NAME as TYPE on the two sources are examined.")

    (* ;; "")

    (* ;; "Examination is in side-by-side attached SEDIT windows if SEDIT is the EDITMODE.  You can use SEDIT operations to zoom in on the location of any changes, deleting common stuff for example.  But you are always working on a copy, so that changes are safe and ephemeral.  This is an examination, not an edit.")

    (CL:UNLESS NAME
        (CL:UNLESS (LISTP SOURCE1)
               (ERROR SOURCE1 " cannot be examined"))
        (CL:UNLESS (LISTP SOURCE2)
               (ERROR SOURCE2 " cannot be examined")))
    (CL:UNLESS TYPE
        (SETQ TYPE 'FNS))

    (* ;; "TITLE1 and TITLE2 are optional strings that will be used to construct the titles of the SEDIT windows. We would like to know where GETDEF got the definition so we can use that, but there isn't an interface that provides that information (extended WHEREIS?)")

    (LET (DEF1 DEF2)
         (SETQ DEF1 (IF (LISTP SOURCE1)
                        THEN 
                             (* ;; "Copy to simulate READONLY")

                             (SETQ DEF1 (COPY SOURCE1))
                      ELSEIF (GETDEF NAME TYPE SOURCE1)
                      ELSE (ERROR NAME " not found on " SOURCE1)))
         (SETQ DEF2 (IF (LISTP SOURCE2)
                        THEN (COPY SOURCE2)
                      ELSEIF (GETDEF NAME TYPE SOURCE2)
                      ELSE (ERROR NAME " not found on " SOURCE2)))
         (CL:UNLESS TITLE1
             (SETQ TITLE1 (OR (AND SOURCE1 (LITATOM SOURCE1))
                              "File 1")))
         (CL:UNLESS TITLE2
             (SETQ TITLE2 (OR (AND SOURCE2 (LITATOM SOURCE2))
                              "File 2")))
         (SELECTQ (EDITMODE)
             (SEDIT:SEDIT 
                          (* ;; 
                          "A kludge to eliminate dangling SEDIT processes from previous examinations")

                          [SETQ EXAMINEDEFS-PROCESS-LIST
                           (FOR PAIR IN EXAMINEDEFS-PROCESS-LIST
                              COLLECT (IF (OPENWP (CAR PAIR))
                                          THEN PAIR
                                        ELSE (DEL.PROCESS (CDR PAIR))
                                             (GO $$ITERATE]

                          (* ;; "Set it up for new side-by-side regions that are forgotten when the window is closed.  Their shape is usually not that useful for regular edits.")

                          (* ;; 
     "Crude suggestions for height, width, position.  Suggest shorter window for  smaller structures")

                          (SELECTQ EXAMINEWITH
                              (SEDIT (CL:UNLESS (REGIONP REGION)
                                         (SETQ REGION (GETREGION)))
                                     [LET (R1 R2 HALFWIDTH W1 W2)
                                          (SETQ HALFWIDTH (IQUOTIENT (FETCH (REGION WIDTH)
                                                                        OF REGION)
                                                                 2))
                                          (SETQ R1 (CREATE REGION USING REGION WIDTH _ HALFWIDTH))
                                          (SETQ R2 (CREATE REGION USING REGION LEFT _
                                                                        (IPLUS (FETCH (REGION LEFT)
                                                                                  OF REGION)
                                                                               HALFWIDTH)
                                                                        WIDTH _ HALFWIDTH))
                                          [SETQ W1
                                           (SEDIT:GET-WINDOW (SEDIT:SEDIT
                                                              DEF1
                                                              `(:NAME ,(CONCAT NAME " from " TITLE1)
                                                                      :REGION
                                                                      ,(CREATE REGION
                                                                          USING REGION WIDTH _ 
                                                                                HALFWIDTH)
                                                                      R1 :DONT-KEEP-WINDOW-REGION T]
                                          [SETQ W2
                                           (SEDIT:GET-WINDOW (SEDIT:SEDIT
                                                              DEF2
                                                              `(:NAME ,(CONCAT NAME " from " TITLE2)
                                                                      :REGION
                                                                      ,R2 :DONT-KEEP-WINDOW-REGION T]
                                          (ATTACHWINDOW W2 W1 'RIGHT 'JUSTIFY)
                                          (MODERNWINDOW W2)

                                          (* ;; 
   "So we can kill the processes on the next call, if they still exist after the windows are closed.")

                                          (PUSH EXAMINEDEFS-PROCESS-LIST (CONS W1 (WINDOWPROP
                                                                                   W1
                                                                                   'PROCESS))
                                                (CONS W2 (WINDOWPROP W2 'PROCESS])
                              (COMPARETEXT 

                                 (* ;; "COMPARETEXT has a better idea of its region, based on the graph size, which is typically small for a definition. So we ignore it.  A better alternative might be to pass a reference position (e.g. the top-left of REGION, and TOP-LEF as the corner.")

                                           (LET (COMPARETEXT.ALLCHUNKS)
                                                (DECLARE (SPECVARS COMPARETEXT.ALLCHUNKS))
                                                (COMPARETEXT (TEDITDEF NAME DEF1 TYPE)
                                                       (TEDITDEF NAME DEF2 TYPE)
                                                       'LINE NIL (LIST TITLE1 TITLE2)
                                                       (CONCAT "Compare sources of " NAME " as " TYPE
                                                              ))))
                              (SHOULDNT)))
             (PROGN (EDITE DEF1)
                    (EDITE DEF2])

(TEDITDEF
  [LAMBDA (NAME DEF TYPE READERENVIRONMENT)                  (* ; "Edited 12-Jan-2022 17:27 by rmk")
    (LET ((TSTREAM (OPENTEXTSTREAM)))
         (DSPFONT DEFAULTFONT TSTREAM)
         (CL:WHEN (EQ (CAR DEF)
                      'DEFINEQ)
             (SETQ DEF (CADR DEF)))
         (IF (EQ NAME (CAR DEF))
             THEN (DSPFONT BOLDFONT TSTREAM)
                  (PRINT NAME TSTREAM)
                  (DSPFONT DEFAULTFONT TSTREAM)
                  (SETQ DEF (CADR DEF))
                  (PRINTDEF DEF 3 T NIL NIL TSTREAM)
           ELSEIF (EQ NAME (CADR DEF))
             THEN 
                  (* ;; "Presumably a DEFUN.  Print the CAR, boldface the cadr")

                  (PRINTOUT TSTREAM "(" .P2 (CAR DEF)
                         " " .FONT BOLDFONT .P2 (CADR DEF)
                         .FONT DEFAULTFONT " " .P2 (CADDR DEF)
                         T 3)
                  (PRINTDEF (CDDDR DEF)
                         3 T T NIL TSTREAM)
                  (PRIN3 ")" TSTREAM)
           ELSE (PRINTDEF DEF 3 NIL NIL NIL TSTREAM))
         TSTREAM])
)

(RPAQ? EXAMINEDEFS-PROCESS-LIST )

(RPAQ? EXAMINEWITH 'COMPARETEXT)

(FILESLOAD (SYSLOAD)
       COMPARETEXT)
(DECLARE%: DONTCOPY
  (FILEMAP (NIL (653 9160 (EXAMINEDEFS 663 . 8038) (TEDITDEF 8040 . 9158)))))
STOP
