(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)

(FILECREATED "30-Aug-2022 23:32:38" {DSK}<home>larry>medley>lispusers>GIT-DIFFTOOL.;2 6731   

      :CHANGES-TO (FNS SIMPLE.CD.INFOS)

      :PREVIOUS-DATE "30-Aug-2022 20:05:25" {DSK}<home>larry>safe>GIT-DIFFTOOL.;1)


(PRETTYCOMPRINT GIT-DIFFTOOLCOMS)

(RPAQQ GIT-DIFFTOOLCOMS ((FNS GIT-DIFFTOOL GIT-SIMPLE-BBC SIMPLE.CD SIMPLE.CD.INFOS)
                         (COMMANDS bbc2 prc2)))
(DEFINEQ

(GIT-DIFFTOOL
  [LAMBDA (BRANCH1 BRANCH2 PROJECT MERGEBASE)              (* ; "Edited 30-Aug-2022 23:07 by larry")
    (LET* [(CMD (CL:FORMAT NIL 
                       "git difftool ~a --dir-diff -x $MEDLEYDIR/scripts/lisp-git-diff ~a ~a "
                       (IF MERGEBASE
                           THEN " --merge-base "
                         else "")
                       BRANCH1
                       (OR BRANCH2 "master")))
           (PS (CREATE-PROCESS-STREAM CMD))
           (X (LET ((*READTABLE* (FIND-READTABLE "OLD-INTERLISP-FILE"))
                    (*PACKAGE* (CL:FIND-PACKAGE "INTERLISP")))
                   (READ PS *READTABLE*]
          (if (NEQ (CL:FIRST X)
                   'pAsSWorD)
              then (HELP X "BAD PASSWORD"))
          (if (NEQ (CL:SECOND X)
                   'COMPARE)
              then (HELP X "UNKNOWN OPERATION"))
          (CDBROWSER (SIMPLE.CD (CL:THIRD X)
                            (CL:FOURTH X))
                 (CL:FORMAT NIL "Comparing branches ~a and ~a" BRANCH1 BRANCH2)
                 `(,BRANCH1 ,BRANCH2)
                 `(LABELFN GIT-CD-LABELFN BRANCH1 ,BRANCH1 BRANCH2 ,BRANCH2 PROCESS-STREAM
                         ,PS CLOSEFN GIT.TB.CLOSEFN)
                 NIL
                 '(Compare See])

(GIT-SIMPLE-BBC
  [LAMBDA (BRANCH1 BRANCH2 LOCAL PROJECT)                  (* ; "Edited 30-Aug-2022 20:35 by larry")
    (SETQ PROJECT (GIT-GET-PROJECT PROJECT))
    (SETQ BRANCH1 (if BRANCH1
                      then (GITORIGIN BRANCH1 LOCAL)
                    else (GIT-WHICH-BRANCH PROJECT)))
    (GIT-DIFFTOOL BRANCH1 BRANCH2 PROJECT])

(SIMPLE.CD
  [LAMBDA (DIR1 DIR2)                                      (* ; "Edited 30-Aug-2022 21:03 by larry")
                                                             (* ; "Edited 29-Aug-2022 12:14 by lmm")
    (PROG (INFOS1 INFOS2 CDVALUE (DATE (DATE)))
          (SETQ INFOS1 (SIMPLE.CD.INFOS DIR1))
          (SETQ INFOS2 (SIMPLE.CD.INFOS DIR2))
          (SETQ CDVALUE (create CDVALUE
                               CDDIR1 _ DIR1
                               CDDIR2 _ DIR2
                               CDCOMPAREDATE _ DATE))

     (* ;; "Correlate the I1's and I2's with the same match name, then do the select filtering and insert the date relations")

          (SETQ CDENTRIES (SORT (CDENTRIES.SELECT (COMPAREDIRECTORIES.CANDIDATES INFOS1 INFOS2)
                                       '(< > -* *- =))
                                T))
          (PRINTOUT T (LENGTH CDENTRIES)
                 " entries" T)
          (replace CDENTRIES of CDVALUE with CDENTRIES)
          (CD.UPDATEWIDTHS CDVALUE)
          (SETQ LASTCDVALUE CDVALUE)
          (RETURN CDVALUE])

(SIMPLE.CD.INFOS
  [LAMBDA (DIR)                                            (* ; "Edited 30-Aug-2022 23:28 by larry")
    (LET ((DIRNAME (DIRECTORYNAME DIR))
          TYPE LDATE)
         (for FULLNAME (STARTPOS _ (NCHARS DIRNAME)) in (DIRECTORY DIRNAME `(DEPTH T COLLECT)
                                                               NIL "")
            collect (CL:WITH-OPEN-FILE (STREAM FULLNAME :DIRECTION :INPUT)
                           (CL:MULTIPLE-VALUE-SETQ (TYPE LDATE)
                                  (COMPAREDIRECTORIES.INFOS.TYPE STREAM))
                           (LIST (SUBATOM (FULLNAME STREAM)
                                        STARTPOS)
                                 (create CDINFO
                                        FULLNAME _ FULLNAME
                                        DATE _ [GDATE (IDATE (OR LDATE (GETFILEINFO STREAM
                                                                              'CREATIONDATE]
                                        LENGTH _ (GETFILEINFO STREAM 'LENGTH)
                                        TYPE _ TYPE
                                        EOL _ (EOLTYPE STREAM])
)

(DEFCOMMAND bbc2 (BRANCH1 BRANCH2 LOCAL PROJECT)

   (* ;; "Compares 2 git branches.  Defaults to local/ if LOCAL, otherwise defaults to origin/.  BRANCH2 defaults to the main branch (origin/ or local/ depending on LOCAL)")

    (SETQ PROJECT (GIT-GET-PROJECT PROJECT))
   (GIT-FETCH PROJECT)
   (SETQ BRANCH1 (SELECTQ (U-CASE BRANCH1)
                     ((NIL T) 
                          (GIT-MY-CURRENT-BRANCH PROJECT))
                     ((LOCAL REMOTE ORIGIN) 
                          (GIT-PICK-BRANCH (GIT-BRANCHES BRANCH1 PROJECT T)))
                     (OR (GIT-LONG-NAME BRANCH1 NIL PROJECT)
                         BRANCH1)))
   (SETQ BRANCH2 (SELECTQ (U-CASE BRANCH2)
                     ((NIL T) 
                          (GIT-MAINBRANCH PROJECT LOCAL))
                     ((LOCAL REMOTE ORIGIN) 
                          (GIT-PICK-BRANCH (GIT-BRANCHES BRANCH2 PROJECT T)))
                     (OR (GIT-LONG-NAME BRANCH2 NIL PROJECT)
                         BRANCH2)))
   (GIT-SIMPLE-BBC BRANCH1 (OR BRANCH2 (GIT-MAINBRANCH PROJECT LOCAL))
          LOCAL PROJECT))

(DEFCOMMAND prc2 (REMOTEBRANCH DRAFTS PROJECT)

   (* ;; "Compares REMOTEBRANCH against the main orign branch, for pull-request assessment")

    (LET ((RB REMOTEBRANCH)
          (DR DRAFTS)
          (PRS))
         (IF PROJECT
             THEN (SETQ PROJECT (GIT-GET-PROJECT PROJECT))
           ELSEIF (GIT-GET-PROJECT RB NIL T)
             THEN (SETQ PROJECT RB)
                  (SETQ RB NIL)
           ELSEIF (GIT-GET-PROJECT DRAFTS NIL T)
             THEN (SETQ PROJECT DRAFTS)
                  (SETQ DRFTS NIL))
         (CL:WHEN (MEMB (U-CASE RB)
                        '(DRAFT DRAFTS))
             (SETQ RB NIL)
             (SETQ DR T))
         (GIT-FETCH PROJECT)
         (SETQ PRS (GIT-PULL-REQUESTS T DR PROJECT))
         (IF PRS
             THEN (CL:WHEN (OR RB (SETQ RB (GIT-PICK-BRANCH (GIT-PRC-MENU DR PROJECT PRS)
                                                  "Pull requests")))
                      (GIT-DIFFTOOL RB (GIT-MAINBRANCH PROJECT)
                             PROJECT T))
           ELSE "No open pull requests")))
(DECLARE%: DONTCOPY
  (FILEMAP (NIL (472 4496 (GIT-DIFFTOOL 482 . 1806) (GIT-SIMPLE-BBC 1808 . 2178) (SIMPLE.CD 2180 . 3311)
 (SIMPLE.CD.INFOS 3313 . 4494)))))
STOP
