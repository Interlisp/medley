(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)

(FILECREATED "28-Feb-2022 13:29:00" {DSK}<Users>kaplan>Local>medley3.5>my-medley>lispusers>GITFNS.;105 71756  

      :CHANGES-TO (COMMANDS prc)

      :PREVIOUS-DATE "28-Feb-2022 12:39:42" 
{DSK}<Users>kaplan>Local>medley3.5>my-medley>lispusers>GITFNS.;103)


(PRETTYCOMPRINT GITFNSCOMS)

(RPAQQ GITFNSCOMS
       (
        (* ;; "Set up")

        (FILES (SYSLOAD FROM VALUEOF LISPUSERSDIRECTORIES)
               COMPAREDIRECTORIES COMPARESOURCES COMPARETEXT PSEUDOHOSTS)
        
        (* ;; "GITMEDLEYDIR and MYMEDLEYDIR collapse to MEDLEYDIR if not provided")

        (INITVARS (GITMEDLEYDIR (SLASHIT (PACKFILENAME 'BODY (OR (UNIX-GETENV "GITMEDLEYDIR")
                                                                 MEDLEYDIR)
                                                'HOST
                                                'UNIX)
                                       T))
               (MYMEDLEYDIR (UNSLASHIT (PACKFILENAME 'BODY (OR (AND (BOUNDP 'MYMEDLEYDIR)
                                                                    MYMEDLEYDIR)
                                                               (UNIX-GETENV "MYMEDLEYDIR")
                                                               MEDLEYDIR)
                                              'HOST
                                              'DSK)
                                   T))
               (MYMEDLEYHOST 'MM)
               (GITMEDLEYHOST 'GIT))
        (INITVARS (GIT-IGNORE-FILES '(EXPORTS.ALL RDSYS RDSYS.LCOM))
               (GIT-IGNORE-DIRECTORIES '(loadups patches tmp fontsold deleted clos cltl2))
               (GIT-MERGE-COMPARES T))
        (P (PSEUDOHOST MYMEDLEYHOST MYMEDLEYDIR)
           (PSEUDOHOST GITMEDLEYHOST GITMEDLEYDIR))
        (FNS GIT-CLONEP)
        
        (* ;; "")

        
        (* ;; "Lisp exec commands")

        (COMMANDS gmc bbc prc cob b?)
        
        (* ;; "")

        
        (* ;; "File correspondents")

        (FNS ALLSUBDIRS MEDLEYSUBDIRS GITSUBDIRS)
        (FNS TOGIT FROMGIT GIT-DELETE-FILE MYMEDLEY-DELETE-FILES)
        (FNS MYMEDLEYSUBDIR GITSUBDIR STRIPDIR STRIPHOST STRIPNAME)
        (FNS GFILE4MFILE MFILE4GFILE GIT-REPO-FILENAME)
        
        (* ;; "")

        
        (* ;; "Git commands")

        (FNS GIT-COMMIT GIT-PUSH GIT-PULL GIT-BRANCH-DIFF GIT-APPROVAL GIT-GET-FILE GIT-FILE-EXISTS?
             GIT-REMOTE-UPDATE GIT-REMOTE-ADD GIT-FILE-DATE)
        
        (* ;; "")

        
        (* ;; "Branches")

        (FNS GIT-CHECKOUT GIT-WHICH-BRANCH GIT-MAKE-BRANCH GIT-BRANCHES GIT-BRANCH-EXISTS? 
             PICK-BRANCH GIT-PULL-REQUESTS)
        
        (* ;; "My branches")

        (FNS GIT-MY-CURRENT-BRANCH GIT-MY-BRANCHP GIT-MY-NEXT-BRANCH GIT-MY-BRANCHES)
        
        (* ;; "")

        
        (* ;; "Worktrees")

        (FNS GIT-ADD-WORKTREE GIT-REMOVE-WORKTREE GIT-LIST-WORKTREES WORKTREEDIR)
        
        (* ;; "")

        
        (* ;; "Comparisons")

        (FNS GIT-GET-DIFFERENT-FILES GIT-COMPARE-BRANCHES GIT-COMPARE-WITH-MYMEDLEY 
             GIT-COMPARE-WORKTREE GITCDOBJBUTTONFN GIT-CD-LABELFN GIT-CD-MENUFN)
        (INITVARS (FROMGITN 0))
        
        (* ;; "")

        
        (* ;; "Utilities")

        (FNS CDGITDIR GIT-COMMAND GITORIGIN GIT-INITIALS)))



(* ;; "Set up")


(FILESLOAD (SYSLOAD FROM VALUEOF LISPUSERSDIRECTORIES)
       COMPAREDIRECTORIES COMPARESOURCES COMPARETEXT PSEUDOHOSTS)



(* ;; "GITMEDLEYDIR and MYMEDLEYDIR collapse to MEDLEYDIR if not provided")


(RPAQ? GITMEDLEYDIR (SLASHIT (PACKFILENAME 'BODY (OR (UNIX-GETENV "GITMEDLEYDIR")
                                                     MEDLEYDIR)
                                    'HOST
                                    'UNIX)
                           T))

(RPAQ? MYMEDLEYDIR (UNSLASHIT (PACKFILENAME 'BODY (OR (AND (BOUNDP 'MYMEDLEYDIR)
                                                           MYMEDLEYDIR)
                                                      (UNIX-GETENV "MYMEDLEYDIR")
                                                      MEDLEYDIR)
                                     'HOST
                                     'DSK)
                          T))

(RPAQ? MYMEDLEYHOST 'MM)

(RPAQ? GITMEDLEYHOST 'GIT)

(RPAQ? GIT-IGNORE-FILES '(EXPORTS.ALL RDSYS RDSYS.LCOM))

(RPAQ? GIT-IGNORE-DIRECTORIES '(loadups patches tmp fontsold deleted clos cltl2))

(RPAQ? GIT-MERGE-COMPARES T)

(PSEUDOHOST MYMEDLEYHOST MYMEDLEYDIR)

(PSEUDOHOST GITMEDLEYHOST GITMEDLEYDIR)
(DEFINEQ

(GIT-CLONEP
  [LAMBDA (HOST/DIR NOERROR)                                 (* ; "Edited  5-Feb-2022 11:35 by rmk")

    (* ;; 
    "Returns the canonical git pseudohost for HOST/DIR, NIL if it doesn't denote a git clone.  ")

    (CL:UNLESS HOST/DIR
        (SETQ HOST/DIR '{GIT}))
    (CL:UNLESS (EQ (CHARCODE {)
                   (CHCON1 HOST/DIR))
        (SETQ HOST/DIR (CONCAT "{" HOST/DIR "}")))
    (SETQ HOST/DIR (TRUEFILENAME HOST/DIR))
    (CL:UNLESS (MEMB (NTHCHARCODE HOST/DIR -1)
                     (CHARCODE (/ > < })))
        (SETQ HOST/DIR (CONCAT HOST/DIR "/")))
    (IF (DIRECTORYNAMEP (CONCAT HOST/DIR ".git/"))
        THEN (PSEUDOFILENAME HOST/DIR)
      ELSEIF NOERROR
        THEN NIL
      ELSE (ERROR (PSEUDOFILENAME HOST/DIR)
                  "is not a git clone"])
)



(* ;; "")




(* ;; "Lisp exec commands")


(DEFCOMMAND gmc (SUBDIR . OTHERS)

   (* ;; "Compares the specified local git-medley subdirectories against my working Medley.  ")

    (GIT-COMPARE-WITH-MYMEDLEY (AND SUBDIR (CONS SUBDIR OTHERS))
           NIL NIL NIL NIL T))

(DEFCOMMAND bbc (BRANCH1 BRANCH2 LOCAL)

   (* ;; "Compares 2 git branches.  Defaults to local/ if LOCAL, otherwise defaults to origin/.  BRANCH2 defaults to master (origin/ or local/ depending on LOCAL)")

    (GIT-COMPARE-BRANCHES BRANCH1 BRANCH2 LOCAL))

(DEFCOMMAND prc (REMOTEBRANCH DRAFTS)

   (* ;; "Compares REMOTEBRANCH against origin/master, for pull-request assessment")

    (LET ((RB REMOTEBRANCH)
          (DR DRAFTS))
         (CL:WHEN (MEMB (U-CASE RB)
                        '(DRAFT DRAFTS))
             (SETQ RB NIL)
             (SETQ DR T))
         (IF RB
             THEN (GIT-COMPARE-BRANCHES RB 'origin/master)
           ELSE (GIT-COMPARE-BRANCHES (PICK-BRANCH
                                       (OR [FOR PR IN (GIT-PULL-REQUESTS T DR)
                                              COLLECT (LIST (CL:IF (MEMB 'DRAFT PR)
                                                                (CONCAT (CADDR PR)
                                                                       " (draft)")
                                                                (CADDR PR))
                                                            (CADDR PR)
                                                            (CONCAT " " (CADR PR)
                                                                   "  #"
                                                                   (CAR PR]
                                           'REMOTE)
                                       "Pull requests")
                       'origin/master NIL))))

(DEFCOMMAND cob (BRANCH)

   (* ;; "Switches to BRANCH. Defaults to my current branch, T means my next branch (under wherever we are now ")

    (SELECTQ (U-CASE BRANCH)
        (NIL (GIT-CHECKOUT (GIT-MY-CURRENT-BRANCH)))
        ((T NEW) 
             (GIT-MAKE-BRANCH))
        (GIT-CHECKOUT BRANCH)))

(DEFCOMMAND b? (BRANCH) (GIT-WHICH-BRANCH))



(* ;; "")




(* ;; "File correspondents")

(DEFINEQ

(ALLSUBDIRS
  [LAMBDA (HOST1 HOST2)

    (* ;; 
    "Edited 25-Feb-2022 21:57 by rmk: the union of the subdirectories that exist under all the hosts")

    (* ;; "Returns the union of the subdirectories that exist under all the hosts")

    (LET ((HOSTS (MKLIST HOST1))
          (FILING.ENUMERATION.DEPTH 1)
          VAL)
         (DECLARE (SPECVARS FILING.ENUMERATION.DEPTH))
         (CL:WHEN HOST2 (PUSHNEW HOSTS HOST2))
         (CL:UNLESS HOSTS
             (SETQ HOSTS (LIST MYMEDLEYHOST GITMEDLEYHOST)))
         (SORT (FOR H VAL IN HOSTS
                  JOIN (FOR F IN (FILDIR (PACKFILENAME 'HOST H 'BODY '*)) WHEN (DIRECTORYNAMEP F)
                          UNLESS (OR [EQ (CHARCODE %.)
                                         (CHCON1 (SETQ D (FILENAMEFIELD F 'DIRECTORY]
                                     (THEREIS SKIP IN GIT-IGNORE-DIRECTORIES
                                        SUCHTHAT (STRPOS SKIP D 1 NIL T NIL FILEDIRCASEARRAY)))
                          DO (SETQ D (UNSLASHIT (L-CASE D)))
                             (CL:UNLESS (MEMBER D VAL)
                                    (PUSH VAL D))) FINALLY (RETURN VAL])

(MEDLEYSUBDIRS
  [LAMBDA (MEDLEYHOST ALLSUBDIRS)                            (* ; "Edited  4-Feb-2022 18:06 by rmk")
    (CL:UNLESS MEDLEYHOST (SETQ MEDLEYHOST MYMEDLEYHOST))
    (FOR D IN (OR ALLSUBDIRS (ALLSUBDIRS)) COLLECT (UNSLASHIT (PACKFILENAME 'HOST MEDLEYHOST
                                                                     'DIRECTORY D)
                                                          T])

(GITSUBDIRS
  [LAMBDA (GITHOST ALLSUBDIRS)                               (* ; "Edited  4-Feb-2022 18:06 by rmk")
    (CL:UNLESS GITHOST (SETQ GITHOST GITMEDLEYHOST))
    (FOR D IN (OR ALLSUBDIRS (ALLSUBDIRS)) COLLECT (SLASHIT (PACKFILENAME 'HOST GITHOST 'DIRECTORY D)
                                                          T])
)
(DEFINEQ

(TOGIT
  [LAMBDA (MFILES)                                           (* ; "Edited  4-Feb-2022 18:08 by rmk")
                                                             (* ; "Edited  2-Feb-2022 18:56 by rmk")
                                                             (* ; "Edited 19-Jan-2022 23:35 by rmk")
                                                             (* ; "Edited 18-Jan-2022 16:33 by rmk")
                                                             (* ; "Edited 13-Jan-2022 15:47 by rmk")

    (* ;; "Copies MFILES to {GIT}. We do a sanity check to make sure particular MFILE is the latest version--we may have created another one without revising the directory browser.")

    (CL:WHEN (STRPOS "master" (GIT-WHICH-BRANCH))
           (ERROR "Can't copy to the master branch"))
    (FOR MF GF DEST INSIDE MFILES COLLECT (SETQ MF (OR (FINDFILE MF NIL (MEDLEYSUBDIRS))
                                                       (ERROR "FILE NOT FOUND" MF)))
                                        (CL:UNLESS (STRING.EQUAL MF (INFILEP (PACKFILENAME
                                                                              'VERSION NIL
                                                                              'BODY MF))
                                                          FILEDIRCASEARRAY)
                                            (FLASHWINDOW T)
                                            (PRIN3 (CONCAT MF " is not the latest version!")
                                                   T)
                                            (ERROR!))
                                        (SETQ GF (GFILE4MFILE MF))
                                        (PRIN3 (IF (SETQ DEST (COPYFILE MF GF))
                                                   THEN (CONCAT "Copied to " GF)
                                                 ELSE (FLASHWINDOW T)
                                                      (CONCAT MF " cannot be copied"))
                                               T)
                                        DEST])

(FROMGIT
  [LAMBDA (GFILES)                                           (* ; "Edited  4-Feb-2022 18:08 by rmk")
                                                             (* ; "Edited 18-Jan-2022 16:31 by rmk")
    (FOR GF MF DEST INSIDE GFILES COLLECT (SETQ GF (OR (FINDFILE GF NIL (GITSUBDIRS))
                                                       (ERROR "FILE NOT FOUND" GF)))
                                        (SETQ MF (MFILE4GFILE GF))
                                        (PRIN3 (IF (SETQ DEST (COPYFILE GF MF))
                                                   THEN (CONCAT "Copied to " DEST)
                                                        DEST
                                                 ELSE (FLASHWINDOW T)
                                                      (CONCAT GF " cannot be copied"))
                                               T)
                                        DEST])

(GIT-DELETE-FILE
  [LAMBDA (FILE)                                             (* ; "Edited 18-Jan-2022 23:07 by rmk")
                                                             (* ; "Edited 19-Dec-2021 16:11 by rmk")
                                                             (* ; "Edited 16-Dec-2021 13:00 by rmk")

    (* ;; "This deletes a file in the local checkout git directory {UNIX}...  FILE has to already be a full file name, for safety.")

    (* ;; "Since git files are on UNIX, we don't have to worry about older version numbers. ")

    (* ;; "We could make this undoable by copying it to deleted/, but git also can restore.")

    (CL:UNLESS (OR (EQ GITMEDLEYHOST (FILENAMEFIELD FILE 'HOST))
                   (STRPOS GITMEDLEYDIR FILE 1 NIL T NIL FILEDIRCASEARRAY))
           (ERROR "NOT A GIT-CLONE FILE" FILE))
    (DELFILE FILE])

(MYMEDLEY-DELETE-FILES
  [LAMBDA (FILE)                                             (* ; "Edited 18-Jan-2022 23:02 by rmk")
                                                             (* ; "Edited 19-Dec-2021 23:33 by rmk")

    (* ;; "FILE is presumably the latest version of a file in the MyMedley directory, and we are presumably removing all versions of that file.  If we left older versions, we would really trash ourselves.")

    (* ;; "But to guard against mistakes, %"deletion%" consists of moving all versions of the file from its current location to a deleted/ subdirectory of MEDLEYDIR, one that does not correspond to a git subdirectory.")

    (SETQ FILE (CONTRACT.PH FILE MYMEDLEYHOST))
    (CL:WHEN (EQ MYMEDLEYHOST (FILENAMEFIELD FILE 'HOST))
        (FOR F IN (DREVERSE (FILDIR (PACKFILENAME 'VERSION '* 'BODY FILE)))
           COLLECT 

                 (* ;; 
                 "Delete the earlier ones first, if it goes bad, you don't want them to persist")

                 (CL:UNLESS (RENAMEFILE F (PACKFILENAME 'DIRECTORY (CONCAT "deleted>"
                                                                          (FILENAMEFIELD F
                                                                                 'DIRECTORY))
                                                 'BODY F))
                        (ERROR "Could not delete " F))
                 F))])
)
(DEFINEQ

(MYMEDLEYSUBDIR
  [LAMBDA (SUBDIR STAR HOST)                                 (* ; "Edited 26-Feb-2022 11:57 by rmk")
                                                             (* ; "Edited 21-Jan-2022 15:18 by rmk")
    (UNSLASHIT (PACK* (PACKFILENAME 'HOST (OR HOST MYMEDLEYHOST)
                             'DIRECTORY SUBDIR)
                      (CL:IF STAR
                          "*"
                          "")])

(GITSUBDIR
  [LAMBDA (SUBDIR STAR HOST)                                 (* ; "Edited 26-Feb-2022 11:56 by rmk")
    (SLASHIT (PACK* (PACKFILENAME 'HOST (OR HOST GITMEDLEYHOST)
                           'DIRECTORY SUBDIR)
                    (CL:IF STAR
                        "*"
                        "")])

(STRIPDIR
  [LAMBDA (FILE DIRECTORY)                                   (* ; "Edited 18-Jan-2022 16:09 by rmk")
                                                             (* ; "Edited  8-Nov-2021 11:50 by rmk:")
    (IF (STRPOS DIRECTORY FILE 1 NIL T NIL FILEDIRCASEARRAY)
        THEN (SUBSTRING FILE (ADD1 (NCHARS DIRECTORY)))
      ELSE FILE])

(STRIPHOST
  [LAMBDA (NAME)                                             (* ; "Edited 18-Jan-2022 15:37 by rmk")
    (LET ((POS (STRPOS "}" NAME)))
         (CL:IF POS
             (SUBSTRING NAME (ADD1 POS))
             NAME)])

(STRIPNAME
  [LAMBDA (FILE)

    (* ;; "Edited  5-Feb-2022 08:38 by rmk: the name/ext/version of FILE without disturbing host or directory.  Strips everything after last / >")

    (* ;; "Removes the name/ext/version of FILE without disturbing host or directory.  Strips everything after last / >")

    (FOR I LASTDIRPOS FROM 1 DO (SELCHARQ (NTHCHARCODE FILE I)
                                     ((> < /) 
                                          (SETQ LASTDIRPOS I))
                                     (NIL (RETURN (CL:IF LASTDIRPOS
                                                      (SUBSTRING FILE 1 LASTDIRPOS)
                                                      FILE)))
                                     NIL])
)
(DEFINEQ

(GFILE4MFILE
  [LAMBDA (MFILE GITHOST)                                    (* ; "Edited  4-Feb-2022 18:04 by rmk")
    (SLASHIT (PACKFILENAME 'HOST (OR GITHOST GITMEDLEYHOST)
                    'VERSION NIL 'BODY MFILE)
           T])

(MFILE4GFILE
  [LAMBDA (GFILE MHOST)                                      (* ; "Edited  4-Feb-2022 18:04 by rmk")
                                                             (* ; "Edited 18-Jan-2022 15:24 by rmk")
    (UNSLASHIT (PACKFILENAME 'HOST (OR MHOST MYMEDLEYHOST)
                      'VERSION NIL 'BODY GFILE])

(GIT-REPO-FILENAME
  [LAMBDA (GFILE)                                            (* ; "Edited 26-Feb-2022 12:25 by rmk")
                                                             (* ; "Edited 18-Jan-2022 15:42 by rmk")

    (* ;; "Returns the string that the repo expects for a file name.  {GIT} or GITMEDLEYDIR is stripped, brackets go to slashes, subdirectories are lower cased, an initial / and a final period is remove.")

    (SETQ GFILE (SLASHIT (IF (EQ GITMEDLEYHOST (FILENAMEFIELD GFILE 'HOST))
                             THEN (STRIPHOST GFILE)
                           ELSE (STRIPDIR GFILE GITMEDLEYDIR))
                       T))
    (CL:WHEN (EQ (CHARCODE /)
                 (CHCON1 GFILE))
        (SETQ GFILE (SUBSTRING GFILE 2)))
    (CL:WHEN (EQ (CHARCODE %.)
                 (NTHCHARCODE GFILE -1))
        (SETQ GFILE (SUBSTRING GFILE 1 -2)))
    GFILE])
)



(* ;; "")




(* ;; "Git commands")

(DEFINEQ

(GIT-COMMIT
  [LAMBDA (FILES TITLE MESSAGE)                             (* ; "Edited 16-Nov-2021 08:06 by rmk:")
                                                            (* ; "Edited  2-Nov-2021 21:26 by rmk:")

    (* ;; "Commits files that are already in the (non-master) current git branch.")

    (CL:WHEN (STREQUAL (GIT-WHICH-BRANCH)
                    "master")
           (ERROR "Cannot commit to the master branch"))
    (LET (GFILES)
         (SETQ GFILES (FOR F GF INSIDE FILES COLLECT (SETQ GF (INFILEP (GFILE4MFILE F])

(GIT-PUSH
  [LAMBDA (BRANCH)                                           (* ; "Edited  8-Dec-2021 22:32 by rmk")
                                                             (* ; "Edited 16-Nov-2021 08:06 by rmk:")
                                                             (* ; "Edited  2-Nov-2021 21:34 by rmk:")
    (CL:UNLESS BRANCH
        (SETQ BRANCH (GIT-WHICH-BRANCH)))
    (CL:WHEN (STREQUAL "master" (GIT-WHICH-BRANCH))
           (ERROR "Cannot push the master branch"))
    (GIT-COMMAND (CONCAT "git push " BRANCH])

(GIT-PULL
  [LAMBDA (BRANCH)                                           (* ; "Edited  8-Dec-2021 22:47 by rmk")
                                                             (* ; "Edited 16-Nov-2021 08:06 by rmk:")
                                                             (* ; "Edited  2-Nov-2021 21:34 by rmk:")
    (GIT-COMMAND (CONCAT "git pull " (OR BRANCH (GIT-WHICH-BRANCH])

(GIT-BRANCH-DIFF
  [LAMBDA (BRANCH1 BRANCH2)

    (* ;; "Edited 23-Feb-2022 17:45 by rmk: returns an ALIST that classifies how the files in BRANCH1 and BRANCH2 differ (changed, renamed, added, deleted, copied).")

    (* ;; "This returns an ALIST that classifies how the files in BRANCH1 and BRANCH2 differ (changed, renamed, added, deleted, copied).")

    (CL:UNLESS BRANCH1 (SETQ BRANCH1 "origin/master"))
    (CL:UNLESS BRANCH2 (SETQ BRANCH2 "origin/master"))
    (GIT-REMOTE-UPDATE)
    (LET ([MERGE (CAR (GIT-COMMAND (CONCAT "git merge-base " BRANCH1 " " BRANCH2]
          LINES POS)
         (CL:WHEN (STRPOS "fatal" MERGE)
             (ERROR (CONCAT "merge-base failed for " (LIST BRANCH1 BRANCH2))))
         (SETQ LINES (GIT-COMMAND (CONCAT "git diff --name-status -C --find-copies-harder " MERGE " "
                                         BRANCH1)))
         (CL:WHEN (SETQ POS (STRPOS "fatal: ambiguous argument '" (CAR LINES)
                                   1 NIL T T))
             (ERROR "Unknown branch " (IF (STRPOS BRANCH1 (CAR LINES)
                                                 POS NIL T)
                                          THEN BRANCH1
                                        ELSE BRANCH2)))
         (FOR L ADDED DELETED RENAMED CHANGED COPIED IN LINES
            DO (SELCHARQ (CHCON1 L)
                    (A (CL:IF (EQ (CHARCODE TAB)
                                  (NTHCHARCODE L 2))
                           (PUSH ADDED (SUBSTRING L 3))
                           (ERROR "ADDED NOT RECOGNIZED" L)))
                    (D (CL:IF (EQ (CHARCODE TAB)
                                  (NTHCHARCODE L 2))
                           (PUSH DELETED (SUBSTRING L 3))
                           (ERROR "DELETED NOT RECOGNIZED" L)))
                    (M (CL:IF (SETQ POS (STRPOS "	" L))
                           (PUSH CHANGED (SUBSTRING L (ADD1 POS)))
                           (ERROR "CHANGED NOT RECOGNIZED" L)))
                    (C (HELP "COPY NOT UNDERSTOOD" L)
                       (IF (SETQ POS (STRPOS "	" L))
                           THEN [PUSH COPIED (LIST [SUBSTRING L (ADD1 POS)
                                                          (SUB1 (SETQ POS (STRPOS "	" L (ADD1 POS]
                                                   (SUBSTRING L (ADD1 POS]
                         ELSE (HELP "COPY NOT UNDERSTOOD" L)))
                    (R (IF (AND (EQ (CHARCODE TAB)
                                    (NTHCHARCODE L 5))
                                (SETQ POS (STRPOS "	" L 7)))
                           THEN [PUSH RENAMED (LIST (SUBSTRING L 6 (SUB1 POS))
                                                    (SUBSTRING L (ADD1 POS))
                                                    (OR (FIXP (SUBATOM L 2 4))
                                                        (HELP "R without a number" L]
                         ELSE (HELP "RENAME NOT RECOGNIZED" L)))
                    (w (CL:UNLESS (STRPOS "warning: " L 1)
                              (HELP "UNRECOGNZED GIT LINE" L))
                       (CL:UNLESS (EQ 'Y (ASKUSER NIL NIL (CONCAT L " Ignore remaining files? ")))
                              (ERROR!)))
                    (HELP "Unrecognized git-diff code" (NTHCHAR L 1)))
            FINALLY (CL:WHEN ADDED
                        (PUSH $$VAL (CONS 'ADDED ADDED)))
                  (CL:WHEN DELETED
                      (PUSH $$VAL (CONS 'DELETED DELETED)))
                  (CL:WHEN RENAMED
                      (PUSH $$VAL (CONS 'RENAMED RENAMED)))
                  (CL:WHEN CHANGED
                      (PUSH $$VAL (CONS 'CHANGED CHANGED)))
                  (CL:WHEN COPIED
                      (PUSH $$VAL (CONS 'COPIED COPIED)))])

(GIT-APPROVAL
  [LAMBDA (BRANCH)                                          (* ; "Edited 19-Nov-2021 15:08 by rmk:")
    (GIT-ADD-WORKTREE BRANCH T)
    (GIT-ADD-WORKTREE "master" T])

(GIT-GET-FILE
  [LAMBDA (BRANCH GITFILE LOCALFILE NOERROR)

    (* ;; "Edited 24-Feb-2022 19:42 by rmk: the stream, not the name because of the NODIRCORE case.")

    (* ;; "Returns the stream, not the name because of the NODIRCORE case.")

    (* ;; "If  GITFILE in (remote) BRANCH exists, it is copied to LOCALFILE and LOCALFILE is returned.  If it doesn't exist, return value is NIL if NOERROR, otherwise an ERROR.")

    (CL:WITH-OPEN-STREAM (s (CREATE-PROCESS-STREAM (CONCAT (CDGITDIR)
                                                          "git show " BRANCH ":" GITFILE)))
           (SETFILEINFO s 'ENDOFSTREAMOP (FUNCTION NILL))
           (LET (BYTES)
                (IF (FOR I B C FROM 1 WHILE (SETQ C (NTHCHARCODE "fatal: path '" I))
                       DO 
                          (* ;; 
                          "Returns NIL if we run off the fatal string with a match, otherwise T")

                          (CL:UNLESS (SETQ B (\BIN s))
                                 (RETURN T))
                          (PUSH BYTES B)
                          (CL:UNLESS (EQ B C)
                                 (RETURN T)))
                    THEN 
                         (* ;; "Don't open STREAM until we know the file is real")

                         (CL:WITH-OPEN-FILE (STREAM (OR LOCALFILE '{NODIRCORE)
                                                   :IF-EXISTS :NEW-VERSION :DIRECTION :IO)
                                (FOR B IN (DREVERSE BYTES) DO (\BOUT STREAM B))
                                [DO (\BOUT STREAM (OR (\BIN s)
                                                      (RETURN]
                                (SETFILEINFO STREAM 'CREATIONDATE (OR (FILEDATE STREAM T)
                                                                      (FILEDATE STREAM)
                                                                      (GIT-FILE-DATE GITFILE BRANCH))
                                       )
                                STREAM)
                  ELSEIF NOERROR
                    THEN NIL
                  ELSE (ERROR "GIT FILE NOT FOUND" GITFILE])

(GIT-FILE-EXISTS?
  [LAMBDA (BRANCH GITFILE)                                   (* ; "Edited 10-Feb-2022 20:55 by rmk")
                                                             (* ; "Edited 10-Dec-2021 21:30 by rmk")

    (* ;; "T if GITFILE exists on BRANCH.  If s is EOFP, the file exists but is empty")

    (CL:WITH-OPEN-STREAM (s (CREATE-PROCESS-STREAM (CONCAT (CDGITDIR)
                                                          "git show " BRANCH ":" GITFILE)))
           (SETFILEINFO s 'ENDOFSTREAMOP (FUNCTION NILL))
           (NOT (FOR I C FROM 1 WHILE (SETQ C (NTHCHARCODE "fatal: path '" I))
                   ALWAYS (EQ (BIN s)
                              C])

(GIT-REMOTE-UPDATE
  [LAMBDA (DOIT)                                             (* ; "Edited 16-Dec-2021 10:45 by rmk")
                                                             (* ; "Edited  4-Dec-2021 21:49 by rmk")
                                                             (* ; "Edited  2-Dec-2021 08:44 by rmk:")
                                                             (* ; "Edited 24-Nov-2021 16:34 by rmk:")
    (DECLARE (USEDFREE LAST-REMOTE-UPDATE-IDATE))

    (* ;; "Because git hangs on this (and other things), do this no more than once a day")

    (CL:WHEN [OR DOIT (NOT (BOUNDP 'LAST-REMOTE-UPDATE-IDATE))
                 (IGREATERP (IDIFFERENCE (IDATE)
                                   LAST-REMOTE-UPDATE-IDATE)
                        (CONSTANT (TIMES 24 60 60 1000]
        (PRINTOUT T "Updating from remote, local branch is " (GIT-WHICH-BRANCH)
               T)
        (PROG1 (GIT-COMMAND "git remote update origin")
            (SETQ LAST-REMOTE-UPDATE-IDATE (IDATE))))])

(GIT-REMOTE-ADD
  [LAMBDA (NAME URL)                                         (* ; "Edited 31-Jan-2022 13:53 by rmk")
    (LET [(RESULT (GIT-COMMAND (CONCAT "git remote add " NAME " " URL]

         (* ;; "Does it return an error line?  What if URL is not good? ")

         (CAR RESULT])

(GIT-FILE-DATE
  [LAMBDA (GFILE BRANCH)                                     (* ; "Edited  3-Jan-2022 19:43 by rmk")
    (LET [(DATE (CAR (GIT-COMMAND (CONCAT "git log -1 --pretty=%"format:%%cD%" "
                                         (CL:IF BRANCH
                                             (CONCAT BRANCH " -- ")
                                             "")
                                         (GIT-REPO-FILENAME GFILE T))
                            NIL T]
         DATE])
)



(* ;; "")




(* ;; "Branches")

(DEFINEQ

(GIT-CHECKOUT
  [LAMBDA (BRANCH)                                          (* ; "Edited  2-Nov-2021 22:40 by rmk:")
    (CAR (GIT-COMMAND (CONCAT "git checkout " (OR BRANCH "master")
                             "; git pull"])

(GIT-WHICH-BRANCH
  [LAMBDA NIL                                                (* ; "Edited 14-Dec-2021 23:39 by rmk")
                                                             (* ; "Edited 12-Dec-2021 11:56 by rmk")
                                                             (* ; "Edited  6-Nov-2021 12:11 by rmk:")
                                                             (* ; "Edited  3-Oct-2021 15:32 by rmk:")

    (* ;; "Returns the current (local) branch")

    (MKATOM (CONCAT "local/" (CAR (GIT-COMMAND "git rev-parse --abbrev-ref HEAD"])

(GIT-MAKE-BRANCH
  [LAMBDA (NAME TITLESTRING)                                 (* ; "Edited 26-Jan-2022 12:12 by rmk")
                                                             (* ; "Edited 19-Jan-2022 23:25 by rmk")
                                                             (* ; "Edited  8-Jan-2022 09:48 by rmk")
                                                            (* ; "Edited  2-Nov-2021 21:28 by rmk:")

    (* ;; " The new branch is directly under the currently checked out branch.  Maybe it should always make it under master?")

    (* ;; 
    "This makes a new branch with name NAME: TITLESTRING, or just NAME if TITLESTRING is not given.")

    (* ;; "(GIT-MAKE-BRANCH) makes and checks out the next initialsn branch.")

    (CL:UNLESS NAME
        (SETQ NAME (GIT-MY-NEXT-BRANCH)))
    (CL:WHEN TITLESTRING
        (SETQ NAME (CONCAT NAME (CONCAT ": " TITLESTRING))))
    (LET [(UNDER (GIT-WHICH-BRANCH))
          (RESULT (GIT-COMMAND (CONCAT "git checkout -b " NAME]
         (IF (STREQUAL (CAR RESULT)
                    (CONCAT "Switched to a new branch '" NAME "'"))
             THEN (CONCAT (CAR RESULT)
                         " under " UNDER)
           ELSEIF (STREQUAL (CAR RESULT)
                         (CONCAT "fatal: A branch named '" NAME "' already exists."))
             THEN (ERROR NAME "already exists")
           ELSE (HELP "Unexpected git result" RESULT])

(GIT-BRANCHES
  [LAMBDA (WHERE)                                            (* ; "Edited 24-Feb-2022 21:20 by rmk")
                                                             (* ; "Edited  8-Dec-2021 08:43 by rmk")
                                                            (* ; "Edited 17-Nov-2021 18:20 by rmk:")
                                                            (* ; "Edited 16-Nov-2021 09:21 by rmk:")

    (* ;; 
   "Strips of the %"* %" that indicates the current branch and the 2-space padding on other branches")

    (LET [(LOCAL (CL:WHEN (MEMB (U-CASE WHERE)
                                '(NIL ALL LOCAL))
                        (GIT-COMMAND "git branch")))
          (REMOTE (CL:WHEN (MEMB (U-CASE WHERE)
                                 '(NIL ALL REMOTE T))
                         (GIT-COMMAND "git branch -r"]
         (SORT (FOR B IN (APPEND LOCAL REMOTE) COLLECT (SUBATOM B 3])

(GIT-BRANCH-EXISTS?
  [LAMBDA (BRANCH WHERE NOERROR)                             (* ; "Edited 16-Dec-2021 08:50 by rmk")
                                                             (* ; "Edited  8-Dec-2021 08:44 by rmk")
                                                             (* ; "Edited 19-Nov-2021 15:13 by rmk:")
                                                             (* ; "Edited 17-Nov-2021 18:24 by rmk:")

    (* ;; "Returns the canonical name of the branch (xxx or origin/xxx) depending on whether BRANCH is local/xxx or origin/xxx")
                                                             (* ; "Edited 16-Nov-2021 09:25 by rmk:")
    (IF (STRPOS "origin/" BRANCH)
        THEN (SETQ WHERE 'REMOTE)
      ELSEIF (STRPOS "local/" BRANCH 1 NIL T)
        THEN (SETQ WHERE 'LOCAL)
             (SETQ BRANCH (SUBATOM BRANCH 7)))
    (IF (CAR (MEMB (MKATOM BRANCH)
                   (GIT-BRANCHES WHERE)))
      ELSEIF (NOT NOERROR)
        THEN (ERROR "Unknown branch" BRANCH])

(PICK-BRANCH
  [LAMBDA (BRANCHES TITLE)                                   (* ; "Edited 25-Feb-2022 09:02 by rmk")
    (MENU (CREATE MENU
                 TITLE _ (OR TITLE 'Branches)
                 ITEMS _ (OR (LISTP BRANCHES)
                             (GIT-BRANCHES BRANCHES))
                 MENUFONT _ DEFAULTFONT])

(GIT-PULL-REQUESTS
  [LAMBDA (ALLINFO INCLUDEDRAFTS)                            (* ; "Edited 25-Feb-2022 09:26 by rmk")
    (FOR LINE TAB1 TAB2 TAB3 VAL IN (GIT-COMMAND "gh pr list" T)
       WHEN [AND (SETQ TAB1 (STRPOS "	" LINE))
                 (SETQ TAB2 (STRPOS "	" LINE (ADD1 TAB1)))
                 (SETQ TAB3 (STRPOS "	" LINE (ADD1 TAB2)))
                 (OR INCLUDEDRAFTS (NEQ 'DRAFT (SUBATOM LINE (ADD1 TAB3]
       COLLECT (IF ALLINFO
                   THEN `[,(SUBATOM LINE 1 (SUB1 TAB1))
                          ,(SUBSTRING LINE (ADD1 TAB1)
                                  (SUB1 TAB2))
                          ,(SUBSTRING LINE (ADD1 TAB2)
                                  (SUB1 TAB3))
                          ,(SUBATOM LINE (ADD1 TAB3]
                 ELSE (SUBATOM LINE (ADD1 TAB2)
                             (SUB1 TAB3])
)



(* ;; "My branches")

(DEFINEQ

(GIT-MY-CURRENT-BRANCH
  [LAMBDA NIL                                                (* ; "Edited 19-Jan-2022 13:22 by rmk")
    (CAR (LAST (GIT-MY-BRANCHES])

(GIT-MY-BRANCHP
  [LAMBDA (BRANCH)                                           (* ; "Edited 26-Jan-2022 11:41 by rmk")
                                                             (* ; "Edited 19-Jan-2022 13:22 by rmk")

    (* ;; "Returns n if BRANCH is INITIALSn (local or origin), possibly followed by a trailing comment after colon or space.")

    (CL:UNLESS BRANCH
        (SETQ BRANCH (GIT-WHICH-BRANCH)))
    (LET* ((INITS (GIT-INITIALS))
           (INC (NCHARS INITS))
           (SPOS (ADD1 (OR (STRPOS "/" BRANCH)
                           0)))
           (EPOS))
          (CL:WHEN (STRPOS INITS BRANCH SPOS NIL T NIL UPPERCASEARRAY)
              (CL:WHEN (SETQ EPOS (\UPF.NEXTPOS (CHARCODE (%: SPACE))
                                         BRANCH SPOS))
                     (ADD EPOS -1))
              (SUBATOM BRANCH (IPLUS SPOS INC)
                     EPOS))])

(GIT-MY-NEXT-BRANCH
  [LAMBDA NIL                                                (* ; "Edited 19-Jan-2022 23:14 by rmk")
                                                             (* ; "Edited  8-Jan-2022 09:43 by rmk")

    (* ;; "Figures out what my next incremental branch would be.  ")

    (PACK* (GIT-INITIALS)
           (ADD1 (OR (GIT-MY-BRANCHP (GIT-MY-CURRENT-BRANCH))
                     0])

(GIT-MY-BRANCHES
  [LAMBDA NIL                                                (* ; "Edited 19-Jan-2022 13:20 by rmk")
                                                             (* ; "Edited  8-Jan-2022 09:53 by rmk")
                                                             (* ; "Edited 12-Dec-2021 11:46 by rmk")

    (* ;; "This returns only local branch names:  xyzn and not origin/xyzn or local/xyzn")

    (* ;; "If INITIALS is xyz or xyz:, returns xyzn where xyzn is a branch and n is greater than m for all other branches xyzm.  xyzn may not be be the current branch.")

    (* ;; "The return list is sorted so that lower n's come before later n's.  The last element is my current branch")

    (FOR B (INITS _ (GIT-INITIALS))
         INC IN (GIT-BRANCHES) FIRST (SETQ INC (NCHARS INITS))
       WHEN (STRPOS INITS B 1 NIL T NIL UPPERCASEARRAY) COLLECT B
       FINALLY (RETURN (SORT $$VAL (FUNCTION (LAMBDA (A B)
                                               (ILESSP (SUBATOM A (ADD1 INC))
                                                      (SUBATOM B (ADD1 INC])
)



(* ;; "")




(* ;; "Worktrees")

(DEFINEQ

(GIT-ADD-WORKTREE
  [LAMBDA (BRANCH REMOTEONLY)                                (* ; "Edited 12-Dec-2021 11:57 by rmk")
                                                             (* ; "Edited 25-Nov-2021 08:45 by rmk:")
                                                             (* ; "Edited 19-Nov-2021 19:01 by rmk:")
                                                             (* ; "Edited 17-Nov-2021 18:25 by rmk:")
    (SETQ BRANCH (GITORIGIN BRANCH (NOT REMOTEONLY)))
    (CL:UNLESS (OR (GIT-BRANCH-EXISTS? BRANCH NIL T)
                   (GIT-BRANCH-EXISTS? BRANCH T))
           (ERROR BRANCH "is not a git branch"))
    (CL:WHEN (STRING-EQUAL BRANCH (GIT-WHICH-BRANCH))
           (ERROR BRANCH "is the current branch"))
    (LET (LINES LOCALBRANCH)
         [SETQ LINES (GIT-COMMAND (IF (EQ 1 (STRPOS "origin/" BRANCH))
                                      THEN [SETQ LOCALBRANCH (SUBSTRING BRANCH
                                                                    (CONSTANT (ADD1 (NCHARS "origin/"
                                                                                           ]
                                           (CONCAT "git worktree add --guess-remote " (WORKTREEDIR
                                                                                       LOCALBRANCH)
                                                  " " BRANCH)
                                    ELSE (CONCAT "git worktree add " (WORKTREEDIR BRANCH)
                                                " " BRANCH]
         (CL:UNLESS (STRPOS "Preparing worktree" (CAR LINES)
                           1 NIL T)
                (ERROR "Could not create worktree for " BRANCH))
         BRANCH])

(GIT-REMOVE-WORKTREE
  [LAMBDA (BRANCH)                                          (* ; "Edited 17-Nov-2021 10:02 by rmk:")
    (GIT-BRANCH-EXISTS? BRANCH)
    (LET ((DIR (WORKTREEDIR BRANCH))
          LINES)
         (SETQ LINES (GIT-COMMAND (CONCAT "git worktree remove " DIR)))
         (CL:WHEN (STRPOS "fatal: " (CAR LINES)
                         1 NIL T)
                (ERROR "Could not remove worktree for " BRANCH))
         (AND NIL (DELFILE (CONCAT PATH "/.DS_Store"))
              (GIT-COMMAND (CONCAT "rmdir " DIR)))
         BRANCH])

(GIT-LIST-WORKTREES
  [LAMBDA NIL                                                (* ; "Edited 12-Dec-2021 12:13 by rmk")
                                                             (* ; "Edited 19-Nov-2021 18:53 by rmk:")

    (* ;; "The git command tells us what the clone thinks about it, but then we look to see what is actually in our worktrees directory, to make sure that the subdirectory wasn't deleted in a wy that the clone didn't know about.")

    (SORT (FOR L POS IN (GIT-COMMAND "git worktree list")
             WHEN (AND (SETQ POS (STRPOS "/worktrees/" L NIL NIL NIL T))
                       (STRPOS "(detached HEAD)" L)) COLLECT (SETQ L (SUBSTRING L POS))
                                                           (SUBATOM L 1 (SUB1 (STRPOS " " L])

(WORKTREEDIR
  [LAMBDA (BRANCH)                                           (* ; "Edited 18-Jan-2022 15:02 by rmk")
                                                             (* ; "Edited 25-Nov-2021 08:49 by rmk:")
                                                             (* ; "Edited 19-Nov-2021 20:56 by rmk:")
                                                             (* ; "Edited 17-Nov-2021 10:00 by rmk:")
    (CONCAT GITMEDLEYDIR "../worktrees/" (IF BRANCH
                                             THEN "/"
                                           ELSE ""])
)



(* ;; "")




(* ;; "Comparisons")

(DEFINEQ

(GIT-GET-DIFFERENT-FILES
  [LAMBDA (BRANCH1 BRANCH2 DIR1 DIR2)                        (* ; "Edited 24-Feb-2022 23:57 by rmk")
                                                             (* ; "Edited 23-Feb-2022 18:47 by rmk")
                                                             (* ; "Edited 12-Feb-2022 18:35 by rmk")
                                                             (* ; "Edited 23-Jan-2022 21:45 by rmk")
                                                             (* ; "Edited 11-Jan-2022 11:03 by rmk")
                                                             (* ; "Edited  5-Jan-2022 08:01 by rmk")

    (* ;; "Ask git for the files that differ between the branches, copy those files down to local DIR1 and DIR2, return the directories and a list of (dir1-file1 file2) mappings for renamed and copied files.")

    (SETQ BRANCH1 (GIT-BRANCH-EXISTS? BRANCH1))
    (SETQ BRANCH2 (GIT-BRANCH-EXISTS? BRANCH2))
    (LET
     ([MERGE (CAR (GIT-COMMAND (CONCAT "git merge-base " BRANCH1 " " BRANCH2]
      DIFFS MAPPINGS FROMGIT)

     (* ;; "Collapse them together for now")

     (SETQ DIFFS (GIT-BRANCH-DIFF BRANCH1 MERGE))

     (* ;; "DIFFS is an alist with keys ADDED, DELETED, CHANGED, MOVED")

     (CL:WHEN DIFFS
         (SETQ FROMGIT (PACK* '{FROMGIT (ADD FROMGITN 1)
                              '}))
         (PSEUDOHOST FROMGIT (CONCAT "{CORE}<gitfiles>" (DATE)
                                    ">"))

         (* ;; "UNSLASHIT because CORE doesn't know about slash")

         (CL:UNLESS DIR1
             (SETQ DIR1 (CONCAT FROMGIT "<" (UNSLASHIT BRANCH1)
                               ">")))
         (CL:UNLESS DIR2
             (SETQ DIR2 (CONCAT FROMGIT "<" (UNSLASHIT BRANCH2)
                               ">")))
         (FOR DLIST IN DIFFS
            DO
            (SELECTQ (CAR DLIST)
                (ADDED                                       (* ; 
                                                  "Shouldn't exist in MERGE, should exist in BRANCH1")
                       (FOR GFILE IN (CDR DLIST) DO (GIT-GET-FILE BRANCH1 GFILE (CONCAT DIR1 GFILE))))
                (DELETED                                     (* ; 
                                                  "Shouldn't exist in BRANCH1, should exist in MERGE")
                         (FOR GFILE IN (CDR DLIST) DO (GIT-GET-FILE MERGE GFILE (CONCAT DIR2 GFILE))))
                (CHANGED                                     (* ; "Should exist in both branches")
                         (FOR GFILE IN (CDR DLIST) DO (GIT-GET-FILE BRANCH1 GFILE (CONCAT DIR1 GFILE)
                                                             )
                                                      (GIT-GET-FILE MERGE GFILE (CONCAT DIR2 GFILE))))
                (RENAMED 
                         (* ;; "These entries are from-to filename pairs.  If (CADDR) is 100, only need to fetch one, mappings is returned so the connection can be reestablished higher up.  If renamed, it has disappared from the first location and appeared in the second.  The destination is in the CADR, the CAR file doesn't exist.  But we store the files in DIR1 because they are coming from branch1")

                         [FOR GFILE IN (CDR DLIST)
                            DO (IF (EQ (CADDR GFILE)
                                       100)
                                   THEN (PUSH MAPPINGS (LIST [FULLNAME (GIT-GET-FILE
                                                                        BRANCH1
                                                                        (CADR GFILE)
                                                                        (CONCAT DIR1 (CADR GFILE]
                                                             (CONCAT DIR2 (CAR GFILE))
                                                             'R))
                                 ELSE                        (* ; 
                                                             "Deleted from MERGE, added to BRANCH1")
                                      (GIT-GET-FILE MERGE (CAR GFILE)
                                             (CONCAT DIR1 (CAR GFILE)))
                                      (GIT-GET-FILE BRANCH1 (CADR GFILE)
                                             (CONCAT DIR2 (CADR GFILE])
                (COPIED 
                        (* ;; "Same issue as for renaming")

                        [FOR GFILE IN (CDR DLIST)
                           DO (PUSH MAPPINGS (LIST [FULLNAME (GIT-GET-FILE BRANCH1 (CADR GFILE)
                                                                    (CONCAT DIR1 (CADR GFILE]
                                                   (CONCAT DIR2 (CAR GFILE))
                                                   'C])
                (HELP "UNKNOWN GIT-DIFF TAG" DLIST)))
         (LIST DIR1 DIR2 MAPPINGS))])

(GIT-COMPARE-BRANCHES
  [LAMBDA (BRANCH1 BRANCH2 LOCAL)                            (* ; "Edited 22-Feb-2022 22:53 by rmk")
                                                             (* ; "Edited 19-Feb-2022 10:21 by rmk")
                                                             (* ; "Edited 13-Feb-2022 21:27 by rmk")
                                                             (* ; "Edited  2-Feb-2022 08:46 by rmk")
                                                             (* ; "Edited 28-Jan-2022 23:58 by rmk")
    (SETQ BRANCH1 (IF BRANCH1
                      THEN (GITORIGIN BRANCH1 LOCAL)
                    ELSE (GIT-WHICH-BRANCH)))
    (SETQ BRANCH2 (GITORIGIN (OR BRANCH2 "master")
                         LOCAL))
    (PRINTOUT T "Comparing all subdirectories of " BRANCH1 " and " BRANCH2 T)
    (LET (CDVALUE DIRS NENTRIES MAPPINGS)
         (PRINTOUT T "Fetching differences" T)
         (SETQ DIRS (GIT-GET-DIFFERENT-FILES BRANCH1 BRANCH2))
         (SETQ MAPPINGS (CADDR DIRS))
         (IF DIRS
             THEN (TERPRI T)
                  (SETQ CDVALUE (COMPAREDIRECTORIES (CAR DIRS)
                                       (CADR DIRS)
                                       '(> < ~= -* *-)
                                       '*>*.*)) 

                  (* ;; "We know that both sides come from Unix/unversioned, even if they have been copied into versioned FROMGIT, so we make a pass to remove the misleading ;1's.")

                  (* ;; 
                " Also, lower case the directories.  Perhaps can be done when the files are fetched?")

                  [CDMAP CDVALUE
                         (FUNCTION (LAMBDA (CDE)
                                     (DECLARE (USEDFREE INFO1 INFO2))
                                     (LET [(MAP (CL:UNLESS INFO2
                                                    (FIND M IN MAPPINGS
                                                       SUCHTHAT (STRING.EQUAL (CAR M)
                                                                       (FETCH (CDINFO FULLNAME)
                                                                          OF INFO1)
                                                                       FILEDIRCASEARRAY)))]
                                          (CL:WHEN INFO1
                                              (CHANGE (FETCH (CDINFO FULLNAME) OF INFO1)
                                                     (SLASHIT (CL:IF (STRPOS ";1" DATUM -2 NIL T)
                                                                  (SUBSTRING DATUM 1 -3)
                                                                  DATUM)
                                                            T)))
                                          (CL:WHEN INFO2
                                              (CHANGE (FETCH (CDINFO FULLNAME) OF INFO2)
                                                     (SLASHIT (CL:IF (STRPOS ";1" DATUM -2 NIL T)
                                                                  (SUBSTRING DATUM 1 -3)
                                                                  DATUM)
                                                            T)))
                                          (IF MAP
                                              THEN 

                                 (* ;; "This handles renames and copies.  We want the nominal source of a rename to be in the first column, even though the target location is the one that was fetched.")

                                                   (REPLACE (CDENTRY INFO2) OF CDE
                                                      WITH (CREATE CDINFO
                                                                  FULLNAME _ (CADR MAP)
                                                                  DATE _ ""
                                                                  LENGTH _ ""
                                                                  AUTHOR _ ""
                                                                  TYPE _ ""
                                                                  EOL _ ""))
                                                   (REPLACE (CDENTRY DATEREL) OF CDE
                                                      WITH (CADDR MAP]
                  (TERPRI T)
                  (IF (FETCH (CDVALUE CDENTRIES) OF CDVALUE)
                      THEN (SETQ LAST-BRANCH-CDVALUE CDVALUE)
                           (CDBROWSER CDVALUE (CONCAT "Compare " BRANCH1 " and " BRANCH2 "      "
                                                     (LENGTH (FETCH (CDVALUE CDENTRIES) OF CDVALUE))
                                                     " files")
                                  (LIST BRANCH1 BRANCH2)
                                  `(LABELFN GIT-CD-LABELFN BRANCH1 ,BRANCH1 BRANCH2 ,BRANCH2)
                                  NIL
                                  `(Compare See))
                           (SETQ NENTRIES (LENGTH (FETCH (CDVALUE CDENTRIES) OF CDVALUE)))
                           (LIST NENTRIES (CL:IF (EQ NENTRIES 1)
                                              'difference
                                              'differences))
                    ELSE '(0 differences))
           ELSE '(0 differences])

(GIT-COMPARE-WITH-MYMEDLEY
  [LAMBDA (SUBDIRS SELECT EXCLUDEDFILES TEDIT FIXDIRECTORYDATES UPDATE HOST1 HOST2)

    (* ;; 
    "Edited 26-Feb-2022 11:58 by rmk: my medley subdirectories with the current local git branch.")

    (* ;; "Compares my medley subdirectories with the current local git branch.")

    (CL:WHEN UPDATE (GIT-REMOTE-UPDATE))                     (* ; "Doesn't matter if we are looking only at local files in the current branch.  We aren't fetching or checking out.")
    (CL:WHEN (AND (LISTP SUBDIRS)
                  (NULL (CDR SUBDIRS)))
        (SETQ SUBDIRS (CAR SUBDIRS)))
    (SETQ SUBDIRS (L-CASE SUBDIRS))
    (PRINTOUT T "Comparing " (SELECTQ SUBDIRS
                                 (nil (SETQ SUBDIRS '(sources library lispusers)))
                                 (all (SETQ SUBDIRS (ALLSUBDIRS HOST1 HOST2))
                                      "ALL subdirectories")
                                 SUBDIRS)
           " of My Medley and "
           (GIT-WHICH-BRANCH)
           T)
    (for SUBDIR TITLE CDVAL (NENTRIES _ 0)
         (BRANCH2 _ (GIT-WHICH-BRANCH)) INSIDE SUBDIRS
       collect (TERPRI T)
             (SETQ CDVAL (COMPAREDIRECTORIES (MYMEDLEYSUBDIR SUBDIR T)
                                (GITSUBDIR SUBDIR T)
                                (OR SELECT '(> < ~= -* *-))
                                NIL GIT-IGNORE-FILES NIL NIL NIL FIXDIRECTORYDATES))
             [FOR CDE IN (FETCH CDENTRIES OF CDVAL)
                DO (CL:WHEN (FETCH INFO1 OF CDE)
                       (CHANGE (FETCH (CDINFO FULLNAME) OF (FETCH INFO1 OF CDE))
                              (UNSLASHIT DATUM T)))
                   (CL:WHEN (FETCH INFO2 OF CDE)
                       (CHANGE (FETCH (CDINFO FULLNAME) OF (FETCH INFO2 OF CDE))
                              (SLASHIT DATUM T)))]
             CDVAL
       finally

       (* ;; "Set up the browsers after everything has been done, otherwise if the user doesn't pay attention it might hang waiting for a region.")

       (CL:WHEN (AND (CDR $$VAL)
                     GIT-MERGE-COMPARES)
           (SETQ $$VAL (CDMERGE $$VAL))
           [SETQ SUBDIRS (CONCATLIST (FOR SUBDIR IN SUBDIRS COLLECT (CONCAT SUBDIR "  "])
       [for CDVAL TITLE IN $$VAL as SUBDIR inside SUBDIRS
          do (SETQ TITLE (CONCAT "Compare  My Medley  and  " BRANCH2 "      " SUBDIR "         "
                                (LENGTH (fetch (CDVALUE CDENTRIES) of CDVAL))
                                " files"))
             [if TEDIT
                 then [CDTEDIT CDVAL TITLE `("My Medley" ,BRANCH2]
               else (CDBROWSER CDVAL TITLE `("My Medley" ,BRANCH2)
                           `(BRANCH1 "My Medley" BRANCH2 ,BRANCH2 SUBDIR ,SUBDIR LABELFN 
                                   GIT-CD-LABELFN)
                           NIL
                           `(Compare See "" Copy% <- (|Delete ALL <-| GIT-CD-MENUFN)
                                   ,@(CL:UNLESS (STRPOS "master" BRANCH2)
                                         '("" Copy% -> (Delete% -> GIT-CD-MENUFN)))]
             (CONS (CONCAT SUBDIR "/")
                   (for CDENTRY in (fetch CDENTRIES of CDVAL) collect (fetch MATCHNAME of CDENTRY)))
             (ADD NENTRIES (LENGTH (FETCH (CDVALUE CDENTRIES) OF CDVAL]
       (SETQ LAST-MYMEDLEY-CDVALUES $$VAL)
       (TERPRI T)
       (RETURN (LIST NENTRIES (CL:IF (EQ NENTRIES 1)
                                  'difference
                                  'differences)])

(GIT-COMPARE-WORKTREE
  [LAMBDA (BRANCH DONTUPDATE)                               (* ; "Edited 25-Nov-2021 08:49 by rmk:")
                                                            (* ; "Edited 19-Nov-2021 21:54 by rmk:")
    (PRINTOUT T T "Comparing origin/" BRANCH " and origin/master" T)
    (CL:UNLESS DONTUPDATE
        (GIT-ADD-WORKTREE BRANCH T)
        (GIT-ADD-WORKTREE "master" T))
    (LET (ADDEDFILES DELETEDFILES SOURCEFILES COMPILEDFILES OTHERFILES)
         (FOR FILE BFILE MFILE IN (GIT-BRANCH-DIFF BRANCH 'origin/master)
            DO (SETQ BFILE (INFILEP (CONCAT (WORKTREEDIR BRANCH)
                                           FILE)))
               (SETQ MFILE (INFILEP (CONCAT (WORKTREEDIR 'master)
                                           FILE)))
               (IF (AND BFILE MFILE)
                   THEN (IF (NOT (LISPSOURCEFILEP BFILE))
                            THEN (PUSH OTHERFILES FILE)
                          ELSEIF (MEMB (U-CASE (FILENAMEFIELD BFILE 'EXTENSION))
                                       *COMPILED-EXTENSIONS*)
                            THEN (PUSH COMPILEDFILES FILE)
                          ELSE (PUSH SOURCEFILES FILE))
                 ELSEIF BFILE
                   THEN (PUSH ADDEDFILES FILE)
                 ELSE (PUSH DELETEDFILES FILE)))
         (CL:WHEN ADDEDFILES
             (PRINTOUT T T "Added files: " T)
             (FOR F IN (SORT ADDEDFILES) DO (PRINTOUT T 2 F T)))
         (CL:WHEN DELETEDFILES
             (PRINTOUT T T "Deleted files: " T)
             (FOR F IN (SORT ADDEDFILES) DO (PRINTOUT T 2 F T)))
         (CL:WHEN SOURCEFILES
             (PRINTOUT T T "Changed Medley source files:" T)
             (FOR FILETAIL FILE BFILE MFILE ON (SORT SOURCEFILES)
                DO (SETQ FILE (CAR FILETAIL))
                   (PRINTOUT T 2 FILE T)
                   (SETQ FILE (CAR FILETAIL))
                   (SETQ BFILE (INFILEP (CONCAT (WORKTREEDIR BRANCH)
                                               FILE)))
                   (SETQ MFILE (INFILEP (CONCAT (WORKTREEDIR 'master)
                                               FILE)))
                   (COMPARESOURCES-TEDIT BFILE MFILE)
                   (TTY.PROCESS T)
                   (CL:WHEN (OR OTHERFILES (CDR FILETAIL))
                          (WAITFORINPUT))))
         (CL:WHEN COMPILEDFILES
             (PRINTOUT T T "Medley compiled files, no comparisons:")
             (FOR F IN COMPILEDFILES DO (PRINTOUT T 2 F T)))
         (CL:WHEN OTHERFILES
             (PRINTOUT T T "Other changed files, using TEDIT-SEE")
             (FOR FILETAIL FILE BFILE MFILE ON (SORT OTHERFILES)
                DO (SETQ FILE (CAR FILETAIL))
                   (PRINTOUT T 2 FILE)
                   (SETQ FILE (CAR FILETAIL))
                   (SETQ BFILE (INFILEP (CONCAT (WORKTREEDIR BRANCH)
                                               FILE)))
                   (SETQ MFILE (INFILEP (CONCAT (WORKTREEDIR 'master)
                                               FILE)))
                   (COMPARETEXT BFILE MFILE 'LINE)
                   (AND NIL (TEDIT-SEE BFILE)
                        (TEDIT-SEE MFILE))
                   (TTY.PROCESS T)
                   (CL:WHEN (CDR FILETAIL)
                          (WAITFORINPUT))))])

(GITCDOBJBUTTONFN
  [LAMBDA (OBJ WINDOW)                                       (* ; "Edited 20-Dec-2021 09:57 by rmk")
                                                             (* ; "Edited 15-Dec-2021 20:47 by rmk")
                                                             (* ; "Edited 27-Nov-2021 12:19 by rmk:")
                                                             (* ; "Edited 26-Nov-2021 08:51 by rmk:")
                                                             (* ; "Edited 23-Nov-2021 12:39 by rmk:")
                                                             (* ; "Edited  8-Nov-2021 08:46 by rmk:")
    (LET
     ([CDENTRY (CAR (IMAGEOBJPROP OBJ 'OBJECTDATUM]
      (BRANCH1 (WINDOWPROP WINDOW 'BRANCH1))
      (FONT (FONTCREATE 'TERMINAL 10))
      COPYITEM COMPAREITEMS TYPE INFO1 INFO2)
     (CL:WHEN (AND CDENTRY (CADR (IMAGEOBJPROP OBJ 'OBJECTDATUM))
                   (EQ LASTKEYBOARD 0))
         (SETQ INFO1 (FETCH (CDENTRY INFO1) OF CDENTRY))
         (SETQ INFO2 (FETCH (CDENTRY INFO2) OF CDENTRY))
         [IF (MOUSESTATE (ONLY LEFT))
             THEN
             [SETQ COMPAREITEMS
              (IF (AND INFO1 INFO2)
                  THEN [IF (EQ (SETQ TYPE (FETCH (CDINFO TYPE) OF INFO1))
                               (FETCH (CDINFO TYPE) OF INFO2))
                           THEN (SELECTQ TYPE
                                    (SOURCE [LIST (LIST "Compare sources?" ''COMPARESOURCES)
                                                  (LIST "Examine sources?" ''EXAMINE])
                                    (COMPILED)
                                    (TEXT (LIST (CONCAT "Compare text files?")
                                                ''TEXT))
                                    (IF (MEMB (U-CASE (FILENAMEFIELD (FETCH (CDINFO FULLNAME)
                                                                        OF INFO1)))
                                              '(TEXT TXT))
                                        THEN [LIST (LIST "Compare text files?" (KWOTE TYPE)
                                                         ''COMPARETEXT]
                                      ELSE (LIST (LIST (CONCAT "See " TYPE " files?")
                                                       (KWOTE TYPE]
                ELSEIF (OR INFO1 INFO2)
                  THEN (LIST (LIST "Show file?" ''TEDIT]
           ELSEIF [AND (MOUSESTATE (ONLY MIDDLE))
                       (NOT (WINDOWPROP WINDOW 'READONLY]
             THEN (SETQ COPYITEM (CONS (SELECTQ (CADDR (IMAGEOBJPROP OBJ 'OBJECTDATUM))
                                           (LEFT (LIST (CONCAT "Copy TO git " (GIT-WHICH-BRANCH)
                                                              "?")
                                                       ''TOGIT))
                                           (RIGHT (LIST (CONCAT "Copy FROM git " (GIT-WHICH-BRANCH)
                                                               "?")
                                                        ''FROMGIT))
                                           NIL]
         (CL:WHEN (OR COPYITEM COMPAREITEMS)
             (SELECTQ (MENU (CREATE MENU
                                   TITLE _ (CONCAT (WINDOWPROP WINDOW 'SUBDIR)
                                                  "/"
                                                  (FETCH MATCHNAME OF CDENTRY))
                                   ITEMS _ (APPEND COPYITEM COMPAREITEMS)
                                   MENUFONT _ FONT
                                   MENUTITLEFONT _ FONT))
                 (TOGIT (CL:WHEN (TOGIT (FETCH (CDINFO FULLNAME) OF INFO1)
                                        WINDOW)
                            (IMAGEOBJPROP OBJ 'COPIED T)
                            (REDISPLAYW WINDOW)
                            (CDOBJ.DISPLAYFN OBJ WINDOW)))
                 (FROMGIT (CL:WHEN (FROMGIT (FETCH (CDINFO FULLNAME) OF INFO2)
                                          WINDOW)
                              (IMAGEOBJPROP OBJ 'COPIED T)
                              (AND NIL (REDISPLAYW WINDOW))))
                 (COMPARESOURCES 
                      (TTY.PROCESS T)
                      (CSBROWSER (fetch (CDINFO FULLNAME) OF INFO1)
                             (fetch (CDINFO FULLNAME) OF INFO2)))
                 (COMPARETEXT (TTY.PROCESS T)
                              (COMPARETEXT (FETCH (CDINFO FULLNAME) OF INFO1)
                                     (FETCH (CDINFO FULLNAME) OF INFO2)
                                     'PARA))
                 (TEDIT (CL:WHEN INFO1
                            (TEDIT-SEE (FETCH (CDINFO FULLNAME) OF INFO1)))
                        (CL:WHEN INFO2
                            (TEDIT-SEE (FETCH (CDINFO FULLNAME) OF INFO2))))
                 NIL)))])

(GIT-CD-LABELFN
  [LAMBDA (FILE1 FILE2 USERDATA)                             (* ; "Edited  5-Jan-2022 15:10 by rmk")
                                                             (* ; "Edited 16-Dec-2021 12:25 by rmk")
                                                             (* ; "Edited 13-Dec-2021 22:13 by rmk")
    (DECLARE (USEDFREE CDVALUE))
    (LET (NC B LABEL1 LABEL2)
         (CL:WHEN (SETQ NC (FETCH NCDIR OF (FETCH CDMAXNC1 OF CDVALUE)))
             (SETQ LABEL1 (SLASHIT (SUBSTRING FILE1 (ADD1 NC))
                                 T))
             (CL:WHEN (SETQ B (LISTGET USERDATA 'BRANCH1))
                 (SETQ LABEL1 (CONCAT B "/" LABEL1))))
         (CL:WHEN (SETQ NC (FETCH NCDIR OF (FETCH CDMAXNC2 OF CDVALUE)))
             (SETQ LABEL2 (SLASHIT (SUBSTRING FILE2 (ADD1 NC))
                                 T))
             (CL:WHEN (SETQ B (LISTGET USERDATA 'BRANCH2))
                 (SETQ LABEL2 (CONCAT B "/" LABEL2))))
         (LIST (OR LABEL1 FILE1)
               (OR LABEL2 FILE2])

(GIT-CD-MENUFN
  [LAMBDA (TBITEM MENUITEM CDBROWSER KEY)                    (* ; "Edited 24-Feb-2022 11:30 by rmk")
                                                             (* ; "Edited  5-Feb-2022 17:36 by rmk")
                                                             (* ; "Edited 19-Dec-2021 23:28 by rmk")
                                                             (* ; "Edited 16-Dec-2021 13:49 by rmk")
                                                             (* ; "Edited 10-Dec-2021 08:52 by rmk")

    (* ;; "MENUITEM is of the form (display-atom <this function> . extrainfo).  The selector for the selectq is either the CAR of the extrainfo or the display atom")

    (DECLARE (USEDFREE FILE1 FILE2 LABEL2 TYPE CDENTRY))
    (SELECTQ (OR (CADDR MENUITEM)
                 (CAR MENUITEM))
        (Delete% -> (FLASHWINDOW PWINDOW)
                    (IF FILE1
                        THEN (PRIN3 "Use 'Delete BOTH' instead")
                      ELSE (GIVE.TTY.PROCESS PWINDOW)
                           (CL:WHEN [OR (EQ KEY 'MIDDLE)
                                        (EQ 'Y (ASKUSER NIL 'N (CONCAT "Delete " LABEL2 " ? "]
                               (GIT-DELETE-FILE FILE2)
                               (TB.DELETE.ITEM CDBROWSER TBITEM))))
        (|Delete ALL <-| 
             (FLASHWINDOW PWINDOW)
             (IF FILE2
                 THEN (PRIN3 "Use 'Delete BOTH' instead")
               ELSE (GIVE.TTY.PROCESS PWINDOW)
                    (CL:WHEN [OR (EQ KEY 'MIDDLE)
                                 (EQ 'Y (ASKUSER NIL 'N (CONCAT "Delete ALL versions of "
                                                               (NAMEFIELD LABEL1 T)
                                                               " ? "]
                        (MYMEDLEY-DELETE-FILES FILE1)
                        (TB.DELETE.ITEM CDBROWSER TBITEM))))
        (Delete% BOTH (FLASHWINDOW PWINDOW)
                      (GIVE.TTY.PROCESS PWINDOW)
                      (CL:WHEN (EQ 'Y (ASKUSER NIL 'N (CONCAT 
                                                             "Delete all Medley and git versions of "
                                                             (NAMEFIELD LABEL1 T)
                                                             " ? ")))
                          (GIT-DELETE-FILE FILE2)
                          (MYMEDLEY-DELETE-FILES FILE1)
                          (TB.DELETE.ITEM CDBROWSER TBITEM)))
        (SHOULDNT])
)

(RPAQ? FROMGITN 0)



(* ;; "")




(* ;; "Utilities")

(DEFINEQ

(CDGITDIR
  [LAMBDA (GITCLONE)                                         (* ; "Edited  5-Feb-2022 11:35 by rmk")
                                                             (* ; "Edited 18-Jan-2022 15:37 by rmk")
                                                            (* ; "Edited 16-Nov-2021 10:16 by rmk:")
                                                            (* ; "Edited  2-Nov-2021 21:12 by rmk:")

    (* ;; "Strips off {UNIX}")

    (CONCAT "cd " (STRIPHOST (TRUEFILENAME (GIT-CLONEP GITCLONE)))
           " ; "])

(GIT-COMMAND
  [LAMBDA (CMD ALL NOERROR)                                  (* ; "Edited 25-Feb-2022 09:25 by rmk")
                                                             (* ; "Edited  3-Jan-2022 10:47 by rmk")
                                                            (* ; "Edited 24-Nov-2021 16:44 by rmk:")
                                                            (* ; "Edited 16-Nov-2021 09:07 by rmk:")
                                                            (* ; "Edited  2-Nov-2021 21:08 by rmk:")
                                                            (* ; "Edited  7-Oct-2021 11:15 by rmk:")

    (* ;; "Suppress .git lines unless ALL")

    (CL:UNLESS (OR (EQ 1 (STRPOS "git" CMD))
                   (EQ 1 (STRPOS "gh" CMD)))
        (SETQ CMD (CONCAT "git " CMD)))
    [BIND LPOS WHILE (SETQ LPOS (STRPOS "local/" CMD))
       DO (SETQ CMD (CONCAT (SUBSTRING CMD 1 (SUB1 LPOS))
                           (SUBSTRING CMD (IPLUS LPOS (NCHARS "local/"]
    (CL:WITH-OPEN-FILE (STREAM "{NODIRCORE}shell-dribble.txt" :DIRECTION :IO)
           (ShellCommand (CONCAT (CDGITDIR)
                                CMD)
                  STREAM)
           (SETFILEPTR STREAM 0)
           (BIND LINE UNTIL (EOFP STREAM)
              WHEN [PROGN (SETQ LINE (CL:READ-LINE STREAM :EOF-ERROR-P NIL :EOF-VALUE NIL))
                          (OR ALL (NOT (STRPOS ".git" LINE 1 NIL T] COLLECT LINE
              FINALLY (CL:UNLESS NOERROR
                          (CL:WHEN (OR (EQ 1 (STRPOS "fatal" (CAR $$VAL)
                                                    1 NIL NIL T))
                                       (EQ 1 (STRPOS "gh: Command not found" (CAR $$VAL)
                                                    1 NIL NIL T)))
                              (ERROR (CONCAT "Git command %"" CMD "%" failed")
                                     (CAR $$VAL))))])

(GITORIGIN
  [LAMBDA (BRANCH LOCAL)                                    (* ; "Edited 25-Nov-2021 08:47 by rmk:")
                                                            (* ; "Edited 22-Nov-2021 17:29 by rmk:")

    (* ;; "Insures origin/ unless LOCAL or local/ already")

    (CL:UNLESS BRANCH (SETQ BRANCH "master"))
    (IF (OR (STRPOS "origin/" BRANCH)
            (STRPOS "local/" BRANCH))
        THEN BRANCH
      ELSE (CONCAT (CL:IF LOCAL
                       "local/"
                       "origin/")
                  BRANCH])

(GIT-INITIALS
  [LAMBDA NIL                                                (* ; "Edited 19-Jan-2022 13:18 by rmk")
    (OR (CL:IF (EQ (CHARCODE %:)
                   (NTHCHARCODE INITIALS -1))
            (SUBSTRING INITIALS 1 -2)
            INITIALS)
        (ERROR "INITIALS is not set"])
)
(DECLARE%: DONTCOPY
  (FILEMAP (NIL (4679 5525 (GIT-CLONEP 4689 . 5523)) (7851 9887 (ALLSUBDIRS 7861 . 9085) (MEDLEYSUBDIRS 
9087 . 9526) (GITSUBDIRS 9528 . 9885)) (9888 15362 (TOGIT 9898 . 12046) (FROMGIT 12048 . 13026) (
GIT-DELETE-FILE 13028 . 13922) (MYMEDLEY-DELETE-FILES 13924 . 15360)) (15363 17512 (MYMEDLEYSUBDIR 
15373 . 15819) (GITSUBDIR 15821 . 16144) (STRIPDIR 16146 . 16517) (STRIPHOST 16519 . 16755) (STRIPNAME
 16757 . 17510)) (17513 19041 (GFILE4MFILE 17523 . 17769) (MFILE4GFILE 17771 . 18113) (
GIT-REPO-FILENAME 18115 . 19039)) (19090 29494 (GIT-COMMIT 19100 . 19678) (GIT-PUSH 19680 . 20236) (
GIT-PULL 20238 . 20644) (GIT-BRANCH-DIFF 20646 . 24498) (GIT-APPROVAL 24500 . 24701) (GIT-GET-FILE 
24703 . 26906) (GIT-FILE-EXISTS? 26908 . 27632) (GIT-REMOTE-UPDATE 27634 . 28676) (GIT-REMOTE-ADD 
28678 . 28985) (GIT-FILE-DATE 28987 . 29492)) (29539 35158 (GIT-CHECKOUT 29549 . 29790) (
GIT-WHICH-BRANCH 29792 . 30376) (GIT-MAKE-BRANCH 30378 . 31869) (GIT-BRANCHES 31871 . 32849) (
GIT-BRANCH-EXISTS? 32851 . 33912) (PICK-BRANCH 33914 . 34258) (GIT-PULL-REQUESTS 34260 . 35156)) (
35188 37893 (GIT-MY-CURRENT-BRANCH 35198 . 35371) (GIT-MY-BRANCHP 35373 . 36292) (GIT-MY-NEXT-BRANCH 
36294 . 36735) (GIT-MY-BRANCHES 36737 . 37891)) (37939 41709 (GIT-ADD-WORKTREE 37949 . 39709) (
GIT-REMOVE-WORKTREE 39711 . 40289) (GIT-LIST-WORKTREES 40291 . 41095) (WORKTREEDIR 41097 . 41707)) (
41757 68211 (GIT-GET-DIFFERENT-FILES 41767 . 46857) (GIT-COMPARE-BRANCHES 46859 . 52351) (
GIT-COMPARE-WITH-MYMEDLEY 52353 . 56073) (GIT-COMPARE-WORKTREE 56075 . 59552) (GITCDOBJBUTTONFN 59554
 . 64558) (GIT-CD-LABELFN 64560 . 65642) (GIT-CD-MENUFN 65644 . 68209)) (68281 71733 (CDGITDIR 68291
 . 68871) (GIT-COMMAND 68873 . 70846) (GITORIGIN 70848 . 71425) (GIT-INITIALS 71427 . 71731)))))
STOP
