(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)

(FILECREATED "16-Oct-2021 19:23:40" 
{DSK}<Users>kaplan>Local>medley3.5>git-medley>lispusers>TEDIT-PF-SEE.;32 7178   

      changes to%:  (FNS CLOSE-TYPED-WINDOW)

      previous date%: "12-Oct-2021 22:31:01" 
{DSK}<Users>kaplan>Local>medley3.5>git-medley>lispusers>TEDIT-PF-SEE.;31)


(PRETTYCOMPRINT TEDIT-PF-SEECOMS)

(RPAQQ TEDIT-PF-SEECOMS
       [(FNS SEE-TEDIT PF-TEDIT)
        (COMS (FNS GET-TYPED-WINDOW CLOSE-TYPED-WINDOW)
              (INITVARS (TYPED-WINDOWS)))
        (COMMANDS ts tpf)
        (DECLARE%: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS (ADDVARS (NLAMA)
                                                                             (NLAML)
                                                                             (LAMA])
(DEFINEQ

(SEE-TEDIT
  [LAMBDA (FILE WINDOW FORMAT)                          (* ; "Edited 11-Oct-2021 08:51 by rmk:")
    (SETQ FILE (OR (FINDFILE-WITH-EXTENSIONS FILE NIL '(NIL TEDIT TED TXT TEXT TEX))
                   (ERROR "FILE NOT FOUND" FILE)))
    (TEDIT-SEE FILE (GET-TYPED-WINDOW (OR WINDOW 'SEE-TEDIT)
                           (CONCAT "SEE window for " FILE))
           FORMAT)
    FILE])

(PF-TEDIT
  [LAMBDA (FN IFILES)                                   (* ; "Edited 12-Oct-2021 15:22 by rmk:")

    (* ;; "PF* to a read-only TEDIT window.  First argument is the function name, second if given is the input file.")

    (CL:WHEN (LISTP FN)
        (SETQ FN (CAR FN)))
    (IF FN
        THEN                                             (* ; "FN name specified; use it.")
              (SETQ LASTWORD FN)
      ELSE                                               (* ; "Not specified, use LASTWORD")
            (SETQ FN LASTWORD))
    (IF [OR IFILES (SETQ IFILES (APPEND (WHEREIS FN 'FNS T)
                                           (WHEREIS FN 'FUNCTIONS T]
        THEN                                             (* ; "skip compiled files")
              (FOR IFILE LOC TSTREAM ENV INSIDE IFILES
                 UNLESS (MEMB (FILENAMEFIELD IFILE 'EXTENSION)
                                  *COMPILED-EXTENSIONS*)
                 DO (SETQ LOC (FINDFNDEF FN IFILE))
                       (IF (LISTP LOC)
                           THEN [CL:WITH-OPEN-FILE (ISTREAM (POP LOC)
                                                              :DIRECTION :INPUT)
                                           (SETQ ENV (LISPSOURCEFILEP ISTREAM))
                                           (SETFILEINFO ISTREAM 'FORMAT ENV)
                                           (SETQ TSTREAM (OPENTEXTSTREAM))
                                           (DSPFONT DEFAULTFONT TSTREAM)
                                           (PRINT-READER-ENVIRONMENT ENV TSTREAM)
                                           (PFCOPYBYTES ISTREAM TSTREAM (POP LOC)
                                                  (POP LOC))
                                           (TERPRI TSTREAM)
                                           (SETQ TSTREAM (TEDIT TSTREAM (GET-TYPED-WINDOW
                                                                         'PF-TEDIT
                                                                         (CONCAT FN "  from "
                                                                                (FULLNAME ISTREAM)))
                                                                NIL
                                                                '(READONLY T]
                         ELSEIF (EQ LOC 'FILE.NOT.FOUND)
                           THEN (printout T "file " IFILE " not found." T)
                         ELSE (printout T FN " not found on " LOC "." T)))
      ELSE (PRINTOUT T FN " has no function definition" T])
)
(DEFINEQ

(GET-TYPED-WINDOW
  [LAMBDA (WINDOWTYPE TITLE NOOPENFLG)                  (* ; "Edited 11-Oct-2021 10:06 by rmk:")

    (* ;; "WINDOWTYPE=T means always create a new window.  If a WINDOW, then reuse it.")

    (* ;; "Otherwise, create a window of type WINDOWTYPE, using a previously specified region if one is available.")

    (LET (WINDOW REGION WLIST)
         [IF (OR (EQ WINDOWTYPE T)
                     (SETQ WINDOW (WINDOWP WINDOWTYPE)))
             THEN (SETQ WINDOWTYPE NIL)
           ELSE [SETQ WLIST (OR (ASSOC WINDOWTYPE TYPED-WINDOWS)
                                    (CAR (PUSH TYPED-WINDOWS (CONS WINDOWTYPE]
                 (SETQ REGION (FIND X IN (CDR WLIST) SUCHTHAT (TYPE? REGION X]
         (CL:UNLESS WINDOW

             (* ;; "Make sure we have a titlebar and promptwindow")

             (SETQ WINDOW (CREATEW REGION "" NIL NOOPENFLG))
             (GETPROMPTWINDOW WINDOW)

             (* ;; 
        "Replace the region on WLIST with the window, so we can maintan a likely preference order.")

             (IF REGION
                 THEN (DSUBST WINDOW REGION WLIST)
               ELSE (NCONC1 WLIST WINDOW)))
         (CL:WHEN TITLE
             (WINDOWPROP WINDOW 'TITLE TITLE))
         (CL:WHEN WINDOWTYPE
             (WINDOWPROP WINDOW 'WINDOWTYPE WINDOWTYPE)
             (WINDOWADDPROP WINDOW 'CLOSEFN (FUNCTION CLOSE-TYPED-WINDOW)))
         WINDOW])

(CLOSE-TYPED-WINDOW
  [LAMBDA (WINDOW ALL)                                  (* ; "Edited 16-Oct-2021 19:23 by rmk:")

    (* ;; "Puts the region of WINDOW back on the region list for its type, for later reuse.  If ALL, closes all windows of the type of WINDOW (and recursively puts their regions also on the list).")

    (CL:WHEN (OPENWP WINDOW)
        [LET [(WINDOWTYPE (WINDOWPROP WINDOW 'WINDOWTYPE]
             (CL:WHEN WINDOWTYPE
                 (IF ALL
                     THEN (FOR W IN (OPENWINDOWS) WHEN (EQ WINDOWTYPE
                                                                           (WINDOWPROP W 'WINDOWTYPE)
                                                                           )
                                 UNLESS (EQ W WINDOW) DO (CLOSEW W))
                   ELSE 

                         (* ;; "This may no longer be needed, now that TEDIT removes the process for READONLY windows just as for ordinary edit windows.")

                         (AND NIL (CL:WHEN (TTY.PROCESSP (WINDOWPROP WINDOW 'PROCESS))
                                                             (* ; 
                                            "Otherwise, the window pops up if you don't click away")
                                      (TTY.PROCESS T)))
                         (DSUBST (WINDOWPROP WINDOW 'REGION)
                                WINDOW TYPED-WINDOWS)))])
    WINDOW])
)

(RPAQ? TYPED-WINDOWS )

(DEFCOMMAND ts (FILE WINDOW FORMAT) (SEE-TEDIT FILE WINDOW FORMAT))

(DEFCOMMAND tpf (FN IFILES) (PF-TEDIT FN IFILES))
(DECLARE%: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS 

(ADDTOVAR NLAMA )

(ADDTOVAR NLAML )

(ADDTOVAR LAMA )
)
(DECLARE%: DONTCOPY
  (FILEMAP (NIL (843 3913 (SEE-TEDIT 853 . 1263) (PF-TEDIT 1265 . 3911)) (3914 6866 (GET-TYPED-WINDOW 
3924 . 5397) (CLOSE-TYPED-WINDOW 5399 . 6864)))))
STOP
