(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE (LET ((*PACKAGE* *PACKAGE*)) (CLIN-PACKAGE "IL-CONVERT") *PACKAGE*) BASE 10)(IL:FILECREATED "19-Jan-93 19:55:31" ("compiled on " IL:|{DSK}<usr>local>src>tape>MIGRATION>IL-SIM.;1|) "11-Jul-91 21:52:09" IL:|bcompl'd| IL:|in| "Lispcore 11-Jul-91 ..." IL:|dated| "11-Jul-91 21:57:45")(IL:FILECREATED "25-Jan-90 11:04:43" IL:|{DSK}/users/welch/migration/IL-SIM.;3| 88504 IL:|changes| IL:|to:| (IL:FUNCTIONS NTHCHARCODE ERROR) IL:|previous| IL:|date:| "25-Jan-90 08:58:55" IL:|{DSK}/users/welch/migration/IL-SIM.;2|)(IL:PRETTYCOMPRINT IL:IL-SIMCOMS)(IL:RPAQQ IL:IL-SIMCOMS ((IL:* IL:|;;| "Converter macros Have to add \"CL\" as a nickname to the LISP package since some Interlisp code names it that way.") (IL:P (IN-PACKAGE (QUOTE IL-CONVERT))) (IL:FUNCTIONS CONVERT-TO-STRING SIMP-MINUS SIMP-1- QUOTE-TREE EXPAND-VARLIST) (IL:FUNCTIONS RPAQQ RPAQ RPAQ?) (IL:FUNCTIONS CONSTANTS) (IL:* IL:\| "chapter 2") (IL:VARIABLES *WARN-FOR-ALL-IL-SYMBOLS* *WARN-FOR-IL-SYMBOLS-LOWER-THAN-THIS* *WARN-ON-CHAR-CODE-USE*) (IL:P (IL-COPYDEF ATOM) (IL-COPYDEF BOUNDP) (IL-COPYDEF SET)) (IL:FUNCTIONS LITATOM SETQQ SETQ PSETQ) (IL:FUNCTIONS (IL:* IL:\; "warning forms") IL:GETTOPVAL IL:SETTOPVAL) (IL:* IL:|;;| "with Franz, might want to use mp:global-symbol-value for the following") (IL:P (IL-COPYDEF SET SETATOMVAL)) (IL:FUNCTIONS GETATOMVAL GETPROP PUTPROP ADDPROP) (IL:FUNCTIONS REMPROP REMPROPLIST CHANGEPROP) (IL:FUNCTIONS (IL:* IL:\; "warning forms") IL:PROPNAMES IL:DEFLIST) (IL:P (IL-COPYDEF SYMBOL-PLIST GETPROPLIST) (IL-COPYDEF GENTEMP GENSYM)) (IL:FUNCTIONS MKATOM L-CASE U-CASE) (IL:FUNCTIONS SETPROPLIST CHARCODE NTHCHARCODE CHARACTER CHCON1 EVAL-IF-POSSIBLE SELCHARQ) (IL:P (IL-COPYCONV CHARACTER FCHARACTER)) (IL:FUNCTIONS (IL:* IL:\; "warning forms") IL:PACK IL:PACK* IL:UNPACK IL:DUNPACK IL:MAPATOMS IL:APROPOS) (IL:* IL:\; "***** rest of chapter 2") (IL:* IL:\| "Chapter 3") (IL:FUNCTIONS NLISTP) (IL:* IL:\; "***** CAR/CDRERR") (IL:P (IL-COPYDEF CONS) (IL-COPYDEF LISTP) (IL-COPYDEF CAR) (IL-COPYDEF CDR) (IL-COPYDEF CADR) (IL-COPYDEF CDAR) (IL-COPYDEF CDDR) (IL-COPYDEF CAAAR) (IL-COPYDEF CAADR) (IL-COPYDEF CADAR) (IL-COPYDEF CADDR) (IL-COPYDEF CDAAR) (IL-COPYDEF CDADR) (IL-COPYDEF CDDAR) (IL-COPYDEF CDDDR) (IL-COPYDEF CAAAAR) (IL-COPYDEF CAAADR) (IL-COPYDEF CAADAR) (IL-COPYDEF CAADDR) (IL-COPYDEF CADAAR) (IL-COPYDEF CDDDAR) (IL-COPYDEF CDDDDR) (IL-COPYDEF RPLACD) (IL-COPYDEF RPLACD FRPLACD) (IL-COPYDEF RPLACA) (IL-COPYDEF RPLACA FRPLACA)) (IL:FUNCTIONS RPLNODE RPLNODE2 FRPLNODE FRPLNODE2 MKLIST NCONC1) (IL:P (IL-COPYDEF LIST) (IL-COPYDEF LIST*) (IL-COPYDEF APPEND) (IL-COPYDEF NCONC) (IL-COPYDEF TAILP) (IL-COPYDEF LAST) (IL-COPYDEF LENGTH) (IL-COPYDEF LENGTH FLENGTH) (IL-COPYDEF SET-DIFFERENCE LDIFFERENCE) (IL-COPYDEF INTERSECTION) (IL-COPYDEF UNION)) (IL:FUNCTIONS ATTACH LCONC TCONC) (IL:FUNCTIONS IL:DOCOLLECT IL:ENDCOLLECT IL:SCRATCHLIST IL:ADDTOSCRATCHLIST IL:COPYALL IL:HCOPYALL IL:NLEFT IL:LASTN IL:COUNT IL:COUNTDOWN IL:EQUALN IL:LDIFF IL:LSUBST IL:SUBPAIR) (IL:* IL:\; "warning forms ") (IL:P (IL-COPYDEF COPY-LIST COPY)) (IL:FUNCTIONS NTH MEMB FMEMB MEMBER EQMEMB SUBST DSUBST SUBLIS DSUBLIS ASSOC SASSOC PUTASSOC) (IL:P (IL-COPYCONV NTH FNTH) (IL-COPYCONV LAST FLAST) (IL-COPYCONV MEMB FMEMB) (IL-COPYCONV ASSOC FASSOC) (IL-COPYDEF GETF LISTGET)) (IL:FUNCTIONS LISTPUT LISTGET1 MERGE) (IL:FUNCTIONS IL:LISTPUT1 IL:ALPHORDER IL:UALPHORDER IL:COMPARELISTS) (IL:* IL:\; "warning forms") (IL:FUNCTIONS REMOVE DREMOVE REVERSE DREVERSE) (IL:FUNCTIONS NEGATE) (IL:* IL:\| "chapter 4") (IL:P (IL-COPYDEF STRINGP)) (IL:FUNCTIONS STREQUAL STRING-EQUAL NCHARS ALLOCSTRING MKSTRING CONCAT CONCATLIST RPLSTRING RPLCHARCODE STRPOS SUBSTRING) (IL:* IL:|;;| " Warning Forms") (IL:FUNCTIONS IL:GNC IL:GLC) (IL:* IL:\| "chapter 5") (IL:* IL:\; "***** chapter 5 (arrays)") (IL:* IL:\| "chapter 6") (IL:FUNCTIONS MAPHASH GETHASH PUTHASH) (IL:* IL:\; "***** chapter 6 (hash arrays)") (IL:* IL:\| "chapter 7") (IL:FUNCTIONS SMALLP) (IL:* IL:\; "*** ??") (IL:FUNCTIONS FIXP) (IL:P (IL-COPYDEF FLOATP) (IL-COPYDEF NUMBERP) (IL-COPYDEF EQUALP EQP)) (IL:* IL:|;;| "(il-defconv EQP (x y) `(eql ,^x ,^y)) ***** overflow") (IL:FUNCTIONS PLUS MINUS DIFFERENCE TIMES) (IL:* IL:\; "***** remainder ") (IL:FUNCTIONS GREATERP LESSP GEQ LEQ) (IL:P (IL-COPYDEF ZEROP) (IL-COPYDEF MINUSP) (IL-COPYDEF MIN) (IL-COPYDEF MAX) (IL-COPYDEF ABS)) (IL:* IL:\; "***** min.integer,^ max.integer") (IL:FUNCTIONS IPLUS IMINUS IDIFFERENCE ADD1 SUB1 ITIMES IQUOTIENT IREMAINDER IMOD IGREATERP ILESSP IGEQ ILEQ IMIN IMAX IEQP FIX FIXR RSH POWEROFTWOP EVENP ODDP BITTEST BITCLEAR) (IL:P (IL-COPYDEF GCD) (IL-COPYDEF LOGAND) (IL-COPYDEF LOGIOR LOGOR) (IL-COPYDEF ASH LSH) (IL-COPYDEF INTEGER-LENGTH INTEGERLENGTH) (IL-COPYDEF LOGNOT) (IL-COPYDEF LOGIOR BITSET)) (IL:FUNCTIONS MASK.1\'S MASK.0\'S LOADBYTE DEPOSITBYTE) (IL:P (IL-COPYDEF BYTE) (IL-COPYDEF BYTE-SIZE BYTESIZE) (IL-COPYDEF BYTE-POSITION BYTEPOSITION) (IL-COPYDEF LDB) (IL-COPYDEF DPB)) (IL:FUNCTIONS (IL:* IL:\; "warning forms") IL:ROT) (IL:* IL:|;;| "  *** section 7.4 (floating point)") (IL:* IL:\| "chapter 8") (IL:* IL:|;;| " **** Record stuff in IL-RECORD.lisp ***  Changetran...") (IL:FUNCTIONS |push| |add| |change| |pushnew| |pushlist| |swap|) (IL:P (IL-COPYCONV |push| PUSH) (IL-COPYCONV |add| ADD) (IL-COPYCONV |change| CHANGE) (IL-COPYCONV |pushnew| PUSHNEW) (IL-COPYCONV |pushlist| PUSHLIST) (IL-COPYCONV |swap| SWAP) (IL-COPYDEF POP) (IL-COPYDEF POP |pop|)) (IL:* IL:\| "chapter 9") (IL:* IL:\; "**** 9.1") (IL:P (IL-COPYDEF EQ) (IL-COPYDEF NULL) (IL-COPYDEF NOT) (IL-COPYDEF EQUAL) (IL-COPYDEF AND) (IL-COPYDEF OR)) (IL:FUNCTIONS NEQ) (IL:* IL:\; "EQP is in chapter 7") (IL:* IL:\; "***** EQUALALL") (IL:FUNCTIONS COND) (IL:* IL:|;;| " (convert '(il:cond ((il:geq 3 2) (il:times 2 3))))") (IL:FUNCTIONS |if|) (IL:P (IL-COPYCONV |if| IF)) (IL:* IL:|;;| "(convert '(il:|if| (il:geq a b) il:|then| (foo) il:|elseif| (il:atom (il:plus 2 3)) il:|then| (bar) il:|else| (baz)))") (IL:FUNCTIONS SELECTQ SELECTC CASE) (IL:* IL:|;;| "(convert '(il:selectq (il:plus 2 3) (a (il:times a b)) (il:plus c d)))") (IL:* IL:\; "***** SELECTC") (IL:P (IL-COPYDEF PROG1) (IL-COPYDEF PROG2) (IL-COPYDEF PROGN) (IL-COPYDEF RETURN) (IL-COPYDEF RETURN-FROM RETFROM)) (IL:* IL:|;;| "If we were really clever we could keep track of when we were inside a PROG.  Then we could treat (top-level) symbols as prog labels and not put them in the IL package.  In that case we would want GO to generate `(go ,tag) instead of `(go ,^tag).") (IL:FUNCTIONS GO PROG LET LET* PROG* CONVERT-DO CONVERT-DO*) (IL:P (IL:* IL:|;;| "One case where il-defconv won't do what we need...") (SETF (GET (QUOTE DO) (QUOTE CONVERT-FORM)) (QUOTE CONVERT-DO) (GET (QUOTE DO*) (QUOTE CONVERT-FORM)) (QUOTE CONVERT-DO*))) (IL:* IL:|;;| "I.S. stuff - entry is coded into CONVERT") (IL:VARIABLES *ITERATION-CONVERSION-TABLE*) (IL:FUNCTIONS CONVERT-ITERATION-STATEMENT FILTER-NUMERIC-BY FILTER-LIST-BY FILTER-BIND FILTER-DO FILTER-INSTRING FILTER-REPEATWHILE/UNTIL) (IL:* IL:\| "chapter 10") (IL:* IL:|;;| "These variables can be set to T to make lambdas come out with &REST IGNORE (equiv.)  and &OPTIONAL in their parm. lists.") (IL:VARIABLES *ADD-REST-ARG* *PARAMETERS-ALWAYS-OPTIONAL*) (IL:FUNCTIONS DEFINEQ1 ARG SETARG DEFINEQ) (IL:* IL:|;;| "(convert '(defineq (foo (lambda (a b) (plus a b c))))) (convert '(defineq (foo (nlambda (a b) (plus a b c))))) (convert '(defineq (foo (lambda x (plus (arg x 1) (arg x 2)))))) (convert '(defineq (foo (nlambda x (mapcar 'foo x))))) ***** FNTYP, EXPRP, CCODEP, ARGTYPE, NARGS, ARGLIST, SMARTARGLIST ***** DEFINE ***** UNSAVE.TO.MODIFY.FNS, DFNFLG") (IL:FUNCTIONS PUTD CCODEP) NIL (IL:P (IL-COPYDEF SYMBOL-FUNCTION GETD) (IL-COPYDEF APPLY) (IL-COPYDEF FUNCALL APPLY*)) (IL:FUNCTIONS KWOTE) (IL:* IL:|;;| "(il-defconv QUOTE (&rest args)  `(quote ,@args))  ***** NLAMBDA.ARGS,^ EVALA,^ DEFEVAL,^ EVALHOOK") (IL:* IL:|;;| "; is this right?(il-defconv RPTQ (n &rest forms)	     `(do ((IL::RPTN ,^(eval n) (1- IL::RPTN))		   val)		  ((<= IL::RPTN 0) val)		  (declare (special IL::RPTN))		  (setq val (progn ,@^@forms))))") (IL:* IL:\; "***** RPTQ, FRPTQ") (IL:FUNCTIONS MOVD MAP MAPC MAPLIST MAPCAR MAPCON MAPCONC MAP2C MAP2CAR SUBSET) (IL:* IL:\; "***** rest of chapter") (IL:FUNCTIONS IL:MOVD?) (IL:* IL:\| "chapter 14") (IL:VARIABLES *WARN-ON-ERSETQ-NLSETQ*) (IL:FUNCTIONS SHOULDNT ERROR NLSETQ ERSETQ) (IL:* IL:\| "chapter 17") (IL:VARIABLES *EVAL-WHEN-STATE*) (IL:FUNCTIONS DECLARE\:) (IL:FUNCTIONS PUTPROPS DEFINE-MACRO DEFINE-SUBST-MACRO QUOTE) (IL:* IL:|;;| "(il-defconv * (&rest args) `(il::* ,@args))") (IL:* IL:|;;| "what are we supposed to do with (declare (specvars . t)) ?") (IL:VARIABLES *TYPE-CONVERSION-PLIST*) (IL:FUNCTIONS DECLARE FILEMAP ADDTOVAR APPENDTOVAR FUNCTION LAMBDA DEFINE-FILE-INFO PRETTYCOMPRINT) (IL:P (SETF (GET (QUOTE FILECREATED) (QUOTE EARLY)) T)) (IL:FUNCTIONS FILECREATED) (IL:* IL:\| "chapter 18") (IL:FUNCTIONS CONSTANT) (IL:* IL:\| "chapter 23") (IL:P (IL-COPYDEF PROCESSP)) (IL:FUNCTIONS CREATE.MONITORLOCK OBTAIN.MONITORLOCK RELEASE.MONITORLOCK WITH.MONITOR NOTIFY.EVENT THIS.PROCESS) (IL:FUNCTIONS (IL:* IL:\; "warningforms...") IL:AWAIT.EVENT IL:CREATE.EVENT) (IL:* IL:\| "chapter 24") (IL:FUNCTIONS OPENSTRINGSTREAM) (IL:* IL:\| "chapter 25") (IL:P (IL-COPYDEF PRINT) (IL-COPYDEF TERPRI) (IL-COPYDEF PRIN1 PRIN2) (IL-COPYDEF PRINC PRIN1) (IL-COPYDEF READ-CHAR BIN) (IL-COPYDEF WRITE-CHAR BOUT)) (IL:VARIABLES *ANNOTATE-PRINTOUT-FORM*) (IL:FUNCTIONS PRINTOUT READ READP) (IL:P (IL-COPYCONV PRINTOUT |printout|)) (IL:* IL:|;;| "Warning forms") (IL:FUNCTIONS IL:INPUT IL:RATOM IL:RSTRING IL:RATOMS IL:RATEST IL:READC IL:PEEKC IL:LASTC IL:READCCODE IL:PEEKCCODE IL:READP IL:EOFP IL:WAITFORINPUT IL:SKREAD IL:SKIPSEPRS IL:OUTPUT IL:PRIN3 IL:PRIN4 IL:PRINTCCODE IL:TAB IL:SHOWPRIN2 IL:SHOWPRINT IL:PRINTBELLS IL:LINELENGTH IL:SETLINELENGTH) (IL:* IL:\| "Unconvertable things...") (IL:* IL:|;;| "Warning forms") (IL:FUNCTIONS IL:WINDOWADDPROP IL:\\PUTBASE IL:\\GETBASE IL:DSPLEFTMARGIN IL:RESETLST IL:WINDOWPROP) (IL:FUNCTIONS IL:SMARTARGLIST IL:EDITGETD IL:FIND.PROCESS IL:PROCESS.EVALV IL:PROCESSP IL:PROCESS.EVAL IL:FREEMENU IL:FM.RESETMENU IL:FM.CHANGESTATE IL:FM.CHANGELABEL IL:FM.ITEMPROP IL:FM.EDITITEM IL:FM.GETITEM IL:MAINWINDOW IL:RESETFORM IL:SETTERMTABLE IL:PROCESSPROP IL:TTY.PROCESS IL:CLEARW IL:\\CARET.DOWN IL:\\SMASHSTRING IL:BKSYSBUF IL:CLEARBUF IL:GETSYNTAX IL:OPENWP IL:STRINGWIDTH IL:CHARWIDTH IL:FLASHWINDOW IL:MENU IL:FONTCREATE IL:TTYINPROMPTFORWORD IL:MOUSECONFIRM IL:CLOSEW IL:ATTACHWINDOW IL:SHAPEW IL:CONCATLIST IL:GETPROMPTWINDOW IL:BITBLT IL:BLTSHADE IL:BITMAPWIDTH IL:BITMAPHEIGHT IL:FONTPROP IL:TEDIT.INSERT IL:TEDIT.PARALOOKS IL:DSPCLIPPINGREGION IL:MOVETO IL:RELMOVETO IL:DSPFONT IL:DSPXPOSITION IL:CURSORCREATE IL:WAIT.FOR.TTY IL:\\SAVEVMEMBACKGROUND IL:GETREGION IL:WINDOWREGION IL:EVALV IL:TTY/EDITE IL:CLISPTRAN IL:TTY/EDITL IL:MARKASCHANGED IL:FIXEDITDATE IL:PUTDEF IL:ADDSPELL IL:PROCESS.APPLY IL:STKPOS IL:EDITMODE IL:TOTOPW IL:EXPANDW IL:ADD.PROCESS IL:INSIDEP IL:LASTMOUSEX IL:LASTMOUSEY IL:CREATEW IL:DSPLINEFEED IL:DSPRIGHTMARGIN IL:DOWINDOWCOM IL:TTY.PROCESSP IL:IN/SCROLL/BAR? IL:SCROLL.HANDLER IL:BLOCK IL:CLOCK IL:DSPXOFFSET IL:DSPYOFFSET IL:CREATEREGION IL:HEIGHTIFWINDOW IL:SCROLLW IL:WXOFFSET IL:WYOFFSET IL:KEYDOWNP IL:SHIFTDOWNP IL:UNTILMOUSESTATE IL:FIND-READTABLE IL:NILL IL:FILECOMS IL:ADDFILE IL:ADDTOFILE IL:READTABLEPROP IL:LINELENGTH IL:GETDEF) (IL:* IL:\| "Filecom converters") (IL:FUNCTIONS CONVERT-FNS CONVERT-ONE-FN CONVERT-CONSTANTS CONVERT-INITVARS CONVERT-VARS CONVERT-MACROS CONVERT-ADDVARS CONVERT-APPENDVARS CONVERT-ALISTS CONVERT-PROP CONVERT-PROPS CONVERT-IFPROP CONVERT-RECORDS CONVERT-FILES-FILECOM CONVERT-TOP-LEVEL-FORM-FILECOM CONVERT-COMMENT-FILECOM CONVERT-COMS-FILECOM CONVERT-DECLARE-FILECOM CONVERT-EXPORT-FILECOM CONVERT-FUNCTIONS-FILECOM CONVERT-ONE-BITMAP CONVERT-BITMAPS CONVERT-VARIABLES-FILECOM CONVERT-STRUCTURES-FILECOM) (IL:* IL:|;;| "Conversion functions for filecom types are noted on the plists of their names.") (IL:PROP CONVERT-COM IL:FNS IL:CONSTANTS IL:INITVARS IL:VARS IL:MACROS IL:ADDVARS IL:APPENDVARS IL:ALISTS IL:PROP IL:PROPS IL:IFPROP IL:RECORDS IL:INITRECORDS IL:FILES IL:P IL:* IL:COMS IL:DECLARE\: EXPORT IL:FUNCTIONS IL:VARIABLES IL:STRUCTURES IL:SETFS IL:BITMAPS) (IL:* IL:|;;| "Magic to make comments print out in the usual way...") (IL:STRUCTURES IL-COMMENT-STRUCT) (IL:FUNCTIONS PRINT-IL-COMMENT-STRUCT *) (IL:PROP (IL:MAKEFILE-ENVIRONMENT IL:FILETYPE) IL:IL-SIM)))(IN-PACKAGE (QUOTE IL-CONVERT))(DEFUN CONVERT-TO-STRING (S) (IF (STRINGP S) S (IL:BQUOTE (STRING (IL:\\\, S)))))(DEFUN SIMP-MINUS (N) (IF (NUMBERP N) (- N) (IL:BQUOTE (- (IL:\\\, N)))))(DEFUN SIMP-1- (N) (IF (NUMBERP N) (1- N) (IL:BQUOTE (1- (IL:\\\, N)))))(DEFUN QUOTE-TREE (ARG) (COND ((CONSP ARG) (CONS (QUOTE-TREE (CAR ARG)) (QUOTE-TREE (CDR ARG)))) ((SYMBOLP ARG) (IL:* IL:|;;| "Macros sometimes have (if 'macroarg...) in them.") (IF (EQ (CDR (ASSOC ARG *LOCALS*)) :MACRO-ARG) (MAKE-MACRO-ARG :ELEMENT ARG) (NOTE-EXPORTED-SYMBOL ARG))) (T ARG)))(DEFUN EXPAND-VARLIST (VARLST &KEY SEQUENTIAL (TYPE :LOCAL)) (DECLARE (SPECIAL *LOCALS*)) (DO ((VARLST VARLST (REST VARLST)) (*LOCALS* *LOCALS*) (NEW-VARLST NIL) (VARNAMES NIL) VAR VARNAME) ((ENDP VARLST) (VALUES (NREVERSE NEW-VARLST) VARNAMES)) (DECLARE (SPECIAL *LOCALS*)) (SETQ VAR (FIRST VARLST)) (COND ((CONSP VAR) (SETQ VARNAME (FIRST VAR)) (PUSH (IL:BQUOTE ((IL:\\\, VARNAME) (IL:\\\,@ (MAPCONVERT (REST VAR))))) NEW-VARLST)) (T (SETQ VARNAME VAR) (PUSH VAR NEW-VARLST))) (SETQ VARNAME (CONS VARNAME TYPE)) (PUSH VARNAME VARNAMES) (WHEN SEQUENTIAL (PUSH VARNAME *LOCALS*))))(IL-DEFCONV RPAQQ (&REST PAIRS) (DO ((PAIRS PAIRS (REST (REST PAIRS))) SYM (NEWPAIRS NIL)) ((ENDP PAIRS) (IL:BQUOTE (SETQ (IL:\\\,@ (NREVERSE NEWPAIRS))))) (SETQ SYM (CONVERT (FIRST PAIRS))) (PUSH SYM NEWPAIRS) (PUSHNEW SYM *GLOBALS*) (PUSH (CONVERT (IL:BQUOTE (QUOTE (IL:\\\, (SECOND PAIRS))))) NEWPAIRS)))(IL-DEFCONV RPAQ (&REST PAIRS) (DO ((PAIRS PAIRS (REST (REST PAIRS))) SYM (NEWPAIRS NIL)) ((ENDP PAIRS) (IL:BQUOTE (SETQ (IL:\\\,@ (NREVERSE NEWPAIRS))))) (SETQ SYM (CONVERT (FIRST PAIRS))) (PUSH SYM NEWPAIRS) (PUSHNEW SYM *GLOBALS*) (PUSH (IL:BQUOTE (IL:\\\, (CONVERT (SECOND PAIRS)))) NEWPAIRS)))(IL-DEFCONV RPAQ? (VAR &OPTIONAL (VALUE NIL SVAR) &REST OTHER-ARGS) (DECLARE (IGNORE OTHER-ARGS)) (CHECK-TYPE VAR SYMBOL) (LET ((SYM (CONVERT VAR))) (PUSHNEW SYM *GLOBALS*) (IF SVAR (IL:BQUOTE (DEFVAR (IL:\\\, SYM) (IL:\\\, (CONVERT VALUE)))) (IL:BQUOTE (DEFVAR (IL:\\\, SYM))))))(IL-DEFCONV CONSTANTS (&REST VARS-VALS) (PROGN-IF-NEEDED (MAP (QUOTE LIST) (FUNCTION (LAMBDA (F) (IF (CONSP F) (IL:BQUOTE (DEFCONSTANT (IL:\\\, (CONVERT (CAR F))) (IL:\\\, (CONVERT (CADR F))))) (IL:BQUOTE (DEFCONSTANT (IL:\\\, (CONVERT F)) (IL:\\\, (CONVERT F))))))) VARS-VALS)))(DEFVAR *WARN-FOR-ALL-IL-SYMBOLS* NIL)(DEFPARAMETER *WARN-FOR-IL-SYMBOLS-LOWER-THAN-THIS* NIL)(DEFVAR *WARN-ON-CHAR-CODE-USE* NIL "Warn if character codes are being used.")(IL-COPYDEF ATOM)(IL-COPYDEF BOUNDP)(IL-COPYDEF SET)(IL-DEFCONV LITATOM (X) (IL:* IL:|;;| "A more sophisticated code walker would tell us if this were being used as a test, and we could just expand to SYMBOLP then.") (LET* ((XV (IF (SYMBOLP X) (CONVERT X) (MAKE-FAKE-SYMBOL (QUOTE ..X..)))) (BODY (IL:BQUOTE (AND (SYMBOLP (IL:\\\, XV)) (IL:\\\, XV))))) (IF (SYMBOLP X) BODY (IL:BQUOTE (LET (((IL:\\\, XV) (IL:\\\, (CONVERT X)))) (IL:\\\, BODY))))))(IL-DEFCONV SETQQ (&REST PAIRS) (DO ((PAIRS PAIRS (REST (REST PAIRS))) (NEWPAIRS NIL)) ((ENDP PAIRS) (IL:BQUOTE (SETQ (IL:\\\,@ (NREVERSE NEWPAIRS))))) (PUSH (CONVERT (FIRST PAIRS)) NEWPAIRS) (PUSH (CONVERT (IL:BQUOTE (QUOTE (IL:\\\, (SECOND PAIRS))))) NEWPAIRS)))(IL-DEFCONV SETQ (&REST PAIRS) (DO ((PAIRS PAIRS (REST (REST PAIRS))) (NEWPAIRS NIL)) ((ENDP PAIRS) (IL:BQUOTE (SETQ (IL:\\\,@ (NREVERSE NEWPAIRS))))) (PUSH (CONVERT (FIRST PAIRS)) NEWPAIRS) (PUSH (IL:BQUOTE (IL:\\\, (CONVERT (SECOND PAIRS)))) NEWPAIRS)))(IL-DEFCONV PSETQ (&REST PAIRS) (DO ((PAIRS PAIRS (REST (REST PAIRS))) (NEWPAIRS NIL)) ((ENDP PAIRS) (IL:BQUOTE (PSETQ (IL:\\\,@ (NREVERSE NEWPAIRS))))) (PUSH (CONVERT (FIRST PAIRS)) NEWPAIRS) (PUSH (IL:BQUOTE (IL:\\\, (CONVERT (SECOND PAIRS)))) NEWPAIRS)))(IL-WARNINGFORM IL:GETTOPVAL)(IL-WARNINGFORM IL:SETTOPVAL)(IL-COPYDEF SET SETATOMVAL)(IL-DEFCONV GETATOMVAL (VAR) (IL:BQUOTE (SYMBOL-VALUE (IL:\\\, (CONVERT VAR)))))(IL-DEFCONV GETPROP (ATM PROP) (IF (QUOTED-SYMBOL-P ATM) (IL:BQUOTE (GET (IL:\\\, (CONVERT ATM)) (IL:\\\, (CONVERT PROP)))) (IL:BQUOTE (AND (SYMBOLP (IL:\\\, (CONVERT ATM))) (GET (IL:\\\, (CONVERT ATM)) (IL:\\\, (CONVERT PROP)))))))(IL-DEFCONV PUTPROP (ATM PROP &OPTIONAL VAL) (IL:BQUOTE (SETF (GET (IL:\\\, (CONVERT ATM)) (IL:\\\, (CONVERT PROP))) (IL:\\\, (CONVERT VAL)))))(IL-DEFCONV ADDPROP (SYM PROP VAL FRONTP) (LET ((SVAR (MAKE-FAKE-SYMBOL (QUOTE ..S..))) (PVAR (MAKE-FAKE-SYMBOL (QUOTE ..P..))) (XVAR (MAKE-FAKE-SYMBOL (QUOTE ..X..)))) (CASE FRONTP ((T) (IL:BQUOTE (LET* (((IL:\\\, SVAR) (IL:\\\, SYM)) ((IL:\\\, PVAR) (IL:\\\, PROP)) ((IL:\\\, XVAR) (GET SVAR PVAR))) (IF (IL:\\\, XVAR) (NCONC (IL:\\\, XVAR) (IL:\\\, VAL)) (SETF (GET (IL:\\\, SVAR) (IL:\\\, PVAR)) (LIST (IL:\\\, VAL))))))) ((NIL) (IL:BQUOTE (PUSH (IL:\\\, VAL) (GET (IL:\\\, SYM) (IL:\\\, PROP))))) (OTHERWISE (IL:BQUOTE (IF (IL:\\\, FRONTP) (PUSH (IL:\\\, VAL) (GET (IL:\\\, SYM) (IL:\\\, PROP))) (LET* (((IL:\\\, SVAR) (IL:\\\, SYM)) ((IL:\\\, PVAR) (IL:\\\, PROP)) ((IL:\\\, XVAR) (GET (IL:\\\, SVAR) (IL:\\\, PVAR)))) (IF (IL:\\\, XVAR) (NCONC (IL:\\\, XVAR) (IL:\\\, VAL)) (SETF (GET (IL:\\\, SVAR) (IL:\\\, PVAR)) (LIST (IL:\\\, VAL)))))))))))(IL-DEFCONV REMPROP (ATM PROP) (IL:BQUOTE (PROGN (REMPROP (IL:\\\, (CONVERT ATM)) (IL:\\\, (CONVERT PROP))) NIL)))(IL-DEFCONV REMPROPLIST (ATM PROPS) (LET ((PVAR (MAKE-FAKE-SYMBOL (QUOTE .PROP.)))) (IL:BQUOTE (PROGN (DOLIST ((IL:\\\, PVAR) (IL:\\\, (CONVERT PROPS))) (REMPROP (IL:\\\, (CONVERT ATM)) (IL:\\\, PVAR))) NIL))))(IL-DEFCONV CHANGEPROP (SYM PROP1 PROP2) (LET* ((SYMVAR-UNLETTED (OR (SYMBOLP SYM) (AND (CONSP SYM) (EQ (CAR SYM) (QUOTE QUOTE)) (= (LENGTH SYM) 2)))) (SYMVAR (IF SYMVAR-UNLETTED (CONVERT SYM) (MAKE-FAKE-SYMBOL (QUOTE ..SYM..)))) (BODY (IL:BQUOTE (SETF (GET (IL:\\\, SYMVAR) (IL:\\\, (CONVERT PROP2))) (GET (IL:\\\, SYMVAR) (IL:\\\, (CONVERT PROP1))))))) (IF SYMVAR-UNLETTED BODY (IL:BQUOTE (LET (((IL:\\\, SYMVAR) (IL:\\\, SYM))) (IL:\\\, BODY))))))(IL-WARNINGFORM IL:PROPNAMES)(IL-WARNINGFORM IL:DEFLIST)(IL-COPYDEF SYMBOL-PLIST GETPROPLIST)(IL-COPYDEF GENTEMP GENSYM)(IL-DEFCONV MKATOM (X) (WARN "MKATOM translated for strings only.") (IL:BQUOTE (INTERN (IL:\\\, (CONVERT X)))))(IL-DEFCONV L-CASE (THING &OPTIONAL FLG) (WARN "L-CASE translated for strings only") (CASE FLG ((T) (IL:BQUOTE (STRING-CAPITALIZE (IL:\\\, (CONVERT THING))))) ((NIL) (IL:BQUOTE (STRING-DOWNCASE (IL:\\\, (CONVERT THING))))) (OTHERWISE (LET ((S (MAKE-FAKE-SYMBOL ".X."))) (IL:BQUOTE (LET (((IL:\\\, S) (IL:\\\, (CONVERT THING)))) "L-CASE" (IF (IL:\\\, (CONVERT FLG)) (STRING-CAPITALIZE (IL:\\\, S)) (STRING-DOWNCASE (IL:\\\, S)))))))))(IL-DEFCONV U-CASE (THING) (WARN "U-CASE translated for strings only") (IL:BQUOTE (STRING-UPCASE (IL:\\\, (CONVERT THING)))))(IL-DEFCONV SETPROPLIST (ATM LST) (IL:BQUOTE (SETF (SYMBOL-PLIST (IL:\\\, (CONVERT ATM)) (IL:\\\, (CONVERT LST))))))(IL-DEFCONV CHARCODE (CHAR) (BLOCK CHARCODE (FLET ((CONVERT-CHAR (X) (COND ((TYPEP X (QUOTE (INTEGER 0 9))) (DIGIT-CHAR X)) ((EQL (LENGTH (STRING X)) 1) (CHAR (STRING X) 0)) ((AND (EQL (LENGTH (STRING X)) 2) (EQL (CHAR (STRING X) 0) #\^)) (CODE-CHAR (- (CHAR-CODE (CHAR-UPCASE (CHAR (STRING X) 1))) (CHAR-CODE #\@)))) ((NAME-CHAR X)) (T (RETURN-FROM CHARCODE (LIST (CONVERT (QUOTE IL:CHARCODE)) (CONVERT X))))))) (TYPECASE CHAR ((OR STRING SYMBOL (INTEGER 0 9)) (IL:BQUOTE (CHAR-CODE (IL:\\\, (CONVERT-CHAR CHAR))))) (LIST (IL:BQUOTE (MAPCAR (FUNCTION CHAR-CODE) (QUOTE (IL:\\\, (MAPCAR (FUNCTION CONVERT-CHAR) CHAR)))))) (OTHERWISE (LIST (CONVERT (QUOTE CHARCODE)) (CONVERT CHAR)))))))(IL-DEFCONV NTHCHARCODE (X N &OPTIONAL FLG RDTBL) (COND ((OR FLG RDTBL) (WARN "Cannot translate NTHCHARCODE flg or rdtbl args") *CURRENT-EXPRESSION*) (T (IL:BQUOTE (CHAR (SYMBOL-NAME (IL:\\\, (CONVERT X))) (IL:\\\, (CONVERT N)))))))(IL-DEFCONV CHARACTER (FORM) (IL:BQUOTE (CODE-CHAR (IL:\\\, (CONVERT FORM)))))(IL-DEFCONV CHCON1 (FORM) (IL:BQUOTE (CHAR-CODE (SVREF (SYMBOL-NAME (IL:\\\, (CONVERT FORM))) 0))))(DEFUN EVAL-IF-POSSIBLE (X) (XCL:IGNORE-ERRORS (RETURN-FROM EVAL-IF-POSSIBLE (EVAL X))) X)(IL-DEFCONV SELCHARQ (KEY &REST CLAUSES &AUX X) (IL:BQUOTE (CASE (IL:\\\, (CONVERT KEY)) (IL:\\\,@ (MAPCAR (FUNCTION (LAMBDA (CLAUSE &AUX X) (CONS (IF (CONSP (SETQ X (CAR CLAUSE))) (MAPCAR (FUNCTION (LAMBDA (V) (EVAL-IF-POSSIBLE (CONVERT (IL:BQUOTE (IL:CHARCODE (IL:\\\, X))))))) X) (AND X (EVAL-IF-POSSIBLE (CONVERT (IL:BQUOTE (IL:CHARCODE (IL:\\\, X))))))) (MAPCONVERT (CDR CLAUSE))))) (BUTLAST CLAUSES))) (IL:\\\,@ (AND (SETQ X (CAR (LAST CLAUSES))) (IL:BQUOTE ((OTHERWISE (IL:\\\,@ (IF (CONSP X) (CONVERT X) (LIST (CONVERT X))))))))))))(IL-COPYCONV CHARACTER FCHARACTER)(IL-WARNINGFORM IL:PACK)(IL-WARNINGFORM IL:PACK*)(IL-WARNINGFORM IL:UNPACK)(IL-WARNINGFORM IL:DUNPACK)(IL-WARNINGFORM IL:MAPATOMS)(IL-WARNINGFORM IL:APROPOS)(IL-DEFCONV NLISTP (X) (IL:BQUOTE (NOT (LISTP (IL:\\\, (CONVERT X))))))(IL-COPYDEF CONS)(IL-COPYDEF LISTP)(IL-COPYDEF CAR)(IL-COPYDEF CDR)(IL-COPYDEF CADR)(IL-COPYDEF CDAR)(IL-COPYDEF CDDR)(IL-COPYDEF CAAAR)(IL-COPYDEF CAADR)(IL-COPYDEF CADAR)(IL-COPYDEF CADDR)(IL-COPYDEF CDAAR)(IL-COPYDEF CDADR)(IL-COPYDEF CDDAR)(IL-COPYDEF CDDDR)(IL-COPYDEF CAAAAR)(IL-COPYDEF CAAADR)(IL-COPYDEF CAADAR)(IL-COPYDEF CAADDR)(IL-COPYDEF CADAAR)(IL-COPYDEF CDDDAR)(IL-COPYDEF CDDDDR)(IL-COPYDEF RPLACD)(IL-COPYDEF RPLACD FRPLACD)(IL-COPYDEF RPLACA)(IL-COPYDEF RPLACA FRPLACA)(IL-DEFCONV RPLNODE (X A D) (IL:BQUOTE (LET (($X$ (IL:\\\, (CONVERT X)))) (RPLACA $X$ (IL:\\\, (CONVERT A))) (RPLACD $X$ (IL:\\\, (CONVERT D))))))(IL-DEFCONV RPLNODE2 (X Y) (LET ((XVAR (MAKE-FAKE-SYMBOL ".X."))) (IL:BQUOTE (LET (((IL:\\\, XVAR) (IL:\\\, (CONVERT X)))) (RPLACA (IL:\\\, XVAR) (CAR (IL:\\\, (CONVERT Y)))) (RPLACD (IL:\\\, XVAR) (CDR (IL:\\\, (CONVERT Y))))))))(IL-DEFCONV FRPLNODE (X A D) (IL:BQUOTE (IL-RPLNODE (IL:\\\, (CONVERT X)) (IL:\\\, (CONVERT A)) (IL:\\\, (CONVERT D)))))(IL-DEFCONV FRPLNODE2 (X Y) (IL:BQUOTE (LET (($X$ (IL:\\\, (CONVERT X))) ($Y$ (IL:\\\, (CONVERT Y)))) (RPLACA $X$ (CAR $Y$)) (RPLACD $X$ (CDR $Y$)) $X$)))(IL-DEFCONV MKLIST (X) (IL:BQUOTE (LET (($X$ (IL:\\\, (CONVERT X)))) (IF (LISTP $X$) $X$ (LIST $X$)))))(IL-DEFCONV NCONC1 (LST X) (IL:BQUOTE (NCONC (IL:\\\, (CONVERT LST)) (LIST (IL:\\\, (CONVERT X))))))(IL-COPYDEF LIST)(IL-COPYDEF LIST*)(IL-COPYDEF APPEND)(IL-COPYDEF NCONC)(IL-COPYDEF TAILP)(IL-COPYDEF LAST)(IL-COPYDEF LENGTH)(IL-COPYDEF LENGTH FLENGTH)(IL-COPYDEF SET-DIFFERENCE LDIFFERENCE)(IL-COPYDEF INTERSECTION)(IL-COPYDEF UNION)(IL-DEFCONV ATTACH (X L) (LET* ((CON-X (CONVERT X)) (CON-L (CONVERT L)) (XV (IF (SYMBOLP CON-X) CON-X (MAKE-FAKE-SYMBOL (QUOTE ..X..)))) (LV (IF (SYMBOLP CON-L) CON-L (MAKE-FAKE-SYMBOL (QUOTE ..L..)))) (BODY (IL:BQUOTE (IF (IL:\\\, LV) (PROGN (SETF (CDR (IL:\\\, LV)) (CONS (CAR (IL:\\\, LV)) (CDR (IL:\\\, LV))) (CAR (IL:\\\, LV)) (IL:\\\, XV)) (IL:\\\, LV)) (CONS (IL:\\\, XV) NIL))))) (IF (AND (SYMBOLP CON-X) (SYMBOLP CON-L)) BODY (IL:BQUOTE (LET ((IL:\\\,@ (UNLESS (SYMBOLP CON-X) (IL:BQUOTE (((IL:\\\, XV) (IL:\\\, CON-X)))))) (IL:\\\,@ (UNLESS (SYMBOLP CON-L) (IL:BQUOTE (((IL:\\\, LV) (IL:\\\, CON-L))))))) (IL:\\\, BODY))))))(IL-DEFCONV LCONC (HEAD THING) (LET ((PV (MAKE-FAKE-SYMBOL ".P."))) (IF (NULL HEAD) (IL:BQUOTE (LET (((IL:\\\, PV) (CONS (IL:\\\, (CONVERT THING)) NIL))) (CONS (IL:\\\, PV) (LAST (IL:\\\, PV))))) (IL:BQUOTE (LET (((IL:\\\, PV) (IL:\\\, (CONVERT HEAD)))) "LCONC" (IF (CONSP (IL:\\\, PV)) (SETF (CDDR (IL:\\\, PV)) (CONS (IL:\\\, (CONVERT THING)) NIL) (CDR (IL:\\\, PV)) (LAST (CDDR (IL:\\\, PV)))) (LET (((IL:\\\, PV) (CONS (IL:\\\, (CONVERT THING)) NIL))) (CONS (IL:\\\, PV) (LAST (IL:\\\, PV))))))))))(IL-DEFCONV TCONC (HEAD THING) (LET ((PV (MAKE-FAKE-SYMBOL ".P."))) (IF (NULL HEAD) (IL:BQUOTE (LET (((IL:\\\, PV) (CONS (IL:\\\, (CONVERT THING)) NIL))) (CONS (IL:\\\, PV) (IL:\\\, PV)))) (IL:BQUOTE (LET (((IL:\\\, PV) (IL:\\\, (CONVERT HEAD)))) "TCONC" (IF (CONSP (IL:\\\, PV)) (SETF (CDDR (IL:\\\, PV)) (CONS (IL:\\\, (CONVERT THING)) NIL) (CDR PV) (CDDR PV)) (LET (((IL:\\\, PV) (CONS (IL:\\\, (CONVERT THING)) NIL))) (CONS (IL:\\\, PV) (IL:\\\, PV)))))))))(IL-WARNINGFORM IL:DOCOLLECT)(IL-WARNINGFORM IL:ENDCOLLECT)(IL-WARNINGFORM IL:SCRATCHLIST)(IL-WARNINGFORM IL:ADDTOSCRATCHLIST)(IL-WARNINGFORM IL:COPYALL)(IL-WARNINGFORM IL:HCOPYALL)(IL-WARNINGFORM IL:NLEFT)(IL-WARNINGFORM IL:LASTN)(IL-WARNINGFORM IL:COUNT)(IL-WARNINGFORM IL:COUNTDOWN)(IL-WARNINGFORM IL:EQUALN)(IL-WARNINGFORM IL:LDIFF)(IL-WARNINGFORM IL:LSUBST)(IL-WARNINGFORM IL:SUBPAIR)(IL-COPYDEF COPY-LIST COPY)(IL-DEFCONV NTH (X N) (IL:BQUOTE (NTHCDR (1- (IL:\\\, (CONVERT N))) (IL:\\\, (CONVERT X)))))(IL-DEFCONV MEMB (X Y) (IL:BQUOTE (MEMBER (IL:\\\, (CONVERT X)) (IL:\\\, (CONVERT Y)) :TEST (FUNCTION EQ))))(IL-DEFCONV FMEMB (X Y) (IL:BQUOTE (MEMBER (IL:\\\, (CONVERT X)) (IL:\\\, (CONVERT Y)) :TEST (FUNCTION EQ))))(IL-DEFCONV MEMBER (X Y) (IL:BQUOTE (MEMBER (IL:\\\, (CONVERT X)) (IL:\\\, (CONVERT Y)) :TEST (FUNCTION EQUAL))))(IL-DEFCONV EQMEMB (X Y) (LET ((XV (MAKE-FAKE-SYMBOL (QUOTE .X.))) (YV (MAKE-FAKE-SYMBOL (QUOTE .Y.)))) (IL:BQUOTE (LET (((IL:\\\, XV) (IL:\\\, (CONVERT X))) ((IL:\\\, YV) (IL:\\\, (CONVERT Y)))) "IL:EQMEMB" (OR (EQ (IL:\\\, XV) (IL:\\\, YV)) (MEMBER (IL:\\\, XV) (IL:\\\, YV) :TEST (FUNCTION EQ)))))))(IL-DEFCONV SUBST (NEW OLD EXPR) (IL:BQUOTE (SUBST (IL:\\\, (CONVERT NEW)) (IL:\\\, (CONVERT OLD)) (IL:\\\, (CONVERT EXPR)) :TEST (FUNCTION EQUAL))))(IL-DEFCONV DSUBST (NEW OLD EXPR) (IL:BQUOTE (NSUBST (IL:\\\, (CONVERT NEW)) (IL:\\\, (CONVERT OLD)) (IL:\\\, (CONVERT EXPR)) :TEST (FUNCTION EQUAL))))(IL-DEFCONV SUBLIS (ALST EXPR FLG) (COND ((EQ FLG (QUOTE T)) (IL:BQUOTE (SUBLIS (IL:\\\, (CONVERT ALST)) (COPY-TREE (IL:\\\, (CONVERT EXPR)))))) ((NULL FLG) (IL:BQUOTE (SUBLIS (IL:\\\, (CONVERT ALST)) (IL:\\\, (CONVERT EXPR))))) (T (IL:BQUOTE (SUBLIS (IL:\\\, (CONVERT ALST)) (IF (IL:\\\, (CONVERT FLG)) (COPY-TREE (IL:\\\, (CONVERT EXPR))) (IL:\\\, (CONVERT EXPR))))))))(IL-DEFCONV DSUBLIS (ALST EXPR FLG) (COND ((EQ FLG (QUOTE T)) (IL:BQUOTE (NSUBLIS (IL:\\\, (CONVERT ALST)) (COPY-TREE (IL:\\\, (CONVERT EXPR)))))) ((NULL FLG) (IL:BQUOTE (NSUBLIS (IL:\\\, (CONVERT ALST)) (IL:\\\, (CONVERT EXPR))))) (T (IL:BQUOTE (NSUBLIS (IL:\\\, (CONVERT ALST)) (IF (IL:\\\, (CONVERT FLG)) (COPY-TREE (IL:\\\, (CONVERT EXPR))) (IL:\\\, (CONVERT EXPR))))))))(IL-DEFCONV ASSOC (KEY ALST) (IL:BQUOTE (ASSOC (IL:\\\, (CONVERT KEY)) (IL:\\\, (CONVERT ALST)) :TEST (FUNCTION EQ))))(IL-DEFCONV SASSOC (KEY ALST) (IL:BQUOTE (ASSOC (IL:\\\, (CONVERT KEY)) (IL:\\\, (CONVERT ALST)) :TEST (FUNCTION EQUAL))))(IL-DEFCONV PUTASSOC (KEY VAL ALST) (LET ((AVAR (MAKE-FAKE-SYMBOL (QUOTE .ALIST.))) (KVAR (MAKE-FAKE-SYMBOL (QUOTE .KEY.))) (CVAR (MAKE-FAKE-SYMBOL (QUOTE .ASSN.)))) (IL:BQUOTE (LET* (((IL:\\\, KVAR) (IL:\\\, (CONVERT KEY))) ((IL:\\\, CVAR) (ASSOC (IL:\\\, KVAR) (IL:\\\, AVAR)))) "IL:PUTASSOC" (IF (IL:\\\, CVAR) (SETF (CDR (IL:\\\, CVAR)) (IL:\\\, (CONVERT VAL))) (IF (CONSP (IL:\\\, AVAR)) (NCONC (IL:\\\, AVAR) (CONS (CONS (IL:\\\, KVAR) (IL:\\\, (CONVERT VAL))) NIL))))))))(IL-COPYCONV NTH FNTH)(IL-COPYCONV LAST FLAST)(IL-COPYCONV MEMB FMEMB)(IL-COPYCONV ASSOC FASSOC)(IL-COPYDEF GETF LISTGET)(IL-DEFCONV LISTPUT (LST PROP VAL) (IL:BQUOTE (SETF (GETF (IL:\\\, (CONVERT LST)) (IL:\\\, (CONVERT PROP))) (IL:\\\, (CONVERT VAL)))))(IL-DEFCONV LISTGET1 (LST PROP) (IL:BQUOTE (SECOND (MEMBER (IL:\\\, (CONVERT PROP)) (IL:\\\, (CONVERT LST)) :TEST (FUNCTION EQ)))))(IL-DEFCONV MERGE (A B COMPAREFN) (IL:BQUOTE (MERGE (QUOTE LIST) (IL:\\\, (CONVERT A)) (IL:\\\, (CONVERT B)) (IL:\\\, (CONVERT COMPAREFN)))))(IL-WARNINGFORM IL:LISTPUT1)(IL-WARNINGFORM IL:ALPHORDER)(IL-WARNINGFORM IL:UALPHORDER)(IL-WARNINGFORM IL:COMPARELISTS)(IL-DEFCONV REMOVE (X L) (IL:BQUOTE (REMOVE (IL:\\\, (CONVERT X)) (IL:\\\, (CONVERT L)) :TEST (FUNCTION EQUAL))))(IL-DEFCONV DREMOVE (X L) (IL:BQUOTE (DELETE (IL:\\\, (CONVERT X)) (IL:\\\, (CONVERT L)) :TEST (FUNCTION EQ))))(IL-DEFCONV REVERSE (L) (LET ((LVAR (MAKE-FAKE-SYMBOL ".L."))) (IL:BQUOTE (LET (((IL:\\\, LVAR) (IL:\\\, (CONVERT L)))) (IF (LISTP (IL:\\\, LVAR)) (REVERSE (IL:\\\, LVAR)) (IL:\\\, LVAR))))))(IL-DEFCONV DREVERSE (L) (IL:BQUOTE (IF (LISTP (IL:\\\, L)) (NREVERSE (IL:\\\, L)) (IL:\\\, L))))(IL-DEFCONV NEGATE (X) (IL:BQUOTE (NOT (IL:\\\, (CONVERT X)))))(IL-COPYDEF STRINGP)(IL-DEFCONV STREQUAL (X Y) (LET* ((XVARP (NOT (OR (STRINGP X) (SYMBOLP X)))) (YVARP (NOT (OR (STRINGP Y) (SYMBOLP Y)))) (XV (IF XVARP (MAKE-FAKE-SYMBOL "$X") (CONVERT X))) (YV (IF YVARP (MAKE-FAKE-SYMBOL "$Y") (CONVERT Y)))) (IF (OR XVARP YVARP) (IL:BQUOTE (LET ((IL:\\\,@ (AND XVARP (IL:BQUOTE (((IL:\\\, XV) (IL:\\\, (CONVERT X))))))) (IL:\\\,@ (AND YVARP (IL:BQUOTE (((IL:\\\, YV) (IL:\\\, (CONVERT Y)))))))) "IL:STREQUAL" (AND (IL:\\\,@ (IF (NOT (STRINGP X)) (IL:BQUOTE ((STRINGP (IL:\\\, XV)))))) (IL:\\\,@ (IF (NOT (STRINGP Y)) (IL:BQUOTE ((STRINGP (IL:\\\, YV)))))) (STRING= (IL:\\\, XV) (IL:\\\, YV))))) (IL:BQUOTE (STRING= (IL:\\\, XV) (IL:\\\, YV))))))(IL-DEFCONV STRING-EQUAL (X Y) (LET* ((XVARP (NOT (OR (STRINGP X) (SYMBOLP X)))) (YVARP (NOT (OR (STRINGP Y) (SYMBOLP Y)))) (XV (IF XVARP (MAKE-FAKE-SYMBOL "$X") (CONVERT X))) (YV (IF YVARP (MAKE-FAKE-SYMBOL "$Y") (CONVERT Y)))) (IF (OR XVARP YVARP) (IL:BQUOTE (LET ((IL:\\\,@ (AND XVARP (IL:BQUOTE (((IL:\\\, XV) (IL:\\\, (CONVERT X))))))) (IL:\\\,@ (AND YVARP (IL:BQUOTE (((IL:\\\, YV) (IL:\\\, (CONVERT Y)))))))) "IL:STREQUAL" (AND (IL:\\\,@ (IF (NOT (STRINGP X)) (IL:BQUOTE ((STRINGP (IL:\\\, XV)))))) (IL:\\\,@ (IF (NOT (STRINGP Y)) (IL:BQUOTE ((STRINGP (IL:\\\, YV)))))) (STRING= (IL:\\\, XV) (IL:\\\, YV))))) (IL:BQUOTE (STRING-EQUAL (IL:\\\, XV) (IL:\\\, YV))))))(IL-DEFCONV NCHARS (THING &OPTIONAL FLG) (DECLARE (IGNORE FLG)) (IL:* IL:|;;| "Assume it will be a string or symbol; most common case by far.") (IL:BQUOTE (LENGTH (STRING (IL:\\\, (CONVERT THING))))))(DEFUN ALLOCSTRING (N &OPTIONAL INITCHAR OLD FATFLG) (COND (OLD (WARN "Cannot convert ALLOCSTRING old argument") *CURRENT-EXPRESSION*) (T (IL:BQUOTE (MAKE-STRING (IL:\\\, (CONVERT N)) (IL:\\\,@ (IF INITCHAR (LIST :INITIAL-ELEMENT (CONVERT INITCHAR)) NIL)))))))(IL-DEFCONV MKSTRING (X &OPTIONAL FLG RDTBL) (IL:BQUOTE (WRITE-TO-STRING (IL:\\\, (CONVERT X)) :ESCAPE (IL:\\\, (CONVERT FLG)))))(IL-DEFCONV CONCAT (&REST XX) (IL:BQUOTE (CONCATENATE (QUOTE STRING) (IL:\\\,@ (MAPCONVERT XX)))))(IL-DEFCONV CONCATLIST (L) (IL:BQUOTE (APPLY (FUNCTION CONCATENATE) (QUOTE STRING) (MAPCAR (FUNCTION (LAMBDA (X) (PRINC-TO-STRING X))) (IL:\\\, (CONVERT L))))))(IL-DEFCONV RPLSTRING (X N Y) (IL:BQUOTE (REPLACE (IL:\\\, (CONVERT X)) (IL:\\\, (CONVERT Y)) :START1 (IL:\\\, (CONVERT N)))))(IL-DEFCONV RPLCHARCODE (X N CODE) (IL:BQUOTE (SETF (CHAR (IL:\\\, (CONVERT X)) (IL:\\\, (CONVERT N))) (CODE-CHAR (IL:\\\, (CONVERT CODE))))))(IL-DEFCONV STRPOS (PAT STRING &OPTIONAL START SKIP ANCHOR TAIL CASEARRAY BACKWARDSFLG) (WHEN CASEARRAY (WARN "CASEARRAY arg to STRPOS not translated.")) (WHEN ANCHOR (WARN "ANCHOR arg to STRPOS not translated.")) (WHEN TAIL (WARN "TAIL arg to STRPOS not translated.")) (WHEN SKIP (WARN "SKIP arg to STRPOS not translated.")) (IL:BQUOTE (SEARCH (IL:\\\, (CONVERT PAT)) (IL:\\\, (CONVERT STRING)) (IL:\\\,@ (AND START (IL:BQUOTE (:START2 (1- (IL:\\\, (CONVERT START))))))) (IL:\\\,@ (AND BACKWARDSFLG (IL:BQUOTE (:FROM-END-P (IL:\\\, (CONVERT BACKWARDSFLG)))))))))(IL-DEFCONV SUBSTRING (X N &OPTIONAL M OLDPTR) (IL:BQUOTE (SUBSEQ (IL:\\\, (CONVERT X)) (IL:\\\, (CONVERT N)) (IL:\\\, (CONVERT M)))))(IL-WARNINGFORM IL:GNC)(IL-WARNINGFORM IL:GLC)(IL-DEFCONV MAPHASH (HARRAY MAPHFN) (IF (AND (CONSP MAPHFN) (EQ (CAR MAPHFN) (QUOTE FUNCTION)) (CONSP (SECOND MAPHFN)) (EQ (CAR (SECOND MAPHFN)) (QUOTE LAMBDA))) (IL:BQUOTE (MAPHASH (FUNCTION (LAMBDA ((IL:\\\, (CONVERT (SECOND (SECOND (SECOND MAPHFN))))) (IL:\\\, (CONVERT (FIRST (SECOND (SECOND MAPHFN)))))) IL:\\\, (MAPCONVERT (CDDR (SECOND MAPHFN))))) (IL:\\\, (CONVERT HARRAY)))) (IF (AND (CONSP MAPHFN) (EQ (CAR MAPHFN) (QUOTE LAMBDA))) (IL:BQUOTE (MAPHASH (FUNCTION (LAMBDA ((IL:\\\, (CONVERT (SECOND (SECOND MAPHFN)))) (IL:\\\, (CONVERT (FIRST (SECOND MAPHFN))))) IL:\\\, (MAPCONVERT (CDDR MAPHFN)))))) (IL:BQUOTE (MAPHASH (FUNCTION (LAMBDA (KEY VAL) (FUNCALL (IL:\\\, (CONVERT MAPHFN)) VAL KEY))) (IL:\\\, (CONVERT HARRAY)))))))(IL-DEFCONV GETHASH (KEY &OPTIONAL TABLE) (IL:BQUOTE ((IL:\\\, (IF TABLE (QUOTE GETHASH) (CONVERT (QUOTE GETHASH)))) (IL:\\\, (CONVERT KEY)) (IL:\\\,@ (AND TABLE (LIST (CONVERT TABLE)))))))(IL-DEFCONV PUTHASH (KEY VAL &OPTIONAL TBL) (IF TBL (IL:BQUOTE (SETF (GETHASH (IL:\\\, (CONVERT KEY)) (IL:\\\, (CONVERT TBL))) (IL:\\\, (CONVERT VAL)))) (LIST (CONVERT (QUOTE PUTHASH)) (CONVERT VAL) (CONVERT KEY))))(IL-DEFCONV SMALLP (X) (DECLARE (IGNORE X)) NIL)(IL-DEFCONV FIXP (X) (IL:BQUOTE (INTEGERP (IL:\\\, (CONVERT X)))))(IL-COPYDEF FLOATP)(IL-COPYDEF NUMBERP)(IL-COPYDEF EQUALP EQP)(IL-DEFCONV PLUS (&REST ARGS) (IL:BQUOTE (+ (IL:\\\,@ (MAPCONVERT ARGS)))))(IL-DEFCONV MINUS (X) (IL:BQUOTE (- (IL:\\\, (CONVERT X)))))(IL-DEFCONV DIFFERENCE (X Y) (IL:BQUOTE (- (IL:\\\, (CONVERT X)) (IL:\\\, (CONVERT Y)))))(IL-DEFCONV TIMES (&REST ARGS) (IL:BQUOTE (* (IL:\\\,@ (MAPCONVERT ARGS)))))(IL-DEFCONV GREATERP (X Y) (IL:BQUOTE (> (IL:\\\, (CONVERT X)) (IL:\\\, (CONVERT Y)))))(IL-DEFCONV LESSP (X Y) (IL:BQUOTE (< (IL:\\\, (CONVERT X)) (IL:\\\, (CONVERT Y)))))(IL-DEFCONV GEQ (X Y) (IL:BQUOTE (>= (IL:\\\, (CONVERT X)) (IL:\\\, (CONVERT Y)))))(IL-DEFCONV LEQ (X Y) (IL:BQUOTE (<= (IL:\\\, (CONVERT X)) (IL:\\\, (CONVERT Y)))))(IL-COPYDEF ZEROP)(IL-COPYDEF MINUSP)(IL-COPYDEF MIN)(IL-COPYDEF MAX)(IL-COPYDEF ABS)(IL-DEFCONV IPLUS (&REST ARGS) (IL:BQUOTE (+ (IL:\\\,@ (MAPCONVERT ARGS)))))(IL-DEFCONV IMINUS (&REST ARGS) (IL:BQUOTE (- (IL:\\\,@ (MAPCONVERT ARGS)))))(IL-DEFCONV IDIFFERENCE (X Y) (IL:BQUOTE (- (IL:\\\, (CONVERT X)) (IL:\\\, (CONVERT Y)))))(IL-DEFCONV ADD1 (X) (IL:BQUOTE (1+ (IL:\\\, (CONVERT X)))))(IL-DEFCONV SUB1 (X) (IL:BQUOTE (1- (IL:\\\, (CONVERT X)))))(IL-DEFCONV ITIMES (&REST ARGS) (IL:BQUOTE (* (IL:\\\,@ (MAPCONVERT ARGS)))))(IL-DEFCONV IQUOTIENT (X Y) (IL:BQUOTE (TRUNCATE (IL:\\\, (CONVERT X)) (IL:\\\, (CONVERT Y)))))(IL-DEFCONV IREMAINDER (X Y) (IL:BQUOTE (REM (IL:\\\, (CONVERT X)) (IL:\\\, (CONVERT Y)))))(IL-DEFCONV IMOD (X Y) (IL:BQUOTE (MOD (IL:\\\, (CONVERT X)) (IL:\\\, (CONVERT Y)))))(IL-DEFCONV IGREATERP (X Y) (IL:BQUOTE (> (IL:\\\, (CONVERT X)) (IL:\\\, (CONVERT Y)))))(IL-DEFCONV ILESSP (X Y) (IL:BQUOTE (< (IL:\\\, (CONVERT X)) (IL:\\\, (CONVERT Y)))))(IL-DEFCONV IGEQ (X Y) (IL:BQUOTE (>= (IL:\\\, (CONVERT X)) (IL:\\\, (CONVERT Y)))))(IL-DEFCONV ILEQ (X Y) (IL:BQUOTE (<= (IL:\\\, (CONVERT X)) (IL:\\\, (CONVERT Y)))))(IL-DEFCONV IMIN (&REST ARGS) (IL:BQUOTE (MIN (IL:\\\,@ (MAPCONVERT ARGS)))))(IL-DEFCONV IMAX (&REST ARGS) (IL:BQUOTE (MAX (IL:\\\,@ (MAPCONVERT ARGS)))))(IL-DEFCONV IEQP (X Y) (IL:BQUOTE (EQL (IL:\\\, (CONVERT X)) (IL:\\\, (CONVERT Y)))))(IL-DEFCONV FIX (N) (IL:BQUOTE (TRUNCATE (IL:\\\, (CONVERT N)))))(IL-DEFCONV FIXR (N) (IL:BQUOTE (ROUND (IL:\\\, (CONVERT N)))))(IL-DEFCONV RSH (X N) (IL:BQUOTE (ASH (IL:\\\, (CONVERT X)) (IL:\\\, (SIMP-MINUS (CONVERT N))))))(IL-DEFCONV POWEROFTWOP (X) (IL:BQUOTE (= (LOGCOUNT (IL:\\\, (CONVERT X))) 1)))(IL-DEFCONV EVENP (X &OPTIONAL (Y 2)) (IL:BQUOTE (ZEROP (MOD (IL:\\\, (CONVERT X)) (IL:\\\, (CONVERT Y))))))(IL-DEFCONV ODDP (X &OPTIONAL (Y 2)) (IL:BQUOTE (NOT (ZEROP (MOD (IL:\\\, (CONVERT X)) (IL:\\\, (CONVERT Y)))))))(IL-DEFCONV BITTEST (N MASK) (IL:BQUOTE (NOT (= 0 (LOGAND (IL:\\\, (CONVERT N)) (IL:\\\, (CONVERT MASK)))))))(IL-DEFCONV BITCLEAR (N MASK) (IL:BQUOTE (LOGAND (IL:\\\, (CONVERT N)) (LOGNOT (IL:\\\, (CONVERT MASK))))))(IL-COPYDEF GCD)(IL-COPYDEF LOGAND)(IL-COPYDEF LOGIOR LOGOR)(IL-COPYDEF ASH LSH)(IL-COPYDEF INTEGER-LENGTH INTEGERLENGTH)(IL-COPYDEF LOGNOT)(IL-COPYDEF LOGIOR BITSET)(IL-DEFCONV MASK.1\'S (POSITION SIZE) (IL:BQUOTE (ASH (1- (EXPT 2 (IL:\\\, (CONVERT SIZE)))) (IL:\\\, (CONVERT POSITION)))))(IL-DEFCONV MASK.0\'S (POSITION SIZE) (IL:BQUOTE (LOGNOT (ASH (1- (EXPT 2 (IL:\\\, (CONVERT SIZE)))) (IL:\\\, (CONVERT POSITION))))))(IL-DEFCONV LOADBYTE (N POS SIZE) (IL:BQUOTE (LDB (BYTE (IL:\\\, (CONVERT SIZE)) (IL:\\\, (CONVERT POS))) (IL:\\\, (CONVERT N)))))(IL-DEFCONV DEPOSITBYTE (N POS SIZE VAL) (IL:BQUOTE (DPB (IL:\\\, (CONVERT VAL)) (BYTE (IL:\\\, (CONVERT SIZE)) (IL:\\\, (CONVERT POS))) (IL:\\\, (CONVERT N)))))(IL-COPYDEF BYTE)(IL-COPYDEF BYTE-SIZE BYTESIZE)(IL-COPYDEF BYTE-POSITION BYTEPOSITION)(IL-COPYDEF LDB)(IL-COPYDEF DPB)(IL-WARNINGFORM IL:ROT)(IL-DEFCONV |push| (PLACE VALUE) (IL:BQUOTE (PUSH (IL:\\\, (CONVERT VALUE)) (IL:\\\, (CONVERT PLACE)))))(IL-DEFCONV |add| (PLACE &OPTIONAL INCREMENT &REST MORE-INCREMENTS) (COND (MORE-INCREMENTS (IL:BQUOTE (INCF (IL:\\\, (CONVERT PLACE)) (+ (IL:\\\, (CONVERT INCREMENT)) (IL:\\\,@ (MAPCONVERT MORE-INCREMENTS)))))) (INCREMENT (IL:BQUOTE (INCF (IL:\\\, (CONVERT PLACE)) (IL:\\\, (CONVERT INCREMENT))))) (T (CONVERT PLACE))))(IL-DEFCONV |change| (PLACE FORM) (COND ((OR (ATOM PLACE) (AND (= (LENGTH PLACE) 2) (ATOM (SECOND PLACE)))) (IL:BQUOTE (SETF (IL:\\\, (CONVERT PLACE)) (IL:\\\, (CONVERT (IL:SUBPAIR (QUOTE IL:DATUM) PLACE FORM)))))) ((= (LENGTH PLACE) 2) (LET ((NEW-PLACE (LIST (FIRST PLACE) (QUOTE $PLACE-ARG$)))) (IL:BQUOTE (LET (($PLACE-ARG$ (IL:\\\, (SECOND PLACE)))) (SETF (IL:\\\, (CONVERT NEW-PLACE)) (IL:\\\, (CONVERT (IL:SUBPAIR (QUOTE IL:DATUM) NEW-PLACE FORM)))))))) (T (IL:BQUOTE (SETF (IL:\\\, (CONVERT PLACE)) (IL:\\\, (CONVERT (IL:SUBPAIR (QUOTE IL:DATUM) PLACE FORM))))))))(IL-DEFCONV |pushnew| (PLACE THING) (IL:BQUOTE (PUSHNEW (IL:\\\, (CONVERT THING)) (IL:\\\, (CONVERT PLACE)) :TEST (QUOTE EQ))))(IL-DEFCONV |pushlist| (PLACE &REST LISTS) (LET ((NEWPLACE (CONVERT PLACE))) (IL:BQUOTE (SETF (IL:\\\, NEWPLACE) (APPEND (IL:\\\,@ (MAPCONVERT LISTS)) (IL:\\\, NEWPLACE))))))(IL-DEFCONV |swap| (PLACE1 PLACE2) (IL:BQUOTE (ROTATEF (IL:\\\, (CONVERT PLACE1)) (IL:\\\, (CONVERT PLACE2)))))(IL-COPYCONV |push| PUSH)(IL-COPYCONV |add| ADD)(IL-COPYCONV |change| CHANGE)(IL-COPYCONV |pushnew| PUSHNEW)(IL-COPYCONV |pushlist| PUSHLIST)(IL-COPYCONV |swap| SWAP)(IL-COPYDEF POP)(IL-COPYDEF POP |pop|)(IL-COPYDEF EQ)(IL-COPYDEF NULL)(IL-COPYDEF NOT)(IL-COPYDEF EQUAL)(IL-COPYDEF AND)(IL-COPYDEF OR)(IL-DEFCONV NEQ (X Y) (IL:BQUOTE (NOT (EQ (IL:\\\, (CONVERT X)) (IL:\\\, (CONVERT Y))))))(IL-DEFCONV COND (&REST CLAUSES) (IL:BQUOTE (COND (IL:\\\,@ (MAPCAR (FUNCTION (LAMBDA (CLAUSE) (MAPCONVERT CLAUSE))) CLAUSES)))))(IL-DEFCONV |if| (&REST ARGS &AUX (FORM (LIST (QUOTE COND)))) (IL:* IL:|;;| "don't use '(cond) because nreverse will smash it") (DO ((CLAUSE (LIST (CONVERT (POP ARGS)))) ARG) ((ENDP ARGS) (WHEN CLAUSE (PUSH (NREVERSE CLAUSE) FORM))) (CASE (SETQ ARG (POP ARGS)) ((IL:|then| IL:THEN)) ((IL:ELSE IL:|else|) (PUSH (NREVERSE CLAUSE) FORM) (SETQ CLAUSE (LIST (QUOTE T)))) (IL:* IL:|;;| "don't use '(t) because nreverse will smash it") ((IL:ELSEIF IL:|elseif|) (PUSH (NREVERSE CLAUSE) FORM) (SETQ CLAUSE (LIST (CONVERT (POP ARGS))))) (OTHERWISE (PUSH (CONVERT ARG) CLAUSE)))) (NREVERSE FORM))(IL-COPYCONV |if| IF)(IL-DEFCONV SELECTQ (X &REST CLAUSES) (IL:BQUOTE (CASE (IL:\\\, (CONVERT X)) (IL:\\\,@ (MAPCAR (FUNCTION (LAMBDA (CLAUSE) (IL:BQUOTE ((IL:\\\, (QUOTE-TREE (FIRST CLAUSE))) (IL:\\\,@ (MAPCONVERT (REST CLAUSE))))))) (BUTLAST CLAUSES))) (OTHERWISE (IL:\\\,@ (MAPCONVERT (LAST CLAUSES)))))))(IL-DEFCONV SELECTC (X &REST CLAUSES) (LET* ((DATUM (IF (SYMBOLP X) (CONVERT X) (GENTEMP))) (MAINBODY (IL:BQUOTE (COND (IL:\\\,@ (MAP (QUOTE LIST) (FUNCTION (LAMBDA (CLAUSE) (IL:BQUOTE ((EQL (IL:\\\, DATUM) (IL:\\\, (CONVERT (FIRST CLAUSE)))) (IL:\\\,@ (MAPCONVERT (REST CLAUSE))))))) (BUTLAST CLAUSES))) (T (IL:\\\,@ (MAPCONVERT (LAST CLAUSES)))))))) (IF (SYMBOLP X) MAINBODY (IL:BQUOTE (LET (((IL:\\\, DATUM) (IL:\\\, (CONVERT X)))) (IL:\\\, MAINBODY))))))(IL-DEFCONV CASE (X &REST CLAUSES) (IL:BQUOTE (CASE (IL:\\\, (CONVERT X)) (IL:\\\,@ (MAPCAR (FUNCTION (LAMBDA (CLAUSE) (IL:BQUOTE ((IL:\\\, (QUOTE-TREE (FIRST CLAUSE))) (IL:\\\,@ (MAPCONVERT (REST CLAUSE))))))) CLAUSES)))))(IL-COPYDEF PROG1)(IL-COPYDEF PROG2)(IL-COPYDEF PROGN)(IL-COPYDEF RETURN)(IL-COPYDEF RETURN-FROM RETFROM)(IL-DEFCONV GO (TAG) (IL:BQUOTE (GO (IL:\\\, (CONVERT TAG)))))(IL-DEFCONV PROG (VARLST &REST FORMS) (DECLARE (SPECIAL *LOCALS*)) (MULTIPLE-VALUE-BIND (NEW-VARLST VARNAMES) (EXPAND-VARLIST VARLST) (IL:BQUOTE (PROG (IL:\\\, NEW-VARLST) (IL:\\\,@ (LET ((*LOCALS* (APPEND VARNAMES *LOCALS*))) (MAPCONVERT FORMS)))))))(IL-DEFCONV LET (VARLST &REST FORMS) (DECLARE (SPECIAL *LOCALS*)) (MULTIPLE-VALUE-BIND (NEW-VARLST VARNAMES) (EXPAND-VARLIST VARLST) (IL:BQUOTE (LET (IL:\\\, NEW-VARLST) (IL:\\\,@ (LET ((*LOCALS* (APPEND VARNAMES *LOCALS*))) (MAPCONVERT FORMS)))))))(IL-DEFCONV LET* (VARLST &REST FORMS) (DECLARE (SPECIAL *LOCALS*)) (MULTIPLE-VALUE-BIND (NEW-VARLST VARNAMES) (EXPAND-VARLIST VARLST :SEQUENTIAL T) (IL:BQUOTE (LET* (IL:\\\, NEW-VARLST) (IL:\\\,@ (LET ((*LOCALS* (APPEND VARNAMES *LOCALS*))) (MAPCONVERT FORMS)))))))(IL-DEFCONV PROG* (VARLST &REST FORMS) (DECLARE (SPECIAL *LOCALS*)) (MULTIPLE-VALUE-BIND (NEW-VARLST VARNAMES) (EXPAND-VARLIST VARLST :SEQUENTIAL T) (IL:BQUOTE (PROG* (IL:\\\, NEW-VARLST) (IL:\\\,@ (LET ((*LOCALS* (APPEND VARNAMES *LOCALS*))) (MAPCONVERT FORMS)))))))(DEFUN CONVERT-DO (BINDINGS END-CLAUSES &REST BODY) (DECLARE (SPECIAL *LOCALS*)) (MULTIPLE-VALUE-BIND (NEW-VARLST VARNAMES) (EXPAND-VARLIST BINDINGS) (LET ((*LOCALS* (APPEND VARNAMES *LOCALS*))) (IL:BQUOTE (DO (IL:\\\, NEW-VARLST) (IL:\\\,@ (MAPCONVERT END-CLAUSES)) (IL:\\\,@ (MAPCONVERT BODY)))))))(DEFUN CONVERT-DO* (BINDINGS END-CLAUSES &REST BODY) (DECLARE (SPECIAL *LOCALS*)) (MULTIPLE-VALUE-BIND (NEW-VARLST VARNAMES) (EXPAND-VARLIST BINDINGS) (LET ((*LOCALS* (APPEND VARNAMES *LOCALS*))) (IL:BQUOTE (DO* (IL:\\\, NEW-VARLST) (IL:\\\,@ (MAPCONVERT END-CLAUSES)) (IL:\\\,@ (MAPCONVERT BODY)))))))(SETF (GET (QUOTE DO) (QUOTE CONVERT-FORM)) (QUOTE CONVERT-DO) (GET (QUOTE DO*) (QUOTE CONVERT-FORM)) (QUOTE CONVERT-DO*))(DEFPARAMETER *ITERATION-CONVERSION-TABLE* (QUOTE ((IL:|for| ((:EXPR-OR-ASSIGNMENT ((IL:|in| :EXPR ((IL:|by| FILTER-LIST-BY) (T . T))) (IL:|on| :EXPR ((IL:|by| FILTER-LIST-BY) (T . T))) (IL:|from| :EXPR ((IL:|to| :EXPR ((IL:|by| :EXPR T) (T . T))) (T . T))) (IL:|to| :EXPR ((IL:|by| :EXPR T) (T . T)) (T . T)) (IL:|by| (THEN) :EXPR T) (IL:|instring| FILTER-INSTRING))))) (IL:|as| ((:EXPR-OR-ASSIGNMENT ((IL:|in| :EXPR ((IL:|by| FILTER-LIST-BY) (T . T))) (IL:|on| :EXPR ((IL:|by| FILTER-LIST-BY) (T . T))) (IL:|from| :EXPR ((IL:|to| :EXPR ((IL:|by| :EXPR T) (T . T))) (T . T))) (IL:|to| :EXPR ((IL:|by| :EXPR T) (T . T)) (T . T)) (IL:|by| :EXPR T) (IL:|instring| FILTER-INSTRING))))) (IL:|to| (REPEAT) :EXPR ((IL:|by| :EXPR T) (T . T))) (IL:|bind| FILTER-BIND) (IL:|collect| FILTER-DO) (IL:|repeatwhile| FILTER-REPEATWHILE/UNTIL) (IL:|repeatuntil| FILTER-REPEATWHILE/UNTIL) (IL:|while| :EXPR T) (IL:|until| :EXPR T) (IL:|when| :EXPR T) (IL:|unless| :EXPR T) (IL:|first| (INITIALLY) FILTER-DO) (IL:|finally| FILTER-DO) (IL:|join| (NCONC) FILTER-DO) (IL:|sum| :EXPR T) (IL:|count| :EXPR T) (IL:|always| :EXPR T) (IL:|never| :EXPR T) (IL:|thereis| :EXPR T) (IL:|largest| (MAXIMIZE) :EXPR T) (IL:|smallest| (MINIMIZE) :EXPR T) (IL:|do| FILTER-DO))))(DEFUN CONVERT-ITERATION-STATEMENT (INITIAL-OPER REST-OF-FORM &AUX (REST REST-OF-FORM) (INITIAL INITIAL-OPER) SO-FAR) (IL:* IL:|;;| "Yeah, this is sort of ugly.  So is  CLISPIFY.") (LABELS ((LOSE (FMT-STRING &REST FMT-ARGS) (WARN "Couldn't translate I.S. form because ~?" FMT-STRING FMT-ARGS) (LET ((FORM (CONS INITIAL-OPER REST-OF-FORM))) (RETURN-FROM CONVERT-ITERATION-STATEMENT FORM))) (NEXT-STATE (KEY CURRENT-LEVEL) (LET* (CLISPWORD (KEY-IS-IS-OPER-P (AND (SYMBOLP KEY) (EQ (CAR (SETQ CLISPWORD (GET KEY (QUOTE IL:CLISPWORD)))) (QUOTE IL:FORWORD)))) (ASSOC-KEY (IF KEY-IS-IS-OPER-P (CDR CLISPWORD) KEY)) (FOUND (OR (ASSOC ASSOC-KEY CURRENT-LEVEL :TEST (FUNCTION (LAMBDA (A B) (IF (AND (SYMBOLP A) (SYMBOLP B)) (STRING-EQUAL A B) (EQ A B))))) (AND (NOT KEY-IS-IS-OPER-P) (OR (ASSOC (QUOTE :EXPR) CURRENT-LEVEL) (ASSOC (QUOTE :EXPR-OR-ASSIGNMENT) CURRENT-LEVEL))) (ASSOC (QUOTE T) CURRENT-LEVEL))) (CURRENT-ENTRY (CDR FOUND))) (IF CURRENT-ENTRY (COND ((AND (EQ (CAR FOUND) :EXPR-OR-ASSIGNMENT) (CONSP KEY) (EQ (SECOND KEY) (QUOTE IL:_))) (SETQ SO-FAR (LIST* (CONVERT (THIRD KEY)) (MAKE-FAKE-SYMBOL "=") (CONVERT (FIRST KEY)) SO-FAR))) ((MEMBER (CAR FOUND) (QUOTE (T :EXPR :EXPR-OR-ASSIGNMENT))) (PUSH (IF (EQ CURRENT-ENTRY (QUOTE T)) NIL (CONVERT KEY)) SO-FAR)) (T (PUSH (MAKE-FAKE-SYMBOL (STRING-UPCASE (STRING KEY))) SO-FAR))) (LOSE "Key ~a not expected" KEY)) (LOOP (COND ((EQ CURRENT-ENTRY (QUOTE T)) (IL:* IL:\; "(mumble . T)") (PUSH KEY REST) (IL:* IL:\; "means punt this token.") (POP SO-FAR) (RETURN-FROM NEXT-STATE)) ((EQ (CAR CURRENT-ENTRY) (QUOTE T)) (RETURN-FROM NEXT-STATE)) ((CONSP (CAR CURRENT-ENTRY)) (IF (CONSP (CAAR CURRENT-ENTRY)) (IL:* IL:|;;| "Assoc list...") (LET ((NEXT-KEY (POP REST))) (NEXT-STATE NEXT-KEY (CAR CURRENT-ENTRY)) (RETURN-FROM NEXT-STATE)) (IL:* IL:|;;| "substitution...") (SETF (CAR SO-FAR) (MAKE-FAKE-SYMBOL (CAAR CURRENT-ENTRY))))) ((MEMBER (CAR CURRENT-ENTRY) (QUOTE (:EXPR-OR-ASSIGNMENT :EXPR))) (IF (AND (SYMBOLP (CAR REST)) (EQ (CAR (GET (CAR REST) (QUOTE IL:CLISPWORD))) (QUOTE IL:FORWORD))) (LOSE "~a where expression expected" (CAR REST)) (PUSH (CONVERT (COPY-TREE (POP REST))) SO-FAR))) ((NULL (CDR CURRENT-ENTRY)) (MULTIPLE-VALUE-SETQ (SO-FAR REST) (FUNCALL (CAR CURRENT-ENTRY) SO-FAR REST (FUNCTION LOSE))) (RETURN-FROM NEXT-STATE)) (T (IF (EQ (CAR CURRENT-ENTRY) (CAR REST)) (PUSH (CONVERT (COPY-TREE (POP REST))) SO-FAR) (LOSE "Expected ~a" (CAR CURRENT-ENTRY))))) (POP CURRENT-ENTRY))))) (LOOP (NEXT-STATE INITIAL *ITERATION-CONVERSION-TABLE*) (WHEN (NULL REST) (RETURN (CONS (MAKE-FAKE-SYMBOL (QUOTE LOOP)) (NREVERSE SO-FAR)))) (SETQ INITIAL (POP REST)))))(DEFUN FILTER-NUMERIC-BY (SO-FAR REST))(DEFUN FILTER-LIST-BY (SO-FAR REST) (LET ((STEP-FORM (POP REST)) (VAR (FOURTH SO-FAR)) (OPERAND (SECOND SO-FAR))) (IF (AND (CONSP STEP-FORM) (= (LENGTH STEP-FORM) 2) (OR (EQ (SECOND STEP-FORM) VAR) (IL:* IL:\; "") (EQ (SECOND STEP-FORM) OPERAND))) (PUSH (IL:BQUOTE (QUOTE (IL:\\\, (FIRST STEP-FORM)))) SO-FAR) (LET ((LAMBDA-VAR (MAKE-FAKE-SYMBOL ".X."))) (PUSH (IL:BQUOTE (FUNCTION (LAMBDA ((IL:\\\, LAMBDA-VAR)) (IL:\\\, (SUBLIS (LIST (CONS VAR LAMBDA-VAR) (CONS OPERAND LAMBDA-VAR)) STEP-FORM))))) SO-FAR)))) (VALUES SO-FAR REST))(DEFUN FILTER-BIND (SO-FAR REST LOSE-CONTINUATION &AUX TOKEN (FIRST T)) (IL:* IL:|;;| "Change BIND to WITH.") (SETQ SO-FAR (CONS (MAKE-FAKE-SYMBOL "WITH") (CDR SO-FAR))) (LOOP (WHEN (NULL REST) (RETURN SO-FAR)) (COND ((EQ (SETQ TOKEN (CAR REST)) (QUOTE IL:OLD)) (FUNCALL LOSE-CONTINUATION "OLD not convertable")) ((CONSP TOKEN) (UNLESS FIRST (PUSH (MAKE-FAKE-SYMBOL "AND") SO-FAR)) (POP REST) (PUSH (CONVERT (CAR TOKEN)) SO-FAR) (WHEN (EQ (SECOND TOKEN) (QUOTE IL:_)) (SETF SO-FAR (LIST* (CONVERT (THIRD TOKEN)) (MAKE-FAKE-SYMBOL "=") SO-FAR)))) ((NOT (SYMBOLP TOKEN)) (FUNCALL LOSE-CONTINUATION "Unknown BIND token ~a" TOKEN)) ((EQ (CAR (GET TOKEN (QUOTE IL:CLISPWORD))) (QUOTE IL:FORWORD)) (RETURN (VALUES SO-FAR REST))) (T (UNLESS FIRST (PUSH (MAKE-FAKE-SYMBOL "AND") SO-FAR)) (PUSH (CONVERT TOKEN) SO-FAR) (POP REST) (WHEN (EQ (CAR REST) (QUOTE IL:_)) (SETF SO-FAR (LIST* (CONVERT (CADR REST)) (MAKE-FAKE-SYMBOL "=") SO-FAR) REST (CDDR REST))))) (SETQ FIRST NIL)))(DEFUN FILTER-DO (SO-FAR REST IGNORE &AUX TEM) (DECLARE (IGNORE IGNORE)) (LOOP (WHEN (OR (NULL REST) (AND (SYMBOLP (SETQ TEM (CAR REST))) (EQ (CAR (GET TEM (QUOTE IL:CLISPWORD))) (QUOTE IL:FORWORD)))) (RETURN (VALUES SO-FAR REST))) (PUSH (CONVERT (COPY-TREE TEM)) SO-FAR) (POP REST)))(DEFUN FILTER-INSTRING (SO-FAR REST IGNORE) (DECLARE (IGNORE IGNORE)) (VALUES (REVAPPEND (IL:BQUOTE ((IL:\\\, (MAKE-FAKE-SYMBOL "BEING")) (IL:\\\, (MAKE-FAKE-SYMBOL "THE")) (IL:\\\, (MAKE-FAKE-SYMBOL "CHARACTERS")) (IL:\\\, (MAKE-FAKE-SYMBOL "OF")) (IL:\\\, (POP REST)))) (CDR SO-FAR)) REST))(DEFUN FILTER-REPEATWHILE/UNTIL (SO-FAR REST IGNORE) (DECLARE (IGNORE IGNORE)) (LET* ((KEY (STRING (FAKE-SYMBOL-NAME (POP SO-FAR)))) (VALUE (COND ((STRING= KEY "REPEATWHILE") (IL:BQUOTE (DO (UNLESS (IL:\\\, (CONVERT (POP REST))) ((IL:\\\, (MAKE-FAKE-SYMBOL "LOOP-FINISH"))))))) ((STRING= KEY "REPEATUNTIL") (IL:BQUOTE (DO (WHEN (IL:\\\, (CONVERT (POP REST))) ((IL:\\\, (MAKE-FAKE-SYMBOL "LOOP-FINISH"))))))) (T (IL:BQUOTE (DO (IL:\\\, (CONVERT (POP REST))))))))) (UNLESS (OR (NULL REST) (EQ (CAR REST) (QUOTE IL:|finally|))) (LET ((*CURRENT-EXPRESSION* (SECOND VALUE))) (WARN "I.S. oper repeatuntil may need to be moved."))) (VALUES (REVAPPEND VALUE SO-FAR) REST)))(DEFVAR *ADD-REST-ARG* NIL)(DEFVAR *PARAMETERS-ALWAYS-OPTIONAL* NIL)(DEFUN DEFINEQ1 (DEFINEQ-FORM &AUX (NAME (EXTERN (SYMBOL-NAME (FIRST DEFINEQ-FORM)) *IL-PACKAGE*)) (DEFN (SECOND DEFINEQ-FORM)) (FORMS (CDDR DEFINEQ-FORM)) VARLST) (DECLARE (SPECIAL *LOCALS* *CURRENT-FUNCTION-CALLS* *FUNCTION-CALLS*)) (WHEN FORMS (SETQ DEFN (IL:BQUOTE (LAMBDA (IL:\\\, DEFN) (IL:\\\,@ FORMS))))) (SETQ VARLST (SECOND DEFN)) (SETQ *CURRENT-FUNCTION-CALLS* (LIST NAME)) (PROG1 (CASE (FIRST DEFN) (LAMBDA (IF (LISTP VARLST) (MULTIPLE-VALUE-BIND (NEW-VARLST VARNAMES) (EXPAND-VARLIST VARLST) (LET ((*LOCALS* (APPEND VARNAMES *LOCALS*))) (WHEN NEW-VARLST (PUSH (QUOTE &OPTIONAL) NEW-VARLST)) (IL:BQUOTE (DEFUN (IL:\\\, NAME) ((IL:\\\,@ NEW-VARLST) (IL:\\\,@ (AND *ADD-REST-ARG* (QUOTE (&REST $EXTRA-ARGS$))))) (IL:\\\,@ (AND *ADD-REST-ARG* (QUOTE ((DECLARE (IGNORE $EXTRA-ARGS$)))))) (IL:\\\,@ (MAPCONVERT (CDDR DEFN))))))) (LET ((*LOCALS* (ACONS VARLST :LOCAL *LOCALS*))) (IL:BQUOTE (DEFUN (IL:\\\, NAME) (&REST $ARGS$ &AUX ((IL:\\\, VARLST) (LENGTH $ARGS$))) (IL:\\\,@ (MAPCONVERT (CDDR DEFN)))))))) (NLAMBDA (IF (LISTP VARLST) (MULTIPLE-VALUE-BIND (NEW-VARLST VARNAMES) (EXPAND-VARLIST VARLST :TYPE :MACRO-ARG) (LET ((*LOCALS* (APPEND VARNAMES *LOCALS*))) (WHEN NEW-VARLST (PUSH (QUOTE &OPTIONAL) NEW-VARLST)) (IL:BQUOTE (DEFMACRO (IL:\\\, NAME) ((IL:\\\,@ NEW-VARLST) &REST $EXTRA-ARGS$) (DECLARE (IGNORE $EXTRA-ARGS$)) (IL:\\\, (MAKE-BQ (PROGN-IF-NEEDED (MAPCONVERT (CDDR DEFN))))))))) (LET ((*LOCALS* (ACONS VARLST :MACRO-ARG *LOCALS*))) (IL:BQUOTE (DEFMACRO (IL:\\\, NAME) (&REST (IL:\\\, VARLST)) (IL:\\\, (MAKE-BQ (PROGN-IF-NEEDED (MAPCONVERT (CDDR DEFN)))))))))) (T (ERROR "Unknown DEFINEQ type ~a" (FIRST DEFN)))) (PUSH (REVERSE *CURRENT-FUNCTION-CALLS*) *FUNCTION-CALLS*) (SETQ *CURRENT-FUNCTION-CALLS* NIL)))(IL-DEFCONV ARG (VAR M) (DECLARE (IGNORE VAR)) (IL:BQUOTE (NTH (IL:\\\, (SIMP-1- (CONVERT M))) $ARGS$)))(IL-DEFCONV SETARG (VAR M X) (DECLARE (IGNORE VAR)) (IL:BQUOTE (SETF (NTH (1- (IL:\\\, (CONVERT M))) $ARGS$) (IL:\\\, (CONVERT X)))))(IL-DEFCONV DEFINEQ (&REST ARGS) (PROGN-IF-NEEDED (MAPCAR (QUOTE DEFINEQ1) ARGS)))(IL-DEFCONV PUTD (FN &OPTIONAL DEF &REST EXTRA) (DECLARE (IGNORE EXTRA)) (IL:BQUOTE (IF (NULL (IL:\\\, (CONVERT DEF))) (MAKUNBOUND (IL:\\\, (CONVERT FN))) (SETF (SYMBOL-FUNCTION (IL:\\\, (CONVERT FN))) (IL:\\\, (CONVERT DEF))))))(IL-DEFCONV CCODEP (SYM) (LET ((S (MAKE-FAKE-SYMBOL ".X."))) (IL:BQUOTE (LET (((IL:\\\, S) (IL:\\\, (CONVERT SYM)))) "CCODEP" (AND (FBOUNDP (IL:\\\, S)) (COMPILED-FUNCTION-P (SYMBOL-FUNCTION (IL:\\\, S))))))))(IL-COPYDEF SYMBOL-FUNCTION GETD)(IL-COPYDEF APPLY)(IL-COPYDEF FUNCALL APPLY*)(IL-DEFCONV KWOTE (FORM) (IF (IL:CONSTANTEXPRESSIONP FORM) (CONVERT FORM) (IL:BQUOTE (LIST (QUOTE QUOTE) (IL:\\\, (CONVERT FORM))))))(IL-DEFCONV MOVD (FROM TO &OPTIONAL COPYFLG DONTCOPY) (SETQ *CURRENT-EXPRESSION* (IL:BQUOTE (SETF (SYMBOL-FUNCTION (IL:\\\, (CONVERT TO))) (SYMBOL-FUNCTION (IL:\\\, (CONVERT FROM)))))) (WHEN (OR COPYFLG DONTCOPY) (WARN "MOVD can't translate argument copyflg or dontcopy")) *CURRENT-EXPRESSION*)(IL-DEFCONV MAP (MAPX MAPFN1 &OPTIONAL MAPFN2) (WHEN MAPFN2 (ERROR "MAP does not yet support MAPFN2 arg")) (IL:BQUOTE (MAPL (IL:\\\, (CONVERT MAPFN1)) (IL:\\\, (CONVERT MAPX)))))(IL-DEFCONV MAPC (MAPX MAPFN1 &OPTIONAL MAPFN2) (WHEN MAPFN2 (ERROR "MAPC does not yet support MAPFN2 arg")) (IL:BQUOTE (MAPC (IL:\\\, (CONVERT MAPFN1)) (IL:\\\, (CONVERT MAPX)))))(IL-DEFCONV MAPLIST (MAPX MAPFN1 &OPTIONAL MAPFN2) (WHEN MAPFN2 (ERROR "MAPLIST does not yet support MAPFN2 arg")) (IL:BQUOTE (MAPLIST (IL:\\\, (CONVERT MAPFN1)) (IL:\\\, (CONVERT MAPX)))))(IL-DEFCONV MAPCAR (MAPX MAPFN1 &OPTIONAL MAPFN2) (WHEN MAPFN2 (ERROR "MAPCAR does not yet support MAPFN2 arg")) (IL:BQUOTE (MAPCAR (IL:\\\, (CONVERT MAPFN1)) (IL:\\\, (CONVERT MAPX)))))(IL-DEFCONV MAPCON (MAPX MAPFN1 &OPTIONAL MAPFN2) (WHEN MAPFN2 (ERROR "MAPCON does not yet support MAPFN2 arg")) (IL:BQUOTE (MAPCON (IL:\\\, (CONVERT MAPFN1)) (IL:\\\, (CONVERT MAPX)))))(IL-DEFCONV MAPCONC (MAPX MAPFN1 &OPTIONAL MAPFN2) (WHEN MAPFN2 (ERROR "MAPCONC does not yet support MAPFN2 arg")) (IL:BQUOTE (MAPCAN (IL:\\\, (CONVERT MAPFN1)) (IL:\\\, (CONVERT MAPX)))))(IL-DEFCONV MAP2C (MAPX MAPY MAPFN1 &OPTIONAL MAPFN2) (WHEN MAPFN2 (ERROR "MAP2C does not yet support MAPFN2 arg")) (IL:BQUOTE (MAPC (IL:\\\, (CONVERT MAPFN1)) (IL:\\\, (CONVERT MAPX)) (IL:\\\, (CONVERT MAPY)))))(IL-DEFCONV MAP2CAR (MAPX MAPY MAPFN1 &OPTIONAL MAPFN2) (WHEN MAPFN2 (ERROR "MAP2CAR does not yet support MAPFN2 arg")) (IL:BQUOTE (MAPCAR (IL:\\\, (CONVERT MAPFN1)) (IL:\\\, (CONVERT MAPX)) (IL:\\\, (CONVERT MAPY)))))(IL-DEFCONV SUBSET (MAPX MAPFN1 &OPTIONAL MAPFN2) (WHEN MAPFN2 (ERROR "SUBSET does not yet support MAPFN2 arg")) (IL:BQUOTE (REMOVE-IF-NOT (IL:\\\, (CONVERT MAPFN1)) (IL:\\\, (CONVERT MAPX)))))(IL-WARNINGFORM IL:MOVD?)(DEFVAR *WARN-ON-ERSETQ-NLSETQ* T "Warn on these for later rewrite.")(IL-DEFCONV SHOULDNT (MESS) (IL:BQUOTE (ERROR "Shouldn't happen: ~a" (IL:\\\, (CONVERT MESS)))))(IL-DEFCONV ERROR (&OPTIONAL MESS1 MESS2 NOBREAK) (IL:BQUOTE (ERROR "~a ~a" (IL:\\\, (CONVERT MESS1)) (IL:\\\, (CONVERT MESS2)))))(IL-DEFCONV NLSETQ (FORM) (LIST (MAKE-FAKE-SYMBOL "IGNORE-ERRORS") (CONVERT FORM)))(IL-DEFCONV ERSETQ (&REST FORMS) (LET ((CVAR (MAKE-FAKE-SYMBOL "C"))) (IL:BQUOTE ((IL:\\\, (MAKE-FAKE-SYMBOL "CONDITION-CASE")) (IL:\\\, (IF (NULL (CDR FORMS)) (CONVERT (FIRST FORMS)) (IL:BQUOTE (PROGN (IL:\\\,. (MAPCONVERT FORMS)))))) (ERROR ((IL:\\\, CVAR)) (PRINC (IL:\\\, CVAR)) (VALUES NIL (IL:\\\, CVAR)))))))(DEFVAR *EVAL-WHEN-STATE* (QUOTE (LOAD EVAL)))(IL-DEFCONV DECLARE\: (&REST ARGS) (DO ((FORMS NIL) (EVAL-WHEN-EVAL T) (EVAL-WHEN-COMPILE NIL) (EVAL-WHEN-LOAD T) (FIRST NIL) (TMPFORMS NIL) (FIRSTFORMS NIL) ARG) NIL (WHEN (AND TMPFORMS (OR (ENDP ARGS) (ATOM (FIRST ARGS)))) (LET* ((NEW-EVAL-WHEN-STATE (IL:BQUOTE ((IL:\\\,@ (IF EVAL-WHEN-EVAL (QUOTE (EVAL)))) (IL:\\\,@ (IF EVAL-WHEN-COMPILE (QUOTE (COMPILE)))) (IL:\\\,@ (IF EVAL-WHEN-LOAD (QUOTE (LOAD))))))) (OLD-EVAL-WHEN-STATE *EVAL-WHEN-STATE*) (*EVAL-WHEN-STATE* NEW-EVAL-WHEN-STATE)) (SETQ TMPFORMS (IL:BQUOTE ((IL:\\\, (IF (NULL (SET-DIFFERENCE NEW-EVAL-WHEN-STATE *EVAL-WHEN-STATE*)) (QUOTE PROGN) (QUOTE EVAL-WHEN))) (IL:\\\,@ (MAPCONVERT (REVERSE TMPFORMS))))))) (IF FIRST (PUSH TMPFORMS FIRSTFORMS) (PUSH TMPFORMS FORMS)) (SETQ TMPFORMS NIL)) (WHEN (ENDP ARGS) (RETURN (CONS (QUOTE PROGN) (APPEND (REVERSE FIRSTFORMS) (REVERSE FORMS))))) (SETQ ARG (POP ARGS)) (IF (ATOM ARG) (CASE ARG ((EVAL@LOAD DOEVAL@LOAD) (SETQ EVAL-WHEN-EVAL T)) (DONTEVAL@LOAD (SETQ EVAL-WHEN-EVAL NIL)) (EVAL@LOADWHEN (SETQ EVAL-WHEN-EVAL (EVAL (POP ARGS)))) ((EVAL@COMPILE DOEVAL@COMPILE) (SETQ EVAL-WHEN-COMPILE T)) (DONTEVAL@COMPILE (SETQ EVAL-WHEN-COMPILE NIL)) (EVAL@COMPILEWHEN (SETQ EVAL-WHEN-COMPILE (EVAL (POP ARGS)))) ((COPY DOCOPY) (SETQ EVAL-WHEN-LOAD T)) (DONTCOPY (SETQ EVAL-WHEN-LOAD NIL)) (COPYWHEN (SETQ EVAL-WHEN-LOAD (EVAL (POP ARGS)))) (FIRST (SETQ FIRST T)) (NOTFIRST (SETQ FIRST NIL)) (T (WARN "Unknown option ~a in DECLARE:" ARG))) (PUSH ARG TMPFORMS))))(IL-DEFCONV PUTPROPS (ATM &REST VARS) (DECLARE (SPECIAL *LOCALS*)) (PROGN-IF-NEEDED (DO ((VARS VARS (REST (REST VARS))) (FORMS NIL)) ((ENDP VARS) (REVERSE FORMS)) (PUSH (CASE (FIRST VARS) ((MACRO DMACRO) (DEFINE-MACRO (EXTERN (SYMBOL-NAME ATM) *IL-PACKAGE*) (SECOND VARS))) (T (IL:BQUOTE (SETF (GET (IL:\\\, (CONVERT (IL:BQUOTE (QUOTE (IL:\\\, ATM))))) (IL:\\\, (CONVERT (IL:BQUOTE (QUOTE (IL:\\\, (FIRST VARS))))))) (IL:\\\, (CONVERT (IL:BQUOTE (QUOTE (IL:\\\, (SECOND VARS)))))))))) FORMS))))(DEFUN DEFINE-MACRO (NAME DEFN) (COND ((EQ (CAR DEFN) (QUOTE =)) (IL:BQUOTE (SETF (SYMBOL-FUNCTION (QUOTE (IL:\\\, NAME))) (SYMBOL-FUNCTION (QUOTE (IL:\\\, (EXTERN (CDR DEFN) *IL-PACKAGE*))))))) ((MEMBER (FIRST DEFN) (QUOTE (LAMBDA OPENLAMBDA)) :TEST (FUNCTION EQ)) (DEFINE-SUBST-MACRO NAME (REST DEFN))) (T (DEFINE-SUBST-MACRO NAME DEFN))))(DEFUN DEFINE-SUBST-MACRO (NAME DEFN &AUX VARNAMES FORMS ARGLIST) (SETQ VARNAMES (FIRST DEFN)) (SETQ ARGLIST VARNAMES) (SETQ FORMS (REST DEFN)) (WHEN (AND VARNAMES (ATOM VARNAMES)) (SETQ VARNAMES (LIST VARNAMES))) (LET ((*LOCALS* (APPEND (MAPCAR (FUNCTION (LAMBDA (NAME) (IL:BQUOTE ((IL:\\\, NAME) . :MACRO-ARG)))) (MAKE-TRUE-LIST VARNAMES)) *LOCALS*))) (COND ((AND ARGLIST (ATOM ARGLIST)) (IL:BQUOTE (DEFMACRO (IL:\\\, NAME) (&REST (IL:\\\, ARGLIST)) (IL:\\\, (MAKE-BQ (PROGN-IF-NEEDED (MAPCONVERT FORMS))))))) ((TRUE-LIST-P ARGLIST) (WHEN ARGLIST (PUSH (QUOTE &OPTIONAL) ARGLIST)) (IL:BQUOTE (DEFMACRO (IL:\\\, NAME) ((IL:\\\,@ ARGLIST) (IL:\\\,@ (AND *ADD-REST-ARG* (QUOTE (&REST $EXTRA-ARGS$))))) (IL:\\\,@ (AND *ADD-REST-ARG* (QUOTE ((DECLARE (IGNORE $EXTRA-ARGS$)))))) (IL:\\\, (MAKE-BQ (PROGN-IF-NEEDED (MAPCONVERT FORMS))))))) (T (IL:BQUOTE (DEFMACRO (IL:\\\, NAME) (IL:\\\, ARGLIST) (IL:\\\, (MAKE-BQ (PROGN-IF-NEEDED (MAPCONVERT FORMS))))))))))(IL-DEFCONV QUOTE (ARG) (IL:BQUOTE (QUOTE (IL:\\\, (QUOTE-TREE ARG)))))(DEFVAR *TYPE-CONVERSION-PLIST* (QUOTE (IL:SPECVARS SPECIAL IL:GLOBALVARS NIL)))(IL-DEFCONV DECLARE (&REST ARGS) (IL:BQUOTE (DECLARE (IL:\\\,@ (MAPCAN (FUNCTION (LAMBDA (ARG) (LET ((TYPE (GETF *TYPE-CONVERSION-PLIST* (FIRST ARG) :NOT-FOUND))) (WHEN (AND (EQ TYPE :NOT-FOUND) (STRING= (PACKAGE-NAME (SYMBOL-PACKAGE (FIRST ARG))) "INTERLISP")) (WARN "Unknown type in DECLARE ~s" (FIRST ARG)) (SETQ TYPE (FIRST ARG))) (AND TYPE (IL:BQUOTE (((IL:\\\, TYPE) (IL:\\\,@ (IF (CONSP (REST ARG)) (MAPCONVERT (REST ARG)) NIL))))))))) ARGS)))))(IL-DEFCONV FILEMAP (&REST ARGS) (DECLARE (IGNORE ARGS)) NIL)(IL-DEFCONV ADDTOVAR (VAR &REST ARGS) (IL:BQUOTE (IL:ADDTOVAR (IL:\\\, (CONVERT VAR)) (IL:\\\,@ (QUOTE-TREE ARGS)))))(IL-DEFCONV APPENDTOVAR (VAR &REST ARGS) (IL:BQUOTE (IL:APPENDTOVAR (IL:\\\, (CONVERT VAR)) (IL:\\\,@ (QUOTE-TREE ARGS)))))(IL-DEFCONV FUNCTION (FN &OPTIONAL ENV) (IL:* IL:|;;| " This should barf on NLAMBDA forms!") (WHEN ENV (WARN "FUNCTION does not support environment")) (COND ((NOT (SYMBOLP FN)) (IL:BQUOTE (FUNCTION (IL:\\\, (CONVERT FN))))) ((GET FN (QUOTE CONVERT-FORM)) (IL:* IL:|;;| "Fake up  a way to make it work...") (LET* ((NEW-AL (MAPCAR (FUNCTION (LAMBDA (X) (GENTEMP "G"))) (IL:ARGLIST FN))) (CONVERSION (CONVERT (CONS FN NEW-AL)))) (IF (EQUAL (CDR CONVERSION) NEW-AL) (IL:* IL:|;;| "If it turns into a different fcn with the same args, do it the easy way...") (IL:BQUOTE (FUNCTION (IL:\\\, (CAR CONVERSION)))) (IL:* IL:|;;| "Whole different expression; use full-dress adaptor") (IL:BQUOTE (FUNCTION (LAMBDA (&OPTIONAL (IL:\\\,. NEW-AL)) (IL:\\\, (LIST (QUOTE IL:*) (QUOTE IL:|;;|) (STRING FN))) (IL:\\\, CONVERSION))))))) (T (IL:BQUOTE (FUNCTION (IL:\\\, (NOTE-EXPORTED-SYMBOL FN)))))))(IL-DEFCONV LAMBDA (VARLST &REST FORMS) (IF (LISTP VARLST) (MULTIPLE-VALUE-BIND (NEW-VARLST VARNAMES) (EXPAND-VARLIST VARLST) (LET ((*LOCALS* (APPEND VARNAMES *LOCALS*))) (IL:BQUOTE (LAMBDA (&OPTIONAL (IL:\\\,@ NEW-VARLST)) (IL:\\\,@ (MAPCONVERT FORMS)))))) (LET ((*LOCALS* (ACONS VARLST :LOCAL *LOCALS*))) (IL:BQUOTE (LAMBDA (&REST $ARGS$ &AUX ((IL:\\\, VARLST) (LENGTH $ARGS$))) (IL:\\\,@ (MAPCONVERT FORMS)))))))(IL-DEFCONV DEFINE-FILE-INFO (&REST IGNORE) NIL)(IL-DEFCONV PRETTYCOMPRINT (&REST IGNORE) NIL)(SETF (GET (QUOTE FILECREATED) (QUOTE EARLY)) T)(IL-DEFCONV FILECREATED (&REST JUNK) (CONVERT (LIST* (QUOTE *) (QUOTE |;;;|) "File Created " JUNK)))(IL-DEFCONV CONSTANT (X) (LIST (QUOTE QUOTE) (MAKE-SHARP-COMMA :CONTENTS (CONVERT X))))(IL-COPYDEF PROCESSP)(IL-DEFCONV CREATE.MONITORLOCK (NAME &OPTIONAL EXCLUSIVE) (SETQ *CURRENT-EXPRESSION* (IL:BQUOTE ((IL:\\\, (MAKE-FAKE-SYMBOL "UE:MAKE-PROCESS-LOCK")) :NAME (IL:\\\, (CONVERT NAME))))) (WHEN EXCLUSIVE (WARN "CREATE.MONITORLOCK cannot handle arg EXCLUSIVE")) *CURRENT-EXPRESSION*)(IL-DEFCONV OBTAIN.MONITORLOCK (LOCK &OPTIONAL DONTWAIT UNWINDSAVE) (LET* ((PROCESS-LOCK-LOCKER (MAKE-FAKE-SYMBOL "UE:PROCESS-LOCK-LOCKER")) (CURRENT-PROCESS (MAKE-FAKE-SYMBOL "UE:CURRENT-PROCESS")) (PROCESS-LOCK (MAKE-FAKE-SYMBOL "UE:PROCESS-LOCK")) (WITHOUT-SCHEDULING (MAKE-FAKE-SYMBOL "UE:WITHOUT-SCHEDULING")) (LVAR (MAKE-FAKE-SYMBOL (QUOTE ..L..))) (OVAR (MAKE-FAKE-SYMBOL (QUOTE ..OWNER..))) (BODY (IL:BQUOTE (LET* (((IL:\\\, LVAR) (IL:\\\, (CONVERT LOCK))) ((IL:\\\, OVAR) ((IL:\\\, PROCESS-LOCK-LOCKER) (IL:\\\, LVAR)))) "OBTAIN.MONITORLOCK" (COND ((EQ (IL:\\\, OVAR) ((IL:\\\, CURRENT-PROCESS))) T) ((NULL (IL:\\\, OVAR)) (IF (IL:\\\, (CONVERT DONTWAIT)) ((IL:\\\, WITHOUT-SCHEDULING) (WHEN (NULL ((IL:\\\, PROCESS-LOCK-LOCKER) (IL:\\\, LVAR))) ((IL:\\\, PROCESS-LOCK) (IL:\\\, LVAR)) (IL:\\\, LVAR))) (PROGN ((IL:\\\, PROCESS-LOCK) (IL:\\\, LVAR)) (IL:\\\, LVAR)))) (T (WHEN (NULL (IL:\\\, DONTWAIT)) ((IL:\\\, PROCESS-LOCK) (IL:\\\, LVAR)) (IL:\\\, LVAR)))))))) (IF UNWINDSAVE (IL:BQUOTE (UNWIND-PROTECT (IL:\\\, BODY) (IL:\\\, (CONVERT UNWINDSAVE)))) BODY)))(IL-DEFCONV RELEASE.MONITORLOCK (LOCK &OPTIONAL EVENIFNOTMINE) (IL:BQUOTE ((IL:\\\, (MAKE-FAKE-SYMBOL "UE:PROCESS-UNLOCK")) (IL:\\\, (CONVERT LOCK)) ((IL:\\\, (MAKE-FAKE-SYMBOL "UE:CURRENT-PROCESS"))) T)))(IL-DEFCONV WITH.MONITOR (LOCK &REST BODY) (IL:BQUOTE ((IL:\\\, (MAKE-FAKE-SYMBOL "UE:WITH-PROCESS-LOCK")) (IL:\\\, (CONVERT LOCK)) (IL:\\\,. (MAPCONVERT BODY)))))(IL-DEFCONV NOTIFY.EVENT (EVENT &OPTIONAL ONCEONLY) (SETQ *CURRENT-EXPRESSION* (IL:BQUOTE ((IL:\\\, (MAKE-FAKE-SYMBOL "UE:PROCESS-UNLOCK")) (IL:\\\, (CONVERT EVENT))))) (WHEN ONCEONLY (WARN "NOTIFY.EVENT cannot handle arg ONCEONLY")) *CURRENT-EXPRESSION*)(IL-DEFCONV THIS.PROCESS (&REST ARGS) (CONS (MAKE-FAKE-SYMBOL "UE:CURRENT-PROCESS") (MAPCONVERT ARGS)))(IL-WARNINGFORM IL:AWAIT.EVENT)(IL-WARNINGFORM IL:CREATE.EVENT)(IL-DEFCONV OPENSTRINGSTREAM (STR &OPTIONAL ACCESS) (COND ((OR (NULL ACCESS) (EQUAL ACCESS (QUOTE (QUOTE IL:INPUT)))) (IL:BQUOTE (MAKE-STRING-INPUT-STREAM (IL:\\\, (CONVERT STR))))) ((EQUAL ACCESS (QUOTE (QUOTE IL:OUTPUT))) (LET ((BODY (LIST (QUOTE MAKE-STRING-OUTPUT-STREAM)))) (WHEN STR (LET ((*CURRENT-EXPRESSION* BODY)) (WARN "STRING arg to OPENSTRINGSTREAM not translated; use GET-OUTPUT-STREAM-STRING in the appropriate place"))) BODY)) ((EQUAL ACCESS (QUOTE (QUOTE IL:BOTH))) (WARN "Can't translate OPENSTRINGSTREAM for BOTH.") *CURRENT-EXPRESSION*) (T (WARN "Can't translate OPENSTRINGSTREAM for variable access type.") *CURRENT-EXPRESSION*)))(IL-COPYDEF PRINT)(IL-COPYDEF TERPRI)(IL-COPYDEF PRIN1 PRIN2)(IL-COPYDEF PRINC PRIN1)(IL-COPYDEF READ-CHAR BIN)(IL-COPYDEF WRITE-CHAR BOUT)(DEFVAR *ANNOTATE-PRINTOUT-FORM* NIL "Include the original printout form as an annotation.")(IL-DEFCONV PRINTOUT (STREAM &REST ARGS &AUX SUBSTRINGS FMTARGS FORMS (ARGSTAIL ARGS) ARG) (LOOP (WHEN (NULL ARGSTAIL) (RETURN)) (SETF ARG (POP ARGSTAIL)) (TYPECASE ARG (STRING (PUSH ARG SUBSTRINGS)) (INTEGER (PUSH (FORMAT NIL "~~~d~:[~;@~]T" (ABS ARG) (MINUSP ARG)) SUBSTRINGS)) (SYMBOL (LABELS ((MAYBE-NUMERIC-ARG (ARG FORMAT) (PUSH "~" SUBSTRINGS) (IF (INTEGERP ARG) (PUSH (WRITE-TO-STRING ARG :BASE 10) SUBSTRINGS) (PROGN (PUSH "V" SUBSTRINGS) (PUSH (CONVERT ARG) FMTARGS))) (PUSH FORMAT SUBSTRINGS)) (ESCAPE-FORM (FORM) (PUSH (IL:BQUOTE (FORMAT (IL:\\\, (OR STREAM T)) (IL:\\\, (APPLY (FUNCTION CONCATENATE) (QUOTE STRING) (NREVERSE SUBSTRINGS))) (IL:\\\,@ (NREVERSE FMTARGS)))) FORMS) (PUSH FORM FORMS) (SETQ SUBSTRINGS NIL FMTARGS NIL))) (CASE ARG ((T) (PUSH "~%" SUBSTRINGS)) ((IL:\, IL:|,,| IL:|,,,|) (PUSH (MAKE-STRING (LENGTH (STRING ARG)) :INITIAL-ELEMENT #\Space) SUBSTRINGS)) (IL:.SP (MAYBE-NUMERIC-ARG (POP ARGSTAIL) "@T")) (IL:.TAB (MAYBE-NUMERIC-ARG (POP ARGSTAIL) "T")) (IL:.TAB0 (WARN "PRINTOUT command .TAB0 treated like .TAB") (MAYBE-NUMERIC-ARG (POP ARGSTAIL) "T")) (IL:.SKIP (MAYBE-NUMERIC-ARG (POP ARGSTAIL) "%")) (IL:.PAGE (PUSH "~|" SUBSTRINGS)) (IL:.P2 (PUSH "~s" SUBSTRINGS) (PUSH (CONVERT (POP ARGSTAIL)) FMTARGS)) ((IL:.PPV IL:PPF) (ESCAPE-FORM (IL:BQUOTE (PPRINT (IL:\\\, (CONVERT (POP ARGSTAIL))) (IL:\\\, (CONVERT (OR STREAM T))))))) ((IL:.PPVTL IL:.PPFTL) (ESCAPE-FORM (IL:BQUOTE (DO ((.X. (IL:\\\, (CONVERT (POP ARGSTAIL))) (CDR .X.))) (NIL) (PPRINT (CAR .X.) (IL:\\\, (CONVERT (OR STREAM T)))) (UNLESS (CDR .X.) (RETURN)) (WRITE-CHAR #\Space (OR STREAM T)))))) (IL:\# (ESCAPE-FORM (POP ARGSTAIL))) (OTHERWISE (LET ((SA (SYMBOL-NAME ARG))) (IF (CHAR= (CHAR SA 0) #\.) (WARN "Couldn't translate PRINTOUT command ~a." ARG) (PROGN (PUSH "~a" SUBSTRINGS) (PUSH (CONVERT ARG) FMTARGS)))))))) (T (PUSH "~a" SUBSTRINGS) (PUSH (CONVERT ARG) FMTARGS)))) (WHEN SUBSTRINGS (PUSH (IL:BQUOTE (FORMAT (IL:\\\, (OR STREAM T)) (IL:\\\, (APPLY (FUNCTION CONCATENATE) (QUOTE STRING) (NREVERSE SUBSTRINGS))) (IL:\\\,@ (NREVERSE FMTARGS)))) FORMS)) (IF (OR *ANNOTATE-PRINTOUT-FORM* (> (LENGTH FORMS) 1)) (IL:BQUOTE (PROGN (IL:\\\, (LIST (QUOTE IL:*) (QUOTE IL:|;;|) (LET ((*PACKAGE* (FIND-PACKAGE (QUOTE IL)))) (WRITE-TO-STRING (LIST* (QUOTE IL:PRINTOUT) STREAM ARGS))))) (IL:\\\,@ (NREVERSE FORMS)))) (FIRST FORMS)))(IL-DEFCONV READ (STREAM &OPTIONAL RDTBL FLG) (DECLARE (IGNORE FLG)) (IF RDTBL (IL:BQUOTE (LET ((*READTABLE* (IL:\\\, (CONVERT RDTBL)))) (READ (IL:\\\, (CONVERT STREAM))))) (IL:BQUOTE (READ (IL:\\\, (CONVERT STREAM))))))(IL-DEFCONV READP (FILE &OPTIONAL FLG) (DECLARE (IGNORE FLG)) (IL:BQUOTE (LISTEN (IL:\\\, (CONVERT FILE)))))(IL-COPYCONV PRINTOUT |printout|)(IL-WARNINGFORM IL:INPUT)(IL-WARNINGFORM IL:RATOM)(IL-WARNINGFORM IL:RSTRING)(IL-WARNINGFORM IL:RATOMS)(IL-WARNINGFORM IL:RATEST)(IL-WARNINGFORM IL:READC)(IL-WARNINGFORM IL:PEEKC)(IL-WARNINGFORM IL:LASTC)(IL-WARNINGFORM IL:READCCODE)(IL-WARNINGFORM IL:PEEKCCODE)(IL-WARNINGFORM IL:READP)(IL-WARNINGFORM IL:EOFP)(IL-WARNINGFORM IL:WAITFORINPUT)(IL-WARNINGFORM IL:SKREAD)(IL-WARNINGFORM IL:SKIPSEPRS)(IL-WARNINGFORM IL:OUTPUT)(IL-WARNINGFORM IL:PRIN3)(IL-WARNINGFORM IL:PRIN4)(IL-WARNINGFORM IL:PRINTCCODE)(IL-WARNINGFORM IL:TAB)(IL-WARNINGFORM IL:SHOWPRIN2)(IL-WARNINGFORM IL:SHOWPRINT)(IL-WARNINGFORM IL:PRINTBELLS)(IL-WARNINGFORM IL:LINELENGTH)(IL-WARNINGFORM IL:SETLINELENGTH)(IL-WARNINGFORM IL:WINDOWADDPROP)(IL-WARNINGFORM IL:\\PUTBASE)(IL-WARNINGFORM IL:\\GETBASE)(IL-WARNINGFORM IL:DSPLEFTMARGIN)(IL-WARNINGFORM IL:RESETLST)(IL-WARNINGFORM IL:WINDOWPROP)(IL-WARNINGFORM IL:SMARTARGLIST)(IL-WARNINGFORM IL:EDITGETD)(IL-WARNINGFORM IL:FIND.PROCESS)(IL-WARNINGFORM IL:PROCESS.EVALV)(IL-WARNINGFORM IL:PROCESSP)(IL-WARNINGFORM IL:PROCESS.EVAL)(IL-WARNINGFORM IL:FREEMENU)(IL-WARNINGFORM IL:FM.RESETMENU)(IL-WARNINGFORM IL:FM.CHANGESTATE)(IL-WARNINGFORM IL:FM.CHANGELABEL)(IL-WARNINGFORM IL:FM.ITEMPROP)(IL-WARNINGFORM IL:FM.EDITITEM)(IL-WARNINGFORM IL:FM.GETITEM)(IL-WARNINGFORM IL:MAINWINDOW)(IL-WARNINGFORM IL:RESETFORM)(IL-WARNINGFORM IL:SETTERMTABLE)(IL-WARNINGFORM IL:PROCESSPROP)(IL-WARNINGFORM IL:TTY.PROCESS)(IL-WARNINGFORM IL:CLEARW)(IL-WARNINGFORM IL:\\CARET.DOWN)(IL-WARNINGFORM IL:\\SMASHSTRING)(IL-WARNINGFORM IL:BKSYSBUF)(IL-WARNINGFORM IL:CLEARBUF)(IL-WARNINGFORM IL:GETSYNTAX)(IL-WARNINGFORM IL:OPENWP)(IL-WARNINGFORM IL:STRINGWIDTH)(IL-WARNINGFORM IL:CHARWIDTH)(IL-WARNINGFORM IL:FLASHWINDOW)(IL-WARNINGFORM IL:MENU)(IL-WARNINGFORM IL:FONTCREATE)(IL-WARNINGFORM IL:TTYINPROMPTFORWORD)(IL-WARNINGFORM IL:MOUSECONFIRM)(IL-WARNINGFORM IL:CLOSEW)(IL-WARNINGFORM IL:ATTACHWINDOW)(IL-WARNINGFORM IL:SHAPEW)(IL-WARNINGFORM IL:CONCATLIST)(IL-WARNINGFORM IL:GETPROMPTWINDOW)(IL-WARNINGFORM IL:BITBLT)(IL-WARNINGFORM IL:BLTSHADE)(IL-WARNINGFORM IL:BITMAPWIDTH)(IL-WARNINGFORM IL:BITMAPHEIGHT)(IL-WARNINGFORM IL:FONTPROP)(IL-WARNINGFORM IL:TEDIT.INSERT)(IL-WARNINGFORM IL:TEDIT.PARALOOKS)(IL-WARNINGFORM IL:DSPCLIPPINGREGION)(IL-WARNINGFORM IL:MOVETO)(IL-WARNINGFORM IL:RELMOVETO)(IL-WARNINGFORM IL:DSPFONT)(IL-WARNINGFORM IL:DSPXPOSITION)(IL-WARNINGFORM IL:CURSORCREATE)(IL-WARNINGFORM IL:WAIT.FOR.TTY)(IL-WARNINGFORM IL:\\SAVEVMEMBACKGROUND)(IL-WARNINGFORM IL:GETREGION)(IL-WARNINGFORM IL:WINDOWREGION)(IL-WARNINGFORM IL:EVALV)(IL-WARNINGFORM IL:TTY/EDITE)(IL-WARNINGFORM IL:CLISPTRAN)(IL-WARNINGFORM IL:TTY/EDITL)(IL-WARNINGFORM IL:MARKASCHANGED)(IL-WARNINGFORM IL:FIXEDITDATE)(IL-WARNINGFORM IL:PUTDEF)(IL-WARNINGFORM IL:ADDSPELL)(IL-WARNINGFORM IL:PROCESS.APPLY)(IL-WARNINGFORM IL:STKPOS)(IL-WARNINGFORM IL:EDITMODE)(IL-WARNINGFORM IL:TOTOPW)(IL-WARNINGFORM IL:EXPANDW)(IL-WARNINGFORM IL:ADD.PROCESS)(IL-WARNINGFORM IL:INSIDEP)(IL-WARNINGFORM IL:LASTMOUSEX)(IL-WARNINGFORM IL:LASTMOUSEY)(IL-WARNINGFORM IL:CREATEW)(IL-WARNINGFORM IL:DSPLINEFEED)(IL-WARNINGFORM IL:DSPRIGHTMARGIN)(IL-WARNINGFORM IL:DOWINDOWCOM)(IL-WARNINGFORM IL:TTY.PROCESSP)(IL-WARNINGFORM IL:IN/SCROLL/BAR?)(IL-WARNINGFORM IL:SCROLL.HANDLER)(IL-WARNINGFORM IL:BLOCK)(IL-WARNINGFORM IL:CLOCK)(IL-WARNINGFORM IL:DSPXOFFSET)(IL-WARNINGFORM IL:DSPYOFFSET)(IL-WARNINGFORM IL:CREATEREGION)(IL-WARNINGFORM IL:HEIGHTIFWINDOW)(IL-WARNINGFORM IL:SCROLLW)(IL-WARNINGFORM IL:WXOFFSET)(IL-WARNINGFORM IL:WYOFFSET)(IL-WARNINGFORM IL:KEYDOWNP)(IL-WARNINGFORM IL:SHIFTDOWNP)(IL-WARNINGFORM IL:UNTILMOUSESTATE)(IL-WARNINGFORM IL:FIND-READTABLE)(IL-WARNINGFORM IL:NILL)(IL-WARNINGFORM IL:FILECOMS)(IL-WARNINGFORM IL:ADDFILE)(IL-WARNINGFORM IL:ADDTOFILE)(IL-WARNINGFORM IL:READTABLEPROP)(IL-WARNINGFORM IL:LINELENGTH)(IL-WARNINGFORM IL:GETDEF)(DEFUN CONVERT-FNS (FNS) (CONS (QUOTE PROGN) (MAP-INTO-CONTEXT (QUOTE CONVERT-ONE-FN) FNS)))(DEFUN CONVERT-ONE-FN (FN) (COND ((SYMBOLP FN)) ((AND (CONSP FN) (EQ (CAR FN) (QUOTE IL:*))) (RETURN-FROM CONVERT-ONE-FN NIL)) (T (WARN "Unconvertable FNS element: ~s" FN) (RETURN-FROM CONVERT-ONE-FN NIL))) (LET* ((DEFN (IL:VIRGINFN FN)) (NAME FN) (VARLST (SECOND DEFN)) (*CURRENT-DEFINITION* NAME) (*CURRENT-DEFINITION-TYPE* "Function") (*CURRENT-FUNCTION-CALLS* (LIST NAME)) (*CURRENT-FREE-REFERENCES* (LIST NAME)) (CONVERSION (CASE (FIRST DEFN) ((LAMBDA IL:LAMBDA) (IL:* IL:|;;| "cl:lambda may actually want its own clause...") (IF (LISTP VARLST) (MULTIPLE-VALUE-BIND (NEW-VARLST VARNAMES) (EXPAND-VARLIST VARLST) (LET ((*LOCALS* (COPY-LIST VARNAMES))) (WHEN (AND NEW-VARLST *PARAMETERS-ALWAYS-OPTIONAL*) (PUSH (QUOTE &OPTIONAL) NEW-VARLST)) (IL:BQUOTE (DEFUN (IL:\\\, NAME) ((IL:\\\,@ NEW-VARLST) (IL:\\\,@ (AND *ADD-REST-ARG* (QUOTE (&REST $EXTRA-ARGS$))))) (IL:\\\,@ (AND *ADD-REST-ARG* (QUOTE ((DECLARE (IGNORE $EXTRA-ARGS$)))))) (IL:\\\,@ (MAPCONVERT (CDDR DEFN))))))) (LET ((*LOCALS* (ACONS VARLST :LOCAL NIL))) (IL:BQUOTE (DEFUN (IL:\\\, NAME) (&REST $ARGS$ &AUX ((IL:\\\, VARLST) (LENGTH $ARGS$))) (IL:\\\,@ (MAPCONVERT (CDDR DEFN)))))))) (IL:NLAMBDA (IF (LISTP VARLST) (MULTIPLE-VALUE-BIND (NEW-VARLST VARNAMES) (EXPAND-VARLIST VARLST :TYPE :MACRO-ARG) (LET ((*LOCALS* (COPY-LIST VARNAMES))) (WHEN NEW-VARLST (PUSH (QUOTE &OPTIONAL) NEW-VARLST)) (IL:BQUOTE (DEFMACRO (IL:\\\, NAME) ((IL:\\\,@ NEW-VARLST) &REST $EXTRA-ARGS$) (DECLARE (IGNORE $EXTRA-ARGS$)) (IL:\\\, (MAKE-BQ (PROGN-IF-NEEDED (MAPCONVERT (CDDR DEFN))))))))) (LET ((*LOCALS* (ACONS VARLST :MACRO-ARG NIL))) (IL:BQUOTE (DEFMACRO (IL:\\\, NAME) (&REST (IL:\\\, VARLST)) (IL:\\\, (MAKE-BQ (PROGN-IF-NEEDED (MAPCONVERT (CDDR DEFN)))))))))) (T (ERROR "Unknown DEFINEQ type ~a" (FIRST DEFN)))))) (VALUES CONVERSION (NREVERSE *CURRENT-FUNCTION-CALLS*) (NREVERSE *CURRENT-FREE-REFERENCES*))))(DEFUN CONVERT-CONSTANTS (VARS &OPTIONAL (MAPPING-FN (QUOTE MAPCAR))) (CONS (QUOTE PROGN) (MAP-INTO-CONTEXT (FUNCTION (LAMBDA (V) (IF (CONSP V) (IL:BQUOTE (DEFCONSTANT (IL:\\\, (FIRST V)) (IL:\\\, (SECOND V)))) (IL:BQUOTE (DEFCONSTANT (IL:\\\, V) (IL:\\\, (IL:KWOTE (SYMBOL-VALUE V)))))))) VARS)))(DEFUN CONVERT-INITVARS (VARS &OPTIONAL (MAPPING-FN (QUOTE MAPCAR))) (CONS (QUOTE PROGN) (MAP-INTO-CONTEXT (FUNCTION (LAMBDA (V) (IF (CONSP V) (AND (NOT (EQ (CAR V) (QUOTE IL:*))) (IL:BQUOTE (DEFVAR (IL:\\\, (FIRST V)) (IL:\\\, (SECOND V))))) (IL:BQUOTE (DEFVAR (IL:\\\, V) NIL))))) VARS)))(DEFUN CONVERT-VARS (VARS &OPTIONAL (MAPPING-FN (QUOTE MAPCAR))) (LET ((*CURRENT-DEFINTION-TYPE* "Variable")) (CONS (QUOTE PROGN) (DELETE (QUOTE NIL) (MAP-INTO-CONTEXT (FUNCTION (LAMBDA (V) (LET ((*CURRENT-DEFINITION* V)) (IF (CONSP V) (AND (NOT (EQ (CAR V) (QUOTE IL:*))) (IL:BQUOTE (DEFPARAMETER (IL:\\\, (NOTE-EXPORTED-SYMBOL (FIRST V))) (IL:\\\, (CONVERT (SECOND V)))))) (IF (BOUNDP V) (IL:BQUOTE (DEFPARAMETER (IL:\\\, (NOTE-EXPORTED-SYMBOL V)) (IL:\\\, (IL:KWOTE (SYMBOL-VALUE V))))) (PROGN (WARN "Var ~s not bound; no form dumped." V) NIL)))))) VARS)))))(DEFUN CONVERT-MACROS (FNS &OPTIONAL (MAPPING-FN (QUOTE MAPCAR))) (CONS (QUOTE PROGN) (DELETE (QUOTE NIL) (MAP-INTO-CONTEXT (FUNCTION (LAMBDA (F &AUX TEMPLATE) (WHEN (OR (SETQ TEMPLATE (GET F (QUOTE IL:MACRO))) (SETQ TEMPLATE (GET F (QUOTE IL:DMACRO)))) (LET ((*CURRENT-DEFINITION* F) (*CURRENT-DEFINITION-TYPE* "Macro")) (DEFINE-MACRO F TEMPLATE))))) FNS))))(DEFUN CONVERT-ADDVARS (LISTS &OPTIONAL (MAPPING-FN (QUOTE MAPCAR))) (CONS (QUOTE PROGN) (MAP-INTO-CONTEXT (FUNCTION (LAMBDA (L) (IL:BQUOTE (SETQ (IL:\\\, (CAR L)) (LIST* (QUOTE (IL:\\\, (CDR L))) (AND (BOUNDP (QUOTE (IL:\\\, (CAR L)))) (IL:\\\, (CAR L)))))))) LISTS)))(DEFUN CONVERT-APPENDVARS (LISTS &OPTIONAL (MAPPING-FN (QUOTE MAPCAR))) (CONS (QUOTE PROGN) (MAP-INTO-CONTEXT (FUNCTION (LAMBDA (L) (IL:BQUOTE (SETQ (IL:\\\, (CAR L)) (APPEND (AND (BOUNDP (QUOTE (IL:\\\, (CAR L)))) (IL:\\\, (CAR L))) (QUOTE (IL:\\\, (CDR L)))))))) LISTS)))(DEFUN CONVERT-ALISTS (LISTS &OPTIONAL (MAPPING-FN (QUOTE MAPCAR))) (CONS (QUOTE PROGN) (MAP-INTO-CONTEXT (FUNCTION (LAMBDA (L &AUX (SYM (CAR L)) (KEYS (CDR L))) (LABELS ((DOTAIL (TAIL) (IL:BQUOTE (ACONS (QUOTE (IL:\\\, (CAR TAIL))) (QUOTE (IL:\\\, (CDR (ASSOC (CAR TAIL) (SYMBOL-VALUE SYM))))) (IL:\\\, (IF (ENDP (CDR TAIL)) (IL:BQUOTE (AND (BOUNDP (QUOTE (IL:\\\, SYM))) (IL:\\\, SYM))) (DOTAIL (CDR TAIL)))))))) (IL:BQUOTE (SETQ (IL:\\\, SYM) (IL:\\\, (DOTAIL KEYS))))))) LISTS)))(DEFUN CONVERT-PROP (STUFF &OPTIONAL MAPPING-FN-IGNORED) (DECLARE (IGNORE MAPPING-FN-IGNORED)) (LET* ((INDICATOR (FIRST STUFF)) (INDICATORS (IF (CONSP INDICATOR) INDICATOR (CONS INDICATOR NIL))) (SYMS (CDR STUFF)) (FORM (SECOND SYMS)) (IL:* IL:\; "if indirect...") (NOPROPVALUE (CONS NIL NIL))) (WHEN (EQ (FIRST SYMS) (QUOTE IL:*)) (IL:* IL:|;;| "indirect...") (SETQ SYMS (IL:EVAL FORM))) (MAPCAN-INTO-CONTEXT (QUOTE SETF) (FUNCTION (LAMBDA (S) (MAPCAN (FUNCTION (LAMBDA (I) (LET ((VALUE (GET S I NOPROPVALUE))) (WHEN (EQ VALUE NOPROPVALUE) (WARN "No ~s property for ~s" I S) (SETQ VALUE NIL)) (IL:BQUOTE ((GET (QUOTE (IL:\\\, S)) (QUOTE (IL:\\\, I))) (IL:\\\, (IL:KWOTE VALUE))))))) INDICATORS))) SYMS)))(DEFUN CONVERT-PROPS (PAIRS &AUX (NOPROPVALUE (CONS NIL NIL))) (DECLARE (IGNORE MAPPING-FN-IGNORED)) (MAPCAN-INTO-CONTEXT (QUOTE SETF) (FUNCTION (LAMBDA (P) (LET ((S (FIRST P)) (I (SECOND P))) (LET ((VALUE (GET S I NOPROPVALUE))) (WHEN (EQ VALUE NOPROPVALUE) (WARN "No ~s property for ~s" I S) (SETQ VALUE NIL)) (IL:BQUOTE ((GET (QUOTE (IL:\\\, S)) (QUOTE (IL:\\\, I))) (IL:\\\, (IL:KWOTE VALUE)))))))) PAIRS))(DEFUN CONVERT-IFPROP (STUFF &OPTIONAL MAPPING-FN-IGNORED) (DECLARE (IGNORE MAPPING-FN-IGNORED)) (LET* ((INDICATOR (FIRST STUFF)) (INDICATORS (IF (CONSP INDICATOR) INDICATOR (CONS INDICATOR NIL))) (SYMS (CDR STUFF)) (FORM (SECOND SYMS)) (IL:* IL:\; "if indirect") (NOPROPVALUE (CONS NIL NIL))) (WHEN (EQ (FIRST SYMS) (QUOTE IL:*)) (SETQ SYMS (IL:EVAL FORM))) (MAPCAN (QUOTE SETF) (FUNCTION (LAMBDA (S) (MAPCAN (FUNCTION (LAMBDA (I) (BLOCK NIL (LET ((VALUE (GET S I NOPROPVALUE))) (WHEN (EQ VALUE NOPROPVALUE) (WARN "No ~s property for ~s" I S) (RETURN NIL)) (IL:BQUOTE ((GET (QUOTE (IL:\\\, S)) (QUOTE (IL:\\\, I))) (IL:\\\, (IL:KWOTE VALUE)))))))) INDICATORS))) SYMS)))(DEFUN CONVERT-RECORDS (RECS &OPTIONAL (MAPPING-FN (QUOTE MAPCAR))) (DECLARE (SPECIAL IL:USERRECLST)) (CONS (QUOTE PROGN) (MAP-INTO-CONTEXT (FUNCTION (LAMBDA (R) (LET* ((DECL (CAR (IL:\\RECORDBLOCK/RECLOOK1 R IL:USERRECLST)))) (CONVERT DECL)))) RECS)))(DEFUN CONVERT-FILES-FILECOM (FILES &AUX (NOERRORS)) (WHEN (MEMBER (QUOTE COMPILE) *EVAL-WHEN-STATE*) (IL:DOFILESLOAD FILES)) (UNLESS (NULL (INTERSECTION (QUOTE (LOAD EVAL)) *EVAL-WHEN-STATE*)) (CONS (QUOTE PROGN) (MAP-INTO-CONTEXT (FUNCTION (LAMBDA (F) (COND ((CONSP F) (WHEN (MEMBER (QUOTE IL:NOERRORS) F) (SETQ NOERRORS T)) (LET ((UNSUP (REMOVE (QUOTE IL:NOERRORS) F))) (WHEN UNSUP (WARN "FILES options not supported: ~:@(~{~A ~}~)" UNSUP)))) (T (TRANSLATOR-NOTE-ADDITIONAL-FILE F) (IL:BQUOTE (LOAD (IL:\\\, (STRING F)) (IL:\\\,@ (AND NOERRORS (QUOTE (:IF-DOES-NOT-EXIST NIL)))))))))) FILES))))(DEFUN CONVERT-TOP-LEVEL-FORM-FILECOM (FORMS &OPTIONAL (MAPPING-FN (QUOTE MAPCAR))) (CONS (QUOTE PROGN) (MAP-INTO-CONTEXT (QUOTE CONVERT) FORMS)))(DEFUN CONVERT-COMMENT-FILECOM (BODY) (MAP-INTO-CONTEXT (FUNCTION (LAMBDA (B) (CONS (QUOTE IL:*) BODY))) (LIST BODY)))(DEFUN CONVERT-COMS-FILECOM (COMS) (MAPC (QUOTE CONVERT-ONE-FILECOM) COMS))(DEFUN CONVERT-DECLARE-FILECOM (ARGS) (DO ((FORMS NIL) (EVAL-WHEN-EVAL (MEMBER (QUOTE EVAL) *EVAL-WHEN-STATE*)) (EVAL-WHEN-COMPILE (MEMBER (QUOTE COMPILE) *EVAL-WHEN-STATE*)) (EVAL-WHEN-LOAD (MEMBER (QUOTE LOAD) *EVAL-WHEN-STATE*)) (FIRST NIL) (TMPFORMS NIL) (FIRSTFORMS NIL) ARG) NIL (WHEN (AND TMPFORMS (OR (ENDP ARGS) (ATOM (FIRST ARGS)))) (LET* ((NEW-EVAL-WHEN-STATE (IL:BQUOTE ((IL:\\\,@ (IF EVAL-WHEN-EVAL (QUOTE (EVAL)))) (IL:\\\,@ (IF EVAL-WHEN-COMPILE (QUOTE (COMPILE)))) (IL:\\\,@ (IF EVAL-WHEN-LOAD (QUOTE (LOAD))))))) (OLD-EVAL-WHEN-STATE *EVAL-WHEN-STATE*) (*EVAL-WHEN-STATE* NEW-EVAL-WHEN-STATE) (OLD-LAST-CONS (AND *FILE-CONTEXT* (FILE-CONTEXT-DEFINITIONS-LAST-CONS *FILE-CONTEXT*)))) (IL:* IL:|;;| "The way things are dropped directly into the context, we need to re-group them by performing some micro-surgery on the list structure on the fly.") (MAPC (QUOTE CONVERT-ONE-FILECOM) (NREVERSE TMPFORMS)) (WHEN *FILE-CONTEXT* (IF (NULL OLD-LAST-CONS) (IL:* IL:|;;| "This com was the first one... special case...") (LET ((NEW-FORM (CONS (IL:BQUOTE (EVAL-WHEN (IL:\\\, NEW-EVAL-WHEN-STATE) (IL:\\\,@ (FILE-CONTEXT-DEFINITIONS *FILE-CONTEXT*)))) NIL))) (SETF (FILE-CONTEXT-DEFINITIONS *FILE-CONTEXT*) NEW-FORM) (FILE-CONTEXT-DEFINITIONS-LAST-CONS *FILE-CONTEXT*) NEW-FORM) (IL:* IL:|;;| " Not the first com in the file...") (SETF (CDR OLD-LAST-CONS) (IL:BQUOTE ((EVAL-WHEN (IL:\\\, NEW-EVAL-WHEN-STATE) (IL:\\\,@ (CDR OLD-LAST-CONS))))) (FILE-CONTEXT-DEFINITIONS-LAST-CONS *FILE-CONTEXT*) (LAST OLD-LAST-CONS))))) (IF FIRST (PUSH TMPFORMS FIRSTFORMS) (PUSH TMPFORMS FORMS)) (SETQ TMPFORMS NIL)) (WHEN (ENDP ARGS) (RETURN)) (SETQ ARG (POP ARGS)) (IF (ATOM ARG) (CASE ARG ((IL:EVAL@LOAD IL:DOEVAL@LOAD) (SETQ EVAL-WHEN-EVAL T)) (IL:DONTEVAL@LOAD (SETQ EVAL-WHEN-EVAL NIL)) (IL:EVAL@LOADWHEN (SETQ EVAL-WHEN-EVAL (EVAL (POP ARGS)))) ((IL:EVAL@COMPILE IL:DOEVAL@COMPILE) (SETQ EVAL-WHEN-COMPILE T)) (IL:DONTEVAL@COMPILE (SETQ EVAL-WHEN-COMPILE NIL)) (IL:EVAL@COMPILEWHEN (SETQ EVAL-WHEN-COMPILE (EVAL (POP ARGS)))) ((IL:COPY IL:DOCOPY) (SETQ EVAL-WHEN-LOAD T)) (IL:DONTCOPY (SETQ EVAL-WHEN-LOAD NIL)) (IL:COPYWHEN (SETQ EVAL-WHEN-LOAD (EVAL (POP ARGS)))) (IL:FIRST (WARN "\"FIRST\" option in DECLARE: was ignored.")) (IL:NOTFIRST (SETQ FIRST NIL)) (T (WARN "Unknown option ~:@(~a~) in DECLARE:" ARG))) (PUSH ARG TMPFORMS))))(DEFUN CONVERT-EXPORT-FILECOM (COM &OPTIONAL MAPPING-FN-IGNORED) (DECLARE (IGNORE MAPPING-FN-IGNORED)) NIL)(DEFUN CONVERT-FUNCTIONS-FILECOM (FUNCTIONS) (IL:* IL:|;;| "Use the Code-Walker (stolen from Gregor's PCL)  to hunt down any lingering IL code in CL functions...") (FLET ((CONVERT-FUNCTION (F) (LET* ((DEF (FUNCALL (GET (QUOTE IL:FUNCTIONS) (QUOTE IL:GETDEF)) F (QUOTE IL:FUNCTIONS))) (IL:* IL:|;;| " The def name will be added by the template walker...") (*CURRENT-FUNCTION-CALLS* NIL) (*CURRENT-FREE-REFERENCES* NIL) (*CURRENT-DEFINITION* NIL) (*CURRENT-DEFINITION-TYPE* "Function") (CONVERSION (WALK-FORM-INTERNAL DEF))) (VALUES CONVERSION (NREVERSE *CURRENT-FUNCTION-CALLS*) (NREVERSE *CURRENT-FREE-REFERENCES*))))) (CONS (QUOTE PROGN) (MAP-INTO-CONTEXT (FUNCTION CONVERT-FUNCTION) FUNCTIONS))))(DEFUN CONVERT-ONE-BITMAP (VARNAME) (LET* ((B (SYMBOL-VALUE VARNAME)) (A (MAKE-ARRAY (LIST (IL:BITMAPHEIGHT B) (IL:BITMAPWIDTH B)) :ELEMENT-TYPE (QUOTE BIT)))) (IL:* IL:|;;| "Oughta be a better way...") (IL:FOR J IL:TO (IL:BITMAPWIDTH B) IL:DO (IL:FOR I IL:TO (IL:BITMAPHEIGHT B) IL:DO (SETF (AREF A (1- I) (1- J)) (IL:BITMAPBIT B J I)))) (IL:* IL:|;;| "This must print out with *print-array* on.") (IL:BQUOTE (DEFPARAMETER (IL:\\\, VARNAME) (QUOTE (IL:\\\, A))))))(DEFUN CONVERT-BITMAPS (VARS) (CONS (QUOTE PROGN) (MAP-INTO-CONTEXT (QUOTE CONVERT-ONE-BITMAP) VARS)))(DEFUN CONVERT-VARIABLES-FILECOM (VARS &OPTIONAL (MAPPING-FN (QUOTE MAPCAR)) &AUX (GETD (GET (QUOTE IL:VARIABLES) (QUOTE IL:GETDEF)))) (CONS (QUOTE PROGN) (MAP-INTO-CONTEXT (FUNCTION (LAMBDA (V) (FUNCALL GETD V (QUOTE IL:VARIABLES)))) VARS)))(DEFUN CONVERT-STRUCTURES-FILECOM (STRUCTURES &OPTIONAL (MAPPING-FN (QUOTE MAPCAR)) &AUX (GETD (GET (QUOTE IL:STRUCTURES) (QUOTE IL:GETDEF)))) (CONS (QUOTE PROGN) (MAP-INTO-CONTEXT (FUNCTION (LAMBDA (S) (FUNCALL GETD S (QUOTE IL:STRUCTURES)))) STRUCTURES)))(IL:PUTPROPS IL:FNS CONVERT-COM CONVERT-FNS)(IL:PUTPROPS IL:CONSTANTS CONVERT-COM CONVERT-CONSTANTS)(IL:PUTPROPS IL:INITVARS CONVERT-COM CONVERT-INITVARS)(IL:PUTPROPS IL:VARS CONVERT-COM CONVERT-VARS)(IL:PUTPROPS IL:MACROS CONVERT-COM CONVERT-MACROS)(IL:PUTPROPS IL:ADDVARS CONVERT-COM CONVERT-ADDVARS)(IL:PUTPROPS IL:APPENDVARS CONVERT-COM CONVERT-APPENDVARS)(IL:PUTPROPS IL:ALISTS CONVERT-COM CONVERT-ALISTS)(IL:PUTPROPS IL:PROP CONVERT-COM CONVERT-PROP)(IL:PUTPROPS IL:PROPS CONVERT-COM CONVERT-PROPS)(IL:PUTPROPS IL:IFPROP CONVERT-COM CONVERT-IFPROP)(IL:PUTPROPS IL:RECORDS CONVERT-COM CONVERT-RECORDS)(IL:PUTPROPS IL:INITRECORDS CONVERT-COM CONVERT-RECORDS)(IL:PUTPROPS IL:FILES CONVERT-COM CONVERT-FILES-FILECOM)(IL:PUTPROPS IL:P CONVERT-COM CONVERT-TOP-LEVEL-FORM-FILECOM)(IL:PUTPROPS IL:* CONVERT-COM CONVERT-COMMENT-FILECOM)(IL:PUTPROPS IL:COMS CONVERT-COM CONVERT-COMS-FILECOM)(IL:PUTPROPS IL:DECLARE\: CONVERT-COM CONVERT-DECLARE-FILECOM)(IL:PUTPROPS EXPORT CONVERT-COM CONVERT-COMS-FILECOM)(IL:PUTPROPS IL:FUNCTIONS CONVERT-COM CONVERT-FUNCTIONS-FILECOM)(IL:PUTPROPS IL:VARIABLES CONVERT-COM CONVERT-VARIABLES-FILECOM)(IL:PUTPROPS IL:STRUCTURES CONVERT-COM CONVERT-STRUCTURES-FILECOM)(IL:PUTPROPS IL:SETFS CONVERT-COM CONVERT-SETFS-FILECOM)(IL:PUTPROPS IL:BITMAPS CONVERT-COM CONVERT-BITMAPS)(DEFSTRUCT (IL-COMMENT-STRUCT (:PRINT-FUNCTION PRINT-IL-COMMENT-STRUCT)) STUFF)(DEFUN PRINT-IL-COMMENT-STRUCT (O S D) (LET ((STUFF (IL-COMMENT-STRUCT-STUFF O))) (COND ((SOME (FUNCTION (LAMBDA (X) (AND (CONSP X) (SOME (QUOTE CONSP) X)))) STUFF) (IL:* IL:|;;| "Commenting out a form?  Try it this way...") (PRINC "#||" S) (PRIN1 STUFF S) (PRINC "||#" S)) (T (UNLESS (AND (TYPEP (FIRST STUFF) (QUOTE (OR SYMBOL STRING))) (EQL (CHAR (STRING (FIRST STUFF)) 0) #\;)) (PRINC "; " S)) (DOLIST (I STUFF) (PRINC I S) (WRITE-CHAR #\Space S)) (TERPRI S)))))(IL-DEFCONV * (&REST STUFF) (IF (AND (MEMBER (CAR STUFF) (QUOTE (IL:\; IL:|;;| IL:|;;;| IL:|;;;;| IL:\#\|))) (STRINGP (SECOND STUFF)) (NULL (CDDR STUFF))) (CONS (QUOTE IL:*) STUFF) (LET ((STR (FORMAT NIL "~{~a ~}" STUFF))) (LIST (QUOTE IL:*) (IF (< (LENGTH STR) 32) (QUOTE IL:\;) (QUOTE IL:|;;|)) STR))))(IL:PUTPROPS IL:IL-SIM IL:MAKEFILE-ENVIRONMENT (:READTABLE "XCL" :PACKAGE (LET ((*PACKAGE* *PACKAGE*)) (IN-PACKAGE "IL-CONVERT") *PACKAGE*) :BASE 10))(IL:PUTPROPS IL:IL-SIM IL:FILETYPE :COMPILE-FILE)(IL:PUTPROPS IL:IL-SIM IL:COPYRIGHT ("ENVOS Corporation" 1989 1990))NIL