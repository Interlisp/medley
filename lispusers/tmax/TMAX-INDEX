(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "XCL" BASE 10)
(FILECREATED "20-Feb-97 17:58:09" |{DSK}<project>medley2.0>lispusers>TMAX-INDEX.;38| 46100  

      |changes| |to:|  (FNS WRITE.INDEX.FILE INDEX.BUTTONEVENTINFN)

      |previous| |date:| "19-Feb-97 21:51:43" |{DSK}<project>medley2.0>lispusers>TMAX-INDEX.;36|)


; Copyright (c) 1987, 1997 by Xerox Corporation.  All rights reserved.

(PRETTYCOMPRINT TMAX-INDEXCOMS)

(RPAQQ TMAX-INDEXCOMS
       (
        (* |;;| "Developed under support from NIH grant RR-00785.")

        
        (* |;;| "Written by Frank Gilmurray and Sami Shaio.  Modified by Ron Kaplan")

        
        (* |;;| "INDEX objects are simply inserted into the text stream.  Information about them is accumulated only when the displayfn is applied to a hardcopy imagestream, and it is accumulated as a property of the imagestream.")

        

(* |;;;| "TMAX-INDEX ImageObject functions")

        (INITVARS (INDEXDISPLAYAPPEARANCE 'BOX))
        (FNS INDEXOBJ INDEXOBJP INDEX.DISPLAYFN INDEX.IMAGEBOXFN INDEX.PUTFN INDEX.GETFN INDEX.COPYFN
             INDEX.BUTTONEVENTINFN)
        

(* |;;;| "Inserting indices")

        (FNS INSERT.INDEX INSERT.INDEXENTRY INSERT.KNOWN.INDEX SUBITEM.SELECTFN ADD.NEW.INDEX)
        

(* |;;;| "Functions to change the Index/Extended Index")

        (FNS CHANGE.INDEX CHANGE.INDEXENTRY CHANGE.XINDEX.KEY CHANGE.XINDEX.ENTRY CHANGE.XINDEX.FONT
             CHANGE.XINDEX.NUMBER)
        

(* |;;;| "Other misc functions")

        (FNS GETHASH.INDEX INDEX.PAGE.NUMBER INDEX.MANUAL.DELIMITER INDEX.STRING 
             GET.INDEXENTRY.NUMBER INDEX.LIST.REFS LIST.OF.INDEXENTRIES)
        

(* |;;;| "Index file functions")

        (FNS CREATE.INDEX.FILE DUMP.INDEX VIEW.INDEX.FILE GET.INDEX.FILE WRITE.INDEX.FILE 
             WRITE.INDEX.PAGENUMBERS RESET.INDEX.PAGENUMBERS)
        (RECORDS INDEX.ENTRY.RECORD)
        

(* |;;;| "Convenient interface--depress the props key to index the current selection")

        (FNS SELECTION.TO.STRING SELECTION.TO.INDEX)
        (MACROS MAKE.INDEXOBJ.IMAGEFNS)
        (VARS (\\INDEXOBJ.IMAGEFNS (MAKE.INDEXOBJ.IMAGEFNS)))
        (ADDVARS (IMAGEOBJGETFNS (INDEX.GETFN)))
        (P                                                   (* \; 
                                                           "533 is the PROPS key on Sun keyboards")
           (TEDIT.SETSYNTAX 533 'FN TEDIT.READTABLE)
           (TEDIT.SETFUNCTION 533 (FUNCTION SELECTION.TO.INDEX)
                  TEDIT.READTABLE))
        

(* |;;;| "IMAGE OBJECT for causing the index to be written, without using the menu")
))



(* |;;| "Developed under support from NIH grant RR-00785.")




(* |;;| "Written by Frank Gilmurray and Sami Shaio.  Modified by Ron Kaplan")




(* |;;| 
"INDEX objects are simply inserted into the text stream.  Information about them is accumulated only when the displayfn is applied to a hardcopy imagestream, and it is accumulated as a property of the imagestream."
)




(* |;;;| "TMAX-INDEX ImageObject functions")


(RPAQ? INDEXDISPLAYAPPEARANCE 'BOX)
(DEFINEQ

(indexobj
  (lambda (key indexentry.parms)                             (* |fsg| "10-Jul-87 15:59")
          (* * |Create| |an| |instance| |of| |an| |Index| |or| |Extended| |Index| 
          |imageobject.| |The| |difference| |between| |the| |two| |is| |the| objectdatum.
          |For| \a |simple| |Index,| objectdatum |is| nil.
          |For| |an| |Extended| |Index,| objectdatum |is| \a |record| |containing| |the| 
          |Entry,| |Entry's| |font,| |and| |Number| |option.|
          i\n |either| |case,| |the| index.key |property| |is| |the| |hash| |key| |and| 
          |is| |also| |the| |text| |to| |index| |for| \a |simple| |Index.|
          |NOTE...Extended| |Index| |used| |to| |be| |called| |IndexEntry| |after| |the| 
          |Scribe| |cmd| |of| |the| |same| |name.|)

    (let ((newobj (imageobjcreate indexentry.parms \\indexobj.imagefns)))
         (imageobjprop newobj 'index.key key)
         (imageobjprop newobj 'type 'indexobj)
         newobj)))

(indexobjp
  (lambda (obj)                                              (* |ss:| "27-Jun-87 15:53")
          (* * |Tests| |an| |imageobject| |to| |see| |if| |it| |an| |Index| |or| 
          |Extended| |Index| |imageobject.| b\y |convention,| |testing| |functions| |for| 
          |an| |imageobject| |are| |named| <concat |type-of-imageobj| "P" >.)

    (and obj (eq (imageobjprop obj 'type)
                 'indexobj))))

(INDEX.DISPLAYFN
  (LAMBDA (OBJ IMAGESTREAM)                              (* \; "Edited 14-Feb-97 09:30 by rmk:")
                                                             (* |fsg| "17-Sep-87 11:14")

    (* |;;| "Display an Index imageobject.  If the stream-type is display, then just type Index or Extended Index followed by their args.  Otherwise the stream-type is hardcopy.  In this case, type nothing and replace the CAR of the hash array entry with a list of page numbers in which this index appears.")

    (SELECTQ (IMAGESTREAMTYPE IMAGESTREAM)
        (DISPLAY (CL:UNLESS (EQ 'INVISIBLE INDEXDISPLAYAPPEARANCE)
                     (DSPFONT |GP.DefaultFont| IMAGESTREAM)
                     (SELECTQ INDEXDISPLAYAPPEARANCE
                         (BOX (TMAX.SHADEOBJ OBJ IMAGESTREAM GRAYSHADE))
                         (HIGHLIGHT (TMAX.SHADEOBJ OBJ IMAGESTREAM BLACKSHADE))
                         (PROGN (TMAX.SHADEOBJ OBJ IMAGESTREAM)
                                (PRIN3 (INDEX.STRING OBJ)
                                       IMAGESTREAM)))))
        (LET ((PGS/IMOBJS (GETHASH.INDEX OBJ IMAGESTREAM))
              (CURRENT.PAGE (INDEX.PAGE.NUMBER (WITH TEXTOBJ TEXTOBJ (CAR \\WINDOW)))))
             (COND
                ((LISTP (CAR PGS/IMOBJS))
                 (OR (MEMB CURRENT.PAGE (CAR PGS/IMOBJS))
                     (RPLACA PGS/IMOBJS (APPEND (CAR PGS/IMOBJS)
                                               (LIST CURRENT.PAGE)))))
                (T (RPLACA PGS/IMOBJS (LIST CURRENT.PAGE))))))))

(INDEX.IMAGEBOXFN
  (LAMBDA (OBJ STREAM CURRENTX RIGHTMARGIN)              (* \; "Edited 14-Feb-97 09:23 by rmk:")
                                                             (* |ss:| "27-Jun-87 15:50")

    (* |;;| "Return the ImageBox for an Index or Extended Index.")

    (SELECTQ (IMAGESTREAMTYPE STREAM)
        (DISPLAY (SELECTQ INDEXDISPLAYAPPEARANCE
                     (INVISIBLE (CREATE IMAGEBOX
                                       XSIZE _ 0
                                       YSIZE _ 0
                                       YDESC _ 0
                                       XKERN _ 0))
                     ((BOX HIGHLIGHT) 
                          (CREATE IMAGEBOX
                                 XSIZE _ (CHARWIDTH (CHARCODE SPACE)
                                                STREAM)
                                 YSIZE _ (LRSH (FONTPROP STREAM 'HEIGHT)
                                               1)
                                 YDESC _ 0
                                 XKERN _ 0))
                     (CREATE IMAGEBOX
                            XSIZE _ (STRINGWIDTH (INDEX.STRING OBJ)
                                           |GP.DefaultFont|)
                            YSIZE _ (FONTPROP |GP.DefaultFont| 'HEIGHT)
                            YDESC _ (FONTPROP |GP.DefaultFont| 'DESCENT)
                            XKERN _ 0)))
        (CREATE IMAGEBOX
               XSIZE _ 0
               YSIZE _ 0
               YDESC _ 0
               XKERN _ 0))))

(index.putfn
  (lambda (obj stream)                                       (* |ss:| "27-Jun-87 15:51")
          (* * |Puts| |the| |Index| |or| |Extended| |Index| |imageobject| |in| \a |file.|)

    (let ((datum (|fetch| objectdatum |of| obj))
          (index.put.arg (list '|Index| (imageobjprop obj 'index.key))))
         (and datum (nconc1 index.put.arg datum))
         (prin2 index.put.arg stream))))

(INDEX.GETFN
  (LAMBDA (STREAM COPY.OBJECT)                           (* \; "Edited 14-Feb-97 10:10 by rmk:")
                                                             (* |fsg| "20-Aug-87 14:57")

    (* |;;| "Create the Index or Extended Index imageobject when it is read from file.")

    (APPLY (FUNCTION INDEXOBJ)
           (OR COPY.OBJECT (CDR (READ STREAM))))))

(index.copyfn
  (lambda (image.obj source.stream target.stream)            (* |fsg| "23-Jul-87 12:01")
          (* * |Here| |to| copy |an| |Index| |or| |Extended| |Index| |Image| |Object.|)

    (selectq (imagestreamtype target.stream)
        (text (let ((textobj (textobj target.stream)))
                   (apply* (imageobjprop image.obj 'getfn)
                          target.stream
                          (list (imageobjprop image.obj 'index.key)
                                (|fetch| objectdatum |of| image.obj)))))
        (error "Unknown TARGET stream type" (imagestreamtype target.stream)))))

(INDEX.BUTTONEVENTINFN
  (LAMBDA (OBJ STREAM SEL RELX RELY WINDOW HOSTSTREAM BUTTON)
                                                             (* \; "Edited 20-Feb-97 13:53 by rmk:")
                                                             (* |fsg| "29-Jul-87 10:50")

    (* |;;| "Process the middle button pressed inside an Index or Extended Index imageobject.  This means the user wants to Change this index.")

    (AND (MOUSESTATE MIDDLE)
         (LET* ((DATUM (FETCH OBJECTDATUM OF OBJ))
                (NEW.INDEX (MENU (CREATE MENU
                                        TITLE _ (IMAGEOBJPROP OBJ 'INDEX.KEY)
                                        ITEMS _ (LIST (COND
                                                         (DATUM '(|Change Extended Index| T 
                                                                        "Change Extended Index"))
                                                         (T '(|Change Index| T "Change Index"))))
                                        CENTERFLG _ T))))
               (CL:WHEN (AND NEW.INDEX (CAR (SETQ NEW.INDEX (COND
                                                               (DATUM (CHANGE.INDEXENTRY OBJ 
                                                                             STREAM))
                                                               (T (CHANGE.INDEX OBJ STREAM))))))
                   (IMAGEOBJPROP OBJ 'INDEX.KEY (CAR NEW.INDEX))
                   (AND DATUM (REPLACE OBJECTDATUM OF OBJ WITH (CADR NEW.INDEX)))
                   'CHANGED)))))
)



(* |;;;| "Inserting indices")

(DEFINEQ

(INSERT.INDEX
  (LAMBDA (STREAM)                                       (* \; "Edited 14-Feb-97 09:15 by rmk:")
                                                             (* |fsg| "10-Mar-87 14:02")

    (* |;;| "Process the 'Index' function in the ImageObjects menu.")

    (LET ((NEWINDEX.KEY (MKATOM (CONVERT.TABS.TO.SPACES (TEDIT.GETINPUT STREAM "Index Key:")))))
         (AND NEWINDEX.KEY (LET ((NEW.INDEX.OBJ (INDEXOBJ NEWINDEX.KEY)))
                                (TEDIT.INSERT.OBJECT NEW.INDEX.OBJ STREAM)))
         (TEDIT.PROMPTPRINT STREAM "" T))))

(INSERT.INDEXENTRY
  (LAMBDA (STREAM WINDOW)                                (* \; "Edited 14-Feb-97 09:15 by rmk:")
                                                             (* |fsg| "19-Mar-87 11:56")

    (* |;;| "Process the 'Extended Index' function in the ImageObjects menu.  NOTE...Extended Index use to be called IndexEntry after the Scribe cmd of the same name.")

    (LET ((NEWINDEX.KEY (MKATOM (CONVERT.TABS.TO.SPACES (TEDIT.GETINPUT STREAM "Extended Index Key:")
                                       ))))
         (AND NEWINDEX.KEY (LET ((NEW.INDEX.OBJ
                                  (INDEXOBJ NEWINDEX.KEY
                                         (CREATE INDEX.ENTRY.RECORD
                                                INDEX.ENTRY _
                                                (OR (MKATOM (CONVERT.TABS.TO.SPACES
                                                             (TEDIT.GETINPUT STREAM 
                                                                    "Extended Index Entry:"
                                                                    (MKSTRING NEWINDEX.KEY))))
                                                    NEWINDEX.KEY)
                                                INDEX.ENTRYFONT _
                                                (LET (NEWINDEX.FONT)
                                                     (TEDIT.PROMPTPRINT STREAM 
                                                            "Extended Index Entry font..." T)
                                                     (UNTIL (SETQ NEWINDEX.FONT (GET.TSP.FONT
                                                                                     WINDOW 
                                                                                     |GP.DefaultFont|
                                                                                     ))
                                                        DO (TEDIT.PROMPTPRINT STREAM 
                                                            "Invalid font specification...try again."
                                                                      T))
                                                     NEWINDEX.FONT)
                                                INDEX.NUMBER _ (PROGN (TEDIT.PROMPTPRINT STREAM 
                                                                    "Extended Index Number option..."
                                                                             T)
                                                                      (GET.INDEXENTRY.NUMBER)))))
                                 )
                                (TEDIT.INSERT.OBJECT NEW.INDEX.OBJ STREAM)))
         (TEDIT.PROMPTPRINT STREAM "" T))))

(INSERT.KNOWN.INDEX
  (LAMBDA (STREAM WINDOW)                                (* \; "Edited 14-Feb-97 17:24 by rmk:")
                                                             (* |fsg| "16-Sep-87 11:31")

    (* |;;| "Process the 'Known Indices' function in the ImageObjects menu.  A menu of all the known Indices and Extended Indices pops up and the user may button one of these to insert the corrsponding Index or Extended Index.")

    (HELP "NEED TO DO TEDIT.MAPPIECES INSTEAD OF INDEX.LIST.REFS")
    (LET* ((PREVINDICES (INDEX.LIST.REFS STREAM))
           (NEWINDEX.KEY (COND
                            (PREVINDICES (LET ((MENU.SELECTION
                                                (MENU (|create| MENU
                                                             TITLE _ "Index Keys"
                                                             ITEMS _ PREVINDICES
                                                             MENUCOLUMNS _ (FIX (SQRT (LENGTH 
                                                                                          PREVINDICES
                                                                                             )))
                                                             CENTERFLG _ T
                                                             WHENSELECTEDFN _ (FUNCTION 
                                                                               SUBITEM.SELECTFN)))))
                                              (AND MENU.SELECTION (OR (LISTP MENU.SELECTION)
                                                                      (LIST MENU.SELECTION)))))
                            (T (TEDIT.PROMPTPRINT STREAM 
                                      "There are no Indices/Extended Indices in this document." T)
                               NIL))))
          (AND NEWINDEX.KEY (LET ((NEWINDEX.OBJ (APPLY 'INDEXOBJ NEWINDEX.KEY)))
                                 (TEDIT.INSERT.OBJECT NEWINDEX.OBJ STREAM)
                                 (TEDIT.PROMPTPRINT STREAM "" T))))))

(subitem.selectfn
  (lambda (item menu key)                                    (* |fsg| "16-Sep-87 13:28")
          (* * |Function| |to| |handle| |multiple| |column| |menu| |when| |some| |items| 
          |have| |subitems.|)

    (prog (submenu subitems (submenus (getmenuprop menu 'submenus)))
          (|if| (and (listp item)
                     (setq subitems (cdr (assoc 'subitems (cdddr item)))))
              |then| (|if| (setq submenu (cdr (sassoc subitems submenus)))
                       |else| (setq submenu (|create| menu
                                                   items _ subitems
                                                   centerflg _ t))
                             (putmenuprop menu 'submenus (cons (cons subitems submenu)
                                                               submenus)))
                    (return (menu submenu))
            |else| (return (defaultwhenselectedfn item menu key))))))

(ADD.NEW.INDEX
  (LAMBDA (IMAGESTREAM INDEXKEY OBJ)                     (* \; "Edited 14-Feb-97 09:08 by rmk:")
                                                             (* |ss:| "27-Jun-87 15:44")

    (* |;;| "Add an Index or Extended Index imageobject to our index array.  If at least one already exists for this index key, then just append this imageobject to the list.  Otherwise create a new array entry for this imageobject.  The list contains three elements;  a string, a list of Index imageobjects, and a list of Extended Index imageobjects.")

    (LET ((CODE.ARRAY (STREAMPROP IMAGESTREAM 'TSP.INDEX.ARRAY))
          HASH.VALUE INDEX.OBJS ENTRY.OBJS)
         (CL:UNLESS (HASHARRAYP CODE.ARRAY)
             (SETQ CODE.ARRAY (HASHARRAY 100))
             (STREAMPROP IMAGESTREAM 'TSP.CODE.ARRAY CODE.ARRAY)
             (CL:UNLESS (HASHARRAYP (STREAMPROP IMAGESTREAM 'TSP.INDEX.ARRAY))
                 (STREAMPROP IMAGESTREAM 'TSP.INDEX.ARRAY (HASHARRAY 100))))
         (SETQ HASH.VALUE (GETHASH INDEXKEY CODE.ARRAY))
         (SETQ INDEX.OBJS (CADR HASH.VALUE))
         (SETQ ENTRY.OBJS (CADDR HASH.VALUE))
         (COND
            ((FETCH OBJECTDATUM OF OBJ)
             (SETQ ENTRY.OBJS (APPEND ENTRY.OBJS (LIST OBJ))))
            (T (SETQ INDEX.OBJS (APPEND INDEX.OBJS (LIST OBJ)))))
         (PUTHASH INDEXKEY (LIST NIL INDEX.OBJS ENTRY.OBJS)
                CODE.ARRAY))))
)



(* |;;;| "Functions to change the Index/Extended Index")

(DEFINEQ

(change.index
  (lambda (obj stream)                                       (* |ss:| "27-Jun-87 15:44")
          (* * |Here| |when| change |buttoned| |inside| |an| |Index| |ImageObject.|)

    (list (mkatom (convert.tabs.to.spaces (tedit.getinput stream (concat "Change Index key \""
                                                                        (imageobjprop obj
                                                                               'index.key)
                                                                        "\" to:")))))))

(change.indexentry
  (lambda (obj stream)                                       (* |fsg| "10-Mar-87 11:52")
          (* * |Here| |when| change |buttoned| |inside| |an| |Extended| |Index| 
          |ImageObject.| |NOTE...Extended| |Index| |used| |to| |be| |called| |IndexEntry| 
          |after| |the| |Scribe| |cmd| |of| |the| |same| |name.|)

    (prog1 (list (change.xindex.key obj stream)
                 (|create| index.entry.record
                        index.entry _ (change.xindex.entry obj stream)
                        index.entryfont _ (change.xindex.font obj stream)
                        index.number _ (change.xindex.number obj stream)))
           (tedit.promptprint stream "" t))))

(change.xindex.key
  (lambda (obj stream)                                       (* |ss:| "27-Jun-87 15:45")
          (* * |Change| |the| |key| |of| |an| |Extended| |Index.|)

    (let ((oldindex.key (imageobjprop obj 'index.key)))
         (or (mkatom (convert.tabs.to.spaces (tedit.getinput stream (concat 
                                                                       "Change Extended Index Key \"" 
                                                                           oldindex.key "\" to:"))))
             oldindex.key))))

(change.xindex.entry
  (lambda (obj stream)                                       (* |fsg| "10-Mar-87 11:31")
          (* * |Change| |the| |entry| |of| |an| |Extended| |Index.|)

    (let ((oldindex.entry (|fetch| index.entry |of| (|fetch| objectdatum |of| obj))))
         (or (mkatom (convert.tabs.to.spaces (tedit.getinput stream (concat 
                                                                     "Change Extended Index Entry \"" 
                                                                           oldindex.entry "\" to:")))
                    )
             oldindex.entry))))

(change.xindex.font
  (lambda (obj stream)                                       (* |fsg| " 8-Jul-87 16:42")
          (* * |Change| |the| |font| |of| |an| |Extended| |Index.|)

    (let ((oldindex.font (|fetch| index.entryfont |of| (|fetch| objectdatum |of| obj)))
          newindex.font)
         (tedit.promptprint stream (concat "Change Extended Index Entry's font " (abbreviate.font
                                                                                  oldindex.font)
                                          " to...")
                t)
         (|until| (setq newindex.font (get.tsp.font (\\tedit.mainw stream)
                                             (or oldindex.font |GP.DefaultFont|)))
            |do| (tedit.promptprint stream "Invalid font specification...try again." t))
         newindex.font)))

(change.xindex.number
  (lambda (obj stream)                                       (* |fsg| "19-Mar-87 11:51")
          (* * |Change| |the| |number| |option| |of| |an| |Extended| |Index.|)

    (let ((oldindex.nbr (|fetch| index.number |of| (|fetch| objectdatum |of| obj))))
         (tedit.promptprint stream (concat "Change Extended Index Number option \"" oldindex.nbr 
                                          "\" to...")
                t)
         (get.indexentry.number oldindex.nbr))))
)



(* |;;;| "Other misc functions")

(DEFINEQ

(GETHASH.INDEX
  (LAMBDA (OBJ IMAGESTREAM)                              (* \; "Edited 14-Feb-97 09:28 by rmk:")
                                                             (* |fsg| "13-Jul-87 11:09")

    (* |;;| "Get the hash array entry for this Index or Extended Index.")

    (LET ((HARRAY (HASHARRAYP (STREAMPROP IMAGESTREAM 'TSP.INDEX.ARRAY))))
         (CL:UNLESS HARRAY
             (STREAMPROP IMAGESTREAM 'TSP.INDEX.ARRAY (SETQ HARRAY (HASHARRAY 100))))
         (OR (GETHASH (IMAGEOBJPROP OBJ 'INDEX.KEY)
                    HARRAY)
             (ADD.NEW.INDEX IMAGESTREAM (IMAGEOBJPROP OBJ 'INDEX.KEY)
                    OBJ)))))

(INDEX.PAGE.NUMBER
  (LAMBDA (WINDOW)                                       (* \; "Edited 14-Feb-97 09:58 by rmk:")
                                                             (* |fsg| "16-Jul-87 10:08")

    (* |;;| "Return the index page number;  either the page number or manual-style page number.")

    (MKATOM (COND
               ((MANUALINDEX.ENABLED? WINDOW)
                (LET ((INDEX.PAGE "")
                      (TEMPLATE.LIST (APPEND (WINDOWPROP WINDOW 'MANUALTEMPLATES)))
                      INDEX.TEMPLATE)
                     (WHILE (SETQ INDEX.TEMPLATE (POP TEMPLATE.LIST))
                        DO (WITH NGTEMPLATE INDEX.TEMPLATE (SETQ INDEX.PAGE
                                                                    (CONCAT INDEX.PAGE
                                                                           (OR NG.TEXT-BEFORE "")
                                                                           (NGROUP.CHARTYPE.CONVERT
                                                                            NG.CHARTYPE NG.CURRENTVAL
                                                                            )
                                                                           (INDEX.MANUAL.DELIMITER
                                                                            NG.TEXT-AFTER
                                                                            (CAR TEMPLATE.LIST))))))
                     (CONCAT INDEX.PAGE (CAR FORMATTINGSTATE))))
               (T (CAR FORMATTINGSTATE))))))

(index.manual.delimiter
  (lambda (after.delimiter next.template)                    (* |fsg| "16-Jul-87 10:00")
          (* * |Return| |the| |delimiter| |between| |NGroups| |and| |the| |page| |number| 
          |for| \a |Manual| |Index| |page| |reference.|)

    (or (cond
           (next.template (cond
                             ((|fetch| (ngtemplate ng.text-before) |of| next.template)
                              "")
                             (t nil)))
           (t (cond
                 ((or (null after.delimiter)
                      (strequal after.delimiter ""))
                  ".")
                 (t nil))))
        after.delimiter)))

(index.string
  (lambda (index.obj)                                        (* |ss:| "27-Jun-87 15:52")
          (* * |Returns| |the| |display| |imagestream| |text| |for| |an| |Index| |or| 
          |Extended| |Index| |ImageObject.|)

    (let ((objdatum (|fetch| objectdatum |of| index.obj))
          (indexkey (mkatom (imageobjprop index.obj 'index.key))))
         (cond
            (objdatum (|with| index.entry.record objdatum (concat "{Index Key=" indexkey ",Entry=" 
                                                                 index.entry
                                                                 (selectq index.number
                                                                     (yes ",Yes}")
                                                                     (no ",No}")
                                                                     (concat "," index.number "}"))))
                   )
            (t (concat "{Index " indexkey "}"))))))

(get.indexentry.number
  (lambda (defaultnumber)                                    (* |ss:| "27-Jun-87 15:47")
          (* * |Get| |the| number |argument| |for| |an| |IndexEntry| |ImageObject.|
          |The| number |can| |be| "YES" \, "NO" \, |or| |an| |integer.|)

    (or (menu (|create| menu
                     title _ "Number?"
                     centerflg _ t
                     items _ '(yes no value)
                     whenselectedfn _ (function (lambda (item)
                                                  (cond
                                                     ((eq item 'value)
                                                      (numberpad.read (create.numberpad.reader 
                                                                             "NUMBER value?" nil nil 
                                                                             nil t)))
                                                     (t item))))))
        defaultnumber
        'yes)))

(INDEX.LIST.REFS
  (LAMBDA (IMAGESTREAM)                                  (* \; "Edited 14-Feb-97 09:09 by rmk:")
                                                             (* |ss:| "27-Jun-87 15:51")

    (* |;;| "Return a sorted list of the Index and Extended Index keys.  Simple Index keys are just added to the list.  For an Extended Index key, there are SUBITEMS for each Extended Index for this key.  This list can be used as the ITEMS field in the Known Indices menu or for creating the index file.")

    (LET ((INDEX.ARRAY (STREAMPROP IMAGESTREAM 'TSP.INDEX.ARRAY))
          (INDEX.KEYLIST NIL)
          (INDEX.ITEMS (CONS))
          INDEX.VALUE)
         (MAPHASH INDEX.ARRAY (FUNCTION (LAMBDA (VAL KY)
                                          (SETQ INDEX.KEYLIST (CONS KY INDEX.KEYLIST)))))
         (FOR KEY IN (SORT INDEX.KEYLIST 'UALPHORDER)
            DO (SETQ INDEX.VALUE (GETHASH KEY INDEX.ARRAY))
                  (AND (CADR INDEX.VALUE)
                       (NCONC INDEX.ITEMS (LIST KEY)))
                  (AND (CADDR INDEX.VALUE)
                       (NCONC INDEX.ITEMS (LIST (LIST KEY NIL "Select an Extended Index subitem."
                                                      (CONS 'SUBITEMS (LIST.OF.INDEXENTRIES
                                                                       KEY
                                                                       (CADDR INDEX.VALUE))))))))
         (CDR INDEX.ITEMS))))

(list.of.indexentries
  (lambda (key objlist)                                      (* |fsg| " 8-Jul-87 16:46")
          (* * |Returns| \a |list| |of| |the| |Extended| |Indices| |of| |the| |given| 
          |key| |sorted| |by| |Entry.|)

    (let ((entry.list (cons))
          datum)
         (|for| obj |in| objlist
            |do| (setq datum (|fetch| objectdatum |of| obj))
                 (nconc entry.list (list (list (concat (|fetch| index.entry |of| datum)
                                                      "  "
                                                      (abbreviate.font (|fetch| index.entryfont
                                                                          |of| datum))
                                                      "  "
                                                      (|fetch| index.number |of| datum))
                                               (kwote (list key datum))))))
         (sort (intersection (cdr entry.list)
                      (cdr entry.list))
               (function (lambda (a b)
                           (ualphorder (caadr (cadadr a))
                                  (caadr (cadadr b)))))))))
)



(* |;;;| "Index file functions")

(DEFINEQ

(CREATE.INDEX.FILE
  (LAMBDA (TEXTSTREAM IMAGESTREAM INDEXFILE INDEX.FONT NOTITLE)
                                                             (* \; "Edited 14-Feb-97 11:10 by rmk:")
                                                             (* |fsg| "13-Aug-87 09:05")

    (* |;;| "Writes the indices and their corresponding page numbers to the index file.  The indices are sorted alphabetically regardless of case.")

    (LET ((INDEX.ARRAY (IF IMAGESTREAM
                           THEN (STREAMPROP IMAGESTREAM 'TSP.INDEX.ARRAY)
                         ELSE 

                               (* |;;| "Menu call should do a hardcopy to a nodircore image stream, which can then be passed in for us to interrogate.")

                               (* |;;| "(STREAMPROP WINDOW 'TSP.INDEX.ARRAY)")

                               (HELP "Trying to write index when not hard-copying")))
          (INDEX.LIST (INDEX.LIST.REFS IMAGESTREAM))
          (INDEX.FILE (OUTFILEP INDEXFILE))
          (INDEX.STREAM (OPENTEXTSTREAM)))
         (COND
            ((AND INDEX.LIST INDEX.FILE)
             (TEDIT.PROMPTPRINT TEXTSTREAM (CONCAT "Putting Indices into file " INDEX.FILE "... ")
                    T)
             (CL:UNLESS NOTITLE
                 (DSPFONT (FONTCREATE '(HELVETICA 14 BRR))
                        INDEX.STREAM)
                 (PRINTOUT INDEX.STREAM "Index" T T))
             (WRITE.INDEX.FILE INDEX.STREAM INDEX.LIST INDEX.ARRAY INDEX.FONT)
             (CLOSEF? (TEDIT.PUT INDEX.STREAM INDEX.FILE))
             INDEX.FILE)
            (INDEX.LIST (TEDIT.PROMPTPRINT TEXTSTREAM "Specify a file name for the Indices first." T)
                   NIL)
            (T (TEDIT.PROMPTPRINT TEXTSTREAM 
                      "There are no Indices/Extended Indices in this document." T)
               NIL)))))

(DUMP.INDEX
  (LAMBDA (INDEXFILE)                                    (* \; "Edited 14-Feb-97 11:12 by rmk:")

    (* |;;| "Dumps the current index to INDEXFILE without a title and in the font of the current image stream.  Convenient to call in an EVALOBJect context.  By default, indexfile will be placed on the same directory as the text file underlying the textstream")

    (DECLARE (USEDFREE TEXTSTREAM WINDOW IMAGESTREAM))
    (LET ((TEXTFILE (FETCH (TEXTOBJ TXTFILE) OF (TEXTOBJ TEXTSTREAM))))
         (IF TEXTFILE
             THEN (SETQ TEXTFILE (FULLNAME TEXTFILE)))
         (CREATE.INDEX.FILE TEXTSTREAM IMAGESTREAM (IF INDEXFILE
                                                           THEN (PACKFILENAME 'VERSION NIL
                                                                           'BODY INDEXFILE
                                                                           'HOST
                                                                           (FILENAMEFIELD
                                                                            TEXTFILE
                                                                            'HOST)
                                                                           'DIRECTORY
                                                                           (FILENAMEFIELD
                                                                            TEXTFILE
                                                                            'DIRECTORY))
                                                         ELSEIF TEXTFILE
                                                           THEN (PACKFILENAME 'VERSION NIL
                                                                           'EXTENSION
                                                                           'INDEX
                                                                           'BODY TEXTFILE)
                                                         ELSEIF (GET.INDEX.FILE
                                                                     (WINDOWPROP WINDOW 
                                                                            'IMAGEOBJ.MENUW))
                                                         ELSE (HELP "No file for index"))
                (DSPFONT NIL IMAGESTREAM)
                T))))

(VIEW.INDEX.FILE
  (LAMBDA (STREAM WINDOW DONTSHOW)                       (* \; "Edited 14-Feb-97 17:15 by rmk:")
                                                             (* |fsg| "12-Aug-87 16:34")

    (* |;;| "Writes out the index file via CREATE.INDEX.FILE and then opens another TEdit window where this new file is displayed.")

    (* |;;| "First, do a dummy hardcopy to get the page numbers.  Use the type of the current defaultprintinghost as the imagestream type")

    (LET* ((IMAGESTREAM (OPENIMAGESTREAM '{NULL}))
           (INDEX.FILE (CREATE.INDEX.FILE STREAM (PROGN (TEDIT.FORMAT.HARDCOPY STREAM IMAGESTREAM
                                                                   )
                                                            IMAGESTREAM)
                              (GET.INDEX.FILE (WINDOWPROP WINDOW 'IMAGEOBJ.MENUW)))))
          (AND INDEX.FILE (NOT DONTSHOW)
               (PROGN (OR (WINDOWPROP WINDOW 'INDEX.WINDOW)
                          (WINDOWPROP WINDOW 'INDEX.WINDOW (CREATEW NIL (CONCAT "Viewing Index file "
                                                                               INDEX.FILE))))
                      (TEDIT INDEX.FILE (WINDOWPROP WINDOW 'INDEX.WINDOW)))))))

(get.index.file
  (lambda (menuw)                                            (* \; "Edited 29-Sep-87 14:34 by fsg")

          (* * |Return| |the| |user| |specified| |index| |file| |name.|)

    (let ((filename (fm.itemprop (fm.getitem 'index.file nil menuw)
                           'label)))
         (and (not (strequal filename ""))
              (mkatom filename)))))

(WRITE.INDEX.FILE
  (LAMBDA (INDEX.STREAM INDEX.LIST INDEX.ARRAY INDEX.FONT PAGE.FONT)
                                                             (* \; "Edited 20-Feb-97 17:58 by rmk:")
                                                             (* |fsg| "13-Aug-87 10:43")

    (* |;;| "For each Index, the Key is printed followed by the list of page numbers in which this Index Key appears.  Each Extended Index is printed on a separate line and the page number depends on the Extended Index Number option.")

    (CL:UNLESS INDEX.FONT (SETQ INDEX.FONT |GP.DefaultFont|))
    (CL:UNLESS PAGE.FONT (SETQ PAGE.FONT INDEX.FONT))

    (* |;;| "For some reason, the first line doesn't format properly after an Include object.  Kludge to fix it here:  put out a blank line.  Perhaps a better thing would be to somehow fix the include object, or perhaps to have the DUMP.INDEX take a flag to control this.")

    (PRINTOUT INDEX.STREAM "  " T)
    (FOR INDEX.ITEM IN INDEX.LIST
       DO (COND
                 ((LISTP INDEX.ITEM)

                  (* |;;| "Extended Index")

                  (FOR INDEX.SUBITEM (PGS.AND.IMOBJS _ (GETHASH (CAR INDEX.ITEM)
                                                                  INDEX.ARRAY))
                     IN (CDR (CADDDR INDEX.ITEM))
                     DO (FOR INDEX.ENTRYARGS FONT IN (CDR (CADADR INDEX.SUBITEM))
                               DO (DSPFONT (SETQ FONT (FONTCREATE (CADR INDEX.ENTRYARGS)))
                                             INDEX.STREAM)
                                     (PRINTOUT INDEX.STREAM (MKSTRING (CAR INDEX.ENTRYARGS)))
                                     (WRITE.INDEX.PAGENUMBERS INDEX.STREAM PGS.AND.IMOBJS
                                            (CADDR INDEX.ENTRYARGS)
                                            PAGE.FONT)
                                     (DSPFONT FONT INDEX.STREAM)
                                     (PRINTOUT INDEX.STREAM T))))
                 (T 
                    (* |;;| "Simple Index")

                    (DSPFONT INDEX.FONT INDEX.STREAM)
                    (PRINTOUT INDEX.STREAM (MKSTRING INDEX.ITEM))
                    (WRITE.INDEX.PAGENUMBERS INDEX.STREAM (GETHASH INDEX.ITEM INDEX.ARRAY)
                           NIL PAGE.FONT)
                    (PRINTOUT INDEX.STREAM T))))))

(WRITE.INDEX.PAGENUMBERS
  (LAMBDA (STREAM PAGES/IMOBJS NUMBER.OPTION PAGEFONT)   (* \; "Edited  2-Feb-97 17:04 by rmk:")
                                                             (* |fsg| "11-Mar-87 11:04")

    (* |;;| "Here to write the actual pages nubers that this Index or Extended Index appears in.  NUMBER.OPTION is the Number field of an Extended Index.")

    (DSPFONT PAGEFONT STREAM)
    (LET ((PAGE.NBRS (COND
                        (NUMBER.OPTION (SELECTQ NUMBER.OPTION
                                           (NO "")
                                           (YES (CAR PAGES/IMOBJS))
                                           (MKSTRING NUMBER.OPTION)))
                        (T (CAR PAGES/IMOBJS))))
          (PAGE.STRING "    "))
         (COND
            ((LISTP PAGE.NBRS)
             (SETQ PAGE.STRING (CONCAT PAGE.STRING (CAR PAGE.NBRS)))
             (|for| PAGE |in| (CDR PAGE.NBRS) |do| (SETQ PAGE.STRING
                                                                (CONCAT PAGE.STRING ", " PAGE))
                |finally| (PRINTOUT STREAM PAGE.STRING)))
            (T (PRINTOUT STREAM (CONCAT PAGE.STRING PAGE.NBRS)))))))

(RESET.INDEX.PAGENUMBERS
  (LAMBDA (IMAGESTREAM)                                  (* \; "Edited 14-Feb-97 09:11 by rmk:")
                                                             (* |fsg| "13-Aug-87 10:43")

    (* |;;| "Here before hardcopying the TMAX/TEdit window.  Reset the page number list to NIL so the hardcopy DISPLAYFN will create a new list of index page numbers.")

    (LET ((INDEX.ARRAY (STREAMPROP IMAGESTREAM 'TSP.INDEX.ARRAY)))
         (AND INDEX.ARRAY (MAPHASH INDEX.ARRAY (FUNCTION (LAMBDA (VAL KEY)
                                                           (RPLACA VAL NIL))))))))
)
(DECLARE\: EVAL@COMPILE

(RECORD INDEX.ENTRY.RECORD (INDEX.ENTRY INDEX.ENTRYFONT INDEX.NUMBER))
)



(* |;;;| "Convenient interface--depress the props key to index the current selection")

(DEFINEQ

(SELECTION.TO.STRING
  (LAMBDA (TEXTSTREAM)                                   (* \; "Edited 27-Jan-97 12:53 by rmk:")
    (LET (PREFIX ENDPOS NEXTESCAPE (SEL (TEDIT.GETSEL TEXTSTREAM))
                (POINT (TEDIT.GETPOINT TEXTSTREAM))
                STARTPOS ENDPOS)
         (SETQ STARTPOS (SUB1 (FETCH CH# OF SEL)))
         (SETQ ENDPOS (SUB1 (FETCH CHLIM OF SEL)))
         (IF (EQ 'CHAR (FETCH SELKIND OF SEL))
             THEN 

                   (* |;;| "Stretch out to at least a word selection.")

                   (* |;;| 
  "Look backwards, then forwards.  22 seems to be white-space, 21 is alphabetic, 20 is punctuation")

                   (FOR OLD STARTPOS C BC FROM (SUB1 STARTPOS) BY -1 TO 0
                      WHILE (PROGN (SETFILEPTR TEXTSTREAM STARTPOS)
                                       (AND (SMALLP (SETQ C (BIN TEXTSTREAM)))
                                            (SELECTQ (TEDIT.WORDGET C)
                                                (22 NIL)
                                                (20          (* \; "Include hyphens as alphabetics")
                                                    (EQ C (CHARCODE -)))
                                                T)))
                      FINALLY (ADD STARTPOS 1)       (* \; "Fileptr of first character")
                            (SETFILEPTR TEXTSTREAM ENDPOS)
                            (WHILE (PROGN (AND (NOT (EOFP TEXTSTREAM))
                                                   (SMALLP (SETQ C (BIN TEXTSTREAM)))
                                                   (SELECTQ (TEDIT.WORDGET C)
                                                       (22 NIL)
                                                       (20   (* \; "Include hyphens as alphabetics")
                                                           (EQ C (CHARCODE -)))
                                                       T))))
                            (SETQ ENDPOS (GETFILEPTR TEXTSTREAM))
                            (CL:UNLESS (EOFP TEXTSTREAM)     (* \; 
                                                           "Have to back up over the ending space")
                                (SETQ ENDPOS (SUB1 ENDPOS)))))

         (* |;;| 
       "Always move the point to the right, so that the insert happens after the selection")

         (SETQ STARTPOS (ADD1 STARTPOS))
         (TEDIT.SETSEL TEXTSTREAM STARTPOS (- (ADD1 ENDPOS)
                                              STARTPOS)
                'RIGHT NIL T 'NORMAL)
         (IF (CAR (NLSETQ (TEDIT.SEL.AS.STRING TEXTSTREAM)))
           ELSE (TEDIT.PROMPTPRINT TEXTSTREAM "Invalid index term--contains image object?" T)
                 (ERROR!)))))

(SELECTION.TO.INDEX
  (LAMBDA (STREAM)                                       (* \; "Edited 14-Feb-97 09:56 by rmk:")
                                                             (* |fsg| "10-Mar-87 14:02")

    (* |;;| "The index key has been depressed.  Index on the current selection")

    (LET ((NEWINDEX.KEY (MKATOM (CL:STRING-TRIM '(#\Space)
                                       (CONVERT.TABS.TO.SPACES (SELECTION.TO.STRING STREAM)))))
          (TEXTOBJ (TEXTOBJ STREAM)))
         (IF (AND NEWINDEX.KEY (NEQ 0 (NCHARS NEWINDEX.KEY)))
             THEN (LET ((OBJ (INDEXOBJ NEWINDEX.KEY)))
                           (REPLACE BLUEPENDINGDELETE OF TEXTOBJ WITH NIL)
                           (TEDIT.INSERT.OBJECT OBJ STREAM (TEDIT.GETPOINT STREAM))
                           (TEDIT.SETSEL STREAM (ADD1 (TEDIT.GETPOINT STREAM))
                                  0
                                  'RIGHT NIL T 'NORMAL)
                           (TEDIT.PROMPTPRINT STREAM (CONCAT "Index term: " NEWINDEX.KEY)
                                  T))
           ELSE (TEDIT.PROMPTPRINT STREAM "No index term selected" T)
                 (ERROR!)))))
)
(DECLARE\: EVAL@COMPILE 

(PUTPROPS MAKE.INDEXOBJ.IMAGEFNS  MACRO
   (LAMBDA NIL
     (IMAGEFNSCREATE (FUNCTION INDEX.DISPLAYFN)
            (FUNCTION INDEX.IMAGEBOXFN)
            (FUNCTION INDEX.PUTFN)
            (FUNCTION INDEX.GETFN)
            (FUNCTION INDEX.COPYFN)
            (FUNCTION INDEX.BUTTONEVENTINFN)
            (FUNCTION NILL)
            (FUNCTION NILL)
            (FUNCTION NILL)
            (FUNCTION NILL)
            (FUNCTION NILL)
            (FUNCTION NILL)
            (FUNCTION NILL))))
)

(RPAQ \\INDEXOBJ.IMAGEFNS (MAKE.INDEXOBJ.IMAGEFNS))

(ADDTOVAR IMAGEOBJGETFNS (INDEX.GETFN))

                                                             (* \; 
                                                           "533 is the PROPS key on Sun keyboards")

(TEDIT.SETSYNTAX 533 'FN TEDIT.READTABLE)

(TEDIT.SETFUNCTION 533 (FUNCTION SELECTION.TO.INDEX)
       TEDIT.READTABLE)



(* |;;;| "IMAGE OBJECT for causing the index to be written, without using the menu")

(PUTPROPS TMAX-INDEX COPYRIGHT ("Xerox Corporation" 1987 1997))
(DECLARE\: DONTCOPY
  (FILEMAP (NIL (3149 10825 (INDEXOBJ 3159 . 4182) (INDEXOBJP 4184 . 4632) (INDEX.DISPLAYFN 4634 . 6204)
 (INDEX.IMAGEBOXFN 6206 . 7752) (INDEX.PUTFN 7754 . 8184) (INDEX.GETFN 8186 . 8577) (INDEX.COPYFN 8579
 . 9214) (INDEX.BUTTONEVENTINFN 9216 . 10823)) (10864 18737 (INSERT.INDEX 10874 . 11461) (
INSERT.INDEXENTRY 11463 . 14230) (INSERT.KNOWN.INDEX 14232 . 16309) (SUBITEM.SELECTFN 16311 . 17305) (
ADD.NEW.INDEX 17307 . 18735)) (18803 22734 (CHANGE.INDEX 18813 . 19381) (CHANGE.INDEXENTRY 19383 . 
20133) (CHANGE.XINDEX.KEY 20135 . 20693) (CHANGE.XINDEX.ENTRY 20695 . 21328) (CHANGE.XINDEX.FONT 21330
 . 22199) (CHANGE.XINDEX.NUMBER 22201 . 22732)) (22776 30497 (GETHASH.INDEX 22786 . 23453) (
INDEX.PAGE.NUMBER 23455 . 25034) (INDEX.MANUAL.DELIMITER 25036 . 25727) (INDEX.STRING 25729 . 26739) (
GET.INDEXENTRY.NUMBER 26741 . 27761) (INDEX.LIST.REFS 27763 . 29253) (LIST.OF.INDEXENTRIES 29255 . 
30495)) (30539 40743 (CREATE.INDEX.FILE 30549 . 32428) (DUMP.INDEX 32430 . 34850) (VIEW.INDEX.FILE 
34852 . 36116) (GET.INDEX.FILE 36118 . 36508) (WRITE.INDEX.FILE 36510 . 38911) (
WRITE.INDEX.PAGENUMBERS 38913 . 40113) (RESET.INDEX.PAGENUMBERS 40115 . 40741)) (40941 44995 (
SELECTION.TO.STRING 40951 . 43783) (SELECTION.TO.INDEX 43785 . 44993)))))
STOP
