(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "XCL" BASE 10)

(FILECREATED "18-Mar-2022 07:07:27" 
|{DSK}<Users>kaplan>Local>medley3.5>my-medley>lispusers>TMAX-XREF.;5| 23662  

      :CHANGES-TO (VARS TMAX-XREFCOMS)

      :PREVIOUS-DATE "17-Mar-2022 23:36:37" 
|{DSK}<Users>kaplan>Local>medley3.5>my-medley>lispusers>TMAX-XREF.;4|)


; Copyright (c) 1987, 1997, 2000 by Xerox Corporation.

(PRETTYCOMPRINT TMAX-XREFCOMS)

(RPAQQ TMAX-XREFCOMS
       (                                                     (* \; 
                                                   "Developed under support from NIH grant RR-00785.")
                                                             (* \; 
                                                         "Written by Frank Gilmurray and Sami Shaio.")
        
        (* |;;| "An XREF is a general-purpose cross-referencing imageobject.  In order to create an instance of an XREF one simply calls the function XREF with a TAG that is supposed to link it with some imageobject that it is referencing.  In order to add to the class of imageobjects that can be referenced with XREF one uses the function XREF.ADD.DISPLAYFN with the type of the imageobject and a function that operates on it to return some string that XREF will then display in the document.")

        

(* |;;;| "TMAX-XREFNIL Image Object functions")

        (FNS XREF XREFP XREF.DISPLAYFN XREF.IMAGEBOXFN XREF.PUTFN XREF.GETFN XREF.COPYFN 
             XREF.BUTTONEVENTINFN XREF.WHENDELETEDFN XREF.TEDIT-TO-TEX-FN)
        (FNS XREF.GET.DISPLAY.TEXT XREF.GET.TOOBJ TSPOBJ.GETTYPE)
        (FNS UPDATE.XREFS INSERT.REF GET.REF GET.REFERENCE.BY TSP.LIST.REFS TSP.GET.INCODE 
             TSP.GETCODEVAL TSP.PUTCODE)
        

(* |;;;| "Functions for adding and retrieving the method for a gven imageobject.")

        (FNS XREF.ADD.DISPLAYFN XREF.GET.DISPLAYFN)
        

(* |;;;| "Examples of some XREF display methods.")

        (FNS NGROUP.XREF.DISPLAYFN NGROUP.XREF.DISPLAY.TEXT NOTE.XREF.DISPLAYFN)
        (INITVARS (\\XREFOBJ.IMAGEFNS (IMAGEFNSCREATE (FUNCTION XREF.DISPLAYFN)
                                             (FUNCTION XREF.IMAGEBOXFN)
                                             (FUNCTION XREF.PUTFN)
                                             (FUNCTION XREF.GETFN)
                                             (FUNCTION XREF.COPYFN)
                                             (FUNCTION XREF.BUTTONEVENTINFN)
                                             (FUNCTION NILL)
                                             (FUNCTION NILL)
                                             (FUNCTION NILL)
                                             (FUNCTION NILL)
                                             (FUNCTION NILL)
                                             (FUNCTION NILL)
                                             (FUNCTION XREF.GET.DISPLAY.TEXT))))
        (UGLYVARS XREF.DISPLAY.METHODS)
        (FILES (COMPILED SYSLOAD)
               TMAX)))



(* \; "Developed under support from NIH grant RR-00785.")




(* \; "Written by Frank Gilmurray and Sami Shaio.")




(* |;;| 
"An XREF is a general-purpose cross-referencing imageobject.  In order to create an instance of an XREF one simply calls the function XREF with a TAG that is supposed to link it with some imageobject that it is referencing.  In order to add to the class of imageobjects that can be referenced with XREF one uses the function XREF.ADD.DISPLAYFN with the type of the imageobject and a function that operates on it to return some string that XREF will then display in the document."
)




(* |;;;| "TMAX-XREFNIL Image Object functions")

(DEFINEQ

(XREF
  (LAMBDA (TAG)                                              (* |fsg| "23-Jul-87 13:33")

         (* |Returns| \a |new| XREF |imageobject.|
       |The| TAG |argument| |is| |obligatory| |and| |should| |be| |the| |tag| |that| 
       |is| |used| |to| |reference| |the| |object| |that| |this| XREF |object| |is| 
       |referencing.|)

    (LET ((NEWOBJ (IMAGEOBJCREATE TAG \\XREFOBJ.IMAGEFNS)))
         (IMAGEOBJPROP NEWOBJ 'TYPE 'XREF)
         (IMAGEOBJPROP NEWOBJ 'TEDIT-TO-TEX-FN (FUNCTION XREF.TEDIT-TO-TEX-FN))
         NEWOBJ)))

(xrefp
  (lambda (obj)                                              (* |ss:| "27-Jun-87 16:39")
                                                             (* |Test| |whether| |something| |is| 
                                                             |an| xref |imageobject.|)
    (and (imageobjp obj)
         (eq (imageobjprop obj 'type)
             'xref))))

(xref.displayfn
  (lambda (obj stream)                                       (* |fsg| "17-Sep-87 11:19")
          (* * |General| |purpose| |display| |function| |for| |an| xref |imageobject.|
          |Relies| |on| xref.get.display.text |to| |get| |the| |actual| |text| |that| 
          |must| |be| |displayed.|)

    (tmax.shadeobj obj stream)
    (prin1 (xref.get.display.text obj)
           stream)))

(xref.imageboxfn
  (lambda (obj stream)                                       (* |ss:| "27-Jun-87 16:39")
          (* |Returns| |the| |size| |of| |an| xref |imageobject| |based| |on| |the| 
          |string| |that| |will| |be| |used| |to| |display| |it| |which| |is| |found| 
          |using| xref.get.display.text.)

    (dspfont (current.display.font stream)
           stream)
    (|create| imagebox
           xsize _ (tedit.stringwidth (xref.get.display.text obj)
                          stream)
           ysize _ (fontprop stream 'height)
           ydesc _ (fontprop stream 'descent)
           xkern _ 0)))

(xref.putfn
  (lambda (obj stream)                                       (* |fsg| "29-Jul-87 09:08")
    (prin2 (list 'xref (|fetch| objectdatum |of| obj)
                 (imageobjprop obj 'reference.by))
           stream)))

(xref.getfn
  (lambda (stream copy.object)                               (* |fsg| "20-Aug-87 14:59")
    (let ((window (|with| textobj textobj (car \\window))))
         (tsp.setup.fmmenu window))
    (let* ((xref.args (or copy.object (cdr (read stream))))
           (xref.obj (xref (car xref.args))))
          (imageobjprop xref.obj 'reference.by (or (cadr xref.args)
                                                   '|Value|))
          xref.obj)))

(xref.copyfn
  (lambda (image.obj source.stream target.stream)            (* |fsg| "12-Aug-87 11:07")
          (* * |Here| |to| copy |an| xref |Image| |Object.|)

    (selectq (imagestreamtype target.stream)
        (text (let ((textobj (textobj target.stream)))
                   (apply* (imageobjprop image.obj 'getfn)
                          target.stream
                          (list (|fetch| objectdatum |of| image.obj)
                                (imageobjprop image.obj 'reference.by)))))
        (error "Unknown TARGET stream type" (imagestreamtype target.stream)))))

(XREF.BUTTONEVENTINFN
  (LAMBDA (XREFOBJ STREAM SELECTION RELX RELY WINDOW HOSTSTREAM BUTTON)
                                                             (* \; "Edited  9-Nov-97 08:09 by rmk:")
                                                             (* |fsg| "29-Jul-87 16:43")

         (* * |Show| |what| TAG |is| |being| |referenced| |and| |how| |it| |is| 
       |referenced.|)

    (LET ((XREF.TAG (|fetch| OBJECTDATUM |of| XREFOBJ))
          (XREF.DISPLAY (IMAGEOBJPROP XREFOBJ 'REFERENCE.BY)))
         (TEDIT.PROMPTPRINT STREAM (CONCAT "Reference to \"" XREF.TAG "\" by " XREF.DISPLAY)
                T)
         (AND (MOUSESTATE MIDDLE)
              (SELECTQ (MENU (|create| MENU
                                    TITLE _ (CONCAT XREF.TAG " Menu")
                                    ITEMS _ '(|Find Definition| |Change Reference| |Change Display|)
                                    CENTERFLG _ T))
                  (|Find Definition| 
                       (LET ((DEF (TSP.LIST.OF.OBJECTS (TEXTOBJ HOSTSTREAM)
                                         (FUNCTION (LAMBDA (OBJ TAG)
                                                     (AND (NUMBEROBJP OBJ)
                                                          (EQ TAG (IMAGEOBJPROP OBJ 'TAG)))))
                                         (IMAGEOBJPROP XREFOBJ 'OBJECTDATUM))))
                            (IF DEF
                                THEN (CL:WHEN (CDR DEF)
                                                (TEDIT.PROMPTPRINT STREAM 
                                                       "NOTE:  Reference has multipled definitions!!"
                                                       T))
                                      (TEDIT.SETSEL HOSTSTREAM (CADR (CAR DEF))
                                             1
                                             'RIGHT NIL T 'INVERTED)
                                      (AND NIL (TEDIT.SHOWSEL HOSTSTREAM T)
                                           (TEDIT.NORMALIZECARET HOSTSTREAM))
                                      (RETFROM (FUNCTION TEDIT.SELECT.LINE.SCANNER)
                                             (TEDIT.GETSEL HOSTSTREAM))
                              ELSE (TEDIT.PROMPTPRINT STREAM "Reference has not definition!" T))
                            NIL))
                  (|Change Reference| 
                       (LET ((NEW.REFERENCE (GET.REF WINDOW STREAM)))
                            (AND NEW.REFERENCE (PROGN (|replace| OBJECTDATUM |of| XREFOBJ
                                                         |with| NEW.REFERENCE)
                                                      'CHANGED))))
                  (|Change Display| 
                       (PROGN (IMAGEOBJPROP XREFOBJ 'REFERENCE.BY (GET.REFERENCE.BY WINDOW T))
                              (TEDIT.PROMPTPRINT STREAM "" T)
                              'CHANGED))
                  NIL)))))

(xref.whendeletedfn
  (lambda (imobj targ.window.stream source.str targ.str)     (* |fsg| "29-Jul-87 16:35")
          (* * |Note| |that| |this| |function| |is| not |called| |when| \a |Reference| 
          |is| |deleted.| i\t |is| |called| |when| \a |NGroup| |or| |Endnote| |is| 
          |deleted.|)

    (tsp.putcode (imageobjprop imobj 'tag)
           nil targ.window.stream)
    (and (update? targ.window.stream)
         (update.xrefs targ.window.stream))))

(XREF.TEDIT-TO-TEX-FN
  (LAMBDA (OBJ STREAM)
    (LET ((TOOBJ (XREF.GET.TOOBJ (IMAGEOBJPROP OBJ 'OBJECTDATUM)))
          DATUM)
         (CL:WHEN (AND (SETQ DATUM (IMAGEOBJPROP TOOBJ 'OBJECTDATUM))
                       TOOBJ)
             (PRIN3 "\\exref{" STREAM)
             (PRIN3 (CAR DATUM)
                    STREAM)
             (PRIN3 (CADR DATUM)
                    STREAM)
             (PRIN3 "}" STREAM)
             T))))
)
(DEFINEQ

(xref.get.display.text
  (lambda (obj)                                              (* |fsg| "29-Jul-87 09:30")
          (* |This| |function| |will| |first| |lookup| \a "TOOBJ" \, |in| |other| 
          |words,| |the| |imageobject| |that| |the| xref |object| obj |is| |referencing.|
          |Then,| |if| |there| |is| |such| |an| |object,| \a |suitable| xref |display| 
          |method| |is| |found| |using| xref.get.displayfn.
          i\f |such| \a |function| |is| |found,| |then| |it| |is| |applied| |to| toobj 
          |and| \a |string| |to| |be| |displayed| |is| |returned.|)

    (let ((toobj (xref.get.toobj (|fetch| objectdatum |of| obj)))
          (reference.by (imageobjprop obj 'reference.by))
          specific.displayfn)
         (cond
            (toobj (cond
                      ((setq specific.displayfn (xref.get.displayfn toobj))
                       (apply* specific.displayfn toobj reference.by))
                      (t (ringbells)
                         (error "Unknown XREF display method" (tspobj.gettype toobj))
                         "<Unknown Reference>")))
            (t (concat "<Reference " (|fetch| objectdatum |of| obj)
                      "/" reference.by ">"))))))

(xref.get.toobj
  (lambda (tag)                                              (* |fsg| "13-Jul-87 11:13")
          (* |This| |function| |is| |called| |in| \a |specific| |context| |where| \a 
          |reference| |must| |be| |displayed.| i\t |is| |called| |by| |an| xref |object| 
          |and| |should| |return| |the| imageobject |that| |the| xref |object| |is| 
          |referencing.|)

    (gethash tag (windowprop (|with| textobj textobj (car \\window))
                        'tsp.code.array))))

(tspobj.gettype
  (lambda (obj)                                              (* |ss:| "27-Jun-87 16:36")
    (imageobjprop obj 'type)))
)
(DEFINEQ

(update.xrefs
  (lambda (window unupdating?)                               (* |fsg| "25-Sep-87 14:18")
          (* * |Update| |all| |the| xref |objects| |in| |the| |window.|)

    (let ((stream (textstream window))
          (ref.list (tsp.list.of.objects (textobj window)
                           (function xrefp))))
         (and ref.list (let ((textobj (textobj window)))
                            (tedit.promptprint stream (concat (cond
                                                                 (unupdating? "Undoing Update of")
                                                                 (t "Updating"))
                                                             " References...")
                                   t)
                            (|for| ref |in| ref.list
                               |do| (let ((ref.tag (|fetch| objectdatum |of| (car ref))))
                                         (cond
                                            ((or unupdating? (xref.get.toobj ref.tag))
                                             (tedit.object.changed stream (car ref)))
                                            (t (printout promptwindow t (concat 
                                                                          "Undefined Reference to \"" 
                                                                               ref.tag 
                                                                    "\", delete it or just continte?"
                                                                               )
                                                      t)
                                               (flashwindow promptwindow)
                                               (selectq (menu (|create| menu
                                                                     title _ '|Undefined Ref|
                                                                     items _ '(|Delete| |Continue|)
                                                                     centerflg _ t))
                                                   (|Delete| (tedit.delete stream (cadr ref)
                                                                    1))
                                                   nil)))))
                            (tedit.promptprint stream "done"))))))

(insert.ref
  (lambda (stream display.prev)                              (* |fsg| "25-Sep-87 10:24")
    (let* ((window (\\tedit.mainw stream))
           (code (get.ref window stream display.prev))
           (ref (and code (xref code))))
          (and ref (progn (imageobjprop ref 'reference.by (get.reference.by window))
                          (tedit.insert.object ref stream))))))

(get.ref
  (lambda (window stream display.prev)                       (* |fsg| " 2-Sep-87 11:24")
          (* * i\f display.prev |is| |non-NIL| |then| |get| |the| |Reference| tag |from| 
          \a |menu.| |Else| |prompt| |the| |user| |for| |the| tag |name.|)

    (cond
       (display.prev (let ((prevrefs (tsp.list.refs window)))
                          (cond
                             (prevrefs (tedit.promptprint stream "" t)
                                    (menu (|create| menu
                                                 title _ '|Reference Tags|
                                                 items _ (sort prevrefs 'ualphorder)
                                                 menucolumns _ (fix (sqrt (length prevrefs)))
                                                 centerflg _ t)))
                             (t (tedit.promptprint stream "There are no References in this document." 
                                       t)))))
       (t (mkatom (tedit.getinput stream "Reference to:"))))))

(get.reference.by
  (lambda (window ask?)                                      (* \; "Edited 29-Sep-87 15:24 by fsg")

          (* * |Get| |the| "Reference By" |value| |from| |the| |FreeMenu.|
          i\f ask? |is| t |or| |the| |FreeMenu| |value| |is| "Ask" |then| |pop| |up| \a 
          |menu| |to| |get| |Value| |or| |Number.|)

    (let ((reference.by (cond
                           (ask? '|Ask|)
                           (t (fm.itemprop (fm.getitem 'defaultref nil (windowprop window
                                                                              'imageobj.menuw))
                                     'label)))))
         (selectq reference.by
             (|Ask| (or (menu (|create| menu
                                     title _ '|Reference By|
                                     centerflg _ t
                                     items _ '(|Value| |Page|)))
                        '|Value|))
             reference.by))))

(tsp.list.refs
  (lambda (window)                                           (* |ss:| "27-Jun-87 16:36")
          (* * |Used| |to| |collect| |index| |references| |here| |but| |now| |use| 
          index.list.refs |instead.|)

    (let ((reflist nil))
         (maphash (windowprop window 'tsp.code.array)
                (function (lambda (val ky)
                            (setq reflist (cons ky reflist)))))
         reflist)))

(tsp.get.incode
  (lambda (stream)                                           (* |fsg| " 4-Aug-87 16:13")
          (* * |Get| \a |new| |Tag| id |and| |make| |sure| |it's| |not| |already| 
          |defined.|)

    (let ((tag.id (mkatom (tedit.getinput stream "Tag name:"))))
         (|while| (and tag.id (tsp.getcodeval tag.id (\\tedit.mainw stream)))
            |do| (setq tag.id (mkatom (tedit.getinput stream (concat tag.id 
                                                                    " already exists...Tag name:"))))
                )
         (or tag.id (tedit.promptprint stream "" t))
         tag.id)))

(tsp.getcodeval
  (lambda (code window)                                      (* |ss:| "27-Jun-87 16:35")
    (let ((tsp.code.array (windowprop window 'tsp.code.array)))
         (gethash code tsp.code.array))))

(tsp.putcode
  (lambda (code value window)                                (* |ss:| "27-Jun-87 16:36")
    (puthash code value (list (windowprop window 'tsp.code.array)))))
)



(* |;;;| "Functions for adding and retrieving the method for a gven imageobject.")

(DEFINEQ

(xref.add.displayfn
  (lambda (objtype name.of.function)                         (* |edited:| "22-Jan-87 21:08")
          (* |Adds| |an| xref |display| |method| |for| |an| |imageobject| |of| |the| 
          |given| |type.| |This| |means| |that| |the| |function| name.of.function |will| 
          |be| |used| |to| |display| |text| |when| |an| xref |object| |references| |an| 
          |imageobject| |of| |type| objtype.)

    (puthash objtype name.of.function xref.display.methods)))

(xref.get.displayfn
  (lambda (obj)                                              (* |edited:| "22-Jan-87 21:11")
                                                             (* |Returns| |the| xref |display| 
                                                             |method| |for| |an| |imageobject| obj.)
    (gethash (|fetch| use |of| (|fetch| objectdatum |of| obj))
           xref.display.methods)))
)



(* |;;;| "Examples of some XREF display methods.")

(DEFINEQ

(ngroup.xref.displayfn
  (lambda (ngroup.obj reference.by)                          (* |fsg| "29-Jul-87 10:25")
          (* * |The| xref |display| |method| |for| ngroup |objects.|
          i\f |the| |NGroup| |has| |been| |updated| |and| |it| |has| \a |trailing| 
          |delimiter,| |the| |delimiter| |is| |stripped| |off.|)

    (|with| numberobj (|fetch| objectdatum |of| ngroup.obj)
           (cond
              (updated.obj (cond
                              ((eq reference.by '|Page|)
                               (cond
                                  (page.number (mkstring page.number))
                                  (t (concat "<" (ngroup.xref.display.text template numstring)
                                            "/" reference.by ">"))))
                              (t (ngroup.xref.display.text template numstring))))
              (t (concat "<" ref.type "/" reference.by ">"))))))

(ngroup.xref.display.text
  (lambda (template numstring)                               (* |fsg| "29-Jul-87 10:24")
          (* * |Return| |the| |display| |text| |value| |for| |an| |updated| |NGroup| 
          |reference.|)

    (|with| ngtemplate template (cond
                                   (ng.text-after (substring numstring 1 (minus (add1 (nchars 
                                                                                        ng.text-after
                                                                                             )))))
                                   (t numstring)))))

(note.xref.displayfn
  (lambda (note.obj reference.by)                            (* |fsg| "29-Jul-87 10:35")
          (* * |The| xref |display| |method| |for| |Endnote| |objects.|
          i\f |the| |ImageObj| |has| |not| |been| |updated| |yet,| |we| |enclose| |it| 
          |in| |angle| |brackets.|)

    (|with| numberobj (|fetch| objectdatum |of| note.obj)
           (cond
              ((and updated.obj (or (neq reference.by '|Page|)
                                    page.number))
               (cond
                  ((eq reference.by '|Page|)
                   (mkstring page.number))
                  (t (mkstring numstring))))
              (t (concat "<" numstring "/" reference.by ">"))))))
)

(RPAQ? \\XREFOBJ.IMAGEFNS
       (IMAGEFNSCREATE (FUNCTION XREF.DISPLAYFN)
              (FUNCTION XREF.IMAGEBOXFN)
              (FUNCTION XREF.PUTFN)
              (FUNCTION XREF.GETFN)
              (FUNCTION XREF.COPYFN)
              (FUNCTION XREF.BUTTONEVENTINFN)
              (FUNCTION NILL)
              (FUNCTION NILL)
              (FUNCTION NILL)
              (FUNCTION NILL)
              (FUNCTION NILL)
              (FUNCTION NILL)
              (FUNCTION XREF.GET.DISPLAY.TEXT)))

(READVARS-FROM-STRINGS '(XREF.DISPLAY.METHODS)
       "({H(24 ERROR) 2 NGROUP.XREF.DISPLAYFN NGROUP NOTE.XREF.DISPLAYFN NOTE })
")

(FILESLOAD (COMPILED SYSLOAD)
       TMAX)
(PUTPROPS TMAX-XREF COPYRIGHT ("Xerox Corporation" 1987 1997 2000))
(DECLARE\: DONTCOPY
  (FILEMAP (NIL (3709 11045 (XREF 3719 . 4286) (XREFP 4288 . 4675) (XREF.DISPLAYFN 4677 . 5111) (
XREF.IMAGEBOXFN 5113 . 5765) (XREF.PUTFN 5767 . 6013) (XREF.GETFN 6015 . 6489) (XREF.COPYFN 6491 . 
7101) (XREF.BUTTONEVENTINFN 7103 . 10095) (XREF.WHENDELETEDFN 10097 . 10594) (XREF.TEDIT-TO-TEX-FN 
10596 . 11043)) (11046 13030 (XREF.GET.DISPLAY.TEXT 11056 . 12340) (XREF.GET.TOOBJ 12342 . 12879) (
TSPOBJ.GETTYPE 12881 . 13028)) (13031 19405 (UPDATE.XREFS 13041 . 15424) (INSERT.REF 15426 . 15838) (
GET.REF 15840 . 16895) (GET.REFERENCE.BY 16897 . 17884) (TSP.LIST.REFS 17886 . 18338) (TSP.GET.INCODE 
18340 . 18994) (TSP.GETCODEVAL 18996 . 19218) (TSP.PUTCODE 19220 . 19403)) (19497 20468 (
XREF.ADD.DISPLAYFN 19507 . 20021) (XREF.GET.DISPLAYFN 20023 . 20466)) (20528 22890 (
NGROUP.XREF.DISPLAYFN 20538 . 21498) (NGROUP.XREF.DISPLAY.TEXT 21500 . 22136) (NOTE.XREF.DISPLAYFN 
22138 . 22888)))))
STOP
