(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "XCL" BASE 10)(FILECREATED " 4-May-91 15:52:07" |{PELE:MV:ENVOS}<LISPCORE>SOURCES>MAIKOETHER.;6| 19857        |changes| |to:|  (FNS \\MAIKO.10MBSTARTDRIVER \\MAIKO.ETHER-INTERRUPT)      |previous| |date:| " 3-Apr-91 10:59:27" |{PELE:MV:ENVOS}<LISPCORE>SOURCES>MAIKOETHER.;4|); Copyright (c) 1988, 1989, 1990, 1991 by Venue & Xerox Corporation.  All rights reserved.(PRETTYCOMPRINT MAIKOETHERCOMS)(RPAQQ MAIKOETHERCOMS       ((FNS \\MAIKO.10MBSENDPACKET \\MAIKO.10MBWATCHER \\MAIKO.ETHERRESUME \\MAIKO.ETHERSUSPEND              \\MAIKO.INPUT.INTERRUPT \\MAIKO.10MBSTARTDRIVER \\MAIKO.10MBTURNONETHER              \\MAIKO.10MB.RESTART.ETHER \\MAIKO.CHECKSUM)        (INITVARS (\\MAIKO.INPUT.PACKET)               (|\\ETHERtopMonitor| (CREATE.MONITORLOCK "ETHERTopMonitor")))        (DECLARE\: EVAL@COMPILE DONTCOPY (FILES (LOADCOMP)                                                10MBDRIVER)               (GLOBALVARS \\MAIKO.INPUT.PACKET |\\ETHERtopMonitor|)                              (* |;;| "The NDB for Maiko's 10MB connection; used by \\MAIKO.ETHER-INTERRUPT:")               (GLOBALVARS \\MAIKO.10MB.NDB)               (GLOBALVARS \\MAIKO.IO-INTERRUPT-FLAGS \\MAIKO.IO-INTERRUPT-VECTOR))        (ADDVARS (\\MAIKO.MOVDS (\\MAIKO.10MBSTARTDRIVER \\10MB.STARTDRIVER)                        (\\MAIKO.10MBWATCHER \\10MBWATCHER)                        (\\MAIKO.10MBSENDPACKET \\10MBSENDPACKET)                        (\\MAIKO.ETHERSUSPEND \\10MB.TURNOFFETHER)                        (\\MAIKO.10MBTURNONETHER \\10MB.TURNONETHER)                        (\\MAIKO.ETHERRESUME \\10MB.RESTART.ETHER)                        (\\MAIKO.CHECKSUM \\CHECKSUM)))        (COMS                                                (* \; "MAIKO handler for new interrupt-driven incoming ethernet communication, rather than polling for it.")              (FNS \\MAIKO.ETHER-INTERRUPT))        (COMS                                                (* \; "MAIKO Log & Console message handling.  Interrupt-driven message printing, instead of polled printing.")              (FNS \\MAIKO.CONSOLE-LOG-PRINT))        (COMS               (* |;;| "Asynchronous I/O handling")              (FNS \\MAIKO.IO-INTERRUPT)              (VARS (\\MAIKO.IO-INTERRUPT-FLAGS (\\CREATECELL \\FIXP))                    (\\MAIKO.IO-INTERRUPT-VECTOR NIL)))))(DEFINEQ(\\MAIKO.10MBSENDPACKET  (LAMBDA (NDB PACKET)                                   (* \; "Edited 31-Oct-89 14:10 by bvm")    (PROG NIL          (COND             (\\RAWTRACING (\\MAYBEPRINTPACKET PACKET 'RAWPUT)))          (COND             ((OR (|fetch| 10MBMULTICASTP |of| PACKET)                  (EQNSADDRESS.HOST \\MY.NSADDRESS (|fetch| 10MBDESTNSADDRESSBASE |of| PACKET                                                          )))(* \;                                 "We would hear this packet if our hardware let us, so fake receipt")              (PROG ((COPYPACKET (\\ALLOCATE.ETHERPACKET)))                    (\\BLT (LOCF (|fetch| 10MBLENGTH |of| COPYPACKET))                           (LOCF (|fetch| 10MBLENGTH |of| PACKET))                           (ADD1 (|fetch| 10MBLENGTH |of| PACKET)))                                                             (* \;                                                    "Copy all data that would have been transmitted")                    (|replace| EPNETWORK |of| COPYPACKET |with| NDB)                    (|replace| EPTYPE |of| COPYPACKET                       |with| (|for| PAIR |in| \\10MBTYPE.TRANSLATIONS                                     |bind| (TYPE _ (|fetch| 10MBTYPE |of| PACKET))                                     |when| (EQ TYPE (CAR PAIR)) |do|                                  (* |;;| "TYPE is the raw type of the etherpacket.  These do not always correspond one-to-one with the EPTYPE constants we use (in particular, for pups), so translate if necessary.")                                                                           (RETURN (CDR PAIR))                                     |finally| (RETURN TYPE)))                    (COND                       (\\RAWTRACING (\\MAYBEPRINTPACKET COPYPACKET 'RAWGET)))                    (\\HANDLE.RAW.PACKET COPYPACKET))))          (UNINTERRUPTABLY              (SUBRCALL ETHER-SEND (IMAX (|fetch| 10MBLENGTH |of| PACKET)                                         \\10MB.MINPACKETLENGTH)                     (|fetch| 10MBPACKETBASE |of| PACKET))              (|replace| EPNETWORK |of| PACKET |with| NIL)              (\\REQUEUE.ETHERPACKET PACKET))          (RETURN T))))(\\maiko.10mbwatcher  (lambda (ndb)                                      (* \; "Edited 16-May-88 22:24 by MASINTER")    (* |;;| "merge message and packet reading")    (prog ((cntr 0)           message-buffer message-length packet)      lp  (if (subrcall message-readp)              then (promptprint (if (setq message-length (subrcall message-read                                                                        (or message-buffer                                                                            (setq message-buffer                                                                             (allocstring 1024)))                                                                        1024))                                        then (substring message-buffer 1 message-length)                                      else "?? system message: polling failed")))          (uninterruptably              (subrcall ether-check)              (setq packet (\\maiko.input.interrupt ndb)))          (cond             (packet (\\handle.raw.packet packet)                    (cond                       ((ilessp (|add| cntr 1)                               \\maxwatchergets)                        (go lp)))))          (block)          (setq cntr 0)          (go lp))))(\\maiko.etherresume  (lambda nil                                        (* \; "Edited 11-May-88 16:09 by MASINTER")    (subrcall ether-resume)))(\\maiko.ethersuspend  (lambda nil                                        (* \; "Edited 11-May-88 16:11 by MASINTER")    (subrcall ether-suspend)))(\\maiko.input.interrupt  (lambda (ndb)                                      (* \; "Edited 11-May-88 16:05 by MASINTER")    (* |;;| "This routine gets called when 10MB input signals an interrupt.  See if the \\MAIKO.INPUT.PACKET has indeed been processed, and if so, take care of it")    (prog (length (packet \\maiko.input.packet))          (cond             ((neq (setq length (|fetch| dlfirsticb |of| (|fetch| ndbcsb |of| ndb)))                   \\es.pending)              (|replace| 10mblength |of| packet |with| length)              (\\rclk (locf (|fetch| eptimestamp |of| packet)))              (|replace| epnetwork |of| packet |with| ndb)              (|replace| eptype |of| packet |with| (|for| pair |in|                                                                               \\10mbtype.translations                                                                  |bind| (type _                                                                                   (|fetch|                                                                                    10mbtype                                                                                      |of| packet                                                                                    ))                                                                  |when| (eq type (car pair))                                                                  |do| (return (cdr pair))                                                                  |finally| (return type)))              (cond                 (\\rawtracing (\\maybeprintpacket packet 'rawget)))              (return (prog1 packet                          (setq \\maiko.input.packet (\\allocate.etherpacket))                          (|replace| dlfirsticb |of| (|fetch| ndbcsb |of| ndb)                             |with| \\es.pending)                          (subrcall ether-get \\10mbpacketlength (|fetch| 10mbpacketbase                                                                    |of| \\maiko.input.packet))))              )             (t (return nil))))))(\\MAIKO.10MBSTARTDRIVER  (LAMBDA (NDB RESTARTFLG MYNSNUMBER)                    (* \; "Edited  4-May-91 15:50 by jds")    (* |;;| "Start the \"driver\" for the 10MB ethernet on Sun Medley.  In particular, turn on the C ehternet code, queue up the first input packet, and start the \\10MBWATCHER process.")    (SUBRCALL ETHER-SUSPEND)    (OR (\\INIT.ETHER.BUFFER.POOL)        (ERROR "Unable to create buffer pool"))    (|replace| NDBTQ |of| NDB |with| (|create| SYSQUEUE))    (SETQ \\10MB.RAWPACKETQ (|create| SYSQUEUE))    (SETQ \\10MB.INPUT.TIMEOUT (TIMES \\RCLKSECOND \\10MB.EXPECTED.RECEIVE.INTERVAL))    (SETQ \\MAIKO.10MB.NDB NDB)    (\\10MB.TURNONETHER NDB NIL NIL (OR MYNSNUMBER T)           0 0)    (PROG ((CSB (|fetch| NDBCSB |of| NDB)))          (OR \\MAIKO.INPUT.PACKET (SETQ \\MAIKO.INPUT.PACKET (\\ALLOCATE.ETHERPACKET)))          (|replace| DLFIRSTICB |of| (|fetch| NDBCSB |of| NDB) |with|                                                                                      \\ES.PENDING)          (AND (SUBRCALL ETHER-GET \\10MBPACKETLENGTH (|fetch| 10MBPACKETBASE |of|                                                                                  \\MAIKO.INPUT.PACKET                                                             ))               (\\MAIKO.ETHER-INTERRUPT))     (* |;;| "Commented out the 10MBWATCHER adder, so this process never gets created.")     (* |;;| "(replace NDBWATCHER of NDB with (ADD.PROCESS (LIST '\\10MBWATCHER (KWOTE NDB)) 'RESTARTABLE 'SYSTEM 'AFTEREXIT 'DELETE))")          (RETURN NDB))))(\\maiko.10mbturnonether  (lambda (ndb smashstate newstate nshostnumber ininterrupt outinterrupt)                                                         (* \; "Edited 11-May-88 16:08 by MASINTER")(* |;;;| "Reset and activate ether associated with NDB.  If SMASHSTATE is given, it is a CSB-length block into which state is saved for later restoration by passing as the NEWSTATE arg.  If NEWSTATE is NIL, then the remaining non-NIL args give parameters for this activation: the host number for microcode to watch for, T meaning my own number;  and interrupt masks for when a packet arrives or finishes transmitting")    (* |;;| "For Daybreak, SMASHSTATE and NEWSTATE must be NIL")    (prog ((csb (|fetch| ndbcsb |of| ndb)))          (\\maiko.ethersuspend)          (or csb (|replace| ndbcsb |of| ndb |with| (setq csb                                                                 (locf (|fetch| dlethernet                                                                          |of| \\iopage)))))          (|replace| dlfirstocb |of| csb |with| 0)          (|replace| dlfirsticb |of| csb |with| 0)          (and nshostnumber (cond                               ((eq nshostnumber t)                                (\\blt (locf (|fetch| dllocalhost0 |of| csb))                                       (locf (|fetch| (ifpage |NSHost0|) |of|                                                                                    |\\InterfacePage|)                                             )                                       \\#wds.nshostnumber))                               (t (\\storenshostnumber (locf (|fetch| dllocalhost0 |of|                                                                                       csb))                                         nshostnumber))))          (and outinterrupt (|replace| dloutputmask |of| csb |with| outinterrupt))          (and ininterrupt (|replace| dlinputmask |of| csb |with| ininterrupt))          (|replace| dlmissedpackets |of| csb |with| 0)          (|replace| dllasticb |of| csb |with| 0)          (|replace| dllastocb |of| csb |with| 0)          (subrcall ether-reset)          (subrcall ether-resume)          (return ndb))))(\\maiko.10mb.restart.ether  (lambda (ndb)                                      (* \; "Edited 11-May-88 16:08 by MASINTER")(* |;;;| "Kick the Ethernet receiver task to restart the Ethernet receiver task.  This function gets called when the 10MBDRIVER thinks the Ethernet has been accidentally disabled")    (subrcall ether-resume)))(\\maiko.checksum  (lambda (base nwords initsum)                      (* \; "Edited 20-May-88 11:48 by MASINTER")    (subrcall check-sum base nwords initsum))))(RPAQ? \\MAIKO.INPUT.PACKET )(RPAQ? |\\ETHERtopMonitor| (CREATE.MONITORLOCK "ETHERTopMonitor"))(DECLARE\: EVAL@COMPILE DONTCOPY (FILESLOAD (LOADCOMP)       10MBDRIVER)(DECLARE\: DOEVAL@COMPILE DONTCOPY(GLOBALVARS \\MAIKO.INPUT.PACKET |\\ETHERtopMonitor|))(DECLARE\: DOEVAL@COMPILE DONTCOPY(GLOBALVARS \\MAIKO.10MB.NDB))(DECLARE\: DOEVAL@COMPILE DONTCOPY(GLOBALVARS \\MAIKO.IO-INTERRUPT-FLAGS \\MAIKO.IO-INTERRUPT-VECTOR)))(ADDTOVAR \\MAIKO.MOVDS (\\MAIKO.10MBSTARTDRIVER \\10MB.STARTDRIVER)                            (\\MAIKO.10MBWATCHER \\10MBWATCHER)                            (\\MAIKO.10MBSENDPACKET \\10MBSENDPACKET)                            (\\MAIKO.ETHERSUSPEND \\10MB.TURNOFFETHER)                            (\\MAIKO.10MBTURNONETHER \\10MB.TURNONETHER)                            (\\MAIKO.ETHERRESUME \\10MB.RESTART.ETHER)                            (\\MAIKO.CHECKSUM \\CHECKSUM))(* \; "MAIKO handler for new interrupt-driven incoming ethernet communication, rather than polling for it.")(DEFINEQ(\\MAIKO.ETHER-INTERRUPT  (LAMBDA NIL                                            (* \; "Edited  4-May-91 13:46 by jds")    (* |;;| "This routine gets called when 10MB input signals an interrupt.  See if the \\MAIKO.INPUT.PACKET has indeed been processed, and if so, take care of it")    (PROG ((NDB \\MAIKO.10MB.NDB)           LENGTH)     (* |;;| "First, turn off the interrupt flag:")          (REPLACE (INTERRUPTSTATE ETHERINTERRUPT) OF \\INTERRUPTSTATE WITH NIL)     (* |;;| "Now handle it:")          (UNINTERRUPTABLY              (WITH.MONITOR |\\ETHERtopMonitor|                  (PROG ((PACKET \\MAIKO.INPUT.PACKET))                   (* |;;| "We come back here if there's more than one packet ready to be read, so we process as many as possible in one swell foop.")                    READ-MORE-LOOP                        (COND                           ((NEQ (SETQ LENGTH (|fetch| DLFIRSTICB |of| (|fetch| NDBCSB                                                                                  |of| NDB)))                                 \\ES.PENDING)                            (|replace| 10MBLENGTH |of| PACKET |with| LENGTH)                            (\\RCLK (LOCF (|fetch| EPTIMESTAMP |of| PACKET)))                            (|replace| EPNETWORK |of| PACKET |with| NDB)                            (|replace| EPTYPE |of| PACKET                               |with| (|for| PAIR |in| \\10MBTYPE.TRANSLATIONS                                             |bind| (TYPE _ (|fetch| 10MBTYPE |of| PACKET                                                                       ))                                             |when| (EQ TYPE (CAR PAIR))                                             |do| (RETURN (CDR PAIR)) |finally| (RETURN                                                                                         TYPE)))                            (COND                               (\\RAWTRACING (\\MAYBEPRINTPACKET PACKET 'RAWGET)))                            (\\HANDLE.RAW.PACKET PACKET)                            (SETQ \\MAIKO.INPUT.PACKET (\\ALLOCATE.ETHERPACKET))                            (|replace| DLFIRSTICB |of| (|fetch| NDBCSB |of| NDB)                               |with| \\ES.PENDING)                            (COND                               ((SUBRCALL ETHER-GET \\10MBPACKETLENGTH (|fetch| 10MBPACKETBASE                                                                          |of|                                                                                 \\MAIKO.INPUT.PACKET)                                       )                                (* |;;|                               "Returned T, so there's another packet waiting already.  Process it.")                                (SETQ PACKET \\MAIKO.INPUT.PACKET)                                (GO READ-MORE-LOOP))))))))))))(* \; "MAIKO Log & Console message handling.  Interrupt-driven message printing, instead of polled printing.")(DEFINEQ(\\MAIKO.CONSOLE-LOG-PRINT  (LAMBDA NIL                                            (* \; "Edited 18-Dec-89 12:16 by jds")    (* |;;| "Read any pending Console or Log messages, and print them in the prompt window.")    (* |;;|  "Called from INTERRUPTED when the Maiko emulator sets the LogMsgPending flag in \\INTERRUPTSTATE.")    (PROG (MESSAGE-BUFFER MESSAGE-LENGTH)          (|replace| (INTERRUPTSTATE LOGMSGSPENDING) |of| \\INTERRUPTSTATE |with| NIL)          (|while| (SUBRCALL MESSAGE-READP)             |do| (FRESHLINE PROMPTWINDOW)                   (PRIN1 (|if| (SETQ MESSAGE-LENGTH (SUBRCALL MESSAGE-READ (OR MESSAGE-BUFFER                                                                                    (SETQ                                                                                      MESSAGE-BUFFER                                                                                     (ALLOCSTRING                                                                                      1024)))                                                                1024))                              |then| (SUBSTRING MESSAGE-BUFFER 1 MESSAGE-LENGTH)                            |else| "?? system message: polling failed")                          PROMPTWINDOW))))))(* |;;| "Asynchronous I/O handling")(DEFINEQ(\\MAIKO.IO-INTERRUPT  (LAMBDA NIL                                            (* \; "Edited 18-Dec-89 13:09 by jds")    (* |;;| "Handle I/O pending on an asynchronous file descriptor.")    (* |;;|   "Called from INTERRUPTED when the Maiko emulator sets theIOINTERRUPT flag in \\INTERRUPTSTATE.")    (PROG NIL          (|replace| (INTERRUPTSTATE IOINTERRUPT) |of| \\INTERRUPTSTATE |with| NIL)          (FOR INFO IN \\MAIKO.IO-INTERRUPT-VECTOR             WHEN (NOT (ZEROP (LOGAND (CAR INFO)                                         \\MAIKO.IO-INTERRUPT-FLAGS)))             DO (CL:FUNCALL (CADR INFO)))))))(RPAQ \\MAIKO.IO-INTERRUPT-FLAGS (\\CREATECELL \\FIXP))(RPAQQ \\MAIKO.IO-INTERRUPT-VECTOR NIL)(PUTPROPS MAIKOETHER COPYRIGHT ("Venue & Xerox Corporation" 1988 1989 1990 1991))(DECLARE\: DONTCOPY  (FILEMAP (NIL (2430 13315 (\\MAIKO.10MBSENDPACKET 2440 . 4818) (\\MAIKO.10MBWATCHER 4820 . 6165) (\\MAIKO.ETHERRESUME 6167 . 6326) (\\MAIKO.ETHERSUSPEND 6328 . 6489) (\\MAIKO.INPUT.INTERRUPT 6491 . 8753) (\\MAIKO.10MBSTARTDRIVER 8755 . 10406) (\\MAIKO.10MBTURNONETHER 10408 . 12783) (\\MAIKO.10MB.RESTART.ETHER 12785 . 13138) (\\MAIKO.CHECKSUM 13140 . 13313)) (14370 17435 (\\MAIKO.ETHER-INTERRUPT 14380 . 17433)) (17557 18920 (\\MAIKO.CONSOLE-LOG-PRINT 17567 . 18918)) (18966 19646 (\\MAIKO.IO-INTERRUPT 18976 . 19644)))))STOP