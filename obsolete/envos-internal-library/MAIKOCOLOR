(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "XCL" BASE 10)
(FILECREATED "15-Jun-90 17:42:22" |{DSK}<usr>local>lde>lispcore>internal>library>MAIKOCOLOR.;2| 25610  

      |changes| |to:|  (VARS MAIKOCOLORCOMS)

      |previous| |date:| "22-Mar-89 02:08:31" 
|{DSK}<usr>local>lde>lispcore>internal>library>MAIKOCOLOR.;1|)


; Copyright (c) 1988, 1989, 1990 by Venue & Xerox Corporation.  All rights reserved.

(PRETTYCOMPRINT MAIKOCOLORCOMS)

(RPAQQ MAIKOCOLORCOMS
       ((P (MOVD? '\\SLOWBLTCHAR '\\OLD.SLOWBLTCHAR)
           (MOVD? 'CURSOREXIT 'OLD.CURSOREXIT)
           (MOVD? '\\SOFTCURSORUP '\\OLD.SOFTCURSORUP))
        (FNS \\MAIKO.COLORINIT \\MAIKO.STARTCOLOR \\MAIKO.STOPCOLOR \\MAIKO.EVENTFN 
             \\MAIKO.SENDCOLORMAPENTRY \\MAIKO.CHANGESCREEN)
        (FNS \\COLORDISPLAYBITS CURSOREXIT \\SLOWBLTCHAR \\SOFTCURSORUP)
        (MACROS \\MAIKO.CGFOURP \\MAIKO.CGTWOP)
        (CONSTANTS (\\TO.MAIKO.MONOSCREEN 0)
               (\\TO.MAIKO.COLORSCREEN 1)
               (\\MAIKO.COLORSCREENWIDTH 1152)
               (\\MAIKO.COLORSCREENHEIGHT 900)
               (\\MAIKO.COLORPAGES 2048)
               (\\MAIKO.COLORBUF.ALIGN 4095))
        (GLOBALVARS MAIKOCOLOR.BITSPERPIXEL)
        (INITVARS (\\MAIKO.CURRENT.SCREEN.MODE \\TO.MAIKO.MONOSCREEN))
        (FILES COLOR)
        (DECLARE\: DONTEVAL@LOAD DOCOPY (P (\\MAIKO.COLORINIT)))))

(MOVD? '\\SLOWBLTCHAR '\\OLD.SLOWBLTCHAR)

(MOVD? 'CURSOREXIT 'OLD.CURSOREXIT)

(MOVD? '\\SOFTCURSORUP '\\OLD.SOFTCURSORUP)
(DEFINEQ

(\\MAIKO.COLORINIT
  (LAMBDA NIL
    (DECLARE (GLOBALVARS \\MAIKOCOLORWSOPS \\MAIKOCOLORINFO))
                                                          (* \; "Edited  2-Nov-88 11:14 by shimizu")
    (SETQ \\MAIKOCOLORWSOPS (|create| WSOPS
                                   STARTBOARD _ (FUNCTION NILL)
                                   STARTCOLOR _ (FUNCTION \\MAIKO.STARTCOLOR)
                                   STOPCOLOR _ (FUNCTION NILL)
                                   EVENTFN _ (FUNCTION NILL)
                                   SENDCOLORMAPENTRY _ (FUNCTION \\MAIKO.SENDCOLORMAPENTRY)
                                   SENDPAGE _ (FUNCTION NILL)
                                   PILOTBITBLT _ (FUNCTION \\DISPLAY.PILOTBITBLT)))
    (SETQ \\MAIKOCOLORINFO (|create| DISPLAYINFO
                                  DITYPE _ 'MAIKOCOLOR
                                  DIWIDTH _ \\MAIKO.COLORSCREENWIDTH
                                  DIHEIGHT _ \\MAIKO.COLORSCREENHEIGHT
                                  DIBITSPERPIXEL _ 8
                                  DIWSOPS _ \\MAIKOCOLORWSOPS))
    (\\DEFINEDISPLAYINFO \\MAIKOCOLORINFO)))

(\\MAIKO.STARTCOLOR
  (LAMBDA (FDEV)                                      (* \; "Edited  2-Nov-88 11:13 by shimizu")
    (PROG (DISPLAYSTATE)
          (SETQ DISPLAYSTATE (|fetch| (FDEV DEVICEINFO) |of| FDEV))
          (|replace| (DISPLAYSTATE ONOFF) |of| DISPLAYSTATE |with| 'STARTCOLOR)
          (MOVD '\\DISPLAY.PILOTBITBLT '\\SOFTCURSORPILOTBITBLT)

     (* |;;| " MMAP colorbuffer")

          ((OPCODES SUBRCALL 136 1)
           (FETCH (BITMAP BITMAPBASE) OF |ColorScreenBitMap|))
          (|replace| (DISPLAYSTATE ONOFF) |of| DISPLAYSTATE |with| 'ON))))

(\\MAIKO.STOPCOLOR
  (LAMBDA (FDEV)                                      (* \; "Edited 12-Mar-89 20:02 by takeshi")
                                                             (* \; "By Take")
    (PROG (DISPLAYSTATE)
          (SETQ DISPLAYSTATE (|fetch| (FDEV DEVICEINFO) |of| FDEV))
          (|replace| (DISPLAYSTATE ONOFF) |of| DISPLAYSTATE |with| 'STOPCOLOR)
          (|replace| (DISPLAYSTATE ONOFF) |of| DISPLAYSTATE |with| 'OFF))))

(\\MAIKO.EVENTFN
  (LAMBDA (FDEV EVENT)                                (* \; "Edited 12-Mar-89 19:52 by takeshi")
                                                             (* \; "BY take")
    (COND
       ((EQ (|fetch| (DISPLAYSTATE ONOFF) |of| (|fetch| (FDEV DEVICEINFO) |of| FDEV))
            'ON)
        (SELECTQ EVENT
            ((BEFORELOGOUT BEFORESYSOUT BEFOREMAKESYS)       (* |turn| |off| |display| |since| 
                                                           |we| |may| |awake| |on| |different| 
                                                           |machine|)
                 (COLORDISPLAY 'OFF))
            (AFTERSAVEVM                                     (* |Rekick| |the| |color| 
                                                           |microcode.| *)
                         (\\MAIKO.STARTCOLOR \\COLORDISPLAYFDEV)
                         (SCREENCOLORMAP (SCREENCOLORMAP)))
            NIL)))))

(\\MAIKO.SENDCOLORMAPENTRY
  (LAMBDA (FDEV COLOR# RGB)                           (* \; "Edited  1-Dec-88 18:16 by shimizu")
    ((OPCODES SUBRCALL 138 4)
     COLOR#
     (CAR RGB)
     (CADR RGB)
     (CADDR RGB))))

(\\MAIKO.CHANGESCREEN
  (LAMBDA (TOSCREEN)                                  (* \; "Edited  1-Dec-88 18:32 by shimizu")
    ((OPCODES SUBRCALL 137 1)
     TOSCREEN)))
)
(DEFINEQ

(\\COLORDISPLAYBITS
  (LAMBDA (WIDTH HEIGHT BITSPERPIXEL)                 (* \; "Edited 22-Mar-89 02:07 by takeshi")
                                                             (* |returns| \a |pointer| |to| |the| 
                                                           |bits| |that| |the| |color| |board| 
                                                           |needs.|)
    (DECLARE (GLOBALVARS \\COLORDISPLAYBITS))
    (COND
       ((AND (EQ (MACHINETYPE)
                 'MAIKO)
             (OR (\\MAIKO.CGTWOP)
                 (\\MAIKO.CGFOURP)))
        (PROG ((DUMMY (\\ALLOCPAGEBLOCK 1))
               (ADDROFFSET ((OPCODES SUBRCALL 139 0))))
              (WHILE (NEQ (LOGAND \\MAIKO.COLORBUF.ALIGN (IPLUS (\\LOLOC DUMMY)
                                                                    ADDROFFSET))
                              0) DO (SETQ DUMMY (\\ALLOCPAGEBLOCK 1)))
              (RETURN (OR (SETQ \\COLORDISPLAYBITS (\\ALLOCPAGEBLOCK \\MAIKO.COLORPAGES))
                          (ERROR "No room for color screen of size" \\MAIKO.COLORPAGES)))))
       (T (PROG (NPAGES)

         (* TBW\: I\f |you| |come| |through| |this| |function| \a |second| |time| |with| 
       |different| |screen| |params| |won't| |you| |get| |screwed| |half| |the| 
       |time?| *)

                (COND
                   ((NULL \\COLORDISPLAYBITS)                (* 2 |extra| |pages| |needed| |for| 
                                                           DORADOCOLOR |microcode| |bug.|
                                                           *)
                    (SETQ NPAGES (IPLUS (FOLDHI (ITIMES (FOLDHI (ITIMES WIDTH BITSPERPIXEL)
                                                               BITSPERWORD)
                                                       HEIGHT)
                                               WORDSPERPAGE)
                                        2))                  (* \\ALLOCBLOCK |can't| |hack| 
                                                           |bitmaps| |of| |the| |size| |of| 
                                                           |the| 1132 |color| |screen|)
                    (SETQ \\COLORDISPLAYBITS (COND
                                                ((IGREATERP (UNFOLD NPAGES CELLSPERPAGE)
                                                        |\\MaxArrayNCells|)
                                                 (OR (\\ALLOCPAGEBLOCK NPAGES)
                                                     (ERROR "No room for color screen of size" NPAGES
                                                            )))
                                                (T (\\ALLOCBLOCK (UNFOLD NPAGES CELLSPERPAGE)
                                                          NIL NIL CELLSPERPAGE))))))
                (RETURN \\COLORDISPLAYBITS))))))

(CURSOREXIT
  (LAMBDA NIL                                         (* \; "Edited  2-Nov-88 13:11 by shimizu")

         (* * |called| |when| |cursor| |moves| |off| |the| |screen| |edge|)

    (DECLARE (GLOBALVARS LASTSCREEN LASTMOUSEX LASTMOUSEY \\MAIKO.CURRENT.SCREEN.MODE))
    (PROG (SCREEN XCOORD YCOORD SCREEN2 XCOORD2 YCOORD2)
          (SETQ SCREEN LASTSCREEN)
          (SETQ XCOORD LASTMOUSEX)
          (SETQ YCOORD LASTMOUSEY)
          (SETQ SCREEN2 (COND
                           ((EQ SCREEN \\MAINSCREEN)
                            (PROGN \\COLORSCREEN))
                           (T (PROGN \\MAINSCREEN))))        (* |generalize| |for| |more| |than| 
                                                           |two| |screens| (|or| |alternate| 
                                                           |physical| |arrangement| |of| 
                                                           |screens.|))
          (COND
             ((EQ XCOORD 0)
              (SETQ XCOORD2 (IDIFFERENCE (|fetch| (SCREEN SCWIDTH) |of| SCREEN2)
                                   2)))
             ((EQ XCOORD (SUB1 (|fetch| (SCREEN SCWIDTH) |of| SCREEN)))
              (SETQ XCOORD2 1))
             (T (RETURN)))
          (SETQ YCOORD2 (IQUOTIENT (ITIMES YCOORD (SUB1 (|fetch| (SCREEN SCHEIGHT) |of|
                                                                                       SCREEN2)))
                               (SUB1 (|fetch| (SCREEN SCHEIGHT) |of| SCREEN))))
          (CURSORSCREEN SCREEN2 XCOORD2 YCOORD2)
          (AND (EQUAL (MACHINETYPE)
                      'MAIKO)
               (COND
                  ((EQ \\MAIKO.CURRENT.SCREEN.MODE \\TO.MAIKO.MONOSCREEN)
                   (\\MAIKO.CHANGESCREEN \\TO.MAIKO.COLORSCREEN)
                   (SETQ \\MAIKO.CURRENT.SCREEN.MODE \\TO.MAIKO.COLORSCREEN))
                  (T (\\MAIKO.CHANGESCREEN \\TO.MAIKO.MONOSCREEN)
                     (SETQ \\MAIKO.CURRENT.SCREEN.MODE \\TO.MAIKO.MONOSCREEN)))))))

(\\SLOWBLTCHAR
  (LAMBDA (CHARCODE DISPLAYSTREAM)                    (* \; "Edited  7-Dec-88 13:00 by shimizu")

    (* |;;| "case of BLTCHAR where either font is rotated or destination is a color bitmap.  DISPLAYSTREAM is known to be a display stream, and its cache fields have been updated for CHARCODE's charset")

    (PROG (ROTATION CHAR8CODE DD FONTDESC)
          (SETQ CHAR8CODE (\\CHAR8CODE CHARCODE))
          (SETQ DD (|ffetch| (STREAM IMAGEDATA) |of| DISPLAYSTREAM))
          (SETQ FONTDESC (|ffetch| (\\DISPLAYDATA DDFONT) |of| DD))
          (SETQ ROTATION (|ffetch| (FONTDESCRIPTOR ROTATION) |of| FONTDESC))
          (COND
             ((EQ 0 ROTATION)
              (PROG (NEWX LEFT RIGHT CURX PILOTBBT DESTBIT WIDTH SOURCEBIT CSINFO)
                    (SETQ CSINFO (\\GETCHARSETINFO (\\CHARSET CHARCODE)
                                        (|ffetch| (\\DISPLAYDATA DDFONT) |of| DD)))
                    (SETQ CURX (|ffetch| (\\DISPLAYDATA DDXPOSITION) |of| DD))
                    (SETQ NEWX (IPLUS CURX (\\DSPGETCHARWIDTH CHAR8CODE DD)))
                    (COND
                       ((IGREATERP NEWX (|ffetch| (\\DISPLAYDATA |DDRightMargin|) |of| DD))
                                                             (* \; "past RIGHT margin, force eol")
                        (\\DSPPRINTCR/LF (CHARCODE EOL)
                               DISPLAYSTREAM)
                        (SETQ CURX (|ffetch| (\\DISPLAYDATA DDXPOSITION) |of| DD))
                        (SETQ NEWX (IPLUS CURX (\\DSPGETCHARWIDTH CHAR8CODE DD)))))
                                                             (* \; "update the x position.")
                    (|freplace| (\\DISPLAYDATA DDXPOSITION) |of| DD |with| NEWX)
                                                             (* SETQ CURX (\\DSPTRANSFORMX CURX 
                                                           DD))
                    (SETQ LEFT (IMAX (|ffetch| (\\DISPLAYDATA |DDClippingLeft|) |of| DD)
                                     CURX))
                    (SETQ RIGHT (IMIN (|ffetch| (\\DISPLAYDATA |DDClippingRight|) |of| DD)
                                      (\\DSPTRANSFORMX NEWX DD)))
                    (BITBLT (|ffetch| (CHARSETINFO CHARSETBITMAP) |of| CSINFO)
                           (\\DSPGETCHAROFFSET CHAR8CODE DD)
                           0 DISPLAYSTREAM CURX (ADD1 (IDIFFERENCE (|ffetch| (\\DISPLAYDATA
                                                                                  DDYPOSITION)
                                                                      |of| DD)
                                                             (|ffetch| (CHARSETINFO 
                                                                                  CHARSETDESCENT)
                                                                |of| CSINFO)))
                           (\\DSPGETCHARWIDTH CHAR8CODE DD)
                           (IPLUS (|ffetch| (CHARSETINFO CHARSETASCENT) |of| CSINFO)
                                  (|ffetch| (CHARSETINFO CHARSETDESCENT) |of| CSINFO)))
                                                             (* \; "(SETQ PILOTBBT (|ffetch| (\\\\DISPLAYDATA DDPILOTBBT) |of| DD)) (COND ((AND (ILESSP LEFT RIGHT) (NOT (EQ (|ffetch| (PILOTBBT PBTHEIGHT) |of| PILOTBBT) 0))) (SETQ DESTBIT LEFT) (SETQ WIDTH (IDIFFERENCE RIGHT LEFT)) (SETQ SOURCEBIT (IDIFFERENCE (IPLUS (\\\\DSPGETCHAROFFSET CHAR8CODE DD) LEFT) CURX)) (SELECTQ (|ffetch| (BITMAP BITMAPBITSPERPIXEL) |of| (|ffetch| (\\\\DISPLAYDATA |DDDestination|) |of| DD)) (1) (4 (SETQ DESTBIT (LLSH DESTBIT 2)) (SETQ WIDTH (LLSH WIDTH 2)) (SETQ SOURCEBIT (LLSH SOURCEBIT 2))) (8 (SETQ DESTBIT (LLSH DESTBIT 3)) (SETQ WIDTH (LLSH WIDTH 3)) (SETQ SOURCEBIT (LLSH SOURCEBIT 3))) (24 (SETQ DESTBIT (ITIMES 24 DESTBIT)) (SETQ WIDTH (ITIMES 24 WIDTH)) (SETQ SOURCEBIT (ITIMES 24 SOURCEBIT))) (SHOULDNT)) (.WHILE.TOP.DS. DISPLAYSTREAM (|freplace| (PILOTBBT PBTDESTBIT) |of| PILOTBBT |with| DESTBIT) (|freplace| (PILOTBBT PBTWIDTH) |of| PILOTBBT |with| WIDTH) (|freplace| (PILOTBBT PBTSOURCEBIT) |of| PILOTBBT |with| SOURCEBIT) (\\\\PILOTBITBLT PILOTBBT 0)) T))")
                ))
             (T                                              (* \; "handle rotated fonts")
                (PROG (YPOS HEIGHTMOVED CSINFO)
                      (SETQ YPOS (|ffetch| (\\DISPLAYDATA DDYPOSITION) |of| DD))
                      (SETQ HEIGHTMOVED (\\DSPGETCHARWIDTH CHAR8CODE DD))
                      (SETQ CSINFO (\\GETCHARSETINFO (\\CHARSET CHARCODE)
                                          (|ffetch| (\\DISPLAYDATA DDFONT) |of| DD)))
                      (COND
                         ((EQ ROTATION 90)                   (* \; 
                                                           "don't force CR for rotated fonts.")
                          (\\DSPYPOSITION.DISPLAY DISPLAYSTREAM (IPLUS YPOS HEIGHTMOVED))
                                                             (* \; 
                                                           "update the display stream x position.")
                          (BITBLT (|ffetch| (CHARSETINFO CHARSETBITMAP) |of| CSINFO)
                                 0
                                 (\\DSPGETCHAROFFSET CHAR8CODE DD)
                                 DISPLAYSTREAM
                                 (ADD1 (IDIFFERENCE (|ffetch| (\\DISPLAYDATA DDXPOSITION)
                                                       |of| DD)
                                              (|ffetch| (CHARSETINFO CHARSETASCENT) |of|
                                                                                        CSINFO)))
                                 YPOS
                                 (IPLUS (|ffetch| (CHARSETINFO CHARSETASCENT) |of| CSINFO)
                                        (|ffetch| (CHARSETINFO CHARSETDESCENT) |of| CSINFO))
                                 HEIGHTMOVED))
                         ((EQ ROTATION 270)
                          (\\DSPYPOSITION.DISPLAY DISPLAYSTREAM (IDIFFERENCE YPOS HEIGHTMOVED))
                          (BITBLT (|ffetch| (CHARSETINFO CHARSETBITMAP) |of| CSINFO)
                                 0
                                 (\\GETBASE (|ffetch| (\\DISPLAYDATA DDOFFSETSCACHE) |of|
                                                                                         DD)
                                        CHAR8CODE)
                                 DISPLAYSTREAM
                                 (IDIFFERENCE (|ffetch| (\\DISPLAYDATA DDXPOSITION) |of|
                                                                                        DD)
                                        (|ffetch| (CHARSETINFO CHARSETDESCENT) |of| CSINFO))
                                 (|ffetch| (\\DISPLAYDATA DDYPOSITION) |of| DISPLAYSTREAM)
                                 (IPLUS (|ffetch| (CHARSETINFO CHARSETASCENT) |of| CSINFO)
                                        (|ffetch| (CHARSETINFO CHARSETDESCENT) |of| CSINFO))
                                 HEIGHTMOVED))
                         (T (ERROR "Not implemented to rotate by other than 0, 90 or 270")))))))))

(\\SOFTCURSORUP
  (LAMBDA (NEWCURSOR)                                 (* \; "Edited 16-Jan-89 15:44 by shimizu")
                                                             (* |Put| |soft| NEWCURSOR |up,| 
                                                           |assuming| |soft| |cursor| |is| 
                                                           |down.| *)
    (COND
       ((EQ \\MACHINETYPE \\MAIKO)
        (SETQ \\CURRENTCURSOR NEWCURSOR))
       (T (PROG (IMAGE MASK WIDTH BWIDTH HEIGHT CURSORBITSPERPIXEL CURSORBPL UPBMBASE DOWNBMBASE)
   "                                                         (* |Get| |cursor| IMAGE & MASK.
                    (                                      *)
                (SETQ IMAGE (|fetch| (CURSOR CUIMAGE) |of| NEWCURSOR))
                                (* move 4 bits from source to 
                                                             destination.)
                       [\PUTBASE DBASE 0 (\GETBASE MAPBASE (SELECTQ SBITOFFSET
                                                               (2 (fetch (TWOOFFSETBITACCESS BITS2TO5
                                                                                ) of SBASE))
                                                               (6 (fetch (TWOOFFSETBITACCESS BITS6TO9
                                                                                ) of SBASE))
                                                               (10 (fetch (TWOOFFSETBITACCESS 
                                                                                 BITS10TO13)
                                                                      of SBASE))
                                                               (LOGOR (LLSH (fetch (
                                                                                   TWOOFFSETBITACCESS
                                                                                    BITS14TO15)
                                                                               of SBASE)
                                                                            2)
                                                                      (fetch (TWOOFFSETBITACCESS
                                                                              BITS0TO1)
                                                                         of (SETQ SBASE
                                                                             (\ADDBASE SBASE 1]
                       (SETQ DBASE (\ADDBASE DBASE 1))
                       (SETQ WIDTH (IDIFFERENCE WIDTH 4))
                       (COND
                          ((EQ (SETQ SBITOFFSET (IPLUS SBITOFFSET 4))
                               18)
          
          (* SBASE has already been incremented as part of fetching the last 4 bits.)

                           (SETQ SBITOFFSET 2)))
                       (GO ONEWRDLP)))
             LP  (COND
                    ((IGREATERP WIDTH (SUB1 BITSPERWORD))    (* move a source word's worth of bits.)
                     (\PUTBASE DBASE 0 (\GETBASE MAPBASE (fetch (TWOOFFSETBITACCESS BITS2TO5)
                                                            of SBASE)))
                     (\PUTBASE DBASE 1 (\GETBASE MAPBASE (fetch (TWOOFFSETBITACCESS BITS6TO9)
                                                            of SBASE)))
                     (\PUTBASE DBASE 2 (\GETBASE MAPBASE (fetch (TWOOFFSETBITACCESS BITS10TO13)
                                                            of SBASE)))
                     [\PUTBASE DBASE 3 (\GETBASE MAPBASE (LOGOR (LLSH (fetch (TWOOFFSETBITACCESS
                                                                              BITS14TO15)
                                                                         of SBASE)
                                                                      2)
                                                                (fetch (TWOOFFSETBITACCESS BITS0TO1)
                                                                   of (SETQ SBASE (\ADDBASE SBASE 1]
                     (SETQ DBASE (\ADDBASE DBASE 4))
                     (SETQ WIDTH (IDIFFERENCE WIDTH BITSPERWORD))
                     (GO LP))
                    (T                                       (* finish off last less than 16 bits.)
                       (GO ONEWRDLP])
        (PROG NIL
          
          (* moving bits that are aligned with 3 extra bits in the following word of the 
          source.)

          ONEWRDLP
                                                             (* SBITOFFSET is either 3, 7, 11 or 15)
              (COND
                 ((AND (EQ SBITOFFSET 3)
                       (IGREATERP WIDTH (SUB1 BITSPERWORD))) (* go to center loop.)
                  (GO LP))
                 ((IGREATERP 4 WIDTH)
                  [PROG (SWORDCONTENTS)
                        (SETQ SWORDCONTENTS (\GETBASE SBASE 0))
                        (SELECTQ WIDTH
                            (0)
                            (1 (PUTBASEBYTE DBASE 0 (LOGOR (LLSH (COND
                                                                    ((ZEROP (LOGAND SWORDCONTENTS
                                                                                   (\BITMASK 
                                                                                          SBITOFFSET)
                                                                                   ))
                                                                     0COLOR)
                                                                    (T 1COLOR))
                                                                 4)
                                                           (LOGAND (\GETBASEBYTE DBASE 0)
                          |with| (|fetch| (BITMAP BITMAPBASE) |of| MASK))
                (|replace| (PILOTBBT PBTSOURCE) |of| \\SOFTCURSORBBT4
                   |with| (|fetch| (BITMAP BITMAPBASE) |of| IMAGE))
                                                             (* |Put| |up| |new| \\CURRENTCURSOR.
                                                           *)
                (SETQ \\CURRENTCURSOR NEWCURSOR)
                (\\TEMPLOCKPAGES \\CURRENTCURSOR 1)
                (SETQ \\SOFTCURSORP T)
                (\\SOFTCURSORUPCURRENT))))))
)
(DECLARE\: EVAL@COMPILE 

(PUTPROPS \\MAIKO.CGFOURP MACRO (NIL (EQ (LOGAND 120 (|fetch| DEVCONFIG |of| 
                                                                                    |\\InterfacePage|
                                                                    ))
                                                 64)))

(PUTPROPS \\MAIKO.CGTWOP MACRO (NIL (EQ (LOGAND 120 (|fetch| DEVCONFIG |of| 
                                                                                    |\\InterfacePage|
                                                                   ))
                                                24)))
)
(DECLARE\: EVAL@COMPILE 

(RPAQQ \\TO.MAIKO.MONOSCREEN 0)

(RPAQQ \\TO.MAIKO.COLORSCREEN 1)

(RPAQQ \\MAIKO.COLORSCREENWIDTH 1152)

(RPAQQ \\MAIKO.COLORSCREENHEIGHT 900)

(RPAQQ \\MAIKO.COLORPAGES 2048)

(RPAQQ \\MAIKO.COLORBUF.ALIGN 4095)


(CONSTANTS (\\TO.MAIKO.MONOSCREEN 0)
       (\\TO.MAIKO.COLORSCREEN 1)
       (\\MAIKO.COLORSCREENWIDTH 1152)
       (\\MAIKO.COLORSCREENHEIGHT 900)
       (\\MAIKO.COLORPAGES 2048)
       (\\MAIKO.COLORBUF.ALIGN 4095))
)
(DECLARE\: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS MAIKOCOLOR.BITSPERPIXEL)
)

(RPAQ? \\MAIKO.CURRENT.SCREEN.MODE \\TO.MAIKO.MONOSCREEN)

(FILESLOAD COLOR)
(DECLARE\: DONTEVAL@LOAD DOCOPY 

(\\MAIKO.COLORINIT)
)
(PUTPROPS MAIKOCOLOR COPYRIGHT ("Venue & Xerox Corporation" 1988 1989 1990))
(DECLARE\: DONTCOPY
  (FILEMAP (NIL (1501 5202 (\\MAIKO.COLORINIT 1511 . 2684) (\\MAIKO.STARTCOLOR 2686 . 3306) (
\\MAIKO.STOPCOLOR 3308 . 3797) (\\MAIKO.EVENTFN 3799 . 4791) (\\MAIKO.SENDCOLORMAPENTRY 4793 . 5021) (
\\MAIKO.CHANGESCREEN 5023 . 5200)) (5203 24135 (\\COLORDISPLAYBITS 5213 . 8105) (CURSOREXIT 8107 . 
10172) (\\SLOWBLTCHAR 10174 . 17604) (\\SOFTCURSORUP 17606 . 24133)))))
STOP
