(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)(FILECREATED "17-Sep-90 13:30:25" |{PELE:MV:ENVOS}<LISPCORE>LIBRARY>FTPSERVER.;3| 20799        changes to%:  (FNS \SFTP.PLIST.FROM.FILE)                    (FILES DPUPFTP)      previous date%: "11-Jun-90 15:53:18" |{PELE:MV:ENVOS}<LISPCORE>LIBRARY>FTPSERVER.;2|)(* ; "Copyright (c) 1983, 1984, 1986, 1987, 1989, 1990 by Venue & Xerox Corporation.  All rights reserved.")(PRETTYCOMPRINT FTPSERVERCOMS)(RPAQQ FTPSERVERCOMS       ((FNS \FTPSERVER.TOP FTPSERVER \GETFILETYPE \SFTP.COMMANDLOOP \SFTP.RETRIEVE \SFTP.ENUMERATE              \SFTP.STORE \SFTP.UNDO.STORE \SFTP.DELETE \SFTP.VERSION)        (FNS \SFTP.OPENFILE.FROM.PLIST \SFTP.PLIST.FROM.FILE \SFTP.SENDPLIST \SFTP.PROTOCOL.ERROR              \SFTP.MARK.ERROR \SFTP.READPLIST \SFTP.DESIRED.PROPS \SFTP.TIMEOUTFN \SFTP.ERRORHANDLER             \SFTP.WHENCLOSED)        [COMS * `((VARS (\SFTP.VERSION ',(DATE (DATEFORMAT NO.TIME]        [INITVARS (FTPSERVER.DEFAULT.HOST 'DSK)               (FTPSERVER.DEFAULT.PROPS '(TYPE CREATIONDATE WRITEDATE READDATE LENGTH AUTHOR]        (DECLARE%: DONTCOPY (MACROS .IFDESIRED.)               (FILES (LOADCOMP)                      DPUPFTP BSP))))(DEFINEQ(\FTPSERVER.TOP(LAMBDA (FTPDEBUGLOG) (* ; "Edited 19-Nov-87 17:32 by bvm:") (PROG (PUPSOC SOCKET INSTREAM EVENT SAVER) (COND (FTPDEBUGLOG (COND ((OR (EQ FTPDEBUGLOG T) (LISTP FTPDEBUGLOG)) (SETQ FTPDEBUGLOG (GETSTREAM (CREATEW (LISTP FTPDEBUGLOG) "FTP Server traffic") (QUOTE OUTPUT))) (WINDOWPROP FTPDEBUGLOG (QUOTE PAGEFULLFN) (FUNCTION NILL)) (DSPSCROLL (QUOTE ON) FTPDEBUGLOG) (DSPFONT (QUOTE (GACHA 8)) FTPDEBUGLOG)) (T (SETQ FTPDEBUGLOG (GETSTREAM FTPDEBUGLOG (QUOTE OUTPUT))))))) (RESETSAVE NIL (SETQ SAVER (LIST (FUNCTION (LAMBDA (SOC) (AND SOC (CLOSERTPSOCKET SOC 0)))) NIL))) TOP (if FTPDEBUGFLG then (CL:FORMAT (OR FTPDEBUGLOG T) "~%%FTP Server listening at ~A~%%" (DATE))) (SETQ SOCKET (OPENRTPSOCKET NIL (QUOTE (SERVER RETURN)) (OPENPUPSOCKET \PUPSOCKET.FTP T) NIL)) (RPLACA (CDR SAVER) SOCKET) (SETQ EVENT (fetch RTPEVENT of SOCKET)) (until (EQ (fetch RTPSTATE of SOCKET) \STATE.OPEN) do (AWAIT.EVENT EVENT)) (COND ((SETQ INSTREAM (CREATEBSPSTREAM SOCKET NIL (FUNCTION \SFTP.ERRORHANDLER) (IMIN \FTP.IDLE.TIMEOUT MAX.SMALLP) (FUNCTION \SFTP.TIMEOUTFN) (FUNCTION \SFTP.WHENCLOSED))) (NLSETQ (RESETLST (RESETSAVE NIL (LIST (QUOTE CLOSEBSPSTREAM) INSTREAM 0)) (RPLACA (CDR SAVER) NIL) (COND (FTPDEBUGFLG (CL:FORMAT (OR FTPDEBUGLOG T) "~%%Connection open with ~A~%%" (PORTSTRING (fetch FRNPORT of SOCKET) (\MAKENUMBER (fetch FRNSOCKETHI of SOCKET) (fetch FRNSOCKETLO of SOCKET)))))) (\SFTP.COMMANDLOOP INSTREAM (BSPOUTPUTSTREAM INSTREAM) FTPDEBUGLOG))))) (GO TOP))))(FTPSERVER(LAMBDA (FTPDEBUGLOG) (* bvm%: "16-Nov-84 10:52") (ADD.PROCESS (LIST (FUNCTION \FTPSERVER.TOP) (KWOTE FTPDEBUGLOG)) (QUOTE NAME) (QUOTE FTPSERVER) (QUOTE RESTARTABLE) (QUOTE HARDRESET))))(\GETFILETYPE(LAMBDA (STREAM FILEOPENP) (* ; "Edited 30-Nov-87 17:12 by bvm:") (RESETLST (if (OR FILEOPENP (if (SETQ STREAM (IGNORE-ERRORS (OPENSTREAM STREAM (QUOTE INPUT)))) then (RESETSAVE NIL (LIST (QUOTE CLOSEF) STREAM)) T)) then (\INFER.FILE.TYPE STREAM) else (* ; "Couldn't open file, so guess BINARY") (QUOTE BINARY)))))(\SFTP.COMMANDLOOP(LAMBDA (INS OUTS FTPDEBUGLOG) (DECLARE (SPECVARS FTPDEBUGLOG)) (* ; "Edited 19-Nov-87 13:10 by bvm:") (LET ((*UPPER-CASE-FILE-NAMES* NIL) MARK) (DECLARE (SPECVARS *UPPER-CASE-FILE-NAMES*)) (* ; "We certainly don't need anything to be upper-case symbols.") (repeatwhile (SELECTC (SETQ MARK (FTPGETMARK INS)) ((MARK# VERSION) (\SFTP.VERSION INS OUTS)) ((MARK# RETRIEVE) (\SFTP.RETRIEVE INS OUTS)) ((MARK# NEW-STORE) (\SFTP.STORE INS OUTS)) ((MARK# STORE) (\SFTP.STORE INS OUTS T)) ((MARK# NEW-ENUMERATE) (\SFTP.ENUMERATE INS OUTS T)) ((MARK# ENUMERATE) (\SFTP.ENUMERATE INS OUTS)) ((MARK# DELETE) (\SFTP.DELETE INS OUTS)) ((MARK# EOC) T) ((MARK# COMMENT) (OR (\FTP.FLUSH.TO.EOC INS FTPDEBUGLOG) (\SFTP.PROTOCOL.ERROR INS OUTS))) ((LIST (MARK# YES) (MARK# NO) (MARK# HERE-IS-PLIST) (MARK# HERE-IS-FILE)) (\SFTP.PROTOCOL.ERROR INS OUTS)) (0 (* ; "timed out") NIL) (PROGN (FTPPUTMARK OUTS (MARK# NO)) (FTPPUTCODE OUTS \NO.UNIMPLEMENTED) (PRIN3 "Unimplemented command " OUTS) (PRIN3 (MKSTRING MARK) OUTS) (.EOC. OUTS) T))))))(\SFTP.RETRIEVE(LAMBDA (INS OUTS) (* ; "Edited 19-Nov-87 13:08 by bvm:") (* ;; "Do the RETRIEVE command.  Plist comes next") (RESETLST (PROG (PLIST FILESTREAM) (if (NOT (SETQ PLIST (\SFTP.READPLIST INS OUTS))) then (RETURN NIL) elseif (NEQ (FTPGETMARK INS) (MARK# EOC)) then (RETURN (\SFTP.PROTOCOL.ERROR INS OUTS)) elseif (NOT (SETQ FILESTREAM (\SFTP.OPENFILE.FROM.PLIST PLIST (QUOTE INPUT) OUTS))) then (* ; "Couldn't find it, NO code has already been sent.") (RETURN T)) (* ;; "Prepare to send the file") (RESETSAVE NIL (LIST (QUOTE CLOSEF) FILESTREAM)) (\SFTP.SENDPLIST (\SFTP.PLIST.FROM.FILE FILESTREAM NIL (\SFTP.DESIRED.PROPS PLIST) T) OUTS) (SELECTC (FTPGETMARK INS) ((MARK# NO) (* ; "no, user doesn't want file after all") (\FTP.FLUSH.TO.EOC INS FTPDEBUGLOG)) ((MARK# YES) (FTPGETCODE INS) (\FTP.FLUSH.TO.EOC INS FTPDEBUGLOG) (FTPPUTMARK OUTS (MARK# HERE-IS-FILE)) (CL:MULTIPLE-VALUE-BIND (IGNORE CONDITION) (IGNORE-ERRORS (COPYBYTES FILESTREAM OUTS)) (if CONDITION then (* ; "Report failure") (\SFTP.MARK.ERROR OUTS CONDITION) else (* ; "Success") (FTPPUTMARK OUTS (MARK# YES)) (FTPPUTCODE OUTS 0) (PRIN3 "File sent ok" OUTS)))) (RETURN (\SFTP.PROTOCOL.ERROR INS OUTS))) (* ; "At this point we would normally advance to the next file, but we're not doing *'s yet") (.EOC. OUTS) (RETURN T)))))(\SFTP.ENUMERATE(LAMBDA (INS OUTS NEWP) (* ; "Edited 19-Nov-87 12:29 by bvm:") (* ;; "Do the ENUMERATE command.  Plist comes next") (RESETLST (* ; "To ensure that the generatefiles gets cleaned up if necessary.") (PROG (PLIST FILE DESIREDPROPS GENERATOR PATTERN FOUNDSOME) (SETQ PLIST (OR (\SFTP.READPLIST INS OUTS) (RETURN))) (OR (EQ (FTPGETMARK INS) (MARK# EOC)) (RETURN (\SFTP.PROTOCOL.ERROR INS OUTS))) (SETQ DESIREDPROPS (\SFTP.DESIRED.PROPS PLIST)) (SETQ GENERATOR (OR (\SFTP.OPENFILE.FROM.PLIST PLIST (QUOTE ENUMERATE) OUTS (if DESIREDPROPS then (* ; "Translate FTP props to Lisp props.") (for PROP in DESIREDPROPS collect (SELECTQ PROP (CREATION-DATE (QUOTE CREATIONDATE)) (WRITE-DATE (QUOTE WRITEDATE)) (READ-DATE (QUOTE READDATE)) (SIZE (QUOTE LENGTH)) PROP)) else FTPSERVER.DEFAULT.PROPS)) (RETURN T))) (SETQ PATTERN (DIRECTORY.MATCH.SETUP (CAR GENERATOR))) (SETQ GENERATOR (CDR GENERATOR)) LP (COND ((SETQ FILE (\GENERATENEXTFILE GENERATOR)) (COND ((COND ((LISTP FILE) (DIRECTORY.MATCH PATTERN (SETQ FILE (CONCATCODES FILE)))) (T T)) (COND ((OR (NOT NEWP) (NOT FOUNDSOME)) (FTPPUTMARK OUTS (MARK# HERE-IS-PLIST)))) (SETQ FOUNDSOME T) (\FTP.PRINTPLIST OUTS (\SFTP.PLIST.FROM.FILE FILE NIL DESIREDPROPS NIL GENERATOR)))) (GO LP)) ((NULL FOUNDSOME) (FTPPUTMARK OUTS (MARK# NO)) (FTPPUTCODE OUTS \NO.FILE.NOT.FOUND T) (PRIN3 "File not found" OUTS))) (.EOC. OUTS) (RETURN T)))))(\SFTP.STORE(LAMBDA (INS OUTS OLDSTYLE) (* ; "Edited 23-Nov-87 18:38 by bvm:") (* ;; "Do the STORE command.  Plist comes next") (RESETLST (PROG (PLIST FILESTREAM CONDITION SAVER) (if (NOT (SETQ PLIST (\SFTP.READPLIST INS OUTS))) then (RETURN NIL) elseif (NEQ (FTPGETMARK INS) (MARK# EOC)) then (RETURN (\SFTP.PROTOCOL.ERROR INS OUTS)) elseif (NOT (SETQ FILESTREAM (\SFTP.OPENFILE.FROM.PLIST PLIST (QUOTE OUTPUT) OUTS))) then (* ; "Couldn't find it, NO code has already been sent.") (RETURN T)) (* ;; "Prepare to Store file.") (RESETSAVE NIL (SETQ SAVER (LIST (FUNCTION \SFTP.UNDO.STORE) FILESTREAM))) (COND (OLDSTYLE (FTPPUTMARK OUTS (MARK# YES)) (FTPPUTCODE OUTS 0) (.EOC. OUTS)) (T (\SFTP.SENDPLIST (\SFTP.PLIST.FROM.FILE FILESTREAM T (\SFTP.DESIRED.PROPS PLIST) T) OUTS))) (SELECTC (FTPGETMARK INS) ((MARK# NO) (* ; "no, user doesn't want file.  The RESETSAVE will take care of flushing the file.  Too bad we couldn't provisionally create it.") (FTPGETCODE INS T) (\FTP.FLUSH.TO.EOC INS FTPDEBUGLOG)) ((MARK# HERE-IS-FILE) (* ;; "Carefully copy from input to file and close destination.") (CL:MULTIPLE-VALUE-SETQ (FILESTREAM CONDITION) (IGNORE-ERRORS (PROGN (COPYBYTES INS FILESTREAM) (CLOSEF FILESTREAM)))) (if CONDITION then (* ; "Transfer failed--flush rest of input") (\FTP.FLUSH.TO.MARK INS)) (SELECTC (FTPGETMARK INS) ((MARK# YES) (FTPGETCODE INS) (\FTP.FLUSH.TO.EOC INS FTPDEBUGLOG) (COND (CONDITION (* ; "Report failure") (\SFTP.MARK.ERROR OUTS CONDITION)) (T (FTPPUTMARK OUTS (MARK# YES)) (FTPPUTCODE OUTS 0) (PRIN3 "File stored ok" OUTS) (* ; "Only here do we permit the output file to survive") (RPLACA SAVER (FUNCTION NILL))))) ((MARK# NO) (* ; "Store failed") (FTPGETCODE INS T) (\FTP.FLUSH.TO.EOC INS FTPDEBUGLOG)) (\SFTP.PROTOCOL.ERROR INS OUTS))) (\SFTP.PROTOCOL.ERROR INS OUTS)) (.EOC. OUTS) (RETURN T)))))(\SFTP.UNDO.STORE(LAMBDA (STREAM) (* ; "Edited 19-Nov-87 17:16 by bvm:") (* ;; "Cleanup action for STORE command: Close the stream and delete the file, either because (a) client said not to store it, actually, or (b) we got an error trying to write it.  In the latter case, we need to be very careful, because we might end up getting the same error ourselves here.") (LET ((FAILURES 0)) (if (OPENP STREAM) then (HANDLER-BIND ((CL:ERROR (FUNCTION (LAMBDA (C) (* ;; "Argh.  What we really need is for CLOSEF to support a real :ABORT argument, so it knows it doesn't have to work very hard at closing it.  We have no device-independent way of aborting in a way that actually closes the file (and the device knows it's closed), but we can try returning to the device-dependent CLOSEF and see how it goes.") (LET (POS) (if (OR (> (add FAILURES 1) 5) (NOT (SETQ POS (STKPOS (fetch (FDEV CLOSEFILE) of (fetch (STREAM DEVICE) of STREAM)))))) then (* ; "Oh, give up") (RETTO (FUNCTION CLOSEF)) else (RETTO POS NIL T))))))) (CLOSEF STREAM))) (IGNORE-ERRORS (DELFILE (FULLNAME STREAM))))))(\SFTP.DELETE(LAMBDA (INS OUTS) (* ; "Edited 30-Nov-87 17:04 by bvm:") (* ;; "Do the DELETE command.  Plist comes next") (PROG (PLIST FILENAME) (if (NOT (SETQ PLIST (\SFTP.READPLIST INS OUTS))) then (RETURN NIL) elseif (NEQ (FTPGETMARK INS) (MARK# EOC)) then (RETURN (\SFTP.PROTOCOL.ERROR INS OUTS)) elseif (NOT (SETQ FILENAME (\SFTP.OPENFILE.FROM.PLIST PLIST (QUOTE DELETE) OUTS NIL (QUOTE OLDEST)))) then (* ; "Couldn't find it, NO code has already been sent.") (RETURN T)) (\SFTP.SENDPLIST (\SFTP.PLIST.FROM.FILE FILENAME NIL (\SFTP.DESIRED.PROPS PLIST)) OUTS) (SELECTC (FTPGETMARK INS) ((MARK# NO) (* ; "no, user doesn't want to delete file after all") (\FTP.FLUSH.TO.EOC INS FTPDEBUGLOG)) ((MARK# YES) (* ; "Yes, delete it!") (FTPGETCODE INS) (\FTP.FLUSH.TO.EOC INS FTPDEBUGLOG) (CL:MULTIPLE-VALUE-BIND (RESULT CONDITION) (IGNORE-ERRORS (DELFILE FILENAME)) (if CONDITION then (* ; "Report failure") (\SFTP.MARK.ERROR OUTS CONDITION) elseif RESULT THEN (* ; "Success") (FTPPUTMARK OUTS (MARK# YES)) (FTPPUTCODE OUTS 0) (PRIN3 "File deleted" OUTS) ELSE (* ; "Failed, but DELFILE doesn't tell us why") (FTPPUTMARK OUTS (MARK# NO)) (FTPPUTCODE OUTS (CAR \NO.UNSPECIFIED.ERRORS)) (PRIN3 "Could not delete file" OUTS)))) (RETURN (\SFTP.PROTOCOL.ERROR INS OUTS))) (* ; "At this point we would normally advance to the next file, but we're not doing *'s yet") (.EOC. OUTS) (RETURN T))))(\SFTP.VERSION(LAMBDA (INS OUTS) (* bvm%: "19-AUG-83 22:33") (\FTP.FLUSH.TO.EOC INS FTPDEBUGLOG) (FTPPUTMARK OUTS (MARK# VERSION)) (FTPPUTCODE OUTS \FTP.VERSION) (PRIN3 "Interlisp-D Ftp Server of " OUTS) (PRIN3 \SFTP.VERSION OUTS) (.EOC. OUTS))))(DEFINEQ(\SFTP.OPENFILE.FROM.PLIST(LAMBDA (PLIST ACCESS OUTS DESIREDPROPS RECOG) (* ; "Edited 30-Nov-87 17:57 by bvm:") (* ;; "Opens file from user's PLIST, or answers NO and returns NIL") (LET (FILENAME PIECES MYPLIST VALUE HIGHESTVERSIONP) (for PAIR in PLIST do (SETQ VALUE (CADR PAIR)) (SELECTQ (CAR PAIR) (SERVER-FILENAME (SETQ PIECES (UNPACKFILENAME.STRING VALUE))) ((DEVICE DIRECTORY VERSION) (push PIECES (CAR PAIR) VALUE)) (NAME-BODY (push PIECES (QUOTE BODY) VALUE)) (TYPE (push MYPLIST (LIST (QUOTE TYPE) (MKATOM (U-CASE VALUE))))) (CREATION-DATE (push MYPLIST (LIST (QUOTE CREATIONDATE) VALUE))) (END-OF-LINE-CONVENTION (push MYPLIST (LIST (QUOTE EOLCONVENTION) (MKATOM (U-CASE VALUE))))) (SIZE (push MYPLIST (LIST (QUOTE LENGTH) (MKATOM VALUE)))) NIL)) (for TAIL on PIECES by (CDDR TAIL) do (* ; "Process some parts.  Done here rather than above so that SERVER-FILENAME works easily.") (SELECTQ (CAR TAIL) (DEVICE (* ; "Fake host") (RPLACA TAIL (QUOTE HOST)) (COND ((EQ (NTHCHARCODE (CADR TAIL) -1) (CHARCODE %:)) (* ; "Device specified with trailing colon--strip it") (RPLACA (CDR TAIL) (SUBSTRING (CADR TAIL) 1 -2))))) (VERSION (if (if (STRING.EQUAL (SETQ VALUE (CADR TAIL)) "H") then (SETQ RECOG (QUOTE OLD)) (SETQ HIGHESTVERSIONP T) elseif (STRING.EQUAL VALUE "L") then (SETQ RECOG (QUOTE OLDEST))) then (* ; "Remove VERSION attribute") (if (EQ TAIL PIECES) then (SETQ PIECES (CDDR TAIL)) else (RPLACD (NLEFT PIECES 1 TAIL) (CDDR TAIL))))) NIL)) (SETQ FILENAME (PACKFILENAME.STRING (BQUOTE ((\,. PIECES) HOST (\, FTPSERVER.DEFAULT.HOST) (\,@ (if (EQ ACCESS (QUOTE ENUMERATE)) then (* ; "need to default extension to * before possibly packing on a version.") (QUOTE (EXTENSION *)))))))) (CL:MULTIPLE-VALUE-BIND (RESULT C) (IGNORE-ERRORS (SELECTQ ACCESS (ENUMERATE (SETQ FILENAME (DIRECTORY.FILL.PATTERN FILENAME NIL (if HIGHESTVERSIONP then "" else "*"))) (CONS FILENAME (\GENERATEFILES FILENAME DESIREDPROPS (QUOTE (RESETLST SORT))))) (DELETE (FULLNAME FILENAME RECOG)) (OPENSTREAM FILENAME ACCESS RECOG NIL (CONS (QUOTE (SEQUENTIAL T)) MYPLIST)))) (COND (RESULT) (T (* ; "On failure, write error value and return NIL.  C could be NIL if FULLNAME didn't find the file, in which case the error will be FILE NOT FOUND.") (\SFTP.MARK.ERROR OUTS C) (.EOC. OUTS) NIL))))))(\SFTP.PLIST.FROM.FILE  [LAMBDA (FILE NEW DESIREDPROPS FILEOPENP GENERATOR)    (* ; "Edited 17-Sep-90 11:50 by jds")    (* ;; "Generates a PLIST from FILE.  NEW is true if file is being written anew DESIREDPROPS may restrict what we send")    (PROG ([PIECES (UNPACKFILENAME.STRING (COND                                             ((type? STREAM FILE)                                              (FULLNAME FILE))                                             (T FILE]           INFOFN INFOHANDLE HOST DIR NAME EXT VERSION AUTHOR TYPE PLIST)          (COND             (GENERATOR (SETQ INFOFN (FUNCTION \GENERATEFILEINFO))                    (SETQ INFOHANDLE GENERATOR))             (T (SETQ INFOFN (FUNCTION GETFILEINFO))                (SETQ INFOHANDLE FILE)))          (for TAIL on PIECES by (CDDR TAIL)             do (SELECTQ (CAR TAIL)                        (HOST [COND                                 ((STRING-EQUAL (CADR TAIL)                                         FTPSERVER.DEFAULT.HOST)                                  (RPLACA (CDR TAIL)))                                 (T (SETQ HOST (CADR TAIL])                        (DIRECTORY (SETQ DIR (CADR TAIL)))                        (NAME (SETQ NAME (CADR TAIL)))                        (EXTENSION (SETQ EXT (CADR TAIL)))                        (VERSION (SETQ VERSION (CADR TAIL)))                        NIL))          [SETQ PLIST (NCONC (.IFDESIRED. SERVER-FILENAME (PACKFILENAME.STRING PIECES))                             (.IFDESIRED. NAME-BODY (COND                                                       ((AND EXT (> (NCHARS EXT)                                                                    0))                                                        (CONCAT NAME "." EXT))                                                       (T NAME)))                             (.IFDESIRED. VERSION VERSION)                             (.IFDESIRED. END-OF-LINE-CONVENTION (OR (CL:FUNCALL INFOFN INFOHANDLE                                                                            'EOL)                                                                     'CR))                             (AND DIR (.IFDESIRED. DIRECTORY DIR))                             (AND HOST (.IFDESIRED. DEVICE HOST]          [COND             ((NOT NEW)              (SETQ PLIST (NCONC PLIST [.IFDESIRED. TYPE (SETQ TYPE (OR (CL:FUNCALL INFOFN INFOHANDLE                                                                               'TYPE)                                                                        (\GETFILETYPE FILE                                                                                FILEOPENP]                                 (AND (EQ TYPE 'BINARY)                                      (LIST (LIST 'BYTE-SIZE 8)))                                 (.IFDESIRED. CREATION-DATE (CL:FUNCALL INFOFN INFOHANDLE                                                                   'CREATIONDATE))                                 (.IFDESIRED. WRITE-DATE (CL:FUNCALL INFOFN INFOHANDLE 'WRITEDATE))                                 (.IFDESIRED. READ-DATE (CL:FUNCALL INFOFN INFOHANDLE 'READDATE))                                 (.IFDESIRED. SIZE (CL:FUNCALL INFOFN INFOHANDLE 'LENGTH))                                 (.IFDESIRED. AUTHOR (CL:FUNCALL INFOFN INFOHANDLE 'AUTHOR]          (RETURN PLIST])(\SFTP.SENDPLIST(LAMBDA (PLIST OUTS) (* bvm%: "20-AUG-83 00:07") (FTPPUTMARK OUTS (MARK# HERE-IS-PLIST)) (\FTP.PRINTPLIST OUTS PLIST) (.EOC. OUTS)))(\SFTP.PROTOCOL.ERROR(LAMBDA (INS OUTS) (* bvm%: "19-AUG-83 18:14") (FTPPUTMARK OUTS (MARK# NO)) (FTPPUTCODE OUTS \NO.PROTOCOL.ERROR) (PRIN3 "Protocol Error - Aborting connection" OUTS) (CLOSEBSPSTREAM INS 0) NIL))(\SFTP.MARK.ERROR(LAMBDA (OUTS CONDITION) (* ; "Edited 30-Nov-87 16:08 by bvm:") (* ;; "Put out a NO mark followed by appropriate error code and message for CONDITION.  Caller supplies EOC") (FTPPUTMARK OUTS (MARK# NO)) (FTPPUTCODE OUTS (if CONDITION then (CL:TYPECASE CONDITION (XCL:INVALID-PATHNAME (* ; "Something wrong with name itself.  Pick a random name error subcode") (CAR \NO.ILLEGAL.NAME.ERRORS)) (XCL:PATHNAME-ERROR (* ; "All other path errors punt to File Not Found code.") \NO.FILE.NOT.FOUND) (XCL:FS-PROTECTION-VIOLATION \NO.FILE.PROTECTED) (XCL:FILE-WONT-OPEN \NO.FILE.BUSY) (XCL:DEVICE-ERROR \NO.DISK.ERROR) (XCL:FS-RESOURCES-EXCEEDED \NO.STORAGE.FULL) (T (* ; "What's a catch-all error?  Try the transient non-specific error") (CAR \NO.UNSPECIFIED.ERRORS))) else (* ; "Default is file not found") \NO.FILE.NOT.FOUND)) (PRIN3 (OR CONDITION "File not found") OUTS)))(\SFTP.READPLIST(LAMBDA (INS OUTS) (* ; "Edited 18-Nov-87 15:24 by bvm:") (* ;; "Read plist from user, return NIL, aborting connection, on error") (LET ((PLIST (NLSETQ (READPLIST INS)))) (COND ((NULL PLIST) (\SFTP.PROTOCOL.ERROR INS OUTS)) (T (for PAIR in (CAR PLIST) do (SELECTQ (CAR PAIR) ((USER-PASSWORD CONNECT-PASSWORD) (* ; "Turn passwords into internal form.  Maybe we could check them here, too.") (RPLACA (CDR PAIR) (\ENCRYPT.PWD (CADR PAIR)))) NIL)) (COND (FTPDEBUGFLG (PRIN2 (CAR PLIST) FTPDEBUGLOG))) (CAR PLIST))))))(\SFTP.DESIRED.PROPS(LAMBDA (PLIST) (* ; "Edited 19-Nov-87 12:28 by bvm:") (* ;; "Return the property values from all DESIRED-PROPERTY elements of PLIST") (for PAIR in PLIST when (EQ (CAR PAIR) (QUOTE DESIRED-PROPERTY)) collect (MKATOM (CADR PAIR)))))(\SFTP.TIMEOUTFN(LAMBDA (STREAM) (* bvm%: "20-AUG-83 17:45") (COND ((BSPOPENP STREAM (QUOTE INPUT)) (replace IOTIMEOUTFN of (fetch BSPSOC of STREAM) with NIL) (CLOSEBSPSTREAM STREAM)))))(\SFTP.ERRORHANDLER(LAMBDA (INSTREAM ERRCODE) (* bvm%: "20-AUG-83 00:31") (SELECTQ ERRCODE (MARK.ENCOUNTERED (COND ((fetch FTPOPENP of INSTREAM) (STREAMOP (QUOTE ENDOFSTREAMOP) INSTREAM INSTREAM)) (T -1))) (ERROR!))))(\SFTP.WHENCLOSED(LAMBDA (STREAM) (* ; "Edited 19-Nov-87 17:34 by bvm:") (AND (FIND.PROCESS (QUOTE FTPSERVER)) (PROCESS.EVAL (QUOTE FTPSERVER) (QUOTE (PROGN (AND FTPDEBUGFLG (printout FTPDEBUGLOG T "Connection closed" T)) (ERROR!))))))))(RPAQQ \SFTP.VERSION "17-Sep-90")(RPAQ? FTPSERVER.DEFAULT.HOST 'DSK)(RPAQ? FTPSERVER.DEFAULT.PROPS '(TYPE CREATIONDATE WRITEDATE READDATE LENGTH AUTHOR))(DECLARE%: DONTCOPY (DECLARE%: EVAL@COMPILE (PUTPROPS .IFDESIRED. MACRO [(PROP . LISTFORM)                                     (AND (OR (NULL DESIREDPROPS)                                              (FMEMB 'PROP DESIREDPROPS))                                          (PROG ((PROPVAL . LISTFORM))                                                (RETURN (AND PROPVAL (LIST (LIST 'PROP PROPVAL]))(FILESLOAD (LOADCOMP)       DPUPFTP BSP))(PUTPROPS FTPSERVER COPYRIGHT ("Venue & Xerox Corporation" 1983 1984 1986 1987 1989 1990))(DECLARE%: DONTCOPY  (FILEMAP (NIL (1249 11595 (\FTPSERVER.TOP 1259 . 2741) (FTPSERVER 2743 . 2946) (\GETFILETYPE 2948 . 3281) (\SFTP.COMMANDLOOP 3283 . 4327) (\SFTP.RETRIEVE 4329 . 5637) (\SFTP.ENUMERATE 5639 . 7030) (\SFTP.STORE 7032 . 8864) (\SFTP.UNDO.STORE 8866 . 9950) (\SFTP.DELETE 9952 . 11340) (\SFTP.VERSION 11342 . 11593)) (11596 20056 (\SFTP.OPENFILE.FROM.PLIST 11606 . 13887) (\SFTP.PLIST.FROM.FILE 13889 . 17327) (\SFTP.SENDPLIST 17329 . 17483) (\SFTP.PROTOCOL.ERROR 17485 . 17705) (\SFTP.MARK.ERROR 17707 . 18595) (\SFTP.READPLIST 18597 . 19132) (\SFTP.DESIRED.PROPS 19134 . 19391) (\SFTP.TIMEOUTFN 19393 . 19585) (\SFTP.ERRORHANDLER 19587 . 19810) (\SFTP.WHENCLOSED 19812 . 20054)))))STOP