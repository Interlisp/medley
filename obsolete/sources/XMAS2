(DEFINE-FILE-INFO READTABLE "INTERLISP" PACKAGE "INTERLISP")(FILECREATED "22-Oct-91 17:03:36" |{PELE:MV:ENVOS}<LISPCORE>SOURCES>XMAS2.;1| 62023        changes to%:  (FNS XSHOWWFRAME)      previous date%: "22-Oct-91 16:41:50" {DSK}<users>nilsson>xmas-split>xmas2.;5)(* ; "Copyright (c) 1991 by Fuji Xerox Co., Ltd.  All rights reserved.")(PRETTYCOMPRINT XMAS2COMS)(RPAQQ XMAS2COMS       ((RECORDS WINDOWOPS)        (FNS CREATESCREEN DSPCREATE CREATEW.NEW OPENW.NEW CLOSEW.NEW MOVEW.NEW SHAPEW.NEW SHRINKW.NEW             EXPANDW.NEW)        (FNS CREATEW.XDISPLAY OPENW.XDISPLAY CLOSEW.XDISPLAY MOVEW.XDISPLAY SHAPEW.XDISPLAY              SHRINKW.XDISPLAY EXPANDW.XDISPLAY TOTOPW.XDISPLAY BURYW.XDISPLAY)        (FNS \XOPENW1 XSHOWWFRAME ADVISEXWDS XMOVEORRESIZED.WINDOW \XMOUSELEFT \XMOUSEMOVED              \FINDWINDOW \XMOUSEENTERED XMOVEW \XCLOSEW1 XSHAPEW \XSHAPEW1 XCREATEWFROMPIXMAP              XCLOSEMAINWINDOW \XINTERNALTOTOPW)        (FNS ISXWINDOW?)        (FNS INIT.XMAS2)        (VARS XMAS2COMS)))(DECLARE%: EVAL@COMPILE(DATATYPE WINDOWOPS (CREATEW OPENW CLOSEW MOVEW SHAPEW SHRINKW EXPANDW)                        CREATEW _ (FUNCTION NILL)                        OPENW _ (FUNCTION NILL)                        CLOSEW _ (FUNCTION NILL)                        MOVEW _ (FUNCTION NILL)                        SHAPEW _ (FUNCTION NILL)                        SHRINKW _ (FUNCTION NILL)                        EXPANDW _ (FUNCTION NILL)))(/DECLAREDATATYPE 'WINDOWOPS '(POINTER POINTER POINTER POINTER POINTER POINTER POINTER)       '((WINDOWOPS 0 POINTER)         (WINDOWOPS 2 POINTER)         (WINDOWOPS 4 POINTER)         (WINDOWOPS 6 POINTER)         (WINDOWOPS 8 POINTER)         (WINDOWOPS 10 POINTER)         (WINDOWOPS 12 POINTER))       '14)(DEFINEQ(CREATESCREEN  [LAMBDA (DESTINATION)                                (* ; "Edited  5-Sep-91 15:20 by matsuda")(* ;;; "destination is the framebuffer for the screen you want created.e.g.  (SCREENBITMAP)")    (PROG (TITLEDS SCREEN)          (COND             ((OR (NULL DESTINATION)                  (TYPE? BITMAP DESTINATION))              (SETQ TITLEDS (DSPCREATE DESTINATION))     (* ; "Create TITLEDS. ")              (DSPOPERATION 'INVERT TITLEDS)              (DSPFONT WINDOWTITLEFONT TITLEDS)              (DSPRIGHTMARGIN MAX.SMALLP TITLEDS)            (* ;                                                        "Set right margin so title doesn't autoCR. ")              (* ;; "now create SCREEN. ")              (SETQ SCREEN (create SCREEN                                  SCONOFF _ 'OFF                                  SCDESTINATION _ DESTINATION                                  SCWIDTH _ (BITMAPWIDTH DESTINATION)                                  SCHEIGHT _ (BITMAPHEIGHT DESTINATION)                                  SCTOPW _ NIL                                  SCTITLEDS _ TITLEDS))              (RETURN SCREEN))             ((XLIB:DRAWABLE-P DESTINATION)              (SETQ TITLEDS (XDSPCREATE DESTINATION))        (* ; "Create TITLEDS. ")              (DSPOPERATION 'INVERT TITLEDS)              (DSPFONT XWINDOWTITLEFONT TITLEDS)              (DSPRIGHTMARGIN MAX.SMALLP TITLEDS)            (* ;                                                        "Set right margin so title doesn't autoCR. ")              (* ;; "now create SCREEN. ")              (SETQ SCREEN (create SCREEN                                  SCONOFF _ 'OFF                                  SCDESTINATION _ DESTINATION                                  SCWIDTH _ (BITMAPWIDTH DESTINATION)                                  SCHEIGHT _ (BITMAPHEIGHT DESTINATION)                                  SCTOPW _ NIL                                  SCTITLEDS _ TITLEDS))              (RETURN SCREEN])(DSPCREATE  [LAMBDA (DESTINATION)                                (* ; "Edited  5-Sep-91 15:34 by matsuda")    (* ;; "Creates a stream-of-type-display on the DESTINATION bitmap or display device")    (LET (DSTRM)         (OR DESTINATION (SETQ DESTINATION ScreenBitMap))    (* ; "")                                                             (* ;                                      "(COND ((NULL DESTINATION)) (T (\DTEST DESTINATION 'BITMAP)))")         (COND            ((type? BITMAP DESTINATION)             (SETQ DSTRM (create STREAM                                USERCLOSEABLE _ NIL                                OUTCHARFN _ (FUNCTION \DSPPRINTCHAR)                                IMAGEDATA _ (create \DISPLAYDATA)                                IMAGEOPS _ \DISPLAYIMAGEOPS                                DEVICE _ DisplayFDEV                                ACCESS _ 'OUTPUT))           (* ;                                         "initial x and y positions are 0 when the data is created.")             (DSPFONT DEFAULTFONT DSTRM)                     (* ;                     "dspfont can win since the (default) display imageops are filled in the stream")             (DSPDESTINATION DESTINATION DSTRM)              (* ;                          "dspdestination calls \SFFixFont, which presumes there is a font present.")             (DSPFONT DEFAULTFONT DSTRM)             (* ;; "the reference to SCREENWIDTH here is for historic reasons: until 3-feb-86 the default right margin was always SCREENWIDTH.  It should be the width of the destination and for any destination larger than the screen this is a serious bug and was fixed.  The MAX of the right value and SCREENWIDTH was left in because existing code might be assumine a large right margin for small bitmaps and auto-CR in without it.  rrb")             (DSPRIGHTMARGIN (MAX SCREENWIDTH (fetch (BITMAP BITMAPWIDTH) of DESTINATION))                    DSTRM)             (DSPSOURCETYPE 'INPUT DSTRM)             (DSPOPERATION 'REPLACE DSTRM)                   (* ;             "called to cause the updating of the bitblt table from the fields initialized earlier.")             )            ((XLIB:DRAWABLE-P DESTINATION)             (SETQ DSTRM (create STREAM                                USERCLOSEABLE _ NIL                                OUTCHARFN _ (FUNCTION \XDSPPRINTCHAR)                                IMAGEDATA _ (create \DISPLAYDATA)                                IMAGEOPS _ \XDISPLAYIMAGEOPS                                DEVICE _ XDisplayFDEV                                ACCESS _ 'OUTPUT))             (replace (\DISPLAYDATA DDPILOTBBT) of (fetch (STREAM IMAGEDATA) of                                                                                         DSTRM)                with (SETQ GC (XLIB:CREATE-GCONTEXT :DRAWABLE DESTINATION)))             (CL:SETF (XLIB:GCONTEXT-FOREGROUND GC)                    XLIB::*BLACK*)                           (* ; "temp foreground color ")             (CL:SETF (XLIB:GCONTEXT-BACKGROUND GC)                    XLIB::*WHITE*)                           (* ; "temp background color")             (DSPFONT XDEFAULTFONT DSTRM)             (DSPDESTINATION DESTINATION DSTRM)             (DSPRIGHTMARGIN (MAX SCREENWIDTH (XLIB:DRAWABLE-WIDTH DESTINATION))                    DSTRM)             (DSPSOURCETYPE 'INPUT DSTRM)             (DSPOPERATION 'REPLACE DSTRM)))         DSTRM])(CREATEW.NEW  [LAMBDA (REGION TITLE BORDERSIZE NOOPENFLG)            (* ; "Edited 20-Oct-91 10:53 by jn")    (* ;; "creates and returns a window.")    (PROG (SCREEN)          (COND             ((AND (BOUNDP '\SCREEN)                   \SCREEN)              (SETQ SCREEN \SCREEN))             ((type? SCREENREGION REGION)              (SETQ SCREEN (fetch (SCREENREGION SCREEN) of REGION)))             (T (SETQ SCREEN \MAINSCREEN)                    (* ; "Default screen is \MAINSCREEN.")                ))          (RETURN (APPLY* (fetch (WINDOWOPS CREATEW) of (fetch (SCREEN SCDATA)                                                                   of SCREEN))                         REGION TITLE BORDERSIZE NOOPENFLG])(OPENW.NEW  [LAMBDA (WINDOW)                                     (* ; "Edited  9-Sep-91 18:05 by matsuda")    (SETQ WINDOW (\INSUREWINDOW WINDOW))    (APPLY* (fetch (WINDOWOPS OPENW) of (fetch (SCREEN SCDATA) of (fetch                                                                                   (WINDOW SCREEN)                                                                                     of WINDOW)))           WINDOW])(CLOSEW.NEW  [LAMBDA (WINDOW)                                     (* ; "Edited  9-Sep-91 18:01 by matsuda")    (SETQ WINDOW (\INSUREWINDOW WINDOW))    (APPLY* (fetch (WINDOWOPS CLOSEW) of (fetch (SCREEN SCDATA)                                                    of (fetch (WINDOW SCREEN) of WINDOW))                   )           WINDOW])(MOVEW.NEW  [LAMBDA (WINDOW POSorX Y)                            (* ; "Edited 10-Sep-91 15:55 by matsuda")    (SETQ WINDOW (\INSUREWINDOW WINDOW))    (APPLY* (fetch (WINDOWOPS MOVEW) of (fetch (SCREEN SCDATA) of (fetch                                                                                   (WINDOW SCREEN)                                                                                     of WINDOW)))           WINDOW POSorX Y])(SHAPEW.NEW  [LAMBDA (WINDOW NEWREGION)                           (* ; "Edited 13-Sep-91 14:09 by matsuda")    (SETQ WINDOW (\INSUREWINDOW WINDOW))    (APPLY* (fetch (WINDOWOPS SHAPEW) of (fetch (SCREEN SCDATA)                                                    of (fetch (WINDOW SCREEN) of WINDOW))                   )           WINDOW NEWREGION])(SHRINKW.NEW  [LAMBDA (WINDOW TOWHAT ICONPOSITION EXPANDFN)        (* ; "Edited 13-Sep-91 16:39 by matsuda")    (SETQ WINDOW (\INSUREWINDOW WINDOW))    (APPLY* (fetch (WINDOWOPS SHRINKW) of (fetch (SCREEN SCDATA)                                                     of (fetch (WINDOW SCREEN) of WINDOW)                                                         ))           WINDOW TOWHAT ICONPOSITION EXPANDFN])(EXPANDW.NEW  [LAMBDA (ICONW)                                      (* ; "Edited 13-Sep-91 16:07 by matsuda")    (SETQ ICONW (\INSUREWINDOW ICONW))    (APPLY* (fetch (WINDOWOPS EXPANDW) of (fetch (SCREEN SCDATA)                                                     of (fetch (WINDOW SCREEN) of ICONW))                   )           ICONW]))(DEFINEQ(CREATEW.XDISPLAY  [LAMBDA (REGION TITLE BORDERSIZE NOOPENFLG)          (* ; "Edited  9-Sep-91 17:03 by matsuda")    (* ;; "creates and returns a window.")    (PROG (SCREEN REG DSP DISPLAYDATA TITLEHEIGHT WINDOW WBORDER)          (SETQ WBORDER (COND                           ((NUMBERP BORDERSIZE)                            (ABS BORDERSIZE))                           ((NUMBERP WBorder)                            (ABS WBorder))                           (T 2)))          (COND             ((type? REGION REGION)              (SETQ SCREEN \XSCREEN)                         (* ;                                                    "Protect against user smashing REGION later on.")              (SETQ REG (COPY REGION)))             [(type? SCREENREGION REGION)              (SETQ SCREEN (fetch (SCREENREGION SCREEN) of REGION))              (SETQ REG (COPY (fetch (SCREENREGION REGION) of REGION]             (T (ERROR "Not a region" REG)))          [COND             ((NULL DSP)                                     (* ;                                           "Don't have a DSP yet.  User passed some kind of region.")              (SETQ DSP (DSPCREATE (fetch (SCREEN SCDESTINATION) of SCREEN)))              (SETQ DISPLAYDATA (fetch (STREAM IMAGEDATA) of DSP]          (COND             ((NOT (IGREATERP (IMIN (fetch (REGION WIDTH) of REG)                                    (fetch (REGION HEIGHT) of REG))                          (UNFOLD WBORDER 2)))              (ERROR "Region too small to use as a window" REG)))          (SETQ WINDOW           (create WINDOW                  DSP _ DSP                  REG _ REG                  SAVE _ NIL                  WTITLE _ TITLE                  WBORDER _ WBORDER                  NEXTW _ 'CLOSED                  SCREEN _ SCREEN                  BUTTONEVENTFN _ NIL))          (replace (\DISPLAYDATA XWINDOWHINT) of DISPLAYDATA with WINDOW)          (XSHOWWFRAME WINDOW)          (DSPDESTINATION (fetch (WINDOW SAVE) of WINDOW)                 DSP)          (ADVISEXWDS WINDOW)                            (* ;                                        "make the display stream and window agree about dimensions.")          (MOVETOUPPERLEFT WINDOW)          (COND             ((NOT NOOPENFLG)              (XOPENW WINDOW)))          (RETURN WINDOW])(OPENW.XDISPLAY  [LAMBDA (WINDOW)                                     (* ; "Edited 10-Sep-91 15:59 by matsuda")    (SETQ WINDOW (\INSUREWINDOW WINDOW))    (COND       ((OPENWP WINDOW)        NIL)       (T (PROG [(USEROPENFN (WINDOWPROP WINDOW 'OPENFN]                (COND                   ((\USERFNISDON'T USEROPENFN)                    NIL)                   (T (\XOPENW1 WINDOW)                      (DOUSERFNS USEROPENFN WINDOW)                      (RETURN WINDOW])(CLOSEW.XDISPLAY  [LAMBDA (WINDOW)                                     (* ; "Edited  9-Sep-91 17:44 by matsuda")    (SETQ WINDOW (\INSUREWINDOW WINDOW))    (COND       ((OPENWP WINDOW)        (COND           ((\OKTOCLOSEW WINDOW)            (AND (OPENWP WINDOW)                 (\XCLOSEW1 WINDOW))            T])(MOVEW.XDISPLAY  [LAMBDA (WINDOW POSorX Y)                            (* ; "Edited 10-Sep-91 16:04 by matsuda")    (SETQ WINDOW (\INSUREWINDOW WINDOW))    (PROG ((OLDREGION (fetch (WINDOW REG) of WINDOW))           (USERMOVEFN (fetch (WINDOW MOVEFN) of WINDOW))           POS NEWREGION OLDLEFT OLDBOTTOM OLDWIDTH OLDHEIGHT XBASEW)          (COND             ([COND                 ((LISTP USERMOVEFN)                  (FMEMB 'DON'T USERMOVEFN))                 (T (EQ USERMOVEFN 'DON'T]              (PROMPTPRINT "This window cannot be moved.")              (RETURN)))          (SETQ OLDLEFT (fetch (REGION LEFT) of OLDREGION))          (SETQ OLDBOTTOM (ffetch (REGION BOTTOM) of OLDREGION))          (SETQ OLDWIDTH (ffetch (REGION WIDTH) of OLDREGION))          (SETQ OLDHEIGHT (ffetch (REGION HEIGHT) of OLDREGION))          (COND             [(AND POSorX (SETQ POS (COND                                       ((POSITIONP POSorX)                                        POSorX)                                       [(NUMBERP POSorX)                                        (COND                                           ((NUMBERP Y)                                            (create POSITION                                                   XCOORD _ POSorX                                                   YCOORD _ Y))                                           (T (\ILLEGAL.ARG Y]                                       ((REGIONP POSorX)                                        (create POSITION                                               XCOORD _ (fetch (REGION LEFT) of POSorX)                                               YCOORD _ (fetch (REGION BOTTOM) of POSorX)))                                       (T (\ILLEGAL.ARG POSorX]             (T (\ILLEGAL.ARG POSorX)))          [COND             ((AND (LISTP USERMOVEFN)                   (NOT (FMEMB (CAR USERMOVEFN)                               LAMBDASPLST)))              (AND (EQ [for MFN in USERMOVEFN do (SETQ NEWREGION (APPLY* MFN WINDOW POS))                                                            (COND                                                               ((EQ NEWREGION 'DON'T)                                                                (RETURN 'DON'T))                                                               ((POSITIONP NEWREGION)                                                                (SETQ POS NEWREGION]                       'DON'T)                   (RETURN)))             (USERMOVEFN (SETQ NEWREGION (APPLY* USERMOVEFN WINDOW POS))                    (COND                       ((EQ NEWREGION 'DON'T)                        (RETURN))                       ((POSITIONP NEWREGION)                        (SETQ POS NEWREGION]          (COND             ((OR (NOT (EQ (fetch (POSITION XCOORD) of POS)                           OLDLEFT))                  (NOT (EQ (fetch (POSITION YCOORD) of POS)                           OLDBOTTOM)))              (SETQ NEWREGION (create REGION                                     LEFT _ (ffetch (POSITION XCOORD) of POS)                                     BOTTOM _ (ffetch (POSITION YCOORD) of POS)                                     WIDTH _ OLDWIDTH                                     HEIGHT _ OLDHEIGHT))              (UNINTERRUPTABLY                  [COND                     ((SETQ XBASEW (WINDOWPROP WINDOW 'XBASEW))                      (XLIB:WITH-STATE (XBASEW)                             (CL:SETF (XLIB:DRAWABLE-Y XBASEW)                                    (IDIFFERENCE (fetch (SCREEN SCHEIGHT) of \XSCREEN)                                           (fetch (REGION TOP) of NEWREGION)))                             (CL:SETF (XLIB:DRAWABLE-X XBASEW)                                    (fetch (REGION LEFT) of NEWREGION]                  (replace (WINDOW REG) of WINDOW with NEWREGION)                  (ADVISEXWDS WINDOW OLDREGION T))              (DOUSERFNS (WINDOWPROP WINDOW 'AFTERMOVEFN)                     WINDOW)))          (RETURN POS])(SHAPEW.XDISPLAY  [LAMBDA (WINDOW NEWREGION)                           (* ; "Edited 13-Sep-91 14:11 by matsuda")    (SETQ WINDOW (\INSUREWINDOW WINDOW))    (PROG ((OLDSIZE (WINDOWPROP WINDOW 'REGION))           NEWSIZE)          (COND             ((\USERFNISDON'T (fetch (WINDOW RESHAPEFN) of WINDOW))                                                             (* ;                                                            "don't allow the window to be reshaped.")              (PROMPTPRINT "This window cannot be reshaped.")              (RETURN NIL)))          (SETQ NEWSIZE (MINIMUMWINDOWSIZE WINDOW))          [SETQ NEWSIZE (COND                           (NEWREGION                        (* ;                                  "An explicit new region was specified; make sure it's big enough.")                                  (COND                                     [(OR (LESSP (fetch (REGION WIDTH) of NEWREGION)                                                 (CAR NEWSIZE))                                          (LESSP (fetch (REGION HEIGHT) of NEWREGION)                                                 (CDR NEWSIZE)))                                                             (* ;          "given a region that is too small, so expand the width and height to at least the minima.")                                      (CREATEREGION (fetch (REGION LEFT) of NEWREGION)                                             (fetch (REGION BOTTOM) of NEWREGION)                                             (IMAX (CAR NEWSIZE)                                                   (fetch (REGION WIDTH) of NEWREGION))                                             (IMAX (CDR NEWSIZE)                                                   (fetch (REGION HEIGHT) of NEWREGION]                                     (T NEWREGION)))                           (T (ERROR "NEWREGION must be specified."]          (RETURN (if (EQUAL NEWSIZE OLDSIZE)                      then                             (* ;; "if same size and place as before, do nothing")                            NIL                    elseif (AND (EQ (fetch (REGION WIDTH) of NEWSIZE)                                        (fetch (REGION WIDTH) of OLDSIZE))                                    (EQ (fetch (REGION HEIGHT) of NEWSIZE)                                        (fetch (REGION HEIGHT) of OLDSIZE)))                      then                             (* ;; "if same width and height, then optimize to a move")                            (MOVEW.XDISPLAY WINDOW (fetch (REGION LEFT) of NEWSIZE)                                   (fetch (REGION BOTTOM) of NEWSIZE))                    else                           (* ;; "do the shape, checking for a doshapefn")                          (APPLY* (OR (WINDOWPROP WINDOW 'DOSHAPEFN)                                      '\XSHAPEW1)                                 WINDOW                                 (COPYALL NEWSIZE])(SHRINKW.XDISPLAY  [LAMBDA (WINDOW TOWHAT ICONPOSITION EXPANDFN)        (* ; "Edited 11-Sep-91 15:59 by matsuda")    (SETQ WINDOW (\INSUREWINDOW WINDOW))    (COND       ((NOT (OPENWP WINDOW))        NIL)       ((WINDOWPROP WINDOW 'ICONFOR)        NIL)       ((EQ (DOUSERFNS (WINDOWPROP WINDOW 'SHRINKFN)                   WINDOW T)            'DON'T)        NIL)       (T (LET (TITLE ICONW FN ICONISBITMAP ICONISPIXMAP)               [SETQ ICONW (COND                              ((type? BITMAP TOWHAT)                               [SETQ ICONISPIXMAP (PIXMAPFROMBITMAP TOWHAT                                                         (BITSPERPIXEL (fetch (SCREEN                                                                                         SCDESTINATION                                                                                         )                                                                          of (fetch                                                                                  (WINDOW SCREEN)                                                                                    of WINDOW]                               [WINDOWPROP WINDOW 'ICON (SETQ TOWHAT (XCREATEWFROMPIXMAP                                                                      ICONISPIXMAP                                                                      (fetch (WINDOW SCREEN)                                                                         of WINDOW]                               (XLIB:FREE-PIXMAP ICONISPIXMAP)                               TOWHAT)                              ((XLIB:DRAWABLE-P TOWHAT)                               [WINDOWPROP WINDOW 'ICON (SETQ TOWHAT (XCREATEWFROMPIXMAP                                                                      TOWHAT                                                                      (fetch (WINDOW SCREEN)                                                                         of WINDOW]                               TOWHAT)                              ((ISXWINDOW? TOWHAT)                               (WINDOWPROP WINDOW 'ICON TOWHAT)                               TOWHAT)                              ((STRINGP TOWHAT)                               [WINDOWPROP WINDOW 'ICON (SETQ TOWHAT (\DTEST (APPLY* DEFAULTICONFN                                                                                     WINDOW TOWHAT)                                                                            'WINDOW]                               TOWHAT)                              (T [SETQ TOWHAT (COND                                                 ((SETQ FN (WINDOWPROP WINDOW 'ICONFN))                                                             (* ;                                               "User fn to create an icon.  Can return cached value")                                                  (APPLY* FN WINDOW (WINDOWPROP WINDOW 'ICONWINDOW)                                                         (POSITIONP ICONPOSITION)))                                                 (T (WINDOWPROP WINDOW 'ICON]                                 (COND                                    ((ISXWINDOW? TOWHAT)                                     TOWHAT)                                    ((type? BITMAP TOWHAT)                                     [SETQ ICONISPIXMAP (PIXMAPFROMBITMAP                                                         TOWHAT                                                         (BITSPERPIXEL (fetch (SCREEN                                                                                         SCDESTINATION                                                                                         )                                                                          of (fetch                                                                                  (WINDOW SCREEN)                                                                                    of WINDOW]                                     (XCREATEWFROMPIXMAP ICONISPIXMAP (fetch (WINDOW SCREEN)                                                                             of WINDOW))                                     (XLIB:FREE-PIXMAP ICONISPIXMAP))                                    ((XLIB:DRAWABLE-P TOWHAT)                                     (XCREATEWFROMPIXMAP TOWHAT (fetch (WINDOW SCREEN)                                                                       of WINDOW)))                                    (T (\DTEST (APPLY* XDEFAULTICONFN WINDOW TOWHAT)                                              'WINDOW]               (WINDOWPROP WINDOW 'ICONWINDOW ICONW)               (WINDOWPROP ICONW 'ICONFOR WINDOW)               (WINDOWADDFNPROP ICONW 'CLOSEFN (FUNCTION XCLOSEMAINWINDOW))                                                             (* ; "(COND ((EQ (WINDOWPROP ICONW 'BUTTONEVENTFN) 'TOTOPW) (WINDOWPROP ICONW 'BUTTONEVENTFN (FUNCTION ICONBUTTONEVENTFN))))")               (WINDOWADDFNPROP WINDOW 'OPENFN (FUNCTION CLOSEICONWINDOW))               (WINDOWADDFNPROP ICONW 'MOVEFN (FUNCTION \NOTENEWICONPOSITION))               (AND EXPANDFN (WINDOWADDFNPROP WINDOW 'EXPANDFN EXPANDFN))                                                             (* ;                                      "(WINDOWPROP ICONW 'DOWINDOWCOMFN (FUNCTION DOICONWINDOWCOM))")               [COND                  [(AND (NEQ ICONPOSITION 'SAME)                        (OR ICONISBITMAP (POSITIONP ICONPOSITION)))                   (MOVEW ICONW (COND                                   ((POSITIONP ICONPOSITION)                                    ICONPOSITION)                                   ((PROG1 [POSITIONP (SETQ ICONPOSITION (WINDOWPROP WINDOW                                                                                'ICONPOSITION]                                                             (* ;                                                            "leave it in its current location.")                                           ))                                   (T (SETQ ICONPOSITION (ICONPOSITION.FROM.WINDOW                                                          WINDOW                                                          (WINDOWPROP ICONW 'REGION]                  (T (SETQ ICONPOSITION (LET [(REG (WINDOWPROP ICONW 'REGION]                                             (create POSITION                                                    XCOORD _ (fetch (REGION LEFT) of REG)                                                    YCOORD _ (fetch (REGION BOTTOM) of REG]               (WINDOWPROP WINDOW 'ICONPOSITION ICONPOSITION)(* ; "(TOTOPW WINDOW T)")               (\XCLOSEW1 WINDOW)               (OPENW ICONW)               ICONW])(EXPANDW.XDISPLAY  [LAMBDA (ICONW)                                      (* ; "Edited 11-Sep-91 16:58 by matsuda")    (PROG ((IW ICONW)           MAINWINDOW USEREXPANDFN EXPANDREGION)          [COND             [(SETQ MAINWINDOW (WINDOWPROP IW 'ICONFOR]             ((SETQ IW (WINDOWPROP IW 'ICONWINDOW))              (COND                 ((OPENWP (SETQ MAINWINDOW ICONW))                  (RETURN ICONW]          (COND             ([AND MAINWINDOW (NULL (\USERFNISDON'T (SETQ USEREXPANDFN (WINDOWPROP MAINWINDOW                                                                              'EXPANDFN]              (if (AND (WINDOWPROP MAINWINDOW 'EXPANDREGIONFN)                           (SETQ EXPANDREGION (APPLY* (WINDOWPROP MAINWINDOW 'EXPANDREGIONFN)                                                     MAINWINDOW)))                  then (\XSHAPEW1 MAINWINDOW EXPANDREGION)                else (\XOPENW1 MAINWINDOW))              (\XCLOSEW1 IW)              (WINDOWDELPROP MAINWINDOW 'OPENFN 'CLOSEICONWINDOW)              (WINDOWDELPROP IW 'CLOSEFN 'CLOSEMAINWINDOW)              (DOUSERFNS USEREXPANDFN MAINWINDOW)              (RETURN (WINDOWPROP IW 'ICONFOR NIL])(TOTOPW.XDISPLAY  [LAMBDA (WINDOW NOCALLTOTOPFNFLG)                    (* ; "Edited 13-Sep-91 16:51 by matsuda")    (SETQ WINDOW (\INSUREWINDOW WINDOW))    (COND       ((OPENWP WINDOW)        (OR NOCALLTOTOPFNFLG (DOUSERFNS (WINDOWPROP WINDOW 'TOTOPFN)                                    WINDOW))        (\XINTERNALTOTOPW WINDOW))       ((OPENW WINDOW)        (OR NOCALLTOTOPFNFLG (DOUSERFNS (WINDOWPROP WINDOW 'TOTOPFN)                                    WINDOW)))       (T                                                    (* ;                                                "window won't open probably because of DON'T OPENFN")          (ERROR "Window won't open; Can't be bring to top." WINDOW)))    WINDOW])(BURYW.XDISPLAY  [LAMBDA (WINDOW)                                     (* ; "Edited 13-Sep-91 18:02 by matsuda")    (SETQ WINDOW (\INSUREWINDOW WINDOW))    (PROG [(BASEW (WINDOWPROP WINDOW 'XBASEW]          (AND BASEW (XLIB::SET-WINDOW-PRIORITY :BELOW BASEW]))(DEFINEQ(\XOPENW1  [LAMBDA (WINDOW)                                     (* ; "Edited  6-Sep-91 15:22 by matsuda")    (if (EQ (fetch (WINDOW NEXTW) of WINDOW)                'CLOSED)        then (PROG ((BASEW (WINDOWPROP WINDOW 'XBASEW))                        XWIN REG BORDER XTITLEW TOP (SCREEN (fetch (WINDOW SCREEN) of WINDOW)                                                           )                        DD)                       (if BASEW                           then (XLIB:MAP-WINDOW BASEW)                         else (WINDOWPROP WINDOW 'XBASEW (SETQ BASEW (\XCREATEBASEW WINDOW)))                               [AND (WINDOWPROP WINDOW 'TITLE)                                    (SETQ XTITLEW (WINDOWPROP WINDOW 'XTITLEW]                               (SETQ XWIN (fetch (WINDOW SAVE) of WINDOW))                               (SETQ BORDER (XLIB:DRAWABLE-BORDER-WIDTH XWIN))                               (SETQ TOP 0)                               [COND                                  (XTITLEW (XLIB:REPARENT-WINDOW XTITLEW BASEW 0 0)                                         (SETQ TOP (XLIB:DRAWABLE-HEIGHT XTITLEW]                               (XLIB:REPARENT-WINDOW XWIN BASEW 0 TOP)                               (XLIB:MAP-SUBWINDOWS BASEW)                               (CL:SETF (XLIB:TRANSIENT-FOR BASEW)                                      BASEW)                               (XLIB:MAP-WINDOW BASEW))                       (UNINTERRUPTABLY                           (XLIB:MAP-WINDOW (fetch (WINDOW SAVE) of WINDOW))                           (replace (WINDOW NEXTW) of WINDOW with (fetch (SCREEN                                                                                          SCTOPW)                                                                                 of SCREEN))                           (replace (SCREEN SCTOPW) of SCREEN with WINDOW))])(XSHOWWFRAME  [LAMBDA (WIN)                                          (* ; "Edited 22-Oct-91 17:03 by jn")    (* ;; "Displays the border and title in the save image of a window ")    [PROG ((TITLE (fetch (WINDOW WTITLE) of WIN))           (BORDER (fetch (WINDOW WBORDER) of WIN))           (SAVEIMAGE (fetch (WINDOW SAVE) of WIN))           (SCREEN (fetch (WINDOW SCREEN) of WIN))           (REG (fetch (WINDOW REG) of WIN))           BLACKPART FOOT (TITLE-H 0))                       (* ; "make most of the border black")          (SETQ BLACKPART (IMAX (FOLDHI BORDER 2)                                (IDIFFERENCE BORDER 2)))          (XSHOWWTITLE TITLE SAVEIMAGE BORDER NIL WIN)          [AND TITLE (SETQ TITLE-H (XLIB:DRAWABLE-HEIGHT (WINDOWPROP WIN 'XTITLEW]          (if SAVEIMAGE              then [XLIB:WITH-STATE (SAVEIMAGE)                              (CL:SETF (XLIB:DRAWABLE-Y SAVEIMAGE)                                     TITLE-H)                              (CL:SETF (XLIB:DRAWABLE-X SAVEIMAGE)                                     0)                              (CL:SETF (XLIB:DRAWABLE-WIDTH SAVEIMAGE)                                     (IDIFFERENCE (fetch (REGION WIDTH) of REG)                                            (ITIMES BLACKPART 2)))                              (CL:SETF (XLIB:DRAWABLE-HEIGHT SAVEIMAGE)                                     (IDIFFERENCE (fetch (REGION HEIGHT) of REG)                                            (IPLUS TITLE-H (ITIMES BLACKPART 2]            else (replace SAVE of WIN                        with (SETQ SAVEIMAGE (XLIB:CREATE-WINDOW                                                  :PARENT                                                  (fetch (SCREEN SCDESTINATION) of SCREEN)                                                  :X                                                  (fetch (REGION LEFT) of REG)                                                  :Y                                                  (IDIFFERENCE (fetch (SCREEN SCHEIGHT)                                                                  of SCREEN)                                                         (IDIFFERENCE (fetch (REGION TOP)                                                                         of REG)                                                                (IPLUS TITLE-H BLACKPART)))                                                  :WIDTH                                                  (IDIFFERENCE (fetch (REGION WIDTH) of                                                                                         REG)                                                         (ITIMES BLACKPART 2))                                                  :HEIGHT                                                  (IDIFFERENCE (fetch (REGION HEIGHT)                                                                  of REG)                                                         (IPLUS TITLE-H (ITIMES BLACKPART 2)))                                                  :BORDER-WIDTH BLACKPART :BACKGROUND XLIB::*WHITE*                                                   :BIT-GRAVITY :NORTH-WEST :BACKING-STORE :ALWAYS]    WIN])(ADVISEXWDS  [LAMBDA (WINDOW OLDREG MOVEONLYFLG)    (DECLARE (LOCALVARS . T))                      (* ; "Edited  5-Sep-91 16:23 by matsuda")    (PROG (R D WBORDERSIZE CLIPREG TWICEBORDER PROC OFFSET)          (SETQ R (fetch (WINDOW REG) of WINDOW))          (SETQ D (fetch (WINDOW DSP) of WINDOW))          (SETQ WBORDERSIZE (fetch (WINDOW WBORDER) of WINDOW))          (SETQ TWICEBORDER (UNFOLD WBORDERSIZE 2))          (COND             (OLDREG (OR MOVEONLYFLG (DSPCLIPPINGREGION                                      [create REGION                                             LEFT _ 0                                             BOTTOM _ 0                                             WIDTH _ (IDIFFERENCE (fetch (REGION WIDTH)                                                                     of R)                                                            TWICEBORDER)                                             HEIGHT _ (IPLUS (IDIFFERENCE (fetch (REGION HEIGHT)                                                                             of R)                                                                    TWICEBORDER)                                                             (COND                                                                [(fetch (WINDOW WTITLE)                                                                    of WINDOW)                                                                 (DSPLINEFEED                                                                  NIL                                                                  (fetch (SCREEN SCTITLEDS)                                                                     of (fetch (WINDOW SCREEN                                                                                              )                                                                               of WINDOW]                                                                (T 0]                                      D)))             (T (SETQ OFFSET (IMAX (FOLDHI WBORDERSIZE 2)                                   (IDIFFERENCE WBORDERSIZE 2)))                (DSPXOFFSET OFFSET D)                (DSPYOFFSET OFFSET D)                (DSPCLIPPINGREGION [create REGION                                          LEFT _ 0                                          BOTTOM _ 0                                          WIDTH _ (IDIFFERENCE (fetch (REGION WIDTH) of                                                                                         R)                                                         TWICEBORDER)                                          HEIGHT _ (IPLUS (IDIFFERENCE (fetch (REGION HEIGHT)                                                                          of R)                                                                 TWICEBORDER)                                                          (COND                                                             [(fetch (WINDOW WTITLE) of                                                                                         WINDOW)                                                              (DSPLINEFEED NIL                                                                     (fetch (SCREEN SCTITLEDS)                                                                        of (fetch                                                                                (WINDOW SCREEN)                                                                                  of WINDOW]                                                             (T 0]                       D)))          [COND             ((NULL MOVEONLYFLG)                             (* ;                                          "if the previous right margin was the default, change it.")              (AND (OR (NOT OLDREG)                       (EQ (DSPRIGHTMARGIN NIL D)                           (IDIFFERENCE (fetch (REGION WIDTH) of OLDREG)                                  TWICEBORDER)))                   (DSPRIGHTMARGIN (IDIFFERENCE (fetch (REGION WIDTH) of R)                                          TWICEBORDER)                          D))              (COND                 ((AND (SETQ PROC (WINDOWPROP WINDOW 'PROCESS))                       (EQ D (PROCESS.TTY PROC)))            (* ;                                              "if the window changing is a tty, set its linelength.")                  [PROCESS.EVAL PROC (LIST (FUNCTION PAGEHEIGHT)                                           (IQUOTIENT (fetch (REGION HEIGHT)                                                         of (SETQ CLIPREG (DSPCLIPPINGREGION                                                                               NIL D)))                                                  (IMINUS (DSPLINEFEED NIL D]                  (PROCESS.EVAL PROC '(SETLINELENGTH))                  (IF NIL                      THEN                               (* ; "try it without this.")                            (COND                               ((EQ (PROCESSPROP PROC 'NAME)                                    'EXEC)                                (* ;; "in the exec process, make sure the current position is inside the new shape.  reuse variables R and TWICEBORDER to save binding.")                                (COND                                   ((ILESSP (SETQ R (DSPYPOSITION NIL D))                                           (SETQ TWICEBORDER (fetch (REGION BOTTOM) of                                                                                               CLIPREG                                                                    )))                                    (DSPYPOSITION TWICEBORDER D))                                   ((IGREATERP R (SETQ TWICEBORDER (IPLUS (fetch (REGION HEIGHT)                                                                             of CLIPREG)                                                                          TWICEBORDER)))                                    (DSPYPOSITION (IDIFFERENCE TWICEBORDER (FONTPROP D 'ASCENT))                                           D]          (UPDATE/SCROLL/REG WINDOW))    WINDOW])(XMOVEORRESIZED.WINDOW  [LAMBDA (WINDOW X Y WIDTH HEIGHT)                    (* ; "Edited  5-Sep-91 16:57 by matsuda")    (PROG ((NEXTW (fetch (SCREEN SCTOPW) of \XSCREEN))           XBASEW OLDREG NEWREG)      LOOP          (COND             (NEXTW (SETQ XBASEW (WINDOWPROP NEXTW 'XBASEW))                    (COND                       [(EQ WINDOW XBASEW)                        (SETQ OLDREG (fetch (WINDOW REG)                                            NEXTW))                        (SETQ NEWREG (create REGION                                            LEFT _ X                                            BOTTOM _ (IDIFFERENCE (fetch (SCREEN SCHEIGHT)                                                                     of \XSCREEN)                                                            (IPLUS Y HEIGHT))                                            WIDTH _ WIDTH                                            HEIGHT _ HEIGHT))                        (COND                           ((AND (EQ (fetch (REGION WIDTH) of OLDREG)                                     WIDTH)                                 (EQ (fetch (REGION HEIGHT) of OLDREG)                                     HEIGHT))                            (XMOVEW1 NEXTW (fetch (REGION LEFT) of NEWREG)                                   (fetch (REGION BOTTOM) of NEWREG)))                           (T (XSHAPEW1 NEXTW NEWREG]                       (T (SETQ NEXTW (fetch (WINDOW NEXTW) of NEXTW))                          (GO LOOP])(\XMOUSELEFT  [LAMBDA (WINDOW X Y)                                 (* ; "Edited  5-Sep-91 16:56 by matsuda")    (SETQ XLASTMOUSEX X)    (SETQ XLASTMOUSEY (IDIFFERENCE (fetch (SCREEN SCHEIGHT) of \XSCREEN)                             Y))    (COND       ((EQ XLASTWINDOW (\FINDWINDOW WINDOW)            XLASTWINDOW)        (DOUSERFNS (fetch (WINDOW CURSORINFN) of XLASTWINDOW)               XLASTWINDOW)))    (SETQ XLASTWINDOW NIL])(\XMOUSEMOVED  [LAMBDA (WINDOW X Y)                                 (* ; "Edited  5-Sep-91 16:55 by matsuda")    (SETQ XLASTMOUSEX X)    (SETQ XLASTMOUSEY (IDIFFERENCE (fetch (SCREEN SCHEIGHT) of \XSCREEN)                             Y))    (SETQ XLASTWINDOW (\FINDWINDOW WINDOW))    (DOUSERFNS (fetch (WINDOW CURSORMOVEDFN) of XLASTWINDOW)           XLASTWINDOW])(\FINDWINDOW  [LAMBDA (WINDOW)                                     (* ; "Edited  5-Sep-91 16:51 by matsuda")    (PROG ((NEXTW (fetch (SCREEN SCTOPW) of \XSCREEN))           XBASEW)      LOOP          (COND             (NEXTW (SETQ XBASEW (WINDOWPROP NEXTW 'XBASEW))                    (COND                       ((EQ WINDOW XBASEW)                        (RETURN NEXTW))                       (T (SETQ NEXTW (fetch (WINDOW NEXTW) of NEXTW))                          (GO LOOP])(\XMOUSEENTERED  [LAMBDA (WINDOW X Y)                                 (* ; "Edited  5-Sep-91 17:13 by matsuda")    (SETQ XLASTMOUSEX X)    (SETQ XLASTMOUSEY (IDIFFERENCE (fetch (SCREEN SCHEIGHT) of \XSCREEN)                             Y))    (SETQ XLASTWINDOW (\FINDWINDOW WINDOW))    (DOUSERFNS (fetch (WINDOW CURSORINFN) of XLASTWINDOW)           XLASTWINDOW])(XMOVEW  [LAMBDA (WINDOW POSorX Y)                            (* ; "Edited  7-Mar-91 14:24 by matsuda")    (SETQ WINDOW (\INSUREWINDOW WINDOW))    (PROG ((OLDREGION (fetch (WINDOW REG) of WINDOW))           (USERMOVEFN (fetch (WINDOW MOVEFN) of WINDOW))           POS NEWREGION OLDLEFT OLDBOTTOM OLDWIDTH OLDHEIGHT XBASEW)          (COND             ([COND                 ((LISTP USERMOVEFN)                  (FMEMB 'DON'T USERMOVEFN))                 (T (EQ USERMOVEFN 'DON'T]              (PROMPTPRINT "This window cannot be moved.")              (RETURN)))          (SETQ OLDLEFT (fetch (REGION LEFT) of OLDREGION))          (SETQ OLDBOTTOM (ffetch (REGION BOTTOM) of OLDREGION))          (SETQ OLDWIDTH (ffetch (REGION WIDTH) of OLDREGION))          (SETQ OLDHEIGHT (ffetch (REGION HEIGHT) of OLDREGION))          (COND             [(AND POSorX (SETQ POS (COND                                       ((POSITIONP POSorX)                                        POSorX)                                       [(NUMBERP POSorX)                                        (COND                                           ((NUMBERP Y)                                            (create POSITION                                                   XCOORD _ POSorX                                                   YCOORD _ Y))                                           (T (\ILLEGAL.ARG Y]                                       ((REGIONP POSorX)                                        (create POSITION                                               XCOORD _ (fetch (REGION LEFT) of POSorX)                                               YCOORD _ (fetch (REGION BOTTOM) of POSorX)))                                       (T (\ILLEGAL.ARG POSorX]             (T (\ILLEGAL.ARG POSorX)))          [COND             ((AND (LISTP USERMOVEFN)                   (NOT (FMEMB (CAR USERMOVEFN)                               LAMBDASPLST)))              (AND (EQ [for MFN in USERMOVEFN do (SETQ NEWREGION (APPLY* MFN WINDOW POS))                                                            (COND                                                               ((EQ NEWREGION 'DON'T)                                                                (RETURN 'DON'T))                                                               ((POSITIONP NEWREGION)                                                                (SETQ POS NEWREGION]                       'DON'T)                   (RETURN)))             (USERMOVEFN (SETQ NEWREGION (APPLY* USERMOVEFN WINDOW POS))                    (COND                       ((EQ NEWREGION 'DON'T)                        (RETURN))                       ((POSITIONP NEWREGION)                        (SETQ POS NEWREGION]          (COND             ((OR (NOT (EQ (fetch (POSITION XCOORD) of POS)                           OLDLEFT))                  (NOT (EQ (fetch (POSITION YCOORD) of POS)                           OLDBOTTOM)))              (SETQ NEWREGION (create REGION                                     LEFT _ (ffetch (POSITION XCOORD) of POS)                                     BOTTOM _ (ffetch (POSITION YCOORD) of POS)                                     WIDTH _ OLDWIDTH                                     HEIGHT _ OLDHEIGHT))              (UNINTERRUPTABLY                  [COND                     ((SETQ XBASEW (WINDOWPROP WINDOW 'XBASEW))                      (XLIB:WITH-STATE (XBASEW)                             (CL:SETF (XLIB:DRAWABLE-Y XBASEW)                                    (IDIFFERENCE (fetch (XSCREEN SCHEIGHT) of \XSCREEN)                                           (fetch (REGION TOP) of NEWREGION)))                             (CL:SETF (XLIB:DRAWABLE-X XBASEW)                                    (fetch (REGION LEFT) of NEWREGION]                  (replace (WINDOW REG) of WINDOW with NEWREGION)                  (ADVISEXWDS WINDOW OLDREGION T))              (DOUSERFNS (WINDOWPROP WINDOW 'AFTERMOVEFN)                     WINDOW)))          (RETURN POS])(\XCLOSEW1  [LAMBDA (WINDOW)                                     (* ; "Edited 10-Sep-91 17:31 by matsuda")    (LET (SCREEN NEXTW SAVE)         (SETQ SCREEN (fetch (WINDOW SCREEN) of WINDOW))         (SETQ NEXTW (fetch (SCREEN SCTOPW) of SCREEN))         (COND            ((NULL NEXTW)             NIL)            ((EQ NEXTW WINDOW)             (UNINTERRUPTABLY                 (XLIB:UNMAP-WINDOW (WINDOWPROP NEXTW 'XBASEW))                 (replace (SCREEN SCTOPW) of SCREEN with (fetch (WINDOW NEXTW)                                                                        of NEXTW))                 (replace (WINDOW NEXTW) of WINDOW with 'CLOSED))             T)            (T (PROG NIL                     (SETQ SAVE NEXTW)                     (SETQ NEXTW (fetch (WINDOW NEXTW) of SAVE))                 LOOP                     (COND                        (NEXTW (COND                                  [(EQ NEXTW WINDOW)                                   (UNINTERRUPTABLY                                       (XLIB:UNMAP-WINDOW (WINDOWPROP NEXTW 'XBASEW))                                       (replace (WINDOW NEXTW) of SAVE                                          with (fetch (WINDOW NEXTW) of NEXTW))                                       (replace (WINDOW NEXTW) of NEXTW with 'CLOSED))]                                  (T (SETQ SAVE NEXTW)                                     (SETQ NEXTW (fetch (WINDOW NEXTW) of SAVE))                                     (GO LOOP])(XSHAPEW  [LAMBDA (WINDOW NEWREGION)                           (* ; "Edited  6-Sep-91 17:49 by matsuda")    (SETQ WINDOW (\INSUREWINDOW WINDOW))    (PROG ((OLDSIZE (WINDOWPROP WINDOW 'REGION))           NEWSIZE)          (COND             ((\USERFNISDON'T (fetch (WINDOW RESHAPEFN) of WINDOW))                                                             (* ;                                                            "don't allow the window to be reshaped.")              (PROMPTPRINT "This window cannot be reshaped.")              (RETURN NIL)))          (SETQ NEWSIZE (MINIMUMWINDOWSIZE WINDOW))          [SETQ NEWSIZE (COND                           (NEWREGION                        (* ;                                  "An explicit new region was specified; make sure it's big enough.")                                  (COND                                     [(OR (LESSP (fetch (REGION WIDTH) of NEWREGION)                                                 (CAR NEWSIZE))                                          (LESSP (fetch (REGION HEIGHT) of NEWREGION)                                                 (CDR NEWSIZE)))                                                             (* ;          "given a region that is too small, so expand the width and height to at least the minima.")                                      (CREATEREGION (fetch (REGION LEFT) of NEWREGION)                                             (fetch (REGION BOTTOM) of NEWREGION)                                             (IMAX (CAR NEWSIZE)                                                   (fetch (REGION WIDTH) of NEWREGION))                                             (IMAX (CDR NEWSIZE)                                                   (fetch (REGION HEIGHT) of NEWREGION]                                     (T NEWREGION)))                           (T (ERROR "NEWREGION must be specified."]          (RETURN (if (EQUAL NEWSIZE OLDSIZE)                      then                             (* ;; "if same size and place as before, do nothing")                            NIL                    elseif (AND (EQ (fetch (REGION WIDTH) of NEWSIZE)                                        (fetch (REGION WIDTH) of OLDSIZE))                                    (EQ (fetch (REGION HEIGHT) of NEWSIZE)                                        (fetch (REGION HEIGHT) of OLDSIZE)))                      then                             (* ;; "if same width and height, then optimize to a move")                            (XMOVEW WINDOW (fetch (REGION LEFT) of NEWSIZE)                                   (fetch (REGION BOTTOM) of NEWSIZE))                    else                           (* ;; "do the shape, checking for a doshapefn")                          (APPLY* (OR (WINDOWPROP WINDOW 'DOSHAPEFN)                                      '\XSHAPEW1)                                 WINDOW                                 (COPYALL NEWSIZE])(\XSHAPEW1  [LAMBDA (WINDOW REGION)                              (* ; "Edited  6-Sep-91 18:05 by matsuda")    (SETQ WINDOW (\INSUREWINDOW WINDOW))    (OR (REGIONP REGION)        (\ILLEGAL.ARG REGION))    (PROG [(XBASEW (WINDOWPROP WINDOW 'XBASEW]          (IF XBASEW              THEN (XLIB:WITH-STATE (XBASEW)                              (CL:SETF (XLIB:DRAWABLE-X XBASEW)                                     (fetch (REGION LEFT) of REGION))                              (CL:SETF (XLIB:DRAWABLE-Y XBASEW)                                     (IDIFFERENCE (XLIB:DRAWABLE-HEIGHT XLIB::*ROOT*)                                            (fetch (REGION TOP) of REGION)))                              (CL:SETF (XLIB:DRAWABLE-WIDTH XBASEW)                                     (fetch (REGION WIDTH) of REGION))                              (CL:SETF (XLIB:DRAWABLE-HEIGHT XBASEW)                                     (fetch (REGION HEIGHT) of REGION])(XCREATEWFROMPIXMAP  [LAMBDA (PIXMAP SCREEN)                              (* ; "Edited 13-Sep-91 14:33 by matsuda")    (PROG (WINDOW WIDTH HEIGHT)          (SETQ WINDOW (CREATEW (create SCREENREGION                                       SCREEN _ (\INSURESCREEN SCREEN)                                       LEFT _ 0                                       BOTTOM _ 0                                       WIDTH _ (SETQ WIDTH (PIXMAPWIDTH PIXMAP))                                       HEIGHT _ (SETQ HEIGHT (PIXMAPHEIGHT PIXMAP)))                              NIL 0 T))          (WINDOWPROP WINDOW 'MINSIZE (CONS (IMIN MinWindowWidth WIDTH)                                            (IMIN MinWindowWidth HEIGHT)))          (CL:SETF (XLIB:GCONTEXT-FUNCTION XLIB::*GC*)                 CL:BOOLE-1)          (XLIB:COPY-AREA PIXMAP XLIB::*GC* 0 0 WIDTH HEIGHT (fetch (WINDOW SAVE) of WINDOW)                 0 0)          (RETURN WINDOW])(XCLOSEMAINWINDOW  [LAMBDA (ICONWIN)                                    (* ; "Edited 11-Sep-91 11:22 by matsuda")    (PROG [(MAINWIN (WINDOWPROP ICONWIN 'ICONFOR]          [COND             (MAINWIN (COND                         ((NULL (\OKTOCLOSEW MAINWIN))                          (RETURN 'DON'T))                         (T (AND (OPENWP MAINWIN)                                 (\XCLOSEW1 MAINWIN]          (WINDOWPROP ICONWIN 'ICONFOR NIL)          (RETURN NIL])(\XINTERNALTOTOPW  [LAMBDA (WINDOW)                                     (* ; "Edited 13-Sep-91 18:02 by matsuda")    (PROG [(BASEW (WINDOWPROP WINDOW 'XBASEW]          (AND BASEW (XLIB::SET-WINDOW-PRIORITY :ABOVE BASEW]))(DEFINEQ(ISXWINDOW?  [LAMBDA (WINDOW)                                     (* ; "Edited 11-Sep-91 10:56 by matsuda")    (AND (TYPE? WINDOW WINDOW)         (XLIB:DRAWABLE-P (fetch (SCREEN SCDESTINATION) of (fetch (WINDOW SCREEN)                                                                      of WINDOW)))         WINDOW]))(DEFINEQ(INIT.XMAS2  [LAMBDA NIL                                            (* ; "Edited 20-Oct-91 10:55 by jn")    (MOVD 'CREATEW 'CREATEW.DISPLAY)    (MOVD 'CREATEW.NEW 'CREATEW)    (MOVD 'CLOSEW 'CLOSEW.DISPLAY)    (MOVD 'CLOSEW.NEW 'CLOSEW)    (MOVD 'OPENW 'OPENW.DISPLAY)    (MOVD 'OPENW.NEW 'OPENW)    (MOVD 'MOVEW 'MOVEW.DISPLAY)    (MOVD 'MOVEW.NEW 'MOVEW)    (MOVD 'SHAPEW 'SHAPEW.DISPLAY)    (MOVD 'SHAPEW.NEW 'SHAPEW)    (MOVD 'SHRINKW 'SHRINKW.DISPLAY)    (MOVD 'SHRINKW.NEW 'SHRINKW)    (MOVD 'EXPANDW 'EXPANDW.DISPLAY)    (MOVD 'EXPANDW.NEW 'EXPANDW)    (SETQ \XSCREEN (CREATESCREEN XLIB::*ROOT*))    [replace (SCREEN SCDATA) of \XSCREEN with (SETQ \XDisplayWindowOps                                                           (CREATE WINDOWOPS                                                                  CREATEW _ (FUNCTION                                                                              CREATEW.XDISPLAY)                                                                  OPENW _ (FUNCTION OPENW.XDISPLAY)                                                                  CLOSEW _ (FUNCTION CLOSEW.XDISPLAY)                                                                  MOVEW _ (FUNCTION MOVEW.XDISPLAY)                                                                  SHAPEW _ (FUNCTION SHAPEW.XDISPLAY)                                                                  SHRINKW _ (FUNCTION                                                                              SHRINKW.XDISPLAY)                                                                  EXPANDW _ (FUNCTION                                                                              EXPANDW.XDISPLAY]    [replace (SCREEN SCDATA) of \MAINSCREEN with (SETQ \DisplayWindowOps                                                              (CREATE WINDOWOPS                                                                     CREATEW _ (FUNCTION                                                                                 CREATEW.DISPLAY)                                                                     OPENW _ (FUNCTION OPENW.DISPLAY)                                                                     CLOSEW _ (FUNCTION                                                                                CLOSEW.DISPLAY)                                                                     MOVEW _ (FUNCTION MOVEW.DISPLAY)                                                                     SHAPEW _ (FUNCTION                                                                                SHAPEW.DISPLAY)                                                                     SHRINKW _ (FUNCTION                                                                                 SHRINKW.DISPLAY)                                                                     EXPANDW _ (FUNCTION                                                                                 EXPANDW.DISPLAY]    (CL:PUSH \XSCREEN \SCREENS]))(RPAQQ XMAS2COMS       ((RECORDS WINDOWOPS)        (FNS CREATESCREEN DSPCREATE CREATEW.NEW OPENW.NEW CLOSEW.NEW MOVEW.NEW SHAPEW.NEW SHRINKW.NEW             EXPANDW.NEW)        (FNS CREATEW.XDISPLAY OPENW.XDISPLAY CLOSEW.XDISPLAY MOVEW.XDISPLAY SHAPEW.XDISPLAY              SHRINKW.XDISPLAY EXPANDW.XDISPLAY TOTOPW.XDISPLAY BURYW.XDISPLAY)        (FNS \XOPENW1 XSHOWWFRAME ADVISEXWDS XMOVEORRESIZED.WINDOW \XMOUSELEFT \XMOUSEMOVED              \FINDWINDOW \XMOUSEENTERED XMOVEW \XCLOSEW1 XSHAPEW \XSHAPEW1 XCREATEWFROMPIXMAP              XCLOSEMAINWINDOW \XINTERNALTOTOPW)        (FNS ISXWINDOW?)        (FNS INIT.XMAS2)        (VARS XMAS2COMS)))(PUTPROPS XMAS2 COPYRIGHT ("Fuji Xerox Co., Ltd" 1991))(DECLARE%: DONTCOPY  (FILEMAP (NIL (1816 10841 (CREATESCREEN 1826 . 3905) (DSPCREATE 3907 . 7484) (CREATEW.NEW 7486 . 8271) (OPENW.NEW 8273 . 8747) (CLOSEW.NEW 8749 . 9129) (MOVEW.NEW 9131 . 9614) (SHAPEW.NEW 9616 . 10006) (SHRINKW.NEW 10008 . 10458) (EXPANDW.NEW 10460 . 10839)) (10842 30847 (CREATEW.XDISPLAY 10852 . 13334) (OPENW.XDISPLAY 13336 . 13835) (CLOSEW.XDISPLAY 13837 . 14174) (MOVEW.XDISPLAY 14176 . 18419) (SHAPEW.XDISPLAY 18421 . 21590) (SHRINKW.XDISPLAY 21592 . 28583) (EXPANDW.XDISPLAY 28585 . 29816) (TOTOPW.XDISPLAY 29818 . 30569) (BURYW.XDISPLAY 30571 . 30845)) (30848 57817 (\XOPENW1 30858 . 32860) (XSHOWWFRAME 32862 . 36235) (ADVISEXWDS 36237 . 42690) (XMOVEORRESIZED.WINDOW 42692 . 44286) (\XMOUSELEFT 44288 . 44760) (\XMOUSEMOVED 44762 . 45165) (\FINDWINDOW 45167 . 45683) (\XMOUSEENTERED 45685 . 46087) (XMOVEW 46089 . 50325) (\XCLOSEW1 50327 . 51941) (XSHAPEW 51943 . 55096) (\XSHAPEW1 55098 . 56108) (XCREATEWFROMPIXMAP 56110 . 57083) (XCLOSEMAINWINDOW 57085 . 57578) (\XINTERNALTOTOPW 57580 . 57815)) (57818 58184 (ISXWINDOW? 57828 . 58182)) (58185 61281 (INIT.XMAS2 58195 . 61279)))))STOP