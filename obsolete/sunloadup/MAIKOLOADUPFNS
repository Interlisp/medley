(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)
(FILECREATED " 5-Apr-89 16:23:30" {ERIS}<LISPCORE>SUNLOADUP>MAIKOLOADUPFNS.;6 32845  

      changes to%:  (VARS MAIKOLOADUPFNSCOMS)
                    (FNS \DISPLAYLINE \10MB.STARTDRIVER \PAGEFAULT \COUNTREALPAGES \MOVEVMEMFILEPAGE
                         \LOADVMEMPAGE CHECKPAGEMAP \SHOWPAGETABLE \DIRTYBACKGROUND \WRITEDIRTYPAGE 
                         \UNLOCKPAGES \TEMPUNLOCKPAGES \DOTEMPLOCKPAGES \DOLOCKPAGES \LOCKPAGES 
                         \DONEWPAGE \NEWPAGE \LOCKEDPAGEP \DORECLAIM CL::%%COPY-TIME-STATS SETTIME 
                         \PUP.SETTIME \NS.SETTIME CLOCK CLOCK0 \CLOCK0 \DAYTIME0 DAYTIME \CHECKSUM 
                         \10MB.RESTART.ETHER \10MB.TURNONETHER \10MB.TURNOFFETHER \10MBSENDPACKET 
                         \10MBWATCHER \BITBLTSUB \BLTCHAR FIE)
                    (FILES LLNSDECLS)
                    (PROPS (MAIKOLOADUPFNS MAKEFILE-ENVIRONMENT))

      previous date%: " 5-Apr-89 14:47:33" {ERIS}<LISPCORE>SUNLOADUP>MAIKOLOADUPFNS.;1)


(* "
Copyright (c) 1989 by ENVOS Corporation.  All rights reserved.
")

(PRETTYCOMPRINT MAIKOLOADUPFNSCOMS)

(RPAQQ MAIKOLOADUPFNSCOMS 
       [(PROP (FILETYPE MAKEFILE-ENVIRONMENT)
              MAIKOLOADUPFNS)
        (FNS CL::%%COPY-TIME-STATS CHECKPAGEMAP CLOCK CLOCK0 DAYTIME SETTIME \10MB.RESTART.ETHER 
             \10MB.STARTDRIVER \10MB.TURNOFFETHER \10MB.TURNONETHER \10MBSENDPACKET \10MBWATCHER 
             \BITBLTSUB \BLTCHAR \CHECKSUM \CLOCK0 \COUNTREALPAGES \DAYTIME0 \DIRTYBACKGROUND 
             \DISPLAYLINE \DOLOCKPAGES \DONEWPAGE \DORECLAIM \DOTEMPLOCKPAGES \LOADVMEMPAGE 
             \LOCKEDPAGEP \LOCKPAGES \MOVEVMEMFILEPAGE \NEWPAGE \NS.SETTIME \PAGEFAULT \PUP.SETTIME 
             \SHOWPAGETABLE \TEMPUNLOCKPAGES \UNLOCKPAGES \WRITEDIRTYPAGE)
        (GLOBALVARS \TimeZoneComp \10MB.RCLK.BOX \10MB.EXPECTED.RECEIVE.INTERVAL \10MB.INPUT.TIMEOUT
               \10MB.INPUT.TIMER \10MBTYPE.TRANSLATIONS \MY.NSADDRESS \RAWTRACING \MAXWATCHERGETS)
        (DECLARE%: EVAL@COMPILE DONTCOPY (LOCALVARS . T)
               (FILES (SOURCE)
                      10MBDECLS LLNSDECLS TEDITDECLS))
        (DECLARE%: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS
               (ADDVARS (NLAMA)
                      (NLAML)
                      (LAMA \WRITEDIRTYPAGE \UNLOCKPAGES \TEMPUNLOCKPAGES \SHOWPAGETABLE 
                            \MOVEVMEMFILEPAGE \LOCKPAGES \LOCKEDPAGEP \DOTEMPLOCKPAGES \DOLOCKPAGES 
                            \DIRTYBACKGROUND \COUNTREALPAGES CHECKPAGEMAP])

(PUTPROPS MAIKOLOADUPFNS FILETYPE CL:COMPILE-FILE)

(PUTPROPS MAIKOLOADUPFNS MAKEFILE-ENVIRONMENT (:PACKAGE "INTERLISP" :READTABLE "INTERLISP" :BASE
                                                         10))
(DEFINEQ

(CL::%%COPY-TIME-STATS
  [LAMBDA (REFERENCE-BLOCK DESTINIATION-BLOCK)        (* ; "Edited  2-May-88 17:16 by MASINTER")
    (SUBRCALL COPYTIMESTATS REFERENCE-BLOCK DESTINIATION-BLOCK])

(CHECKPAGEMAP
  [LAMBDA NOBIND                                         (* lmm " 4-OCT-83 03:05")
    NIL])

(CLOCK
  [LAMBDA (N BOX)                                     (* ; "Edited  2-May-88 16:11 by MASINTER")
    (SUBRCALL GETUNIXTIME N BOX])

(CLOCK0
  [LAMBDA (BOX)                                       (* ; "Edited  2-May-88 16:19 by MASINTER")
    (SUBRCALL GETUNIXTIME 0 BOX])

(DAYTIME
  [LAMBDA (BOX)                                       (* ; "Edited  2-May-88 16:20 by MASINTER")
    (SUBRCALL GETUNIXTIME 5 BOX])

(SETTIME
  [LAMBDA (RETFLG)                                    (* ; "Edited 13-May-88 15:22 by MASINTER")
    (CL:UNLESS (AND RETFLG (NOT (STRINGP RETFLG)))
        (SETQ \TimeZoneComp (SUBRCALL GETUNIXTIME 8 NIL)))
    (\PROCESS.RESET.TIMERS)
    (DAYTIME])

(\10MB.RESTART.ETHER
  [LAMBDA NIL                                         (* ; "Edited 11-May-88 16:09 by MASINTER")
    (SUBRCALL ETHER-RESUME])

(\10MB.STARTDRIVER
  [LAMBDA (NDB RESTARTFLG MYNSNUMBER)                    (* ; "Edited  5-Apr-89 15:03 by snow")
    (DECLARE (GLOBALVARS \MAIKO.INPUT.PACKET \10MB.EXPECTED.RECEIVE.INTERVAL \10MB.INPUT.TIMEOUT)
           )
    (SUBRCALL ETHER-SUSPEND)
    (OR (\INIT.ETHER.BUFFER.POOL)
        (ERROR "Unable to create buffer pool"))
    (replace NDBTQ of NDB with (create SYSQUEUE))
    (SETQ \10MB.RAWPACKETQ (create SYSQUEUE))
    (SETQ \10MB.INPUT.TIMEOUT (TIMES \RCLKSECOND \10MB.EXPECTED.RECEIVE.INTERVAL))
    (\10MB.TURNONETHER NDB NIL NIL (OR MYNSNUMBER T)
           0 0)
    (PROG ((CSB (fetch NDBCSB of NDB)))
          (OR \MAIKO.INPUT.PACKET (SETQ \MAIKO.INPUT.PACKET (\ALLOCATE.ETHERPACKET)))
          (replace DLFIRSTICB of (fetch NDBCSB of NDB) with \ES.PENDING)
          (SUBRCALL ETHER-GET \10MBPACKETLENGTH (fetch 10MBPACKETBASE of \MAIKO.INPUT.PACKET)
                 )
          (replace NDBWATCHER of NDB with (ADD.PROCESS (LIST '\10MBWATCHER (KWOTE NDB))
                                                             'RESTARTABLE
                                                             'SYSTEM
                                                             'AFTEREXIT
                                                             'DELETE))
          (RETURN NDB])

(\10MB.TURNOFFETHER
  [LAMBDA NIL                                         (* ; "Edited 11-May-88 16:11 by MASINTER")
    (SUBRCALL ETHER-SUSPEND])

(\10MB.TURNONETHER
  [LAMBDA (NDB SMASHSTATE NEWSTATE NSHOSTNUMBER ININTERRUPT OUTINTERRUPT)
                                                          (* ; "Edited 11-May-88 16:08 by MASINTER")

(* ;;; "Reset and activate ether associated with NDB.  If SMASHSTATE is given, it is a CSB-length block into which state is saved for later restoration by passing as the NEWSTATE arg.  If NEWSTATE is NIL, then the remaining non-NIL args give parameters for this activation: the host number for microcode to watch for, T meaning my own number;  and interrupt masks for when a packet arrives or finishes transmitting")

    (* ;; "For Daybreak, SMASHSTATE and NEWSTATE must be NIL")

    (PROG ((CSB (fetch NDBCSB of NDB)))
          (\MAIKO.ETHERSUSPEND)
          [OR CSB (replace NDBCSB of NDB with (SETQ CSB (LOCF (fetch DLETHERNET
                                                                             of \IOPAGE]
          (replace DLFIRSTOCB of CSB with 0)
          (replace DLFIRSTICB of CSB with 0)
          [AND NSHOSTNUMBER (COND
                               ((EQ NSHOSTNUMBER T)
                                (\BLT (LOCF (fetch DLLOCALHOST0 of CSB))
                                      (LOCF (fetch (IFPAGE NSHost0) of \InterfacePage))
                                      \#WDS.NSHOSTNUMBER))
                               (T (\STORENSHOSTNUMBER (LOCF (fetch DLLOCALHOST0 of CSB))
                                         NSHOSTNUMBER]
          (AND OUTINTERRUPT (replace DLOUTPUTMASK of CSB with OUTINTERRUPT))
          (AND ININTERRUPT (replace DLINPUTMASK of CSB with ININTERRUPT))
          (replace DLMISSEDPACKETS of CSB with 0)
          (replace DLLASTICB of CSB with 0)
          (replace DLLASTOCB of CSB with 0)
          (SUBRCALL ETHER-RESET)
          (SUBRCALL ETHER-RESUME)
          (RETURN NDB])

(\10MBSENDPACKET
  [LAMBDA (NDB PACKET)                                (* ; "Edited 11-May-88 16:10 by MASINTER")
    (PROG NIL
          [COND
             (\RAWTRACING (\MAYBEPRINTPACKET PACKET 'RAWPUT]
          [COND
             ((OR (fetch 10MBMULTICASTP of PACKET)
                  (EQNSADDRESS.HOST \MY.NSADDRESS (fetch 10MBDESTHOSTBASE of PACKET)))
                                                             (* ; 
                                "We would hear this packet if our hardware let us, so fake receipt")
              (PROG ((COPYPACKET (\ALLOCATE.ETHERPACKET)))
                    (\BLT (LOCF (fetch 10MBLENGTH of COPYPACKET))
                          (LOCF (fetch 10MBLENGTH of PACKET))
                          (ADD1 (fetch 10MBLENGTH of PACKET)))
                                                             (* ; 
                                                   "Copy all data that would have been transmitted")
                    (replace EPNETWORK of COPYPACKET with NDB)
                    (replace EPTYPE of COPYPACKET
                       with (for PAIR in \10MBTYPE.TRANSLATIONS
                                   bind (TYPE _ (fetch 10MBTYPE of PACKET))
                                   when (EQ TYPE (CAR PAIR)) do 

                                 (* ;; "TYPE is the raw type of the etherpacket.  These do not always correspond one-to-one with the EPTYPE constants we use (in particular, for pups), so translate if necessary.")

                                                                       (RETURN (CDR PAIR))
                                   finally (RETURN TYPE)))
                    [COND
                       (\RAWTRACING (\MAYBEPRINTPACKET COPYPACKET 'RAWGET]
                    (\HANDLE.RAW.PACKET COPYPACKET]
          (UNINTERRUPTABLY
              (SUBRCALL ETHER-SEND (IMAX (fetch 10MBLENGTH of PACKET)
                                         \10MB.MINPACKETLENGTH)
                     (fetch 10MBPACKETBASE of PACKET))
              (replace EPNETWORK of PACKET with NIL)
              (\REQUEUE.ETHERPACKET PACKET))
          (RETURN T])

(\10MBWATCHER
  [LAMBDA (NDB)                                       (* ; "Edited 16-May-88 22:24 by MASINTER")

    (* ;; "merge message and packet reading")

    (PROG ((CNTR 0)
           MESSAGE-BUFFER MESSAGE-LENGTH PACKET)
      LP  (IF (SUBRCALL MESSAGE-READP)
              THEN (PROMPTPRINT (IF (SETQ MESSAGE-LENGTH (SUBRCALL MESSAGE-READ
                                                                        (OR MESSAGE-BUFFER
                                                                            (SETQ MESSAGE-BUFFER
                                                                             (ALLOCSTRING 1024)))
                                                                        1024))
                                        THEN (SUBSTRING MESSAGE-BUFFER 1 MESSAGE-LENGTH)
                                      ELSE "?? system message: polling failed")))
          (UNINTERRUPTABLY
              (SUBRCALL ETHER-CHECK)
              (SETQ PACKET (\MAIKO.INPUT.INTERRUPT NDB)))
          [COND
             (PACKET (\HANDLE.RAW.PACKET PACKET)
                    (COND
                       ((ILESSP (add CNTR 1)
                               \MAXWATCHERGETS)
                        (GO LP]
          (BLOCK)
          (SETQ CNTR 0)
          (GO LP])

(\BITBLTSUB
  [LAMBDA (PILOTBBT SourceBitMap SLX STY DestinationBitMap DLX DTY HEIGHT SourceType Operation 
                 Texture WindowXOffset WindowYOffset)    (* ; "Edited 29-Jun-88 16:24 by ")

    (* ;; "replaces \BITBLTSUB on Maiko")

    ((OPCODES SUBRCALL 69 13)
     PILOTBBT SourceBitMap SLX STY DestinationBitMap DLX DTY HEIGHT SourceType Operation Texture 
     WindowXOffset WindowYOffset])

(\BLTCHAR
  [LAMBDA (CHARCODE DISPLAYSTREAM DISPLAYDATA)
    ((OPCODES SUBRCALL 135 3)
     CHARCODE DISPLAYSTREAM DISPLAYDATA])

(\CHECKSUM
  [LAMBDA (BASE NWORDS INITSUM)                       (* ; "Edited 20-May-88 11:48 by MASINTER")
    (SUBRCALL CHECK-SUM BASE NWORDS INITSUM])

(\CLOCK0
  [LAMBDA (BOX)                                       (* ; "Edited  2-May-88 16:19 by MASINTER")
    (SUBRCALL GETUNIXTIME 0 BOX])

(\COUNTREALPAGES
  [LAMBDA NOBIND                                         (* lmm " 4-OCT-83 03:05")
    0])

(\DAYTIME0
  [LAMBDA (BOX)                                       (* ; "Edited  2-May-88 16:20 by MASINTER")
    (SUBRCALL GETUNIXTIME 4 BOX])

(\DIRTYBACKGROUND
  [LAMBDA NOBIND                                         (* lmm " 4-OCT-83 03:05")
    NIL])

(\DISPLAYLINE
  [LAMBDA (TEXTOBJ LINE WINDOW)                          (* ; "Edited  5-Apr-89 16:22 by snow")

    (* ;; "Display the line of text LINE in the edit window where it belongs.")

    (* ;; " This Function works on MIAKO")

    (PROG ((CH 0)
           (CHLIST (fetch (THISLINE CHARS) of (fetch THISLINE of TEXTOBJ)))
           (WLIST (fetch (THISLINE WIDTHS) of (ffetch THISLINE of TEXTOBJ)))
           (LOOKS (fetch (THISLINE LOOKS) of (ffetch THISLINE of TEXTOBJ)))
           (WINDOWDS (WINDOWPROP (OR WINDOW (CAR (fetch (TEXTOBJ \WINDOW) of TEXTOBJ)))
                            'DSP))
           (TEXTLEN (ffetch (TEXTOBJ TEXTLEN) of TEXTOBJ))
           (THISLINE (ffetch (TEXTOBJ THISLINE) of TEXTOBJ))
           (TERMSA (ffetch (TEXTOBJ TXTTERMSA) of TEXTOBJ))
           (STREAM (ffetch (TEXTOBJ STREAMHINT) of TEXTOBJ))
           (OLDCACHE (fetch LCBITMAP of (ffetch (TEXTOBJ DISPLAYCACHE) of TEXTOBJ)))
           (DS (ffetch (TEXTOBJ DISPLAYCACHEDS) of TEXTOBJ))
           (HCPYDS (ffetch (TEXTOBJ DISPLAYHCPYDS) of TEXTOBJ))
           (HARDCOPYMODE (fetch (FMTSPEC FMTHARDCOPY) of (fetch (LINEDESCRIPTOR LFMTSPEC)
                                                                    of LINE)))
           LOOKSTARTX CACHE \PCHARSLEFT \PSTRING \PFILE FONT OFONT OLOOKS XOFFSET CLIPLEFT CLIPRIGHT
           DISPLAYDATA DDPILOTBBT DDWIDTHCACHE DDOFFSETCACHE CURY LHEIGHT SCALE)
          [SETQ LHEIGHT (COND
                           ((ffetch (LINEDESCRIPTOR PREVLINE) of LINE)
                                                             (* ; 
                                  "So if theres a base-to-base measure, we clear everything right.")
                            (IMAX (IDIFFERENCE (fetch YBOT of (ffetch (LINEDESCRIPTOR
                                                                                   PREVLINE)
                                                                         of LINE))
                                         (ffetch (LINEDESCRIPTOR YBOT) of LINE))
                                  (ffetch (LINEDESCRIPTOR LHEIGHT) of LINE)))
                           (T (ffetch (LINEDESCRIPTOR LHEIGHT) of LINE]
          (COND
             (HARDCOPYMODE                                   (* ; 
                                                     "This is a hardcopy-mode line.  Scale things.")
                                                             (* ; "(SETQ DS HCPYDS)")
                    (SETQ SCALE (DSPSCALE NIL HCPYDS)))
             (T (SETQ SCALE 1)))
          (SETQ CACHE (\TEDIT.LINECACHE (ffetch (TEXTOBJ DISPLAYCACHE) of TEXTOBJ)
                             (COND
                                (HARDCOPYMODE (FIXR (FQUOTIENT (fetch RIGHTMARGIN of LINE)
                                                           SCALE)))
                                (T (fetch RIGHTMARGIN of LINE)))
                             LHEIGHT))
          (COND
             ((NEQ CACHE OLDCACHE)                           (* ; 
               "We changed the bitmaps because this line was bigger--update the displaystream, too")
              (DSPDESTINATION CACHE DS)
              (DSPCLIPPINGREGION (create REGION
                                        LEFT _ 0
                                        BOTTOM _ 0
                                        WIDTH _ (fetch BITMAPWIDTH of CACHE)
                                        HEIGHT _ (ffetch BITMAPHEIGHT of CACHE))
                     DS)))
          (BITBLT NIL 0 0 CACHE 0 0 NIL NIL 'TEXTURE 'REPLACE WHITESHADE)
                                                             (* ; "Clear the line cache")
          (COND
             (HARDCOPYMODE                                   (* ; 
                                                     "This is a hardcopy-mode line.  Scale things.")
                                                             (* ; "(SETQ DS HCPYDS)")
                    (SETQ SCALE (DSPSCALE NIL HCPYDS)))
             (T (SETQ SCALE 1)))
          [COND
             ((AND (NOT (ZEROP (fetch CHAR1 of LINE)))
                   (ILEQ (ffetch CHAR1 of LINE)
                         TEXTLEN)
                   (IGEQ (ffetch YBOT of LINE)
                         (ffetch WBOTTOM of TEXTOBJ)))

              (* ;; "Only display the line of it contains text (CHAR1 > 0), appears before the end of the test, and is on-screen.")

              (COND
                 ((NEQ (fetch DESC of THISLINE)
                       LINE)                                 (* ; 
                                                          "No image cache -- re-format and display")
                  (\FORMATLINE TEXTOBJ NIL (ffetch CHAR1 of LINE)
                         LINE)))
              (MOVETO (ffetch LEFTMARGIN of LINE)
                     (ffetch DESCENT of LINE)
                     DS)
              (SETQ DISPLAYDATA (fetch IMAGEDATA of DS))
              (SETQ DDPILOTBBT (ffetch DDPILOTBBT of DISPLAYDATA))
              (SETQ XOFFSET (ffetch DDXOFFSET of DISPLAYDATA))

              (* ;; "The X position of the left edge of the window, since \TEDIT.BLTCHAR works on the screen bitmap itself.")

              (SETQ CLIPLEFT (ffetch DDClippingLeft of DISPLAYDATA))
                                                             (* ; 
                     "The left and right edges of the clipping region for the text display window.")
              (SETQ CLIPRIGHT (ffetch DDClippingRight of DISPLAYDATA))
              (SETQ OFONT (DSPFONT (fetch CLFONT of (SETQ OLOOKS (\EDITELT LOOKS 0)))
                                 DS))                        (* ; "The starting font")
              (SETQ DDWIDTHCACHE (ffetch DDWIDTHSCACHE of DISPLAYDATA))
                                                             (* ; 
                                                           "Cache the character-image widths")
              (SETQ DDOFFSETCACHE (ffetch DDOFFSETSCACHE of DISPLAYDATA))
                                                             (* ; 
                                                          "And the offset-into-strike-bitmap array")
              (SETQ LOOKSTARTX (ffetch LEFTMARGIN of LINE))
                                                             (* ; 
                                                  "Starting X position for the current-looks text.")
              (AND (fetch CLOFFSET of OLOOKS)
                   (RELMOVETO 0 (FIXR (FTIMES SCALE (ffetch CLOFFSET of OLOOKS)))
                          DS))                               (* ; 
                                                      "Any sub- or superscripting at start of line")
              (bind (LOOKNO _ 1)
                     DX
                     (TX _ (IPLUS XOFFSET (ffetch LEFTMARGIN of LINE))) for I
                 from 0 to (fetch LEN of THISLINE)
                 do 

                       (* ;; "Display the line character by character")

                       (SETQ CH (\EDITELT CHLIST I))         (* ; 
                                                      "Grab the character (or IMAGEOBJ) to display")
                       (SETQ DX (\WORDELT WLIST I))          (* ; "And its width")
                       [SELECTC CH
                           (LMInvisibleRun                   (* ; 
                                        "An INVISIBLE run -- skip it, and skip over the char count")
                                (add LOOKNO 1))
                           (LMLooksChange                    (* ; "A LOOKS change")
                                          (freplace DDXPOSITION of DISPLAYDATA
                                             with (IDIFFERENCE TX XOFFSET))
                                                             (* ; 
                                            "Make the displaystream reflect our current X position")
                                          (TEDIT.MODIFYLOOKS LINE LOOKSTARTX DS OLOOKS
                                                 (ffetch DESCENT of LINE))
                                                             (* ; 
                "Make any necessary changes to the preceding characters (underline, strike-out &c)")
                                          (DSPFONT (fetch CLFONT of (SETQ OLOOKS
                                                                             (\EDITELT LOOKS LOOKNO))
                                                          )
                                                 DS)         (* ; "Set the new font")
                                          (add LOOKNO 1) (* ; "Grab the next set of char looks")
                                          (AND (ffetch CLOFFSET of OLOOKS)
                                               (RELMOVETO 0 (ffetch CLOFFSET of OLOOKS)
                                                      DS))   (* ; "Account for super/subscripting")
                                          (SETQ LOOKSTARTX (IDIFFERENCE TX XOFFSET))
                                                             (* ; 
                                     "Remember the starting Xpos for possible later underlining &c")
                                          )
                           ((CHARCODE (TAB %#^I))            (* ; 
                                "TAB: use the width from the cache to decide the right formatting.")
                                [COND
                                   ((OR (IEQP CH (CHARCODE %#^I))
                                        (ffetch CLLEADER of OLOOKS)
                                        (EQ (ffetch CLUSERINFO of OLOOKS)
                                            'DOTTEDLEADER))
                                    (LET* [[LEADERFONT (COND
                                                          (HARDCOPYMODE (FONTCOPY (ffetch CLFONT
                                                                                     of OLOOKS)
                                                                               'DEVICE HCPYDS))
                                                          (T (ffetch CLFONT of OLOOKS]
                                           (DOTWIDTH (CHARWIDTH (CHARCODE %.)
                                                            LEADERFONT))
                                           (TTX (IPLUS TX DOTWIDTH (IDIFFERENCE DOTWIDTH
                                                                          (IREMAINDER TX DOTWIDTH]
                                          (while (ILEQ TTX (IPLUS TX DX))
                                             do (COND
                                                       (HARDCOPYMODE
                                                        (SUBRCALL TEDIT.BLTCHAR (CHARCODE %.)
                                                               DS
                                                               (FIXR (FQUOTIENT (IDIFFERENCE TTX 
                                                                                       DOTWIDTH)
                                                                            SCALE))
                                                               DISPLAYDATA DDPILOTBBT CLIPRIGHT))
                                                       ((OR TERMSA HARDCOPYMODE)
                                                             (* ; 
                                                           "Using special instrns from TERMSA")
                                                        (\DSPPRINTCHAR DS (CHARCODE %.)))
                                                       (T    (* ; "Native charcodes")
                                                          (SUBRCALL TEDIT.BLTCHAR (CHARCODE %.)
                                                                 DS
                                                                 (IDIFFERENCE TTX DOTWIDTH)
                                                                 DISPLAYDATA DDPILOTBBT CLIPRIGHT)))
                                                   (add TTX DOTWIDTH])
                           (13                               (* ; "It's a CR")
                               NIL)
                           (COND
                              [(SMALLP CH)                   (* ; 
                                                           "Normal character -- just display it.")
                               (COND
                                  (HARDCOPYMODE (SUBRCALL TEDIT.BLTCHAR CH DS (FIXR (FQUOTIENT TX 
                                                                                           SCALE))
                                                       DISPLAYDATA DDPILOTBBT CLIPRIGHT))
                                  ((OR TERMSA HARDCOPYMODE)  (* ; 
                                                           "Using special instrns from TERMSA")
                                   (\DSPPRINTCHAR DS CH))
                                  (T                         (* ; "Native charcodes")
                                     (SUBRCALL TEDIT.BLTCHAR CH DS TX DISPLAYDATA DDPILOTBBT 
                                            CLIPRIGHT]
                              (T                             (* ; "CH is an object.")
                                 (MOVETO (IDIFFERENCE (FIXR (FQUOTIENT TX SCALE))
                                                XOFFSET)
                                        (SETQ CURY (DSPYPOSITION NIL DS))
                                        DS)                  (* ; 
                                              "Go to the base line, left edge of the image region.")
                                 (APPLY* (IMAGEOBJPROP CH 'DISPLAYFN)
                                        CH DS 'DISPLAY (ffetch STREAMHINT of TEXTOBJ))
                                                             (* ; 
                                                           "Tell him to display himself here.")
                                 (DSPFONT (ffetch CLFONT of OLOOKS)
                                        DS)
                                 (MOVETO (IDIFFERENCE (FIXR (FQUOTIENT TX SCALE))
                                                XOFFSET)
                                        CURY DS)             (* ; 
                                                           "Move to after the object's image")
                                 ]
                       (add TX DX)                       (* ; "Update our X position")
                 finally (freplace DDXPOSITION of DISPLAYDATA
                                with (IDIFFERENCE (FIXR (FQUOTIENT TX SCALE))
                                                XOFFSET))    (* ; 
                                      "Make any necessary looks mods to the last run of characters")
                       (TEDIT.MODIFYLOOKS LINE LOOKSTARTX DS OLOOKS (ffetch DESCENT of LINE]
          (BITBLT CACHE 0 0 WINDOWDS 0 (ffetch YBOT of LINE)
                 (ffetch WRIGHT of TEXTOBJ)
                 LHEIGHT
                 'INPUT
                 'REPLACE)                                   (* ; 
                        "Paint the cached image on the screen (this lessens flicker during update)")
          (COND
             ((fetch (FMTSPEC FMTREVISED) of (ffetch (LINEDESCRIPTOR LFMTSPEC)
                                                        of LINE))
                                                             (* ; 
                                                     "This paragraph has been revised, so mark it.")
              (\TEDIT.MARK.REVISION TEXTOBJ (ffetch (LINEDESCRIPTOR LFMTSPEC) of LINE)
                     WINDOWDS LINE)))
          (SELECTQ (ffetch LMARK of LINE)
              (GREY                                          (* ; 
              "This line has some property that isn't visible to the user.  Tell him to be careful")
                    (BITBLT NIL 0 0 WINDOWDS 0 (ffetch YBASE of LINE)
                           6 6 'TEXTURE 'PAINT 42405))
              (SOLID                                         (* ; 
              "This line has some property that isn't visible to the user.  Tell him to be careful")
                     (BITBLT NIL 0 0 WINDOWDS 0 (ffetch YBASE of LINE)
                            6 6 'TEXTURE 'PAINT BLACKSHADE))
              (BITBLT NIL 0 0 WINDOWDS 0 (ffetch YBASE of LINE)
                     6 6 'TEXTURE 'REPLACE WHITESHADE])

(\DOLOCKPAGES
  [LAMBDA NOBIND                                         (* lmm " 4-OCT-83 03:05")
    NIL])

(\DONEWPAGE
  [LAMBDA (BASE NOERROR LOCK?)                        (* ; "Edited 20-Apr-88 10:28 by MASINTER")
    (SUBRCALL NEWPAGE BASE])

(\DORECLAIM
  [LAMBDA NIL                                         (* ; "Edited 12-Oct-88 12:01 by krivacic")
    (SUBRCALL DORECLAIM])

(\DOTEMPLOCKPAGES
  [LAMBDA NOBIND                                         (* lmm " 4-OCT-83 03:05")
    NIL])

(\LOADVMEMPAGE
  [LAMBDA (X)                                                (* lmm%: 26 JUN 75 726)
    X])

(\LOCKEDPAGEP
  [LAMBDA NOBIND                                         (* lmm " 4-OCT-83 03:05")
    T])

(\LOCKPAGES
  [LAMBDA NOBIND                                         (* lmm " 4-OCT-83 03:05")
    NIL])

(\MOVEVMEMFILEPAGE
  [LAMBDA NOBIND                                         (* lmm " 4-OCT-83 03:05")
    T])

(\NEWPAGE
  [LAMBDA (BASE NOERROR LOCK?)                        (* ; "Edited 20-Apr-88 10:28 by MASINTER")
    (SUBRCALL NEWPAGE BASE])

(\NS.SETTIME
  [LAMBDA (RETFLG)                                    (* ; "Edited 13-May-88 15:22 by MASINTER")
    (CL:UNLESS (AND RETFLG (NOT (STRINGP RETFLG)))
        (SETQ \TimeZoneComp (SUBRCALL GETUNIXTIME 8 NIL)))
    (\PROCESS.RESET.TIMERS)
    (DAYTIME])

(\PAGEFAULT
  [LAMBDA (X)                                                (* lmm%: 26 JUN 75 726)
    X])

(\PUP.SETTIME
  [LAMBDA (RETFLG)                                    (* ; "Edited 13-May-88 15:22 by MASINTER")
    (CL:UNLESS (AND RETFLG (NOT (STRINGP RETFLG)))
        (SETQ \TimeZoneComp (SUBRCALL GETUNIXTIME 8 NIL)))
    (\PROCESS.RESET.TIMERS)
    (DAYTIME])

(\SHOWPAGETABLE
  [LAMBDA NOBIND                                         (* lmm " 4-OCT-83 03:05")
    NIL])

(\TEMPUNLOCKPAGES
  [LAMBDA NOBIND                                         (* lmm " 4-OCT-83 03:05")
    NIL])

(\UNLOCKPAGES
  [LAMBDA NOBIND                                         (* lmm " 4-OCT-83 03:05")
    NIL])

(\WRITEDIRTYPAGE
  [LAMBDA NOBIND                                         (* lmm " 4-OCT-83 03:05")
    NIL])
)
(DECLARE%: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS \TimeZoneComp \10MB.RCLK.BOX \10MB.EXPECTED.RECEIVE.INTERVAL \10MB.INPUT.TIMEOUT 
       \10MB.INPUT.TIMER \10MBTYPE.TRANSLATIONS \MY.NSADDRESS \RAWTRACING \MAXWATCHERGETS)
)
(DECLARE%: EVAL@COMPILE DONTCOPY 
(DECLARE%: DOEVAL@COMPILE DONTCOPY

(LOCALVARS . T)
)


(FILESLOAD (SOURCE)
       10MBDECLS LLNSDECLS TEDITDECLS)
)
(DECLARE%: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS 

(ADDTOVAR NLAMA )

(ADDTOVAR NLAML )

(ADDTOVAR LAMA \WRITEDIRTYPAGE \UNLOCKPAGES \TEMPUNLOCKPAGES \SHOWPAGETABLE \MOVEVMEMFILEPAGE 
                         \LOCKPAGES \LOCKEDPAGEP \DOTEMPLOCKPAGES \DOLOCKPAGES \DIRTYBACKGROUND 
                         \COUNTREALPAGES CHECKPAGEMAP)
)
(PUTPROPS MAIKOLOADUPFNS COPYRIGHT ("ENVOS Corporation" 1989))
(DECLARE%: DONTCOPY
  (FILEMAP (NIL (2805 32022 (CL::%%COPY-TIME-STATS 2815 . 3011) (CHECKPAGEMAP 3013 . 3131) (CLOCK 3133
 . 3282) (CLOCK0 3284 . 3434) (DAYTIME 3436 . 3587) (SETTIME 3589 . 3863) (\10MB.RESTART.ETHER 3865 . 
4023) (\10MB.STARTDRIVER 4025 . 5407) (\10MB.TURNOFFETHER 5409 . 5567) (\10MB.TURNONETHER 5569 . 7562)
 (\10MBSENDPACKET 7564 . 9836) (\10MBWATCHER 9838 . 11159) (\BITBLTSUB 11161 . 11583) (\BLTCHAR 11585
 . 11717) (\CHECKSUM 11719 . 11884) (\CLOCK0 11886 . 12037) (\COUNTREALPAGES 12039 . 12158) (\DAYTIME0
 12160 . 12313) (\DIRTYBACKGROUND 12315 . 12437) (\DISPLAYLINE 12439 . 29688) (\DOLOCKPAGES 29690 . 
29808) (\DONEWPAGE 29810 . 29959) (\DORECLAIM 29961 . 30107) (\DOTEMPLOCKPAGES 30109 . 30231) (
\LOADVMEMPAGE 30233 . 30348) (\LOCKEDPAGEP 30350 . 30466) (\LOCKPAGES 30468 . 30584) (
\MOVEVMEMFILEPAGE 30586 . 30707) (\NEWPAGE 30709 . 30856) (\NS.SETTIME 30858 . 31136) (\PAGEFAULT 
31138 . 31250) (\PUP.SETTIME 31252 . 31531) (\SHOWPAGETABLE 31533 . 31653) (\TEMPUNLOCKPAGES 31655 . 
31777) (\UNLOCKPAGES 31779 . 31897) (\WRITEDIRTYPAGE 31899 . 32020)))))
STOP
