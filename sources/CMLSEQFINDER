(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)

(FILECREATED "14-Dec-2024 19:21:30" {WMEDLEY}<sources>CMLSEQFINDER.;2 33444  

      :EDIT-BY rmk

      :PREVIOUS-DATE "16-May-90 14:29:23" {WMEDLEY}<sources>CMLSEQFINDER.;1)


(PRETTYCOMPRINT CMLSEQFINDERCOMS)

(RPAQQ CMLSEQFINDERCOMS
       ((DECLARE%: EVAL@COMPILE DONTCOPY (FILES CMLSEQCOMMON))
        (FUNCTIONS SIMPLE-FIND-MACRO SIMPLE-FIND SIMPLE-FIND-IF SIMPLE-FIND-IF-NOT COMPLEX-FIND-MACRO
               COMPLEX-FIND COMPLEX-FIND-IF COMPLEX-FIND-IF-NOT CL:FIND CL:FIND-IF CL:FIND-IF-NOT)
        (FUNCTIONS SIMPLE-POSITION-MACRO SIMPLE-POSITION SIMPLE-POSITION-IF SIMPLE-POSITION-IF-NOT 
               COMPLEX-POSITION-MACRO COMPLEX-POSITION COMPLEX-POSITION-IF COMPLEX-POSITION-IF-NOT 
               CL:POSITION CL:POSITION-IF CL:POSITION-IF-NOT)
        (FUNCTIONS SIMPLE-COUNT-MACRO SIMPLE-COUNT SIMPLE-COUNT-IF SIMPLE-COUNT-IF-NOT COMPLEX-COUNT
               COMPLEX-COUNT-IF COMPLEX-COUNT-IF-NOT CL:COUNT CL:COUNT-IF CL:COUNT-IF-NOT)
        (FUNCTIONS COMPLEX-COMPARE-BACKWARD COMPLEX-COMPARE-FORWARD SIMPLE-COMPARE CL:MISMATCH 
               CL:SEARCH)
        (PROP FILETYPE CMLSEQFINDER)
        (DECLARE%: DONTCOPY DOEVAL@COMPILE DONTEVAL@LOAD (LOCALVARS . T))))
(DECLARE%: EVAL@COMPILE DONTCOPY 

(FILESLOAD CMLSEQCOMMON)
)

(DEFMACRO SIMPLE-FIND-MACRO (ITEM SEQUENCE START END TEST-FORM)
   `[SEQ-DISPATCH ,SEQUENCE (FORWARD-LIST-LOOP ,SEQUENCE ,START ,END (INDEX CURRENT)
                                   NIL
                                   (CL:IF ,TEST-FORM (RETURN CURRENT)))
           (FORWARD-VECTOR-LOOP ,SEQUENCE ,START ,END (INDEX CURRENT)
                  NIL
                  (CL:IF ,TEST-FORM (RETURN CURRENT])

(CL:DEFUN SIMPLE-FIND (ITEM SEQUENCE START END)
   (SIMPLE-FIND-MACRO ITEM SEQUENCE START END (EQL ITEM CURRENT)))

(CL:DEFUN SIMPLE-FIND-IF (TEST SEQUENCE START END)
   (SIMPLE-FIND-MACRO ITEM SEQUENCE START END (CL:FUNCALL TEST CURRENT)))

(CL:DEFUN SIMPLE-FIND-IF-NOT (TEST SEQUENCE START END)
   (SIMPLE-FIND-MACRO ITEM SEQUENCE START END (NOT (CL:FUNCALL TEST CURRENT))))

(DEFMACRO COMPLEX-FIND-MACRO (ITEM SEQUENCE START END FROM-END KEY TEST-FORM)
   `(CL:IF (NULL ,FROM-END)
        [SEQ-DISPATCH ,SEQUENCE (FORWARD-LIST-LOOP ,SEQUENCE ,START ,END (INDEX CURRENT)
                                       NIL
                                       (CL:IF ,TEST-FORM (RETURN CURRENT)))
               (FORWARD-VECTOR-LOOP ,SEQUENCE ,START ,END (INDEX CURRENT)
                      NIL
                      (CL:IF ,TEST-FORM (RETURN CURRENT]
        [SEQ-DISPATCH ,SEQUENCE (FORWARD-LIST-LOOP ,SEQUENCE ,START ,END (INDEX CURRENT LAST-ELEMENT)
                                       LAST-ELEMENT
                                       (CL:IF ,TEST-FORM (SETQ LAST-ELEMENT CURRENT)))
               (BACKWARD-VECTOR-LOOP ,SEQUENCE ,START ,END (INDEX CURRENT)
                      NIL
                      (CL:IF ,TEST-FORM (RETURN CURRENT]))

(CL:DEFUN COMPLEX-FIND (ITEM SEQUENCE START END FROM-END KEY TEST TEST-NOT-P)
   [COMPLEX-FIND-MACRO ITEM SEQUENCE START END FROM-END KEY (CL:IF TEST-NOT-P
                                                                (NOT (CL:FUNCALL TEST ITEM
                                                                            (CL:FUNCALL KEY CURRENT))
                                                                     )
                                                                (CL:FUNCALL TEST ITEM
                                                                       (CL:FUNCALL KEY CURRENT)))])

(CL:DEFUN COMPLEX-FIND-IF (TEST SEQUENCE START END FROM-END KEY)
   (COMPLEX-FIND-MACRO ITEM SEQUENCE START END FROM-END KEY (CL:FUNCALL TEST (CL:FUNCALL KEY CURRENT)
                                                                   )))

(CL:DEFUN COMPLEX-FIND-IF-NOT (TEST SEQUENCE START END FROM-END KEY)
   [COMPLEX-FIND-MACRO ITEM SEQUENCE START END FROM-END KEY (NOT (CL:FUNCALL TEST (CL:FUNCALL KEY 
                                                                                         CURRENT])

(CL:DEFUN CL:FIND (ITEM SEQUENCE &KEY (START 0)
                        END
                        (FROM-END NIL FROM-END-P)
                        (KEY 'CL:IDENTITY KEY-P)
                        (TEST 'EQL TEST-P)
                        (TEST-NOT NIL TEST-NOT-P))
   "Returns the first element in SEQUENCE satisfying the test (default is EQL) with the given ITEM"
   (LET ((LENGTH (CL:LENGTH SEQUENCE)))
        (CL:IF (NULL END)
               (SETQ END LENGTH))
        (CHECK-SUBSEQ SEQUENCE START END LENGTH)
        (CL:IF (AND TEST-P TEST-NOT-P)
               (CL:ERROR "Both Test and Test-not specified"))
        (CL:IF (OR FROM-END-P KEY-P TEST-P TEST-NOT-P)
            (COMPLEX-FIND ITEM SEQUENCE START END FROM-END KEY (CL:IF TEST-NOT-P
                                                                   TEST-NOT
                                                                   TEST)
                   TEST-NOT-P)
            (SIMPLE-FIND ITEM SEQUENCE START END))))

(CL:DEFUN CL:FIND-IF (TEST SEQUENCE &KEY (START 0)
                           END
                           (FROM-END NIL FROM-END-P)
                           (KEY 'CL:IDENTITY KEY-P))
   "Returns the zero-origin index of the first element satisfying the test."
   (LET ((LENGTH (CL:LENGTH SEQUENCE)))
        (CL:IF (NULL END)
               (SETQ END LENGTH))
        (CHECK-SUBSEQ SEQUENCE START END LENGTH)
        (CL:IF (OR FROM-END-P KEY-P)
            (COMPLEX-FIND-IF TEST SEQUENCE START END FROM-END KEY)
            (SIMPLE-FIND-IF TEST SEQUENCE START END))))

(CL:DEFUN CL:FIND-IF-NOT (TEST SEQUENCE &KEY (START 0)
                               END
                               (FROM-END NIL FROM-END-P)
                               (KEY 'CL:IDENTITY KEY-P))
   "Returns the zero-origin index of the first element not satisfying the test."
   (LET ((LENGTH (CL:LENGTH SEQUENCE)))
        (CL:IF (NULL END)
               (SETQ END LENGTH))
        (CHECK-SUBSEQ SEQUENCE START END LENGTH)
        (CL:IF (OR FROM-END-P KEY-P)
            (COMPLEX-FIND-IF-NOT TEST SEQUENCE START END FROM-END KEY)
            (SIMPLE-FIND-IF-NOT TEST SEQUENCE START END))))

(DEFMACRO SIMPLE-POSITION-MACRO (ITEM SEQUENCE START END TEST-FORM)
   `[SEQ-DISPATCH ,SEQUENCE (FORWARD-LIST-LOOP ,SEQUENCE ,START ,END (INDEX CURRENT)
                                   NIL
                                   (CL:IF ,TEST-FORM (RETURN INDEX)))
           (FORWARD-VECTOR-LOOP ,SEQUENCE ,START ,END (INDEX CURRENT)
                  NIL
                  (CL:IF ,TEST-FORM (RETURN INDEX])

(CL:DEFUN SIMPLE-POSITION (ITEM SEQUENCE START END)
   (SIMPLE-POSITION-MACRO ITEM SEQUENCE START END (EQL ITEM CURRENT)))

(CL:DEFUN SIMPLE-POSITION-IF (TEST SEQUENCE START END)
   (SIMPLE-POSITION-MACRO ITEM SEQUENCE START END (CL:FUNCALL TEST CURRENT)))

(CL:DEFUN SIMPLE-POSITION-IF-NOT (TEST SEQUENCE START END)
   (SIMPLE-POSITION-MACRO ITEM SEQUENCE START END (NOT (CL:FUNCALL TEST CURRENT))))

(DEFMACRO COMPLEX-POSITION-MACRO (ITEM SEQUENCE START END FROM-END KEY TEST-FORM)
   `(CL:IF (NULL ,FROM-END)
        [SEQ-DISPATCH ,SEQUENCE (FORWARD-LIST-LOOP ,SEQUENCE ,START ,END (INDEX CURRENT)
                                       NIL
                                       (CL:IF ,TEST-FORM (RETURN INDEX)))
               (FORWARD-VECTOR-LOOP ,SEQUENCE ,START ,END (INDEX CURRENT)
                      NIL
                      (CL:IF ,TEST-FORM (RETURN INDEX]
        [SEQ-DISPATCH ,SEQUENCE (FORWARD-LIST-LOOP ,SEQUENCE ,START ,END (INDEX CURRENT LAST-INDEX)
                                       LAST-INDEX
                                       (CL:IF ,TEST-FORM (SETQ LAST-INDEX INDEX)))
               (BACKWARD-VECTOR-LOOP ,SEQUENCE ,START ,END (INDEX CURRENT)
                      NIL
                      (CL:IF ,TEST-FORM (RETURN INDEX]))

(CL:DEFUN COMPLEX-POSITION (ITEM SEQUENCE START END FROM-END KEY TEST TEST-NOT-P)
   [COMPLEX-POSITION-MACRO ITEM SEQUENCE START END FROM-END KEY (CL:IF TEST-NOT-P
                                                                    (NOT (CL:FUNCALL TEST ITEM
                                                                                (CL:FUNCALL KEY 
                                                                                       CURRENT)))
                                                                    (CL:FUNCALL TEST ITEM
                                                                           (CL:FUNCALL KEY CURRENT)))
          ])

(CL:DEFUN COMPLEX-POSITION-IF (TEST SEQUENCE START END FROM-END KEY)
   (COMPLEX-POSITION-MACRO ITEM SEQUENCE START END FROM-END KEY (CL:FUNCALL TEST (CL:FUNCALL KEY 
                                                                                        CURRENT))))

(CL:DEFUN COMPLEX-POSITION-IF-NOT (TEST SEQUENCE START END FROM-END KEY)
   [COMPLEX-POSITION-MACRO ITEM SEQUENCE START END FROM-END KEY (NOT (CL:FUNCALL TEST
                                                                            (CL:FUNCALL KEY CURRENT])

(CL:DEFUN CL:POSITION (ITEM SEQUENCE &KEY (START 0)
                            END
                            (FROM-END NIL FROM-END-P)
                            (KEY 'CL:IDENTITY KEY-P)
                            (TEST 'EQL TEST-P)
                            (TEST-NOT NIL TEST-NOT-P))
   "Returns the zero-origin index of the first element in SEQUENCE satisfying the test (default is EQL) with the given ITEM"
   (LET ((LENGTH (CL:LENGTH SEQUENCE)))
        (CL:IF (NULL END)
               (SETQ END LENGTH))
        (CHECK-SUBSEQ SEQUENCE START END LENGTH)
        (CL:IF (AND TEST-P TEST-NOT-P)
               (CL:ERROR "Both Test and Test-not specified"))
        (CL:IF (OR FROM-END-P KEY-P TEST-P TEST-NOT-P)
            (COMPLEX-POSITION ITEM SEQUENCE START END FROM-END KEY (CL:IF TEST-NOT-P
                                                                       TEST-NOT
                                                                       TEST)
                   TEST-NOT-P)
            (SIMPLE-POSITION ITEM SEQUENCE START END))))

(CL:DEFUN CL:POSITION-IF (TEST SEQUENCE &KEY (START 0)
                               END
                               (FROM-END NIL FROM-END-P)
                               (KEY 'CL:IDENTITY KEY-P))
   "Returns the zero-origin index of the first element satisfying test(el)"
   (LET ((LENGTH (CL:LENGTH SEQUENCE)))
        (CL:IF (NULL END)
               (SETQ END LENGTH))
        (CHECK-SUBSEQ SEQUENCE START END LENGTH)
        (CL:IF (OR FROM-END-P KEY-P)
            (COMPLEX-POSITION-IF TEST SEQUENCE START END FROM-END KEY)
            (SIMPLE-POSITION-IF TEST SEQUENCE START END))))

(CL:DEFUN CL:POSITION-IF-NOT (TEST SEQUENCE &KEY (START 0)
                                   END
                                   (FROM-END NIL FROM-END-P)
                                   (KEY 'CL:IDENTITY KEY-P))
   "Returns the zero-origin index of the first element not satisfying test(el)"
   (LET ((LENGTH (CL:LENGTH SEQUENCE)))
        (CL:IF (NULL END)
               (SETQ END LENGTH))
        (CHECK-SUBSEQ SEQUENCE START END LENGTH)
        (CL:IF (OR FROM-END-P KEY-P)
            (COMPLEX-POSITION-IF-NOT TEST SEQUENCE START END FROM-END KEY)
            (SIMPLE-POSITION-IF-NOT TEST SEQUENCE START END))))

(DEFMACRO SIMPLE-COUNT-MACRO (ITEM SEQUENCE START END TEST-FORM)
   `[SEQ-DISPATCH ,SEQUENCE [FORWARD-LIST-LOOP ,SEQUENCE ,START ,END (INDEX CURRENT (CNT 0))
                                   CNT
                                   (CL:IF ,TEST-FORM
                                       (SETQ CNT (CL:1+ CNT)))]
           (FORWARD-VECTOR-LOOP ,SEQUENCE ,START ,END (INDEX CURRENT (CNT 0))
                  CNT
                  (CL:IF ,TEST-FORM
                      (SETQ CNT (CL:1+ CNT)))])

(CL:DEFUN SIMPLE-COUNT (ITEM SEQUENCE START END)
   (SIMPLE-COUNT-MACRO ITEM SEQUENCE START END (EQL ITEM CURRENT)))

(CL:DEFUN SIMPLE-COUNT-IF (TEST SEQUENCE START END)
   (SIMPLE-COUNT-MACRO ITEM SEQUENCE START END (CL:FUNCALL TEST CURRENT)))

(CL:DEFUN SIMPLE-COUNT-IF-NOT (TEST SEQUENCE START END)
   (SIMPLE-COUNT-MACRO ITEM SEQUENCE START END (NOT (CL:FUNCALL TEST CURRENT))))

(CL:DEFUN COMPLEX-COUNT (ITEM SEQUENCE START END KEY TEST TEST-NOT-P)
   [SIMPLE-COUNT-MACRO ITEM SEQUENCE START END (CL:IF TEST-NOT-P
                                                   (NOT (CL:FUNCALL TEST ITEM (CL:FUNCALL KEY CURRENT
                                                                                     )))
                                                   (CL:FUNCALL TEST ITEM (CL:FUNCALL KEY CURRENT)))])

(CL:DEFUN COMPLEX-COUNT-IF (TEST SEQUENCE START END KEY)
   (SIMPLE-COUNT-MACRO ITEM SEQUENCE START END (CL:FUNCALL TEST (CL:FUNCALL KEY CURRENT))))

(CL:DEFUN COMPLEX-COUNT-IF-NOT (TEST SEQUENCE START END KEY)
   [SIMPLE-COUNT-MACRO ITEM SEQUENCE START END (NOT (CL:FUNCALL TEST (CL:FUNCALL KEY CURRENT])

(CL:DEFUN CL:COUNT (ITEM SEQUENCE &KEY (START 0)
                         END FROM-END (KEY 'CL:IDENTITY KEY-P)
                         (TEST 'EQL TEST-P)
                         (TEST-NOT NIL TEST-NOT-P))
   (LET ((LENGTH (CL:LENGTH SEQUENCE)))
        (CL:IF (NULL END)
               (SETQ END LENGTH))
        (CHECK-SUBSEQ SEQUENCE START END LENGTH)
        (CL:IF (AND TEST-P TEST-NOT-P)
               (CL:ERROR "Both Test and Test-not specified"))
        (CL:IF (OR KEY-P TEST-P TEST-NOT-P)
            (COMPLEX-COUNT ITEM SEQUENCE START END KEY (CL:IF TEST-NOT-P
                                                           TEST-NOT
                                                           TEST)
                   TEST-NOT-P)
            (SIMPLE-COUNT ITEM SEQUENCE START END))))

(CL:DEFUN CL:COUNT-IF (TEST SEQUENCE &KEY (START 0)
                            END FROM-END (KEY 'CL:IDENTITY KEY-P))
   (LET ((LENGTH (CL:LENGTH SEQUENCE)))
        (CL:IF (NULL END)
               (SETQ END LENGTH))
        (CHECK-SUBSEQ SEQUENCE START END LENGTH)
        (CL:IF KEY-P
            (COMPLEX-COUNT-IF TEST SEQUENCE START END KEY)
            (SIMPLE-COUNT-IF TEST SEQUENCE START END))))

(CL:DEFUN CL:COUNT-IF-NOT (TEST SEQUENCE &KEY (START 0)
                                END FROM-END (KEY 'CL:IDENTITY KEY-P))
   (LET ((LENGTH (CL:LENGTH SEQUENCE)))
        (CL:IF (NULL END)
               (SETQ END LENGTH))
        (CHECK-SUBSEQ SEQUENCE START END LENGTH)
        (CL:IF KEY-P
            (COMPLEX-COUNT-IF-NOT TEST SEQUENCE START END KEY)
            (SIMPLE-COUNT-IF-NOT TEST SEQUENCE START END))))

(CL:DEFUN COMPLEX-COMPARE-BACKWARD (SEQUENCE1 SEQUENCE2 START1 END1 START2 END2 KEY TEST TEST-NOT-P)
   [LET ((LEN1 (- END1 START1))
         (LEN2 (- END2 START2)))
        (CL:IF (> LEN1 LEN2)
            (SETQ START1 (- END1 LEN2))
            (SETQ START2 (- END2 LEN1)))
        (SEQ-DISPATCH SEQUENCE1 [SEQ-DISPATCH SEQUENCE2 (CL:DO ((SUBSEQ1 (CL:NTHCDR START1 SEQUENCE1)
                                                                       (CDR SUBSEQ1))
                                                                (SUBSEQ2 (CL:NTHCDR START2 SEQUENCE2)
                                                                       (CDR SUBSEQ2))
                                                                (INDEX1 START1 (CL:1+ INDEX1))
                                                                (LAST-MISMATCH (CL:1- START1))
                                                                TEST-RESULT)
                                                               ((EQL INDEX1 END1)
                                                                (CL:1+ LAST-MISMATCH))
                                                            [SETQ TEST-RESULT
                                                             (CL:FUNCALL TEST (CL:FUNCALL
                                                                               KEY
                                                                               (CAR SUBSEQ1))
                                                                    (CL:FUNCALL KEY (CAR SUBSEQ2]
                                                            (CL:IF (CL:IF TEST-NOT-P
                                                                       TEST-RESULT
                                                                       (NOT TEST-RESULT))
                                                                   (SETQ LAST-MISMATCH INDEX1)))
                                       (CL:DO ((SUBSEQ1 (CL:NTHCDR START1 SEQUENCE1)
                                                      (CDR SUBSEQ1))
                                               (INDEX1 START1 (CL:1+ INDEX1))
                                               (INDEX2 START2 (CL:1+ INDEX2))
                                               (LAST-MISMATCH (CL:1- START1))
                                               TEST-RESULT)
                                              ((EQL INDEX1 END1)
                                               (CL:1+ LAST-MISMATCH))
                                           [SETQ TEST-RESULT (CL:FUNCALL TEST (CL:FUNCALL
                                                                               KEY
                                                                               (CAR SUBSEQ1))
                                                                    (CL:FUNCALL KEY (CL:AREF 
                                                                                           SEQUENCE2
                                                                                           INDEX2]
                                           (CL:IF (CL:IF TEST-NOT-P
                                                      TEST-RESULT
                                                      (NOT TEST-RESULT))
                                                  (SETQ LAST-MISMATCH INDEX1)))]
               (SEQ-DISPATCH SEQUENCE2 (CL:DO ((SUBSEQ2 (CL:NTHCDR START2 SEQUENCE2)
                                                      (CDR SUBSEQ2))
                                               (INDEX1 START1 (CL:1+ INDEX1))
                                               (INDEX2 START2 (CL:1+ INDEX2))
                                               (LAST-MISMATCH (CL:1- START1))
                                               TEST-RESULT)
                                              ((EQL INDEX1 END1)
                                               (CL:1+ LAST-MISMATCH))
                                           [SETQ TEST-RESULT (CL:FUNCALL TEST (CL:FUNCALL
                                                                               KEY
                                                                               (CL:AREF SEQUENCE1 
                                                                                      INDEX1))
                                                                    (CL:FUNCALL KEY (CAR SUBSEQ2]
                                           (CL:IF (CL:IF TEST-NOT-P
                                                      TEST-RESULT
                                                      (NOT TEST-RESULT))
                                                  (SETQ LAST-MISMATCH INDEX1)))
                      (CL:DO ((INDEX1 (CL:1- END1)
                                     (CL:1- INDEX1))
                              (INDEX2 (CL:1- END2)
                                     (CL:1- INDEX2))
                              TEST-RESULT)
                             ([OR (< INDEX1 START1)
                                  (PROGN [SETQ TEST-RESULT (CL:FUNCALL TEST (CL:FUNCALL KEY
                                                                                   (CL:AREF SEQUENCE1
                                                                                          INDEX1))
                                                                  (CL:FUNCALL KEY (CL:AREF SEQUENCE2
                                                                                         INDEX2]
                                         (CL:IF TEST-NOT-P
                                             TEST-RESULT
                                             (NOT TEST-RESULT))]
                              (CL:1+ INDEX1)))])

(CL:DEFUN COMPLEX-COMPARE-FORWARD (SEQUENCE1 SEQUENCE2 START1 END1 START2 END2 KEY TEST TEST-NOT-P)
   [LET ((LEN1 (- END1 START1))
         (LEN2 (- END2 START2)))
        (CL:IF (> LEN1 LEN2)
            (SETQ END1 (+ START1 LEN2))
            (SETQ END2 (+ START2 LEN1)))
        (SEQ-DISPATCH SEQUENCE1 (SEQ-DISPATCH SEQUENCE2
                                       (CL:DO ((SUBSEQ1 (CL:NTHCDR START1 SEQUENCE1)
                                                      (CDR SUBSEQ1))
                                               (SUBSEQ2 (CL:NTHCDR START2 SEQUENCE2)
                                                      (CDR SUBSEQ2))
                                               (INDEX1 START1 (CL:1+ INDEX1))
                                               TEST-RESULT)
                                              ([OR (EQL INDEX1 END1)
                                                   (PROGN [SETQ TEST-RESULT
                                                           (CL:FUNCALL TEST (CL:FUNCALL KEY
                                                                                   (CAR SUBSEQ1))
                                                                  (CL:FUNCALL KEY (CAR SUBSEQ2]
                                                          (CL:IF TEST-NOT-P
                                                              TEST-RESULT
                                                              (NOT TEST-RESULT))]
                                               INDEX1))
                                       (CL:DO ((SUBSEQ1 (CL:NTHCDR START1 SEQUENCE1)
                                                      (CDR SUBSEQ1))
                                               (INDEX1 START1 (CL:1+ INDEX1))
                                               (INDEX2 START2 (CL:1+ INDEX2))
                                               TEST-RESULT)
                                              ([OR (EQL INDEX1 END1)
                                                   (PROGN [SETQ TEST-RESULT
                                                           (CL:FUNCALL TEST (CL:FUNCALL KEY
                                                                                   (CAR SUBSEQ1))
                                                                  (CL:FUNCALL KEY (CL:AREF SEQUENCE2
                                                                                         INDEX2]
                                                          (CL:IF TEST-NOT-P
                                                              TEST-RESULT
                                                              (NOT TEST-RESULT))]
                                               INDEX1)))
               (SEQ-DISPATCH SEQUENCE2 (CL:DO ((SUBSEQ2 (CL:NTHCDR START2 SEQUENCE2)
                                                      (CDR SUBSEQ2))
                                               (INDEX1 START1 (CL:1+ INDEX1))
                                               TEST-RESULT)
                                              ([OR (EQL INDEX1 END1)
                                                   (PROGN [SETQ TEST-RESULT
                                                           (CL:FUNCALL TEST (CL:FUNCALL KEY
                                                                                   (CL:AREF SEQUENCE1
                                                                                          INDEX1))
                                                                  (CL:FUNCALL KEY (CAR SUBSEQ2]
                                                          (CL:IF TEST-NOT-P
                                                              TEST-RESULT
                                                              (NOT TEST-RESULT))]
                                               INDEX1))
                      (CL:DO ((INDEX1 START1 (CL:1+ INDEX1))
                              (INDEX2 START2 (CL:1+ INDEX2))
                              TEST-RESULT)
                             ([OR (EQL INDEX1 END1)
                                  (PROGN [SETQ TEST-RESULT (CL:FUNCALL TEST (CL:FUNCALL KEY
                                                                                   (CL:AREF SEQUENCE1
                                                                                          INDEX1))
                                                                  (CL:FUNCALL KEY (CL:AREF SEQUENCE2
                                                                                         INDEX2]
                                         (CL:IF TEST-NOT-P
                                             TEST-RESULT
                                             (NOT TEST-RESULT))]
                              INDEX1))])

(CL:DEFUN SIMPLE-COMPARE (SEQUENCE1 SEQUENCE2 START1 END1 START2 END2)
   [LET ((LEN1 (- END1 START1))
         (LEN2 (- END2 START2)))
        (CL:IF (> LEN1 LEN2)
            (SETQ END1 (+ START1 LEN2))
            (SETQ END2 (+ START2 LEN1)))
        (SEQ-DISPATCH SEQUENCE1 (SEQ-DISPATCH SEQUENCE2 (CL:DO ((SUBSEQ1 (CL:NTHCDR START1 SEQUENCE1)
                                                                       (CDR SUBSEQ1))
                                                                (SUBSEQ2 (CL:NTHCDR START2 SEQUENCE2)
                                                                       (CDR SUBSEQ2))
                                                                (INDEX1 START1 (CL:1+ INDEX1)))
                                                               ([OR (EQL INDEX1 END1)
                                                                    (NOT (EQL (CAR SUBSEQ1)
                                                                              (CAR SUBSEQ2]
                                                                INDEX1))
                                       (CL:DO ((SUBSEQ1 (CL:NTHCDR START1 SEQUENCE1)
                                                      (CDR SUBSEQ1))
                                               (INDEX1 START1 (CL:1+ INDEX1))
                                               (INDEX2 START2 (CL:1+ INDEX2)))
                                              ([OR (EQL INDEX1 END1)
                                                   (NOT (EQL (CAR SUBSEQ1)
                                                             (CL:AREF SEQUENCE2 INDEX2]
                                               INDEX1)))
               (SEQ-DISPATCH SEQUENCE2 (CL:DO ((SUBSEQ2 (CL:NTHCDR START2 SEQUENCE2)
                                                      (CDR SUBSEQ2))
                                               (INDEX1 START1 (CL:1+ INDEX1)))
                                              ([OR (EQL INDEX1 END1)
                                                   (NOT (EQL (CL:AREF SEQUENCE1 INDEX1)
                                                             (CAR SUBSEQ2]
                                               INDEX1))
                      (CL:DO ((INDEX1 START1 (CL:1+ INDEX1))
                              (INDEX2 START2 (CL:1+ INDEX2)))
                             ([OR (EQL INDEX1 END1)
                                  (NOT (EQL (CL:AREF SEQUENCE1 INDEX1)
                                            (CL:AREF SEQUENCE2 INDEX2]
                              INDEX1))])

(CL:DEFUN CL:MISMATCH (SEQUENCE1 SEQUENCE2 &KEY (START1 0)
                             END1
                             (START2 0)
                             END2
                             (FROM-END NIL FROM-END-P)
                             (TEST 'EQL TEST-P)
                             (TEST-NOT NIL TEST-NOT-P)
                             (KEY 'CL:IDENTITY KEY-P))
   [LET ((LENGTH1 (CL:LENGTH SEQUENCE1))
         (LENGTH2 (CL:LENGTH SEQUENCE2)))
        (CL:IF (NULL END1)
               (SETQ END1 LENGTH1))
        (CL:IF (NULL END2)
               (SETQ END2 LENGTH2))
        (CHECK-SUBSEQ SEQUENCE1 START1 END1 LENGTH1)
        (CHECK-SUBSEQ SEQUENCE2 START2 END2 LENGTH2)
        (CL:IF (AND TEST-P TEST-NOT-P)
               (CL:ERROR "Both Test and test-not provided"))
        (LET ((SUBLEN1 (- END1 START1))
              (SUBLEN2 (- END2 START2)))
             (CL:IF FROM-END
                 (LET ((INDEX (COMPLEX-COMPARE-BACKWARD SEQUENCE1 SEQUENCE2 START1 END1 START2 END2 
                                     KEY (CL:IF TEST-NOT-P
                                             TEST-NOT
                                             TEST)
                                     TEST-NOT-P)))
                      (CL:IF (AND (EQL INDEX START1)
                                  (EQL SUBLEN1 SUBLEN2))
                          NIL
                          INDEX))
                 (LET [(INDEX (CL:IF (OR KEY-P TEST-P TEST-NOT-P KEY-P)
                                  (COMPLEX-COMPARE-FORWARD SEQUENCE1 SEQUENCE2 START1 END1 START2 
                                         END2 KEY (CL:IF TEST-NOT-P
                                                      TEST-NOT
                                                      TEST)
                                         TEST-NOT-P)
                                  (SIMPLE-COMPARE SEQUENCE1 SEQUENCE2 START1 END1 START2 END2))]
                      (CL:IF (AND (EQL INDEX END1)
                                  (EQL SUBLEN1 SUBLEN2))
                          NIL
                          INDEX)))])

(CL:DEFUN CL:SEARCH (SEQUENCE1 SEQUENCE2 &KEY (START1 0)
                           END1
                           (START2 0)
                           END2
                           (FROM-END NIL FROM-END-P)
                           (TEST 'EQL TEST-P)
                           (TEST-NOT NIL TEST-NOT-P)
                           (KEY 'CL:IDENTITY KEY-P))
   "A search is conducted for the first subsequence of sequence2 which element-wise matches sequence1.  If there is such a subsequence in sequence2, the index of the its leftmost element is returned otherwise () is returned."
   [LET ((LENGTH1 (CL:LENGTH SEQUENCE1))
         (LENGTH2 (CL:LENGTH SEQUENCE2)))
        (CL:IF (NULL END1)
               (SETQ END1 LENGTH1))
        (CL:IF (NULL END2)
               (SETQ END2 LENGTH2))
        (CHECK-SUBSEQ SEQUENCE1 START1 END1 LENGTH1)
        (CHECK-SUBSEQ SEQUENCE2 START2 END2 LENGTH2)
        (CL:IF (AND TEST-P TEST-NOT-P)
               (CL:ERROR "Both Test and test-not provided"))
        (LET ((SUBLEN1 (- END1 START1))
              (SUBLEN2 (- END2 START2)))
             (CL:IF (NULL FROM-END)
                 (CL:IF (NOT (OR TEST-P TEST-NOT-P KEY-P))
                     (CL:DO ((SUBSTART2 START2 (CL:1+ SUBSTART2))
                             (END-SEARCH (- END2 SUBLEN1)))
                            ((> SUBSTART2 END-SEARCH))
                         (CL:IF (EQL (SIMPLE-COMPARE SEQUENCE1 SEQUENCE2 START1 END1 SUBSTART2 END2)
                                     END1)
                                (RETURN SUBSTART2)))
                     (CL:DO ((SUBSTART2 START2 (CL:1+ SUBSTART2))
                             (END-SEARCH (- END2 SUBLEN1))
                             (PREDICATE (CL:IF TEST-NOT-P
                                            TEST-NOT
                                            TEST))
                             INDEX)
                            ((> SUBSTART2 END-SEARCH))
                         (SETQ INDEX (COMPLEX-COMPARE-FORWARD SEQUENCE1 SEQUENCE2 START1 END1 
                                            SUBSTART2 END2 KEY PREDICATE TEST-NOT-P))
                         (CL:IF (EQL INDEX END1)
                                (RETURN SUBSTART2))))
                 (CL:IF (NOT (OR TEST-P TEST-NOT-P KEY-P))
                     (CL:DO ((SUBSTART2 (- END2 SUBLEN1)
                                    (CL:1- SUBSTART2)))
                            ((< SUBSTART2 START2))
                         (CL:IF (EQL (SIMPLE-COMPARE SEQUENCE1 SEQUENCE2 START1 END1 SUBSTART2 END2)
                                     END1)
                                (RETURN SUBSTART2)))
                     (CL:DO ((SUBSTART2 (- END2 SUBLEN1)
                                    (CL:1- SUBSTART2))
                             (PREDICATE (CL:IF TEST-NOT-P
                                            TEST-NOT
                                            TEST)))
                            ((< SUBSTART2 START2))
                         (CL:IF (EQL (COMPLEX-COMPARE-FORWARD SEQUENCE1 SEQUENCE2 START1 END1 
                                            SUBSTART2 END2 KEY PREDICATE TEST-NOT-P)
                                     END1)
                                (RETURN SUBSTART2)))))])

(PUTPROPS CMLSEQFINDER FILETYPE CL:COMPILE-FILE)
(DECLARE%: DONTCOPY DOEVAL@COMPILE DONTEVAL@LOAD 
(DECLARE%: DOEVAL@COMPILE DONTCOPY

(LOCALVARS . T)
)
)
(DECLARE%: DONTCOPY
  (FILEMAP (NIL (1336 1745 (SIMPLE-FIND-MACRO 1336 . 1745)) (1747 1869 (SIMPLE-FIND 1747 . 1869)) (1871 
2003 (SIMPLE-FIND-IF 1871 . 2003)) (2005 2147 (SIMPLE-FIND-IF-NOT 2005 . 2147)) (2149 3024 (
COMPLEX-FIND-MACRO 2149 . 3024)) (3026 3639 (COMPLEX-FIND 3026 . 3639)) (3641 3886 (COMPLEX-FIND-IF 
3641 . 3886)) (3888 4162 (COMPLEX-FIND-IF-NOT 3888 . 4162)) (4164 5163 (CL:FIND 4164 . 5163)) (5165 
5750 (CL:FIND-IF 5165 . 5750)) (5752 6365 (CL:FIND-IF-NOT 5752 . 6365)) (6367 6776 (
SIMPLE-POSITION-MACRO 6367 . 6776)) (6778 6908 (SIMPLE-POSITION 6778 . 6908)) (6910 7050 (
SIMPLE-POSITION-IF 6910 . 7050)) (7052 7202 (SIMPLE-POSITION-IF-NOT 7052 . 7202)) (7204 8069 (
COMPLEX-POSITION-MACRO 7204 . 8069)) (8071 8737 (COMPLEX-POSITION 8071 . 8737)) (8739 9013 (
COMPLEX-POSITION-IF 8739 . 9013)) (9015 9283 (COMPLEX-POSITION-IF-NOT 9015 . 9283)) (9285 10349 (
CL:POSITION 9285 . 10349)) (10351 10959 (CL:POSITION-IF 10351 . 10959)) (10961 11597 (CL:POSITION-IF-NOT
 10961 . 11597)) (11599 12100 (SIMPLE-COUNT-MACRO 11599 . 12100)) (12102 12226 (SIMPLE-COUNT 12102 . 
12226)) (12228 12362 (SIMPLE-COUNT-IF 12228 . 12362)) (12364 12508 (SIMPLE-COUNT-IF-NOT 12364 . 12508)
) (12510 12945 (COMPLEX-COUNT 12510 . 12945)) (12947 13103 (COMPLEX-COUNT-IF 12947 . 13103)) (13105 
13268 (COMPLEX-COUNT-IF-NOT 13105 . 13268)) (13270 14074 (CL:COUNT 13270 . 14074)) (14076 14492 (
CL:COUNT-IF 14076 . 14492)) (14494 14926 (CL:COUNT-IF-NOT 14494 . 14926)) (14928 20608 (
COMPLEX-COMPARE-BACKWARD 14928 . 20608)) (20610 25345 (COMPLEX-COMPARE-FORWARD 20610 . 25345)) (25347 
27890 (SIMPLE-COMPARE 25347 . 27890)) (27892 29989 (CL:MISMATCH 27892 . 29989)) (29991 33257 (CL:SEARCH
 29991 . 33257)))))
STOP
