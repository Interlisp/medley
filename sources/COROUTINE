(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE "INTERLISP")
(FILECREATED "16-May-90 15:10:30" |{DSK}<usr>local>lde>lispcore>sources>COROUTINE.;2| 10064  

      |changes| |to:|  (VARS COROUTINECOMS)

      |previous| |date:| " 4-Dec-86 05:03:32" |{DSK}<usr>local>lde>lispcore>sources>COROUTINE.;1|)


; Copyright (c) 1986, 1990 by Venue & Xerox Corporation.  All rights reserved.

(PRETTYCOMPRINT COROUTINECOMS)

(RPAQQ COROUTINECOMS
       ((I.S.OPRS OUTOF)
        (OPTIMIZERS COROUTINE GENERATOR POSSIBILITIES TRYNEXT)
        (PROP (MACRO INFO)
              COROUTINE GENERATOR TRYNEXT POSSIBILITIES)
        (DECLARE\: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS
               (ADDVARS (NLAMA)
                      (NLAML TRYNEXT POSSIBILITIES GENERATOR COROUTINE)
                      (LAMA AU-REVOIR ADIEU)))
        (FNS COROUTINE GENERATOR GENERATE PRODUCE GENERATEFN)
        (FNS ADIEU AU-REVOIR CLEANPOSLST NOTE POSSIBILITIES TRYNEXT TRYNEXT1 POSSIBILITYFN)
        (ADDVARS (SYSSPECVARS COMVAR## POSSLIST##))
        (PROP FILETYPE COROUTINE)))
(DECLARE\: EVAL@COMPILE 

(I.S.OPR 'OUTOF NIL '(SUBST (GENSYM)
                            'GENVAR
                            '(BIND GENVAR _ (GENERATOR BODY)
                                EACHTIME (COND
                                                ((EQ (SETQ I.V. (GENERATE GENVAR))
                                                     GENVAR)
                                                 (GO $$OUT))) FINALLY (RELSTK (CDR GENVAR))))
       T)
)

(DEFOPTIMIZER COROUTINE (P1 P2 F1 F2)
                            `(PROGN (OR (STACKP ,P1)
                                        (SETQ ,P1 (STKNTH 0 T)))
                                    (OR (STACKP ,P2)
                                        (SETQ ,P2 (STKNTH 0 T)))
                                    ((LAMBDA (..MACROX.)
                                       (COND
                                          ((EQ ..MACROX. ,P2)
                                           ,P2)
                                          (T (RESUME ,P2 ..MACROX. ,P2)
                                             ,F1
                                             (RETTO ,P1 ,F2 T))))
                                     (STKNTH -1))))

(DEFOPTIMIZER GENERATOR (FORM COMVAR)
                            `(GENERATEFN (FUNCTION (LAMBDA NIL
                                                         ,FORM))
                                    ,COMVAR))

(DEFOPTIMIZER POSSIBILITIES (FORM)
                                `(POSSIBILITYFN (FUNCTION (LAMBDA NIL
                                                                ,FORM))))

(DEFOPTIMIZER TRYNEXT (PLST NOMORE MSG)
                          `(COND
                              ((SETQ ,PLST (TRYNEXT1 ,PLST ,MSG))
                               (PROG1 (CAR ,PLST)
                                   (SETQ ,PLST (CDR ,PLST))))
                              (T (SETQ ,PLST (CDR ,PLST))
                                 ,NOMORE)))

(PUTPROPS COROUTINE MACRO ((P1 P2 F1 F2)
                                   (PROGN (OR (STACKP P1)
                                              (SETQ P1 (STKNTH 0 T)))
                                          (OR (STACKP P2)
                                              (SETQ P2 (STKNTH 0 T)))
                                          ((LAMBDA (..MACROX.)
                                             (COND
                                                ((EQ ..MACROX. P2)
                                                 P2)
                                                (T (RESUME P2 ..MACROX. P2)
                                                   F1
                                                   (RETTO P1 F2 T))))
                                           (STKNTH -1)))))

(PUTPROPS GENERATOR MACRO ((FORM COMVAR)
                                   (GENERATEFN (FUNCTION (LAMBDA NIL FORM))
                                          COMVAR)))

(PUTPROPS TRYNEXT MACRO ((PLST NOMORE MSG)
                                 (COND
                                    ((SETQ PLST (TRYNEXT1 PLST MSG))
                                     (PROG1 (CAR PLST)
                                         (SETQ PLST (CDR PLST))))
                                    (T (SETQ PLST (CDR PLST))
                                       NOMORE))))

(PUTPROPS POSSIBILITIES MACRO ((FORM)
                                       (POSSIBILITYFN (FUNCTION (LAMBDA NIL FORM)))))

(PUTPROPS COROUTINE INFO EVAL)

(PUTPROPS GENERATOR INFO EVAL)

(PUTPROPS TRYNEXT INFO EVAL)

(PUTPROPS POSSIBILITIES INFO EVAL)
(DECLARE\: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS 

(ADDTOVAR NLAMA )

(ADDTOVAR NLAML TRYNEXT POSSIBILITIES GENERATOR COROUTINE)

(ADDTOVAR LAMA AU-REVOIR ADIEU)
)
(DEFINEQ

(coroutine
  (nlambda (callptr## coroutptr## coroutform## endform##)    (* |wt:| 17-apr-76 19 48)
          
          (* callptr## |and| coroutptr## are |the| |names| |of| |communication| 
          |variables| |in| |the| |function| |calling| coroutine.
          |They| |will| |be| |set| |to| |stkptrs| |if| |they| are |not| |already| |ones.|
          coroutform## |is| |the| |form| |which| |starts| |the| coroutine.
          endform## |is| |evaluated| |in| |the| |context| |of| |the| |caller| |when| 
          coroutform## |returns.|)

    (setq callptr## (set callptr## (or (stackp (evalv callptr##))
                                       (stknth 0 t))))
    (setq coroutptr## (set coroutptr## (or (stackp (evalv coroutptr##))
                                           (stknth 0 t))))
    (resume coroutptr## (stknth -1 'coroutine)
           coroutptr##)
    (eval coroutform##)
    (retto callptr## (enveval endform## (stknth -1 'coroutine)
                            nil t)
           t)))

(generator
  (nlambda (form## comvar##)
    (cond
       (comvar## (setq comvar## (eval comvar##))))
    (cond
       ((nlistp comvar##)
        (setq comvar## (cons (stknth 0 t)
                             (stknth 0 t))))
       (t (cond
             ((not (stackp (car comvar##)))
              (frplaca comvar## (stknth 0 t))))
          (cond
             ((not (stackp (cdr comvar##)))
              (frplacd comvar## (stknth 0 t))))))
    (resume (cdr comvar##)
           (stknth -1 'generator (car comvar##))
           comvar##)
    (eval form##)
    (retto (car comvar##)
           comvar## t)))

(generate
  (lambda (handle val)
    (resume (car handle)
           (cdr handle)
           val)))

(produce
  (lambda (val)
    (resume (cdr comvar##)
           (car comvar##)
           val)))

(generatefn
  (lambda (fn comvar##)
    (declare (specvars comvar##))                            (* |lmm:| "11-FEB-77 15:51:34")
    (cond
       ((nlistp comvar##)
        (setq comvar## (cons (stknth 0 t)
                             (stknth 0 t))))
       (t (cond
             ((not (stackp (car comvar##)))
              (frplaca comvar## (stknth 0 t))))
          (cond
             ((not (stackp (cdr comvar##)))
              (frplacd comvar## (stknth 0 t))))))
    (resume (cdr comvar##)
           (stknth -1 'generatefn (car comvar##))
           comvar##)
    (apply* fn)
    (retto (car comvar##)
           comvar## t)))
)
(DEFINEQ

(adieu
  (lambda val##
    (cond
       ((not (zerop val##))
        (note (arg val## 1))))
    (retto (car comvar##)
           (prog1 posslist## (setq posslist## nil))
           t)))

(au-revoir
  (lambda val##
    (cond
       ((not (zerop val##))
        (note (arg val## 1))))
    (note comvar##)
    (resume (cdr comvar##)
           (car comvar##)
           (prog1 posslist## (setq posslist## nil)))))

(cleanposlst
  (lambda (plst)
    (|for| x |in| plst |do| (cond
                               ((and (listp x)
                                     (stackp (car x)))
                                (relstk (car x))
                                (relstk (cdr x)))))))

(note
  (lambda (val lstflg)
    (setq posslist## (nconc posslist## (cond
                                          (lstflg val)
                                          (t (list val)))))))

(possibilities
  (nlambda (form##)                                          (* dd\: " 5-Oct-81 17:08")
    (prog (comvar## posslist##)
          (produce (list (setq comvar## (cons (stknth -1 'possibilities)
                                              (stknth 0 t)))))
          (eval form##)
          (adieu))))

(trynext
  (nlambda (plst## endform## val##)
    (prog (pl1##)
          (set plst## (cdr (setq pl1## (trynext1 (eval plst##)
                                              (eval val##)))))
          (cond
             ((null pl1##)
              (reteval 'trynext endform##))
             (t (return (car pl1##)))))))

(trynext1
  (lambda (plst## msg##)
    (prog (pl1##)
      lp  (cond
             ((null plst##)
              (return nil)))
          (setq pl1## (car plst##))
          (cond
             ((or (nlistp pl1##)
                  (not (stackp (car pl1##))))
              (return plst##)))
          (setq plst## (nconc (resume (car pl1##)
                                     (cdr pl1##)
                                     msg##)
                              (cdr plst##)))
          (go lp))))

(possibilityfn
  (lambda (fn comvar## posslist##)
    (declare (localvars fn)
           (specvars comvar## posslist##))                   (* |lmm:| "11-FEB-77 15:58:48")
    (produce (list (setq comvar## (cons (stknth -1 'possibilityfn)
                                        (stknth 0 t)))))
    (apply* fn)
    (adieu)))
)

(ADDTOVAR SYSSPECVARS COMVAR## POSSLIST##)

(PUTPROPS COROUTINE FILETYPE CL:COMPILE-FILE)
(PUTPROPS COROUTINE COPYRIGHT ("Venue & Xerox Corporation" 1986 1990))
(DECLARE\: DONTCOPY
  (FILEMAP (NIL (4908 7425 (COROUTINE 4918 . 5952) (GENERATOR 5954 . 6565) (GENERATE 6567 . 6670) (
PRODUCE 6672 . 6771) (GENERATEFN 6773 . 7423)) (7426 9867 (ADIEU 7436 . 7629) (AU-REVOIR 7631 . 7866) 
(CLEANPOSLST 7868 . 8152) (NOTE 8154 . 8348) (POSSIBILITIES 8350 . 8685) (TRYNEXT 8687 . 9012) (
TRYNEXT1 9014 . 9515) (POSSIBILITYFN 9517 . 9865)))))
STOP
