(DEFINE-FILE-INFO READTABLE "INTERLISP" PACKAGE "INTERLISP")
(FILECREATED " 7-May-2021 12:26:03" 
{DSK}<Users>kaplan>Local>medley3.5>git-medley2>sources>LLREAD.;22 112337 

      changes to%:  (FNS \CHECKEOLC.CRLF)

      previous date%: " 7-May-2021 12:07:09" 
{DSK}<Users>kaplan>Local>medley3.5>git-medley2>sources>LLREAD.;21)


(* ; "
Copyright (c) 1981-1988, 1990-1991, 1993, 2021 by Venue & Xerox Corporation.
")

(PRETTYCOMPRINT LLREADCOMS)

(RPAQQ LLREADCOMS
       [(COMS                                                (* ; "Reader entrypoints")
              (FNS LASTC PEEKC PEEKCCODE RATOM READ READC READCCODE READP SETREADMACROFLG 
                   SKIPSEPRCODES SKIPSEPRS \NSIN.24BITENCODING.ERROR SKREAD))
        (COMS                                                (* ; "CommonLisp read entry points")
              (FNS CL:READ CL:READ-PRESERVING-WHITESPACE CL:READ-DELIMITED-LIST CL:PARSE-INTEGER)
              (GLOBALVARS CMLRDTBL))
        (COMS                                                (* ; "reading strings")
              (FNS RSTRING READ-EXTENDED-TOKEN \RSTRING2))
        [COMS                                                (* ; "Core of the reader")
              (FNS \TOP-LEVEL-READ \SUBREAD \SUBREADCONCAT \ORIG-READ.SYMBOL \ORIG-INVALID.SYMBOL 
                   \APPLYREADMACRO INREADMACROP \CHECKEOLC.CRLF)
              (DECLARE%: DONTEVAL@LOAD DOCOPY (P (MOVD? '\ORIG-READ.SYMBOL '\READ.SYMBOL)
                                                 (MOVD? '\ORIG-INVALID.SYMBOL '\INVALID.SYMBOL]
        (COMS                                                (* ; "Read macro for '")
              (FNS READQUOTE))
        (COMS                                                (* ; "# macro")
              (FNS READVBAR READHASHMACRO DEFMACRO-LAMBDA-LIST-KEYWORD-P DIGITBASEP READNUMBERINBASE
                   ESTIMATE-DIMENSIONALITY SKIP.HASH.COMMENT CMLREAD.FEATURE.PARSER))
        (COMS                                                (* ; "Reading characters with #\")
              (FNS CHARACTER.READ CHARCODE.DECODE)
              (VARS CHARACTERNAMES CHARACTERSETNAMES))
        (DECLARE%: DOEVAL@COMPILE DONTCOPY (CONSTANTS * READTYPES)
               (MACROS .CALL.SUBREAD. FIXDOT RBCONTEXT PROPRB \RDCONC)
               (SPECVARS *READ-NEWLINE-SUPPRESS* \RefillBufferFn)
               (GLOBALVARS *KEYWORD-PACKAGE* *INTERLISP-PACKAGE*))
        [COMS (INITVARS (*REPLACE-NO-FONT-CODE* T)
                     (*DEFAULT-NOT-CONVERTED-FAT-CODE* 8739))
              (GLOBALVARS *REPLACE-NO-FONT-CODE* *DEFAULT-NOT-CONVERTED-FAT-CODE*)
              (DECLARE%: DOEVAL@COMPILE DONTCOPY (EXPORT (MACROS \BACKCHAR \INCCODE \INCHAR 
                                                                \PEEKCCODE \OUTCHAR \CHECKEOLC)
                                                        (MACROS \DEFAULTBACKCHAR \DEFAULTINCCODE 
                                                               \DEFAULTPEEKCCODE \DEFAULTOUTCHAR)
                                                        
                                                        (* ;; 
                                                      "These NS macros should eventually disappear")

                                                        (MACROS \BACKNSCHAR \NSIN \NSPEEK 
                                                               NUMERIC-CHARSET))
                     (EXPORT 

                            (* ;; "XCCS specific macro.  Although the decoder and encoder are implemented as functions in general, only for XCCS, they are implemeted as macros for efficiency reason.")

                            (MACROS \XCCSIN \XCCSPEEK \BACKXCCSCHAR \XCCSP]
        (INITVARS (*SIGNAL-24BIT-NSENCODING-ERROR*)
               (*READ-NEWLINE-SUPPRESS*)
               (\RefillBufferFn (FUNCTION \READCREFILL)))
                                                             (* ; 
  "Top level val of \RefillBufferFn means act like READC--we must be doing a raw BIN (or PEEKBIN?)")
        (LOCALVARS . T)
        (DECLARE%: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS
               (ADDVARS (NLAMA)
                      (NLAML)
                      (LAMA CL:PARSE-INTEGER CL:READ-DELIMITED-LIST CL:READ-PRESERVING-WHITESPACE 
                            CL:READ])



(* ; "Reader entrypoints")

(DEFINEQ

(LASTC
  [LAMBDA (FILE)                                        (* ; "Edited  3-May-2021 16:45 by rmk:")
    (LET [(LASTCCODE (FETCH (STREAM LASTCCODE) OF (\GETSTREAM FILE 'INPUT]
         (COND
            ((IEQP LASTCCODE 65535)
             NIL)
            (T (FCHARACTER LASTCCODE])

(PEEKC
  [LAMBDA (FILE FLG)                                         (* rmk%: "10-Apr-85 11:55")

    (* ;; "FLG says to proceed as if Control were T--not implemented correctly here NIL")

    (LET [(\RefillBufferFn (FUNCTION \PEEKREFILL))
          (STREAM (\GETSTREAM FILE 'INPUT]
         (DECLARE (SPECVARS \RefillBufferFn))
         (FCHARACTER (PEEKCCODE STREAM])

(PEEKCCODE
  [LAMBDA (FILE NOERROR)                                (* ; "Edited  3-May-2021 16:47 by rmk:")
    (LET ((\RefillBufferFn (FUNCTION \PEEKREFILL)))
         (DECLARE (SPECVARS \RefillBufferFn))
         (\PEEKCCODE (\GETSTREAM FILE 'INPUT)
                NOERROR])

(RATOM
  [LAMBDA (FILE RDTBL)                                       (* ; "Edited 30-Mar-87 17:21 by bvm:")

(* ;;; "Like READ except interpret break characters as single character atoms.  I.e., always returns an atom")

    (SETQ RDTBL (\GTREADTABLE RDTBL))
    (LET ((*READTABLE* RDTBL)
          (*PACKAGE* (if (fetch (READTABLEP USESILPACKAGE) of RDTBL)
                         then *INTERLISP-PACKAGE*
                       else *PACKAGE*))
          (\RefillBufferFn (FUNCTION \RATOM/RSTRING-REFILL)))
         (DECLARE (SPECVARS *READTABLE* *PACKAGE* \RefillBufferFn))
         (WITH-RESOURCE (\PNAMESTRING)
                (\SUBREAD (\GETSTREAM FILE 'INPUT)
                       (fetch (READTABLEP READSA) of *READTABLE*)
                       RATOM.RT \PNAMESTRING (AND (fetch (READTABLEP CASEINSENSITIVE)
                                                     of *READTABLE*)
                                                  (fetch (ARRAYP BASE) of UPPERCASEARRAY))
                       NIL NIL NIL T])

(READ
  [LAMBDA (FILE RDTBL FLG)                                   (* ; "Edited 19-Mar-87 18:35 by bvm:")
    (LET ((*READTABLE* (\GTREADTABLE RDTBL))
          (*READ-NEWLINE-SUPPRESS* FLG))
         (DECLARE (SPECVARS *READTABLE* *READ-NEWLINE-SUPPRESS*))

         (* ;; "*READ-NEWLINE-SUPPRESS* is used freely by \FILLBUFFER")

         (* ;; "Call reader with PRESERVE-WHITESPACE = T, since that's the semantics Interlisp has always had before (though maybe not explicitly stated).")

         (\TOP-LEVEL-READ FILE NIL NIL NIL T])

(READC
  [LAMBDA (FILE RDTBL)                                  (* ; "Edited  3-May-2021 14:46 by rmk:")
    (LET ((*READTABLE* (\GTREADTABLE RDTBL))
          (\RefillBufferFn (FUNCTION \READCREFILL)))
         (DECLARE (SPECVARS *READTABLE* \RefillBufferFn))
         (SETQ FILE (\INSTREAMARG FILE))
         (FCHARACTER (FREPLACE (STREAM LASTCCODE) OF FILE WITH (\INCHAR
                                                                            FILE NIL
                                                                            (FFETCH (STREAM
                                                                                         
                                                                                        EOLCONVENTION
                                                                                         )
                                                                               OF FILE])

(READCCODE
  [LAMBDA (STREAM RDTBL)                                (* ; "Edited  3-May-2021 14:59 by rmk:")

(* ;;; "returns a 16 bit character code.  \INCHAR does the EOL conversion.  Saves the character for LASTC as well.")

    (SETQ STREAM (\GETSTREAM STREAM 'INPUT))
    (LET ((*READTABLE* (\GTREADTABLE RDTBL))
          (\RefillBufferFn (FUNCTION \READCREFILL)))
         (DECLARE (SPECVARS *READTABLE* \RefillBufferFn))
         (freplace (STREAM LASTCCODE) of STREAM with (\INCHAR STREAM NIL
                                                                        (FETCH (STREAM 
                                                                                        EOLCONVENTION
                                                                                          )
                                                                           OF STREAM])

(READP
  [LAMBDA (FILE FLG)                                         (* rmk%: " 5-Apr-85 09:09")
                                                             (* ; 
                                        "The 10 does not do the EOL check on the peeked character.")
    (LET* ((STREAM (\GETSTREAM FILE 'INPUT))
           (DEVICE (ffetch (STREAM DEVICE) of STREAM)))
          (COND
             ((ffetch (FDEV READP) of DEVICE)
              (FDEVOP 'READP DEVICE STREAM FLG))
             (T (\GENERIC.READP STREAM FLG])

(SETREADMACROFLG
  [LAMBDA (FLG)                                              (* rmk%: "25-OCT-83 16:13")
                                                             (* ; 
                   "D doesn't cause the read-macro context error, hence doesn't maintain this flag")
    NIL])

(SKIPSEPRCODES
  [LAMBDA (FILE RDTBL)                                  (* ; "Edited  5-May-2021 19:50 by rmk:")

    (* ;; "Passes over non-separators to peek at the first non-separator on FILE.  Returns either last peeked character, or NIL if no non-seprs left in the file.")

    (bind PREVC C SHIFTEDCHARSET (STRM _ (\GETSTREAM FILE 'INPUT))
           (SA _ (fetch (READTABLEP READSA) of (\GTREADTABLE RDTBL)))
           (\RefillBufferFn _ '\PEEKREFILL) declare (SPECVARS \RefillBufferFn)
       while [EQ SEPRCHAR.RC (\SYNCODE SA (SETQ C (OR (\PEEKCCODE STRM T)
                                                          (RETURN] do (SETQ PREVC C)
                                                                         (\INCCODE STRM)
       finally (AND PREVC (replace (STREAM LASTCCODE) of STRM with PREVC))
             (RETURN C])

(SKIPSEPRS
  [LAMBDA (FILE RDTBL)                                  (* ; "Edited  5-May-2021 19:50 by rmk:")

    (* ;; "Passes over non-separators to peek at the first non-separator on FILE.  Returns either last peeked character, or NIL if no non-seprs left in the file.")

    (bind C PREVC (STRM _ (\GETSTREAM FILE 'INPUT))
           (SA _ (fetch (READTABLEP READSA) of (\GTREADTABLE RDTBL)))
           (\RefillBufferFn _ '\PEEKREFILL) declare (SPECVARS \RefillBufferFn)
       while [EQ SEPRCHAR.RC (\SYNCODE SA (SETQ C (OR (\PEEKCCODE STRM T)
                                                          (RETURN] do (SETQ PREVC C)
                                                                         (\INCCODE STRM)
       finally (AND PREVC (replace (STREAM LASTCCODE) of STRM with PREVC))
             (RETURN (FCHARACTER C])

(\NSIN.24BITENCODING.ERROR
  [LAMBDA (STREAM)                                           (* bvm%: "12-Mar-86 15:35")
    (DECLARE (USEDFREE *SIGNAL-24BIT-NSENCODING-ERROR*))

(* ;;; "Called if we see the sequence shift,shift on STREAM -- means shift to 24-bit character set, which we don't support.  Usually this just means we're erroneously reading a binary file as text.  If this function returns, its value is taken as a character set to shift to")

    (COND
       (*SIGNAL-24BIT-NSENCODING-ERROR*                      (* ; 
                                                           "Only cause error if user/reader cares")
              (ERROR "24-bit NS encoding not supported" STREAM)))
                                                             (* ; "Return charset zero")
    0])

(SKREAD
  [LAMBDA (FILE REREADSTRING RDTBL)                          (* ; "Edited  6-Apr-88 11:06 by amd")
    (LET ((*READ-SUPPRESS* 'SKREAD)
          (*READTABLE* (\GTREADTABLE RDTBL))
          (\RBFLG)
          (STRM (\GETSTREAM FILE 'INPUT))
          CH)
         (DECLARE (CL:SPECIAL *READTABLE* *READ-SUPPRESS* \RBFLG))
         [COND
            (REREADSTRING                                    (* ; 
                                                    "REREADSTRING is string of chars already read.")
                   (SETQ STRM (CL:MAKE-CONCATENATED-STREAM (CL:MAKE-STRING-INPUT-STREAM (MKSTRING
                                                                                         REREADSTRING
                                                                                         ))
                                     STRM]                   (* ; 
      "Because of return requirements, have to preview stream for unbalanced closing bracket/paren")
         (if (NULL (SETQ CH (SKIPSEPRCODES STRM)))
             then (\EOF.ACTION STRM)
           else (SELECTC (PROG1 (\SYNCODE (fetch (READTABLEP READSA) of *READTABLE*)
                                           CH)

                                 (* ;; "Read in suppressed mode.  Reader sets \Rbflg free if read ended on unbalanced bracket.  Reason we do the READ in all cases is so that we need to consume the unbalanced paren/bracket, just as if we really had read it; however, READ doesn't set \Rbflg for these cases")

                                 (\TOP-LEVEL-READ STRM NIL NIL NIL T))
                        (RIGHTPAREN.RC                       (* ; "unbalanced right paren")
                                       '%))
                        (RIGHTBRACKET.RC                     (* ; "unbalanced right bracket")
                             '%])
                        (AND \RBFLG '%]])
)



(* ; "CommonLisp read entry points")

(DEFINEQ

(CL:READ
  [CL:LAMBDA (&OPTIONAL (INPUT-STREAM *STANDARD-INPUT*)
                    (EOF-ERROR-P T)
                    EOF-VALUE RECURSIVE-P)                   (* ; "Edited 14-Dec-86 18:48 by bvm")
         (COND
            (RECURSIVE-P                                     (* ; 
                                   "Dive straight into reader using current settings of everything")
                   (.CALL.SUBREAD. INPUT-STREAM))
            (T (\TOP-LEVEL-READ INPUT-STREAM (NOT EOF-ERROR-P)
                      EOF-VALUE])

(CL:READ-PRESERVING-WHITESPACE
  [CL:LAMBDA (&OPTIONAL (STREAM *STANDARD-INPUT*)
                    (EOF-ERRORP T)
                    (EOF-VALUE NIL)
                    (RECURSIVEP NIL))                        (* ; "Edited 19-Mar-87 18:33 by bvm:")

         (* ;; 
"Reads from stream and returns the object read, preserving the whitespace that followed the object.")

         (COND
            (RECURSIVEP                                      (* ; 
                                   "Dive straight into reader using current settings of everything")
                   (.CALL.SUBREAD. STREAM))
            (T (\TOP-LEVEL-READ STREAM (NOT EOF-ERRORP)
                      EOF-VALUE NIL T])

(CL:READ-DELIMITED-LIST
  [CL:LAMBDA (CHAR &OPTIONAL (INPUT-STREAM *STANDARD-INPUT*)
                   RECURSIVE-P)                              (* ; "Edited 14-Dec-86 18:48 by bvm")

(* ;;; "Read a list of elements terminated by CHAR.  CHAR must not be a separator char, and ideally should not be a constituent char (if it is, it must be preceded by whitespace for READ-DELIMITED-LIST to work)")

         (LET [(ENDCODE (OR (FIXP CHAR)
                            (CL:CHAR-CODE CHAR)))
               (INSTREAM (\GETSTREAM INPUT-STREAM 'INPUT]
              (if RECURSIVE-P
                  then                                   (* ; 
                                   "Have to dive into reader without disturbing *CIRCLE-READ-LIST*")
                        (.CALL.SUBREAD. INPUT-STREAM NIL NIL ENDCODE)
                else (\TOP-LEVEL-READ INPUT-STREAM NIL NIL ENDCODE])

(CL:PARSE-INTEGER
  [CL:LAMBDA
   (STRING &KEY START END (RADIX 10)
          JUNK-ALLOWED)                                      (* ; 
                                                           "Edited  8-Feb-91 13:24 by gadener")
   (CL:IF (NOT (CL:STRINGP STRING))
       (ERROR "This is not a string : ~S" STRING)
       (PROG ((SA (fetch (READTABLEP READSA) of CMLRDTBL))
              (BASE (fetch (STRINGP BASE) of STRING))
              (LEN (fetch (STRINGP LENGTH) of STRING))
              (OFFST (fetch (STRINGP OFFST) of STRING))
              (FATP (fetch (STRINGP FATSTRINGP) of STRING))
              MAXDIGITCODE MAXALPHACODE INDEX STOP CHAR SIGN STARTINT ENDINT ERR)
             (SETQ RADIX (\CHECKRADIX RADIX))
             (SETQ INDEX (+ OFFST (if (NULL START)
                                      then 0
                                    elseif (< START 0)
                                      then (\ILLEGAL.ARG START)
                                    else START)))
             (SETQ STOP (+ OFFST (if (NULL END)
                                     then LEN
                                   elseif (OR (> END LEN)
                                                  (< END 0))
                                     then (\ILLEGAL.ARG END)
                                   else END)))
             (SETQ MAXDIGITCODE (+ (CHARCODE 0)
                                   RADIX -1))
             (SETQ MAXALPHACODE (AND (> RADIX 10)
                                     (+ (CHARCODE A)
                                        RADIX -11)))
             (while (AND (< INDEX STOP)
                             (EQ (\SYNCODE SA (\GETBASECHAR FATP BASE INDEX))
                                 SEPRCHAR.RC)) do        (* ; "Skip over separators")
                                                     (SETQ INDEX (CL:1+ INDEX)))
             [COND
                ((>= INDEX STOP)                             (* ; "no characters remain")
                 (RETURN (COND
                            (JUNK-ALLOWED                    (* ; "don't error")
                                   (CL:VALUES NIL STOP))
                            (T (SETQ ERR "No non-whitespace characters in integer string: ~S")
                               (GO FAIL]

        (* ;; "Start parsing a number.  Allowed to start with a single sign, then digits in radix, nothing else.  Assume collating sequence is (+, -) < digits < uppercase letters < lowercase letters.")

             (do (SETQ CHAR (\GETBASECHAR FATP BASE INDEX))
                    (if (<= CHAR MAXDIGITCODE)
                        then                             (* ; "sign or digit")
                              (if (>= CHAR (CHARCODE 0))
                                  then                   (* ; " digit")
                                        (OR STARTINT (SETQ STARTINT INDEX))
                                elseif (AND (NOT SIGN)
                                                (NOT STARTINT))
                                  then                   (* ; 
                                                           "maybe sign.  No good if not at start")
                                        (SELCHARQ CHAR
                                             (- (SETQ SIGN '-))
                                             (+ (SETQ SIGN '+))
                                             (RETURN))
                                else (RETURN))
                      elseif (AND MAXALPHACODE (<= (if (>= CHAR (CHARCODE "a"))
                                                           then 
                                                             (* ; "uppercase it first")
                                                                 (- CHAR (- (CHARCODE "a")
                                                                            (CHARCODE "A")))
                                                         else CHAR)
                                                       MAXALPHACODE))
                        then                             (* ; "is alphabetic digit")
                              (OR STARTINT (SETQ STARTINT INDEX))
                      else (RETURN)) repeatwhile (< (add INDEX 1)
                                                            STOP))
             (SETQ ENDINT INDEX)
             (RETURN (CL:VALUES (COND
                                   ([AND STARTINT
                                         (OR JUNK-ALLOWED (EQ INDEX STOP)
                                             (do (if (NEQ (\SYNCODE SA CHAR)
                                                                  SEPRCHAR.RC)
                                                         then 
                                                             (* ; " junk found")
                                                               (RETURN NIL)
                                                       elseif (EQ (add INDEX 1)
                                                                      STOP)
                                                         then 
                                                             (* ; "at end of string, win")
                                                               (RETURN T)
                                                       else (SETQ CHAR (\GETBASECHAR FATP BASE 
                                                                                  INDEX]
                                    (\MKINTEGER BASE STARTINT ENDINT (EQ SIGN '-)
                                           RADIX FATP))
                                   (JUNK-ALLOWED NIL)
                                   ((NULL STARTINT)
                                    (SETQ ERR "There aren't any digits in this integer string: ~S.")
                                    (GO FAIL))
                                   (T (SETQ ERR "There is junk in this integer string: ~S.")
                                      (GO FAIL)))
                            (- INDEX OFFST)))
         FAIL
             (CL:ERROR ERR (if (OR START END)
                               then (CL:SUBSEQ STRING (OR START 0)
                                               (OR END LEN))
                             else STRING))))])
)
(DECLARE%: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS CMLRDTBL)
)



(* ; "reading strings")

(DEFINEQ

(RSTRING
  [LAMBDA (FILE RDTBL RSFLG)                                 (* ; "Edited 22-Mar-87 20:53 by bvm:")
    (LET ((*READTABLE* (\GTREADTABLE RDTBL))
          (\RefillBufferFn '\RATOM/RSTRING-REFILL)
          (*READ-SUPPRESS* NIL))
         (DECLARE (SPECVARS *READTABLE* \RefillBufferFn *READ-SUPPRESS*))

         (* ;; "It's not clear that *READ-SUPPRESS* is supposed to affect anything other than calls to READ.  So play it safe and force \Rstring2 to really read a string.")

         (WITH-RESOURCE (\PNAMESTRING)
                (\RSTRING2 (\GETSTREAM FILE 'INPUT)
                       (fetch READSA of *READTABLE*)
                       (OR RSFLG T)
                       \PNAMESTRING])

(READ-EXTENDED-TOKEN
  [LAMBDA (STRM RDTBL ESCAPE-ALLOWED-P)                 (* ; "Edited  5-May-2021 20:41 by rmk:")

    (* ;; "This is a cross between RSTRING and \SUBREAD.  Read a %"token%" from STREAM, as defined by the Common Lisp reader and the syntax in RDTBL.  EOF terminates as well.  If ESCAPE-ALLOWED-P is true, escapes are honored and if one appears, a second value of T is returned.  Otherwise, escapes are treated as vanilla chars and the caller can barf on them itself if it desires.")

    (SETQ RDTBL (\GTREADTABLE RDTBL))
    (WITH-RESOURCE (\PNAMESTRING)
           (PROG ((CASEBASE (AND (fetch (READTABLEP CASEINSENSITIVE) of RDTBL)
                                 (fetch (ARRAYP BASE) of UPPERCASEARRAY)))
                  (PBASE (ffetch (STRINGP XBASE) of \PNAMESTRING))
                  (J 0)
                  (SA (fetch READSA of RDTBL))
                  CH SNX ANSLIST ANSTAIL ESCAPE-APPEARED ESCAPING FATSEEN)
             LP  (if (\EOFP STRM)
                     then                                (* ; 
                                             "end of file terminates string just like a sepr/break")
                           (GO FINISH))
                 (SETQ CH (\INCCODE STRM))                   (* ; "NOTE: This should really be (\INCHAR --) --), but eol is usually a break or sepr and the \BACKNSCHAR doesn't work right.  Fix this when we unread correctly")
                 (SETQ SNX (\SYNCODE SA CH))
                 [COND
                    ((AND ESCAPE-ALLOWED-P (SELECTC SNX
                                               (ESCAPE.RC (SETQ CH (\INCHAR STRM NIL
                                                                          (ffetch EOLCONVENTION
                                                                             of STRM)))
                                                          (SETQ ESCAPE-APPEARED T))
                                               (MULTIPLE-ESCAPE.RC 
                                                    (SETQ ESCAPING (NOT ESCAPING))
                                                    (SETQ ESCAPE-APPEARED T)
                                                    (GO LP))
                                               NIL)))
                    (ESCAPING                                (* ; "eat chars until next |"))
                    ((fetch STOPATOM of SNX)
                     (\BACKCHAR STRM)
                     (GO FINISH))
                    ((AND CASEBASE (ILEQ CH \MAXTHINCHAR))
                     (SETQ CH (\GETBASEBYTE CASEBASE CH]
                 (COND
                    ((EQ J \PNAMELIMIT)                      (* ; 
                  "Filled PNSTR so have to save those chars away and start filling up a new buffer")
                     (SETQ J (\SMASHSTRING (ALLOCSTRING J NIL NIL FATSEEN)
                                    0 \PNAMESTRING J))
                     [COND
                        [ANSLIST (RPLACD ANSTAIL (SETQ ANSTAIL (CONS J NIL]
                        (T (SETQ ANSTAIL (SETQ ANSLIST (CONS J NIL]
                     (SETQ J 0)))
                 (\PNAMESTRINGPUTCHAR PBASE J CH)
                 (COND
                    ((AND (NOT FATSEEN)
                          (IGREATERP CH \MAXTHINCHAR))
                     (SETQ FATSEEN T)))
                 (SETQ J (ADD1 J))
                 (GO LP)
             FINISH
                 (SETQ J (\SMASHSTRING (ALLOCSTRING J NIL NIL FATSEEN)
                                0 \PNAMESTRING J))
                 [COND
                    (ANSLIST (RPLACD ANSTAIL (SETQ ANSTAIL (CONS J NIL)))
                           (SETQ J (CONCATLIST ANSLIST]
                 (RETURN (if ESCAPE-APPEARED
                             then                        (* ; 
                                                  "do it this way because multiple values are slow")
                                   (CL:VALUES J T)
                           else J])

(\RSTRING2
  [LAMBDA (STREAM SA RSFLG PNSTR)                       (* ; "Edited 19-Apr-2021 21:52 by rmk:")

(* ;;; "The main string reader.  Reads characters from STREAM according to the syntax table SA and returns a string.  PNSTR is an instance of the global resource \PNAMESTRING, which we can use all to ourselves as a buffer.")

(* ;;; "If RSFLG is T then the call is from RSTRING, in which case the string is terminated by a break or sepr in SA.  If RSFLG is NIL then the string is terminated by a string delimiter.  If RSFLG is SKIP then CR's and the following separator chars are discarded as an otherwise normal string is read")

    (DECLARE (USEDFREE *READTABLE* *READ-SUPPRESS*))
    (PROG ((EOLC (ffetch EOLCONVENTION of STREAM))
           (PBASE (SELECTQ (SYSTEMTYPE)
                      (VAX PNSTR)
                      (ffetch (STRINGP XBASE) of PNSTR)))
           (SHIFTEDCHARSET (UNFOLD (ACCESS-CHARSET STREAM)
                                  256))
           (J 0)
           EOLCHAR CH SNX ANSLIST ANSTAIL LASTC FATSEEN SKIPPING)
          (SELECTC EOLC
              (CRLF.EOLC (SETQ EOLCHAR (CHARCODE CR)))
              (CR.EOLC (SETQ EOLCHAR (CHARCODE CR)))
              (LF.EOLC (SETQ EOLCHAR (CHARCODE LF)))
              NIL)
      RS2LP
          (SETQ CH (\NSIN STREAM SHIFTEDCHARSET SHIFTEDCHARSET))
          [COND
             ((EQ CH EOLCHAR)

              (* ;; "We just read the stream's EOL character, so we have to turn it into our EOL.  Most places do this with \CHECKEOLC, but we can't do that here, because if the eol is CRLF and would terminate the read, \BACKNSCHAR won't work right.")

              (* ;; "An escaped LF is handled below, stays as LF even from an LF file.")

              (COND
                 ([AND (EQ RSFLG T)
                       (fetch STOPATOM of (\SYNCODE SA (CHARCODE CR]
                                                             (* ; 
                                          "From RSTRING, eol terminates read.  Leave eol in buffer")
                  (\BACKNSCHAR STREAM SHIFTEDCHARSET)
                  (GO FINISH))
                 (T (COND
                       ((AND (EQ EOLC CRLF.EOLC)
                             (EQ (\PEEKBIN STREAM T)
                                 (CHARCODE LF)))             (* ; "Eat the LF after the CR")
                        (\BIN STREAM)))
                    (SETQ CH (CHARCODE EOL]
          (SETQ SNX (\SYNCODE SA CH))
          (SELECTC SNX
              (OTHER.RC                                      (* ; "Normal case, nothing to do"))
              (ESCAPE.RC                                     (* ; "Read the escaped character")

                         (* ;; "\PRINSTRING puts an escape %% before an LF in the string, whether or not it is going to an LF or CR file.  An EOL(CR) will be printed as LF on an LF file or CRLF, otherwise left alone.   \CHECKEOLC will return EOL for an LF on an LF file, because it doesn't know about escapes.  On a CR or an LF file, a CR will come in as an EOL.  So the trick here is:  don't call \CHECKEOLC on an escaped LF, no matter what the EOL convention of the file..")

                         [COND
                            ((fetch ESCAPEFLG of *READTABLE*)
                             (SETQ CH (\NSIN STREAM SHIFTEDCHARSET SHIFTEDCHARSET))
                             (COND
                                ((EQ CH (CHARCODE LF))       (* ; 
                                               "An escaped LF stays as an LF, even from a LF file.")
                                 (GO PUTCHAR))
                                (T (SETQ CH (\CHECKEOLC CH EOLC STREAM))
                                   (COND
                                      ((AND (EQ RSFLG 'SKIP)
                                            (EQ CH (CHARCODE EOL)))
                                                             (* ; 
                  "Strip leading spaces after escaped returns, too, but leave the CR in the string")
                                       (SETQ SKIPPING 0)
                                       (GO PUTCHAR])
              (SELECTQ RSFLG
                  (NIL                                       (* ; "end check is dbl quote")
                       (COND
                          ((EQ SNX STRINGDELIM.RC)           (* ; "Got it")
                           (SETQ LASTC CH)
                           (GO FINISH))))
                  (T                                         (* ; 
            "if called from RSTRING, end check is break or sepr, and we must leave delim in stream")
                     (COND
                        ((fetch STOPATOM of SNX)
                         (\BACKNSCHAR STREAM SHIFTEDCHARSET)
                         (GO FINISH))))
                  (SKIP                                      (* ; 
                                                       "Like NIL but strip cr's and leading spaces")
                        (SELECTC SNX
                            (STRINGDELIM.RC 
                                 (SETQ LASTC CH)
                                 (GO FINISH))
                            (SEPRCHAR.RC                     (* ; "Assume that CR is a sepr")
                                         (COND
                                            [SKIPPING (COND
                                                         ((EQ CH (CHARCODE EOL))
                                                             (* ; 
                                                           "Multiple CR's while skipping are kept")
                                                          (COND
                                                             ((EQ SKIPPING T)
                                                             (* ; 
                    "Turn previous space back into CR.  Note that J is guaranteed to be at least 1")
                                                              (\PNAMESTRINGPUTCHAR PBASE (SUB1 J)
                                                                     CH)
                                                              (SETQ SKIPPING 0)))
                                                          (GO PUTCHAR))
                                                         (T  (* ; "Continue skipping seprs")
                                                            (GO RS2LP]
                                            ((EQ CH (CHARCODE EOL))
                                                             (* ; 
                                                      "Turn CR into space and start skipping seprs")
                                             (SETQ SKIPPING T)
                                             (SETQ CH (CHARCODE SPACE))
                                             (GO PUTCHAR))))
                            NIL))
                  (SHOULDNT)))
          (SETQ SKIPPING NIL)
      PUTCHAR
          [COND
             ((NOT *READ-SUPPRESS*)                          (* ; "Accumulate character")
              (COND
                 ((EQ J \PNAMELIMIT)                         (* ; 
                  "Filled PNSTR so have to save those chars away and start filling up a new buffer")
                  (SETQ J (\SMASHSTRING (ALLOCSTRING J NIL NIL FATSEEN)
                                 0 PNSTR J))
                  [COND
                     [ANSLIST (RPLACD ANSTAIL (SETQ ANSTAIL (CONS J NIL]
                     (T (SETQ ANSTAIL (SETQ ANSLIST (CONS J NIL]
                  (SETQ J 0)))
              (\PNAMESTRINGPUTCHAR PBASE J CH)
              (SETQ LASTC CH)
              (COND
                 ((AND (NOT FATSEEN)
                       (IGREATERP CH \MAXTHINCHAR))
                  (SETQ FATSEEN T)))
              (SETQ J (ADD1 J]
          (COND
             ((OR (NEQ RSFLG T)
                  (NOT (\EOFP STREAM)))                      (* ; "in RSTRING (RSFLG=T), if we've read something already, then end of file terminates string just like a sepr/break")
              (GO RS2LP)))
      FINISH
          (AND LASTC (replace (STREAM LASTCCODE) of STREAM with LASTC))
          (RETURN (COND
                     ((NOT *READ-SUPPRESS*)
                      (SETQ J (\SMASHSTRING (ALLOCSTRING J NIL NIL FATSEEN)
                                     0 PNSTR J))
                      (COND
                         (ANSLIST (RPLACD ANSTAIL (SETQ ANSTAIL (CONS J NIL)))
                                (CONCATLIST ANSLIST))
                         (T J])
)



(* ; "Core of the reader")

(DEFINEQ

(\TOP-LEVEL-READ
  [LAMBDA (STREAM EOF-SUPPRESS EOF-VALUE CHAR PRESERVE-WHITESPACE)
                                                             (* ; "Edited 13-Dec-88 16:28 by jds")

    (* ;; "Entry to the guts of the reader from a place where you may not be already under the reader.  CHAR is for READ-DELIMITED-LIST -- it is charcode to terminate read, in which case we are reading a sequence of things instead of a single thing.  EOF-SUPPRESS is the opposite of CL:READ's EOF-ERROR-P arg.")

    (* ;; 
  " I EOF-SUPPRESS, set the stream's EODOFSTREAMOP to retfrom here with EOF-VALUE as its result.")

    (LET ((*PACKAGE* (COND
                        ((fetch (READTABLEP USESILPACKAGE) of (\DTEST *READTABLE*
                                                                             'READTABLEP))
                         *INTERLISP-PACKAGE*)
                        (T *PACKAGE*)))
          (\RefillBufferFn (FUNCTION \READREFILL))
          (*CIRCLE-READ-LIST* NIL)
          (OLD-EOS-OP (fetch ENDOFSTREAMOP of STREAM)))
         (DECLARE (SPECVARS *PACKAGE* \RefillBufferFn *CIRCLE-READ-LIST* EOF-VALUE))
         (CL:UNWIND-PROTECT
             (PROGN [AND EOF-SUPPRESS (REPLACE ENDOFSTREAMOP OF STREAM
                                         WITH #'(LAMBDA (STREAM)
                                                      (RETFROM '\TOP-LEVEL-READ EOF-VALUE]
                    (LET ((RESULT (.CALL.SUBREAD. STREAM EOF-SUPPRESS EOF-VALUE CHAR 
                                         PRESERVE-WHITESPACE)))
                         (if *CIRCLE-READ-LIST*
                             then                        (* ; 
                                      "There were calls to #=, so go fix up all the ## references.")
                                   (HASH-STRUCTURE-SMASH RESULT))
                         RESULT))
             (REPLACE ENDOFSTREAMOP OF STREAM WITH OLD-EOS-OP))])

(\SUBREAD
  [LAMBDA (STRM SA READTYPE PNSTR CASEBASE EOF-SUPPRESS EOF-VALUE CHAR PRESERVE-WHITESPACE)
                                                            (* ; "Edited  7-May-2021 09:57 by rmk:")

    (* ;; "Values of READTYPE are: --- READ.RT for top level of READ, --- NOPROPRB.RT if right-bracket isn't to be propagated -- sublist beginning with left-bracket --- PROPRB.RT if propagation is not suppressed -- sublist beginning with left-paren --- RATOM.RT for call from RATOM")

    (* ;; "PNSTR is an instance of the global resource \PNAMESTRING, acquired in READ and passed on from level to level.  It is released during read-macro applications, then reacquired.")

    (* ;; "CASEBASE is base of uppercasearray if read table is case-insensitive.")

    (* ;; "If EOF-SUPPRESS is true, then if we are at end of file we should return EOF-VALUE instead of erroring (we need this because we might actually be sitting before end of file in front of something that reads nothing, e.g., a comment, so caller can't check EOFP itself).  Always false on recursive calls.")

    (* ;; "If CHAR is supplied, it is a character code which, when read (in isolation), should terminate this call to read.  Never on when at top-level.")

    (* ;; "\RBFLG is propagated for top-level calls, in case they are embedded in read-macros.  SKREAD also depends on this.")

    (* ;; 
  "If PRESERVE-WHITESPACE is true, doesn't throw away the whitespace that terminates the read.")

    (DECLARE (USEDFREE *READTABLE* \RBFLG))

    (* ;; "\RDCONC is a macro that adds a new element as specified by its first argument to the current sublist.  Its other arguments will be executed instead if we are the top-level call")

    (PROG ((TOPLEVELP (SELECTC READTYPE
                          ((LIST READ.RT RATOM.RT) 
                               T)
                          NIL))
           (PBASE (ffetch (STRINGP XBASE) of PNSTR))
           SNX LST END ELT DOTLOC CH J ESCAPEFLG INVALIDFLG PACKAGE NCOLONS AT-EOF EOF-POSSIBILITY 
           EXTRASEGMENTS LASTC)
          (if (AND TOPLEVELP (NOT (\INTERMP STRM)))
              then 

                    (* ;; "EOF is allowed to terminate tokens on direct READ calls.  Not if reading from terminal, because \FILLBUFFER made sure to put something at the end.")

                    (SETQ EOF-POSSIBILITY T))
      NEWTOKEN
          

     (* ;; "Here ready to scan a new token.  First skip over separator characters")

          (SETQ J 0)
          [SETQ EXTRASEGMENTS (SETQ INVALIDFLG (SETQ ESCAPEFLG (SETQ PACKAGE (SETQ NCOLONS NIL]
          (if (AND EOF-SUPPRESS (NULL (SKIPSEPRCODES STRM)))
              then                                       (* ; 
                            "caller specified eof-error-p of NIL.  Happens only on top-level calls")
                    (RETURN EOF-VALUE))                      (* ; "By Skipping Separator Characters,Happens CHARSET-Mode Exchanging. (Solution of AR#114 in FX, edited by tt [Jan-22-'90])")
          (repeatwhile (EQ [SETQ SNX (\SYNCODE SA (SETQ CH (\INCCODE STRM]
                               SEPRCHAR.RC))
          (COND
             ((EQ CH CHAR)                                   (* ; 
                                   "Read desired terminating char.  TOPLEVELP is always false here")
              (freplace (STREAM LASTCCODE) of STRM with CH)
                                                             (* ; "Save last char for LASTC.")
              (RETURN LST))
             ((EQ SNX OTHER.RC)                              (* ; "Start of an atom")
              (COND
                 ([AND (EQ CH (CHARCODE %.))
                       (fetch STOPATOM of (\SYNCODE SA (\PEEKCCODE STRM]

                  (* ;; "An isolated, unescaped dot.  This special check on every atom could be eliminated if . had a special SNX code")

                  (SETQ DOTLOC END)                          (* ; 
                  "DOTLOC points to CONS cell one before the dot, NIL for car of list, as desired.")
                  ))
              (GO GOTATOMCHAR))
             [(fetch STOPATOM of SNX)                (* ; 
                                                 "This character definitely does not start an atom")
              (COND
                 ((EQ READTYPE RATOM.RT)
                  (GO SINGLECHARATOM))
                 (T (GO BREAK]
             ((EQ SNX PACKAGEDELIM.RC)                       (* ; 
                                  "Starting a symbol with a package delimiter -- must be a keyword")
              (SETQ NCOLONS 1)
              (SETQ PACKAGE *KEYWORD-PACKAGE*)
              (SETQ ESCAPEFLG T)
              (GO NEXTATOMCHAR))
             [(AND (SELECTC (fetch MACROCONTEXT of SNX)
                       (FIRST.RMC T)
                       (ALONE.RMC (fetch STOPATOM of (\SYNCODE SA (\PEEKCCODE STRM))))
                       NIL)
                   (fetch READMACROFLG of *READTABLE*))
              (COND
                 ((EQ READTYPE RATOM.RT)
                  (GO SINGLECHARATOM))
                 (T (GO MACRO]
             (T                                              (* ; 
                         "Some character that starts an atom but has non-trivial syntax attributes")
                ))
      ATOMLOOP
          

     (* ;; "At this point, we are accumulating an atom, and CH does not have syntax OTHER, so we have to check special cases")

          (SELECTC SNX
              (ESCAPE.RC                                     (* ; 
                                                 "Take next character to be alphabetic, case exact")
                         (COND
                            ((fetch ESCAPEFLG of *READTABLE*)
                             (SETQ CH (\INCHAR STRM NIL (ffetch EOLCONVENTION of STRM)))
                                                             (* ; 
                 "No EOFP check needed -- it's an error to have escape char with nothing following")
                             (SETQ ESCAPEFLG T)
                             (GO PUTATOMCHAR))))
              (MULTIPLE-ESCAPE.RC 
                                  (* ;; "Take characters up to next multiple escape to be alphabetic, except that single escape chars still escape the next char")

                   (SETQ ESCAPEFLG T)
                   [bind ESCFLG do (SETQ CH (\INCHAR STRM NIL (ffetch EOLCONVENTION
                                                                         of STRM)))
                                          (COND
                                             ([NOT (COND
                                                      (ESCFLG (SETQ ESCFLG NIL))
                                                      (T (SELECTC (SETQ SNX (\SYNCODE SA CH))
                                                             (MULTIPLE-ESCAPE.RC 
                                                             (* ; 
                                              "Finished escaped sequence, resume normal processing")
                                                                  (GO NEXTATOMCHAR))
                                                             (ESCAPE.RC 
                                                             (* ; 
                                                           "Pass the next char thru verbatim")
                                                                        (SETQ ESCFLG T))
                                                             NIL]
                                                             (* ; 
                                                           "All others are pname chars, quoted")
                                              (if (NOT *READ-SUPPRESS*)
                                                  then (COND
                                                              ((EQ J \PNAMELIMIT)
                                                             (* ; 
                               "if there have been escapes, can't be a number, so ok to error now.")
                                                               (LISPERROR "ATOM TOO LONG"
                                                                      (\SUBREADCONCAT 
                                                                             EXTRASEGMENTS PBASE J))
                                                               (GO NEWTOKEN)))
                                                        (\PNAMESTRINGPUTCHAR PBASE J CH)
                                                        (add J 1])
              NIL)
      GOTATOMCHAR
          

     (* ;; "CH is a vanilla atom char to accumulate")

          [COND
             ((AND CASEBASE (ILEQ CH \MAXTHINCHAR))          (* ; "Uppercase atom characters")
              (SETQ CH (\GETBASEBYTE CASEBASE CH]
      PUTATOMCHAR
          (if (NOT *READ-SUPPRESS*)
              then (COND
                          ((EQ J \PNAMELIMIT)                (* ; "Symbol is too long.  However, it could just be a bignum, so keep accumulating characters until we have to do something.")
                           (push EXTRASEGMENTS (\SMASHSTRING (ALLOCSTRING J NIL NIL T)
                                                          0 PNSTR J))
                           (SETQ J 0)))
                    (\PNAMESTRINGPUTCHAR PBASE J CH)
                    (add J 1)
                    (SETQ LASTC CH)                          (* ; "Save CH for LASTC."))
      NEXTATOMCHAR
          (if (AND EOF-POSSIBILITY (SETQ AT-EOF (\EOFP STRM)))
              then                                       (* ; 
                                                           "EOF terminates atoms at top level")
                    (GO FINISHATOM)
            elseif (EQ [SETQ SNX (\SYNCODE SA (SETQ CH (\INCCODE STRM]
                           OTHER.RC)
              then                                       (* ; 
      "normal case tested first--another vanilla constituent char, so keep accumulating atom chars")
                    (GO GOTATOMCHAR)
            elseif (fetch STOPATOM of SNX)
              then                                       (* ; "Terminates atom")
                    (GO FINISHATOM)
            elseif (EQ SNX PACKAGEDELIM.RC)
              then (GO GOTPACKAGEDELIM)
            else (GO ATOMLOOP))
      FINISHATOM
          

     (* ;; 
   "Come here when an atom has been terminated, either by a break/sepr char or by end of file.")

          (if INVALIDFLG
              then (freplace (STREAM LASTCCODE) of STRM with (OR LASTC CH 65535))
                    (\INVALID.SYMBOL PBASE J NCOLONS PACKAGE EXTRASEGMENTS))
          [SETQ ELT (AND (NOT *READ-SUPPRESS*)
                         (if EXTRASEGMENTS
                             then 

                                 (* ;; "More than \PNAMELIMIT chars were read.  Can't be a symbol, but might be a number.  Pack up all the strings we have into a single string and try to parse it as a number.")

                                   (SETQ EXTRASEGMENTS (\SUBREADCONCAT EXTRASEGMENTS PBASE J))
                                   (OR (AND (NULL (OR PACKAGE ESCAPEFLG NCOLONS))
                                            (\PARSE.NUMBER (fetch (STRINGP BASE) of 
                                                                                        EXTRASEGMENTS
                                                                  )
                                                   (fetch (STRINGP OFFST) of EXTRASEGMENTS)
                                                   (fetch (STRINGP LENGTH) of EXTRASEGMENTS)
                                                   \FATPNAMESTRINGP))
                                       (LISPERROR "ATOM TOO LONG" EXTRASEGMENTS))
                           else (\READ.SYMBOL PBASE 0 J \FATPNAMESTRINGP PACKAGE (EQ NCOLONS 1)
                                           ESCAPEFLG]
          (freplace (STREAM LASTCCODE) of STRM with CH)
                                                             (* ; "Save last READ char for LASTC.")
          (if AT-EOF
              then                                       (* ; 
                                                           "top-level read, atom terminated by EOF")
                    (RETURN ELT))
          (\RDCONC ELT (PROGN (COND
                                 ((OR PRESERVE-WHITESPACE (NEQ SNX SEPRCHAR.RC))
                                                             (* ; "At top-level, put back the terminating character if preserving whitespace or terminator is significant")
                                  (freplace (STREAM LASTCCODE) of STRM
                                     with (OR LASTC CH 65535))
                                                             (* ; 
                                                   "And LASTC will return the last REAL char read.")
                                  (\BACKCHAR STRM)))
                              (RETURN ELT)))
          (if (EQ SNX SEPRCHAR.RC)
              then                                       (* ; 
                                                         "Terminated with sepr, go on to next char")
                    (GO NEWTOKEN)
            elseif (EQ CH CHAR)
              then                                       (* ; "read terminates here")
                    (freplace (STREAM LASTCCODE) of STRM with CH)
                    (RETURN LST)
            else                                         (* ; 
                                             "Terminated with break, jump into the break char code")
                  (GO BREAK))
      GOTPACKAGEDELIM
          

     (* ;; "Come here if CH is a package delimiter.  Note that we have already scanned at least one character of the token, so this must be an interior delim")

          (COND
             (*READ-SUPPRESS*                                (* ; "Don't care about packages"))
             [(AND (EQ J 0)
                   (NULL EXTRASEGMENTS))

              (* ;; "No chars accumulated, so must be 2 colons in a row.  Note that the case where we've just started scanning a token happens up at NEWTOKEN")

              (SETQ LASTC CH)
              (COND
                 ((AND (EQ NCOLONS 1)
                       (NEQ PACKAGE *KEYWORD-PACKAGE*))      (* ; 
                                                        "Two colons in a row means internal symbol")
                  (SETQ NCOLONS 2))
                 (T                                          (* ; 
                                                           "Error, e.g., `FOO:::BAZ' or `::BAR'")
                    (SETQ INVALIDFLG T)
                    (GO GOTATOMCHAR]
             ((NULL NCOLONS)                                 (* ; 
                                                           "We have just scanned the package name")
              (SETQ NCOLONS 1)
              (SETQ LASTC CH)
              [SETQ PACKAGE (COND
                               (EXTRASEGMENTS (LISPERROR "ATOM TOO LONG" (\SUBREADCONCAT 
                                                                                EXTRASEGMENTS PBASE J
                                                                                ))
                                      (SETQ EXTRASEGMENTS NIL))
                               ((\FIND.PACKAGE.INTERNAL PBASE 0 J \FATPNAMESTRINGP))
                               (T                            (* ; 
                 "Error, but don't signal yet -- save name as string for benefit of error handlers")
                                  (\GETBASESTRING PBASE 0 J \FATPNAMESTRINGP]
              (SETQ J 0))
             (T                                              (* ; 
      "Have alread seen one or more colons, and have scanned more symbol.  This colon is an error.")
                (SETQ LASTC CH)
                (SETQ INVALIDFLG T)
                (GO GOTATOMCHAR)))
          (SETQ ESCAPEFLG T)                                 (* ; "Result MUST be a symbol now")
          (GO NEXTATOMCHAR)
      SINGLECHARATOM
          

     (* ;; "Come here to create a symbol whose single character is CH -- no package stuff to worry about.  This happens mainly for RATOM.  We create the single char atom in IL for backward compatibility.")

          (\PNAMESTRINGPUTCHAR PBASE 0 CH)
          (SETQ ELT (\READ.SYMBOL PBASE 0 1 \FATPNAMESTRINGP *INTERLISP-PACKAGE*))
          (freplace (STREAM LASTCCODE) of STRM with CH)
          (\RDCONC ELT (RETURN ELT))
          (GO NEWTOKEN)

     (* ;; "End of atom scanning code")

      BREAK
          

     (* ;; "At this point, we have just read a break character, stored in CH")

          (freplace (STREAM LASTCCODE) of STRM with CH)
          [SELECTC SNX
              (LEFTPAREN.RC 
                            (* ;; "recursively read a list.  If that list (or any of it's non-bracketed sublists) is terminated by a right bracket it terminates our read as well.  PROPRB macro worries about right-bracket propagation: if the subread encounters a right bracket (sets \RBFLG), PROPRB returns true.  In addition, if we were not called by a left-bracket (READTYPE = NOPROPRB.RT) it sets \RBFLG in caller, thereby propagating the bracket upward.")

                            (COND
                               ((PROG1 (PROPRB (SETQ ELT (\SUBREAD STRM SA PROPRB.RT PNSTR 
                                                                CASEBASE)))
                                    (\RDCONC ELT (RETURN ELT)))

                                (* ;; "PROG1 is true if the subread encountered a right bracket")

                                (FIXDOT)                     (* ; "Fix dotted pair if necessary")
                                (RETURN LST))))
              (LEFTBRACKET.RC 
                              (* ;; "recursively read a list, terminated by either right paren or right bracket.  In this case, right bracket is not propagated upward--we continue reading elements after it.")

                   (SETQ ELT (\SUBREAD STRM SA NOPROPRB.RT PNSTR CASEBASE))
                   (\RDCONC ELT (RETURN ELT)))
              ((LIST RIGHTPAREN.RC RIGHTBRACKET.RC) 

                                 (* ;; "Terminate one or more lists, return what we have accumulated so far.  In the case of Right bracket, if caller did not have the matching left bracket, we have to allow the bracket to close more than one list.")

                   (RETURN (COND
                              (TOPLEVELP 

                                 (* ;; "Naked right paren/bracket returns NIL.  This is sort of bogus in common lisp, but changing it would be a significant change to Interlisp folks.")

                                     NIL)
                              (CHAR 

                                  (* ;; "call from READ-DELIMITED-LIST doesn't want to terminate this way.  Could read as NIL and not terminate, but seems best to error.")

                                    (CL:ERROR "Unmatched ~A encountered while reading to a ~A"
                                           (CL:CODE-CHAR CH)
                                           (CL:CODE-CHAR CHAR))
                                    LST)
                              (T (FIXDOT)
                                 (AND (EQ SNX RIGHTBRACKET.RC)
                                      (NEQ READTYPE NOPROPRB.RT)
                                      (SETQ \RBFLG T))
                                 LST))))
              (STRINGDELIM.RC 
                              (* ;; "Invoke string reader")

                   (SETQ ELT (\RSTRING2 STRM SA NIL PNSTR))
                   (\RDCONC ELT (RETURN ELT)))
              (COND
                 ((OR (EQ SNX BREAKCHAR.RC)
                      (NOT (fetch READMACROFLG of *READTABLE*)))
                                                             (* ; 
                                                           "A breakchar or a disabled always macro")
                  (GO SINGLECHARATOM))
                 (T (GO MACRO]
          (GO NEWTOKEN)
      MACRO
          (SELECTQ (fetch MACROTYPE of (SETQ SNX (\GETREADMACRODEF CH *READTABLE*)))
              (MACRO (COND
                        ((PROG1 (PROPRB [SETQ ELT (RELEASERESOURCE \PNAMESTRING PNSTR
                                                         (CL:MULTIPLE-VALUE-LIST (\APPLYREADMACRO
                                                                                  STRM SNX]
                                                             (* ; 
                                        "Ignore right-bracket if macro is called at top-level read")
                                       )
                             [COND
                                ((NULL ELT)                  (* ; 
                                                      "Macro returned zero values, read as nothing")
                                 )
                                (T (SETQ ELT (CAR ELT))
                                   (\RDCONC ELT (RETURN ELT])
                         (FIXDOT)                            (* ; 
                                  "Encountered right bracket if we get here -- return what we have")
                         (RETURN LST))))
              (INFIX 
                     (* ;; "We give macro TCONC list of what we've accumulated so far--it gets to modify it as it pleases and return it.  We continue from there.")

                     (COND
                        ((PROG1 [PROPRB (SETQ ELT (RELEASERESOURCE \PNAMESTRING PNSTR
                                                         (\APPLYREADMACRO STRM SNX
                                                                (AND LST (CONS LST END]
                             [COND
                                [TOPLEVELP                   (* ; 
                                                     "What does INFIX mean at top level??  See IRM")
                                       (COND
                                          ((AND (LISTP ELT)
                                                (CDR ELT))   (* ; 
                                                    "Result is in TCONC format, so it's returnable")
                                           (RETURN (COND
                                                      ((EQ (CDR ELT)
                                                           (CAR ELT))
                                                             (* ; "TCONC list of one element--return the element. This is how INFIX top level macro can return a non-list.  ")
                                                       (CAAR ELT))
                                                      (T (CAR ELT]
                                (T                           (* ; 
                                            "Reading sublist.  Take apart TCONC list and continue.")
                                   (SETQ LST (CAR ELT))
                                   (SETQ END (CDR ELT])
                         (FIXDOT)                            (* ; 
                                                        "Macro hit right bracket if we got to here")
                         (RETURN LST))))
              (SPLICE 
                      (* ;; "Macro returns arbitrary number of values to be spliced inline.")

                      [RBCONTEXT (SETQ ELT (RELEASERESOURCE \PNAMESTRING PNSTR (\APPLYREADMACRO
                                                                                STRM SNX]
                                                             (* ; 
                                       "Note: we don't care if there was terminating right-bracket")
                                                             (* ; "Why? -bvm")
                      (COND
                         ((OR (NULL ELT)
                              TOPLEVELP)

                          (* ;; "On the 10, it actually returns ELT if it is a list and the next token is a closing paren or bracket.  Hard to see how to get that behavior--rmk")

                          (GO NEWTOKEN))
                         ((NLISTP ELT)                       (* ; 
                               "The 10 throws initial non-lists away (What if LST/END aren't set?)")
                          (SETQ ELT (AND LST (LIST '%. ELT)))
                          (SETQ DOTLOC END)))
                      [COND
                         ((NOT *READ-SUPPRESS*)
                          (COND
                             (LST (RPLACD END ELT))
                             (T (SETQ LST ELT)))
                          (SETQ END (LAST ELT))
                          (COND
                             ((CDR END)                      (* ; "A dotted pair")
                              (SETQ DOTLOC END)
                              (RPLACD END (CONS '%. (SETQ END (CONS (CDR END])
              (SHOULDNT))
          (GO NEWTOKEN])

(\SUBREADCONCAT
  [LAMBDA (EXTRASEGMENTS PBASE J)                            (* ; "Edited 16-Jan-87 15:08 by bvm:")

    (* ;; "Produces a string consisting of all the characters \SUBREAD has been buffering up into a token.  Last J chars are stored at PBASE.  EXTRASEGMENTS is a list of strings in reverse order in the case that more characters were scanned than the pname string accommodates.")

    (SETQ PBASE (\GETBASESTRING PBASE 0 J \FATPNAMESTRINGP))
    (if EXTRASEGMENTS
        then (CONCATLIST (NCONC1 (REVERSE EXTRASEGMENTS)
                                    PBASE))
      else PBASE])

(\ORIG-READ.SYMBOL
  [LAMBDA (BASE OFFSET LEN FATP PACKAGE EXTERNALP NONNUMERICP)
                                                             (* bvm%: " 3-Aug-86 15:25")

(* ;;; "Read a number or symbol from the string defined by BASE OFFSET LEN FATP PACKAGE is NIL if no package was specified, a package object or a string if an unknown package was typed (causes error).  EXTERNALP is true if symbol was typed with one colon, which requires that the symbol exist and be external.  NONNUMERICP is true if we know the symbol is not a number, e.g., some characters in it were escaped.")

(* ;;; "For now a dummy definition")

    (COND
       (PACKAGE                                              (* ; "For debugging")
              (CONCAT PACKAGE (COND
                                 (EXTERNALP ":")
                                 (T "::"))
                     (\GETBASESTRING BASE OFFSET LEN FATP)))
       (T (OR (AND (NOT NONNUMERICP)
                   (\PARSE.NUMBER BASE OFFSET LEN FATP))
              (\MKATOM BASE OFFSET LEN FATP T])

(\ORIG-INVALID.SYMBOL
  [LAMBDA (BASE LEN NCOLONS PACKAGE EXTRASEGMENTS)           (* ; "Edited 15-Jan-87 17:33 by bvm:")

(* ;;; "Called when scanning a symbol that has more than 2 colons, or more than 1 non-consecutive colon.  If return from here, will read the symbol as though the extra colons were escaped.")

    (CL:CERROR "Treat the extra colon(s) as if they were escaped" "Invalid symbol syntax in %"~A%""
           (CONCAT (if (AND PACKAGE (NEQ PACKAGE *KEYWORD-PACKAGE*))
                       then (if (STRINGP PACKAGE)
                                    then PACKAGE
                                  else (CL:PACKAGE-NAME PACKAGE))
                     else "")
                  (SELECTQ NCOLONS
                      (1 ":")
                      (2 "::")
                      "")
                  (\SUBREADCONCAT EXTRASEGMENTS BASE LEN])

(\APPLYREADMACRO
  [LAMBDA (STREAM MACDEF ANSCELL)                            (* bvm%: " 4-May-86 16:38")
                                                             (* ; 
                                                         "INREADMACROP searches for this framename")
    (DECLARE (USEDFREE *READTABLE*))
    (APPLY* (fetch MACROFN of MACDEF)
           STREAM *READTABLE* ANSCELL])

(INREADMACROP
  [LAMBDA NIL                                                (* edited%: "26-MAY-79 00:12")
    (PROG (TEM (\READDEPTH -1))
          (DECLARE (SPECVARS \READDEPTH))
          (COND
             ([NULL (SETQ TEM (STKPOS '\APPLYREADMACRO]
              (RETURN NIL)))
          (MAPDL [FUNCTION (LAMBDA (NM POS)
                             (COND
                                ((EQ NM '\SUBREAD)
                                 (SETQ \READDEPTH (ADD1 \READDEPTH]
                 TEM)
          (RELSTK TEM)
          (RETURN \READDEPTH])

(\CHECKEOLC.CRLF
  [LAMBDA (STRM PEEKBINFLG COUNTP)                      (* ; "Edited  7-May-2021 12:25 by rmk:")

    (* ;; "This is called only when a CR has been read and EOLC is either any or CRLF. This returns EOL if the next code is an LF")

    (* ;; "If COUNTP, returns the number of bytes read, in a multiple value.")

    (* ;; "COUNTP should be NIL if PEEKBINFLG is T.")

    (LET (CH (NUM 0))
         [SETQ CH (COND
                     [PEEKBINFLG 

                            (* ;; 
                          "T from PEEKC.  In this case, must leave the fileptr where it was.")

                            (* ;; "The CR itself hasn't been read, just peeked.  So here we have to read it, then peek at the next character to see if it is an LF, and then back out the CR")

                            (COND
                               ([EQ (CHARCODE LF)
                                    (UNINTERRUPTABLY

                                        (* ;; " Since we are going to \BACKCHAR back the peeked character, we don't need to update the counter variable")

                                        (\INCCODE STRM)
                                        (PROG1 (\PEEKCCODE STRM T 'NOEOLC)

                                            (* ;; 
                          "This has to be a call to \PEEKCODE that doesn't itself to the checkeolc")

                                            (* ;; 
          "LF must be the next char after the CR.  We back up over the CR that \INCCODE just read.")

                                            (\BACKCHAR STRM)))]

                                (* ;; "Got the CRLF, it's an EOL")

                                (CHARCODE EOL))
                               (T (CHARCODE CR]
                     ((EQ (CHARCODE LF)
                          (\PEEKCCODE STRM T 'NOEOLC))

                      (* ;; "Since we aren't peeking, the CR has actually been read, and we are entitled to read the LF that we just peeked at.")

                      (\INCCODE STRM (AND COUNTP NUM))
                      (CHARCODE EOL))
                     (T (CHARCODE CR]
         (IF COUNTP
             THEN (CL:VALUES CH NUM)
           ELSE CH])
)
(DECLARE%: DONTEVAL@LOAD DOCOPY 

(MOVD? '\ORIG-READ.SYMBOL '\READ.SYMBOL)

(MOVD? '\ORIG-INVALID.SYMBOL '\INVALID.SYMBOL)
)



(* ; "Read macro for '")

(DEFINEQ

(READQUOTE
  [LAMBDA (FILE)                                             (* ; "Edited 19-Mar-87 16:10 by bvm:")
    (LIST 'QUOTE (CL:READ FILE T NIL T])
)



(* ; "# macro")

(DEFINEQ

(READVBAR
  [LAMBDA (STREAM RDTBL)                                     (* bvm%: "14-May-86 17:31")

(* ;;; "Read Interlisp's | macro.  Originally this char was just a sepr in FILERDTBL but was then extended in various hokey ways, because it was the only character plausibly available for redefinition.  Today it is extended still further to be Common Lisp # in all the cases not already taken by some other meaning")

    (SELCHARQ (PEEKCCODE STREAM)
         (%'                                                 (* ; 
                                "commonlisp defines #'X to mean (FUNCTION X), but here it's BQUOTE")
             (READCCODE STREAM)
             (READBQUOTE STREAM RDTBL))
         ((%( { ^)                                           (* ; "Used by HPRINT")
              (HREAD STREAM))
         (%# (READCCODE STREAM)                          (* ; "|# = Common Lisp #")
             (READHASHMACRO STREAM RDTBL))
         ((EOL TAB SPACE)                                    (* ; "CR or tab, treat as separator")
              (CL:VALUES))
         (PROGN                                              (* ; 
               "Everything else not already preempted by old-style | is interpreted as Common Lisp")
                (READHASHMACRO STREAM RDTBL])

(READHASHMACRO
  [LAMBDA (STREAM RDTBL INDEX)                               (* amd "15-Oct-86 16:36")

(* ;;; "Implements the standard # macro dispatch -- reads next character to find out what to do.  Can return zero values if we just want to skip something.")

    (LET ([READFN (COND
                     ((fetch (READTABLEP COMMONLISP) of RDTBL)

                      (* ;; "Kludge: if we have to recursively read something that will not end up as the resulting list structure, use the reader that passes thru CMLTRANSLATE")

                      (FUNCTION CL:READ))
                     (T (FUNCTION READ]
          NEXTCHAR READVAL)
         [while (DIGITCHARP (SETQ NEXTCHAR (PEEKCCODE STREAM RDTBL)))
            do (SETQ INDEX (PLUS (TIMES (OR INDEX 0)
                                            10)
                                     (DIFFERENCE (READCCODE STREAM RDTBL)
                                            (CHARCODE 0]
         (SELCHARQ NEXTCHAR
              ("(" [LET ((CONTENTS (APPLY* READFN STREAM)))
                        (COND
                           (INDEX (FILL-VECTOR (CL:MAKE-ARRAY INDEX)
                                         CONTENTS))
                           (T (CL:MAKE-ARRAY (LENGTH CONTENTS)
                                     :INITIAL-CONTENTS CONTENTS])
              (PROGN                                         (* ; 
 "Those cases we left the dispatching char in buffer for convenience of the next read.  Now eat it")
                     (SELCHARQ (READCCODE STREAM RDTBL)
                          (%' (LIST 'FUNCTION (READ STREAM RDTBL)))
                          (%. (EVAL (APPLY* READFN STREAM)))
                          (%, (LIST 'LOADTIMECONSTANT (READ STREAM RDTBL)))
                          (\ (CHARACTER.READ STREAM))
                          ("*"                               (* ; "Read bit vector")
                               [LET [(CONTENTS (while (MEMQ (PEEKCCODE STREAM RDTBL)
                                                                (CHARCODE (0 1)))
                                                  collect (IDIFFERENCE (READCCODE STREAM 
                                                                                  RDTBL)
                                                                     (CHARCODE 0]
                                    (COND
                                       (INDEX (FILL-VECTOR (CL:MAKE-ARRAY INDEX :ELEMENT-TYPE
                                                                  'BIT)
                                                     CONTENTS))
                                       (T (CL:MAKE-ARRAY (LENGTH CONTENTS)
                                                 :INITIAL-CONTENTS CONTENTS :ELEMENT-TYPE
                                                 'BIT])
                          (":" 
                               (* ;; "The same thing HASH-COLON does.")

                               (CL:MAKE-SYMBOL (READ-EXTENDED-TOKEN STREAM RDTBL)))
                          ((O o) 
                               (READNUMBERINBASE STREAM 8))
                          ((B b) 
                               (READNUMBERINBASE STREAM 2))
                          ((X x) 
                               (READNUMBERINBASE STREAM 16))
                          ((R r) 
                               (READNUMBERINBASE STREAM INDEX))
                          ((A a) 
                               (LET ((CONTENTS (APPLY* READFN STREAM)))
                                    (CL:MAKE-ARRAY (ESTIMATE-DIMENSIONALITY INDEX CONTENTS)
                                           :INITIAL-CONTENTS CONTENTS)))
                          ((S s) 
                               (CREATE-STRUCTURE (APPLY* READFN STREAM)))
                          ((C c) 
                               (DESTRUCTURING-BIND (NUM DEN)
                                      (APPLY* READFN STREAM)
                                      (COMPLEX NUM DEN)))
                          (+                                 (* ; 
                                                           "Skip expression if feature not present")
                             (COND
                                ((NOT (CMLREAD.FEATURE.PARSER (READ STREAM RDTBL)))
                                 (CL:READ STREAM RDTBL)))
                             (CL:VALUES))
                          (-                                 (* ; 
                                                           "Skip expression if feature IS present")
                             (COND
                                ((CMLREAD.FEATURE.PARSER (READ STREAM RDTBL))
                                 (CL:READ STREAM RDTBL)))
                             (CL:VALUES))
                          ("|"                               (* ; "special comment")
                               (SKIP.HASH.COMMENT STREAM RDTBL)
                               (CL:VALUES))
                          (< (ERROR "#< construct is un-READ-able" (READ)))
                          ((SPACE TAB NEWLINE PAGE RETURN %)) 
                               (ERROR "Illegal read syntax " (CHARCODE.UNDECODE NEXTCHAR)))
                          (%"                                (* ; 
                                      "An extension -- read string without cr's and leading spaces")
                              (RSTRING STREAM RDTBL 'SKIP))
                          (APPLY* (OR (GET (CHARACTER NEXTCHAR)
                                           'HASHREADMACRO)
                                      (ERROR "Undefined hashmacro char" NEXTCHAR))
                                 STREAM RDTBL])

(DEFMACRO-LAMBDA-LIST-KEYWORD-P
  [LAMBDA (S)                                                (* bvm%: " 3-Nov-86 15:12")
    (AND (FMEMB S '(&OPTIONAL &REST &KEY &ALLOW-OTHER-KEYS &AUX &BODY &WHOLE))
         T])

(DIGITBASEP
  [LAMBDA (CODE RADIX)                                       (* lmm "11-Jun-85 00:54")
    (COND
       ((AND (GEQ CODE (CHARCODE 0))
             (LESSP CODE (PLUS (CHARCODE 0)
                               RADIX)))
        (DIFFERENCE CODE (CHARCODE 0)))
       ((GREATERP RADIX 10)
        [COND
           ((AND (GEQ CODE (CHARCODE a))
                 (LEQ CODE (CHARCODE z)))
            (add CODE (DIFFERENCE (CHARCODE A)
                                 (CHARCODE a]
        (COND
           ((AND (GEQ CODE (CHARCODE A))
                 (LEQ CODE (CHARCODE Z)))
            [SETQ CODE (PLUS 10 (DIFFERENCE CODE (CHARCODE A]
            (COND
               ((LESSP CODE RADIX)
                CODE])

(READNUMBERINBASE
  [LAMBDA (STREAM RADIX)                                     (* bvm%: " 4-Nov-86 21:34")
    (PROG ((BODY (READ-EXTENDED-TOKEN STREAM))
           (I 1)
           CH VAL NUMERATOR SIGN BASE)                       (* ; "First check for leading sign")
          (if *READ-SUPPRESS*
              then                                       (* ; "work is done")
                    (RETURN NIL))
          (SELCHARQ (SETQ CH (NTHCHARCODE BODY 1))
               (+ (GO NEXTCH))
               (- (SETQ SIGN T)
                  (GO NEXTCH))
               NIL)
      LP  (if (SETQ BASE (DIGITBASEP CH RADIX))
              then (SETQ VAL (+ (TIMES (OR VAL 0)
                                           RADIX)
                                    BASE))
            elseif (EQ CH (CHARCODE "/"))
              then                                       (* ; "Ratio marker")
                    (if (OR NUMERATOR (NULL VAL))
                        then (GO MALFORMED))
                    (SETQ NUMERATOR VAL)
                    (SETQ VAL NIL)
            else                                         (* ; 
                                          "Terminated by a character that is not a token delimiter")
                  (GO MALFORMED))
      NEXTCH
          (if (SETQ CH (NTHCHARCODE BODY (add I 1)))
              then (GO LP)
            else                                         (* ; "end of token, fall thru"))
      DONE
          (if (NULL VAL)
              then (GO MALFORMED))
          (if NUMERATOR
              then (SETQ VAL (%%/ NUMERATOR VAL)))
          (RETURN (if SIGN
                      then (- VAL)
                    else VAL))
      MALFORMED
          (RETURN (CL:ERROR "Malformed base ~D rational ~S" RADIX BODY])

(ESTIMATE-DIMENSIONALITY
  [LAMBDA (RANK CONTENTS)                                    (* bvm%: " 9-May-86 16:06")
    (COND
       ((NULL RANK)
        (ERROR "No rank found while reading array" NIL))
       ((EQ RANK 0)
        NIL)
       (T (to RANK as (D _ CONTENTS) by (CAR D) collect (LENGTH D])

(SKIP.HASH.COMMENT
  [LAMBDA (STREAM RDTBL)                                     (* bvm%: "12-Sep-86 21:02")
    (PROG NIL

     (* ;; "a tiny fsm that recognizes #| ... |# with possible nestings of itself")

      LP  (SELCHARQ (READCCODE STREAM RDTBL)
               ("#" (GO SHARP))
               ("|" (GO VBAR))
               (GO LP))
      SHARP
          (SELCHARQ (READCCODE STREAM RDTBL)
               ("|"                                          (* ; 
                                                           "#| -- recursively skip nested section")
                    (SKIP.HASH.COMMENT STREAM RDTBL)
                    (GO LP))
               ("#" (GO SHARP))
               (GO LP))
      VBAR
          (SELCHARQ (READCCODE STREAM RDTBL)
               ("|" (GO VBAR))
               ("#"                                          (* ; "found closing |#")
                    (RETURN))
               (GO LP])

(CMLREAD.FEATURE.PARSER
  [LAMBDA (EXPR)                                             (* bvm%: " 3-Nov-86 15:07")
    (COND
       ((CL:CONSP EXPR)
        (SELECTQ (CAR EXPR)
            ((:AND AND) 
                 (EVERY (CDR EXPR)
                        (FUNCTION CMLREAD.FEATURE.PARSER)))
            ((:OR OR) 
                 (SOME (CDR EXPR)
                       (FUNCTION CMLREAD.FEATURE.PARSER)))
            ((:NOT NOT) 
                 (NOT (CMLREAD.FEATURE.PARSER (CADR EXPR))))
            (ERROR "Bad feature expression" EXPR)))
       ((FMEMB EXPR *FEATURES*)
        T])
)



(* ; "Reading characters with #\")

(DEFINEQ

(CHARACTER.READ
  [LAMBDA (STREAM)                                           (* bvm%: " 4-Nov-86 21:50")

(* ;;; "Called by the #\ macro -- reads a character object consisting of the thing next named")

    (LET ((NEXTCHAR (READCCODE STREAM))
          CH)
         (COND
            ((OR (NULL (SETQ CH (PEEKCCODE STREAM T)))
                 (fetch STOPATOM of (\SYNCODE (fetch READSA of *READTABLE*)
                                                   CH)))     (* ; 
                                                          "Terminates next, so it's just this char")
             (CL:CODE-CHAR NEXTCHAR))
            (*READ-SUPPRESS*                                 (* ; 
                                                         "don't try to decode it, could be illegal")
                   (READ-EXTENDED-TOKEN STREAM)
                   NIL)
            (T                                               (* ; 
                                                     "Read a whole name, up to the next break/sepr")
               (CL:CODE-CHAR (CHARCODE.DECODE (CONCAT (ALLOCSTRING 1 NEXTCHAR)
                                                         (READ-EXTENDED-TOKEN STREAM])

(CHARCODE.DECODE
  [LAMBDA (C NOERROR)                                        (* ; 
                                                           "Edited  1-Aug-2020 18:52 by rmk:")
                                                             (* ; "Edited 18-Feb-87 22:03 by bvm:")
    (DECLARE (GLOBALVARS CHARACTERNAMES CHARACTERSETNAMES))

    (* ;; "RMK 2020:  Added hexstring decoding for  Unicode:  no commas or other delimiters")

    (* ;; "This overrides the definition in LLREAD.  It should be placed there, but for some reason it is not possible to then recompile that file:  loading a new .LCOM says that \INVALID.SYMBOL is a bad compiled function, and then it loses track of the keyword package. Could be a load-sequence problem that would be resolved if this is installed in a new INIT.SYSOUT rather than an overlay of files already loaded into the LISP.SYSOUT")

    (COND
       ((NOT C)
        NIL)
       ((LISTP C)
        (CONS (CHARCODE.DECODE (CAR C)
                     NOERROR)
              (CHARCODE.DECODE (CDR C)
                     NOERROR)))
       ((NOT (OR (ATOM C)
                 (STRINGP C)))
        (AND (NOT NOERROR)
             (ERROR "BAD CHARACTER SPECIFICATION" C)))
       ((EQ (NCHARS C)
            1)
        (CHCON1 C))
       (T
        (SELCHARQ (CHCON1 C)
             (^ (AND (SETQ C (CHARCODE.DECODE (SUBSTRING C 2 -1)
                                    NOERROR))
                     (LOGAND C (LOGNOT 96))))
             (%# 
                 (* ;; "We use IPLUS instead of LOGOR here because some people want ##char to read as Xerox Meta, i.e., 1,char")

                 (AND (SETQ C (CHARCODE.DECODE (SUBSTRING C 2 -1)
                                     NOERROR))
                      (IPLUS C 128)))
             (LET
              ((STR (MKSTRING C)))
              (for X in CHARACTERNAMES when (STRING.EQUAL (CAR X)
                                                               STR)
                 do (RETURN (OR (NUMBERP (CADR X))
                                    (CHARCODE.DECODE (CADR X)
                                           NOERROR)))
                 finally
                 (RETURN (LET ((POS (STRPOSL '(%, - "." "|")
                                           STR))
                               CH CSET)                      (* ; "In the form charset,char")
                              (COND
                                 ((AND POS (SETQ CH (OR (CL:PARSE-INTEGER STR :START POS :RADIX 8
                                                               :JUNK-ALLOWED T)
                                                        (CHARCODE.DECODE (SUBSTRING STR
                                                                                    (ADD1 POS))
                                                               NOERROR)))
                                       (< CH 256)
                                       (>= CH 0))            (* ; 
                                        "parsed the char part as an octal number or character spec")
                                  (if (AND [SETQ CSET (OR (CL:PARSE-INTEGER STR :END
                                                                     (SUB1 POS)
                                                                     :RADIX 8 :JUNK-ALLOWED T)
                                                              (for PAIR in CHARACTERSETNAMES
                                                                 first (SETQ POS
                                                                            (SUBSTRING STR 1
                                                                                   (SUB1 POS)))
                                                                 when (STRING.EQUAL (CAR PAIR)
                                                                                 POS)
                                                                 do (RETURN (CADR PAIR]
                                               (< CSET 256)
                                               (>= CSET 0))
                                      then               (* ; 
                              "parsed the charset part as an octal number or standard charset name")
                                            (LOGOR CH (LLSH CSET 8))
                                    elseif (NOT NOERROR)
                                      then (ERROR "BAD CHARACTERSET SPECIFICATION" C)))
                                 ((AND (NOT (FIXP C))
                                       (CL:PARSE-INTEGER (CL:IF (EQ 1 (OR (STRPOS "0x" STR)
                                                                              (STRPOS "0X" STR)
                                                                              (STRPOS "U+" STR)))
                                                                 (SUBSTRING STR 3)
                                                                 STR)
                                              :RADIX 16 :JUNK-ALLOWED T)))
                                 ((NOT NOERROR)
                                  (ERROR "BAD CHARACTER SPECIFICATION" C])
)

(RPAQQ CHARACTERNAMES
       (("Page" 12)
        ("Form" 12)
        ("FF" 12)
        ("Rubout" 127)
        ("Del" 127)
        ("Null" 0)
        ("Escape" 27)
        ("Esc" 27)
        ("Bell" 7)
        ("Tab" 9)
        ("Backspace" 8)
        ("Bs" 8)
        ("Newline" 13)
        ("CR" 13)
        ("EOL" 13)
        ("Return" 13)
        ("Tenexeol" 31)
        ("Space" 32)
        ("Sp" 32)
        ("Linefeed" 10)
        ("LF" 10)))

(RPAQQ CHARACTERSETNAMES (("Greek" 38)
                              ("Cyrillic" 39)
                              ("Hira" 36)
                              ("Hiragana" 36)
                              ("Kata" 37)
                              ("Katakana" 37)
                              ("Kanji" 48)))
(DECLARE%: DOEVAL@COMPILE DONTCOPY 

(RPAQQ READTYPES (READ.RT RATOM.RT NOPROPRB.RT PROPRB.RT))
(DECLARE%: EVAL@COMPILE 

(RPAQQ READ.RT NIL)

(RPAQQ RATOM.RT 1)

(RPAQQ NOPROPRB.RT T)

(RPAQQ PROPRB.RT 0)


(CONSTANTS READ.RT RATOM.RT NOPROPRB.RT PROPRB.RT)
)

(DECLARE%: EVAL@COMPILE 

(PUTPROPS .CALL.SUBREAD. MACRO ((STREAM EOF-SUPPRESS EOF-VALUE CHAR PRESERVE-WHITESPACE)
                                        (WITH-RESOURCE (\PNAMESTRING)
                                               (\SUBREAD (\GETSTREAM STREAM 'INPUT)
                                                      (fetch (READTABLEP READSA) of 
                                                                                          *READTABLE*
                                                             )
                                                      (COND
                                                         (CHAR -1)
                                                         (T READ.RT))
                                                      \PNAMESTRING
                                                      (AND (fetch (READTABLEP CASEINSENSITIVE)
                                                              of *READTABLE*)
                                                           (fetch (ARRAYP BASE) of 
                                                                                       UPPERCASEARRAY
                                                                  ))
                                                      EOF-SUPPRESS EOF-VALUE CHAR PRESERVE-WHITESPACE
                                                      ))))

(PUTPROPS FIXDOT MACRO [NIL (PROGN                   (* ; 
                                                      "Fix a non-first dot followed by a singleton")
                                           (AND DOTLOC (CDDR DOTLOC)
                                                (NULL (CDDDR DOTLOC))
                                                (RPLACD DOTLOC (CADDR DOTLOC])

(PUTPROPS RBCONTEXT MACRO ((X . Y)
                                   ([LAMBDA (\RBFLG)
                                      (DECLARE (SPECVARS \RBFLG))
                                      (PROGN X . Y)
                                      \RBFLG]
                                    NIL)))

(PUTPROPS PROPRB MACRO [(X . Y)                      (* ; 
                                                           "Propagates the right-bracket flag")
                                (AND (RBCONTEXT X . Y)
                                     (OR (EQ READTYPE NOPROPRB.RT)
                                         (SETQ \RBFLG T])

(PUTPROPS \RDCONC MACRO [(ELT . TOPFORMS)

                                 (* ;; "Add ELT to the accumulating list to be returned by \SUBREAD.  If at top level and no list accumulated, then run TOPFORMS")

                                 (COND
                                    [LST (RPLACD END (SETQ END (CONS ELT]
                                    (TOPLEVELP . TOPFORMS)
                                    ((NOT *READ-SUPPRESS*)   (* ; 
                                  "Don't bother consing the result if it's going to be thrown away")
                                     (SETQ END (SETQ LST (CONS ELT])
)

(DECLARE%: DOEVAL@COMPILE DONTCOPY

(SPECVARS *READ-NEWLINE-SUPPRESS* \RefillBufferFn)
)

(DECLARE%: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS *KEYWORD-PACKAGE* *INTERLISP-PACKAGE*)
)
)

(RPAQ? *REPLACE-NO-FONT-CODE* T)

(RPAQ? *DEFAULT-NOT-CONVERTED-FAT-CODE* 8739)
(DECLARE%: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS *REPLACE-NO-FONT-CODE* *DEFAULT-NOT-CONVERTED-FAT-CODE*)
)
(DECLARE%: DOEVAL@COMPILE DONTCOPY 
(* "FOLLOWING DEFINITIONS EXPORTED")(DECLARE%: EVAL@COMPILE 

(PUTPROPS \BACKCHAR MACRO [OPENLAMBDA (STRM COUNTERVAR)
                                                             (* ; 
                                                           "Backs up over a single character")
                                    (LET ((FN (ffetch (STREAM BACKCHARFN) of STRM)))
                                         (COND
                                            (FN (CL:FUNCALL FN STRM COUNTERVAR))
                                            (T (\DEFAULTBACKCHAR STRM COUNTERVAR])

(PUTPROPS \INCCODE MACRO [OPENLAMBDA (STRM COUNTERVAR)

                                 (* ;; "The default should be equivalent to the INCCODEFN of the default external format. Compiling it open avoids the multiple-value returns when COUNTERVAR is provided, but that by itself is helpful only in a few cases, like PFCOPYBYTES.")

                                   (LET ((FN (ffetch (STREAM INCCODEFN) of STRM)))
                                        (COND
                                           [FN (COND
                                                  ('COUNTERVAR (CL:MULTIPLE-VALUE-BIND
                                                                (CODE NUM)
                                                                (CL:FUNCALL FN STRM T)
                                                                (AND NUM (SETQ COUNTERVAR
                                                                          (IDIFFERENCE COUNTERVAR NUM
                                                                                 )))
                                                                CODE))
                                                  (T (CL:FUNCALL FN STRM]
                                           (T (\DEFAULTINCCODE STRM COUNTERVAR])

(PUTPROPS \INCHAR MACRO (OPENLAMBDA (STRM COUNTERVAR EOLC)

                                  (* ;; 
                        "EOL conversion around \INCCODE.  EOLC of NIL means all patterns go to EOL")

                                  (\CHECKEOLC (\INCCODE STRM COUNTERVAR)
                                         EOLC STRM COUNTERVAR)))

(PUTPROPS \PEEKCCODE MACRO (OPENLAMBDA (STRM NOERROR EOL)
                                     (LET ((FN (ffetch (STREAM PEEKCCODEFN) of STRM)))
                                          (\CHECKEOLC (CL:IF FN
                                                          (CL:FUNCALL FN STRM NOERROR NIL)
                                                          (\DEFAULTPEEKCCODE STRM NOERROR))
                                                 EOL STRM T))))

(PUTPROPS \OUTCHAR DMACRO [OPENLAMBDA (STRM CODE)
                                    (LET ((FN (FFETCH (STREAM OUTCHARFN) OF STRM)))
                                         (CL:IF FN
                                             (SPREADAPPLY* FN STRM CODE)
                                             (\DEFAULTOUTCHAR STRM CODE))])

(PUTPROPS \CHECKEOLC MACRO
          [OPENLAMBDA (CH EOLC STRM PEEKBINFLG COUNTERVAR)
            (COND
               ((EQ EOLC 'NOEOLC)
                CH)
               (T (SELCHARQ CH
                       (LF (SELECTC (OR EOLC (FFETCH (STREAM EOLCONVENTION) OF STRM))
                               ((LIST LF.EOLC 'ANY) 
                                    (CHARCODE EOL))
                               (CHARCODE LF)))
                       (CR (SELECTC (OR EOLC (FFETCH (STREAM EOLCONVENTION) OF STRM))
                               (CR.EOLC (CHARCODE EOL))
                               ((LIST 'ANY CRLF.EOLC) 
                                    (COND
                                       ('COUNTERVAR (CL:MULTIPLE-VALUE-BIND (CODE NUM)
                                                           (\CHECKEOLC.CRLF STRM PEEKBINFLG T)
                                                           (AND NUM (SETQ COUNTERVAR (IDIFFERENCE
                                                                                      COUNTERVAR NUM)
                                                                     ))
                                                           CODE))
                                       (T (\CHECKEOLC.CRLF STRM PEEKBINFLG))))
                               (CHARCODE CR)))
                       CH])
)
(DECLARE%: EVAL@COMPILE 

(PUTPROPS \DEFAULTBACKCHAR MACRO ((STRM COUNTERVAR)
                                          (\BACKNSCHAR STRM (UNFOLD (ACCESS-CHARSET STRM)
                                                                   256)
                                                 COUNTERVAR)))

(PUTPROPS \DEFAULTINCCODE MACRO ((STRM COUNTERVAR)
                                         (\XCCSIN STRM (UNFOLD (ACCESS-CHARSET STRM)
                                                              256)
                                                NIL COUNTERVAR)))

(PUTPROPS \DEFAULTPEEKCCODE MACRO ((STRM NOERROR)
                                           (\XCCSPEEK STRM (UNFOLD (ACCESS-CHARSET STRM)
                                                                  256)
                                                  NIL NOERROR)))

(PUTPROPS \DEFAULTOUTCHAR MACRO ((STRM CODE)         (* ; 
                                                        "\XCCSOUTCHARFN from :XCCS external format")
                                         (\XCCSOUTCHARFN STRM CODE)))
)
(DECLARE%: EVAL@COMPILE 

(PUTPROPS \BACKNSCHAR MACRO ((ST SHIFTEDCHARSET COUNTERVAR)
                                     (\BACKXCCSCHAR ST SHIFTEDCHARSET COUNTERVAR)))

(PUTPROPS \NSIN MACRO [(ST SHIFTEDCSET SHIFTEDCSETVAR COUNTERVAR)

(* ;;; "Dispatches to the appropriate character code decoder.  If you want to support a new character encoding format, you have to add a new external format.")

                               (LET ((FN (ffetch (STREAM INCCODEFN) of ST)))
                                    (COND
                                       [FN (COND
                                              ('COUNTERVAR (CL:MULTIPLE-VALUE-BIND
                                                            (CODE NUM)
                                                            (CL:FUNCALL FN ST T)
                                                            (AND NUM (SETQ COUNTERVAR
                                                                      (IDIFFERENCE COUNTERVAR NUM)))
                                                            CODE))
                                              (T (CL:FUNCALL FN ST NIL]
                                       (T (\XCCSIN ST SHIFTEDCSET SHIFTEDCSETVAR COUNTERVAR])

(PUTPROPS \NSPEEK MACRO [(ST SHIFTEDCSET SHIFTEDCSETVAR NOERROR COUNTERVAR)

(* ;;; "Dispatches to the appropriate character code decoder.  If you want to support a new character encoding format, you have to write a decoder and add it here.")

                                 (COND
                                    ((\XCCSP ST)
                                     (\XCCSPEEK ST (UNFOLD (ACCESS-CHARSET ST)
                                                          256)
                                            NIL NOERROR))
                                    (T (COND
                                          ('COUNTERVAR (CL:MULTIPLE-VALUE-BIND
                                                        (CODE NUM)
                                                        (CL:FUNCALL (ffetch (STREAM PEEKCCODEFN)
                                                                       of ST)
                                                               ST NOERROR T)
                                                        (AND NUM (SETQ COUNTERVAR (IDIFFERENCE 
                                                                                         COUNTERVAR 
                                                                                         NUM)))
                                                        CODE))
                                          (T (CL:FUNCALL (ffetch (STREAM PEEKCCODEFN)
                                                            of ST)
                                                    ST NOERROR NIL])

(PUTPROPS NUMERIC-CHARSET MACRO (= . ACCESS-CHARSET))
)

(* "END EXPORTED DEFINITIONS")


(* "FOLLOWING DEFINITIONS EXPORTED")(DECLARE%: EVAL@COMPILE 

(PUTPROPS \XCCSIN MACRO [(STREAM SHIFTEDCSET SHIFTEDCSETVAR COUNTERVAR)

(* ;;; "returns a 16 bit character code.  SHIFTEDCSET is STREAM's char set left shifted 8, SHIFTEDCSETVAR if non-NIL is the variable to set if char set changes.  COUNTERVAR if non-NIL is decremented by number of bytes read.  Doesn't do EOL conversion -- \INCHAR does that.")

                                 (LET ((CHAR (\BIN STREAM))
                                       SCSET)
                                      (COND
                                         [(EQ CHAR NSCHARSETSHIFT)
                                                             (* ; "Shifting character sets")
                                          [ACCESS-CHARSET STREAM
                                                 (SETQ SCSET (COND
                                                                ((NEQ NSCHARSETSHIFT (SETQ CHAR
                                                                                      (\BIN STREAM)))
                                                                 (AND 'COUNTERVAR (SETQ COUNTERVAR
                                                                                   (IDIFFERENCE
                                                                                    COUNTERVAR 2)))
                                                                 CHAR)
                                                                ((PROGN 
                                                             (* ; 
                                                           "2 shift-bytes means not run-encoded")
                                                                        (AND 'COUNTERVAR
                                                                             (SETQ COUNTERVAR
                                                                              (IDIFFERENCE COUNTERVAR
                                                                                     3)))
                                                                        (EQ 0 (\BIN STREAM)))
                                                                 \NORUNCODE)
                                                                (T (\NSIN.24BITENCODING.ERROR
                                                                    STREAM]
                                          (SETQ CHAR (\BIN STREAM))
                                          (SETQ SCSET (COND
                                                         ('SHIFTEDCSETVAR 
                                                             (* ; "CHARSETVAR=NIL means don't set")
                                                                (SETQ SHIFTEDCSETVAR (UNFOLD SCSET 
                                                                                            256)))
                                                         (T (UNFOLD SCSET 256]
                                         (T (SETQ SCSET SHIFTEDCSET)))
                                      (COND
                                         ((EQ SCSET (UNFOLD \NORUNCODE 256))
                                                             (* ; 
                                           "just read two bytes and combine them to a 16 bit value")
                                          (AND 'COUNTERVAR (SETQ COUNTERVAR (IDIFFERENCE COUNTERVAR 2
                                                                                   )))
                                          (LOGOR (UNFOLD CHAR 256)
                                                 (\BIN STREAM)))
                                         (CHAR (AND 'COUNTERVAR (SETQ COUNTERVAR (IDIFFERENCE 
                                                                                        COUNTERVAR 1)
                                                                 ))
                                               (AND CHAR (LOGOR SCSET CHAR])

(PUTPROPS \XCCSPEEK MACRO [(STREAM SHIFTEDCSET SHIFTEDCSETVAR NOERROR COUNTERVAR)

                                 (* ;; "Returns a 16 bit character code.  Doesn't do EOL conversion--\INCHAR does that.  May actually read the character-set shift, storing the result in the stream.  COUNTERVAR, if given, is updated to reflect any such bytes that are actually read")

                                   (PROG ((CHAR (\PEEKBIN STREAM NOERROR))
                                          SCSET)
                                         (COND
                                            ((NULL CHAR)
                                             (RETURN NIL))
                                            [(EQ CHAR NSCHARSETSHIFT)
                                                             (* ; "CHARSETVAR=NIL means don't set")
                                             (\BIN STREAM)   (* ; "Consume the char shift byte")
                                             [ACCESS-CHARSET STREAM
                                                    (SETQ SCSET (COND
                                                                   ((NEQ NSCHARSETSHIFT
                                                                         (SETQ CHAR (\BIN STREAM)))
                                                             (* ; 
     "Note: no eof error check on this \BIN -- an eof in the middle of a charset shift is an error")
                                                                    (AND 'COUNTERVAR
                                                                         (SETQ COUNTERVAR
                                                                          (IDIFFERENCE COUNTERVAR 2))
                                                                         )
                                                                    CHAR)
                                                                   ((PROGN 
                                                             (* ; 
                                                           "2 shift-bytes means not run-encoded")
                                                                           (AND 'COUNTERVAR
                                                                                (SETQ COUNTERVAR
                                                                                 (IDIFFERENCE 
                                                                                        COUNTERVAR 3)
                                                                                 ))
                                                                           (EQ 0 (\BIN STREAM)))
                                                                    \NORUNCODE)
                                                                   (T (\NSIN.24BITENCODING.ERROR
                                                                       STREAM]
                                             [SETQ SCSET (COND
                                                            ('SHIFTEDCSETVAR 
                                                             (* ; "CHARSETVAR=NIL means don't set")
                                                                   (SETQ SHIFTEDCSETVAR
                                                                    (UNFOLD SCSET 256)))
                                                            (T (UNFOLD SCSET 256]
                                             (COND
                                                ((NULL (SETQ CHAR (\PEEKBIN STREAM NOERROR)))
                                                 (RETURN NIL]
                                            (T (SETQ SCSET SHIFTEDCSET)))
                                         (RETURN (COND
                                                    ((EQ SCSET (UNFOLD \NORUNCODE 256))

                                              (* ;; "just peek two bytes and combine them to a 16 bit value.  Again, is an error if we hit eof in mid-character")

                                                     (\BIN STREAM)
                                                     (PROG1 (LOGOR (UNFOLD CHAR 256)
                                                                   (\PEEKBIN STREAM NOERROR))
                                                            (\BACKFILEPTR STREAM)))
                                                    (T (LOGOR SHIFTEDCSET CHAR])

(PUTPROPS \BACKXCCSCHAR MACRO [(STREAM SHIFTEDCHARSET COUNTERVAR)
                                       (AND (\BACKFILEPTR STREAM)
                                            (COND
                                               [[COND
                                                   (SHIFTEDCHARSET (EQ SHIFTEDCHARSET
                                                                       (UNFOLD \NORUNCODE 256)))
                                                   (T (EQ \NORUNCODE (ACCESS-CHARSET STREAM]
                                                (COND
                                                   ((\BACKFILEPTR STREAM)
                                                    (AND 'COUNTERVAR (add COUNTERVAR 2))
                                                    T)
                                                   ('COUNTERVAR (add COUNTERVAR 1]
                                               ('COUNTERVAR (add COUNTERVAR 1])

(PUTPROPS \XCCSP MACRO [OPENLAMBDA (ST)
                                 (NOT (ffetch (STREAM NOTXCCS) of (\DTEST ST 'STREAM])
)

(* "END EXPORTED DEFINITIONS")

)

(RPAQ? *SIGNAL-24BIT-NSENCODING-ERROR* )

(RPAQ? *READ-NEWLINE-SUPPRESS* )

(RPAQ? \RefillBufferFn (FUNCTION \READCREFILL))



(* ; 
"Top level val of \RefillBufferFn means act like READC--we must be doing a raw BIN (or PEEKBIN?)")

(DECLARE%: DOEVAL@COMPILE DONTCOPY

(LOCALVARS . T)
)
(DECLARE%: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS 

(ADDTOVAR NLAMA )

(ADDTOVAR NLAML )

(ADDTOVAR LAMA CL:PARSE-INTEGER CL:READ-DELIMITED-LIST CL:READ-PRESERVING-WHITESPACE CL:READ)
)
(PUTPROPS LLREAD COPYRIGHT ("Venue & Xerox Corporation" 1981 1982 1983 1984 1985 1986 1987 1988 1990 
1991 1993 2021))
(DECLARE%: DONTCOPY
  (FILEMAP (NIL (4383 14317 (LASTC 4393 . 4699) (PEEKC 4701 . 5089) (PEEKCCODE 5091 . 5384) (RATOM 5386
 . 6467) (READ 6469 . 7029) (READC 7031 . 7988) (READCCODE 7990 . 8899) (READP 8901 . 9453) (
SETREADMACROFLG 9455 . 9754) (SKIPSEPRCODES 9756 . 10653) (SKIPSEPRS 10655 . 11545) (
\NSIN.24BITENCODING.ERROR 11547 . 12366) (SKREAD 12368 . 14315)) (14363 23038 (CL:READ 14373 . 14922) 
(CL:READ-PRESERVING-WHITESPACE 14924 . 15646) (CL:READ-DELIMITED-LIST 15648 . 16563) (CL:PARSE-INTEGER
 16565 . 23036)) (23131 36594 (RSTRING 23141 . 23873) (READ-EXTENDED-TOKEN 23875 . 27926) (\RSTRING2 
27928 . 36592)) (36630 70164 (\TOP-LEVEL-READ 36640 . 38623) (\SUBREAD 38625 . 64304) (\SUBREADCONCAT 
64306 . 64929) (\ORIG-READ.SYMBOL 64931 . 65999) (\ORIG-INVALID.SYMBOL 66001 . 66900) (\APPLYREADMACRO
 66902 . 67318) (INREADMACROP 67320 . 67886) (\CHECKEOLC.CRLF 67888 . 70162)) (70323 70498 (READQUOTE 
70333 . 70496)) (70523 82427 (READVBAR 70533 . 71864) (READHASHMACRO 71866 . 77676) (
DEFMACRO-LAMBDA-LIST-KEYWORD-P 77678 . 77898) (DIGITBASEP 77900 . 78634) (READNUMBERINBASE 78636 . 
80522) (ESTIMATE-DIMENSIONALITY 80524 . 80849) (SKIP.HASH.COMMENT 80851 . 81819) (
CMLREAD.FEATURE.PARSER 81821 . 82425)) (82471 89004 (CHARACTER.READ 82481 . 83735) (CHARCODE.DECODE 
83737 . 89002)))))
STOP
