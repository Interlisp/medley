(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "XCL" BASE 10)(FILECREATED "25-Mar-2021 09:50:57" |{DSK}<home>larry>ilisp>medley>sources>MAIKOETHER.;2| 47411        |changes| |to:|  (VARS MAIKOETHERCOMS \\EPT.3TO10)                       (FNS \\MAIKO.10MBSENDPACKET \\MAIKO.10MBWATCHER \\MAIKO.ETHERRESUME                             \\MAIKO.ETHERSUSPEND \\MAIKO.INPUT.INTERRUPT \\MAIKO.10MBSTARTDRIVER                             \\MAIKO.10MBTURNONETHER \\MAIKO.10MB.RESTART.ETHER \\MAIKO.CHECKSUM)      |previous| |date:| " 4-May-91 15:52:07" |{DSK}<home>larry>ilisp>medley>sources>MAIKOETHER.;1|); Copyright (c) 1988-1991, 2021 by Venue & Xerox Corporation.(PRETTYCOMPRINT MAIKOETHERCOMS)(RPAQQ MAIKOETHERCOMS       ((FNS \\10MB.RESTART.ETHER \\10MB.STARTDRIVER \\10MB.TURNOFFETHER \\10MB.TURNONETHER              \\10MBSENDPACKET \\10MBWATCHER \\DISPLAYLINE \\MAIKO.10MBSENDPACKET \\MAIKO.10MBWATCHER             \\MAIKO.ETHERRESUME \\MAIKO.ETHERSUSPEND \\MAIKO.INPUT.INTERRUPT \\NS.SETTIME              \\PUP.SETTIME \\MAIKO.10MBSTARTDRIVER \\MAIKO.10MBTURNONETHER \\MAIKO.10MB.RESTART.ETHER             \\MAIKO.CHECKSUM)        (INITVARS (\\MAIKO.INPUT.PACKET)               (|\\ETHERtopMonitor| (CREATE.MONITORLOCK "ETHERTopMonitor")))        (DECLARE\: EVAL@COMPILE DONTCOPY (FILES (LOADCOMP)                                                10MBDRIVER)               (GLOBALVARS \\MAIKO.INPUT.PACKET |\\ETHERtopMonitor|)                              (* |;;| "The NDB for Maiko's 10MB connection; used by \\MAIKO.ETHER-INTERRUPT:")               (GLOBALVARS \\MAIKO.10MB.NDB)               (GLOBALVARS \\MAIKO.IO-INTERRUPT-FLAGS \\MAIKO.IO-INTERRUPT-VECTOR))        (ADDVARS (\\MAIKO.MOVDS (\\MAIKO.10MBSTARTDRIVER \\10MB.STARTDRIVER)                        (\\MAIKO.10MBWATCHER \\10MBWATCHER)                        (\\MAIKO.10MBSENDPACKET \\10MBSENDPACKET)                        (\\MAIKO.ETHERSUSPEND \\10MB.TURNOFFETHER)                        (\\MAIKO.10MBTURNONETHER \\10MB.TURNONETHER)                        (\\MAIKO.ETHERRESUME \\10MB.RESTART.ETHER)                        (\\MAIKO.CHECKSUM \\CHECKSUM)))        (COMS                                                (* \; "MAIKO handler for new interrupt-driven incoming ethernet communication, rather than polling for it.")              (FNS \\MAIKO.ETHER-INTERRUPT))        (COMS                                                (* \; "MAIKO Log & Console message handling.  Interrupt-driven message printing, instead of polled printing.")              (FNS \\MAIKO.CONSOLE-LOG-PRINT))        (COMS               (* |;;| "Asynchronous I/O handling")              (FNS \\MAIKO.IO-INTERRUPT)              (VARS \\EPT.3TO10 (\\MAIKO.IO-INTERRUPT-FLAGS (\\CREATECELL \\FIXP))                    (\\MAIKO.IO-INTERRUPT-VECTOR NIL)))))(DEFINEQ(\\10MB.RESTART.ETHER  (LAMBDA NIL                                        (* \; "Edited 11-May-88 16:09 by MASINTER")    (SUBRCALL ETHER-RESUME)))(\\10MB.STARTDRIVER  (LAMBDA (NDB RESTARTFLG MYNSNUMBER)                    (* \; "Edited  5-Apr-89 15:03 by snow")    (DECLARE (GLOBALVARS \\MAIKO.INPUT.PACKET \\10MB.EXPECTED.RECEIVE.INTERVAL                         \\10MB.INPUT.TIMEOUT))    (SUBRCALL ETHER-SUSPEND)    (OR (\\INIT.ETHER.BUFFER.POOL)        (ERROR "Unable to create buffer pool"))    (|replace| NDBTQ |of| NDB |with| (|create| SYSQUEUE))    (SETQ \\10MB.RAWPACKETQ (|create| SYSQUEUE))    (SETQ \\10MB.INPUT.TIMEOUT (TIMES \\RCLKSECOND \\10MB.EXPECTED.RECEIVE.INTERVAL))    (\\10MB.TURNONETHER NDB NIL NIL (OR MYNSNUMBER T)           0 0)    (PROG ((CSB (|fetch| NDBCSB |of| NDB)))          (OR \\MAIKO.INPUT.PACKET (SETQ \\MAIKO.INPUT.PACKET (\\ALLOCATE.ETHERPACKET)))          (|replace| DLFIRSTICB |of| (|fetch| NDBCSB |of| NDB) |with|                                                                                      \\ES.PENDING)          (SUBRCALL ETHER-GET \\10MBPACKETLENGTH (|fetch| 10MBPACKETBASE |of|                                                                                  \\MAIKO.INPUT.PACKET                                                        ))          (|replace| NDBWATCHER |of| NDB |with| (ADD.PROCESS (LIST '\\10MBWATCHER                                                                               (KWOTE NDB))                                                                   'RESTARTABLE                                                                   'SYSTEM                                                                   'AFTEREXIT                                                                   'DELETE))          (RETURN NDB))))(\\10MB.TURNOFFETHER  (LAMBDA NIL                                        (* \; "Edited 11-May-88 16:11 by MASINTER")    (SUBRCALL ETHER-SUSPEND)))(\\10MB.TURNONETHER  (LAMBDA (NDB SMASHSTATE NEWSTATE NSHOSTNUMBER ININTERRUPT OUTINTERRUPT)                                                         (* \; "Edited 11-May-88 16:08 by MASINTER")(* |;;;| "Reset and activate ether associated with NDB.  If SMASHSTATE is given, it is a CSB-length block into which state is saved for later restoration by passing as the NEWSTATE arg.  If NEWSTATE is NIL, then the remaining non-NIL args give parameters for this activation: the host number for microcode to watch for, T meaning my own number;  and interrupt masks for when a packet arrives or finishes transmitting")    (* |;;| "For Daybreak, SMASHSTATE and NEWSTATE must be NIL")    (PROG ((CSB (|fetch| NDBCSB |of| NDB)))          (\\MAIKO.ETHERSUSPEND)          (OR CSB (|replace| NDBCSB |of| NDB |with| (SETQ CSB                                                                 (LOCF (|fetch| DLETHERNET                                                                          |of| \\IOPAGE)))))          (|replace| DLFIRSTOCB |of| CSB |with| 0)          (|replace| DLFIRSTICB |of| CSB |with| 0)          (AND NSHOSTNUMBER (COND                               ((EQ NSHOSTNUMBER T)                                (\\BLT (LOCF (|fetch| DLLOCALHOST0 |of| CSB))                                       (LOCF (|fetch| (IFPAGE |NSHost0|) |of|                                                                                    |\\InterfacePage|)                                             )                                       \\#WDS.NSHOSTNUMBER))                               (T (\\STORENSHOSTNUMBER (LOCF (|fetch| DLLOCALHOST0 |of|                                                                                       CSB))                                         NSHOSTNUMBER))))          (AND OUTINTERRUPT (|replace| DLOUTPUTMASK |of| CSB |with| OUTINTERRUPT))          (AND ININTERRUPT (|replace| DLINPUTMASK |of| CSB |with| ININTERRUPT))          (|replace| DLMISSEDPACKETS |of| CSB |with| 0)          (|replace| DLLASTICB |of| CSB |with| 0)          (|replace| DLLASTOCB |of| CSB |with| 0)          (SUBRCALL ETHER-RESET)          (SUBRCALL ETHER-RESUME)          (RETURN NDB))))(\\10MBSENDPACKET  (LAMBDA (NDB PACKET)                               (* \; "Edited 11-May-88 16:10 by MASINTER")    (PROG NIL          (COND             (\\RAWTRACING (\\MAYBEPRINTPACKET PACKET 'RAWPUT)))          (COND             ((OR (|fetch| 10MBMULTICASTP |of| PACKET)                  (EQNSADDRESS.HOST \\MY.NSADDRESS (|fetch| 10MBDESTHOSTBASE |of| PACKET)))                                                             (* \;                                 "We would hear this packet if our hardware let us, so fake receipt")              (PROG ((COPYPACKET (\\ALLOCATE.ETHERPACKET)))                    (\\BLT (LOCF (|fetch| 10MBLENGTH |of| COPYPACKET))                           (LOCF (|fetch| 10MBLENGTH |of| PACKET))                           (ADD1 (|fetch| 10MBLENGTH |of| PACKET)))                                                             (* \;                                                    "Copy all data that would have been transmitted")                    (|replace| EPNETWORK |of| COPYPACKET |with| NDB)                    (|replace| EPTYPE |of| COPYPACKET                       |with| (|for| PAIR |in| \\10MBTYPE.TRANSLATIONS                                     |bind| (TYPE _ (|fetch| 10MBTYPE |of| PACKET))                                     |when| (EQ TYPE (CAR PAIR)) |do|                                  (* |;;| "TYPE is the raw type of the etherpacket.  These do not always correspond one-to-one with the EPTYPE constants we use (in particular, for pups), so translate if necessary.")                                                                           (RETURN (CDR PAIR))                                     |finally| (RETURN TYPE)))                    (COND                       (\\RAWTRACING (\\MAYBEPRINTPACKET COPYPACKET 'RAWGET)))                    (\\HANDLE.RAW.PACKET COPYPACKET))))          (UNINTERRUPTABLY              (SUBRCALL ETHER-SEND (IMAX (|fetch| 10MBLENGTH |of| PACKET)                                         \\10MB.MINPACKETLENGTH)                     (|fetch| 10MBPACKETBASE |of| PACKET))              (|replace| EPNETWORK |of| PACKET |with| NIL)              (\\REQUEUE.ETHERPACKET PACKET))          (RETURN T))))(\\10MBWATCHER  (LAMBDA (NDB)                                      (* \; "Edited 16-May-88 22:24 by MASINTER")    (* |;;| "merge message and packet reading")    (PROG ((CNTR 0)           MESSAGE-BUFFER MESSAGE-LENGTH PACKET)      LP  (IF (SUBRCALL MESSAGE-READP)              THEN (PROMPTPRINT (IF (SETQ MESSAGE-LENGTH (SUBRCALL MESSAGE-READ                                                                        (OR MESSAGE-BUFFER                                                                            (SETQ MESSAGE-BUFFER                                                                             (ALLOCSTRING 1024)))                                                                        1024))                                        THEN (SUBSTRING MESSAGE-BUFFER 1 MESSAGE-LENGTH)                                      ELSE "?? system message: polling failed")))          (UNINTERRUPTABLY              (SUBRCALL ETHER-CHECK)              (SETQ PACKET (\\MAIKO.INPUT.INTERRUPT NDB)))          (COND             (PACKET (\\HANDLE.RAW.PACKET PACKET)                    (COND                       ((ILESSP (|add| CNTR 1)                               \\MAXWATCHERGETS)                        (GO LP)))))          (BLOCK)          (SETQ CNTR 0)          (GO LP))))(\\DISPLAYLINE  (LAMBDA (TEXTOBJ LINE WINDOW)                          (* \; "Edited  5-Apr-89 16:22 by snow")    (* |;;| "Display the line of text LINE in the edit window where it belongs.")    (* |;;| " This Function works on MIAKO")    (PROG ((CH 0)           (CHLIST (|fetch| (THISLINE CHARS) |of| (|fetch| THISLINE |of| TEXTOBJ)))           (WLIST (|fetch| (THISLINE WIDTHS) |of| (|ffetch| THISLINE |of| TEXTOBJ)))           (LOOKS (|fetch| (THISLINE LOOKS) |of| (|ffetch| THISLINE |of| TEXTOBJ)))           (WINDOWDS (WINDOWPROP (OR WINDOW (CAR (|fetch| (TEXTOBJ \\WINDOW) |of| TEXTOBJ)))                            'DSP))           (TEXTLEN (|ffetch| (TEXTOBJ TEXTLEN) |of| TEXTOBJ))           (THISLINE (|ffetch| (TEXTOBJ THISLINE) |of| TEXTOBJ))           (TERMSA (|ffetch| (TEXTOBJ TXTTERMSA) |of| TEXTOBJ))           (STREAM (|ffetch| (TEXTOBJ STREAMHINT) |of| TEXTOBJ))           (OLDCACHE (|fetch| LCBITMAP |of| (|ffetch| (TEXTOBJ DISPLAYCACHE) |of|                                                                                         TEXTOBJ)))           (DS (|ffetch| (TEXTOBJ DISPLAYCACHEDS) |of| TEXTOBJ))           (HCPYDS (|ffetch| (TEXTOBJ DISPLAYHCPYDS) |of| TEXTOBJ))           (HARDCOPYMODE (|fetch| (FMTSPEC FMTHARDCOPY) |of| (|fetch| (LINEDESCRIPTOR                                                                                   LFMTSPEC)                                                                        |of| LINE)))           LOOKSTARTX CACHE \\PCHARSLEFT \\PSTRING \\PFILE FONT OFONT OLOOKS XOFFSET CLIPLEFT            CLIPRIGHT DISPLAYDATA DDPILOTBBT DDWIDTHCACHE DDOFFSETCACHE CURY LHEIGHT SCALE)          (SETQ LHEIGHT (COND                           ((|ffetch| (LINEDESCRIPTOR PREVLINE) |of| LINE)                                                             (* \;                                   "So if theres a base-to-base measure, we clear everything right.")                            (IMAX (IDIFFERENCE (|fetch| YBOT |of| (|ffetch| (                                                                                       LINEDESCRIPTOR                                                                                         PREVLINE)                                                                             |of| LINE))                                         (|ffetch| (LINEDESCRIPTOR YBOT) |of| LINE))                                  (|ffetch| (LINEDESCRIPTOR LHEIGHT) |of| LINE)))                           (T (|ffetch| (LINEDESCRIPTOR LHEIGHT) |of| LINE))))          (COND             (HARDCOPYMODE                                   (* \;                                                      "This is a hardcopy-mode line.  Scale things.")                                                             (* \; "(SETQ DS HCPYDS)")                    (SETQ SCALE (DSPSCALE NIL HCPYDS)))             (T (SETQ SCALE 1)))          (SETQ CACHE (\\TEDIT.LINECACHE (|ffetch| (TEXTOBJ DISPLAYCACHE) |of| TEXTOBJ)                             (COND                                (HARDCOPYMODE (FIXR (FQUOTIENT (|fetch| RIGHTMARGIN |of|                                                                                        LINE)                                                           SCALE)))                                (T (|fetch| RIGHTMARGIN |of| LINE)))                             LHEIGHT))          (COND             ((NEQ CACHE OLDCACHE)                           (* \;                "We changed the bitmaps because this line was bigger--update the displaystream, too")              (DSPDESTINATION CACHE DS)              (DSPCLIPPINGREGION (|create| REGION                                        LEFT _ 0                                        BOTTOM _ 0                                        WIDTH _ (|fetch| BITMAPWIDTH |of| CACHE)                                        HEIGHT _ (|ffetch| BITMAPHEIGHT |of| CACHE))                     DS)))          (BITBLT NIL 0 0 CACHE 0 0 NIL NIL 'TEXTURE 'REPLACE WHITESHADE)                                                             (* \; "Clear the line cache")          (COND             (HARDCOPYMODE                                   (* \;                                                      "This is a hardcopy-mode line.  Scale things.")                                                             (* \; "(SETQ DS HCPYDS)")                    (SETQ SCALE (DSPSCALE NIL HCPYDS)))             (T (SETQ SCALE 1)))          (COND             ((AND (NOT (ZEROP (|fetch| CHAR1 |of| LINE)))                   (ILEQ (|ffetch| CHAR1 |of| LINE)                         TEXTLEN)                   (IGEQ (|ffetch| YBOT |of| LINE)                         (|ffetch| WBOTTOM |of| TEXTOBJ)))              (* |;;| "Only display the line of it contains text (CHAR1 > 0), appears before the end of the test, and is on-screen.")              (COND                 ((NEQ (|fetch| DESC |of| THISLINE)                       LINE)                                 (* \;                                                           "No image cache -- re-format and display")                  (\\FORMATLINE TEXTOBJ NIL (|ffetch| CHAR1 |of| LINE)                         LINE)))              (MOVETO (|ffetch| LEFTMARGIN |of| LINE)                     (|ffetch| DESCENT |of| LINE)                     DS)              (SETQ DISPLAYDATA (|fetch| IMAGEDATA |of| DS))              (SETQ DDPILOTBBT (|ffetch| DDPILOTBBT |of| DISPLAYDATA))              (SETQ XOFFSET (|ffetch| DDXOFFSET |of| DISPLAYDATA))              (* |;;| "The X position of the left edge of the window, since \\TEDIT.BLTCHAR works on the screen bitmap itself.")              (SETQ CLIPLEFT (|ffetch| |DDClippingLeft| |of| DISPLAYDATA))                                                             (* \;                      "The left and right edges of the clipping region for the text display window.")              (SETQ CLIPRIGHT (|ffetch| |DDClippingRight| |of| DISPLAYDATA))              (SETQ OFONT (DSPFONT (|fetch| CLFONT |of| (SETQ OLOOKS (\\EDITELT LOOKS 0)))                                 DS))                        (* \; "The starting font")              (SETQ DDWIDTHCACHE (|ffetch| DDWIDTHSCACHE |of| DISPLAYDATA))                                                             (* \;                                                            "Cache the character-image widths")              (SETQ DDOFFSETCACHE (|ffetch| DDOFFSETSCACHE |of| DISPLAYDATA))                                                             (* \;                                                           "And the offset-into-strike-bitmap array")              (SETQ LOOKSTARTX (|ffetch| LEFTMARGIN |of| LINE))                                                             (* \;                                                   "Starting X position for the current-looks text.")              (AND (|fetch| CLOFFSET |of| OLOOKS)                   (RELMOVETO 0 (FIXR (FTIMES SCALE (|ffetch| CLOFFSET |of| OLOOKS)))                          DS))                               (* \;                                                       "Any sub- or superscripting at start of line")              (|bind| (LOOKNO _ 1)                     DX                     (TX _ (IPLUS XOFFSET (|ffetch| LEFTMARGIN |of| LINE))) |for| I                 |from| 0 |to| (|fetch| LEN |of| THISLINE)                 |do|                        (* |;;| "Display the line character by character")                       (SETQ CH (\\EDITELT CHLIST I))        (* \;                                                       "Grab the character (or IMAGEOBJ) to display")                       (SETQ DX (\\WORDELT WLIST I))         (* \; "And its width")                       (SELECTC CH                           (|LMInvisibleRun|                 (* \;                                         "An INVISIBLE run -- skip it, and skip over the char count")                                (|add| LOOKNO 1))                           (|LMLooksChange|                  (* \; "A LOOKS change")                                (|freplace| DDXPOSITION |of| DISPLAYDATA                                   |with| (IDIFFERENCE TX XOFFSET))                                                             (* \;                                             "Make the displaystream reflect our current X position")                                (TEDIT.MODIFYLOOKS LINE LOOKSTARTX DS OLOOKS (|ffetch| DESCENT                                                                                |of| LINE))                                                             (* \;                 "Make any necessary changes to the preceding characters (underline, strike-out &c)")                                (DSPFONT (|fetch| CLFONT |of| (SETQ OLOOKS (\\EDITELT LOOKS                                                                                           LOOKNO)))                                       DS)                   (* \; "Set the new font")                                (|add| LOOKNO 1)         (* \;                                                            "Grab the next set of char looks")                                (AND (|ffetch| CLOFFSET |of| OLOOKS)                                     (RELMOVETO 0 (|ffetch| CLOFFSET |of| OLOOKS)                                            DS))             (* \; "Account for super/subscripting")                                (SETQ LOOKSTARTX (IDIFFERENCE TX XOFFSET))                                                             (* \;                                      "Remember the starting Xpos for possible later underlining &c")                                )                           ((CHARCODE (TAB \#^I))            (* \;                                 "TAB: use the width from the cache to decide the right formatting.")                                (COND                                   ((OR (IEQP CH (CHARCODE \#^I))                                        (|ffetch| CLLEADER |of| OLOOKS)                                        (EQ (|ffetch| CLUSERINFO |of| OLOOKS)                                            'DOTTEDLEADER))                                    (LET* ((LEADERFONT (COND                                                          (HARDCOPYMODE (FONTCOPY (|ffetch|                                                                                   CLFONT                                                                                     |of| OLOOKS)                                                                               'DEVICE HCPYDS))                                                          (T (|ffetch| CLFONT |of| OLOOKS))))                                           (DOTWIDTH (CHARWIDTH (CHARCODE \.)                                                            LEADERFONT))                                           (TTX (IPLUS TX DOTWIDTH (IDIFFERENCE DOTWIDTH                                                                          (IREMAINDER TX DOTWIDTH))))                                           )                                          (|while| (ILEQ TTX (IPLUS TX DX))                                             |do| (COND                                                         (HARDCOPYMODE                                                          (SUBRCALL TEDIT.BLTCHAR (CHARCODE \.)                                                                 DS                                                                 (FIXR (FQUOTIENT (IDIFFERENCE TTX                                                                                          DOTWIDTH)                                                                              SCALE))                                                                 DISPLAYDATA DDPILOTBBT CLIPRIGHT))                                                         ((OR TERMSA HARDCOPYMODE)                                                             (* \;                                                            "Using special instrns from TERMSA")                                                          (\\DSPPRINTCHAR DS (CHARCODE \.)))                                                         (T  (* \; "Native charcodes")                                                            (SUBRCALL TEDIT.BLTCHAR (CHARCODE \.)                                                                   DS                                                                   (IDIFFERENCE TTX DOTWIDTH)                                                                   DISPLAYDATA DDPILOTBBT CLIPRIGHT))                                                         )                                                   (|add| TTX DOTWIDTH))))))                           (13                               (* \; "It's a CR")                               NIL)                           (COND                              ((SMALLP CH)                   (* \;                                                            "Normal character -- just display it.")                               (COND                                  (HARDCOPYMODE (SUBRCALL TEDIT.BLTCHAR CH DS (FIXR (FQUOTIENT TX                                                                                            SCALE))                                                       DISPLAYDATA DDPILOTBBT CLIPRIGHT))                                  ((OR TERMSA HARDCOPYMODE)  (* \;                                                            "Using special instrns from TERMSA")                                   (\\DSPPRINTCHAR DS CH))                                  (T                         (* \; "Native charcodes")                                     (SUBRCALL TEDIT.BLTCHAR CH DS TX DISPLAYDATA DDPILOTBBT                                             CLIPRIGHT))))                              (T                             (* \; "CH is an object.")                                 (MOVETO (IDIFFERENCE (FIXR (FQUOTIENT TX SCALE))                                                XOFFSET)                                        (SETQ CURY (DSPYPOSITION NIL DS))                                        DS)                  (* \;                                               "Go to the base line, left edge of the image region.")                                 (APPLY* (IMAGEOBJPROP CH 'DISPLAYFN)                                        CH DS 'DISPLAY (|ffetch| STREAMHINT |of| TEXTOBJ))                                                             (* \;                                                            "Tell him to display himself here.")                                 (DSPFONT (|ffetch| CLFONT |of| OLOOKS)                                        DS)                                 (MOVETO (IDIFFERENCE (FIXR (FQUOTIENT TX SCALE))                                                XOFFSET)                                        CURY DS)             (* \;                                                            "Move to after the object's image")                                 )))                       (|add| TX DX)                     (* \; "Update our X position")                 |finally| (|freplace| DDXPOSITION |of| DISPLAYDATA                                  |with| (IDIFFERENCE (FIXR (FQUOTIENT TX SCALE))                                                    XOFFSET))                                                              (* \;                                       "Make any necessary looks mods to the last run of characters")                       (TEDIT.MODIFYLOOKS LINE LOOKSTARTX DS OLOOKS (|ffetch| DESCENT                                                                       |of| LINE)))))          (BITBLT CACHE 0 0 WINDOWDS 0 (|ffetch| YBOT |of| LINE)                 (|ffetch| WRIGHT |of| TEXTOBJ)                 LHEIGHT                 'INPUT                 'REPLACE)                                   (* \;                         "Paint the cached image on the screen (this lessens flicker during update)")          (COND             ((|fetch| (FMTSPEC FMTREVISED) |of| (|ffetch| (LINEDESCRIPTOR LFMTSPEC)                                                            |of| LINE))                                                             (* \;                                                      "This paragraph has been revised, so mark it.")              (\\TEDIT.MARK.REVISION TEXTOBJ (|ffetch| (LINEDESCRIPTOR LFMTSPEC) |of| LINE)                     WINDOWDS LINE)))          (SELECTQ (|ffetch| LMARK |of| LINE)              (GREY                                          (* \;               "This line has some property that isn't visible to the user.  Tell him to be careful")                    (BITBLT NIL 0 0 WINDOWDS 0 (|ffetch| YBASE |of| LINE)                           6 6 'TEXTURE 'PAINT 42405))              (SOLID                                         (* \;               "This line has some property that isn't visible to the user.  Tell him to be careful")                     (BITBLT NIL 0 0 WINDOWDS 0 (|ffetch| YBASE |of| LINE)                            6 6 'TEXTURE 'PAINT BLACKSHADE))              (BITBLT NIL 0 0 WINDOWDS 0 (|ffetch| YBASE |of| LINE)                     6 6 'TEXTURE 'REPLACE WHITESHADE)))))(\\MAIKO.10MBSENDPACKET  (LAMBDA (NDB PACKET)                                   (* \; "Edited 31-Oct-89 14:10 by bvm")    (PROG NIL          (COND             (\\RAWTRACING (\\MAYBEPRINTPACKET PACKET 'RAWPUT)))          (COND             ((OR (|fetch| 10MBMULTICASTP |of| PACKET)                  (EQNSADDRESS.HOST \\MY.NSADDRESS (|fetch| 10MBDESTNSADDRESSBASE |of| PACKET                                                          )))(* \;                                 "We would hear this packet if our hardware let us, so fake receipt")              (PROG ((COPYPACKET (\\ALLOCATE.ETHERPACKET)))                    (\\BLT (LOCF (|fetch| 10MBLENGTH |of| COPYPACKET))                           (LOCF (|fetch| 10MBLENGTH |of| PACKET))                           (ADD1 (|fetch| 10MBLENGTH |of| PACKET)))                                                             (* \;                                                    "Copy all data that would have been transmitted")                    (|replace| EPNETWORK |of| COPYPACKET |with| NDB)                    (|replace| EPTYPE |of| COPYPACKET                       |with| (|for| PAIR |in| \\10MBTYPE.TRANSLATIONS                                     |bind| (TYPE _ (|fetch| 10MBTYPE |of| PACKET))                                     |when| (EQ TYPE (CAR PAIR)) |do|                                  (* |;;| "TYPE is the raw type of the etherpacket.  These do not always correspond one-to-one with the EPTYPE constants we use (in particular, for pups), so translate if necessary.")                                                                           (RETURN (CDR PAIR))                                     |finally| (RETURN TYPE)))                    (COND                       (\\RAWTRACING (\\MAYBEPRINTPACKET COPYPACKET 'RAWGET)))                    (\\HANDLE.RAW.PACKET COPYPACKET))))          (UNINTERRUPTABLY              (SUBRCALL ETHER-SEND (IMAX (|fetch| 10MBLENGTH |of| PACKET)                                         \\10MB.MINPACKETLENGTH)                     (|fetch| 10MBPACKETBASE |of| PACKET))              (|replace| EPNETWORK |of| PACKET |with| NIL)              (\\REQUEUE.ETHERPACKET PACKET))          (RETURN T))))(\\MAIKO.10MBWATCHER  (LAMBDA (NDB)                                      (* \; "Edited 16-May-88 22:24 by MASINTER")    (* |;;| "merge message and packet reading")    (PROG ((CNTR 0)           MESSAGE-BUFFER MESSAGE-LENGTH PACKET)      LP  (IF (SUBRCALL MESSAGE-READP)              THEN (PROMPTPRINT (IF (SETQ MESSAGE-LENGTH (SUBRCALL MESSAGE-READ                                                                        (OR MESSAGE-BUFFER                                                                            (SETQ MESSAGE-BUFFER                                                                             (ALLOCSTRING 1024)))                                                                        1024))                                        THEN (SUBSTRING MESSAGE-BUFFER 1 MESSAGE-LENGTH)                                      ELSE "?? system message: polling failed")))          (UNINTERRUPTABLY              (SUBRCALL ETHER-CHECK)              (SETQ PACKET (\\MAIKO.INPUT.INTERRUPT NDB)))          (COND             (PACKET (\\HANDLE.RAW.PACKET PACKET)                    (COND                       ((ILESSP (|add| CNTR 1)                               \\MAXWATCHERGETS)                        (GO LP)))))          (BLOCK)          (SETQ CNTR 0)          (GO LP))))(\\MAIKO.ETHERRESUME  (LAMBDA NIL                                        (* \; "Edited 11-May-88 16:09 by MASINTER")    (SUBRCALL ETHER-RESUME)))(\\MAIKO.ETHERSUSPEND  (LAMBDA NIL                                        (* \; "Edited 11-May-88 16:11 by MASINTER")    (SUBRCALL ETHER-SUSPEND)))(\\MAIKO.INPUT.INTERRUPT  (LAMBDA (NDB)                                      (* \; "Edited 11-May-88 16:05 by MASINTER")    (* |;;| "This routine gets called when 10MB input signals an interrupt.  See if the \\MAIKO.INPUT.PACKET has indeed been processed, and if so, take care of it")    (PROG (LENGTH (PACKET \\MAIKO.INPUT.PACKET))          (COND             ((NEQ (SETQ LENGTH (|fetch| DLFIRSTICB |of| (|fetch| NDBCSB |of| NDB)))                   \\ES.PENDING)              (|replace| 10MBLENGTH |of| PACKET |with| LENGTH)              (\\RCLK (LOCF (|fetch| EPTIMESTAMP |of| PACKET)))              (|replace| EPNETWORK |of| PACKET |with| NDB)              (|replace| EPTYPE |of| PACKET |with| (|for| PAIR |in|                                                                               \\10MBTYPE.TRANSLATIONS                                                                  |bind| (TYPE _                                                                                   (|fetch|                                                                                    10MBTYPE                                                                                      |of| PACKET                                                                                    ))                                                                  |when| (EQ TYPE (CAR PAIR))                                                                  |do| (RETURN (CDR PAIR))                                                                  |finally| (RETURN TYPE)))              (COND                 (\\RAWTRACING (\\MAYBEPRINTPACKET PACKET 'RAWGET)))              (RETURN (PROG1 PACKET                          (SETQ \\MAIKO.INPUT.PACKET (\\ALLOCATE.ETHERPACKET))                          (|replace| DLFIRSTICB |of| (|fetch| NDBCSB |of| NDB)                             |with| \\ES.PENDING)                          (SUBRCALL ETHER-GET \\10MBPACKETLENGTH (|fetch| 10MBPACKETBASE                                                                    |of| \\MAIKO.INPUT.PACKET))))              )             (T (RETURN NIL))))))(\\NS.SETTIME  (LAMBDA (RETFLG)                                   (* \; "Edited 13-May-88 15:22 by MASINTER")    (CL:UNLESS (AND RETFLG (NOT (STRINGP RETFLG)))        (SETQ |\\TimeZoneComp| (SUBRCALL GETUNIXTIME 8 NIL)))    (\\PROCESS.RESET.TIMERS)    (DAYTIME)))(\\PUP.SETTIME  (LAMBDA (RETFLG)                                   (* \; "Edited 13-May-88 15:22 by MASINTER")    (CL:UNLESS (AND RETFLG (NOT (STRINGP RETFLG)))        (SETQ |\\TimeZoneComp| (SUBRCALL GETUNIXTIME 8 NIL)))    (\\PROCESS.RESET.TIMERS)    (DAYTIME)))(\\MAIKO.10MBSTARTDRIVER  (LAMBDA (NDB RESTARTFLG MYNSNUMBER)                    (* \; "Edited  4-May-91 15:50 by jds")    (* |;;| "Start the \"driver\" for the 10MB ethernet on Sun Medley.  In particular, turn on the C ehternet code, queue up the first input packet, and start the \\10MBWATCHER process.")    (SUBRCALL ETHER-SUSPEND)    (OR (\\INIT.ETHER.BUFFER.POOL)        (ERROR "Unable to create buffer pool"))    (|replace| NDBTQ |of| NDB |with| (|create| SYSQUEUE))    (SETQ \\10MB.RAWPACKETQ (|create| SYSQUEUE))    (SETQ \\10MB.INPUT.TIMEOUT (TIMES \\RCLKSECOND \\10MB.EXPECTED.RECEIVE.INTERVAL))    (SETQ \\MAIKO.10MB.NDB NDB)    (\\10MB.TURNONETHER NDB NIL NIL (OR MYNSNUMBER T)           0 0)    (PROG ((CSB (|fetch| NDBCSB |of| NDB)))          (OR \\MAIKO.INPUT.PACKET (SETQ \\MAIKO.INPUT.PACKET (\\ALLOCATE.ETHERPACKET)))          (|replace| DLFIRSTICB |of| (|fetch| NDBCSB |of| NDB) |with|                                                                                      \\ES.PENDING)          (AND (SUBRCALL ETHER-GET \\10MBPACKETLENGTH (|fetch| 10MBPACKETBASE |of|                                                                                  \\MAIKO.INPUT.PACKET                                                             ))               (\\MAIKO.ETHER-INTERRUPT))     (* |;;| "Commented out the 10MBWATCHER adder, so this process never gets created.")     (* |;;| "(replace NDBWATCHER of NDB with (ADD.PROCESS (LIST '\\10MBWATCHER (KWOTE NDB)) 'RESTARTABLE 'SYSTEM 'AFTEREXIT 'DELETE))")          (RETURN NDB))))(\\MAIKO.10MBTURNONETHER  (LAMBDA (NDB SMASHSTATE NEWSTATE NSHOSTNUMBER ININTERRUPT OUTINTERRUPT)                                                         (* \; "Edited 11-May-88 16:08 by MASINTER")(* |;;;| "Reset and activate ether associated with NDB.  If SMASHSTATE is given, it is a CSB-length block into which state is saved for later restoration by passing as the NEWSTATE arg.  If NEWSTATE is NIL, then the remaining non-NIL args give parameters for this activation: the host number for microcode to watch for, T meaning my own number;  and interrupt masks for when a packet arrives or finishes transmitting")    (* |;;| "For Daybreak, SMASHSTATE and NEWSTATE must be NIL")    (PROG ((CSB (|fetch| NDBCSB |of| NDB)))          (\\MAIKO.ETHERSUSPEND)          (OR CSB (|replace| NDBCSB |of| NDB |with| (SETQ CSB                                                                 (LOCF (|fetch| DLETHERNET                                                                          |of| \\IOPAGE)))))          (|replace| DLFIRSTOCB |of| CSB |with| 0)          (|replace| DLFIRSTICB |of| CSB |with| 0)          (AND NSHOSTNUMBER (COND                               ((EQ NSHOSTNUMBER T)                                (\\BLT (LOCF (|fetch| DLLOCALHOST0 |of| CSB))                                       (LOCF (|fetch| (IFPAGE |NSHost0|) |of|                                                                                    |\\InterfacePage|)                                             )                                       \\#WDS.NSHOSTNUMBER))                               (T (\\STORENSHOSTNUMBER (LOCF (|fetch| DLLOCALHOST0 |of|                                                                                       CSB))                                         NSHOSTNUMBER))))          (AND OUTINTERRUPT (|replace| DLOUTPUTMASK |of| CSB |with| OUTINTERRUPT))          (AND ININTERRUPT (|replace| DLINPUTMASK |of| CSB |with| ININTERRUPT))          (|replace| DLMISSEDPACKETS |of| CSB |with| 0)          (|replace| DLLASTICB |of| CSB |with| 0)          (|replace| DLLASTOCB |of| CSB |with| 0)          (SUBRCALL ETHER-RESET)          (SUBRCALL ETHER-RESUME)          (RETURN NDB))))(\\MAIKO.10MB.RESTART.ETHER  (LAMBDA (NDB)                                      (* \; "Edited 11-May-88 16:08 by MASINTER")(* |;;;| "Kick the Ethernet receiver task to restart the Ethernet receiver task.  This function gets called when the 10MBDRIVER thinks the Ethernet has been accidentally disabled")    (SUBRCALL ETHER-RESUME)))(\\MAIKO.CHECKSUM  (LAMBDA (BASE NWORDS INITSUM)                      (* \; "Edited 20-May-88 11:48 by MASINTER")    (SUBRCALL CHECK-SUM BASE NWORDS INITSUM))))(RPAQ? \\MAIKO.INPUT.PACKET )(RPAQ? |\\ETHERtopMonitor| (CREATE.MONITORLOCK "ETHERTopMonitor"))(DECLARE\: EVAL@COMPILE DONTCOPY (FILESLOAD (LOADCOMP)       10MBDRIVER)(DECLARE\: DOEVAL@COMPILE DONTCOPY(GLOBALVARS \\MAIKO.INPUT.PACKET |\\ETHERtopMonitor|))(DECLARE\: DOEVAL@COMPILE DONTCOPY(GLOBALVARS \\MAIKO.10MB.NDB))(DECLARE\: DOEVAL@COMPILE DONTCOPY(GLOBALVARS \\MAIKO.IO-INTERRUPT-FLAGS \\MAIKO.IO-INTERRUPT-VECTOR)))(ADDTOVAR \\MAIKO.MOVDS (\\MAIKO.10MBSTARTDRIVER \\10MB.STARTDRIVER)                            (\\MAIKO.10MBWATCHER \\10MBWATCHER)                            (\\MAIKO.10MBSENDPACKET \\10MBSENDPACKET)                            (\\MAIKO.ETHERSUSPEND \\10MB.TURNOFFETHER)                            (\\MAIKO.10MBTURNONETHER \\10MB.TURNONETHER)                            (\\MAIKO.ETHERRESUME \\10MB.RESTART.ETHER)                            (\\MAIKO.CHECKSUM \\CHECKSUM))(* \; "MAIKO handler for new interrupt-driven incoming ethernet communication, rather than polling for it.")(DEFINEQ(\\MAIKO.ETHER-INTERRUPT  (LAMBDA NIL                                            (* \; "Edited  4-May-91 13:46 by jds")    (* |;;| "This routine gets called when 10MB input signals an interrupt.  See if the \\MAIKO.INPUT.PACKET has indeed been processed, and if so, take care of it")    (PROG ((NDB \\MAIKO.10MB.NDB)           LENGTH)     (* |;;| "First, turn off the interrupt flag:")          (REPLACE (INTERRUPTSTATE ETHERINTERRUPT) OF \\INTERRUPTSTATE WITH NIL)     (* |;;| "Now handle it:")          (UNINTERRUPTABLY              (WITH.MONITOR |\\ETHERtopMonitor|                  (PROG ((PACKET \\MAIKO.INPUT.PACKET))                   (* |;;| "We come back here if there's more than one packet ready to be read, so we process as many as possible in one swell foop.")                    READ-MORE-LOOP                        (COND                           ((NEQ (SETQ LENGTH (|fetch| DLFIRSTICB |of| (|fetch| NDBCSB                                                                                  |of| NDB)))                                 \\ES.PENDING)                            (|replace| 10MBLENGTH |of| PACKET |with| LENGTH)                            (\\RCLK (LOCF (|fetch| EPTIMESTAMP |of| PACKET)))                            (|replace| EPNETWORK |of| PACKET |with| NDB)                            (|replace| EPTYPE |of| PACKET                               |with| (|for| PAIR |in| \\10MBTYPE.TRANSLATIONS                                             |bind| (TYPE _ (|fetch| 10MBTYPE |of| PACKET                                                                       ))                                             |when| (EQ TYPE (CAR PAIR))                                             |do| (RETURN (CDR PAIR)) |finally| (RETURN                                                                                         TYPE)))                            (COND                               (\\RAWTRACING (\\MAYBEPRINTPACKET PACKET 'RAWGET)))                            (\\HANDLE.RAW.PACKET PACKET)                            (SETQ \\MAIKO.INPUT.PACKET (\\ALLOCATE.ETHERPACKET))                            (|replace| DLFIRSTICB |of| (|fetch| NDBCSB |of| NDB)                               |with| \\ES.PENDING)                            (COND                               ((SUBRCALL ETHER-GET \\10MBPACKETLENGTH (|fetch| 10MBPACKETBASE                                                                          |of|                                                                                 \\MAIKO.INPUT.PACKET)                                       )                                (* |;;|                               "Returned T, so there's another packet waiting already.  Process it.")                                (SETQ PACKET \\MAIKO.INPUT.PACKET)                                (GO READ-MORE-LOOP))))))))))))(* \; "MAIKO Log & Console message handling.  Interrupt-driven message printing, instead of polled printing.")(DEFINEQ(\\MAIKO.CONSOLE-LOG-PRINT  (LAMBDA NIL                                            (* \; "Edited 18-Dec-89 12:16 by jds")    (* |;;| "Read any pending Console or Log messages, and print them in the prompt window.")    (* |;;|  "Called from INTERRUPTED when the Maiko emulator sets the LogMsgPending flag in \\INTERRUPTSTATE.")    (PROG (MESSAGE-BUFFER MESSAGE-LENGTH)          (|replace| (INTERRUPTSTATE LOGMSGSPENDING) |of| \\INTERRUPTSTATE |with| NIL)          (|while| (SUBRCALL MESSAGE-READP)             |do| (FRESHLINE PROMPTWINDOW)                   (PRIN1 (|if| (SETQ MESSAGE-LENGTH (SUBRCALL MESSAGE-READ (OR MESSAGE-BUFFER                                                                                    (SETQ                                                                                      MESSAGE-BUFFER                                                                                     (ALLOCSTRING                                                                                      1024)))                                                                1024))                              |then| (SUBSTRING MESSAGE-BUFFER 1 MESSAGE-LENGTH)                            |else| "?? system message: polling failed")                          PROMPTWINDOW))))))(* |;;| "Asynchronous I/O handling")(DEFINEQ(\\MAIKO.IO-INTERRUPT  (LAMBDA NIL                                            (* \; "Edited 18-Dec-89 13:09 by jds")    (* |;;| "Handle I/O pending on an asynchronous file descriptor.")    (* |;;|   "Called from INTERRUPTED when the Maiko emulator sets theIOINTERRUPT flag in \\INTERRUPTSTATE.")    (PROG NIL          (|replace| (INTERRUPTSTATE IOINTERRUPT) |of| \\INTERRUPTSTATE |with| NIL)          (FOR INFO IN \\MAIKO.IO-INTERRUPT-VECTOR             WHEN (NOT (ZEROP (LOGAND (CAR INFO)                                         \\MAIKO.IO-INTERRUPT-FLAGS)))             DO (CL:FUNCALL (CADR INFO)))))))(RPAQQ \\EPT.3TO10 513)(RPAQ \\MAIKO.IO-INTERRUPT-FLAGS (\\CREATECELL \\FIXP))(RPAQQ \\MAIKO.IO-INTERRUPT-VECTOR NIL)(PUTPROPS MAIKOETHER COPYRIGHT ("Venue & Xerox Corporation" 1988 1989 1990 1991 2021))(DECLARE\: DONTCOPY  (FILEMAP (NIL (2870 40835 (\\10MB.RESTART.ETHER 2880 . 3040) (\\10MB.STARTDRIVER 3042 . 4801) (\\10MB.TURNOFFETHER 4803 . 4963) (\\10MB.TURNONETHER 4965 . 7335) (\\10MBSENDPACKET 7337 . 9708) (\\10MBWATCHER 9710 . 11049) (\\DISPLAYLINE 11051 . 29389) (\\MAIKO.10MBSENDPACKET 29391 . 31769) (\\MAIKO.10MBWATCHER 31771 . 33116) (\\MAIKO.ETHERRESUME 33118 . 33277) (\\MAIKO.ETHERSUSPEND 33279 . 33440) (\\MAIKO.INPUT.INTERRUPT 33442 . 35704) (\\NS.SETTIME 35706 . 35986) (\\PUP.SETTIME 35988 . 36269) (\\MAIKO.10MBSTARTDRIVER 36271 . 37926) (\\MAIKO.10MBTURNONETHER 37928 . 40303) (\\MAIKO.10MB.RESTART.ETHER 40305 . 40658) (\\MAIKO.CHECKSUM 40660 . 40833)) (41890 44955 (\\MAIKO.ETHER-INTERRUPT 41900 . 44953)) (45077 46440 (\\MAIKO.CONSOLE-LOG-PRINT 45087 . 46438)) (46486 47166 (\\MAIKO.IO-INTERRUPT 46496 . 47164)))))STOP