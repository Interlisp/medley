;; Function To Be Tested: SYMBOL-PLIST
;;
;; Source:        CLtL p. 166
;; Chapter 10: Symbols		Section 1: The Property List
;; Page: 164
;;
;; Created By:    Peter Reidy
;;
;; Creation Date: 16 June 86
;;
;; Last Update:   14 August 86
;;
;; Filed As:      {eris}<lispcore>cml>test>10-1-symbol-plist.test
;;
;;
;; Syntax:                symbol-plist symbol
;;
;; Function Description:  Return symbol's property list; return nil if no property list is found, whether because symbol is undefined or because it has no properties.
;;
;; Argument(s):          	symbol - a valid CML symbol
;; Returns:               symbol's property list or nil.
;;				
;;
(do-test-group symbol-plist-group
	:before (progn
;; create some symbols
		(test-setq	
			nothing nil
			unbound (gentemp)
			props '(true fixed ratio float complex character semistd linediv symbol list dot vector string bitvector hashtable readtable package pathname stream random)
			vals (list t 100 -3/5 3.14 #c(3 -5) #\Q #\return #\newline nothing '(a b c) '(33 . 50) '#(5 10 15) "twine" (make-array 7 :element-type 'bit :initial-contents '(1 0 0 0 1 0 1)) (make-hash-table) (copy-readtable) (car (list-all-packages)) (pathname T) *standard-input* (random 4761))
		)  ; test-setq
		(setf		(symbol-plist 'nothing) nil)
		(setf		(symbol-plist 'unbound) nil)
	) ; progn
;;
	(do-test "symbol-plist empty property lists test"
		(AND
			(null (symbol-plist 'nothing))
			;; Get an unbound symbol.
			(not(boundp (gensym)))
			(null (symbol-plist (gensym)))
		)
	)
;;
	(do-test "symbol-plist property types test"
		(AND
			(= 0 (list-length (symbol-plist 'nothing)))
			;; Give nothing a property of each type.
			(not(setf (get 'nothing 'false) nil))
;; acknowldegments to Karin Sye
			(mapcar #'(lambda (property value) (setf (get 'nothing property) value)) props vals)
			(= (+ 2 (* 2 (list-length props)))(list-length (symbol-plist 'nothing)))
		)
	)
;;	
	(do-test "symbol-plist unbound symbol test"
	;; Show that unbound symbols have property lists
		(AND
			(= 0 (list-length (symbol-plist 'unbound)))
			;; Give unbound a property of each type.
			(not(setf (get 'unbound 'false) nil))
;; acknowldegments to Karin Sye
			(mapcar #'(lambda (property value) (setf (get 'unbound property) value)) props vals)
			(= (+ 2 (* 2 (list-length props)))(list-length (symbol-plist 'unbound)))
		)
	)  ; do-test "symbol-plist unbound symbol test"
)
STOP



