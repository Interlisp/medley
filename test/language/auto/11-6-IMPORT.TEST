;; Function To Be Tested: import
;;
;; Source: Guy L Steele's CLTL
;; Section: 11.6 Package System Functions and Variables
;; Page: 186
;;
;; Created By:   Ron Fischer (original file by John Park)
;;
;; Creation Date: Oct 30, 1986
;;
;; Last Update:   
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>11-6-import.test
;;
;;
;; Syntax:        (import symbols &optional package)
;;
;; Function Description: The argument should be a list of symbols, or possibly
;; a single symbol.  These symbols become internal symbols in package and can
;; therefore be referred to without having to use qualified-name (colon) syntax.
;; import signals a correctable error if any of the imported symbols has the same
;; name as some distinct symbol already accessible in the package.  Import returns T.
;; 
;; Argument(s):  Symbol(s)
;;			 Package (optional)
;;			  
;; Returns:     T
;;
;; Constraints/Limitations: none
(do-test-group (import-group
	:before (setq im-foo (make-package "IM-BAR" :use nil))
	)
	(do-test "import returns T"
		(eq (import '(lisp:rational lisp:plusp) 'im-bar) T)
	)
	(do-test "symbols imported from LISP"
		(and
			(eq 'lisp:rational (find-symbol "RATIONAL" 'im-bar))
			(eq 'lisp:plusp (find-symbol "PLUSP" 'im-bar))
		)
	)
	(do-test "imported symbols :internal"
		(and
			(eq :internal (second (multiple-value-list (find-symbol "RATIONAL" 'im-bar))))
			(eq :internal (second (multiple-value-list (find-symbol "PLUSP" 'im-bar))))
		)
	)
)
STOP
