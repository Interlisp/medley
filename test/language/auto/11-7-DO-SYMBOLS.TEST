;; Function To Be Tested: do-symbols
;;
;; Source: Guy L Steele's CLTL
;; Section: 11.7 Package System Functions and Variables
;; Page: 185
;;
;; ReCreated By:   Ron Fischer
;;
;; Creation Date: March 24, 1987
;;
;; Last Update:   
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>11-7-do-symbols.test
;;
;;
;; Syntax:        (do-symbols (var [package [result-form]]) {declaration}*
;;											   {tag| statement}*
;;
;; Function Description: do-symbols provides straightforward iteration over the 
;; symbols of a package.  The body is performed once for each symbol accessible 
;; in the package, in no particular order, with the variable var bound to the
;; symbol.  Then result-form (a single form, not an implicit progn) is evaluated,
;; and the result is the value of the do-symbols form.  (When the result-form is
;; evaluated, the control variable var is still bound and has the value of nil.)
;; If the result-form is omitted, the result is nil. return may be used to terminate
;; the iteration prematurely.  If execution of the body affects which symbols are
;; contained in the package, other than possibly to remove the symbol currently
;; the value of var by using unintern, the effects are unpredictable. 
;;   
;; 
;; Argument(s):   var (bound to the symbol)
;;			   package
;;			  result-form (a single form)
;;			  
;; Returns: value of the do-symbols form     
;;
;; Constraints/Limitations: none
;;
;; Test description: creates two packages, one inherited by the other.  Interns a
;; small number of known symbols in both packages.  For each package we remember the
;; list of symbols expected to be found there and then do-symbols over the package.
;; At each iteration we remove the name we found there.  NIL is returned if either
;; an unknown symbol is found in the package or not all the symbols are found.


(do-test "do-symbols"
(let* ((inherited-package (make-package "INHERITED-PACKAGE" :use NIL))
	 (direct-package (make-package "DIRECT-PACKAGE" :use "INHERITED-PACKAGE"))
	 (direct-symbols '("FOO" "BAR" "BAZ" "GLORP"))
	 (inherited-symbols '("IFOO" "IBAR" "IBAZ" "IGLORP"))
	)
	(dolist (name direct-symbols) (intern name direct-package))
	(dolist (name inherited-symbols)
		(export (intern name inherited-package) inherited-package)
	)
	(and
		(let ((checking inherited-symbols))
			(do-symbols (s inherited-package (and (null s) (null checking)))
				(if (and (symbolp s) (member s checking :test #'string=))
					(setq checking (remove s checking :test #'string=))
					(return nil)
				)
			)
		)
		(let ((checking (append inherited-symbols direct-symbols)))
			(do-symbols (s direct-package (and (null s) (null checking)))
				(if (and (symbolp s) (member s checking :test #'string=))
					(setq checking (remove s checking :test #'string=))
					(return nil)
				)
			)
		)
		(delete-package "INHERITED-PACKAGE")
		(delete-package "DIRECT-PACKAGE")
	)
)
)

STOP


