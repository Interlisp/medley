;; Function To Be Tested: export
;;
;; Source: Guy L Steele's CLTL
;; Section: 11.7 Package System Functions and Variables
;; Page: 186
;;
;; Created By:   John Park
;;
;; Creation Date: Nov 6, 1986
;;
;; Last Update:   Oct 21, 1986
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>11-7-export.test
;;
;;
;; Syntax:        (export symbols &optional package)
;;
;; Function Description: The function export takes a symbol that is accessible in some
;; specified package (directly or by inheritance) and makes it an external symbol of
;; that package. If the symbol is already accessible as an external symbol in the
;; package, export has no effect.  If the symbol is directly present in the package as
;; an internal symbol via use-package, the symbol is first imported into the package,
;; then exported. (The symbol is then present in the specified package whether or not
;; the package continues to use the package through which the symbol was originally 
;; inherited.)  If the symbol is not accessible at all in the specified package, 
;; a correctable error is signalled that, upon continuing, asks the user whether the
;; symbol should be imported.  By convention, a call to export listing all exported
;; symbols is placed near the start of a file to advertise which of the symbols 
;; mentioned
;; in the file are intended to be used by other programs.
;;   
;; 
;; Argument(s):  symbols (list or a single symbol) 
;;			  package (optional)
;;			  
;; Returns:  T
;;
;; Constraints/Limitations: none
;;




(do-test "export-test"
		(and (import '(lisp:machine-type) 'USER) 
			(let ((SYM1 (intern "MACHINE-TYPE" 'USER)))
				(and (eq SYM1 'USER::MACHINE-TYPE)
					(eq :internal
						(second (multiple-value-list 
								(find-symbol "MACHINE-TYPE" 'USER))))
				)
			)
			(eq (export '(USER::MACHINE-TYPE) 'USER) T)
			(let ((SYM2 (intern "MACHINE-TYPE" 'USER)))
				(and (eq SYM2 'USER::MACHINE-TYPE)
					(eq :external
						(second (multiple-value-list 
								(find-symbol "MACHINE-TYPE" 'USER))))
				)
			)
		)
)


STOP


