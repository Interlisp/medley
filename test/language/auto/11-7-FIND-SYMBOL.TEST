;; Function To Be Tested: find-symbol
;;
;; Source: Guy L Steele's CLTL Package System
;; Section: 11.8 Package System and Variables
;; Page: 185
;;
;; Created By:   John Park
;;
;; Creation Date: Oct 10, 1986
;;
;; Last Update:  Nov 6, 1986 
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>11-7-find-symbol.test
;;
;;
;; Syntax:        (find-symbol string &optional package)
;;
;; Function Description: This is identical to intern, but it never creates a new
;; symbol.  If a symbol with the specified name is found in the specified package,
;; directly or by inheritance, the symbol found is returned as the first value and 
;; the second value is as specified for intern.  If the symbol is not accessible
;; in the specified package, both values are nil.
;;
;;  
;; 
;; Argument(s):   string
;;			package (&optional) 
;;			  
;;			  
;; Returns:     Two values (symbol and symbol status) if symbol if found.
;;	         or NIL if symbol is not found.
;;
;; Constraints/Limitations: None
;;



(do-test "find-symbol-test"
	(and (let ((find-sym-list 
				(multiple-value-list (find-symbol "COS" (FIND-PACKAGE 'USER)))))
			(and (eq (first find-sym-list) 'COS)
				(eq :INHERITED (second find-sym-list))
			)
		)
		(intern "XYZ" 'USER)
		(let ((find-sym-list-1 
				(multiple-value-list (find-symbol "XYZ" (FIND-PACKAGE 'USER)))))
			(and (eq (first find-sym-list-1) 'USER::XYZ)
				(eq :INTERNAL (second find-sym-list-1))
			)
		)
		(eq (find-symbol "JUNK" (find-package 'KEYWORD)) NIL)
		
	)
)	
		
						

STOP


