;; Function To Be Tested: unexport
;;
;; Source: Guy L Steele's CLTL
;; Section: 11.7 Package System Functions and Variables
;; Page: 186
;;
;; Created By:   John Park
;;
;; Creation Date: Oct 21, 1986
;;
;; Last Update: Dec 22, 1986  
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>11-7-unexport.test
;;
;;
;; Syntax:        (unexport symbols &optional package)
;;
;; Function Description: The function unexport is provided mainly as a way to undo 
;; erroneous calls to export.  It works only on symbols directly present in the current
;; package, switching them back to internal status.  If unexport is given a symbol
;; already accessible as an internal symbol in the current package, it does nothing.
;; If it is given a symbol not accessible in the package at all, it signals an error.
;; It is also an error to unexport a symbol from the keyword package.
;;   
;; 
;; Argument(s):  symbols (list or a single symbol) 
;;			  package (optional)
;;			  
;; Returns:  T
;;
;; Constraints/Limitations: none


(do-test "unexport-test-1"
		(and (import 'new-symbol)
			(equal :INTERNAL 
				 (second (multiple-value-list (find-symbol "NEW-SYMBOL"))))
			(export 'new-symbol)
			(equal :EXTERNAL 
				 (second (multiple-value-list (find-symbol "NEW-SYMBOL"))))
			(eq (unexport '(NEW-SYMBOL)) T)
 			(equal :INTERNAL
				(second (multiple-value-list (find-symbol "NEW-SYMBOL"))))
		)
)

(do-test "unexport-test-2"
	(let ((*test-package* (find-package 'lisp)))
		(and (import 'new-symbol-xyz *test-package*)
			(equal :INTERNAL 
				 (second (multiple-value-list 
							(find-symbol "NEW-SYMBOL-XYZ" *test-package*))))
			(export 'new-symbol-xyz *test-package*)
			(equal :EXTERNAL 
				 (second (multiple-value-list 
							(find-symbol "NEW-SYMBOL-XYZ" *test-package*))))
			(eq (unexport '(NEW-SYMBOL-XYZ) *test-package*) T)
 			(equal :INTERNAL
				(second (multiple-value-list 
							(find-symbol "NEW-SYMBOL-XYZ" *test-package*))))
		)
	)
)


STOP


