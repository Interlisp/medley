;; Function To Be Tested: ATANH
;;
;; Source: Guy L Steele's CLTL
;; Section: 12.5.2 Trigonometric and Related Functions
;; Page: 209
;;
;; Created By:    Kelly Roach and John Park
;;
;; Creation Date: July 12,1986
;;
;; Last Update:   July 29,1986
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>12-5-2-ATANH.TEST
;;
;;
;; Syntax:        (ATANH NUMBER)
;;
;; Function Description:
;; These functions compute the hyperbolic sine, cosine, tangent,
;; arc sine, arc cosine, and arc tangent functions, which are mathematically
;; defined for an argument X as follows:
;; 
;; 
;; Hyperbolic sine         (E^x-E-^x)/2
;; Hyperbolic cosine         (E^x+E-^x)/2
;; Hyperbolic tangent         (E^x-E-^x)/(E^x+E-^x)
;; Hyperbolic arc sine         log (X+SQRT(1+X2))
;; Hyperbolic arc cosine         log (X+(X+1)SQRT((X-1)/(X+1)))
;; Hyperbolic arc tangent         log ((1+X)SQRT(1-1/X2))
;; 
;; Note that the result of ACOSH may be
;; complex even if the argument is not complex; this occurs
;; when the argument is less than one.
;; Also, the result of ATANH may be
;; complex even if the argument is not complex; this occurs
;; when the absolute value of the argument is greater than one.
;; 
;; 
;; Implementation note: These formulae are mathematically correct, assuming
;; completely accurate computation.  They may be terrible methods for
;; floating-point computation!  Implementors should consult a good text on
;; numerical analysis.  The formulas given above are not necessarily
;; the simplest ones for real-valued computations, either; they are chosen
;; to define the branch cuts in desirable ways for the complex case.
;; 
;; Argument(s):   NUMBER - a number
;;
;; Returns:       a number
;;


(do-test-group atanh-setup
  :before (progn
           (setq atanh-tolerance 0.001)
           (setq atanh-test-cases-1
                 '(0.1 0.3 0.5 1.0001 3.0 7.0 -1.0001 
                       -1.7 -3.0 -7.77 #C(1.0 0.3) #C(-1.0 0.9) #C(-1.0 -2.0)))
           (setq tanh-test-cases-2 
                 '(0.0 0.3 0.5 1.0 3.0  -0.9 -0.7 -0.3 -0.1
                       #C(1.0 0.3) #C(-1.0 -0.7) ))
           (setq atanh-test-cases-2 (mapcar #'tanh tanh-test-cases-2))

           ;; ROACH 20-AUG-86  Don't use the ATANH formula on page 209
           ;; of the silver book. IT'S WRONG!  Below is the correct formula.

           (defun compute-atanh (x)
                  (log (* (+ 1.0 x)
                          (sqrt (/ 1.0 (- 1.0 (expt x 2)))))))

           (setq correct-atanh-1 
                 (mapcar #'compute-atanh  atanh-test-cases-1))
						
           (setq correct-atanh-2 
                 (mapcar #'compute-atanh  atanh-test-cases-2))
						
           (defun atanh-test (pairs) ;  calculate vs correct
                  (cond ((zerop (car pairs)) (zerop (cdr pairs)))
                        ((complexp (cdr pairs)) 
                         (and (< (abs (/ (- (abs(realpart (car pairs)))
                                            (abs(realpart (cdr pairs)))) 
                                         (realpart (cdr pairs))))
                                 atanh-tolerance)
                              (< (abs (/ (- (abs(imagpart (car pairs)))
                                            (abs(imagpart (cdr pairs)))) 
                                         (imagpart (cdr pairs))))
                                 atanh-tolerance)))
                        (t (< (abs (/ (- (car pairs)(cdr pairs)) (cdr pairs)))
                              atanh-tolerance)))))
					 
  (do-test atanh-test
           (and (setq calculated-atanh-1  
                      (mapcar #'atanh	atanh-test-cases-1))
                (setq calculated-atanh-2  
                      (mapcar #'atanh	atanh-test-cases-2))
                (setq atanh-pairs-1
                      (pairlis calculated-atanh-1 correct-atanh-1))
                (setq atanh-pairs-2
                      (pairlis calculated-atanh-2 correct-atanh-2))
                (or (notany 'null (mapcar #'atanh-test atanh-pairs-1))
                    (notany 'null (mapcar #'atanh-test atanh-pairs-2)))
)))

STOP


