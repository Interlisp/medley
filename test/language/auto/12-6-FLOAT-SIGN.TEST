;; Function To Be Tested: float-sign
;;
;; Source:     Common Lisp by Guy Steele
;;         Section 12.6: Type Conversions and Component Extractions
;;					on Numbers  Page: 218
;;
;; Created By: John Park
;;
;; Creation Date: July 18, 86
;;
;; Last Update:  Jan 28, 1987 Jim Blum - fixed (COND .. NIL) to (COND ... (T NIL))
;;
;; Filed as:      {eris}<lispcore>cml>test>12-6-float-sign.test
;;
;; Syntax: float-sign float1 &optional float2
;;
;; Function Description:  The function float-sign returns a floating-point-number
;; x such that x and float1 have the same sign and also such that x and float2
;; have the same absolute value.
;;
;; 
;; Argument(s):   floating-point number and optional floating-point number
;;
;; Returns: 1.0, -1.0, or other floating-point number 
;;
;; Constraints/limitations: None 


(do-test-group (float-sign-test-setup
		:before (progn 
				(setq float-sign-numbers1 (mapcar #'eval 
					'(1.0 2.0 -3.10 -0.0  most-positive-double-float
						most-negative-double-float)))
				(setq float-sign-numbers2 '((1.0 -3.0) (-1.0 3.0)
					(-1.0 -3.0) (1.0 3.0)))
				(setq expected-sign-result1 (mapcar #'(lambda (x)
					(cond ((>= x 0) 1.0) ((< x 0) -1.0) (t nil)))
					float-sign-numbers1))
				
				(setq expected-sign-result2 
					(mapcar #'(lambda (pairs)
						(cond ((>= (first pairs) 0) (abs (second pairs)))
							((< (first pairs) 0) (- (abs(second pairs))))
							(t nil)))
							float-sign-numbers2))))
						
													
				
	(do-test  float-sign-test
		(and (setq sign-test-result1 (mapcar #'float-sign float-sign-numbers1))
			
			(or (equal sign-test-result1 expected-sign-result1)
				(notany #'null	(mapcar #'(lambda (pairs)
							(cond ((equalp (car pairs) (cdr pairs)) t)
								 (t nil)))
						(pairlis sign-test-result1 expected-sign-result1))))
									
			(setq sign-test-result2
 				(mapcar #'eval (mapcar #'(lambda (x) (append '(float-sign) x)) 
					  float-sign-numbers2)))
			(equal sign-test-result2 expected-sign-result2))))			


STOP

