;; Function To Be Tested: integer-decode-float
;;
;; Source:     Common Lisp by Guy Steele
;;         Section 12.6: Type Conversions and Component Extractions
;;					on Numbers  Page: 218
;;
;; Created By: John Park
;;
;; Creation Date: July 21, 86
;;
;; Last Update:   Jan 28, 1987 Jim Blum - fixed (COND ... NIL) to (COND (T NIL))
;;
;; Filed as:      {eris}<lispcore>cml>test>12-6-integer-decode-float.test
;;
;; Syntax: integer-decode-float float 
;;
;; Function Description:  The function integer-decode-float is similar to 
;; decode-float  but for its first value returns, as an integer, the significand 
;; scaled so as to be an integer. Integer-decode-float takes a floating-point 
;; number and returns three vlaues.  First value is an integer
;; representing the significand; the second vlue is an integer representing the
;; exponent; and the third value is a floating-point number of the same format
;; indicating the sign.
;; 
;; Argument(s):   floating-point number
;;
;; Returns: First value: Significand (integer: f)
;;			(f < (expt b (float-precision f)) 
;; 			or (f >= (expt b (- (float-precision f) 1)
;;			b: radix for the floating-point representation.
;;		  Second Value:  Exponent (integer)
;;		  Third Value: Float-sign (1.0 or -1.0)
;;
;; Constraints/limitations: None 


(do-test-group integer-decode-float-test-setup
  :before (progn 
           (defun check-decode-value(f) 
                  (cond ((and (floatp f) (or (> f 0.0) (< f 0.0)))
                         (and (< (integer-decode-float f)
                                 (expt (float-radix f) (float-precision f)))
                              (>= (integer-decode-float f)
                                  (expt (float-radix f) (- (float-precision f) 1)))
                              ))
                        ((and (floatp f) (zerop f)) 
                         (and (integerp (integer-decode-float f))
                              (zerop (integer-decode-float f))))
                        (t nil)))

           (defun check-decode-sign (x)
                  (cond ((< x 0) (eql (float-sign x) -1.0))
                        ((>= x 0) (eql (float-sign x) 1.0))
                        (t nil)))

           (setq test-decode-numbers 
                 '(0.0 -0.0 1.0 3.0 7.1 -10.0 299.2 1024.99
                       -239898989.9)))

  (do-test  integer-decode-float-test
            (and (setq type-value-result 
                       (mapcar #'integer-decode-float test-decode-numbers))
                 (every #'integerp  type-value-result)
                 (setq value-limit-result 
                       (mapcar #'check-decode-value test-decode-numbers))
                 (notany #'null value-limit-result)
                 (setq sign-result
                       (mapcar #'check-decode-sign test-decode-numbers))
                 (notany #'null sign-result))))

STOP


