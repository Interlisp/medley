;; Function To Be Tested: MOD
;;
;; Source: Guy L Steele's CLTL
;; Section: 12.6 Type Conversions and Component Extractions on Numbers
;; Page: 217
;;
;; Created By:    Kelly Roach, John Park
;;
;; Creation Date: July 12,1986
;;
;; Last Update:   July 12,1986
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>12-6-MOD.TEST
;;
;;
;; Syntax:        (MOD NUMBER DIVISOR)
;;
;; Function Description:
;; MOD performs the operation function FLOOR on its two arguments
;; and returns the SECOND result of FLOOR as its only result.
;; Similarly,
;; REM performs the operation function TRUNCATE on its arguments
;; and returns the SECOND result of TRUNCATE as its only result.
;; 
;; MOD and REM are therefore the usual modulus
;; and remainder functions when applied to two integer arguments.
;; In general, however, the arguments may be integers or floating-point
;; numbers.
;; 
;;     
;;     
;;     (MOD 13 4) => 1         (REM 13 4) => 1
;;     (MOD -13 4) => 3         (REM -13 4) => -1
;;     (MOD 13 -4) => -3         (REM 13 -4) => 1
;;     (MOD -13 -4) => -1         (REM -13 -4) => -1
;;     (MOD 13.4 1) => 0.4
;;          (REM 13.4 1) => 0.4
;;     (MOD -13.4 1) => 0.6         (REM -13.4 1) => -0.4
;;     
;; Compatibility note: The Interlisp function REMAINDER is essentially
;; equivalent to the Common Lisp function REM.  The Maclisp function REMAINDER
;; is like REM but accepts only integer arguments.
;; 
;; Argument(s):   NUMBER - a number
;;                DIVISOR - a real
;;
;; Returns:       a number
;;

(do-test-group mod-test-setup
  :before (progn 
           (setq mod-arguments 
                 '((13 4) (-13 4) (13 -4) (-13 -4) (13.4 1) (-13.4 1)))
           (setq mod-result '(1 3 -3 -1 0.4 0.6)))

  (do-test mod-test
    (and (setq mod-test-cases 
               (mapcar #'(lambda (x) (append '(mod) x)) 
                       mod-arguments))
         (setq mod-test-result (mapcar #'eval mod-test-cases))
         (setq round-test-result
               (mapcar #'(lambda (x)
                                 (if (floatp x)
                                     (/ (fround (* 10 x)) 10) x))
                       mod-test-result))
         (equal round-test-result mod-result))))		

STOP
