;; Function To Be Tested: scale-float
;;
;; Source:     Common Lisp by Guy Steele
;;         Section 12.6: Type Conversions and Component Extractions
;;					on Numbers  Page: 218
;;
;; Created By: John Park
;;
;; Creation Date: July 18, 86
;;
;; Last Update:   
;;
;; Filed as:      {eris}<lispcore>cml>test>12-6-scale-float.test
;;
;; Syntax: scale-float float integer
;;
;; Function Description:  The function scale-float takes a floating-point number,f
;; and an integer k, and returns (* f (expt (float b f) k)).
;; 
;; Argument(s):   floating-point number and integer
;;
;; Returns: floating-point number (* f (expt (float b f) k))
;;
;; Constraints/limitations: None 


(do-test-group scale-float-test-setup
		:before (progn 

				(setq scale-float-numbers 
					'((0.0 10)(2.0 1)(2.0 2)(3.0 3) (3.0 4) (10.9 3)
					  (0.5 3)(19999.0 100)))

				(defun expected-scale-float (pairs)
					(if (and (floatp (first pairs)) (integerp (second pairs)))
					(* (first pairs) (expt (float (float-radix (first pairs))
						 (first pairs)) (second pairs)))))

				(setq expected-scale-values
					(mapcar #'expected-scale-float scale-float-numbers))

				(defun modify-scale-float-values (x)
					(cond ((and (>= x 0) (< x short-float-epsilon)) 0.0) 
						(t (/ (fround (* x 1000)) 1000)))))
				
				
				
	(do-test  scale-float-test
		(and (setq scale-float-test-cases  
			(mapcar #'eval	(mapcar #'(lambda (x) (append '(scale-float) x))
							scale-float-numbers)))
			(setq scale-float-test-result 
				(mapcar #'modify-scale-float-values scale-float-test-cases))
			
			(equal scale-float-test-result expected-scale-values))))


STOP

