;; Function To Be Tested: INTEGER-LENGTH
;;
;; Source: Guy L Steele's CLTL
;; Section: 12.7 Logical Operations on Numbers
;; Page: 224
;;
;; Created By:    Kelly Roach
;;
;; Creation Date: July 12,1986
;;
;; Last Update:   July 12,1986
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>12-7-INTEGER-LENGTH.TEST
;;
;;
;; Syntax:        (INTEGER-LENGTH INTEGER)
;;
;; Function Description:
;; This function performs the computation
;; 
;; 
;; CEILING(log2(if INTEGER < 0 then -INTEGER else INTEGER+1))
;; 
;; This is useful in two different ways.
;; First, if INTEGER is non-negative, then its value can be represented
;; in unsigned binary form in a field whose width in bits is
;; no smaller than (INTEGER-LENGTH INTEGER).
;; Second, regardless of the sign of INTEGER, its value can be
;; represented in signed binary two's-complement form in a field
;; whose width in bits is no smaller than (+ (INTEGER-LENGTH INTEGER) 1).
;; For example:
;; 
;;     (INTEGER-LENGTH 0) => 0
;;     (INTEGER-LENGTH 1) => 1
;;     (INTEGER-LENGTH 3) => 2
;;     (INTEGER-LENGTH 4) => 3
;;     (INTEGER-LENGTH 7) => 3
;;     (INTEGER-LENGTH -1) => 0
;;     (INTEGER-LENGTH -4) => 2
;;     (INTEGER-LENGTH -7) => 3
;;     (INTEGER-LENGTH -8) => 3
;;     
;; Compatibility note: This function is similar to the Maclisp
;; function HAULONG.  One may define HAULONG as
;; 
;;     (HAULONG X) = (INTEGER-LENGTH (ABS X))
;;     
;; 
;; 
;; Argument(s):   INTEGER - an integer
;;
;; Returns:       a number
;;



(do-test integer-length-test
         (and (eq (integer-length 0) 0)
              (eq (integer-length 1) 1)
              (eq (integer-length 3) 2)
              (eq (integer-length 4) 3)
              (eq (integer-length 7) 3)
              (eq (integer-length -1) 0)
              (eq (integer-length -4) 2)
              (eq (integer-length -7) 3)
              (eq (integer-length -8) 3)))

STOP
