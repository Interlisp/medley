;; Function To Be Tested: digit-char
;;
;; Source:        Steele's book    Section 13.4: Character Conversions        Page: 241
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: April 29 '86
;;
;; Last Update:   May 16, 1986
;;
;; Filed As:      {eris}<lispcore>cml>test>13-4-digit-char.test
;;
;;
;; Syntax:                DIGIT-CHAR  weight &optional (radix 10) (font 0)
;;
;; Function Description:  DIGIT-CHAR attempts to construct a character object with the argument font. 
;;                        The returned character has a code which is equivalent to the argument weight
;;                        when bases on the argument radix.
;;
;; Argument(s):           weight  - a non-negative integer and less then radix
;;                        radix   - between 2 and 36 inclusive, the default is set to 10
;;                        font    - the font attribute, the default is set to 0
;;
;; Returns:               char - a character object whose font attribute is font, and whose code is
;;                               equivalent to the argument weight when bases on the argument radix.
;;                               
;;                        nil - it's not possible to construct such a character
;;
;;
    
(do-test-group (test-digit-char-group
         :before (progn
                    (setf weight-radix-10 '(0 1 2 3 4 5 6 7 8 9))
                    (setf char-radix-10   '(#\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9))
                    (setf weight-radix-8  '(0 1 2 3 4 5 6 7))
                    (setf char-radix-8    '(#\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7))
                    (setf weight-radix-16 '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))
                    (setf char-radix-16   '(#\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9 #\A #\B #\C #\D
                                            #\E #\F))
                    (setf weight-radix-26 '(24 25))
                    (setf char-radix-26   '(#\O #\P))
                    (setq weight-radix-36 '(33 34 35))
                    (setq char-radix-36   '(#\X #\Y #\Z))
                    (setq weight-radix-2   '(0 1))
                    (setq char-radix-2     '(#\0 #\1))))
  (do-test test-digit-char1
     (and (every #'(lambda (x y) (char= (digit-char x) y)) weight-radix-10  char-radix-10)
          (every #'(lambda (x y) (char= (digit-char x 8) y)) weight-radix-8  char-radix-8)
          (every #'(lambda (x y) (char= (digit-char x 16) y)) weight-radix-16  char-radix-16) 
          (every #'(lambda (x y) (char= (digit-char x 26) y)) weight-radix-26  char-radix-26)
          (every #'(lambda (x y) (char= (digit-char x 36) y)) weight-radix-36  char-radix-36)
          (every #'(lambda (x y) (char= (digit-char x 2) y)) weight-radix-2  char-radix-2)))

 (do-test test-digit-char2
      ; if "weight" is not less than "radix" be sure it returns nil
     (and (notany #'digit-char '(10 11 12 8 9 20 ) '(10 10 10 8 8 8))
          (notany #'digit-char '(16 17 18 19  26 27 282 29) '(16 16 16 16 26 26 26 26))
          (notany #'digit-char '(36 37 38 40 2 3 4) '(36 36 36 36 2 2 2))))

 (do-test  test-digit-char3
     ; what happens if "weight" is negative ?  I assume it returns nil
     (notany #'digit-char '(-1 -2 -3 ) '(10 20 30))))
     
STOP

