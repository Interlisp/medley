;; Function To Be Tested: nreverse
;;
;; Source:        CLtL    Section 14.1: Simple Sequences Functions        Page: 248
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: Sep. 2,1986
;;
;; Last Update:   Nov. 5,1986
;;
;; Filed As:      {eris}<lispcore>cml>test>14-1-nreverse.test
;;
;;
;; Syntax:                nreverse SEQUENCE
;;
;; Function Description:  This function returns a new sequene of the same kind as SEQUENCE, containing the same elements 
;;                        but in reverse order. The argument may be destroyed and re-used to produce the result.  The
;;					result may or may not be eq to the argument.
;;
;; Argument(s):           SEQUENCE -
;;
;; Returns:               a sequence    
;;
(do-test "test nreverse 0"
  (and (equal (nreverse "") "")
    (equal (nreverse ()) ())
    (equalp (nreverse (vector)) '#())
    (let ((a (nreverse (make-array 10 :initial-contents '(0 1 2 3 4 5 6 7 8 9)))))
      (equal (do ((n 0 (1+ n))
		        (contents ()))
		       ((= n 10) contents)
		     (push (elt a n) contents))
             '(0 1 2 3 4 5 6 7 8 9)))
    (let ((a (nreverse '#(1 1 1 1 1 0 0 0 0 0))))
      (every #'(lambda (x y) (= (elt a x) y)) '(0 9 4 5) '(0 1 0 1)))
    (let ((a (nreverse (do ((n 0 (1+ n)) (m nil (cons n m))) ((= n 40) m)))))
      (= (elt a 5) 5)
    )
  )
)

(do-test "test nreverse 1"
  (flet ((test-one (seq)
           (let* ((expected-length (length seq))
                  (save-seq (copy-seq seq))
                  (rev (nreverse seq)))
             (and (= expected-length (length rev))
                  (dotimes (n expected-length t)
                    (unless (equal (elt save-seq n) (elt rev (- (1- expected-length) n)))
                      (return nil))
                  )
             )
           )
        ))
    (and (test-one '#(a b c d e f g h i j k l m n o p))
         (test-one "dhjfkdjshkjfhdskjfhbvncbmxytewywpoiop;alndbvur478362389uioewhjrheo;lasldkhfdkhffds")
         (test-one '((1 . 2) (((3)) 4) ((5 . 6) . 7) 8 9 10 (11 12 13) ((14 15 16 17) 18 19 20)))
         (test-one '#(1 0 1 0 0 1 1 1 1 0 0 1 0 0 0 1 1 1 0 1 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 1 1))
         (test-one '(to all those who strive for excellence to all those who strive for excellence))
         (test-one (append (make-list 50 :initial-element '((1) (2)))
						   (make-list 50 :initial-element '(3 4 (5))) 
						   (make-list 50 :initial-element '(8 7 . 9))  ))
         (test-one (concatenate 'string (make-string 100 :initial-element #\u)
							   		(make-string 100 :initial-element #\s)
							   		(make-string 100 :initial-element #\a)  ))
         (test-one (concatenate 'vector '#(1 2 3 4 5 6 7 8 9) '#(one two three four five six seven eight nine)))
    )
  )
)
STOP
