;; Function To Be Tested: fill
;;
;; Source:        CLtL    Section 14.3: Modifying Sequences        Page: 252
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: Sept. 9 ,1986
;;
;; Last Update:   Nov. 5 ,1986
;;
;; Filed As:      {eris}<lispcore>cml>test>14-3-fill.test
;;
;;
;; Syntax:                fill SEQUENCE ITEM &KEY :START :END
;;
;; Function Description:  fill destructively modifies SEQUENCE by replacing each element of the subsequence specified
;;					by :START and :END parameters with ITEM.
;;
;; Argument(s):           SEQUENCE -
;;					ITEM      -  any Lisp object which must be a suitable element for the SEQUENCE
;;					:START    -  an integer index into the SEQUENCE ; :START < :END
;;					:END      -  an integer index into the SEQUENCE ; :END < (length SEQUENCE)
;;
;; Returns:               a sequence    
;;

(do-test "test fill - test cases from  page 252 of CLtL"
	(let ( (x '#(a b c d e))  )
		(and	(prog2 (fill x 'z :start 1 :end 3)
				  (every #'(lambda (m n) (eq (elt x m) n)) '(0 1 2 3 4) '(a z z d e)))
			(prog2 (fill x 'p)
				  (every #'(lambda (m n) (eq (elt x m) n)) '(0 1 2 3 4) '(p p p p p)))
		)
	)
)

(do-test "test fill 0"
  (let* ((a "a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z")
         (b (copy-seq a))
         (c (copy-seq a)))
    (fill a #\0) (fill b #\1 :start 0) (fill c #\2 :end (length c))
	(every #'(lambda (m n) (equal m (make-string 103 :initial-element n)))  (list a b c) '(#\0 #\1 #\2))
  )
)

(do-test "test fill 1"
  (let ((a (make-array 40)))
    (fill (fill (fill (fill a #'+ :end 10) #'- :start 10 :end 20) #'* :start 20 :end 30) #'max :start 30)
    (every #'(lambda (w x y z) (= (funcall (elt a w) x y) z))
      (do ((n 0 (1+ n))
           (lst nil (append lst (list n))))
          ((= n 40) lst))
      '(1 3 5 7 9 11 13 15 10 20 30 40 2  3 4 1 6 5 7 8 9 3 2 -1 -5 -3 -7 -8 0 2 -4  3 4 2 1 2 9 7 5 3)
      '(2 4 6 1 0 2   4 6  -3 -2 -1 -6 4 -1 1 2 0 1 2 3 4 5 6  7 -6  4  3 10 5 2  3 -1 2 1 0 3 4 6 2 3)
      '(3 7 11 8 9 13 17 21 7 18 31 46 -2 4 3 -1 6 4 5 5 36 15 12 -7 30 -12 -21 -80 0 4 3 3 4 2 1 3 9 7 5 3))
  )
)

(do-test "test fill 2"
  (let ((a (make-array 400))
        (b '(dopey sleepy sneezy grouchy)))
    (dotimes (n 400 nil) (fill a (elt b (mod n 4)) :start n :end (1+ n)))
    (equalp a (make-array 400 :initial-contents (apply #'append (make-list 100 :initial-element (subseq b 0 4)))))
  )
)
STOP

									 