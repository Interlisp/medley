;; Function To Be Tested: nsubstitute-if
;;
;; Source:        CLtL    Section 14.3: Modifying Sequences        Page: 256
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: Sept. 25 ,1986
;;
;; Last Update:   Sept. 25 ,1986
;;
;; Filed As:      {eris}<lispcore>cml>test>14-3-nsubstitute-if.test
;;
;;
;; Syntax:                nsubstitute-if  NEWITEM TEST SEQUENCE &KEY :FROM-END :START :END :COUNT :KEY
;;
;; Function Description:  The result is a sequence of the same kind as the argument SEQUENCE that has the same elements except that
;;					those in the subsequence delemited by  :START and :END and satisfying the test have been replaced by newitem.
;;
;; Argument(s):           NEWITEM     -
;;					TEST        - a function which takes one argument
;;					SEQUENCE    -
;;					:FROM-END   - nil or non-nil
;;					:START :END - integer indices into the SEQUENCE, with :START <= :END
;;					:KEY        - a function of one argument that will extract from an element the part
;;							    to be tested in place of the whole element.
;;
;; Returns:               a sequence    
;;
(do-test "test cases copied from page 256 of CLtL"
	(and (equal (nsubstitute-if 9 #'oddp '(1 2 4 1 3 4 5)) '(9 2 4 9 9 4 9))
		(equal (nsubstitute-if 9 #'evenp '(1 2 4 1 3 4 5) :count 1 :from-end t) '(1 2 4 1 3 9 5))
	)
)

(do-test "test nsubstitute-if 0"
	(and (equal  (nsubstitute-if 3 #'plusp '(2 -3 9 -5 4 100 -3 4 7 2 9 -4 3 -8)) '(3 -3 3 -5 3 3 -3 3 3 3 3  -4 3 -8))

		(equalp (nsubstitute-if 1 #'zerop  (vector 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
			   (vector 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ))

		(equal  (nsubstitute-if "*" #'characterp '(2 -3 9 -5 4 100 -3 4 7 2 9 -4 3 -8)) 
			   '(2 -3 9 -5 4 100 -3 4 7 2 9 -4 3 -8))
	)
)

(do-test "test nsubstitute-if 1"
	(let ((a "seedhead of common sunflower marin county california nikon") b c d)
		(setf b (copy-seq a) c (copy-seq a) d (copy-seq a) )
        (and 
		(equal (nsubstitute-if #\% #'(lambda (x) (equal x #\space))  a) 
			  "seedhead%of%common%sunflower%marin%county%california%nikon")

		(equal (nsubstitute-if #\% #'(lambda (x) (equal x #\space))  b :start 10)
			  "seedhead of%common%sunflower%marin%county%california%nikon")

		(equal (nsubstitute-if #\% #'(lambda (x) (equal x #\space))  c :end 50)
			  "seedhead%of%common%sunflower%marin%county%california nikon")

		(equal (nsubstitute-if #\% #'(lambda (x) (equal x #\space))  d :start 15 :end 40)
			  "seedhead of common%sunflower%marin%county california nikon")
	   )
	)
)

(do-test  "test nsubstitute-if 2"
	(let ((a '(11 22 33 44 55 66 77 88 99 10 20 31 41 52 73 84 72 90 82 93 74 65 10 22 38) ) b c d e)
		(setf b (copy-seq a) c (copy-seq a) d (copy-seq a) e (copy-seq a) )
		(and 
			(equal (nsubstitute-if 'z #'evenp a) 
				  '(11 z 33 z 55 z 77 z 99 z z 31 41 z 73 z z z z 93 z 65 z z z) )

			(equal (nsubstitute-if 'z #'evenp b :count 7)
				  '(11 z 33 z 55 z 77 z 99 z z 31 41 z 73 84 72 90 82 93 74 65 10 22 38) )

			(equal (nsubstitute-if 'z #'evenp c :count 7 :from-end t)
				  '(11 22 33 44 55 66 77 88 99 10 20 31 41 52 73 84 z z z 93 z 65 z z z) )
		
			(equal (nsubstitute-if 'z #'evenp d :count 5)
				  '(11 z 33 z 55 z 77 z 99 z 20 31 41 52 73 84 72 90 82 93 74 65 10 22 38) )

			(equal (nsubstitute-if 'z #'evenp e :count 5 :from-end t)
				  '(11 22 33 44 55 66 77 88 99 10 20 31 41 52 73 84 72 90 z 93 z 65 z z z) )
		)
	)
)


(do-test "test nsubstitute-if 3"
	(let ((a '( (2 3 7.0 9) (1 4.2 8 5) (9 2.3 4.1 9) (1.0 2.0 4.0 6.0) (-5.0 3.0 2 1.1) (8 9 4.0 3.2 8.8 2) (3 4.2 6.3 5)) ) b c)
		(setf b (copy-seq a) c (copy-seq a))
		(and (equal (nsubstitute-if "**" #'floatp a :key #'third) 
				  '( "**" (1 4.2 8 5)  "**"  "**" (-5.0 3.0 2 1.1) "**" "**"))
	
			(equal (nsubstitute-if "**" #'(lambda (x) (> x 6)) b :key #'(lambda (y) (car (last y))))
			       '("**" (1 4.2 8 5) "**" (1.0 2.0 4.0 6.0) (-5.0 3.0 2 1.1) (8 9 4.0 3.2 8.8 2) (3 4.2 6.3 5)) )

			(equal (nsubstitute-if "**" #'(lambda (x) (/= (length x) 2)) c :key #'cddr)
				  '((2 3 7.0 9) (1 4.2 8 5) (9 2.3 4.1 9) (1.0 2.0 4.0 6.0) (-5.0 3.0 2 1.1) "**" (3 4.2 6.3 5)) )
		)
	)
)

(do-test "test nsubstitute-if  4"
	(let ((a (list #*10110  #*00000 #*11111 #*00011 #*10001 #*001100 #*101010 #*01010 #*110110)  ) b c)
		(setf b (copy-seq a) c (copy-seq a))
		(and (equal (nsubstitute-if "!" #'(lambda (x) (= x 1))  a :start 2 :end 8 :from-end t :count 2 :key #'(lambda (x) (elt x 2)))
				  (list #*10110  #*00000 #*11111 #*00011 #*10001 "!" "!" #*01010 #*110110) )

			(equal (nsubstitute-if "!" #'(lambda (x) (/= (length x) 6)) b :start 3 :end 8 :count 3 :key #'identity)
				  (list #*10110  #*00000 #*11111 "!" "!" #*001100 #*101010 "!" #*110110)  )

			(equal (nsubstitute-if "!" #'(lambda (x) (= x 0)) c :end 5 :count 2 :from-end t :key #'(lambda (y) (elt (reverse y) 1)))
				  (list #*10110 "!" #*11111 #*00011 "!" #*001100 #*101010 #*01010 #*110110)  )
		)
	)
)
STOP
