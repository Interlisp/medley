;; Function To Be Tested: remove-if
;;
;; Source:        CLtL    Section 14.3: Modifying Sequences        Page: 253
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: Sept. 13 ,1986
;;
;; Last Update:   Sept. 13 ,1986
;;
;; Filed As:      {eris}<lispcore>cml>test>14-3-remove-if.test
;;
;;
;; Syntax:                remove-if TEST SEQUENCE &KEY :FROM-END :START :END :COUNT :KEY
;;
;; Function Description:  remove-if returns a sequence of the same kind as the argument SEQUENCE that has the same 
;;					elements except that those in the subsequence delimited by :START and :END and satisfying the
;;				     TEST have  been removed.
;;
;; Argument(s):           TEST        - a function of one argument
;;					SEQUENCE    -
;;					:FROM-END   - nil or non-nil
;;					:START :END - integer indices into the SEQUENCE, with :START <= :END
;;					:COUNT      - an integer which limits the number of elements removed from SEQUENCE
;;					:KEY        - a function of one argument that will extract from an element the part
;;							    to be tested in place of the whole element.
;;
;; Returns:               a sequence    
;;

(do-test "test remove-if 0"
	(and	(equal (remove-if #'oddp '(1  2 4 1 3 4 5)) '(2 4 4))
		(equal (remove-if #'evenp '(1 2 4 1 3 4 5) :count 1 :from-end t) '(1 2 4 1 3 5))
		(let ((a '(1 3 4 2 5 6  3 9 8 7  10 20 31 25 87 3 4 5 3 4 2 10 22 38 100  50 25  22)))
			(and (equal (remove-if #'evenp a) 
					  '(1 3 5  3 9 7  31 25 87 3 5 3  25 ))
				(equal (remove-if #'evenp a  :count 10) 
					  '(1 3 5  3 9 7  31 25 87 3 5 3 22 38 100 50 25 22))
				(equal (remove-if #'evenp a :count 10 :from-end t)
					  '(1 3 4 2 5 6  3 9 8 7  10 31 25 87 3 5 3   25 ))
				(equal a  '(1 3 4 2 5 6  3 9 8 7  10 20 31 25 87 3 4 5 3 4 2 10 22 38 100  50 25  22))
			)
		)
	)
)

(do-test "test remove-if 1"
	(let ((a "watermelon banana tomato pineapple pear peach plum apple orange cantalope honeydew"))
		(and	(equal (remove-if #'(lambda (x) (> (char-code x) (char-code #\r))) a :end 30)
				  "aermelon banana omao pineapple pear peach plum apple orange cantalope honeydew")

			(equal (remove-if #'(lambda (x) (> (char-code x) (char-code #\r))) a :start 60 )
				  "watermelon banana tomato pineapple pear peach plum apple orange canalope honede") 

			(equal (remove-if #'alpha-char-p a :start 11 :end 64)
				  "watermelon         cantalope honeydew")
		
			(equal a "watermelon banana tomato pineapple pear peach plum apple orange cantalope honeydew")
		)
	)
)

(do-test "test remove-if 2"
	(let ((a '(  ( 1 (2 3) 4)  (a (b) c ((d)))   (10 (20 30 40) 50 60) (aa (bb cc) dd ee) (1.1 (2.2) 3.3 4.4 5.5))  ))
		(and (equal (remove-if #'(lambda (x ) (<= (length x) 2)) a :key #'cadr)
				  '(  (10 (20 30 40) 50 60) ))

			(equal (remove-if #'(lambda (x ) (< (length x) 2)) a :key #'cadr :count 1 :from-end t)
				  '(( 1 (2 3) 4)  (a (b) c ((d)))   (10 (20 30 40) 50 60) (aa (bb cc) dd ee) )) 
			
			(equal a '(  ( 1 (2 3) 4)  (a (b) c ((d)))   (10 (20 30 40) 50 60) (aa (bb cc) dd ee) (1.1 (2.2) 3.3 4.4 5.5)))
		)
	)
)

(do-test "test remove-if 3"
	(let ((a  '( (10 20 30)  (-2 23) (-9 99) (34 49) (3 2 1) (20 34 13) (1 2 3 4 5) (33 44 22 11) (-7 5 9 12))  ))
		(and (equal (remove-if #'(lambda (x) (and (> x 5) (oddp x))) a :start 2 :end 7 :from-end t :count 2
														 :key #'(lambda (x) (first (last x))) )
				 '((10 20 30)  (-2 23) (-9 99)  (3 2 1)  (1 2 3 4 5) (33 44 22 11) (-7 5 9 12)) )
			(equal a '( (10 20 30)  (-2 23) (-9 99) (34 49) (3 2 1) (20 34 13) (1 2 3 4 5) (33 44 22 11) (-7 5 9 12))  )
		)
	)
)

(do-test "test remove-if 4"
	(let ((a '(8 #\a (1 2) #\b 3.4 -9.85 #\e "abdesd" (2 3 4 5) #\o #\a (+ 2 3) #\a "banana") ))
		(equal (remove-if #'characterp a :start 2 :end 12 :from-end t :count 3)
			 '(8 #\a (1 2) #\b 3.4 -9.85  "abdesd" (2 3 4 5)  (+ 2 3) #\a "banana") )
	)
)
STOP