;; Function To Be Tested: replace
;;
;; Source:        CLtL    Section 14.3: Modifying Sequences        Page: 252
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: Sept. 9 ,1986
;;
;; Last Update:   Nov. 5 ,1986
;;
;; Filed As:      {eris}<lispcore>cml>test>14-3-replace.test
;;
;;
;; Syntax:                replace SEQUENCE1 SEQUENCE2 &KEY :START1 :END1 :START2 :END2
;;
;; Function Description:  replace destructively modified SEQUENCE1 by copying the subsequence of SEQUENCE2
;;					into the subsequence of SUBSEQUENCE1.
;;
;; Argument(s):           SEQUENCE1 SEQUENCE2 -
;;					:START1   :START2    -
;;					:END1     :END2      -
;;
;; Returns:               a sequence    
;;

(do-test "test replace 0"
	(and	(equal	(replace "12345678" "abcde") "abcde678")
		(equal 	(replace "12345" "abcdefghijklmno") "abcde")
		(equal	(replace '(1 2 3 4 5 6 7 8 9 10) '#(a b c d e f) :start1 5 :start2 2)
			     '(1 2 3 4 5 c d e f 10))
		(equal	(replace '(1 2 3 4 5 6 7 8 9 10) '#(a b c d e f) :end1 3 :end2 5)
				'(a b c 4 5 6 7 8 9 10))
		(equal	(replace '(1 2 3 4 5 6 7 8 9 10) '#(a b c d e f) :start1 3 :end2 4)
				'(1 2 3 a b c d 8 9 10))
		(equalp	(replace '#(1 2 3 4 5 6 7 8 9 10) '#(a b c d e f) :end1 4 :start2 4)
				'#(e f 3 4 5 6 7 8 9 10))
		(equal	(replace "654368793789327932" '(#\a #\c #\e #\h #\i #\d #\p #\m #\k #\s #\b #\o)
						:start1 3 :end1 13 :start2 2 :end2 8)
				"654ehidpm789327932" )
		(equal	(replace "654368793789327932" '(#\a #\c #\e #\h #\i #\d #\p #\m #\k #\s #\b #\o)
						:start1 3 :end1 nil :start2 2 :end2 nil)
				"654ehidpmksbo27932")
	)
)


(do-test "test replace 2"
  (flet ((test-one
             (seq1 seq2 &key (s1 0) (s2 0) (e1 (length seq1)) (e2 (length seq2)))
           (let* ((seq11 (copy-seq seq1))
                  (copied-elts (min (- e1 s1) (- e2 s2)))
                  (expected (concatenate 'list
                              (and (> s1 0) (subseq seq11 0 s1))
                              (subseq seq2 s2 (+ s2 copied-elts))
                              (and (> (length seq11) (+ s1 copied-elts))
                                   (subseq seq11 (+ s1 copied-elts)))
                            ))
                  (result (replace seq1 seq2 :start1 s1 :start2 s2 :end1 e1 :end2 e2)))
             (and (eql (length expected) (length result))
                  (dotimes (i (length expected) t)
                    (unless (equal (elt expected i) (elt result i)) (return nil))
                  )
             )
           )
        ))
    (test-one "kdjsfjkldsjoieurhhfkldsfjlkdsjhfg" "123456789" :s1 5 :e1 10 )
    (test-one (make-string 200 :initial-element #\*) (make-string 50 :initial-element #\%) :s1 99)
    (test-one (make-list   100 :initial-element '(1 2 3)) (make-list  100 :initial-element '((1 2) . 3)) )
    (test-one (make-array  150) (make-array 200 :initial-element "replace") :s1 70 :e1 120)
    (test-one '#(1 2 3 4 11 22 33 44 55 111 222 333 444 555 666) '("11" "22" "33" "44") :s1 4)
  )
)

(do-test "test replace 3"
	;;
	;;  If seq1 and seq2 are the same (eq) object and the region being modified overlaps the region being copied from
	;;
	(and	(let ((a (list 1 2 3 4 5 6 7 8 9 0)))
	       (replace a a :start1 2 :end1 5 :start2 3 :end2 6)
	       (equal a '(1 2 4 5 6 6 7 8 9 0)))
		(let ((b (vector 1 2 3 4 5 6 7 8 9 0))
	       (replace b b :start1 2 :end1 5 :start2 3 :end2 6)
	       (equal b '#(1 2 4 5 6 6 7 8 9 0)))
	)
)
STOP




											
									
		