;; Function To Be Tested: substitute-if-not
;;
;; Source:        CLtL    Section 14.3: Modifying Sequences        Page: 255
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: Sept. 24 ,1986
;;
;; Last Update:   Sept. 24 ,1986
;;
;; Filed As:      {eris}<lispcore>cml>test>14-3-substitute-if-not.test
;;
;;
;; Syntax:                substitute-if-not  NEWITEM TEST SEQUENCE &KEY :FROM-END :START :END :COUNT :KEY
;;
;; Function Description:  The result is a sequence of the same kind as the argument SEQUENCE that has the same elements except that
;;					those in the subsequence delemited by  :START and :END and not satisfying the test have been replaced by
;;				     newitem.
;;
;; Argument(s):           NEWITEM     -
;;					TEST        - a function which takes one argument
;;					SEQUENCE    -
;;					:FROM-END   - nil or non-nil
;;					:START :END - integer indices into the SEQUENCE, with :START <= :END
;;					:KEY        - a function of one argument that will extract from an element the part
;;							    to be tested in place of the whole element.
;;
;; Returns:               a sequence    
;;

(do-test "test cases copied from page 256 of CLtL"
	(and (equal (substitute-if-not 9 #'oddp '(1 2 4 1 3 4 5)) '(1 9 9 1 3 9 5))
		(equal (substitute-if-not 9 #'evenp '(1 2 4 1 3 4 5) :count 1 :from-end t) '(1 2 4 1 3 4 9))
	)
)

(do-test "test substitute-if-not 0"
	(and (equal  (substitute-if-not 3 #'plusp '(2 -3 9 -5 4 100 -3 4 7 2 9 -4 3 -8)) '(2 3 9 3 4 100 3 4 7 2 9 3 3 3))

		(equalp (substitute-if-not 7 #'zerop  (vector 0 0 0 1 1 1 0 0 0 0 0 0 0 0 8 8 0 0 0 0))
			   (vector 0 0 0 7 7 7 0 0 0 0 0 0 0 0 7 7 0 0 0 0 ))

		(equal  (substitute-if-not "*" #'numberp '(2 -3 9 -5 4 100 -3 4 7 2 9 -4 3 -8)) 
			   '(2 -3 9 -5 4 100 -3 4 7 2 9 -4 3 -8))
	)
)

(do-test "test substitute-if-not 1"
	(let ((a "seedhead of common sunflower marin county calif-notornia nikon"))
        (and 
		(equal (substitute-if-not #\% #'alpha-char-p  a) 
			  "seedhead%of%common%sunflower%marin%county%calif%notornia%nikon")

		(equal (substitute-if-not #\% #'alpha-char-p  a :start 10)
			  "seedhead of%common%sunflower%marin%county%calif%notornia%nikon")

		(equal (substitute-if-not #\% #'alpha-char-p  a :end 50)
			  "seedhead%of%common%sunflower%marin%county%calif%notornia nikon")

		(equal (substitute-if-not #\% #'alpha-char-p   a :start 15 :end 40)
			  "seedhead of common%sunflower%marin%county calif-notornia nikon")

		(equal a "seedhead of common sunflower marin county calif-notornia nikon")
	   )
	)
)

(do-test  "test substitute-if-not 2"
	(let ((a '(11 22 33 44 55 66 77 88 99 10 20 31 41 52 73 84 72 90 82 93 74 65 10 22 38) ))
		(and 
			(equal (substitute-if-not 'z #'oddp a) 
				  '(11 z 33 z 55 z 77 z 99 z z 31 41 z 73 z z z z 93 z 65 z z z) )

			(equal (substitute-if-not 'z #'oddp a :count 7)
				  '(11 z 33 z 55 z 77 z 99 z z 31 41 z 73 84 72 90 82 93 74 65 10 22 38) )

			(equal (substitute-if-not 'z #'oddp a :count 7 :from-end t)
				  '(11 22 33 44 55 66 77 88 99 10 20 31 41 52 73 84 z z z 93 z 65 z z z) )
		
			(equal (substitute-if-not 'z #'oddp a :count 5)
				  '(11 z 33 z 55 z 77 z 99 z 20 31 41 52 73 84 72 90 82 93 74 65 10 22 38) )

			(equal (substitute-if-not 'z #'oddp a :count 5 :from-end t)
				  '(11 22 33 44 55 66 77 88 99 10 20 31 41 52 73 84 72 90 z 93 z 65 z z z) )

			(equal a '(11 22 33 44 55 66 77 88 99 10 20 31 41 52 73 84 72 90 82 93 74 65 10 22 38) )
		)
	)
)

(do-test "test substitute-if-not 3"
	(let ((a '( (2 3 7.0 9) (1 4.2 8 5) (9 2.3 4.1 9) (1.0 2.0 4.0 6.0) (-5.0 3.0 2 1.1) (8 9 4.0 3.2 8.8 2) (3 4.2 6.3 5)) ))
		(and (equal (substitute-if-not "**" #'integerp a :key #'third) 
				  '( "**" (1 4.2 8 5)  "**"  "**" (-5.0 3.0 2 1.1) "**" "**"))
	
			(equal (substitute-if-not "**" #'(lambda (x) (<= x 6)) a :key #'(lambda (y) (car (last y))))
			       '("**" (1 4.2 8 5) "**" (1.0 2.0 4.0 6.0) (-5.0 3.0 2 1.1) (8 9 4.0 3.2 8.8 2) (3 4.2 6.3 5)) )

			(equal (substitute-if-not "**" #'(lambda (x) (= (length x) 2)) a :key #'cddr)
				  '((2 3 7.0 9) (1 4.2 8 5) (9 2.3 4.1 9) (1.0 2.0 4.0 6.0) (-5.0 3.0 2 1.1) "**" (3 4.2 6.3 5)) )

			(equal a '( (2 3 7.0 9) (1 4.2 8 5) (9 2.3 4.1 9) (1.0 2.0 4.0 6.0) (-5.0 3.0 2 1.1) (8 9 4.0 3.2 8.8 2) (3 4.2 6.3 5)) )
		)
	)
)

(do-test "test substitute-if-not 4"
	(let ((a '("sneezy" "sleepy" "jumpy" "grouchy" "doc" "bashful" "dopey" "snowwhite" "witch")  ))
		(and	(equal (substitute-if-not "no-y" #'(lambda (x) (find #\y x)) a :end 8 :from-end t :count 2)
				  '("sneezy" "sleepy" "jumpy" "grouchy" "doc"  "no-y" "dopey" "no-y" "witch"))

			(equal (substitute-if-not "no-o" #'(lambda (x) (find #\o x)) a :start 4 :end 7 :count 1 :from-end t
														    :key #'(lambda (y) (subseq y 0 3)))
				  '("sneezy" "sleepy" "jumpy" "grouchy" "doc" "no-o" "dopey" "snowwhite" "witch"))

			(equal (substitute-if-not "no-s" #'(lambda (x) (equal x #\s)) a :start 4 :end 6 :key #'(lambda (y) (elt y 0)))
				  '("sneezy" "sleepy" "jumpy" "grouchy" "no-s" "no-s" "dopey" "snowwhite" "witch"))
			
			(equal a '("sneezy" "sleepy" "jumpy" "grouchy" "doc" "bashful" "dopey" "snowwhite" "witch")  )
		)
	)
)
STOP

