;; Function To Be Tested: merge
;;
;; Source:        CLtL    Section 14.5: Sorting and Merging        Page: 260-261
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: Oct. 1 ,1986
;;
;; Last Update:   Oct. 5 ,1986
;;
;; Filed As:      {eris}<lispcore>cml>test>14-5-merge.test
;;
;;
;; Syntax:                merge RESULT-TYPE SEQUENCE1 SEQUENCE2 PREDICATE &KEY :KEY
;;
;; Function Description:  The sequences SEQUENCE1 and SEQUENCE2 are destructively merged according to an order determined by 
;;					the PREDICATE.  The result is a sequence of type RESULT-TYPE. (for detailed function description, please
;;					refer to page 260-261 of CLtL
;;
;; Argument(s):           RESULT-TYPE - must be s subtype of sequence
;;					SEQUENCE1 SEQUENCE2  -
;;					PREDICATE - a function which takes two arguments
;;					:KEY      - a function of one argument that will extract from an element the part to be tested 
;;							  in place of the whole element
;;
;; Returns:               a sequence    
;;

(do-test "test merge 0"
	(and (equal (merge 'list '(1 3 4 6 7) '(2 5 8) #'<)  '(1 2 3 4 5 6 7 8))
		(equal (merge 'list '(1 3 4 6 7) '(2 5 8) #'>)  '(2 5 8 1 3 4 6 7))
		(equal (merge 'list '(1 3 4 6 7) '(2 5 8) #'=)  '(1 3 4 6 7 2 5 8))
		(equal (merge 'list '(1 3 4 6 7) '(2 5 8) #'/=) '(2 5 8 1 3 4 6 7))
		(equal (merge 'string "BOY" "nosy" #'char-lessp) "BnOosYy")
		(equal (merge 'string "BOY" "nosy" #'char<)      "BOYnosy")
		(equal (merge 'string "BOY" "nosy" #'char>)      "nosyBOY")
	)
)

(do-test "test merge 1"
	(let* ((a (do ((m 1 (+ 2 m)) (n nil (append n (list m))) ) ((>= m 200) n))  )  ;; a list of odd numbers from 1 to 199
            (b (mapcar #'1+ a))										  ;; a list of even numbers from 2 to 200
		  (ab (do ((m 1 (1+ m)) (n nil (append n (list m))) ) ((> m 200) n))  ))  ;; a list of numbers from 1 to 200

		 (and (equal (merge 'list (copy-seq a) (copy-seq b) #'<) ab)
			 (equal (merge 'list (reverse a) (reverse b) #'>) (reverse ab))
			 (equal (merge 'list (copy-seq a) (copy-seq b) #'>) (append b a))
		)
	)
)

(do-test "test merge 2"
	(let (( a '(3 10 5 49 30 50 23 4 8 27 10 4 32 8 20 9 11 27 13 20 32))
		 ( b '(7 30 4 12 6 23 12 20 42 45 50 43 20 18 7 6 23 10 22 3 1))
		 ( c '(3 -10 5 49 -30 50 -2 23 -4 8 27 10 74 -1 32 8 -20 9 11 -27 13 -20 32))
		 ( d '(-3 4 10 -2 10 34 28 -5 59 20 -4 12 20 0 10 14 33 -6 -4 -2 100)))

		(and  (equal (merge 'list (copy-seq a) (copy-seq b) #'<) 
				   '(3 7 10 5 30 4 12 6 23 12 20 42 45 49 30 50 23 4 8 27 10 4 32 8 20 9 11 27 13 20 32 50 43 20 18 7 6 23 10 22 3 1))

			 (equal (merge 'list a b #'>)
				   '(7 30 4 12 6 23 12 20 42 45 50 43 20 18 7 6 23 10 22 3 10 5 49 30 50 23 4 8 27 10 4 32 8 20 9 11 27 13 20 32 3 1))

			 (equal (merge 'list (copy-seq c) (copy-seq d)  #'<)
				   '(-3 3 -10 4 5 10 -2 10 34 28 -5 49 -30 50 -2 23 -4 8 27 10 59 20 -4 12 20 0 10 14 33 -6 -4 -2 74 -1 32 8 -20 9 11 -27 13 -20 32 100))

			 (equal (merge 'list (copy-seq c) (copy-seq d) #'(lambda (x y) (> (abs x) (abs y))))
				   '(3 -10 5 49 -30 50 -3 4 10 -2 23 -4 8 27 10 74 -2 10 34 28 -5 59 20 -4 12 20 -1 32 8 -20 9 11 -27 13 -20 32 0 10 14 33 -6 -4 -2 100))

			 (equal (merge 'list c d #'> :key #'abs) 
				   '(3 -10 5 49 -30 50 -3 4 10 -2 23 -4 8 27 10 74 -2 10 34 28 -5 59 20 -4 12 20 -1 32 8 -20 9 11 -27 13 -20 32 0 10 14 33 -6 -4 -2 100))

		)
	)
)

(do-test "test merge 3"
	(let ( ( a (vector "fdf" "fgfg" "dfgfdg" "ddf" "hghr" "er" "tytryty" "hdfhrt" "f" "ffff" "rertrt" "ryergdhfghgfgfdg" "weew"))
		  ( b (vector "45" "4543" "333" "43543" "32" "" "3" "4545421" "34" "6666" "67567567" "2143545656547657665623")))

		(equalp (merge 'vector (copy-seq a) (copy-seq b) #'< :key #'length)
			   (vector "45""fdf" "fgfg""4543" "333" "43543" "32" "" "3" "dfgfdg" "ddf" "hghr" "er" "tytryty" "hdfhrt" "f" 
					 "ffff" "rertrt" "4545421" "34" "6666" "67567567" "ryergdhfghgfgfdg" "weew" "2143545656547657665623"))
	)
)

(do-test "test merge 4"
	(let ((a '#((1 3 -4) (2 10 -5) (0 -2 -3) (4 5 6 7) (9 2 1 -3) (-5 -3 -2) (10  -2 40) (30 9 18) (2 -2 34)))
		 (b '#((0 0 1) (-3 4 2) (2 10 -3) (5 6 2) (-7 4 2) (-3 -2 -7) (3 -2 10) (4 12 -7) (7 3 -2) (3 -3 3))))
	
		(and (equalp (merge 'vector (copy-seq a) (copy-seq b) #'> :key #'second)
			   '#((1 3 -4) (2 10 -5) (0 0 1) (-3 4 2) (2 10 -3) (5 6 2) (-7 4 2) (0 -2 -3) (4 5 6 7) (9 2 1 -3) 
					 (-3 -2 -7) (3 -2 10) (4 12 -7) (7 3 -2) (-5 -3 -2) (10  -2 40) (30 9 18) (2 -2 34) (3 -3 3)))

			(equalp (merge 'vector (copy-seq a) (copy-seq b) #'> :key #'third)
			   '#((0 0 1) (-3 4 2) (2 10 -3) (5 6 2) (-7 4 2) (1 3 -4) (2 10 -5) (0 -2 -3) (4 5 6 7) (9 2 1 -3) 
					 (-5 -3 -2) (10  -2 40) (30 9 18) (2 -2 34) (-3 -2 -7) (3 -2 10) (4 12 -7) (7 3 -2) (3 -3 3)))

			(equal (merge 'list a b #'< :key #'car)
				  '( (0 0 1) (-3 4 2) (1 3 -4) (2 10 -5) (0 -2 -3) (2 10 -3) (4 5 6 7) (5 6 2) (-7 4 2) (-3 -2 -7) (3 -2 10) 
					(4 12 -7) (7 3 -2) (3 -3 3) (9 2 1 -3) (-5 -3 -2) (10  -2 40) (30 9 18) (2 -2 34)))
		)
	)
)
STOP

			