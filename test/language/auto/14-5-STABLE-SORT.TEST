;; Function To Be Tested: stable-sort
;;
;; Source:        CLtL    Section 14.5: Sorting and Merging        Page: 258
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: Oct. 2 ,1986
;;
;; Last Update:   Oct. 2 ,1986
;;
;; Filed As:      {eris}<lispcore>cml>test>14-5-stable-sort.test
;;
;;
;; Syntax:                stable-sort 	SEQUENCE PREDICATE &KEY :KEY
;;
;; Function Description:  The SEQUENCE is destructively sorted according to and order determined by the PREDICATE.
;;					stable-sort guarantees stability.  For detailed funtion description, please read page 258-259 of CLtL
;;
;; Argument(s):           SEQUENCE  -
;;					PREDICATE - a function which takes two arguments.
;;					:KEY      - a function of one argument that will extract from an element the part to be tested in place
;;							  of the whole element
;;
;; Returns:               a sequence    
;;
(do-test "test stable-sort  - test cases copied from page 260 of CLtL"

	(let (( foovector (vector '("Tokens" "The Lion Sleeps Tonight") '("Carpenters" "Close to You") 
						'("Rolling Stones" "Brown Sugar")
				 		 '("Beach Boys" "I Get Around") '("Mozart" "Eine Kleine Nachtmusik" (K 525))
				 		 '("Beatles" "I Want to Hold Your Hand"))  ))

		(setq foovector (stable-sort foovector #'string-lessp :key #'car))
		(equalp foovector (vector '("Beach Boys" "I Get Around") '("Beatles" "I Want to Hold Your Hand")
							'("Carpenters" "Close to You") '("Mozart" "Eine Kleine Nachtmusik" (K 525))
							'("Rolling Stones" "Brown Sugar") '("Tokens" "The Lion Sleeps Tonight") ))
	)
)

(do-test "test stable-sort 1"
	
	(let ((a "qazwsxedcrfvtgbyhnujmikolpPLOKIUJMYHNTGBRFVEDCXZSAQW" ))
		(and 
			(equal (stable-sort (copy-seq a) #'char<) "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")
			(equal (stable-sort (copy-seq a) #'char-lessp) "aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ")
			(equal (stable-sort (copy-seq a) #'char>) "zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA")
			(equal (stable-sort (copy-seq a) #'char-greaterp) "zZyYxXwWvVuUtTsSrRqQpPoOnNmMlLkKjJiIhHgGfFeEdDcCbBaA")
		)
	)
)

(do-test "test stable-sort 2"

	(let ((a '("should" "sequences" "sort" "two" "already" "sense" "argument" "sun" "second" "fourth" "nin" "who") ))
		;;
		;;      6           9        4      3      7        5         8         3       6         6     3     3
		(and
			(equal (stable-sort (copy-seq a) #'> :key #'length)
			      '( "sequences" "argument" "already"  "should" "second" "fourth" "sense" "sort" "two" "sun" "nin" "who"))

			(equal (stable-sort (copy-seq a) #'char> :key #'(lambda (x) (elt x 1)))
				 '("two" "sun" "argument" "sort" "fourth" "already" "nin" "should" "who" "sequences"  "sense"  "second"))

			(equal (stable-sort (copy-seq a) #'char< :key #'(lambda (x) (elt x 2)))
				 '("second" "argument" "sense" "sun" "nin" "should" "two" "who"  "sequences" "sort" "already" "fourth" ))

			(equal (stable-sort (copy-seq a) #'char< :key #'(lambda (x) (elt (reverse x) 0)))
				 '("should" "second" "sense" "fourth" "sun" "nin" "two" "who" "sequences" "sort" "argument" "already" ))

		)
	)
) 

(do-test "test stable-sort 3"
	(let ((a '( 2.4  5.9  20  10.0  18.3  18.6  22.1  0.9  1.31   8.67  3.41  2.9  100.2  35.2  29.5  30  60  18.15) ) b)
		;;
		;; +    6    14   20   10    21    24    23    9    4.1  14.7   7.1   11  102    37    34   30  60    19.5
		;; -    -2   -4   20   10    15    12    21   -9   -2.1   1.3  -1.1   -7   98    33    24   30  60    16.5
		;; *    8    45    0    0    54   104    22    0    3.1  53.6  12.3   18  200    70    145   0   0    27
		;;
		(and 	(equal (stable-sort (copy-seq a) #'(lambda (x y) (> (apply #'+ x) (apply #'+ y))) 
									  :key #'(lambda (x ) (list (setq b (truncate x)) (* 10 (- x b)))))
			       '(100.2 60 35.2  29.5 30 18.6  22.1 18.3 20 18.15 8.67 5.9  2.9 10.0 0.9 3.41 2.4 1.31 ))

			(equal (stable-sort (copy-seq a) #'(lambda (x y) (< (apply #'- x) (apply #'- y))) 
									  :key #'(lambda (x ) (list (setq b (truncate x)) (* 10 (- x b)))))
				  '(0.9 2.9  5.9 1.31 2.4 3.41 8.67 10.0 18.6 18.3 18.15 20  22.1 29.5 30 35.2 60 100.2  ))

			(equal  (stable-sort (copy-seq a) #'(lambda (x y) (> (apply #'* x) (apply #'* y)))
				  					  :key #'(lambda (x ) (list (setq b (truncate x)) (* 10 (- x b)))))
				  '(100.2 29.5  18.6 35.2 18.3 8.67  5.9  18.15 22.1 2.9  3.41 2.4 1.31 20  10.0  0.9 30  60 ))
		)
	)
)
STOP

			

