;; Function To Be Tested: CAAADR
;;
;; Source:        Steele's book    Section 15.1: Conses        Page: 263
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: July 17 ,1986
;;
;; Last Update:   July 17 ,1986
;;
;; Filed As:      {eris}<lispcore>cml>test>15-1-caaadr.test
;;
;;
;; Syntax:                CAAADR LIST
;;
;; Function Description:  (CAAADR LIST) is equivalent to (CAR (CAR (CAR (CDR LIST))))
;;
;; Argument(s):           LIST - a list
;;
;; Returns:               anything    
;;


(defun mac (list elm)
	 (typecase  elm (number           (=     (caaadr list) elm))
		        ((or cons string) (equal (caaadr list) elm))
			(t                (eq    (caaadr list) elm))
	) 
)

(do-test "test caaadr0"
    (prog2
	(and (mac '(0 ((1)) 2 ) 1)
		(mac '(b ((1 . 2) 3 . 4) a) 1)
		(mac '(-1 ((( 1 2) 3 4) 5) 6 7 8 9) '(1 2))
		(mac '((0 . z) ( ((1 . 100) a)) (2 b) (3 c)) '(1 . 100))
		(mac '(#\q ( ((#\a)) (( b))) ((c)) d)  '(#\a))
		(mac '(foo0 (( ((foo1) foo2))) ((foo3) bar3) (foo4 (bar4)) (((foo5 bar5)))) '((foo1) foo2))
		(mac '((t) ((((((((( t )))))))))) '((((((( t)))))))  )
		(mac '(listen (("excitint" "vacations") "to" |HAWAII| |Mexico| (the Pacific Northwest) ((and)) (the . Orient)))
		     "excitint")
		(mac '((#\w) ((#\F) #\o "o1") "foo2" ((foo3)) (foo4 . foo5)) #\F ) 
		(mac '("heading" (("the weather in January" ("is usually clear and sunny")) "with temperatures usually in the " fifties)
				(in the day time) (and ) (the "20's" at night)) 
               "the weather in January"   )
	))
)

(do-test "test caaadr1"
    (progn (setq a (list #'+ (list (list #'null  #'oddp)) (list #'list #'max #'min #'evenp) #'(lambda (x) (* 100 x))))
		 (equal (mapcar (caaadr a) (mapcar #'caaadr '( (nil (()))  (5 ((1 2) 3 ) 4) (t (((#\a #\b #\c))) ((#\d) #\e #\f)) ) )) 
			   '(t nil nil))
	)
)

(do-test "test caaadr2"
    (let ((aa '(0 (((-1 ((( -2 ((((1 2) 3 4) 5 6)) 7 8) 9 10)) 11 12) 13 14))   ((((((1 2) 3 4) 5 6) 7 8) 9 10) 11 12) )  ))
		(and (equal (caaadr aa) '(-1 (((-2 ((((1 2) 3 4) 5 6)) 7 8) 9 10)) 11 12))
			(equal (caaadr (caaadr aa)) '(-2 ((((1 2) 3 4) 5 6)) 7 8) )
			(equal (caaadr (caaadr (caaadr aa))) '((1 2) 3 4) )
		)
	)
)

(do-test "test caaadr3"	
	(progn (setq aa '(z ((a) b) c d )  )
		(and 
			(setf (caaadr aa) '(2 (( 4) 8))  )
			(equal aa `(z ((   (2 (( 4) 8))  ) b) c d )  )
			(setf (caaadr (caaadr aa)) '(1 ((3)) 9))
			(equal aa `(z ((  (2 ((  (1 ((3)) 9)   ) 8))  ) b) c d ))
			(setf (caaadr(caaadr (caaadr aa))) "magic kingdom")
			(equal aa `(z (( (2 ((  (1 (("magic kingdom")) 9)   ) 8))  ) b) c d ))
		)
	)
)
STOP
