;; Function To Be Tested: CAAAR
;;
;; Source:        Steele's book    Section 15.1: Conses        Page: 263
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: July 14 ,1986
;;
;; Last Update:   July 14 ,1986
;;
;; Filed As:      {eris}<lispcore>cml>test>15-1-caaar.test
;;
;;
;; Syntax:                CAAAR LIST
;;
;; Function Description:  (CAAAR LIST) is equivalent to (CAR (CAR (CAR LIST)))
;;
;; Argument(s):           LIST - a list
;;
;; Returns:               anything    
;;

(defun mac (list elm)
	 (typecase  elm (number           (=     (caaar list) elm))
		        ((or cons string) (equal (caaar list) elm))
			(t                (eq    (caaar list) elm))
	) 
)

(do-test "test caaar0"
    (prog1
	(and (mac '(((1)) 2 ) 1)
		(mac '(((1 . 2) 3 . 4) a) 1)
		(mac '(((( 1 2) 3 4) 5) 6 7 8 9) '(1 2))
		(mac '(( ((1 . 100) a)) (2 b) (3 c)) '(1 . 100))
		(mac '(( ((#\a)) (( b))) ((c)) d)  '(#\a))
		(mac '((( ((foo1) foo2))) ((foo3) bar3) (foo4 (bar4)) (((foo5 bar5)))) '((foo1) foo2))
		(mac '(((((((((( t )))))))))) '((((((( t)))))))  )
		(mac '( (("excitint" "vacations") "to" |HAWAII| |Mexico| (the Pacific Northwest) ((and)) (the . Orient)))
		     "excitint")
		(mac '(((#\F) #\o "o1") "foo2" ((foo3)) (foo4 . foo5)) #\F ) 
		(mac '((("the weather in January" ("is usually clear and sunny")) "with temperatures usually in the " fifties)
				(in the day time) (and ) (the "20's" at night)) 
               "the weather in January"   )
	))
)

(do-test "test caaar1"
    (progn (setq a (list (list (list #'null  #'oddp)) (list #'list #'max #'min #'evenp) #'(lambda (x) (* 100 x))))
		 (equal (mapcar (caaar a) (mapcar #'caaar '( ((()))  (((1 2) 3 ) 4) ((((#\a #\b #\c))) ((#\d) #\e #\f)) ) )) 
			   '(t nil nil))
	)
)

(do-test "test caaar2"
    (let ((aa '(((((((((((1 2) 3 4) 5 6)) 7 8) 9 10)) 11 12) 13 14))   ((((((1 2) 3 4) 5 6) 7 8) 9 10) 11 12) )  ))
		(and (equal (caaar aa) '((((((((1 2) 3 4) 5 6)) 7 8) 9 10)) 11 12))
			(equal (caaar (caaar aa)) '(((((1 2) 3 4) 5 6)) 7 8) )
			(equal (caaar (caaar (caaar aa))) '((1 2) 3 4) )
		)
	)
)

(do-test "test caaar3"	
	(progn (setq aa '(((a) b) c d )  )
		(and 
			(setf (caaar aa) (make-list 2 :initial-element '((2) 4)))
			(equal aa `((( (((2) 4)  ((2) 4))  ) b) c d )  )
			(setf (caaar (caaar aa)) '(((3)) 9)  )
			(equal aa `((( ((( (((3)) 9) ) 4)  (( (((3)) 9)) 4))  ) b) c d ))
			(setf (caaar(caaar (caaar aa))) "magic kingdom")
			(equal aa `((( ((( ((("magic kingdom")) 9) ) 4)  ((((("magic kingdom")) 9)) 4))) b) c d ))
		)
	)
)
STOP
