;; Function To Be Tested: CADAR
;;
;; Source:        Steele's book    Section 15.1: Conses        Page: 263
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: July 16 ,1986
;;
;; Last Update:   July 16 ,1986
;;
;; Filed As:      {eris}<lispcore>cml>test>15-1-cadar.test
;;
;;
;; Syntax:                CADAR LIST
;;
;; Function Description:  CADAR is equivalent to (CAR (CDR (CAR LIST))).
;;
;; Argument(s):           LIST - a list
;;
;; Returns:               anything    
;;
(defun mac (list elm)
	 (typecase  elm (number           (=     (cadar list) elm))
		        ((or cons string) (equal (cadar list) elm))
			(t                (eq    (cadar list) elm))
	) 
)
(do-test "test cadar0"
    (prog1
	(and (mac '((1 ((9))) 2 ) '((9)))
		(mac '(((1 . 2) 3 . 4) a) 3)
		(mac '((( 1 2 3 4) 5) 6 7 8 9) 5)
		(mac '(( 1 a) (2 b) (3 c)) 'a)
		(mac '(( ((a)) (( b))) ((c)) d)  '(( b)))
		(mac '((foo bar) (foo1 . bar1) ((foo2 bar2)) ((foo3) bar3) (foo4 (bar4)) (((foo5 bar5)))) 
			'bar)
		(mac '(((((((((( t )))))))) tilt)) 'tilt  )
		(mac '( ("excitint" "vacations" "to" |HAWAII| |Mexico| (the Pacific Northwest) ((and)) (the . Orient)))
		     "vacations")
		(mac '((#\F) #\o "o1" "foo2" ((foo3)) (foo4 . foo5)) () ) 
		(mac '((("the weather in January" ("is usually clear and sunny")) "with temperatures usually in the " fifties)
				(in the day time) (and ) (the "20's" at night)) 
               "with temperatures usually in the " )
	))
)

(do-test "test cadar1"
    (progn (setq a (list (list* #'null  #'list-length #'min #'evenp  #'identity)))
		 (equal (mapcar (cadar a) (mapcar #'cadar '( ((a (((b))) )) ((1 nil) 3 4) ((#\a (#\b #\c)) ((#\d) #\e #\f)) ) )) 
			   '(1 0 2 ))
	)
)

(do-test "test cadar2"
    (let ((aa '((1 ((3 ((5 ((7 ((9 ((11 (13 14) )) )) )) )) )) )) ))
		(and (equal (cadar aa) '((3 ((5 ((7 ((9 ((11 (13 14) )) )) )) )) ))  )
			(equal (cadar (cadar aa)) '((5 ((7 ((9 ((11 (13 14) )) )) )) ))  )
			(equal (cadar (cadar (cadar aa))) '((7 ((9 ((11 (13 14) )) )) ))  )
			(equal (cadar (cadar (cadar (cadar aa)))) '((9 ((11 (13 14) )) ))  )
			(equal (cadar (cadar (cadar (cadar (cadar aa))))) '((11 (13 14) )) )
			(equal (cadar (cadar (cadar (cadar (cadar (cadar aa)))))) '(13 14) )
		)
	)
)

(do-test "test cadar3"	
	(progn (setq aa '((a b) c d ))
		(and 
			(setf (cadar aa) '(( #\g #\r #\i #\n)) )
			(equal aa `(( a (( #\g #\r #\i #\n)) ) c d ))
			(setf (cadar (cadar aa)) '((3 6) 9))
			(equal aa `(( a (( #\g ((3 6) 9) #\i #\n)) ) c d  ))
			(setf (cadar (cadar (cadar aa))) "magic kingdom")
			(equal aa `(( a (( #\g ((3 "magic kingdom") 9) #\i #\n)) )  c d  ))
		)
	)
)
;;
;;
STOP
