;; Function To Be Tested: cadddr-and-fourth
;;
;; Source:        Steele's book    Section : 15.1 & 15.2        Page: 263 & 266
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: July 2, 1986
;;
;; Last Update:   July 2, 1986
;;			   Oct  9, 1986 sye/ change ((1 . 2) . 3) to ((1 . 2 )) in "test fourth1"
;;
;; Filed As:      {eris}<lispcore>cml>test>15-1-cadddr-and-fourth.test
;;
;;
;; Syntax:                CADDDR   list
;;                        FOURTH list
;;
;; Function Description:  CADDDR & FOURTH both return the fourth element of list
;;
;; Argument(s):           list - a cons or ()
;;
;; Returns:               the fourth element of list
;;                        nil  - if list is ()    
;;


(do-test "test cadddr0"
	(and	(eq (cadddr ()) ())
		(eq (cadddr '(1)) ())
		(eq (cadddr '(a b)) ())
		(eq (cadddr '(a b c)) ())
		(eq (cadddr '(1 2 3 4)) 4)
		(equal (cadddr '((1) (2) (3) (4 5 6 . 7))) '(4 5 6 . 7))
		(equal (cadddr '("sunday" nil nil "monday" nil nil)) "monday")
		(=     (cadddr (cddddr '(1 2 3 4 5 6 7 8 9 10 11 12))) 8)
		(eq (cadddr '(|****| |%%%%| |????| |####| |^^^^^|)) '|####|)
		(equal (cadddr '(100 23 ((((5 6 4) 8 3) 1) .2) ((a . b) (c d e (f . g))) 'wild)) 
                 '((a . b) (c d e (f . g))))
	)
)

(defun fun (list elm)
	(typecase elm  (number           (=     (cadddr list) elm))
		       ((or cons string) (equal (cadddr list) elm))
		       (t                (eq    (cadddr list) elm))
	)
)

(do-test "test cadddr1"
	(prog1 
		(and (fun '(array (fixnum) "package" simple-vector 'cute-t) 'simple-vector)
			(fun (funcall #'append '((i)) '(((j))) '((1 . 2)) '(1 (2) ((3)) (((4 . 5)))) '(t nil))
				1)
			(fun '((+ 1 2) (1+ 9) (incf 100) (decf 1100) (defun fun () 'nil)) '(decf 1100))
			(fun  (progn (setq a (list nil nil #'evenp #'oddp #'atom))
					   (mapcar (cadddr a) '(4 5 6 7)))     t)
			(fun (cadddr (cadddr '(1 2 3 (10 20 30 (100 200 300 (1000 2000 3000 4000) 400) 40) 4))) 
				'(1000 2000 3000 4000))
		)
	)
) 

(do-test "test cadddr2"
	(progn (setq a '(aa bb cc dd ee ff))
		   (setf (cadddr a) '(1 2 3 4 5))
		   (setf (cadddr (cadddr a)) '(44 33 22 11))
		   (equal a '(aa bb cc (1 2 3 (44 33 22 11) 5) ee ff))))
;;
;; fourth should behave like cadddr
;;
(do-test "test fourth0"
	(and	(eq (fourth ()) ())
		(eq (fourth '(1)) ())
		(eq (fourth '(a b)) ())
		(eq (fourth '(a b c)) ())
		(eq (fourth '(1 2 3 4)) 4)
		(equal (fourth '((1) (2) (3) (4 5 6 . 7))) '(4 5 6 . 7))
		(equal (fourth '("sunday" nil nil "monday" nil nil)) "monday")
		(=     (fourth (cddddr '(1 2 3 4 5 6 7 8 9 10 11 12))) 8)
		(eq (fourth '(|****| |%%%%| |????| |####| |^^^^^|)) '|####|)
		(equal (fourth '(100 23 ((((5 6 4) 8 3) 1) .2) ((a . b) (c d e (f . g))) 'wild)) 
                 '((a . b) (c d e (f . g))))
	)
)
(defun fun (list elm)
	(typecase elm  (number           (= (fourth list) elm))
			((or cons string) (equal (fourth list) elm))
			(t                (eq (fourth list) elm))
	)
)
(do-test "test fourth1"
	(prog1 
		(and (fun '(array (fixnum) "package" simple-vector 'cute-t) 'simple-vector)
			(fun (funcall #'append '((i)) '(((j))) '((1 . 2)) '(1 (2) ((3)) (((4 . 5)))) '(t nil))
				1)
			(fun '((+ 1 2) (1+ 9) (incf 100) (decf 1100) (defun fun () 'nil)) '(decf 1100))
			(fun  (progn (setq a (list nil nil #'evenp #'oddp #'atom))
					   (mapcar (fourth a) '(4 5 6 7)))     t)
			(fun (fourth (fourth '(1 2 3 (10 20 30 (100 200 300 (1000 2000 3000 4000) 400) 40) 4))) 
				'(1000 2000 3000 4000))
		)
	)
) 

(do-test "test fourth2"
	(progn (setq a '(aa bb cc dd ee ff))
		   (setf (fourth a) '(1 2 3 4 5))
		   (setf (fourth (fourth a)) '(44 33 22 11))
		   (equal a '(aa bb cc (1 2 3 (44 33 22 11) 5) ee ff))))
STOP
