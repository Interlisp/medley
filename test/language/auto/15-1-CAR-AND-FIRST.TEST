;; Function To Be Tested: car-and-first
;;
;; Source:        Steele's book    Section : 15.1 & 15.2        Page: 262 & 266
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: June 13,1986
;;
;; Last Update:   June 17,1986 Sye/ add "test car4" and "test first4"
;;
;; Filed As:      {eris}<lispcore>cml>test>15-1-car-and-first.test
;;
;;
;; Syntax:                CAR   list
;;                        FIRST list
;;
;; Function Description:  CAR & FIRST both return the first element of list
;;
;; Argument(s):           list - a cons or ()
;;
;; Returns:               the first element of list
;;                        nil  - if list is ()    
;;

(do-test "test car1 - argument is ()"
   (eq (car ()) ()))

(do-test "test car2 - argument is a true list"
   (and (eq (car '(a b c)) 'a)
        (eq (car (make-list 4 :initial-element 'rah)) 'rah)
        (eq (car (list 1 2 3 4)) 1)
        (equal (car (car (car (car (car '((((((3 4))))) 2 1))))))  (car '((3 4))))
        (eq (car (multiple-value-list (values #\1 #\2 #\3))) #\1)
        ; create a proper list
        (progn (setq aa 10) (setf (symbol-plist 'aa) nil) (setf (get 'aa 'value) 100))
        (eq (car (symbol-plist 'aa)) 'value)
        ;
        (equal (car '((a b c d (e f (g h i j)) (k l m)) o p q r (s t))) '(a b c d (e f (g h i j)) (k l m)))
        ;
        ; push a function def to a variable
        (progn (setq a ()) (push  (function +) a))
        (= (funcall (car a) 1 2 3 4 5) (/ (* 5 6) 2))))

(do-test "test car3 - argument is a dotted list"
   (and (eq (car '(1 . 2)) 1)
        (equal (car '((a 1 2 3 9 8 7 . b) c d e f)) '(a 1 2 3 9 8 7 . b))
        (eq (car (cons nil 100)) nil)
        (eq (car (car (list (cons 5 6)))) 5)))

(do-test "test car4 - the car of a cons may be altered by using rplaca or setf"
    (let ((a (list 11 22 33 44)))
         (and (eq (car a) 11)
	         (setf (car a) 1111)
		    (eq (car a) 1111)
               (setf (car (cddr a)) 3333)
               (eq (car (cddr a)) 3333)
              (rplaca a '(8 9))
              (equal (car a) '(8 9))
              (equal a '((8 9) 22 3333 44)))))

;
; Function "first" should behave the same as "car"
; The following test cases are the duplicates of the above ones, except the function "car" was replaced by "first"
;

(do-test "test first1 - argument is ()"
   (eq (first ()) ()))

(do-test "test first2 - argument is a true list"
   (and (eq (first '(a b c)) 'a)
        (eq (first (make-list 4 :initial-element 'rah)) 'rah)
        (eq (first (list 1 2 3 4)) 1)
        (equal (first (first (first (first (first '((((((3 4))))) 2 1))))))  (first '((3 4))))
        (eq (first (multiple-value-list (values #\1 #\2 #\3))) #\1)
        ; create a proper list
        (progn (setq aa 10) (setf (get 'aa 'value) 100))
        (eq (first (symbol-plist 'aa)) 'value)
        ;
        (equal (first '((a b c d (e f (g h i j)) (k l m)) o p q r (s t))) '(a b c d (e f (g h i j)) (k l m)))
        ;
        ; push a function def to a variable
        (progn (setq a ()) (push  (function +) a))
        (= (funcall (first a) 1 2 3 4 5) (/ (* 5 6) 2))))

(do-test "test first3 - argument is a dotted list"
   (and (eq (first '(1 . 2)) 1)
        (equal (first '((a 1 2 3 9 8 7 . b) c d e f)) '(a 1 2 3 9 8 7 . b))
        (eq (first (cons nil 100)) nil)
        (eq (first (first (list (cons 5 6)))) 5)))

(do-test "test first4 - the first of a cons may be altered by using rplaca or setf"
    (let ((a (list 11 22 33 44)))
         (and (eq (first a) 11)
	         (setf (first a) 1111)
		    (eq (first a) 1111)
               (setf (first (cddr a)) 3333)
               (eq (first (cddr a)) 3333)
              (rplaca a '(8 9))
              (equal (first a) '(8 9))
               (equal a '((8 9) 22 3333 44)))))
;;
;;
STOP
        


