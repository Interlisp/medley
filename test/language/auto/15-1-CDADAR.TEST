;; Function To Be Tested: CDADAR
;;
;; Source:        Steele's book    Section 15.1: Conses        Page: 263
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: July 22 ,1986
;;
;; Last Updadate:  July 22 ,1986
;;
;; Filed As:      {eris}<lispcore>cml>test>15-1-cdadar.test
;;
;;
;; Syntax:                CDADAR LIST
;;
;; Function Description:  (CDADAR LIST) is equivalent to (CDR (CAR (CDR (CAR LIST))))
;;
;; Argument(s):           LIST - a list
;;
;; Returns:               anything    
;;

(defun mac (list elm)
	 (typecase  elm (number           (=     (cdadar list) elm))
		        ((or cons string) (equal (cdadar list) elm))
			(t                (eq    (cdadar list) elm))
	) 
)
(do-test "test cdadar0"
    (prog1
	(and (mac '((30 (1)) 2 ) ())
		(mac '((((u)) ((1 . 2) 3 . 4)) a) '(3 . 4))
		(mac '((10 (( 1 2 3 4) 5) 6) 7 8 9) '(5))
		(mac '(((0 z) ( 1 a) (2 b)) (3 c)) '(a))
		(mac '(("e" ( ((a)) (( b))) ((c)) d))  '((( b))))
		(mac '(('foo0 (foo bar) (foo1 . bar1)) ((foo2 bar2)) ((foo3) bar3) (foo4 (bar4)) (((foo5 bar5)))) 
			'(bar))
		(mac '((nil ((((((((( t ))))))))))) ()  )
		(mac '( ("china" ("excitint" "vacations" "to" |HAWAII| |Mexico| (the Pacific Northwest) ((and)) (the . Orient))))
		     '("vacations" "to" |HAWAII| |Mexico| (the Pacific Northwest) ((and)) (the . Orient)))
		(mac '((#\% (#\F) #\o) "o1" "foo2" ((foo3)) (foo4 . foo5)) () ) 
		(mac '(("bomb" (("the weather in January" ("is usually clear and sunny")) "with temperatures usually in the " fifties))
				(in the daday time) (and ) (the "20's" at night)) 
               '("with temperatures usually in the " fifties)   )
	))
)

(do-test "test cdadar1"
    (progn (setq a (list (list #'stringp (list #'null  #'identity)) (list #'list #'max #'min #'evenp) #'(lambda (x) (* 100 x))))
		 (equal (mapcar (car (cdadar a)) (mapcar #'cdadar '( ((5 ()))  (("hi" (1 2) 3) 4) ((#\@ (#\a #\b #\c)) ((#\d) #\e #\f)) ) )) 
			   '(() (2) (#\b #\c) ))
	)
)

(do-test "test cdadar2"
    (let ((aa '((0 (1 (2 (3 (4 (5 (6 (7 (8 (9 (10 (11 (12 (13 14))))))))))))))   ((((((1 2) 3 4) 5 6) 7 8) 9 10) 11 12) )  ))
		(and (equal (cdadar aa) '((2 (3 (4 (5 (6 (7 (8  (9 (10 (11 (12 (13 14))))))))))))))
			(equal (cdadar (cdadar aa)) '(( 4 (5 (6 (7 (8 (9 (10 (11 (12 (13 14))))))))) )))
			(equal (cdadar (cdadar (cdadar aa))) '((6 (7 (8 (9 (10 (11 (12 (13 14))))))))))
			(equal (cdadar (cdadar (cdadar (cdadar aa)))) '((8 (9 (10 (11 (12 (13 14))))))))
			(equal (cdadar (cdadar (cdadar (cdadar (cdadar aa))))) '((10 (11 (12 (13 14))))))
			(equal (cdadar (cdadar (cdadar (cdadar (cdadar (cdadar aa)))))) '((12 (13 14))))
			(equal (cdadar (cdadar (cdadar (cdadar (cdadar (cdadar (cdadar aa))))))) '(14))
		)
	)
)

(do-test "test cdadar3"	
	(progn (setq aa '((Q (a b) c) d ))
		(and 
			(setf (cdadar aa) '((8 (88 99 77))) )
			(equal aa `((Q ( a   (8 (88 99 77))   ) c) d ))
			(setf (cdadar (cdadar aa)) '((9 (3 6)) 9))
			(equal aa `((Q ( a   (8 (88 (9 (3 6)) 9))   ) c) d  ))
			(setf (cdadar (cdadar (cdadar aa))) "magic kingdom")
			(equal aa `((Q ( a   (8 (88 (9 (3 . "magic kingdom")) 9))   ) c) d  ))
		)
	)
)
STOP

