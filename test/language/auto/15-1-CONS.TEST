;; Function To Be Tested: cons
;;
;; Source:        Steele's book    Section 15.1: conses        Page: 264
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: June 20,1986
;;
;; Last Update:   June 20,1986
;;
;; Filed As:      {eris}<lispcore>cml>test>15-1-cons.test
;;
;;
;; Syntax:                CONS x y
;;
;; Function Description:  CONS creates a new cons whose car is x and whose cdr is y
;;
;; Argument(s):           x y - a lisp object
;;
;; Returns:               cons or conses    
;;
(do-test "test cons0 - test  cases copied from page 264 of CLtL"
    (and (equal (cons 'a 'b) '(a . b))
         (equal (cons 'a (cons 'b (cons 'c '()))) '(a b c))
         (equal (cons 'a '(b c d)) '(a b c d))))

(do-test "test cons1 - one of the arguments is nil"
    (and (equal (cons 1 nil) '(1))
         (equal (cons nil 1) '(nil . 1))
         (equal (cons nil nil) '(nil . nil))
         (equal (cons t nil) '(t))))

(do-test "test cons2 - a really long nested cons"
    (equal (setq longcons (cons 1 (cons 2 (cons 3 (cons 4 (cons 5 (cons 6 (cons 7 (cons 8 (cons 9 (cons 10 
                  (cons 'a (cons 'b (cons 'c 
                  (cons 'd (cons 'e (cons 'f (cons 'g (cons 'h (cons 'i (cons 'j (cons 'k (cons 'l (cons 'm 
                  (cons 'n (cons 'o (cons 'p (cons 'q (cons 'r (cons 's (cons 't (cons 'u (cons 'v (cons 'w (cons 'x (cons 'y 
                  (cons 'z (cons #\a (cons #\b (cons #\c #\d))))))))))))))))))))))))))))))))))))))))
          '(1 2 3 4 5 6 7 8 9 10 a b c d e f g h i j k l m n o p q r s t u v w x y z #\a #\b #\c . #\d)))

(do-test "test cons3"
    (equal (cons longcons (cons longcons (cons longcons (cons longcons longcons))))
           '( (1 2 3 4 5 6 7 8 9 10 a b c d e f g h i j k l m n o p q r s t u v w x y z #\a #\b #\c . #\d)
              (1 2 3 4 5 6 7 8 9 10 a b c d e f g h i j k l m n o p q r s t u v w x y z #\a #\b #\c . #\d) 
		    (1 2 3 4 5 6 7 8 9 10 a b c d e f g h i j k l m n o p q r s t u v w x y z #\a #\b #\c . #\d)
		    (1 2 3 4 5 6 7 8 9 10 a b c d e f g h i j k l m n o p q r s t u v w x y z #\a #\b #\c . #\d)
               1 2 3 4 5 6 7 8 9 10 a b c d e f g h i j k l m n o p q r s t u v w x y z #\a #\b #\c . #\d)))

(do-test "test cons4"
    (equal (cons "great" (cons "gray" (cons "owl" (cons "perched" (cons "in" (cons "an" (cons "aspen" ".")))))))
          '("great" "gray" "owl" "perched" "in" "an" "aspen" . ".")))

(do-test "test cons5"
    (and (setq a (cons #'(lambda (x) (1+ x))  (cons #'(lambda (y) (1- y))  (cons #'(lambda (z) (* 2 z)) 
                 (cons #'(lambda (x) (* x x)) nil)))))
         (= (funcall (cadr a) 10) 9)
         (= (funcall (car (last a)) 10) 100)
         (= (funcall (nth 2 a) 2) 4)
         (= (list-length a) 4)))

(do-test "test cons6"
    (equal (cons 1000 (cons 20000 (cons 399999 (cons 4777777 (cons 5111111 (cons 60000000 (cons 76666666 (cons 833232323223
           (cons 922222 (cons 13333333 2888888))))))))))
          '(1000 20000 399999 4777777 5111111 60000000 76666666 833232323223 922222 13333333 . 2888888)))
;;
;;
STOP

    
    