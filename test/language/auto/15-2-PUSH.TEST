;; Function To Be Tested: PUSH
;;
;; Source: Guy L Steele's CLTL
;; Section: 15.2 Lists
;; Page: 269
;;
;; Created By:    Kelly Roach
;;
;; Creation Date: June 27,1986
;;
;; Last Update:   June 27,1986
;;		        July 1, 1986  Sye/ Create test cases
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>15-2-PUSH.TEST
;;
;;
;; Syntax:        (PUSH ITEM PLACE)
;;
;; Function Description:
;; The form PLACE should be the name of a generalized variable containing a list;
;; ITEM may refer to any Lisp object.  The ITEM is consed onto the front of the list, and the
;; augmented list is stored back into PLACE and returned.  The form PLACE may be any form acceptable
;; as a generalized variable to SETF.  If the list held in PLACE is viewed as a push-down stack, 
;; then PUSH pushes an element onto the top of the stack.
;;
;; 
;; Argument(s):   ITEM - anything
;;                PLACE - a list
;;
;; Returns:       a list
;;

(do-test "test push - test cases copied from page 270 of CLtL"
   (progn (setq x '(a (b c) d ))
		(and (equal (push 5 (cadr x)) '(5 b c))
			(equal x '(a (5 b c) d))
		)))

(do-test "test push - PLACE should be a generalized variable containing a list"	
	(progn (setf a '() b '(1 2 3) c '(1 2 3 (4 5 6) 7 8 9) d '(volume 10 weight 20 height 30))
		  (and (equal (push t a) '(t))
			  (equal a '(t))
		   	  (equal (push t  (cdr a)) '(t))
			  (equal a '(t t))
			  ;
			  (equal (push 100 (rest b)) '(100 2 3))
			  (equal b '(1 100 2 3))
			  (equal (push 200 (first b)) '(200 . 1))
			  (equal b '((200 . 1) 100 2 3))
			  ;
			  (equal (push 700 (fifth c)) '(700 . 7))
			  (equal c '(1 2 3 (4 5 6) (700 . 7) 8 9))
			  (equal (push "toy" (cadddr c)) '("toy" 4 5 6))
			  (equal (nth 3 c) '("toy" 4 5 6))
			  (equal (push '(88 . 99) (cdddr (cdddr c))) '((88 . 99) 9))
			  (equal c '(1 2 3 ("toy" 4 5 6) (700 . 7) 8 (88 . 99) 9))
			  ;
			  (equal (push '25 (cddr d)) '(25 weight 20 height 30))
			  (equal (push 'width (cddr d)) '(width 25 weight 20 height 30))
			  (equal d '(volume 10 width 25 weight 20 height 30))
            )
	)
)

(do-test "test push - ITEM may refer to any Lisp object"
   (and

	(progn (setf list '(1 2 3 4 5 6 7 8 9 10 11 12))
 		  (push "flip a coin" (cddddr (cddddr (cddddr list))))
		  (push '| a symbol with a long name | (cddr (cddddr (cddddr list))))
		  (push #\*  (cddddr (cddddr list)))
		  (push (1+ 99) (cddr (cddddr list)))
		  (push  #30r20 (cddddr list))
		  (push (make-list 5 :initial-element 'rah) (cddr list))
		  (push t (first list))
		  (equal list '((t . 1) 2 (rah rah rah rah rah) 3 4 60 5 6 100 7 8 #\* 9 10 | a symbol with a long name | 
			            11 12 "flip a coin") )  )
	;;
	(progn (setf list ())
		  (push #'* list) (push #'evenp list) (push #'list* list)
		  (push #'(lambda (x y z) (* x y z)) list)  (push #'null list)
		  (and (eq (funcall (car list) t) nil)
			  (=   (apply (nth 1 list) 2 3 '(4))  24)
			  (equal  (funcall (caddr list) 1 2 3)  '(1 2 . 3))
			  (eq     (every (fourth list) '(2 4 6 8 10))  t)
			  (equalp (apply (car (last list)) '(2 3 10)) 60.000)
		  ))
     ;;
     (progn (setf list () var1 10 var2 'a)
		  (push 'var1 list) (push 'var2 list)
		  (and (= (symbol-value (nth 1 list)) 10)
			  (eq (symbol-value (nth 0 list)) 'a)
		  ))
			  
	))
STOP
	