;; Function To Be Tested: SEVENTH
;;
;; Source: Guy L Steele's CLTL
;; Section: 15.2 Lists
;; Page: 266
;;
;; Created By:    Kelly Roach
;;
;; Creation Date: June 27,1986
;;
;; Last Update:   June 27,1986
;;                July 5 ,1986  Sye / create test cases
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>15-2-SEVENTH.TEST
;;
;;
;; Syntax:        (SEVENTH LIST)
;;
;; Function Description:
;; These functions are sometimes convenient for accessing particular
;; elements of a list.  FIRST is the same as function CAR,
;; SECOND is the same as CADR, THIRD is the
;; same as CADDR, and so on.
;; Note that the ordinal numbering used here is one-origin,
;; as opposed to the zero-origin numbering used by function NTH:
;; 
;;     (FIFTH X) = (NTH 4 X)
;;     
;; 
;; macro SETF may be used with each of these functions to store
;; into the indicated position of a list.
;; 
;; Argument(s):   LIST - a list
;;
;; Returns:       anything
;;

(do-test "test seventh0"
    (prog2
		(defmacro mac (list elm)
			`(typecase ,elm (number           (= (seventh ,list) ,elm))
						 ((or cons string) (equal (seventh ,list) ,elm))
						 (t                (eq (seventh ,list) ,elm))
			) 
		)
	(and (mac () ())
		(mac '(1) ())
		(mac '(1 2) ())
		(mac '(1 2 3) ())
		(mac '(1 2 3 4) ())
		(mac '(1 2 3 4 5) ())
		(mac '(1 2 3 4 5 6) ())
		(mac '(1 2 3 4 5 6 7) 7)
		(mac '(1 2 3 4 5 6 7 8) 7)
		(mac '(1 2.0 3.3 4 5.5 6 7.00 8.005 9.999 10.001) 7.00)

		(mac '(nil nil nil t t (nil . t) non-nil (t . t) (t nil . t) ((t))) 'non-nil)

		(mac '(a b c (d e) (f g) "h" ((i) (((ip)))) (j k) (l . l) m  n o) '((i) (((ip)))) )

		(mac '((a b) ((c d) e f) (g (h) i) (j (k)) ((l m)n) 
			  ((o p) (q r) s) ((((t)))) (u v) ((w)) (x . y) ((y)) ((z))) '((((t)))) )

		(mac '(foo foo1 foo2 ((foo3)) (foo4 . foo5) 'foo #\F #\o "o1" "foo2") #\F)

		(mac '((foo bar) (foo1 . bar1) ((foo2 bar2)) ((foo3) bar3) (foo4 (bar4)) (((foo5 bar5)))
			  (foo6 bar6 gack6) "foo7-bar7" ("foo8" "bar8") (((('foo9))) (((('bar9)))) bar10)
                  nil t)      '(foo6 bar6 gack6) )

		(mac (append '(plus + (minus -) times *) '("excitint" "vacations" "to" 
			|Hawaii| |Mexico| (the Pacific Northwest) ((and)) (the . Orient)))
                "vacations" )
	)
))

(do-test "test seventh1"
	(progn (setq a (list #'= #'- #'* #'endp #'list #'max #'min #'evenp #'oddp 
				     #'(lambda (x) (* 100 x))))
		  (equal (mapcar (seventh a) '(2 10) '(3 5 100)) '(2 5))
	)
)

(do-test "test seventh2"
	(let ((aa '(1 2 3 4 5 6 (1 2 3 4 5 6 (1 2 3 4 5 6 (1 2 3 4 5 6 7 8 9 10 11 12) 
				   7 8 9 10 11 12) 7 8 9 10 11 12) 7 8 9 10 11 12)))
		(and 
			(equal (seventh aa) '(1 2 3 4 5 6 (1 2 3 4 5 6 (1 2 3 4 5 6 7 8 9 10 11 12) 
				       		 7 8 9 10 11 12) 7 8 9 10 11 12))
			(equal (seventh (seventh aa)) '(1 2 3 4 5 6 (1 2 3 4 5 6 7 8 9 10 11 12)  7 8 9 10 11 12))
			(equal (seventh (seventh (seventh aa))) '(1 2 3 4 5 6 7 8 9 10 11 12))
			(eq (seventh (seventh (seventh (seventh aa)))) 7)
		)
	)
)

(do-test "test seventh3"
	(let ((aa (list 'a 'b 'c 'd 'e 'f 'g 'h 'i 'j 'k 'l 'm)))
          (setf (seventh aa) (make-list 15))
		(setf (seventh (seventh aa)) (make-list 15 :initial-element 'rah))
		(setf (seventh(seventh (seventh aa))) "magic kingdom")
		(equal aa '(a b c d e f (nil nil nil nil nil nil (rah rah rah rah rah rah "magic kingdom" rah rah rah rah rah rah
			       rah rah) nil nil nil nil nil nil nil nil) h  i j k l m))
	)
)
;;
;;
STOP
