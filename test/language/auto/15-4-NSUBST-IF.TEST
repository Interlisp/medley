;; Function To Be Tested: NSUBST-IF
;;
;; Source: Guy L Steele's CLTL
;; Section: 15.4 Substitution of Expressions
;; Page: 274
;;
;; Created By:    Kelly Roach ; Karin M. Sye
;;
;; Creation Date: June 27,1986
;;
;; Last Update:   Aug. 14,1986
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>15-4-NSUBST-IF.TEST
;;
;;
;; Syntax:        (NSUBST-IF NEW TEST TREE &KEY KEY)
;;
;; Function Description:
;; NSUBST is a destructive version of SUBST.  The list structure of
;; TREE is altered by destructively replacing with NEW
;; each leaf of the TREE such that OLD and the leaf
;; satisfy the test.
;; 
;; Argument(s):   NEW - anything
;;                TEST - a function
;;                TREE - a tree
;;                KEY - a function
;;
;; Returns:       a tree
;;

(do-test "test nsubst-if 1"
	(and	 (prog2 	(setq a '(10 20 (10.0) (10 . 10.0) 100 30 (10) . 10) aa (copy-tree a))
				(and 	(equal (nsubst-if 99.99 #'(lambda (x) (equalp x 10)) a) '(99.99 20 (99.99) (99.99 . 99.99) 100 30 (99.99) . 99.99))
					(equal (nsubst-if 99.99 #'(lambda (x) (eql x 10)) aa) '(99.99 20 (10.0) (99.99 . 10.0) 100 30 (99.99) . 99.99))
			     )
					
		)
		(prog2	(setq a '( (apple . orange) (banana) ((papaya) (tomato) mongo) watermelon . cantolope)  aa (copy-tree a) )
				(and	(equal (nsubst-if 'yummy #'null a) 
						  '( (apple . orange) (banana . yummy) ((papaya . yummy) (tomato . yummy) mongo . yummy) watermelon . cantolope) )
					(equal (nsubst-if t #'atom aa) 
						  '(( t . t) (t . t) ((t . t) (t . t) t . t) t . t)  )
				)
		)
		(prog2	(setq a '("string1" ("sTring" "string2") ((((( "string")))) "STRING") "string3" ("string" "string4") )
					 aa (copy-tree a) )
				(and 	(equal	(nsubst-if "bow" #'(lambda (x) (and (stringp x) (string= x "string")))  a)
						     '("string1" ("sTring" "string2") ((((( "bow")))) "STRING") "string3" ("bow" "string4")) )

					(equal	(nsubst-if "bow" #'(lambda (x) (and (stringp x) (string-equal x "string")))  aa)
						     '("string1" ("bow" "string2") ((((( "bow")))) "bow") "string3" ("bow" "string4")) )

				)
		)
	
		(prog2	(setq a '( (string . guitar) ((keyboard . organ) string . guitar) (string guitar (percussion . drum)) ))
				(equal	(nsubst-if '(string . harp) #'(lambda (x) (equal x '(string . guitar)))  a)
							'( (string . harp) ((keyboard . organ) string . harp) (string guitar (percussion . drum)) ))
		)

		(prog2	(setq a '( (1 2 3) (a b c) ( (w)  (q)  (i)) ))
				(equal (nsubst-if "poco ret." #'(lambda (x) (= (list-length x) 3)) a)
						  "poco ret.")
		)
	)
)

(do-test "test nsubst-if  - with :KEY keyword"
	(and
		;;(prog2	(setq a '( ("1" 2) (11 12) ("111" 212) (1111 2121) (111111 . 32112)) )
		;;		(equal	(nsubst-if "k" #'(lambda (x) (and (numberp x) (<= x 11110)))  a :key #'car)
		;;					'( ("1" . "k") "k" ("111" . "k") "k" (111111 . 32112)) )
		;;)
		(prog2	(setq a '( "To" ("all" ("those")) "who"  ("strive" "for") (("excellent"))))
				(equal   (nsubst-if (second '(last least)) #'(lambda (x) (and (stringp x) (find #\t x))) a :key #'identity)
							'("To" ("all" (least)) "who" (least "for") ((least))) )
		)
		(prog2	(setq a '( ("a" "c" (ace)) "spade" club ("c" "l" (u b) ("d" "i" (amod))  ((king) "queen") Jack)) )
				(equal 	(nsubst-if "*" #'(lambda (x) (and (listp x) (= (list-length x) 1))) a 
												  :key #'(lambda (x) (if (listp x) (third x) t)))
							'(  "*" "spade" club ("c" "l" (u b) "*"  ((king) "queen") Jack)) )
	
		)
		(prog2	(setq a '(10 23 34 23 100 2000 9))
				(eq 	(nsubst-if 'end-of-nsubst-if-test #'(lambda (x) (= (apply #'+ x) 2166)) a 
																:key #'(lambda (x) (nthcdr 2 x)))
						'end-of-nsubst-if-test)
		)
	)
)
STOP