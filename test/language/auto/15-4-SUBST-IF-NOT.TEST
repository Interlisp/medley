;; Function To Be Tested: SUBST-IF-NOT
;;
;; Source: Guy L Steele's CLTL
;; Section: 15.4 Substitution of Expressions
;; Page: 273
;;
;; Created By:    Kelly Roach
;;
;; Creation Date: June 27,1986
;;
;; Last Update:   Aug. 14,1986
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>15-4-SUBST-IF-NOT.TEST
;;
;;
;; Syntax:        (SUBST-IF-NOT NEW TEST TREE &KEY KEY)
;;
;; Function Description:
;; (SUBST NEW OLD TREE) makes a copy of TREE,
;; substituting NEW for every subtree or leaf of TREE
;; (whether the subtree or leaf is a CAR or a CDR of its parent)
;; such that OLD and the subtree or leaf satisfy the test.  It
;; returns the modified copy of TREE.  The original TREE is
;; unchanged, but the result tree may share with parts of the argument
;; TREE.
;; Compatibility note: In Maclisp, SUBST is guaranteed NOT to share with
;; the TREE argument, and the idiom (SUBST NIL NIL X) was
;; used to copy a tree X.  In Common Lisp, the function function COPY-TREE should
;; be used to copy a tree, as the SUBST idiom will not work.
;; For example:
;; 
;;     (SUBST 'TEMPEST 'HURRICANE
;; 
;;          '(SHAKESPEARE WROTE (THE HURRICANE)))
;;        => (SHAKESPEARE WROTE (THE TEMPEST))
;;     (SUBST 'FOO 'NIL '(SHAKESPEARE WROTE (TWELFTH NIGHT)))
;;        => (SHAKESPEARE WROTE (TWELFTH NIGHT . FOO) . FOO)
;;     (SUBST '(A . CONS) '(OLD . PAIR)
;;            '((OLD . SPICE) ((OLD . SHOES) OLD . PAIR) (OLD . PAIR))
;;            :TEST #'EQUAL)
;;        => ((OLD . SPICE) ((OLD . SHOES) A . CONS) (A . CONS))
;;     
;; This function is not destructive; that is, it does not change
;; the CAR or CDR of any already existing list structure.
;; One possible definition of SUBST:
;; 
;;     (DEFUN SUBST (OLD NEW TREE  X  TEST TEST-NOT KEY)
;;       (COND ((SATISFIES-THE-TEST OLD TREE :TEST TEST
;; 
;;   			     :TEST-NOT TEST-NOT :KEY KEY)
;;     	 NEW)
;;     	((ATOM TREE) TREE)
;;     	(T (LET ((A (APPLY #'SUBST OLD NEW (CAR TREE) X))
;;     		 (D (APPLY #'SUBST OLD NEW (CDR TREE) X)))
;;     	     (IF (AND (EQL A (CAR TREE))
;;     		      (EQL D (CDR TREE)))
;;     		 TREE
;;     		 (CONS A D))))))
;;     
;; See also function SUBSTITUTE, which substitutes for top-level elements
;; of a sequence.
;; 
;; Argument(s):   NEW - anything
;;                TEST - a function
;;                TREE - a tree
;;                KEY - a function
;;
;; Returns:       a tree
;;

(do-test "test subst-if-not 1"

	(and	(prog2	(setq a '(1 2 3 (3 2 1) ((2)) (3 (1))))
				(and (equal 	(subst-if-not 88 #'(lambda (x) (or (not (numberp x)) (not (eq x 2)))) a)
							'(1 88 3 (3 88 1) ((88)) (3 (1))  ))
					(equal a '(1 2 3 (3 2 1) ((2)) (3 (1))))
				)
		)
		(prog2	(setq a '("one" ("two" . "three") ("four") "five" "six" . "seven"))
				(and	(equal 	(subst-if-not 'gotchu #'(lambda (x) (or (not (stringp x)) (not (find #\r x)))) a)
							'("one" ("two" . gotchu) (gotchu) "five" "six" . "seven"))
					(equal a '("one" ("two" . "three") ("four") "five" "six" . "seven"))
				)
		)
		(prog2	(setq a '(10 13 12 (17 18) ((30 5) 31 4) 40 -5))
				(and	(equal	(subst-if-not "***" #'(lambda (x) (or (not (listp x) ) 
														  (some #'(lambda (x) (not (numberp x))) x) 
														  (/= (apply #'+ x) 35) )) a)
					'(10 13 12 "***" ("***" . "***") . "***"))
				)
		)
		(prog2	(setq a '())
				(and (equal (subst-if-not "April fool" #'consp a) 
						  "April fool")
					(equal a ())
				)
		)
	)
)

(do-test "test subst-if-not   -- with :KEY keyword"

	(and	(prog2	(setq a `("sleepy" (sneezy (doc bashful rabbit) jumpy) "grouchy" dopy snow white))
				(and	(equal (subst-if-not #\y #'stringp a :key #'(lambda (x) (if (and (listp x)
																	   (= (list-length x) 3))
																   (first x) "dummy" )))
						'("sleepy" #\y "grouchy" . #\y))
					(equal a `("sleepy" (sneezy (doc bashful rabbit) jumpy) "grouchy" dopy snow white))
				)
		)
		(prog2	(setq a '("sleepy" (sneezy (doc bashful rabbit) jumpy) "grouchy" dopy snow white))	
				(and 	(equal (subst-if-not '(foo) #'(lambda (x) (find #\s x :test #'char-equal)) a 
									:key #'(lambda (z)  (typecase z (string z)
															 (null "s")
														      (symbol (string z))
														      (t "s"))))
						'( "sleepy" (sneezy ( (foo) bashful (foo) )  (foo))  (foo) (foo) snow (foo)) )

					(equal a '("sleepy" (sneezy (doc bashful rabbit) jumpy) "grouchy" dopy snow white))
				)
		)
		(prog2	(setq a '(a b c (10 3 5 2 5 8) d (3 4 5)))
				(and (eq (subst-if-not 'end-of-testing #'(lambda (x) (/= (apply #'- x) -13.0)) a :key #'cadddr)
						'end-of-testing)
					(equal a '(a b c (10 3 5 2 5 8) d (3 4 5)))
				)
		)
	)
)
STOP

			