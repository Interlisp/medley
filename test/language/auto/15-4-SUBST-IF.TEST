;; Function To Be Tested: SUBST-IF
;;
;; Source: Guy L Steele's CLTL
;; Section: 15.4 Substitution of Expressions
;; Page: 273
;;
;; Created By:    Kelly Roach ; Karin M. Sye
;;
;; Creation Date: June 27,1986
;;
;; Last Update:   Aug. 14,1986
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>15-4-SUBST-IF.TEST
;;
;;
;; Syntax:        (SUBST-IF NEW TEST TREE &KEY KEY)
;;
;; Function Description:
;; (SUBST NEW OLD TREE) makes a copy of TREE,
;; substituting NEW for every subtree or leaf of TREE
;; (whether the subtree or leaf is a CAR or a CDR of its parent)
;; such that OLD and the subtree or leaf satisfy the test.  It
;; returns the modified copy of TREE.  The original TREE is
;; unchanged, but the result tree may share with parts of the argument
;; TREE.
;; Compatibility note: In Maclisp, SUBST is guaranteed NOT to share with
;; the TREE argument, and the idiom (SUBST NIL NIL X) was
;; used to copy a tree X.  In Common Lisp, the function function COPY-TREE should
;; be used to copy a tree, as the SUBST idiom will not work.
;; For example:
;; 
;;     (SUBST 'TEMPEST 'HURRICANE
;; 
;;           '(SHAKESPEARE WROTE (THE HURRICANE)))
;;        => (SHAKESPEARE WROTE (THE TEMPEST))
;;     (SUBST 'FOO 'NIL '(SHAKESPEARE WROTE (TWELFTH NIGHT)))
;;        => (SHAKESPEARE WROTE (TWELFTH NIGHT . FOO) . FOO)
;;     (SUBST '(A . CONS) '(OLD . PAIR)
;;            '((OLD . SPICE) ((OLD . SHOES) OLD . PAIR) (OLD . PAIR))
;;            :TEST #'EQUAL)
;;        => ((OLD . SPICE) ((OLD . SHOES) A . CONS) (A . CONS))
;;     
;; This function is not destructive; that is, it does not change
;; the CAR or CDR of any already existing list structure.
;; One possible definition of SUBST:
;; 
;;     (DEFUN SUBST (OLD NEW TREE  X  TEST TEST-NOT KEY)
;;       (COND ((SATISFIES-THE-TEST OLD TREE :TEST TEST
;; 
;;    			     :TEST-NOT TEST-NOT :KEY KEY)
;;     	 NEW)
;;     	((ATOM TREE) TREE)
;;     	(T (LET ((A (APPLY #'SUBST OLD NEW (CAR TREE) X))
;;     		 (D (APPLY #'SUBST OLD NEW (CDR TREE) X)))
;;     	     (IF (AND (EQL A (CAR TREE))
;;     		      (EQL D (CDR TREE)))
;;     		 TREE
;;     		 (CONS A D))))))
;;     
;; See also function SUBSTITUTE, which substitutes for top-level elements
;; of a sequence.
;; 
;; Argument(s):   NEW - anything
;;                TEST - a function
;;                TREE - a tree
;;                KEY - a function
;;
;; Returns:       a tree
;;

(do-test "test subst-if 1"
	(and	 (prog2 	(setq a '(10 20 (10.0) (10 . 10.0) 100 30 (10) . 10))
				(and 	(equal (subst-if 99.99 #'(lambda (x) (equalp x 10)) a) '(99.99 20 (99.99) (99.99 . 99.99) 100 30 (99.99) . 99.99))
					(equal (subst-if 99.99 #'(lambda (x) (eql x 10)) a) '(99.99 20 (10.0) (99.99 . 10.0) 100 30 (99.99) . 99.99))
					(equal a '(10 20 (10.0) (10 . 10.0) 100 30 (10) . 10))  )
					
		)
		(prog2	(setq a '( (apple . orange) (banana) ((papaya) (tomato) mongo) watermelon . cantolope)  )
				(and	(equal (subst-if 'yummy #'null a) 
						  '( (apple . orange) (banana . yummy) ((papaya . yummy) (tomato . yummy) mongo . yummy) watermelon . cantolope) )
					(equal (subst-if t #'atom a) 
						  '(( t . t) (t . t) ((t . t) (t . t) t . t) t . t)  )
					(equal a '( (apple . orange) (banana) ((papaya) (tomato) mongo) watermelon . cantolope)  )  )
		)
		(prog2	(setq a '("string1" ("sTring" "string2") ((((( "string")))) "STRING") "string3" ("string" "string4") ))
				(and 	(equal	(subst-if "bow" #'(lambda (x) (and (stringp x) (string= x "string")))  a)
						     '("string1" ("sTring" "string2") ((((( "bow")))) "STRING") "string3" ("bow" "string4")) )

					(equal	(subst-if "bow" #'(lambda (x) (and (stringp x) (string-equal x "string")))  a)
						     '("string1" ("bow" "string2") ((((( "bow")))) "bow") "string3" ("bow" "string4")) )

					(equal	a '("string1" ("sTring" "string2") ((((( "string")))) "STRING") "string3" ("string" "string4")))
				)
		)
	
		(prog2	(setq a '( (string . guitar) ((keyboard . organ) string . guitar) (string guitar (percussion . drum)) ))
				(and	(equal	(subst-if '(string . harp) #'(lambda (x) (equal x '(string . guitar)))  a)
							'( (string . harp) ((keyboard . organ) string . harp) (string guitar (percussion . drum)) ))
					(equal a '( (string . guitar) ((keyboard . organ) string . guitar) (string guitar (percussion . drum)) ))
				)
		)

		(prog2	(setq a '( (1 2 3) (a b c) ( (w)  (q)  (i)) ))
				(and	(equal (subst-if "poco ret." #'(lambda (x) (= (list-length x) 3)) a)
						  "poco ret.")
					(equal a '( (1 2 3) (a b c) ( (w)  (q)  (i)) ))
				)
		)
	)
)

(do-test "test subst-if  - with :KEY keyword"
	(and
		;;(prog2	(setq a '( ("1" 2) (11 12) ("111" 212) (1111 2121) (111111 . 32112)) )
		;;		(and 	(equal	(subst-if "k" #'(lambda (x) (and (numberp x) (<= x 11110)))  a :key #'car)
		;;					'( ("1" . "k") "k" ("111" . "k") "k" (111111 . 32112)) )
		;;			(equal a '( ("1" 2) (11 12) ("111" 212) (1111 2121) (111111 . 32112)) )
		;;		)
		;;)
		(prog2	(setq a '( "To" ("all" ("those")) "who"  ("strive" "for") (("excellent"))))
				(and	(equal   (subst-if (second '(last least)) #'(lambda (x) (and (stringp x) (find #\t x))) a :key #'identity)
							'("To" ("all" (least)) "who" (least "for") ((least))) )
					(equal a '( "To" ("all" ("those")) "who"  ("strive" "for") (("excellent"))))
				)
		)
		(prog2	(setq a '( ("a" "c" (ace)) "spade" club ("c" "l" (u b) ("d" "i" (amod))  ((king) "queen") Jack)) )
				(and	(equal 	(subst-if "*" #'(lambda (x) (and (listp x) (= (list-length x) 1))) a 
												  :key #'(lambda (x) (if (listp x) (third x) t)))
							'(  "*" "spade" club ("c" "l" (u b) "*"  ((king) "queen") Jack)) )
	
					(equal a '( ("a" "c" (ace)) "spade" club ("c" "l" (u b) ("d" "i" (amod))  ((king) "queen") Jack)) )
				)
		)
		(prog2	(setq a '(10 23 34 23 100 2000 9))
				(and	(eq 	(subst-if 'end-of-subst-if-test #'(lambda (x) (= (apply #'+ x) 2166)) a 
																:key #'(lambda (x) (nthcdr 2 x)))
						'end-of-subst-if-test)
					(equal a '(10 23 34 23 100 2000 9))
				)
		)
	)
)
STOP
