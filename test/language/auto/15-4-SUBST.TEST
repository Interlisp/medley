;; Function To Be Tested: SUBST
;;
;; Source: Guy L Steele's CLTL
;; Section: 15.4 Substitution of Expressions
;; Page: 273
;;
;; Created By:    Kelly Roach ; Karin M. Sye
;;
;; Creation Date: June 27,1986
;;
;; Last Update:   Aug. 13,1986
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>15-4-SUBST.TEST
;;
;;
;; Syntax:        (SUBST NEW OLD TREE &KEY TEST TEST-NOT KEY)
;;
;; Function Description:
;; (SUBST NEW OLD TREE) makes a copy of TREE,
;; substituting NEW for every subtree or leaf of TREE
;; (whether the subtree or leaf is a CAR or a CDR of its parent)
;; such that OLD and the subtree or leaf satisfy the test.  It
;; returns the modified copy of TREE.  The original TREE is
;; unchanged, but the result tree may share with parts of the argument
;; TREE.
;; Compatibility note: In Maclisp, SUBST is guaranteed NOT to share with
;; the TREE argument, and the idiom (SUBST NIL NIL X) was
;; used to copy a tree X.  In Common Lisp, the function function COPY-TREE should
;; be used to copy a tree, as the SUBST idiom will not work.
;; For example:
;; 
;;     (SUBST 'TEMPEST 'HURRICANE
;; 
;;           '(SHAKESPEARE WROTE (THE HURRICANE)))
;;        => (SHAKESPEARE WROTE (THE TEMPEST))
;;     (SUBST 'FOO 'NIL '(SHAKESPEARE WROTE (TWELFTH NIGHT)))
;;        => (SHAKESPEARE WROTE (TWELFTH NIGHT . FOO) . FOO)
;;     (SUBST '(A . CONS) '(OLD . PAIR)
;;            '((OLD . SPICE) ((OLD . SHOES) OLD . PAIR) (OLD . PAIR))
;;            :TEST #'EQUAL)
;;        => ((OLD . SPICE) ((OLD . SHOES) A . CONS) (A . CONS))
;;     
;; This function is not destructive; that is, it does not change
;; the CAR or CDR of any already existing list structure.
;; One possible definition of SUBST:
;; 
;;     (DEFUN SUBST (OLD NEW TREE  X  TEST TEST-NOT KEY)
;;       (COND ((SATISFIES-THE-TEST OLD TREE :TEST TEST
;; 
;;   			     :TEST-NOT TEST-NOT :KEY KEY)
;;     	 NEW)
;;     	((ATOM TREE) TREE)
;;     	(T (LET ((A (APPLY #'SUBST OLD NEW (CAR TREE) X))
;;     		 (D (APPLY #'SUBST OLD NEW (CDR TREE) X)))
;;     	     (IF (AND (EQL A (CAR TREE))
;;     		      (EQL D (CDR TREE)))
;;     		 TREE
;;     		 (CONS A D))))))
;;     
;; See also function SUBSTITUTE, which substitutes for top-level elements
;; of a sequence.
;; 
;; Argument(s):   NEW - anything
;;                OLD - anything
;;                TREE - a tree
;;                TEST - a function
;;                TEST-NOT - a function
;;                KEY - a function
;;
;; Returns:       a tree
;;

(DO-TEST "TEST SUBST - test cases copied from page 273 of CLtL"
  (and (equal (SUBST 'TEMPEST 'HURRICANE
                     '(SHAKESPEARE WROTE (THE HURRICANE)))
              '(SHAKESPEARE WROTE (THE TEMPEST)))
       (equal (SUBST 'FOO 'NIL '(SHAKESPEARE WROTE (TWELFTH NIGHT)))
              '(SHAKESPEARE WROTE (TWELFTH NIGHT . FOO) . FOO))
       (equal (SUBST '(A . CONS) '(OLD . PAIR)
                     '((OLD . SPICE)
                       ((OLD . SHOES) OLD . PAIR)
                       (OLD . PAIR)) 
                     :TEST #'EQUAL)
              '((OLD . SPICE) ((OLD . SHOES) A . CONS) (A . CONS)))))

(do-test "test subst 1"
  (and (prog2 (setq aa '(allen (apple) apply ((apple) apple1) apple2))
              (and (equal (subst 'orange 'apple aa)
                          '(allen (orange) apply
                                  ((orange) apple1) apple2))
                   (equal aa '(allen (apple) apply
                                     ((apple) apple1) apple2))))
       (prog2 (setq aa '(twinkle (nil t) (twinkle) () little (star) "!"))
              (and (equal (subst 999 nil aa) 
                          '(twinkle (999 t . 999) (twinkle . 999)
                                    999 little (star . 999) "!" . 999))
                   (equal aa '(twinkle (nil t) (twinkle) ()
                                       little (star) "!"))))
       (prog2 (setq aa '(#\A #\a '(#\G (#\o))
                             ((#\b) #\a) (#\N (#\a)) ((#\n) #\a)))
              (and (equal (subst 'apple #\a aa) 
                          '(#\A apple '(#\G (#\o))
                                ((#\b) apple) (#\N (apple))
                                ((#\n) apple)))
                   (equal aa '(#\A #\a '(#\G (#\o))
                                   ((#\b) #\a) (#\N (#\a))
                                   ((#\n) #\a)))))))

(do-test "test subst - with :TEST keyword"
  (and (prog2 (setq aa '("silent" "night" ("holy" ("night"))
                                  (("last" . "night"))
                                  ("lonely") "night"))
              (and (equal (subst "afternoon" "night" aa :test #'equal)
                          '("silent" "afternoon" ("holy" ("afternoon"))
                                     (("last" . "afternoon"))
                                     ("lonely") "afternoon"))
                   (equal aa '("silent" "night" ("holy" ("night"))
                                        (("last" . "night"))
                                        ("lonely") "night"))))
       (prog2 (setq aa '((1 3 5.0) ((1.0 3) (1.0 3.0 5.0)) 1 3 5))
              (and (equal (subst '(11.1 22.2) '(1 3.0 5.0) aa
                                 :test
                                 #'(lambda
                                    (x y)
                                    (and (listp y)
                                         (= (list-length x)
                                            (list-length y))
                                         (every #'(lambda
                                                   (m n)
                                                   (and (numberp n)
                                                        (= m n)))
                                                x y))))
                          '((11.1 22.2) ((1.0 3) (11.1 22.2)) 11.1 22.2))
                   (equal aa '((1 3 5.0) ((1.0 3) (1.0 3.0 5.0)) 1 3 5))))
       (prog2 (setq aa '(20 77 45 (60) 5 0.2 ((30)) (39) 10 8 35))
              (and (equal (subst 44 30 aa
                                 :test #'(lambda
                                          (x y)
                                          (and (numberp y)
                                               (>= x y)) )) 
                          '(44 77 45 (60) 44 44 ((44)) (39) 44 44 35))
                   (equal aa '(20 77 45 (60) 5 0.2
                                  ((30)) (39) 10 8 35))))))

(do-test "test subst  - with :TEST-NOT keyword"
  (and (prog2 (setq aa '((1  2) (2 3 4) (4 ((5))) (7 8 (9))  ))
              (and (equal (subst '(foo) 'dumy aa
                                 :test-not
                                 #'(lambda
                                    (x y) 
                                    (and (listp y)
                                         (= (list-length y) 4))  ))
                          '((foo) foo))
                   (equal aa '((1  2) (2 3 4) (4 ((5))) (7 8 (9))  ))))
       (prog2 (setq aa '((a z) (y x) (m n) (b c)))
              (and (equal (subst "foo" '(a b) aa
                                 :test-not #'intersection) "foo")
                   (equal aa '((a z) (y x) (m n) (b c)))))
       (prog2 (setq aa '(no (sense) ((no)) feelings))
              (and (equal (subst 'foo 'dumy aa
                                 :test-not #'(lambda (x y) (not (atom y))))
                          '(foo (foo . foo) ((foo . foo) . foo) foo . foo))
                   (equal aa '(no (sense) ((no)) feelings))))))

(do-test "test subst - with :KEY keyword"
  (and (prog2 (setq aa '((end2 end1) ((end) end)))
              (and (equal (subst 'zero '(end) aa
                                 :test #'equal
                                 :key #'(lambda (x)
                                                (if (listp x)
                                                    (last x))))
                          '((end2 end1) zero))
                   (equal aa '((end2 end1) ((end) end)))))
       (prog2 (setq aa '(13.0 ((2) 13.0 40) (26 (13.0) 39) ((2 4) 13 28)))
              (and (equal (subst 33 13 aa
                                 :test #'equalp
                                 :key #'(lambda (x)
                                                (if (consp x)
                                                    (second x))))
                          '(13.0 33 (26 (13.0) 39) 33))
                   (equal aa '(13.0 ((2) 13.0 40)
                                    (26 (13.0) 39)
                                    ((2 4) 13 28)))))
       (progn (setq aa '((a b) a (a c) b c (d a)))
              (setq bb '((a b) d (a c) b c (d a)))
              (and (equal (subst 'w 'a aa
                                 :key #'(lambda (x)
                                                (if (consp x)
                                                    (first x))))
                          '(w . w))
                   (equal aa '((a b) a (a c) b c (d a)))
                   (equal (subst 'w 'a bb
                                 :key #'(lambda (x)
                                                (if (consp x)
                                                    (first x))))
                          '(w d w b c (d . w)))
                   (equal bb '((a b) d (a c) b c (d a)))))))
						
STOP
