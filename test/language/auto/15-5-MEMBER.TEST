;; Function To Be Tested: MEMBER
;;
;; Source: Guy L Steele's CLTL
;; Section: 15.5 Using Lists as Sets
;; Page: 275
;;
;; Created By:    Kelly Roach / Karin M. Sye
;;
;; Creation Date: June 27,1986
;;
;; Last Update:   July 16,1986
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>15-5-MEMBER.TEST
;;
;;
;; Syntax:        (MEMBER ITEM LIST &KEY TEST TEST-NOT KEY)
;;
;; Function Description:
;; The LIST is searched for an element that satisfies the test.
;; If none is found, NIL is returned;
;; otherwise, the tail of LIST beginning
;; with the first element that satisfied the test is returned.
;; The LIST is searched on the top level only. 
;; These functions are suitable for use as predicates.
;; For example:
;; 
;;     (MEMBER 'SNERD '(A B C D)) => NIL
;;     (MEMBER-IF #'NUMBERP '(A #\SPACE 5/3 FOO)) => (5/3 FOO)
;;     (MEMBER 'A '(G (A Y) C A D E A F)) => (A D E A F)
;;     
;; Note, in the last example,
;; that the value returned by MEMBER is EQ to the portion of the list
;; beginning with A.
;; Thus RPLACA on the result of MEMBER may be used
;; to alter the found list element,
;; if a check is first made that MEMBER did not return NIL.
;; 
;; See also function FIND and function POSITION.
;; Compatibility note: In Maclisp, the MEMBER function uses
;; an EQUAL comparison rather than EQL, which is the default
;; test for MEMBER in Common Lisp.  Where in Maclisp one would write
;; (MEMBER X Y), in Common Lisp one must write (MEMBER X Y :TEST #'EQUAL)
;; to get a completely identical effect.  Similarly, one can get the
;; precise effect, and no more, of the Maclisp (MEMQ X Y)
;; by writing in Common Lisp (MEMBER X Y :TEST #'EQ).
;; 
;; Argument(s):   ITEM - anything
;;                LIST - a pure list
;;                TEST - a function
;;                TEST-NOT - a function
;;                KEY - a function
;;
;; Returns:       a pure list
;;

(do-test "test member - test cases copied from page 275 of CLtL"
	(and (equal (MEMBER 'SNERD '(A B C D))  NIL)
		(equal (MEMBER 'A '(G (A Y) C A D E A F)) '(A D E A F))
	)
)



(do-test "test member - if the ITEM is not found in LIST , nil is returned"
	(notany #'member '(a b c d e f g) '((c d e) (e f g) (a b) (a b c) (b c d) (c d e) (a b c d e f)))
)

(do-test "test member- the LIST is searched on the top level only"
	(and (equal (member 2 '(1 3 (2 4) 2 4 6)) '(2 4 6))
		(eq    (member a '(b c ((a)) (a) d e)) nil)
		(equal (member 100.05 '((100.05 100.05) 100.005 (100.05)  100.05 . end )) '(100.05 . end))
		(equal (member '(1 2 (3)) '(1 2 (3) (1 2 (3)) 3 2 1 ) :test #'equal) '((1 2 (3)) 3 2 1 ))
		(eq    (member #\a '((#\a) ((#\a)) #\A)) nil)
		(equal (member 'dummy '(a (d ()) "234" () 56) :test-not #'(lambda (x y) (not (null y))))  '(() 56))
	)
)


(defun fun1 (item list nth fn)
	(eq (member item list :test fn) (nthcdr nth list)))

(do-test "test member - the value returned is eq to the portion of LIST beginning with ITEM"
  	(prog2
		(defun fun1 (item list nth fn)
			(eq (member item list :test fn) (nthcdr nth list)))
 		(and	(fun1 4 '(1 2 3 4) 3 #'=)
			(fun1 #\q '(#\q #\u #\a #\c #\k) 0 #'char=)
			(fun1 'pretty '(prety preeery prity pretty prreety) 3 #'eq)
			(fun1 "ab" '("aa" "bb" "ba" "ab") 3 #'equal)
			(fun1 20.0 '(20 (20.0) -20.0 0.0 20.0 20.0 20.0) 4 #'eql)
			(fun1 #\q '(#\Q #\u #\a #\c #\k) 0 #'equalp)
		)
	)
)

(do-test "teste member - include :TEST-NOT keyword and REPLACA in the following test cases" 
	(and	(equal (rplaca (member 11.0 '(11 22.0 33 44) :test-not #'eq) 99) '(99  22.0 33 44))
		(equal (rplaca (member 10 '(1 3 20 4 5 (2 4 6) 24) :test-not #'>=) #\y) '(#\y 4 5 (2 4 6) 24))
		(equal (rplaca (member '(a b c) '((c d e) (1 2 3) (a b c d e) (2 . 4)) 
							   :test-not #'(lambda (x y) (= (list-length x) (list-length y)))) '(88 99))
			  '((88 99)(2 . 4)))
		(equal (rplaca (member "A" '("a" "b" "d" "234" () 56) :test-not #'string-equal) t)
			  '(t "d" "234" () 56))
	)
)

(do-test "test member - incluse :KEY keyword in the following test cases"
	(and (equal (member 'a '((a b c) (b c a) (c a b)) :test #'eq :key #'caddr) '((b c a) (c a b)))
		(equal (member 10 '((10 20 30) (20 30 10) (30 10 20)) :test #'= :key #'cadr) '((30 10 20)))
		(equal (member '(1 . 4) '( ((2 . 8) "a" (1 . 4) 1 . 4)  ((3 . 6) (1 . 4) (5 . 10)) ((5 . 6) "g" (1 . 4))  )
					:test-not #'equal :key #'third)  '(((3 . 6) (1 . 4) (5 . 10)) ((5 . 6) "g" (1 . 4))  ))
		(equal (member 100 '((10 200 300) (1 2 3 4) (1000 2000 3000)) :test-not #'< :key #'second)
					'((1 2 3 4) (1000 2000 3000)) )
	)
)
STOP
