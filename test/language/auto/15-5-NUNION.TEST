;; Function To Be Tested: NUNION
;;
;; Source: Guy L Steele's CLTL
;; Section: 15.5 Using Lists as Sets
;; Page: 276
;;
;; Created By:    Kelly Roach , Karin M. Sye
;;
;; Creation Date: June 27,1986
;;
;; Last Update:   July 23,1986
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>15-5-NUNION.TEST
;;
;;
;; Syntax:        (NUNION LIST1 LIST2 &KEY TEST TEST-NOT KEY)
;;
;; Function Description:
;; UNION takes two lists and returns a new list containing
;; everything that is an element of either of the LISTS.
;; If there is a duplication between two lists,
;; only one of the duplicate instances will be in the result.
;; If either of the arguments has duplicate entries within it,
;; the redundant entries
;; may or may not appear in the result.
;; For example:
;; 
;;     (UNION '(A B C) '(F A D))
;;       => (A B C F D) or (B C F A D) or (D F A B C) or ...
;;     
;;     (UNION '((X 5) (Y 6)) '((Z 2) (X 4)) :KEY #'CAR)
;;       => ((X 5) (Y 6) (Z 2)) or ((X 4) (Y 6) (Z 2)) or ...
;;     
;; 
;; There is no guarantee that the order of elements in the result will
;; reflect the ordering of the arguments in any particular way.
;; The implementation is therefore free to use any of a variety of strategies.
;; The result list may share cells with, or be EQ to, either of the arguments
;; if appropriate.
;; 
;; In general, the test may be any predicate, and the union operation may be
;; described as follows.  For all possible ordered pairs consisting of one
;; element from LIST1 and one element from LIST2, the test is used
;;
;; to determine whether they ``match.''  For every matching pair, at least
;; one of the two elements of the pair will be in the result.  Moreover, any
;; element from either list that matches no element of the other will appear
;; in the result.  All this is very general, but probably not particularly
;; useful unless the test is an equivalence relation.
;; 
;; The :TEST-NOT argument can be useful when the test function
;; is the logical negation of an equivalence test.  A good example
;; of this is the function function MISMATCH, which is logically inverted
;; so that possibly useful information can be returned if the arguments do not
;; match.  This additional ``useful information'' is discarded in the following
;; example; MISMATCH is used purely as a predicate.
;; 
;;     (UNION '(#(A B) #(5 0 6) #(F 3))
;;            '(#(5 0 6) (A B) #(G H))
;;            :TEST-NOT
;;            #'MISMATCH)
;;        => (#(A B) #(5 0 6) #(F 3) #(G H))	;One possible result
;;        => ((A B) #(F 3) #(5 0 6) #(G H))	;Another possible result
;;     
;;
;; Using :TEST-NOT #'MISMATCH differs from using
;; :TEST #'EQUALP, for example, because MISMATCH
;; will determine that #(A B) and (A B) are the same,
;; while function EQUALP would regard them as not the same.
;; 
;; NUNION is the destructive version of UNION.
;; It performs the same operation but may destroy the argument lists,
;; using their cells to construct the result.
;; 
;; Argument(s):   LIST1 - a pure list
;;                LIST2 - a pure list
;;                TEST - a function
;;                TEST-NOT - a function
;;                KEY - a function
;;
;; Returns:       a pure list
;;

(do-test "test nunion - test cases copied from page 276 and page 277 of CLtL"
  (and 
	 (let (( a (NUNION '(A B C) '(F A D)) ))
		
		 (every #'(lambda (x) (member x a :test #'eq)) '(A B C F D))
	 )
	 (let (( a (NUNION '((X 5) (Y 6)) '((Z 2) (X 4)) :KEY #'CAR)  ))
		 (and 
			 (member 'X a :test #'eq :key #'car)
			 (every #'(lambda (x) (member x a :test #'equal)) '((Y 6) (Z 2)))
		 )
	 )
  )
)

(do-test "test nunion 1"
	(and	(progn 	(setq a '(1 2 3 4) b '(5 6 7 8 9) ab (nunion a b))
				(every #'(lambda (x) (member x ab)) '(1 2 3 4 5 6 7 8 9))
		)
		(progn 	(setq a '( (1 2) "one" "two" ( 1 . 2))  b '( "three" ( 3 4) "four" (3 . 4))  ab (nunion a b))
				(every #'(lambda (x) (member x ab :test #'equal)) 
							'("three" ( 3 4) "four" (3 . 4) (1 2) "one" "two" ( 1 . 2)))
		)
		(prog2 	(setq a '(1 2) b '(1 2) c (nunion a b))
				(every #'(lambda (x) (member x c :test #'eq)) '(2 1))
		)
		(prog2	(setq aa '("a" "b" "c" "d" "e" "f") bb '("d" "e" "f" "g" "h" "i") cc (nunion aa bb))
				(every #'(lambda (x) (member x cc :test #'equal)) '("d" "e" "f" "g" "h" "i" "a" "b" "c"))
				
		)
		(prog2	(setq aa '((1 2 3 (4 5) (6 7)) 8 9 10 11) bb '(#\a "string" (1 2 3 (4 5) (6 7)) 10 #\v) cc (nunion aa bb))
				(every #'(lambda (x) (member x cc :test #'equal)) '((1 2 3 (4 5) (6 7)) 8 9 10 11 #\a #\v "string"))
					
		)
	)
)

(do-test "test nunion 2"
	(and	(progn	(setq a '((a b) (x y) (o p)) b '((1 2) (4 y) (7 p)) cc (nunion a b :test #'eq :key #'cadr))
				(and	
					(member 'p cc :key #'cadr)
					(member 'y cc :key #'cadr)
					(every #'(lambda (x) (member x cc :test #'equal)) '((a b) (1 2)))
				)
		)
		(progn	(setq a '((poco a poco rit end) (sound little)) b '((rit little by little ) (by degrees) (end))  
					 cc (nunion a b :test #'equal :key #'last))
				(and 
					(member '(little) cc :test #'equal :key #'last)
					(member '(end) cc :test #'equal :key #'last)
					(every #'(lambda (x) (member x cc :test #'equal)) '((by degrees)))
				)
		)
	)
)

(do-test "test nunion 3"
	(and  
		(progn	(setq aa '((1 #\3 4) (5 #\7) (9 #\1)) bb '((2 #\7 9) (8 #\9 20) (99 #\8)) 
					 cc (nunion aa bb  :test-not #'char/=  :key #'second))
				(and 
					(member-if  #'(lambda (x) (char= x #\7)) cc  :key #'second) 
					(every #'(lambda (x) (member x cc :test #'equal)) '((1 #\3 4) (9 #\1) (8 #\9 20) (99 #\8)))
				)
		)
		(progn	(setq aa '(("blue" ("green")) ("yellow" ("red")) ("purple" ("blue")))
					 bb '(("blue" ("Green")) ("yellow" ("blue")) ("yellow" ("Red")))
					 cc (nunion aa bb :test-not #'(lambda (x y) (not (string= x y)))  :key #'caadr))
				(and 
					(member-if-not  #'(lambda (x) (not (string= x "blue"))) cc  :key #'caadr)
					(every #'(lambda (x) (member x cc :test #'equal)) 
						   '( ("blue" ("green")) ("yellow" ("red")) ("blue" ("Green")) ("yellow" ("Red"))) )
				)
		)
	)
) 					
STOP
