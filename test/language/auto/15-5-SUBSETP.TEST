;; Function To Be Tested: SUBSETP
;;
;; Source: Guy L Steele's CLTL
;; Section: 15.5 Using Lists as Sets
;; Page: 279
;;
;; Created By:    Kelly Roach , KARIN SYE
;;
;; Creation Date: June 27,1986
;;
;; Last Update:   July 28,1986
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>15-5-SUBSETP.TEST
;;
;;
;; Syntax:        (SUBSETP LIST1 LIST2 &KEY TEST TEST-NOT KEY)
;;
;; Function Description:
;; SUBSETP is a predicate that is true if every element of LIST1
;; appears in (``matches'' some element of) LIST2, and false otherwise.
;; 
;; Argument(s):   LIST1 - a pure list
;;                LIST2 - a pure list
;;                TEST - a function
;;                TEST-NOT - a function
;;                KEY - a function
;;
;; Returns:       T or NIL
;;



(do-test "test subsetp 0"
  (and (subsetp '(1 2) '(1 2 3 4))
       (subsetp ()  '( () ())  )
       (subsetp '(a) '(z x y b a))
       (subsetp (list 'name1) '(name9 (name8) name4 name1 name3))
       (subsetp (list (1+ 99)) '(100.0 88 99 1 100))
       (subsetp '(#\q #\h #\a) '(#\h #\a #\p #\q #\y))))

(do-test "test subsetp - with :TEST keyword"
  (and (subsetp '("str1" "str2" )
                '(str5 "str6" "str3" "str4"
                       "str7" "str1" "str9" "str2")
                :test #'string=)
       (subsetp `((1 . 2) (())) '(a b (1 . 2)  t (()) c d e ())
                :test #'equal)
       (subsetp '(1.0 2.0 3.0 4.0) '(2.0 10 20 1.0 3 4 5 3.0 6 4.0)
                :test #'=)
       (subsetp '(#3r10 #5r10 ) '(3.0 #c(1 -1) 5 10 12 #c(1 2) #c(-1 -1))
                :test #'=)
       (subsetp '(#c(1 -1) #c(-1 -1))
                '(#c(1 -1) 5 10 12 #c(1 2) #c(-1 -1))
                :test #'equal)
       (subsetp '(a b c d) '(((1 . a) (2 . b) (3 . c) (4 . d) (5 . e)))
                :test #'rassoc)))

(do-test "test subsetp - with :TEST-NOT keyword"
  (and (subsetp '(2 4 6) '(a b c d)
                :test-not #'(lambda (x y) (oddp x)))
       (subsetp '("k" "i" "t" "e") '(sound of music)
                :test-not  #'(lambda (x y) (listp y)))
       (subsetp '(#\m #\x #\y) '("retardanto" "poco a poco" "adagio")
                :test-not #'(lambda (x y)  (find x y)))
       (subsetp '(#c(1 9) #c(-1 2) #c(0 3)) '(2 )
                :test-not #'(lambda (x y) (eq (type-of x) (type-of y)) )) 
       (subsetp '(a b c d) '(((1 . a) (2 . b) (3 . c) (4 . d) (5 . e)))
                :test-not #'assoc)))

(do-test "test  subsetp - with :KEY keyword"
  (and (subsetp '((8 2) (2 4) (4 6)) '((2 3) (4 5) (6 7) (8 9))
                :key #'first) 
       (subsetp '( (a ((#\A) 1) 1)   (b ((#\B) 2) 2) (c (( #\C) 3) 3))
                '(( 1 ((#\A) 1) 1)   (b ((#\B) 2) 2) (c (( #\C) 3) 3))
                :test #'equalp :key #'caaadr)
       (subsetp '( (a b c (d))  (1 2 3 (4 5)) (w x y ((z))) )
                '( (c b a (d) s z b c)
                   (3 2 1 9 (4 5) 2 3)
                   (y x w s p ((z)) x y))
                :test #'(lambda (x y)
                                (member (car x) y :test #'equal))
                :key #'(lambda (x) (nthcdr 3 x)) )))

(do-test "test subsetp 2"
  (not (or (subsetp '(2 3) '(1 3 5))
           (subsetp '(1 3 5) '(1.0 2.0 5.0 4.0 3.0))
           (subsetp '(#\z #\r #\o #\w) '("zebra" "kangaroo" "ostrich")
                    :test #'(lambda (x y) (find x y)))
           (subsetp '(-1 -3 -5 -6) '(t)
                    :test-not #'(lambda (x y) (plusp (expt x 2)))))))

STOP
