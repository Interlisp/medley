;; Function To Be Tested: aref
;;
;; Source:     Common Lisp by Guy Steele
;;            Section 17.2: Array Access          Page: 290
;;
;; Created By: John Park
;;
;; Creation Date: June 5, 86
;;
;; Last Update:   
;;
;; Filed as:      {eris}<lispcore>cml>test>17-2-aref.test
;;
;; Syntax: aref array &rest subscripts
;;
;; Function Description: This function accesses and returns the element of 
;; array specified by the subscripts. The number of subscripts must equal the 
;; rank of the array, and each subscript must be a non-negative integer less 
;; than the corresponding array dimension.
;;
;; Argument(s):  array and element-position
;;
;; Returns: element specified by the subscripts  
;;
;; Constraints/limitations: None  
	
	


(do-test-group (array-creation-test
			:before (progn
					(setq array1 (make-array 5
						:initial-contents '(a b c d e)))
					(setq array2 (make-array '(2 2) :initial-contents
					  '(((a b) (10 20)) ((c d) (30 40)))))
					(setq array3 (make-array '(2 2 2)
						:element-type	'single-float
						:initial-element 7.0))
					
					(setq array4 (make-array '(4 3)
						:initial-contents '((1 2 3)
										(4 5 6)
										(7 8 9)
										(10 11 12))))
					(setq array5 (make-array 5 :displaced-to array4
							:displaced-index-offset 2))
					
					(setq array6 (make-array '(4 2 3) :initial-contents
						'(((a b c) (1 2 3))
					       ((d e f) (3 1 2))
						  ((g h i) (2 3 1))
			 			  ((j k l) (0 0 0)))))))

	(do-test aref-test1 (and (eq (aref array1 0) 'a)
						(eq (aref array1 1) 'b)
						(eq (aref array1 2) 'c)
						(eq (aref array1 3) 'd)
						(eq (aref array1 4) 'e)))
	(do-test aref-test2 (and (equal (aref array2 0 0) '(A B))
						(equal (aref array2 0 1) '(10 20))
						(equal (aref array2 1 0) '(C D))
						(equal (aref array2 1 1) '(30 40))))
	(do-test aref-test3 (and (eql (aref array3 0 0 0) 7.0)
						(eql (aref array3 0 1 0) 7.0)
						(eql (aref array3 1 1 1) 7.0)))
	(do-test aref-test4 (and (eq (aref array5 0) 
						   (aref array4 0 2))
						(eq (aref array5 1) 
							(aref array4 1 0))
						(eq (aref array5 2)
							(aref array4 1 1))
						(eq (aref array5 3)
							(aref array4 1 2))
						(eq (aref array5 4)
							(aref array4  2 0))))
	(do-test aref-test5 (and  (eq (aref array6 0 0 0) 'a)
						(eq (aref array6 0 1 1) 2)
						(eq (aref array6 1 1 2) 2)
						(eq (aref array6 2 1 2) 1)
						(eq (aref array6 3 0 1) 'k)
						(eq (aref array6 3 1 2) 0))))

STOP

