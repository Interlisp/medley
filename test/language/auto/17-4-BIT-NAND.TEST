;; Function To Be Tested: bit-nand
;;
;; Source:     Common Lisp by Guy Steele
;;            Section 17.4: Functions on Arrays of Bits    Page: 294
;;
;; Created By: John Park
;;
;; Creation Date: June 11, 86
;;
;; Last Update:   
;;
;; Filed as:      {eris}<lispcore>cml>test>17-4-bit-nand.test
;;
;; Syntax: bit-nand bit-array1 bit-array2 &optional result-bit-array 
;;
;; Function Description: This function performs bit-wise logical Not-AND
;; operation and stores the result in a newly created array.  If an array is 
;; specified, that array is used to store the result.  If t is specified, the 
;; result is destructively stored in bit-array1.
;;
;; Argument(s):  bit-array1 bit-array2 t or result-bit-array 
;; Returns: array with result of bit-wise Not-AND operation.
;;
;; Constraints/limitations: None 

(do-test-group bit-nand-tests
		:before  (progn (setq bit-array1 
						(make-array 4 :element-type 'bit
							:initial-contents '(0 0 1 1)))
					 (setq bit-array2 
						(make-array 4 :element-type 'bit
							:initial-contents '(0 1 0 1)))
					 (setq result-bit-array
						 (make-array 4 :element-type 'bit)))
																			
			
	(do-test bit-nand-test1
		(and (bit-nand bit-array1 bit-array2 result-bit-array)
				(eq (bit result-bit-array 0) 1)
				(eq (bit result-bit-array 1) 1)
				(eq (bit result-bit-array 2) 1)
				(eq (bit result-bit-array 3) 0)))
	(do-test bit-nand-test2
		(and (setq new-bit-array (bit-nand bit-array1 bit-array2))
				(eq (bit new-bit-array 0) 1)
				(eq (bit new-bit-array 1) 1)
				(eq (bit new-bit-array 2) 1)
				(eq (bit new-bit-array 3) 0)))
	(do-test bit-nand-test3
		(and (bit-nand bit-array1 bit-array2 t)
				(eq (bit bit-array1 0) 1)
				(eq (bit bit-array1 1) 1) 
				(eq (bit bit-array1 2) 1)
				(eq (bit bit-array1 3) 0))))

STOP


