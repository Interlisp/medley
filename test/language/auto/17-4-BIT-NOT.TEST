;; Function To Be Tested: bit-not
;;
;; Source:     Common Lisp by Guy Steele
;;            Section 17.4: Functions on Arrays of Bits    Page: 294
;;
;; Created By: John Park
;;
;; Creation Date: June 12, 86
;;
;; Last Update:   July 18, 1986 by Masinter, bit-array1 -> bit-array
;;
;; Filed as:      {eris}<lispcore>cml>test>17-4-bit-not.test
;;
;; Syntax: bit-not bit-array &optional result-bit-array 
;;
;; Function Description: This function returns an array with all the bits
;; inverted.   If an array is  specified, that array is used to store the
;; result.  If t is specified, the result is destructively stored in the
;; the original array or bit-array.
;;
;; Argument(s):  bit-array result-bit-array 
;; Returns: array with all the bits inverted.
;;
;; Constraints/limitations: None 

(do-test-group bit-not-tests
		:before  (progn (setq bit-array
						(make-array 4 :element-type 'bit
							:initial-contents '(0 0 1 1)))
					 (setq result-bit-array
						 (make-array 4 :element-type 'bit)))
																			
			
	(do-test bit-not-test1
		(and (bit-not bit-array result-bit-array)
				(eq (bit result-bit-array 0) 1)
				(eq (bit result-bit-array 1) 1)
				(eq (bit result-bit-array 2) 0)
				(eq (bit result-bit-array 3) 0)))
	(do-test bit-not-test2
		(and (setq new-bit-array (bit-not bit-array))
				(eq (bit new-bit-array 0) 1)
				(eq (bit new-bit-array 1) 1)
				(eq (bit new-bit-array 2) 0)
				(eq (bit new-bit-array 3) 0)))
	(do-test bit-not-test3
		(and	(bit-not bit-array t)
				(eq (bit bit-array 0) 1)
				(eq (bit bit-array 1) 1) 
				(eq (bit bit-array 2) 0)
				(eq (bit bit-array 3) 0))))

STOP


