;; Function To Be Tested: adjust-array
;;
;; Source:     Common Lisp by Guy Steele
;;            Section 17.6: Changing the Dimensions of an Array Page: 297
;;
;; Created By: John Park
;;
;; Creation Date: June 16, 86
;;
;; Last Update:   
;;
;; Filed as:      {eris}<lispcore>cml>test>17-6-adjust-array.test
;;
;; Syntax: adjust-array array dimensions &key :element-type :initial-element
;;							:initial-contents 
;;							:fill-pointer :displaced-to
;;							:displaced-index-offset     
;;
;; Function Description: Adjust-array resizes or reshapes an array according to
;; the given options, which are similar to those of make-array .
;;
;; Argument(s):
;;	array: array being adjusted 
;;	new-dimensions: same rank as that of original array
;;	element-type: same as that of original array
;;	initial-contents: The elements of the new array that are not in the
;;	bounds of array are intialized to this value
;;	displaced-to: same as for make-array
;;	displaced-index-offset: same as for make-array
;;	fill-pointer: reset for adjusted array as specified for one-dimensional
;;	array.  Original array must also have a fill-pointer
;; Returns: adjusted-array of the  same rank and type   
;;
;; Constraints/limitations: None  



(do-test-group create-and-adjust-array-test
	:before (progn
		   (setq original-array
			 (make-array '(4 4)
				:initial-contents '((alpha beta gamma delta)
								(epsilon zeta eta theta)
								(iota kappa lambda mu)
								(nu xi omicron pi))
				:adjustable t)))

					
	(do-test adjust-array-test 
		(and (setq adjusted-array
			(adjust-array original-array '(3 5) :initial-element `baz))
			(eq (array-rank  adjusted-array) 2)
			(equal (array-dimensions adjusted-array) '(3 5))
			(array-element-type adjusted-array)
			(eq (aref adjusted-array 0 0) 'alpha)
			(eq (aref adjusted-array 0 3) 'delta)
			(eq (aref adjusted-array 0 4) 'baz)
			(eq (aref adjusted-array 1 0) 'epsilon)
			(eq (aref adjusted-array 1 3) 'theta)
			(eq (aref adjusted-array 1 4) 'baz)
			(eq (aref adjusted-array 2 0) 'iota)
			(eq (aref adjusted-array 2 3) 'mu)
			(eq (aref adjusted-array 2 4) 'baz))))

STOP


			