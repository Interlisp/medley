;; Function To Be Tested: string=
;;
;; Source:        CLtL p. 300 
;; Chapter 18: Strings		Section 2: String Comparison
;;
;; Created By:    Peter Reidy
;;
;; Creation Date: 27 July 86
;;
;; Last Update:   11 December 86
;;
;; Filed As:      {eris}<lispcore>cml>test>18-2-string-eq.test
;;
;;
;; Syntax:   string= string1 string2 &key :start1 :end1 :start2 :end2             
;;
;; Function Description: Compares the 2 strings; returns the length of the common portion iff the corresponding characters of the substrings designated by the keywords are identical (i.e. are char=), nil otherwise. 
;;
;; Argument(s): :start1, :start2: the start-comparison positions (counting from 0) in the respective strings
;;			 :end1, :end2: the end-comparison positions + 1 (counting from 0) - i.e. comparison stops with the previous character; for the string "characters" and the end-position 7, comparison stops with the letter "t".        	
;;
;; Returns: a length or nil, depending on the results of the comparison.             
;;
(do-test-group
	(string=-group
	:before
		(progn
			(test-setq
				simple1 ";;
;; Function Description: Compares the 2 strings; returns t iff their corresponding characters are identical, nil otherwise. 
;;
;; Argument(s): :start1, :start2: the start-comparison positions (counting from 0) in the respective strings
;;			 :end1, :end2: the end-comparison positions + 1 (counting from 0) - i.e. comparison stops with the previous character; for the string characters and the end-position 7, comparison stops with the letter t.        	
;;
" ;;END SIMPLE1 DEFINITION
;;
;; Simple1 and Simple2 are the same length, but simple2 starts and ends 1 character later.
;;
				simple2 ";
;; Function Description: Compares the 2 strings; returns t iff their corresponding characters are identical, nil otherwise. 
;;
;; Argument(s): :start1, :start2: the start-comparison positions (counting from 0) in the respective strings
;;			 :end1, :end2: the end-comparison positions + 1 (counting from 0) - i.e. comparison stops with the previous character; for the string characters and the end-position 7, comparison stops with the letter t.        	
;;

" ;; END SIMPLE2 DEFINITION
				length (length simple1)
			)  ; test-setq
		) ;progn
	)  ; string=group
;;
	(do-test "check setups for string=-test"
		;; Make sure the setup was right
		(AND
			(eq length (length simple2))
			;; The common portion of the strings is all but the end characters.
			(string= simple1 simple2 :start1 1 :end2 (- length 1))
			(not (string= simple1 simple2))
		)  ; AND
	)  ; do-test "check setups for string=-test"
;;
	(do-test "string= keywords test"
	;; Use all 4 keywords, out of order.
		(string= simple2 simple1 :end2 (- length 1) :start1 1 :start2 2 :end1 (- length 2))
	)  ; do-test "string= keywords test"
;;
	(do-test "string= with symbol-names"
	;; Remember that the reader sees everything as upper-case.
		(and
			(string= (symbol-name '18-2-string-eq.test) "18-2-STRING-EQ.TEST")
			(not (string= (symbol-name '18-2-string-eq.test) "18-2-string-eq.test"))
		)  ; and
	)  ; do-test "string= with symbol-names"
;;
	(do-test "string= coerces symbols to strings"
		(and
			(every 'string=
				(list 'atom "atom" 'two\
lin\es (make-array 4 :initial-element #\q :element-type 'string-char))
				(list "ATOM" '|atom| "TWO
LINeS" '\q\q\q\q)
			)
			(not (string= `|MIXED cASE| "MIXED CASE"))	
		)  ; and
	)  ; do-test "string= coerces symbols to strings"
;;
	(do-test "string= with a simple array"
			(string=
				"









"
				(make-array 10 :element-type 'string-char :initial-element #\newline))
		)  ; do-test "string= with a simple array"	
;;
		(do-test "string= with a non-simple array"
;; Not working 27 7; see AR 6190
			(string= ";;
;" (make-array 4 :element-type 'string-char :adjustable t :fill-pointer t :displaced-to simple1))
		) ;do-test "string= with a non-simple array"
) ;do-test-group
STOP

