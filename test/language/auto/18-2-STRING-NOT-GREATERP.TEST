;; Function To Be Tested: string-not-greaterp
;;
;; Source:        CLtL p. 301 
;; Chapter 18: Strings		Section 2: String Comparison
;;
;; Created By:    Peter Reidy
;;
;; Creation Date: 17 July 86
;;
;; Last Update:   14 December 86
;;
;; Filed As:      {eris}<=lispcore>cml>test>18-2-string-le.test
;;
;;
;; Syntax:  string-not-greaterp string1 string2 &key :start1 :end1 :start2 :end2              
;;
;; Function Description: The function compares the respective strings (with the keywords for the respective strings counting from 0 and the :end keywords designating the character after the last compared) lexicographically (i.e. it compares the corresponding characters by the function char-not-greaterp). 
;;
;; Argument(s):	string1, string2: character strings
;;			:start1, start2: the start-comparison position in the respective strings (counting from 0)
;;			:end1, end2: the last character + 1 (counting from 0) to compare - i.e. if comparing "string" with a :end keyword of 4, the last character compared will be the letter i.				        	
;;
;; Returns:	If all characters satisfy char<=: the index (counting from 0) of the first non-identical character - i.e. the length of the portion of the strings that is string=.
;;			If not: nil          
;;
(do-test-group string-not-greaterp-group
	:before
	(progn
		(test-setq upcase "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
				lowcase "abcdefghijklmnopqrstuvwxyz"
				alphalength (length upcase)
				digits "0123456789"
				diglength (length digits)
				longstring (concatenate 'string upcase lowcase digits)
				longlength (length longstring)
				longindex (1+ (random (1- longlength)))
		)
		(test-defun strictly-not-greaterp (dotpair)
		"T iff the every character of the car of a dotted pair of strings is string <= every character of the cdr, nil otherwise."
			(= 0 (string-not-greaterp (car dotpair) (cdr dotpair)))
		)
	)
;;
	(do-test "A-Y string-not-greaterp B-Z, upper and lower case;  comparison is case-insensitive"
		(every 'strictly-not-greaterp
			(list
				(cons (string-trim '(#\Z) upcase) (string-trim '(#\a) lowcase))
				(cons (string-trim '(#\z) lowcase) (string-trim '(#\A) upcase))
			)  ; list
		)
	)  ; do-test "A-Y string-not-greaterp B-Z, upper and lower case"
;;
	(do-test "string-not-greaterp strings-strictly-outside-characters inequalities"
		(or (string-not-greaterp "9" "A" ) (char<= #\Z #\0 ))
	)  ; do-test
;;
	(do-test "string-not-greaterp on the digits, using make-array"
		(strictly-not-greaterp
			(cons
				(make-array (1- diglength) :element-type 'string-char :fill-pointer t :adjustable t :displaced-to (string-trim '(#\9) digits))
				(make-array (1- diglength) :element-type 'string-char :initial-contents '(#\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9))
			)
		)
	)
;;
	(do-test "a string is string-not-greaterp itself"
		(every 'string-not-greaterp
			(list lowcase upcase digits "

" '|this is a test|)
			(list upcase lowcase digits (make-array 2 :element-type 'string-char :initial-element #\newline '|THIS IS A TEST|))
		)
	)
;;
	(do-test "string-not-greaterp keywords"
		(and
			(string-not-greaterp "12345" "123464" :end2 5)
			(string-not-greaterp "55512345" "12345" :start1 3)
			(string-not-greaterp "aBCDR" "fghi" :end1 4)
			(string-not-greaterp "12345" "55512345" :start2 3)
			(string-not-greaterp "000000001" "000000000" :end1 8 :end2 8)
			(not (string-not-greaterp "000000001" "000000000"))
		)
	)
;;
	(do-test "string-not-greaterp is nil for string of unequal length"
		(let ((letter (elt longstring longindex)))
			(not
				(string-not-greaterp
					(make-array longlength :element-type 'string-char :initial-element letter)
					(make-array (1- longlength) :element-type 'string-char :initial-element letter)
				)
			)
		)
	)
)
STOP

