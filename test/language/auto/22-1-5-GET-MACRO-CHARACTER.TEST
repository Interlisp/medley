;; Function To Be Tested: get-macro-character
;;
;; Source:        CLtL p. 362
;;
;; Chapter 22: Input/Output		Section 1.5: The Readtable
;;
;; Created By:    Peter Reidy
;;
;; Creation Date: 2 November 86
;;
;; Last Update: 2 November 86
;;
;; Filed As:      {eris}<lispcore>cml>test>22-1-5-get-macro-character.test
;;
;; Syntax: get-macro-character char &optional readtable
;;            
;; Function Description: returns the function associated with char and the value of the character's non-terminating-p flag.  Returns NIL if char is not a macro character.
;;
;; Argument(s):	char - a character
;;			readtable - the readtable in which char's syntax is to be examined; defaults to *readatable* (the readtable currently in effect)
;;			 
;;
(do-test-group (get-macro-character-part-1-group
	:after (setq *readtable* (copy-readtable nil)))
	(do-test get-macro-character-test-with-ordinary-cases
		;; Try with characters in the standard readtable
		(and
			(functionp (car (multiple-value-list (get-macro-character #\#))))
		;; This is a non-terminating macro.
			(cadr (multiple-value-list (get-macro-character #\#)))
;;
			(functionp (car (multiple-value-list (get-macro-character #\'))))
		;; This is a terminating macro.
;; Return on nil non-terminating-p not working in 29 October sysout.  See AR 6759.
			(null (cadr (multiple-value-list (get-macro-character #\'))))
		;; Some non-macros
			(null (get-macro-character #\|))
			(null (get-macro-character #\1))
		)  ; and
	)  ; do-test get-macro-character-test-with-ordinary-cases
;;
	(do-test get-macro-character-test-with-a-different-table
		;; The same characters in another readtable
		(let ((oddtable (copy-readtable nil)))
			(and
				(functionp (car (multiple-value-list (get-macro-character #\#))))
				;; This is a non-terminating macro.
				(cadr (multiple-value-list (get-macro-character #\# oddtable)))
;;
				(functionp (car (multiple-value-list (get-macro-character #\' oddtable))))
				;; This is a terminating macro.
				(null (cadr (multiple-value-list (get-macro-character #\' oddtable))))
		;; Some non-macros
				(null (get-macro-character #\| oddtable))
				(null (get-macro-character #\1 oddtable))
			)  ; and
		)  ; let
	)  ; do-test get-macro-character-test-with-a-different-table
(do-test get-macro-character-test-with-non-standard-settings-in-the-current-table
		;; The same characters in another readtable
		(let ((oddtable2 (copy-readtable nil)))
			(set-macro-character #\8 '(lambda (stream char) "this is a test") t oddtable2)
			(set-macro-character #\page '(lambda (stream char) "this is a test") nil oddtable2)
			(and
				(functionp (car (multiple-value-list (get-macro-character #\8))))
				;; This is a non-terminating macro.
				(cadr (multiple-value-list (get-macro-character #\8 oddtable2)))
;;
				(functionp (car (multiple-value-list (get-macro-character #\page oddtable2))))
				;; This is a terminating macro.
				(null (cadr (multiple-value-list (get-macro-character #\page))))
		;; Some non-macros
				(null (get-macro-character #\| oddtable2))
				(null (get-macro-character #\1 oddtable2))
			)  ; and
		)  ; let
	)  ; do-test get-macro-character-test-with-non-standard-settings-in-the-current-table
)  ; do-test-group
STOP


