;; Function To Be Tested: read-delimited-list
;;
;; Source:        CLtL p. 377
;;
;; Chapter 22: Input/Output		Section 2.1: Input from Character Streams
;;
;; Created By:    Peter Reidy
;;
;; Creation Date: 10 November 86
;;
;; Last Update: 19 January 87
;;
;; Filed As:      {eris}<lispcore>cml>test>22-2-1-read-delimited-list.test
;;
;; Syntax: read-delimited-list char &optional input-stream recursive-p 
;;            
;; Function Description: reads objects from input-stream until the next character after an object's representation (ignoring whitespace characters and comments) is char.
;;
;; Argument(s):	char - a character
;;			input-stream - 	 a stream
;;			recursive-p - if non-nil, indicates that this is an imbedded rather than top-level call
;;
;; Returns: a list of objects read			 
;;
;;
;; Steele's example, CLtL p 377-378
;;
(do-test-group read-delimited-list-group
	:before
	(progn
		(test-setq
			*readtable* (copy-readtable nil)
			test (make-string-input-stream "((p q) (p z) (p a) (q z) (q a) (z a))")
			test2 (make-string-input-stream "#{p q z a}")
		)
		(test-defun |#{-reader| (stream char arg)
			(declare (ignore char arg))
 				(mapcon
 					#'(lambda (x)
 						(mapcar
 						#'(lambda (y)
 							(list (car x) y)
 			  			  )  ; lambda
 					(cdr x)
 						)  ; mapcar
 					  )  ; lambda
 					(read-delimited-list #\} stream t)
 				)  ; mapcon
 		)  ; test-defun
	)  ; progn
	:after (progn (setq *readtable* (copy-readtable nil))(close test))
	(do-test read-delimited-list-test
		(set-dispatch-macro-character #\# #\{ #'|#{-reader|)
		(set-macro-character #\} (get-macro-character #\) nil))
		(equal (read test2) (read test))
	)  ; do-test-read-delimited-list-test
)  ; do-test-group
STOP

