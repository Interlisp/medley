;; Function To Be Tested: unread-char
;;
;; Source:        CLtL p. 379
;;
;; Chapter 22: Input/Output		Section 2.1: Input from Character Streams
;;
;; Created By:    Peter Reidy
;;
;; Creation Date: 11 November 86
;;
;; Last Update: 1-6-87 Jim Blum removed system dependent test and reorganized
;;
;; Filed As:      {eris}<lispcore>cml>test>22-2-1-unread-char.test
;;
;; Syntax: unread-char character &optional input-stream 
;;            
;; Function Description: puts character at the front of input-stream, thus setting the stream's pointer back one position.
;;
;; Argument(s):	character - a character
;;			input-stream - a stream (default: *standard-io*)
;;
;; Returns: nil			 
;;
(do-test-group 
    (unread-char-group
	:before	(test-setq
				|1 2 3 string| "1 2 3"
				numbers (make-string-input-stream "1234567890")
				river (make-string-input-stream |1 2 3 string|)
			)
;;
	:after	(mapcar 'close (list numbers river))
    )  ; unread-char-group
;;
	(do-test unread-char-returns-nil-test
		(every 'null	
			(list
				(progn	(read-char numbers)
						(unread-char #\1 numbers)
				)
			)  ; list
		)  ; every
	)  ; do-test unread-char-restores-correct-char
;;
	(do-test unread-char-unreads-just-one-character-test
	;; This also tests the default for stream.
		(let	((*standard-input* river))
			(read-char)
			(read-char)
			(read-char)
			(unread-char #\2) ; this is the "right" character
			(and
				;; Should point to the third character
				(eq #\2  (read-char))
				;; Now it should point to the fourth
				(=	(length
						(car (multiple-value-list (read-line)))
					)
					(- (length |1 2 3 string|) 3)
				)
			)  ; and
		)  ; let  
	)  ; do-test unread-char-unreads-just-one-character-test
;;
)  ; do-test-group
STOP

