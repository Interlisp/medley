;; Function To Be Tested: fresh-line
;;
;; Source:        CLtL p. 384
;;
;; Chapter 22: Input/Output		Section 3.1: Output to Character Streams
;;
;; Created By:    Peter Reidy
;;
;; Creation Date: 8 December 86
;;
;; Last Update: 
;;
;; Filed As:      {eris}<lispcore>cml>test>22-3-1-fresh-line.test
;;
;; Syntax: fresh-line &optional output-stream
;;            
;; Function Description: puts a newline out to stream iff stream is not at the beginning of a line.
;;
;; Argument(s):	stream - a stream (defaults to *standard-output*)
;;
;; Returns: t if a newline was output, else nil			 
;;
(do-test-group
	(fresh-line-group
	:before
		(progn
			(test-setq yes-examples
				;; These do not write a newline themselves, so fresh-line will be required.
				(list 	
					#'(lambda () (print 1 charstream))
					#'(lambda () (prin1 1 charstream))
					#'(lambda () (write-string "1" charstream))
					#'(lambda () (princ 'simple charstream))
					#'(lambda () (princ '\c\ om\ \plicated charstream))
					#'(lambda () (terpri charstream) (fresh-line charstream) (princ '\c\ om\ \plicated charstream))
					#'(lambda () (write-char #\1 charstream))
				)  ; list
;;
				no-examples
				;; These write a newline themselves, so fresh-line won't be required.
				(list 	
					#'(lambda () (terpri charstream))
					#'(lambda () (fresh-line charstream))
					#'(lambda () (write-line "1" charstream))
				)  ; list
			)  ; test-setq
;;
			(test-defun fresh-line-test (function)
			"Execute function (which puts something out to charstream) then (fresh-line charstream).  Return the value of fresh-line."
				(funcall function)
				(fresh-line charstream) 
			)  ; test-defun
		)  ; progn
	)  ; fresh-line group
;;
	(do-test "fresh-line returns t if not at the beginning of a line"
		(let ((charstream (make-string-output-stream)))
			(declare (special charstream))
			(prog1
				(notany 'null
					(mapcar 'fresh-line-test yes-examples)
				)  ; notany
				(close charstream)
			)  ; prog1
		)  ; let
	)  ; do-test "fresh-line returns t if not at the beginning of a line"
;;
	(do-test "fresh-line returns nil if already at the beginning of a line"
		(let ((charstream (make-string-output-stream)))
			(declare (special charstream))
			(prog1
				(every 'null
					(mapcar 'fresh-line-test no-examples)
				)  ; every
				(close charstream)
			)  ; prog1
		)  ; let
	)  ; do-test "fresh-line returns nil if already at the beginning of a line"
	(do-test "fresh-line writes a #\newline"
	;; If fresh-line is true - i.e. if an output command has left the stream-pointer where fresh-line will actually put out a newline - the last character of the output (the first of its reverse) will be #\newline.
		(every
			#'(lambda (newline-position) (= 0 newline-position))
			(mapcar
				#'(lambda (item)
					(position #\newline
						(reverse
							(with-output-to-string (charstream)
							(declare (special charstream))
								(progn (funcall item)(fresh-line charstream))
							)  ; with-output-to-string
						)
					)  ; position
				)  ; lambda
				yes-examples
			)  ; mapcar
		)  ; every
	)  ; do-test "fresh-line writes a #\newline"
)  ; do-test-group
STOP

