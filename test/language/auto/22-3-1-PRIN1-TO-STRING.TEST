;; Function To Be Tested: prin1-to-string
;;
;; Source:        CLtL p. 383
;;
;; Chapter 22: Input/Output		Section 3.1: Output to Character Streams
;;
;; Created By:    Peter Reidy
;;
;; Creation Date: 7 December 86
;;
;; Last Update:
;;
;; Filed As:      {eris}<lispcore>cml>test>22-3-1-prin1-to-string.test
;;
;; Syntax: prin1-to-string object
;;            
;; Function Description: outputs object as a string with escape characters.
;;
;; Argument(s):	object - a cml object
;;
;; Returns: a string containing the representation of object			 
;;
(do-test-group
	(prin1-to-string-group
	:before
		(progn
			(test-setq examples (list
				(make-array '(3 5) :adjustable t) ; array
				'100.88 ; atom
				(1+ most-positive-fixnum) ; bignum
				1 ; bit
				(make-array 3 :element-type 'bit :fill-pointer 2) ; bit-vector
				#\newline ; character
				(car (list-all-packages)) ; common
				#'cons ; compiled-function
				#c(3 3) ; complex
				'(1 . 2) ; cons
				1.00 ; double-float
				#'(lambda nil 100) ; function
				(make-hash-table) ; hash-table
				100000 ; integer
				:skate ; keyword
				(cons nil nil) ; list
				2.25 ; long-float
	;;					nothing for type NIL
				nil ; null
				.4761 ; number
				*package* ; package
				*default-pathname-defaults*
				(make-random-state)
				3/4 ; ratio, rational
				(copy-readtable)
				"sequence"					
				3.33 ; short-float
				"simple array"
				(make-array 10) ; simple-vector
				.5 ; single-float
				#\5 ; standard-char
				*standard-input* ; stream
				(make-array 5 :element-type 'string-char :adjustable t) ; string
				#\  ; string-char
				'\A\ bcd\E  ; symbol
				nil ; t
				"vector"
				)  ; list
			)  ; test-setq
			(test-defun find-escape (object)
			"Look for a escape-characters in a string: at least one #\\ or  two #\|'s, at the start and end, or else #\"'s at the start and end." 
				(or
					(position #\\ object)
					(and
						(eq 0 (position #\| object))
						(eq 0 (position #\| (reverse object)))
					)  ; and
					(and
						(eq 0 (position #\" object))
						(eq 0 (position #\" (reverse object)))
					)  ; and
				)  ; or
			)  ; test-defun find-escape
			(test-defun compare (object)
			"Compare prin1-to-string with princ-to-string for a given object (symbol or string).  See that the first representation contains escape characters and the second doesn't."
				(and
					(find-escape (prin1-to-string object))
					(not (find-escape (princ-to-string object)))
				)
			)
		)  ; progn
	)  ; prin1-to-string-group
	(do-test "prin1-to-string all types"
	;; Prin1-to-string an example of each of the standard types
		(every #'(lambda (object) (stringp (prin1-to-string object))) examples)
	)  ; do-test "prin1-to-string all types"
;;
	(do-test "compare prin1-to-string with princ-to-string"
		(every 'compare (list '|A
String with Upper and
Lower
Case and Linefeeds| '\123 "this is a string" (make-array (1+ (random 20)) :element-type 'string-char :initial-element #\t) 'ab\c '\a\ \b\ \c)
		)
	)  ; do-test "compare prin1-to-string with princ-to-string"
)  ; do-test-group
STOP

