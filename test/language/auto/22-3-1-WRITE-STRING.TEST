;; Function To Be Tested: write-string
;;
;; Source:        CLtL p. 384
;;
;; Chapter 22: Input/Output		Section 3.1: Output to Character Streams
;;
;; Created By:    Peter Reidy
;;
;; Creation Date: 8 December 86
;;
;; Last Update: JRB - 9 March 87 - Fixed bug in rand{12} selection
;;
;; Filed As:      {eris}<lispcore>cml>test>22-3-1-write-string.test
;;
;; Syntax: write-string string &optional output-stream &key :start :end
;;            
;; Function Description: writes string (delimited by :start and :end) to output-stream
;;
;; Argument(s)
;;	string: a string
;;	output-stream: a stream (default: *standard-output*)
;;	:start, :end: delimiters within string.
;;
;; Returns: string (entire, regardless of :start and :end)			 
;;
;;NOTE: the test files for write-string and write-line contain virtually identical code, and changes to one file should be made to the other.
;;
(do-test-group (write-string-group
	:before (progn
			(test-setq simcase "simple case" sclen (length simcase) newline "
" rand1 (random 10) rand2 (+ (random 3) 10))  ; test-setq
			(test-defun readback (write-string-call)
			"Write-string an expression to a file (with variable write call) and read-line it back; return the object read."
				(let	((stream (open 'file :direction :output :if-exists :new-version :if-does-not-exist :create :element-type 'unsigned-byte)))
					(declare (special stream))
					(funcall write-string-call)
					(close stream)
				)
				(let ((stream (open 'file :element-type 'unsigned-byte :direction :input)))
					(prog1 (read-line stream) (close stream) (delete-file 'file))
				)
			)  ; test-defun readback
;;
			(test-defun compare ( writestringcall writelinecall)
			"See that a string written with write-string does not end with #\newline while a string written with write-line does."
				(and
					(not (eq 0 (search newline (revstring writestringcall))))
					(= 0 (search newline (revstring writelinecall))) 
				)  ; and
			
			)
;;
			(test-defun revstring (writecall)
			"Reverse string, capturing the end-character that write-line may have added."
				(reverse
					(with-output-to-string (charstream)
						(declare (special charstream))
						(funcall writecall)
					)
				)  ; reverse
			)  ; test-defun revstring
		)  ; progn
	)  ; write-string-group
;; NOTE: not working in 18 Nov. sysout; write-line returns the substring, not the full string (AR 7023).
	(do-test "write-string returns the full input string"
		(every
			#'(lambda (string start end) (string= string (write-string string nil :start start :end end)))
			(list simcase "string
with   
linefeeds and    spaces." (make-array 25 :initial-element #\newline :element-type 'string-char))
			(list 0 (random 5) 2)
			(list sclen (+ 5 (random 20)) 19)
		)
	)  ; do-test "write-string returns the full input string"
;;
	(do-test "write-string writes just the substring"
		(every
			#'(lambda (string start end)
				(string= (subseq string start end)
					(readback #'(lambda () (write-string string stream :start start :end end)))
				)  ; string=
			)  ; lambda
			(list simcase (make-array 50 :element-type 'string-char :initial-element #\" :adjustable t) (symbol-name '|This is a 
 symbol.|))
			(list 0 (random 20) 4)
			(list sclen (+ 20 (random 32)) 10)
		)
	)  ; do-test "write-string writes just the substring"
;;
	(do-test "write-string doesn't add a linefeed, while write-line does"
		(every 'compare
			(list
				#'(lambda nil (write-string simcase charstream))
				#'(lambda nil (write-string (symbol-name '|This expression
has to be
at least thirty characters long|) charstream))
				#'(lambda nil (write-string (symbol-name '|This expression
has to be
at least thirty characters long|) charstream :start rand1 :end rand2))
			)
			(list
				#'(lambda nil (write-line simcase charstream))
				#'(lambda nil (write-line (symbol-name '|This expression
has to be
at least thirty characters long|) charstream))
				#'(lambda nil (write-line (symbol-name '|This expression
has to be
at least thirty characters long|) charstream :start rand1 :end rand2))
			)
		)  ; mapcar
	)  ; do-test "write-string doesn't add a linefeed, while write-line does"
)  ; do-test-group
STOP

