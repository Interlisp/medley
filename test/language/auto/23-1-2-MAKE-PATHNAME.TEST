;; Function To Be Tested: MAKE-PATHNAME
;;
;; Source:        Steele's book    
;;                Section 23.1.2	PATHNAME Functions        
;;                Page: 416
;;
;; Created By:    Henry Cate III
;;
;; Creation Date: November 12,1986
;;
;; Last Update:    
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>23-1-2-MAKE-PATHNAME.TEST
;;
;;
;; Syntax:        (MAKE-PATHNAME &key :host :device :directory 
;;							  :name :type :version :defaults)
;;
;;
;;
;; Function Description:
;;     creates a pathname
;; 
;; 
;; 
;; Argument(s):   host - the name of the host
;;			   device - the name of the device
;;			   directory - the name of the directory
;;			   name - the name of the file
;;			   type - the type of file it is
;;			   version - the version of the file
;;			   defaults - the default values
;;
;; Returns:       a pathname 
;;



(do-test "Simple make-pathname: host & name only"
  (let ((temp-pathname (make-pathname :host "core" :name "hello")))
  (and
	(pathnamep temp-pathname)
	(string-equal "{CORE}HELLO" (namestring temp-pathname))
  )))

(do-test "Make sure host defaults."
  (let ((*default-pathname-defaults* (pathname "{test}dev:<dir>foo.bar;3")))
	(string-equal "{test}xxx"
	   (namestring (make-pathname :device nil :directory nil :name "xxx")))
))


(do-test "Make sure only host defaults."
  (let ((*default-pathname-defaults* (pathname "{test}dev:<dir>foo.bar;3")))
	(string-equal "{test}xxx"
	   (namestring (make-pathname :name "xxx")))
))



(do-test "Make sure NILs don't default or fill in."
  (let ((*default-pathname-defaults* (pathname "{test}dev:<dir>foo.bar;3")))
	(and
		(string-equal "{test}d.e"
		  (namestring (make-pathname :name "d.e")))
		(string-equal "{test}d.e"
		  (namestring (make-pathname :device NIL :name "d.e")))
		(string-equal "{test}d.e"
		  (namestring (make-pathname  :directory NIL :name "d.e")))
		(string-equal "d.e"
		  (namestring (make-pathname :host NIL :name "d.e")))
		(string-equal "{test}d.e"
		  (namestring (make-pathname :version NIL :name "d.e")))
)))


(do-test "Make sure :defaults fills in"
  (let ((dff (pathname "{x}y:<z>w.t;1")))
	(and
		(string-equal "{a}b:<c>d.e;3"
		  (namestring (make-pathname :defaults dff :host "a"
					:device "b" :directory "c"
					:name "d" :type "e" :version 3)))
		(string-equal "{x}b:<c>d.e;3"
		  (namestring (make-pathname :defaults dff 
					:device "b" :directory "c"
					:name "d" :type "e" :version 3)))
		(string-equal "{a}y:<c>d.e;3"
		  (namestring (make-pathname :defaults dff :host "a"
					:directory "c"
					:name "d" :type "e" :version 3)))
		(string-equal "{a}b:<z>d.e;3"
		  (namestring (make-pathname :defaults dff :host "a"
					:device "b"
					:name "d" :type "e" :version 3)))
		(string-equal "{a}b:<c>w.e;3"
		  (namestring (make-pathname :defaults dff :host "a"
					:device "b" :directory "c"
					:type "e" :version 3)))
		(string-equal "{a}b:<c>d.t;3"
		  (namestring (make-pathname :defaults dff :host "a"
					:device "b" :directory "c"
					:name "d" :version 3)))
		(string-equal "{a}b:<c>d.e;1"
		  (namestring (make-pathname :defaults dff :host "a"
					:device "b" :directory "c"
					:name "d" :type "e")))
)))


STOP