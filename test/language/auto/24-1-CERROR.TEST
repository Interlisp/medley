;; Function To Be Tested: cerror
;;
;; Source: Guy L Steele's CLTL
;; Section: 24.1 ERRORS (General Error-Signalling Functions)
;; Page: 431
;;
;; Created By:   John Park
;;
;; Creation Date: Nov 3, 1986
;;
;; Last Update:   
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>24-1-cerror.test
;;
;;
;; Syntax:        (cerror format-string &rest args)
;;
;; Function Description: This function is used to signal continuable errors.  Like error,
;; it signals an error and enters the debugger.  However, cerror allows the program to
;; be continued from the debugger after resolving the error.  If the program is continued
;; after encountering the error, cerror returns nil.  The code that follows the call to
;; error will then be executed. This code should correct the problem, perhaps by 
;; accepting a new value from the user if a variable was invalid.
;;
;; Argument(s): format-string: Error message (same way that error uses it).
;;			continue-format-string:  This is given as a control string to format
;;				along with the args to construct a message string.
;;			Args: 
;;			  
;; Returns:     T
;;
;; Constraints/Limitations: Due to the nature of cerror function, which enters the
;; debugger (break), this test should be conducted manually to see if correct error
;; messages are returned.  It's unrealistic to execute this kind of test automatically
;; though it is not impossible.



(do-test-group ("cerror-test-setup"
		:before (progn
				(defun cerror-example (vals)

					"**This is an example of where the caller of cerror, if
						continued, fixes the problem without any further
						user interaction**"

					(let ((nvals (list-length vals)))
					   (unless (= nvals 3)
						(cond ((< nvals 3)
							(cerror "Assume missing values are zero."
								   "Too few values in ~S;~%~
									three are required, ~
									but ~R ~:[were~;was~] supplied."
									nvals (= nvals 1))
							(setq vals (append vals (subseq '(0 0 0) nvals))))
						(T (cerror "Ignore all values after the first three."
								 "Too many values in ~S;~%~
								  three are required, ~
								  but ~R were supplied."
								  nvals)
							(setq vals (subseq vals 0 3))))))
					)

				 (defun known-wordp (word)

					"**This is called by the second cerror-example and returns
						T if it is a member of the known-wordp-list**"

					(if (member word '(this is a known wordp list))  T)
				  )

				(defun cerror-example-2 (word)

					" In this example a loop is used to ensure that a test
						is satisfied"
					(do ()
						((known-wordp word) word)
					   (cerror "You will be prompted for a replacement word."
							"~S is an unknown word (possible misspelled)."
							word)
					   (format *query-io* "~&New word: ")
					   (setq word (read *query-io*)))
				  )


				
			 )
		)

(do-test "cerror-exist?"
		 (fboundp 'cerror)
)
(do-test "cerror-test-1"
		 (eq (cerror-example '(1 2 3)) NIL)
)

(do-test "cerror-test-2"
		(and (eq (cerror-example-2 'WORDP) 'WORDP)
			(eq (cerror-example-2 'THIS) 'THIS)
		)
)
		

;; The following tests should be performed manually
;;
;; Does the following test return the delineated error message in a similar format
;; if not totally identical?  Is the value returned after continuation equal to
;; '(-47 0 0).  This is for the first condition where nvals < 3.
;;
;;	(do-test "cerror-test-2"
;;			 (cerror-example '(-47))
;;	)
;;	Should return: "Error: Too few values in (-47);
;;				three are required, but one was supplied.
;;				Error signalled by function example-cerror.
;;					If continued: Assume missing values are zero.")
;;		
;; Does the following test return the delineated error message in a similar format	
;; if not totally identical?  Is the value returned after continuation equal to
;; '(4 5 6).  This is for the second condition where nvals > 3.
;;		
;;	(do-test "cerror-test-2"
;;			(cerror-example '(4 5 6 7))
;;	)
;; Should return:	"Error: Too many values in (4 5 6 7);
;;				three are required, but four were supplied.
;;				Error signalled by function example-cerror.
;;					If continued: Ignore all values after the first three.")
;; 
;; Does the following test prompt you for a new word if the given word is not part
;; of KNOWN-WORDP-LIST (THIS IS A KNOWN WORDP LIST).
;;	(do-test "cerror-test-3"
;;		 (cerror-example-2 'NOWN)
;;	)

)

STOP


