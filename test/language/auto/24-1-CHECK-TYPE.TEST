;; Function To Be Tested: check-type
;;
;; Source: Guy L Steele's CLTL
;; Section: 24.1 ERRORS (General Error-Signalling Functions)
;; Page: 433
;;
;; Created By:   John Park
;;
;; Creation Date: Nov 5, 1986
;;
;; Last Update:  Jan 15, 1987 
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>24-1-check-type.test
;;
;;
;; Syntax:        (check-type place typespec &optional string )
;;
;; Function Description: Check-type signals an error if the contents of place are not
;; of the desired type.  If the user continues from this error, he will be asked for a 
;; new value; check-type will store the new value in place and start over, checking 
;; the type of the new value and signalling another error if it is still not of the
;; desired type.  Subforms of place may be evaluated multiple times because of the
;; implicit loop generated. The error message will mention place, its contents, and
;; the desired type.
;;
;; Argument(s): Place:  Generalized variable reference acceptable to setf.
;;			Typespec: a type specifier; it is not evaluated.
;;			String (optional): English description of the type, starting with an
;;			 indefinite article ("a" or "an"); it is evaluated.  If string is not
;;			  supplied, it is computed automatically from typespec.
;;			  
;; Returns:     NIL
;;
;; Constraints/Limitations: Due to the nature of check-type function, which enters the
;; debugger (check-type), this test should be conducted manually to see if correct error
;; messages are returned.  It's unrealistic to execute this kind of test automatically
;; though it is not impossible. Tests requiring user interface are commented out.



(do-test "check-type-test-0"
		(macro-function 'check-type) ; Does check-type have a macro definition?
)

(do-test "check-type-test-1"
		(let ((array-type (make-array 10 :initial-element 7))
				(atom-type 'adam)
				(bignum-type (+ 1 most-positive-fixnum))
				(bit-type 0)
				(character-type #\A)
				(common-type 'abc)
				(compiled-type #'cos)
				(complex-type #C(1 2))
				(cons-type '(a b c))
				(double-float-type most-positive-double-float)
				(fixnum-type most-positive-fixnum)
				(hash-table-type (make-hash-table 10))
				(function-type 'xyz)
				(integer-type 10000)
				(keyword-type ':element-type)
				(null-type nil)
				(number-type 820)
				(package-type (find-package 'user))
				(pathname-type (make-pathname))
				(random-type (make-random-state))
				(ratio-type 3/4)
				(read-table-type *readtable*)
				(string-type "hello")
				(stream-type *standard-input*))
	            (and
				(null (check-type array-type (array)))
				(null (check-type atom-type (atom symbol)))
				(null (check-type bignum-type (bignum)))
				(null (check-type bit-type (bit)))
				(null (check-type character-type (character)))
				(null (check-type common-type (common)))
				(null (check-type cons-type (cons)))
				(null (check-type compiled-type (compiled-function)))
				(null (check-type complex-type (complex)))
				(null (check-type double-float-type (float)))
				(null (check-type fixnum-type (fixnum integer)))
				(null (check-type hash-table-type (hash-table)))
				(null (check-type function-type (function)))
				(null (check-type integer-type (fixnum integer)))
				(null (check-type keyword-type (keyword)))
				(null (check-type null-type (null)))
				(null (check-type number-type (number integer)))
				(null (check-type package-type (package)))
				(null (check-type pathname-type (pathname)))
				(null (check-type ratio-type (ratio rational)))
				(null (check-type read-table-type (readtable)))
				(null (check-type null-type (null)))
				(null (check-type string-type (string))))
			)
)
				

				
(do-test "check-type-test-2"
		(and(setq aardvarks '(sam harry fred))
		    (null(check-type aardvarks (list))
			(setq narrds 1)
			(null (check-type narrds (integer 0 *)))
		)
) ; Should not break 


;; The following should break, print the appropriate error message, prompt for 
;; a correct value, and return.

;;(do-test "check-type-test-3"
;;		(and(setq aardvarks '(sam harry fred))
;;		    (setq new-aardvarks '(1 2 3)) 
;;		    (null (check-type aardvarks (list integer))) ;Enter new-aardvarks
;;		) 
;;) 



STOP


