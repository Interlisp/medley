;; Function To Be Tested: error
;;
;; Source: Guy L Steele's CLTL
;; Section: 24.1 ERRORS (General Error-Signalling Functions)
;; Page: 429
;;
;; Created By:   John Park
;;
;; Creation Date: Oct 31, 1986
;;
;; Last Update:   
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>24-1-error.test
;;
;;
;; Syntax:        (error format-string &rest args)
;;
;; Function Description: This function signals a fatal error.  It is impossible
;; to continue from this kind of error; thur error will never return to its
;; caller
;; 
;; Argument(s): format-string: Error message
;;			Args: 
;;			  
;; Returns:     T
;;
;; Constraints/Limitations: none



(do-test-group ("error-test-setup"
		:before (progn
				(defun command-dispatch (cmd)
					"**Error message is printed if a symbol has no
						property named command**"
					(let ((fn (get cmd 'command)))
						(if (not (null fn))
						(funcall fn)
						(error "The command ~S is unrecognized." cmd))))
				(defun turn-off-val1 () "ABANDON!")

				(setf (symbol-plist 'emergency-shutdown)
						'(command turn-off-val1 switch emergency
							reactor-status 7))
				)
			)

(do-test "error-test"
		(and (string-equal (command-dispatch 'emergency-shutdown)
					    "ABANDON!")
			;;(if (string-equal (lisp-implementation-type) "Xerox")
			;;	(eq (il:nlsetq (command-dispatch 'emergency-shotdown)) nil)
				
		)
)
)


STOP


