;; Function To Be Tested: warn
;;
;; Source: Guy L Steele's CLTL
;; Section: 24.1 ERRORS (General Error-Signalling Functions)
;; Page: 432
;;
;; Created By:   John Park
;;
;; Creation Date: Nov 4, 1986
;;
;; Last Update:  Dec 19, 1986 
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>24-1-warn.test
;;
;;
;; Syntax:        (warn format-string &rest args)
;;
;; Function Description: This function prints an error message, but normally doesn't go
;; into the debugger.  (However, this may be controlled by the variable 
;; *break-on-warnings*). Warn returns nil.  This function would be just the same as 
;; format with the output directed to the stream in *error-output*, except warn may
;; perform various implementation-dependent formatting and other actions.  For example,
;; an implementation of warn should take care of advancing to a fresh line before and
;; after the error message and perhaps supplying the name of the function that called
;; warn.
;;
;; Argument(s): format-string: Error message .
;;			
;;			Args: 
;;			  
;; Returns:     Error message or NIL
;;
;; Constraints/Limitations: Due to the nature of warn function, which enters the
;; debugger (break), this test should be conducted manually to see if correct error
;; messages are returned.  It's unrealistic to execute this kind of test automatically
;; though it is not impossible.


(do-test-group ("warn-test-setup"
		:before (progn
				(defun command-dispatch (cmd)
					"**Error message is printed if a symbol has no
						property named command**"
					(let ((fn (get cmd 'command)))
						(if (not (null fn))
						(funcall fn)
						(warn "The command ~S is unrecognized." cmd))))
				(defun turn-off-val1 () "ABANDON!")

				(setf (symbol-plist 'emergency-shutdown)
						'(command turn-off-val1 switch emergency
							reactor-status 7))
				)
			)

(do-test "warn-test-variable"
		(boundp '*break-on-warnings*) ; Does this variable exist?
)

(do-test "warn-test1"
		(and (string-equal (command-dispatch 'emergency-shutdown)
					    "ABANDON!")
			(let ((*break-on-warnings* NIL)) 
				(or (eq (command-dispatch 'emergency-shutdown) NIL) ; This should not break
				    (ignore-errors (command-dispatch 'emergency-shotdown))
					; should not invoke the debugger
				)
			)
		)
)

;; The following is tested manually, in which case the function warn should break 
;; or go into the debugger since *break-on-warnings* is set to NIL.
;; (do-test "warn-test2"
;;	 (let ((*break-on-warnings* T)) 
;;				(command-dispatch 'emergency-shotdown))
;; )
;;
)


STOP


