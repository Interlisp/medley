;; Function To Be Tested:  describe
;;
;; Source: Guy L Steele's CLTL Chapter 25:Miscellaneous Features
;; Section: 25.3  Debugging Tools
;; Page: 441
;;
;; Created By:   John Park
;;
;; Creation Date: Sep 9, 1986
;;
;; Last Update:  Dec 23, 1986 
;;
;; Filed As: {ERIS}<LISPCORE>CML>TEST>25-3-describe.test
;;
;;
;; Syntax:        (describe object)
;;
;; Function Description: Describe prints, to the stream in the variable
;; *standard-output*, information about the object. Sometimes, it will describe 
;; something that it finds inside something else; such recursive descriptions are
;; indented appropriately.  For instance, describe of a symbol will exhibit the
;; symbol's value, its definition, and each of its properties.  Describe of a
;; floating-point number will exhibit its internal representation in a way that
;; is useful for tracking down round-off errors and the like.  
;;
;; Argument(s):  object
;;			  
;; Returns: no values or what the expression (values) returns.  
;;
;; Constraints/Limitations: Visual inspection of results is required to see if
;; the function describe prints sufficient information about the object. This is
;; dependent upon each implementation but it should return (values).
;; The following is an example of what describe might print:
;; (setq array-1 (make-array '(3 4) :initial-element 0))
;; (describe array-1) => It is a simple-array (brief description)
;; Dimensions: (3 4) Element Type: t Adjustable: no Displaced: no, etc.

(do-test "describe-test-function"
	 (flet ((factorial (n)
				(lambda (n)(cond ((zerop n) 1)
						  	(t (* n (factorial (1- n))))))))
			(eq (describe 'factorial) (values))
	 )
)
(do-test "describe-test-string"
	(let ((xyz "string"))
		(eq (describe xyz) (values))

	)
)
(do-test "describe-test-number"
	(let ((number-1 10000.88))
		(eq (describe number-1) (values))
	)
)
(do-test "describe-test-hashtable"
	(let ((hashtable (make-hash-table :size 9)))
		(eq (describe hashtable) (values))
	)
)
(do-test "describe-test-array"
	(let ((array-1  (make-array '(3 4) :initial-element 0)))
		(eq (describe array-1) (values))
	)
)
(do-test "describe-test-structure"
	(let ((structure (defstruct line a b c)))
			(eq (describe structure) (values))
	)
)
(do-test "describe-test-package"
	(let ((package-1 
			(make-package "abc-package" :nicknames '("NICKNAME-10"))))
		(and (eq (describe package-1) (values))
			(if (and (fboundp 'delete-package)
					(member (find-package "abc-package") 
							  (list-all-packages))
				)
				(progn (delete-package (find-package "abc-package"))
					  (identity T)
				)
			  T)
		)
	)
)


STOP




