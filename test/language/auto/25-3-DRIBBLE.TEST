;; Function To Be Tested:  dribble
;;
;; Source: CLTL Chapter 25:Miscellaneous Features
;; Section: 25.3  Debugging Tools
;; Page: 443
;;
;; Created By:   John Park
;;
;; Creation Date: Sep 10, 1986
;;
;; Last Update:   October 9, 1986, Herb Jellinek, Dec 15, 86, John PARK
;;
;; Filed As: {ERIS}<LISPCORE>CML>TEST>25-3-dribble.test
;;
;;
;; Syntax:        (dribble &optional pathname)
;;
;; Function Description: (dribble pathname) rebinds *standard-input* and *standard-
;; output*, and/or takes other appropriate action, so as to send a record of the 
;; input/output interaction to a file named by pathname.  (dribble) terminates the
;; recording of input and output and closes the dribble file.
;;
;; Argument(s):  pathname (optional)
;;			  
;; Returns:  NIL when opened and the name of dribble file when it's closed. 
;;
;; Constraints/Limitations: Due to differences in filenaming convention among
;; various operating systems, only xerox implementation is tested.  For other
;; systems, use appropriate filenames for the test.

 ;;
;;;; Watch out for implementation-dependent filenames below
 ;;

(do-test-group 
	("dribble-test-setup"
	:before	(progn 
				(defun file-exists? (file) "Is the dribble file created?"
					(cond ((probe-file file) t)
						(t nil)))
				(defun delete-if-exists (file) "Delete if dribble file exists"
					(cond ((probe-file file) (delete-file file))
						(t t)))
			)

	:after	(progn
				; just in case the file is not dribbled during test
				(dribble)
			)
	)
(do-test "dribble-test"
	(if (string-equal (lisp-implementation-type) "xerox")
		(progn 
			(and (not (dribble (pathname "{core}test-dribble")))
				(print "some output")
				(dribble) 
				(file-exists? "{core}test-dribble")
				(delete-if-exists "{core}test-dribble")
			)
		)
		(fboundp 'dribble)) ; Is it defined if not the xerox implementation?
)
)
	 

STOP




