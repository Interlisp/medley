;; Function To Be Tested: decode-universal-time
;;
;; Source: Guy L Steele's CLTL Chapter 25: Miscellaneous Features
;; Section: 25.4.1  Time Functions
;; Page: 446
;;
;; Created By:   John Park
;;
;; Creation Date: Aug 19,1986
;;
;; Last Update: Oct 2, 1986  
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>25-4-decode-universal-time.test
;;
;;
;; Syntax:        (decode-universal-time universal-time &optiona time-zone)
;;
;; Function Description: This function  returns the time specified by universal-time
;; in Universal Time format, converted to Decoded Time format.
;; 
;; Argument(s):   Universal-time: time in Universal Time format (integer)
;;			time-zone (&optional): integer (between -12 and 12)
;;			  
;; Returns: Nine values (second, minute, hour, date, month, year, day-of-week,
;;				daylight-saving-time-p, and time-zone)   
;;
;; Constraints/Limitations: none

(do-test-group ("decode-universal-time-setup"
	:before (progn
		
		(setq universal-time  (get-universal-time))
		(setq decoded-time (multiple-value-list
				(decode-universal-time universal-time)))
		(setq decoded-time-zone0 (multiple-value-list
				(decode-universal-time universal-time 0)))
		(setq decoded-time-zone9 (multiple-value-list
				(decode-universal-time universal-time 9)))
		(setq Oct-1-86 (encode-universal-time 54 25 13 1 10 1986))
		(defun decode-universal-timep (time-list) 
			  (if (and (eq (list-length time-list) 9)
					(every #'integerp
						(remove (eighth time-list) time-list))
					(and (>= (first time-list) 0) (<= (first time-list) 59))
					(and (>= (second time-list) 0) (<= (second time-list) 59))
					(and (>= (third time-list) 0) (<= (third time-list) 23))
					(and (>= (fourth time-list) 1) (<= (fourth time-list) 31))
					(and (>= (fifth time-list) 1) (<= (fifth time-list) 12))
					(>= (sixth time-list) 1986)
					(and (>= (seventh time-list) 0) (<= (seventh time-list) 6))
					(or (eq (eighth time-list) T)(eq (eighth time-list) NIL))
					(and (>= (ninth time-list) -12)(<= (ninth time-list) 12)))
					t
				nil))))


(do-test "decode-universal-time-test"
		(and (decode-universal-timep decoded-time)
			(decode-universal-timep decoded-time-zone0) 
			(decode-universal-timep	decoded-time-zone9)
			(eq (ninth decoded-time-zone0) 0) 
			(eq (ninth decoded-time-zone9) 9) 
			(> universal-time Oct-1-86)
			)))
			
STOP


