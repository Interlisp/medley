;; Macro To Be Tested: deftype (and the cml type specifiers)
;;
;; Source:        CLtL p. 50
;;
;; Chapter 4: Type Specifiers		Section 7: Defining New Type Specifiers
;;
;; Created By:    Peter Reidy
;;
;; Creation Date:  27 August 86
;;
;; Last Update:    27 August 86
;;
;; Filed As:      {eris}<lispcore>cml>test>4-7-deftype-and-type-specifiers.test
;;
;; Syntax: deftype name lambda-list {declaration|doc-string}* {form}*            
;;
;; Function Description: Define a new type specifier.
;;
;; Argument(s):	name:	the type name
;;			lambda-list: arguments to the type specifier
;;			{declaration|doc-string}*: just one of these, or neither, may appear
;;			{form}*: zero or more or these as the body of the type specifier
;;			
;; Returns: name
;;
(do-test-group deftype-group
		:before
		(progn
			(test-setq
                     string "deftype defines a new type specifier."
                     pname (make-pathname)
                     rtable *readtable*
                     simvec '#(1 2 3 #\a #\B #\c *package*)
                     vcvec (make-array (random 6) :element-type '(complex integer)
                                                  :displaced-to (make-array 10 :element-type '(complex integer)))
                     svcvec (make-array (random 6) :element-type '(complex integer))
                     sname (symbol-name (gentemp))
			)
;; Rem0 has to be global, because anything SATISFIES uses has to be global.
			(test-defun rem0 (arg) (= 0 (rem arg 2)))
		)  ; progn
;;
	(do-test member-true-test
;; The EQUAL checks to see if deftype returns the type name.
		(and
			(eq (deftype oddlot () `(member 0 ,pname ,rtable ,*package* ,string)) 'oddlot)
			(every #'(lambda (arg) (typep arg 'oddlot))
				(list
					0
					*package*
					pname
					rtable
					string
				)
			)
		)
	)  ; do-test 4-4-member-true-test
;;
	(do-test 4-4-member-false-test
		(notany #'(lambda (arg) (typep arg 'oddlot))
			(list
				;; String= isn't sufficient.
				"deftype defines a new type specifier."
				;; Objects of different type are never eql.
				0.0
			)
		)
	)  ; do-test 4-4-member-false-test
;;
	(do-test 4-4-satisfies-test
		(and
			(eq (deftype even () '(and (satisfies integerp) (satisfies rem0)))
			 `even)
			(typep 100 'even)
			(not (typep 100.00 'even))
			(rem 100.0 2)
			(eq 'oddorstring (deftype oddorstring () '(or oddlot string)))
			(typep string 'oddorstring)
			(typep "deftype defines a new type specifier." 'oddorstring)
			(not (typep 0.00 'oddorstring))
		)  ; and
	)  ; do-test 4-4-satisfies-test
;;
	(do-test 4-5-array-test
		(and
;; v2da is a type containing vectors of any length whose elements are 2-dimensional integer arrays.  Width and height of the element integers may be specified. 
			(eq 'v2da (deftype v2da (&optional width height) `(array  (array integer ,width ,height) (*))))
			(typep
				(make-array (random 20) :initial-element (make-array '(2 2) :initial-contents (list (list 1 2) (list 3 4))))
				'v2da)
			(typep
				(make-array 10 :element-type '(array integer (5 4)) :fill-pointer t)
				'(v2da (5 4)))
		)  ; and
	)  ; do-test 4-5-array-test
;;
	(do-test 4-5-simple-array-test
;; Must be simple-arrays with only string-chars.  This includes all simple strings, but also multi-dimensional arrays.
		(and
			(eq 'simple-and-string (deftype simple-and-string () '(and simple-array (array string-char))))
			(typep
				(make-array '(5 4 3 2 1) :initial-element #\newline :element-type 'string-char)
				'simple-and-string)
			;; Not limited to string-char
			(not (typep
				(make-array '(5 4 3 2 1) :initial-element #\newline)
				'simple-and-string))
			;; Not simple.
			(not (typep
					(make-array '(5) :initial-element #\newline :element-type 'string-char :fill-pointer t)
					'simple-and-string))
			(not (typep
					(make-array 20 :element-type 'string-char :displaced-to "This is a string of more than twenty characters.")
					'simple-and-string))
			(not (typep
					(make-array '(3 3 3) :element-type 'string-char :adjustable t)
					'simple-and-string))
		)  ; and
	)  ; do-test 4-5-simple-array-test

;;
;; NOTE: not working in 30 Dec. sysout; see AR 7184.
	(do-test 4-5-symbol-names-test	
	(and (typep (symbol-name 'atom) 'string)
		(typep (symbol-name 'atom) 'array)
		(typep (symbol-name 'atom) '(array string-char))
	     (typep (symbol-name 'atom) '(array string-char (*))))
	)  ; do-test 4-5-symbol-names-test		
;;
	(do-test 4-5-vectors-and-complex-test
		(and
			(eq 'vc (deftype vc () '(vector (complex integer) *)))
			(eq 'svc (deftype svc () '(simple-vector *)))
			(typep svcvec 'vc)
			(typep svcvec 'svc)
			(notany #'(lambda (arg type) (typep arg type))
				'(simvec vc)
				'(vc svc)
			)  ; notany
		)  ; and
	)  ; do-test 4-5-vectors-and-complex-test
)  ; do-test-group
STOP

