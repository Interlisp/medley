;; Function To Be Tested: floatp
;;
;; Source:        CLtL p. 75
;;
;; Chapter 6: Predicates		Section 2-2: Specific Data Type Predicates
;;
;; Created By:    Peter Reidy
;;
;; Creation Date: 19 September 86
;;
;; Last Update:  Feb 4, 1987 Jim Blum - removed :5 keyword  from last test
;;
;; Filed As:      {eris}<lispcore>cml>test>6-2-2-floatp.test
;;
;; Syntax: floatp object
;;            
;; Function Description: True iff object is a floating point number, NIL otherwise.
;;
;; Argument(s):	object any cml object 
;;
;; Returns:  non-nil or NIL          
;;
(do-test-group
	(floatp-group
	:before
		(test-defun floatptest (object &optional (expected-value nil))
		"See if an object is floatp or not, depending on expected-value; see if (floatp object) and (typep object 'float) return the same value." 
			(and
				(cond
					(expected-value
					 (floatp object))
					(t (null (floatp object)))
				)  ; cond
				(eq (floatp object) (typep object 'float))
			)  ; and
		)  ; test-defun
	)  ; floatp-group
;;
	(do-test floatp-with-floats-test
		(let ((five 5.00))
			(declare (special five))
			(every #'(lambda (object) (floatptest object t))
				(list
					pi
					five
					(sqrt 5)
					(sqrt (truncate five))
					17.02020e12
					.6060e-12
					(caddr (list "5.00" '(.005) (apply '+ (list pi 3 #7r12/24)) (copy-readtable)))
				) ; list
			) ; every
		)  ; let
	)  ; do-test floatp-with-floats-test
;;
	(do-test floatp-with-non-floats-test
		(let ((five 5))
			(declare (special expected-value five))
			(every 'floatptest
				(list
					'(5.00)
					"5.34e7"
					(list 5.14159)
		 			#\5
					'five
					(random most-positive-fixnum)		; integers
					(- (random most-positive-fixnum))
					five
					'5
					(eval 'five)
					(truncate (caddr (list "5" '(5) (apply '+ (list pi 3 #7r12/24)) (copy-readtable))))
;;					3/2							; ratios
					-16/2
					#o-17/32
					#x11/eff
					#7r33/66
				) ; list
			) ; every
		)  ; let
	)  ; do-test floatp-with-non-floats-test
)  ; do-test-group
STOP

