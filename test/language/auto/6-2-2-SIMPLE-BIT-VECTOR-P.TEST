;; Function To Be Tested: simple-bit-vector-p
;;
;; Source:        CLtL p. 76
;;
;; Chapter 6: Predicates		Section 2-2: Specific Data Type Predicates
;;
;; Created By:    Peter Reidy
;;
;; Creation Date: 22 September 86
;;
;; Last Update: 15 December 86
;;
;; Filed As:      {eris}<lispcore>cml>test>6-2-2-simple-bit-vector-p.test
;;
;; Syntax: simple-bit-vector-p object
;;            
;; Function Description: Returns non-nil iff object is a simple bit-vector (a one-dimensional array of element-type 'bit, not displaced or adjustable, and without a fill-pointer), and NIL otherwise.
;;
;; Argument(s):	object any cml object 
;;
;; Returns:  non-nil or NIL            
;;
(do-test-group simple-bit-vector-p-group
	:before
	(test-defun simple-bit-vector-ptest (object &optional (expected-value nil))
	"Verify that (simple-bit-vector-p object) <=> (typep object 'simple-bit-vector) for any object; see that the predicate is true or that it's false, depending on the expected value; see that a simple-bit-vector is a one-dimensional array, and that only simple vectors qualify."
		(let ((val (simple-bit-vector-p object)))
			(and
				;; Test equivalence of simple-bit-vector-p to typep...'simple-bit-vector.
		  	 	(eq val (typep object 'simple-bit-vector))
				(cond
					(expected-value val)
					(t (null val))
				)  ; cond
				;; Vectors are one-dimensional arrays.
				(cond
;; The caller had better not pass anything but an array when expected-value is non-nil.
					(expected-value
						(eq 1 (array-rank object)))
;; Non-arrays are moot.
					(t t)
				)  ; cond
			)  ; and
		)  ; let
	)  ; test-defun
;;
	(do-test simple-bit-vector-p-with-simple-bit-vectors-test
		(every #'(lambda (object) (simple-bit-vector-ptest object t))
			(list
				#*1000010101101111111		; quoted or not
				'#*1000010101101111111
				(make-array 500 :element-type 'bit)
				(make-array 500 :element-type 'bit :adjustable nil)
				(bit-andc2 (make-array 12 :initial-element 1 :element-type 'bit) #*000100101110)
			)  ; list
		)  ; every
	)  ; do-test simple-bit-vector-p-with-simple-bit-vectors-test
;;
	(do-test simple-bit-vector-p-with-non-simple-bit-vectors-test
		(every 'simple-bit-vector-ptest
			(list
				(make-array 10 :displaced-to (make-array 11 :element-type 'bit) :element-type 'bit)
				(make-array 10 :initial-element 'bit :adjustable t)
				(make-array 10 :initial-element 'bit :fill-pointer 0)
				(make-array 10 :initial-element 'bit :fill-pointer 0 :adjustable nil)
				(make-array 10 :initial-element 'bit :fill-pointer 8 :fill-pointer 0)
			)  ; list
		)  ; every
	)  ; do-test simple-bit-vector-p-with-non-simple-bit-vectors-test
;;
	(do-test simple-bit-vector-p-with-non-bit-vectors-test
		(every 'simple-bit-vector-ptest
			(list
;; Vectors containing only bits are not neccessarily bit-vectors.
				'#(1 0 0 1 1)
				(make-array 50 :initial-element 1)
				'#()
				'#(1 2 3 (list 1 2 3 #(1 2 3)) #(4 5 6))
				(vector)
				(vector 1 2 3 4 5 6 7)
				(make-array (list 7))
				(make-array (+ 10 (random 100)) :displaced-to
					(make-array (+ 100 (random 100)) :displaced-to
						(make-array 300 :element-type '(or readtable string-char) :initial-element (copy-readtable)
						)
					)
:adjustable t :displaced-index-offset (random 10) :fill-pointer (random 5)
				)  ; make-array  
			)  ; list
		)  ; every
	)  ; do-test simple-bit-vector-p-with-non-bit-vectors-test
;;
	(do-test simple-bit-vector-p-with-strings-test
	;; No string is a bit-vector
		(every 'simple-bit-vector-ptest (list
			"1 0 0 1"
			"1001"
			"#*1001"
			(make-array 4 :element-type 'string-char :initial-contents '(#\1 #\0 #\0 #\1))
			(make-string (random 10) :initial-element #\0)
			)  ; list
		)  ; every
	)  ; do-test simple-bit-vector-p-with-strings-test
;;
	(do-test simple-bit-vector-p-with-multi-dimensional-arrays-test
	;; Multi-dimensional arrays don't qualify.
		(every 'simple-bit-vector-ptest (list
			(make-array '(1 4) :element-type 'bit)
			(make-array '(1 4) :element-type 'bit :initial-contents '((1 0 0 1)))
			)  ; list
		)  ; every
	)  ; do-test simple-bit-vector-p-with-multi-dimensional-arrays-test
;;
;; Symbols aren't strings, so a fortiori they aren't vectors.
	(do-test simple-bit-vector-p-with-symbols-test
		(every 'simple-bit-vector-ptest (list
			'string
			(gensym)
			(gentemp)
			(make-symbol "string")
			(make-symbol (make-array 20 :element-type 'string-char :fill-pointer (random 20)))	
			(make-symbol (symbol-name (gentemp)))
			)  ; list
		)  ; every
	)  ; do-test simple-bit-vector-p-with-symbols-test
)  ; do-test-group
STOP

