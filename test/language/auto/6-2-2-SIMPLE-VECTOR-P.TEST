;; Function To Be Tested: simple-vector-p
;;
;; Source:        CLtL p. 75
;;
;; Chapter 6: Predicates		Section 2-2: Specific Data Type Predicates
;;
;; Created By:    Peter Reidy
;;
;; Creation Date: 22 September 86
;;
;; Last Update: 15 December 86
;;
;; Filed As:      {eris}<lispcore>cml>test>6-2-2-simple-vector-p.test
;;
;; Syntax: simple-vector-p object
;;            
;; Function Description: Returns non-nil iff object is a simple general vector (a one-dimensional array which can accept elements of any CML type and which is not adjustable or displaced and has no fill pointer), and NIL otherwise.
;;
;; Argument(s):	object any cml object 
;;
;; Returns:  non-nil or NIL            
;;
(do-test-group simple-vector-p-group
	:before
	(test-defun simple-vector-ptest (object &optional (expected-value nil))
	"See if (simple-vector-p object) <=> (typep object 'simple-vector); see if the predicate is true of the object or is not true, depending on the expected value; see if a simple-vector is a one-dimensional array of type t."
		(let ((val (simple-vector-p object)))
			(and
;; Test equivalence of simple-vector-p to typep...'simple-vector.
		  	 	(eq val (typep object 'simple-vector))
;; non-nil for true cases, NIL for others.
				(cond
					(expected-value val)
					(t (null val))
				)  ; cond
;; Simple vectors are one-dimensional arrays.  To satisfy the predicate, they must be of type t.  The test fails unless both conditions are met.
				(cond
					(expected-value
					 (and
						(= 1 (array-rank object))
						(eq t (array-element-type object))
					 )  ; and
					)
;; Other kinds of objects get this one free.
					(t t)
				)  ; cond arrayp object
			)  ; and
		)  ; let
	)  ; test-defun
;;
	(do-test simple-vector-p-with-simple-general-vectors-test
			(every #'(lambda (object) (simple-vector-ptest object t))
				(list
					(vector)
					(vector 1 2 3 4 5 6 7)
					(make-array 1000)
					(make-array 5 :element-type t :initial-contents (list (car(list-all-packages)) (copy-readtable) "string" (random 100) (make-symbol "string")))
					(make-array (list 7))
					(make-array (+ 10 (random 100))) 
					'#()
					'#(1 2 3 (list 1 2 3 #(1 2 3)) #(4 5 6))
					'#(1 0 0 1 1)
	;; Note that an array of type nil isn't restricted as to the type of its members, so it qualifies as general. 
					(make-array 5 :element-type t :initial-contents '(t t t t t))
				)  ; list
			)  ; every
	)  ; do-test simple-vector-p-with-simple-general-vectors-test
;;
	(do-test simple-vector-p-with-non-simple-general-vectors-test
		(every 'simple-vector-ptest (list
			(make-array (+ 10 (random 100)) :displaced-to (make-array 110)) 
			(make-array (+ 10 (random 100)) :fill-pointer 10) 
			(make-array (+ 10 (random 100)) :adjustable t)
			"string"
			#*01010101 
			)  ; list
		)  ; every
	)  ; do-test simple-vector-p-with-non-simple-general-vectors-test
;;
	(do-test simple-vector-p-with-multi-dimensional-arrays-test
	;; Multi-dimensional arrays don't qualify.
		(every 'simple-vector-ptest 
		  (list
			(make-array '(6 1))
			(make-array (random (- array-dimension-limit 1)) :element-type 'bit)
			(make-array '(2 2) :adjustable t)
		  )  ; list
		)  ; every
	)  ; do-test simple-vector-p-with-multi-dimensional-arrays-test
;;
	(do-test simple-vector-p-with-symbols-test
	;; Symbols aren't vectors.
		(every 'simple-vector-ptest (list
			'string
			(gensym)
			(gentemp)
			(make-symbol "string")
			(make-symbol (symbol-name (gentemp)))
			)  ; list
		)  ; every
	)  ; do-test simple-vector-p-with-symbols-test
)  ; do-test-group
STOP

