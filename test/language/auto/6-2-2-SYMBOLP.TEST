;; Function To Be Tested: symbolp
;;
;; Source:        CLtL p. 73
;;
;; Chapter 6: Predicates		Section 2-2: Specific Data Type Predicates
;;
;; Created By:    Peter Reidy
;;
;; Creation Date:  17 September 86
;;
;; Last Update:   19 September 86
;;
;; Filed As:      {eris}<lispcore>cml>test>6-2-2-symbolp.test
;;
;; Syntax: symbolp object
;;            
;; Function Description: Returns non-nil iff object is a symbol, and NIL otherwise.
;;
;; Argument(s):	object any cml object 
;;
;; Returns:  non-nil or NIL            
;;
(do-test-group symbolp-group
	:before
	(test-defun symbolptest (object)
		(and
	;; Non-nil for true cases, NIL for others.
			(cond
				((not (null expected-value))
				 (not (null (symbolp object))))
				(t (eq (symbolp object) nil))
			)  ; cond
	;; Test the equivalence in Steele's function description.
			(eq (symbolp object) (typep object 'symbol))
		)  ; and
	) ; test-defun	
;;
	(do-test symbolp-test-with-symbols
		(let ((expected-value t) (five 5) (symbol 'cymbal))
			(declare (special expected-value five symbol))
			(every 'symbolptest (list 
					'cymbal symbol (gensym) (gentemp) (make-symbol (make-array 5 :element-type 'string-char :initial-element #\g)) (car '(one two three)) t nil
				)  ; list
			) ; every
		)  ; let
	)  ; do-test-symbolp-test-with-symbols
;;
	(do-test symbolp-test-with-non-symbols
		(let ((expected-value nil) (cymbalname 'cymbal))
			(declare (special expected-value cymbalname))
			(every 'symbolptest (list 
					(symbol-name 'cymbal) (symbol-name cymbalname) (symbol-name (gensym)) (symbol-name (gentemp)) (make-array 5 :element-type 'string-char :initial-element #\g) (car '(1 2 3))
				)  ; list
			) ; every
		)  ; let
	)  ; do-test-symbolp-test-with-non-symbols
)  ; do-test-group
STOP

