;; Function To Be Tested: EQUALP
;;
;; Source: Guy L Steele's CLTL
;; Section: 6.3 Equality Predicates
;; Page: 80
;;
;; Created By:    John Sybalsky
;;
;; Creation Date: July 30,1986
;;
;; Last Update:   
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>6-3-equalp.TEST
;;
;;
;; Syntax:        (equalpp x y)
;;
;; Function Description:
;;
(do-test-group equalp-group
	(do-test "EQUALP on symbols"
	  (and (not (equalp 'a 'b))
	       (equalp 'a 'a)
	       (equalp 'a 'A)))
	
	(do-test EQUALP-on-CONSes
	   (equalp (cons 'a 'b) (cons 'a 'b))
	)
	
	(do-test EQUALP-on-the-same-CONS
	   (let ((x (cons 3 4.5))) (equalp x x)))
	
	(do-test EQUALP-on-smallps
	   (and (equalp 0 0)
	        (equalp 65534 65534)
	        (equalp -32700 -32700)
	        (not (equalp 0 1))
	   )
	)
	
	(do-test EQUALP-on-complex
	   (and (equalp #c(3 4) #c(3 4))
	        (equalp #c(3 4.1) #c(3 4.1))
	        (equalp #c(3 4) #c(3.0 4.0))
	   )
	)
	
	(do-test EQUALP-on-strings
	  (and (equalp "Foo" "Foo")
	       (equalp "Foo" "foo")
	       (let ((x "foo")) (equalp x x) )
	  )
	)
	
	(do-test EQUALP-on-chars
	  (and (equalp #\A #\A)
	       (equalp #\A #\a)
	  )
	)

	(do-test EQUALP-on-strings
		(and
			(every 'equalp
				(list "string" "RRRRRR")
				(list "STRING" (string-capitalize (make-array 6 :element-type 'string-char :initial-element #\r)))
			)
			(not (equalp "string" "strings"))
		)
	)

	(do-test "EQUALP on arrays"
		(and
			(every 'equalp
				(list
					#*100101
					(make-array '(3 3))
					(make-array '(2 2 1) :element-type 'number)
				)
				(list
					(make-array 6 :element-type 'bit :initial-contents '(1 0 0 1 0 1))
					(make-array '(3 3) :displaced-to (make-array '(4 4))
					(make-array '(2 2 1) :element-type 'integer)
					)
				)
			)
			(notany 'equalp
				(list (make-array '(3 4 5)) (make-array '(3 3 3) :element-type 'character))
				(list (make-array '(3 4 4)) (make-array '(3 3 3) :element-type 'integer))
			)
		)
	)
)
STOP



  
