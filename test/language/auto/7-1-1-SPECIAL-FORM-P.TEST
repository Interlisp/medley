;; Function To Be Tested: special-form-p
;;
;; Source:        Steele's book    Section 7.1.1: Reference        Page: 91
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: June 3, 1986
;;
;; Last Update:   June 3, 1986
;;
;; Filed As:      {eris}<lispcore>cml>test>7-1-1-special-form-p.test
;;
;;
;; Syntax:                SPECIAL-FORM-P  symbol
;;
;; Function Description:  SPECIAL-FORM-P returns a non-nil value if the symbol names a special form.  It returns
;;                        nil otherwise.
;;
;; Argument(s):           symbol - a lisp symbol object
;;
;; Returns:               non-nil & nil    
;;
(do-test-group (special-form-p-group
                        ;;
                        ;; the values assigned to special-forms1 & special-forms2 are copied from table 5-1 
                        ;; of CTtL p 57
                        ;;
                :before (progn (setf special-forms1 '(catch compiler-let declare eval-when flet function go
                                                     if labels let let* macrolet multiple-value-call
                                                     multiple-value-prog1 progn progv quote return-from setq
                                                     tagbody the throw unwind-protect))
                               (setf special-forms2 '(block))
                               (setf non-special-forms1 '(null listp floatp stringp atom + * abs max min <=
                                                          expt rplaca rlpacd union char= char-code char-name))
                               (setf non-special-forms2 '(no-such-form1 no-such-form2 no-such-form3))))

  ;;
  ;; -- An implementation is free to implement as a macro any construct described herein (Table 5-1)
  ;;    as a special form.-- (page 57 of CLtL)
  ;;
  (do-test test-special-forms1
           (every #'(lambda (x) (or (special-form-p x) (macro-function x))) special-forms1))

  (do-test test-special-forms2
           (every #'(lambda (x) (or (special-form-p x) (macro-function x))) special-forms2))

  (do-test test-non-special-forms1
           (notany #'special-form-p non-special-forms1))

  (do-test test-non-special-forms2
           (notany #'special-form-p non-special-forms2)))
;;
;;
STOP
