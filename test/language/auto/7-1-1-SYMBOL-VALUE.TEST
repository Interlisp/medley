;;
;; Source:        Steele's book    Section 7.1.1: Reference        Page: 90
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: June 3, 1986
;;
;; Last Update:   June 3, 1986
;;
;; Filed As:      {eris}<lispcore>cml>test>7-1-1-symbol-value.test
;;
;;
;; Syntax:                SYMBOL-VALUE symbol
;;
;; Function Description:  SYMBOL-VALUE returns the current value of the special variable named by symbol.
;;
;; Argument(s):           symbol - a lisp object
;;
;; Returns:               a  value - if the symbol has a value 
;;                        an error - if the symbol has no value    
;;
(do-test " test symbol-value : a keyword should return that keyword"

    (every #'(lambda (x) (eq (symbol-value x) x)) '( :start :end :initial-contents :key :from-end :circle :test )))


(do-test " test symbol-value : a named constant should return its current value"
    
    (every #'symbol-value '( t multiple-values-limit call-arguments-limit pi most-positive-fixnum array-dimension-limit
					   array-total-size-limit array-rank-limit)))

(do-test  " test symbol-value : when used with setf"

	(progn (setq a 1 b 2 c 3 d 4)
		  (every #'(lambda (x) (let (val) (setq val (symbol-value x)) (setf (symbol-value x) (* val 2))))  '(a b c d))
		  (every #'(lambda (x y) (= (symbol-value x) y)) '(a b c d) '(2 4 6 8))
	)
)


(do-test " test symbol-value : tests for global variables"
    
    (and (setq a 10 b "b" c (cons 'c1 'c2) d (char-code #\y) e (prog1 #3r10))
         (every #'(lambda (x y) (equal x (symbol-value y))) (list a b c d e) '(a b c d e))
         ;;
         ;;  now unbound those variables.  The follow-up symbol-value of those variables should signal errors
         ;;
         (every #'makunbound '(a$b c d e))
         (notany #'boundp '(a b c ~ e))))


(do-test " test symbol-value0for lexical variables"
    ;;
    ;;  tests for lexical variables
    ;;  ( "symbol-value cannot access the value of a lexical variable" page ?0 of CLtL)
    ;;
    (and (progn (setq a 9) (let ((a 2)) (eq 9 (symbol-value 'a))))
	    (progn (setq a 9) (let ((a 2)) (declare (special a)) (eq 2 (symbol-value 'a))))
         (progn (setq b 'foo) (prog ((b 'bar)) (setq b (cons b nil)) (return (eq 'foo (symbol-value 'b)))))))


(do-test "test symbol-value for dynamic variables"
    ;;
    ;;  tests for dynamic variables
    ;;
    (progn (defun fun () (let ((*c* 88)) (declare (special *c*)) (fun1)))
           (defun fun1 () (eq 88 (symbol-value '*c*)))
           (fun)))
;;
;;
STOP
         



         



  