;; Function To Be Tested: setq
;;
;; Source:        Steele's book    Section 7.1.2: Assignment        Page: 91
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: June 4, 1986
;;
;; Last Update:   June 4, 1986
;;
;; Filed As:      {eris}<lispcore>cml>test>7-1-2-setq.test
;;
;;
;; Syntax:                SETQ {var form}*
;;
;; Function Description:  SETQ evaluates the forms and assigns the values to the corresponding variables.
;;                        The assignment of variables are performed sequentially. The variables may be lexical
;;                        or special variables.  SETQ returns the result of the evaluation of the last form.
;;
;; Argument(s):           {var form}*
;;
;; Returns:               the result of the evaluation of the last form
;;                        nil - if no arguments are specified    
;;
(do-test "test setq - return nil if no argument was specified"
    (eq nil (setq)))

(do-test "test setq - return value of the last form"
    (and (= (setq a 1 b 2 c 3 d 4) 4)
         (equal (setq a (1+ #3r111) b (gcd 3 7) c (string-upcase "dr.livingston")) "DR.LIVINGSTON")
         (char= (setq a (progn 1 2) b (prog1 #\b 3.99) c (prog2 a b (* 2 a))) #\b)))

(do-test "test setq - forms are sequentially evaluated"
    (and (equal (setq x (+ 1 2 3) y (cons x nil)) '(6))
         (progn (setq a 1 b (1+ a) c (1- b) d (incf c)) (>= d c b a))
         (progn  (setq a (defun funa () 3) 
                       b (defun funb () (+ (funa) 2))
                       c (defun func () (+ (funb) 4)))
                  (= (func) 9))))

(do-test "test setq - assignment performed for both lexical & special variables"
    (let ((a 1) (b 1) (c 1)) (declare (special b))
         (defun funb () (declare (special b)) (setq b (if (= 1 b) 1000 -1000)))
         (setq a (incf c 99) c (decf b 99))
         (funb)
         (equal (multiple-value-list (values a b c)) '(100 -1000 -98))))

;; (do-test "test setq - there must be an even number of argument forms "
;;    (not (or (nlsetq (setq a)) (nlsetq (setq a 1 b)) (nlsetq (setq a 4 (+ 3 4))))))
;;
;; (do-test "test setq - illegal arguments"
;;    (not (or (nlsetq (setq 43)) (nlsetq (setq (3 . 4))) (nlsetq (setq t nil)) (nlsetq (setq (1+))))))
;;
;;
STOP