;; Function To Be Tested: block
;;
;; Source:        CLtL    Section 7.7: Blocks and Exits        Page: 119
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: Oct. 13 ,1986
;;
;; Last Update:   Oct. 13 ,1986
;;
;; Filed As:      {eris}<lispcore>cml>test>7-7-block.test
;;
;;
;; Syntax:                block NAME {FORM}*
;;
;; Function Description:  The block donstruct executes each FORM from left to right, returning whatever is returned by the
;; 				      last form.  If, however, a return or return-from form that specifies the same name is executed during
;;					 the execution of some form, then the results specified by the return or return-from are immediately
;;					 returned as the value of the block construct, and execution proceeds as if the block had terminated
;;					 normally.
;;
;; Argument(s):           NAME - a symbol
;;					FORM -  a valid lisp form
;;
;; Returns:               anything    
;;

(do-test-group (test-block-group
				:before	(progn 
							(test-defun hairyfun (x) (list x "hairyfun"))
							(test-defun fun (x)
									(typecase x
										((integer 100 *) (return-from fun "x >= 100")     )
										((mod 100)       (return-from fun "100 > x >= 0") )
										(t               (return-from fun "0 > x")       )  )
									("wrong!!"))
						))

	(do-test "test block - test case copied from page 120 of CLtL"
		(and
			(equal (block loser
					(catch 'stuff
						(mapcar #'(lambda (x) (if (numberp x)
											 (hairyfun x)
											 (return-from loser nil))) 
								'(23 24 35 36)))) 
				 '( (23 "hairyfun") (24 "hairyfun") (35 "hairyfun") (36 "hairyfun")))

			(eq    (block loser
					(catch 'stuff
						(mapcar #'(lambda (x) (if (numberp x)
											 (hairyfun x)
											 (return-from loser nil))) 
								'(#\q 24 35 36)))) 
				  '())

			(equal (multiple-value-list (block loser
									(catch 'stuff
										(mapcar #'(lambda (x) (if (numberp x)
															 (hairyfun x)
											 				(return-from loser (values 'multiple 'values))))
												`(t nil t nil)))))
				  '(multiple values)) 
		 )
	)

	(do-test "test block - the body of a defun form is a block construct which has the same name as the function"
		;;
		;; fun was defined in :before section
		;;
		(and 
			(equal (fun 150) "x >= 100")
			(equal (fun -9)  "0 > x")
			(equal (fun 87)  "100 > x >= 0") 
		)	
	)
)

(do-test "test block - block construct returns whatever is returned by the last form"
	(and
		(eq     (block name1) nil)
		(=      (block name2 (1+ 99)) 100)
		(equal  (block name3 (append '(2 3 4) '(0 9 8))) '(2 3 4 0 9 8))
		(equal  (multiple-value-list (block name  (values #\a #\b #\c))) '(#\a #\b #\c))
		(equalp (block name1 (concatenate 'bit-vector #*0000 #*1111)) #*00001111)
		(equal  (block name2 ( (lambda (x) (cons x x))  9)) '(9 . 9))
	)
)



(do-test "test block - nested blocks"
  (flet ((fun (y)
	 	 (let (temp)
	 		 (block outblk
				 (setq temp (mapcar #'(lambda (x) 		
							(cons x (block blk 
		  			 		 (typecase  x
                 					(number (return-from blk '( is a number)))
			  					(list   (return-from blk '( is a list)))
			 					(string (return-from blk '( is a string)))
								(t       (return-from outblk "wrong input !!"))  )))) 
						    y))
				  (if (null temp) (return-from outblk "no input"))
				  (setq temp (cons "Results:"  temp))
			 )
		  )
	   ))
	   (and (equal (fun nil) "no input")
		   (equal (fun '(1  "fg")) '("Results:" (1 is a number) ("fg" is a string)))
		   (equal (fun '( (2 3) 100 20 "fgh" "as"))
			     '("Results:"  ((2 3) is a list) (100 is a number ) (20 is a number) ("fgh" is a string) 
						    ("as" is a string)))
		   (equal (fun '(#*0101 3)) "wrong input !!")
	   )
  )
)
STOP
		
		 
