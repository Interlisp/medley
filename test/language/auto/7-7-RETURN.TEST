;; Function To Be Tested: return
;;
;; Source:        CLtL    Section 7-7-Blocks and Exits        Page: 120
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: Oct. 13 ,1986
;;
;; Last Update:   Feb 5, 1987 Jim Blum - changed = to eq in first test since = expects a number and was failing on the SUN
;;
;; Filed As:      {eris}<lispcore>cml>test>7-7-return.test
;;
;;
;; Syntax:                return [RESULT]
;;
;; Function Description: (return form) is identical in meaning to (return-from nil) ; It returns from a block named nil.
;;
;; Argument(s):          
;;					RESULT -  a lisp form
;;
;; Returns:               anything   
;;


(do-test "test return for BLOCK 0"
	(and
		(eq     (block nil  		(return t)) t)
		(eq	   (block nil		(return)) nil)
	)
)

(do-test "test return for BLOCK - whatever the evaluation of result produces is immediately returned from the block"
  (let (a)
	(and 
		(=		(block nil			2 (return 11) 22 33 44) 11)
		(eq       (block nil 		2 (return ) 22 33 44) nil)
		(= 		(block nil          (setq a 0) (incf a 2) (return  a) (incf a 3)) 2) 
		(equal	(block nil			(setq a nil) (push 11 a) (push 22 a) (return a) (push 33 a)) '(22 11))
	)
  )
)

(do-test "test return for BLOCK - be sure multiple-values are returned properly"
	(and
		(equal 	(multiple-value-list (block nil (return (values 1 2 3 4 5)))) '(1 2 3 4 5))
		(equal 	(multiple-value-list (block nil (return (values-list '(5 4 3 2 1))))) '(5 4 3 2 1))
	)
) 

(do-test "test return for BLOCK - nested returns"
	(macrolet ((fun (x1 x2 x3 x4 x5)
			 `(cons 0 (block ,x1 (return (cons 1 (block ,x2 (return 
			  (cons 2 (block ,x3 (return (cons 3 (block ,x4 (return 
			  (cons 4 (block ,x5  (return 9)))))))))))))))  ))
		     (and
				(equal (fun nil a b c d ) '(0 . 9))
				(equal (fun nil nil b c d ) '(0 1 . 9))
				(equal (fun nil nil nil c d ) '(0 1 2 . 9))
				(equal (fun nil nil nil nil d ) '(0 1 2 3 . 9))
				(equal (fun nil nil nil nil nil ) '(0 1 2 3 4 . 9))
				(equal (fun nil a  nil b nil) '(0 2 4 . 9))
				(equal (fun nil a b c d) '(0 . 9))
				(equal (fun nil a b nil d) '(0 3 . 9))
			)
	)
)

(do-test "test return for DO"
		(and 	(equal (multiple-value-list 
						(do (( a 0 (1+ a)) (b nil (append b (list a))))
							((= a 10) nil)
							(if (= (length b) 5) (return  (values-list b)))))
				  '(0 1 2 3 4))

			(equal  (multiple-value-list 
						(do (( a 0 (1+ a)) (b nil (append b (list a))))
							((= a 10) (values-list b))))
				  '(0 1 2 3 4 5 6 7 8 9))
		)
)

(do-test "test return for DO*"
		(and 	(equal (multiple-value-list 
						(do* (( a 0 (1+ a)) (b nil (append b (list a))))
							((= a 10) nil)
							(if (= (length b) 5) (return (values-list b)))))
				  '(1 2 3 4 5))

			(equal  (multiple-value-list 
						(do* (( a 0 (1+ a)) (b nil (append b (list a))))
							((= a 10) (values-list b))))
				  '(1 2 3 4 5 6 7 8 9 10))
		)
)

(do-test "test return for DOLIST"
	(let (a b)
		(and
			(equal (multiple-value-list 
						(dolist  (y '(1 2 3 4 5 6)) (push y a) (when (= y 4) (return (values-list a))))) 
				  '(4 3 2 1))

			(equal (dolist (y '(0 a b 3 d e 7 g h 8 ) b) (if (numberp y) (setq b (cons y b))))
				  '(8 7 3 0))
		)
	)
)

(do-test "test return for DOTIMES"
	(let ((a 0) (b 20))
		(and
			(= (dotimes (x 10) (incf a x)  (unless (< a  10) (return  a))) 10)
			(= (dotimes (x 8 b)  (decf b x) ) -8)
		)
	)
)
	
(do-test "test return for PROG"
	(and
		(equal (prog ((a 1) (b 2) (c 3) (d 4)) (return (list a b d c))) '(1 2 4 3))
		(equal (prog () (return (concatenate 'string "asd" "qwe" "zxc"))) "asdqwezxc")
	)
)

(do-test "test return for PROG*"
	(and
		(equal (prog* ((a 1) (b 2) (c (+ a b)) (d (- a b))) (return (list a b d c))) '(1 2 -1 3))
		(equal (prog* () (return (concatenate 'string "asd" "qwe" "zxc"))) "asdqwezxc")
	)
)
STOP
				


