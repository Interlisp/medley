;; Functions To Be Tested: EVAL, APPLY, FUNCALL, and MULTIPLE-VALUE-CALL
;;
;; Source:     CLtL    
;; Section 	7.9.2: Rules Governing the Passing of Multiple Values
;; Page: 		137
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: August 4,1986
;;
;; Last Update:   August 4,1986
;;
;; Filed As:      {eris}<lispcore>cml>test>7-9-2-mvr-evaluation-application.test
;;
;;
;;
;; Description: It is often the case that the value of a special form or macro call is defined to be the value of one of
;;			its subforms.  For example, the value of a COND is the value of the last form in the selected clause.
;;			In most such cases, if the subform produces multiple values, then the original form will also produce 
;;			all of those values.  This passing back of multiple values of course has no effect unless eventually one
;;			of the special forms for receiving multiple values is reached.
;;			To be explicit, multiple values can result from a special form under precisely there circumstances: 
;;
;; EVALUATION  and APPLICATION
;;  .  EVAL returns multiple values if the form given it to evaluate produces multiple values.
;;  .  APPLY, FUNCALL, and MULTIPLE-VALUE-CALL pass back multiple values from the function applied of called.
;;
(do-test "test multiple-values-rules : eval"
	(and	(equal (multiple-value-list (eval (list 'values 1 2 3))) '(1 2 3))
		(equal (multiple-value-list (eval (list 'values-list ''(a b c d e f)))) '(a b c d e f))
		(equal (multiple-value-list (eval '(values (1+ 99) (1- -99)))) '(100 -100))
		(equal (multiple-value-list (eval '(values-list (list (cons 'a 'b) '(1 (2) (3 . 4)) (nthcdr 2 '(11 (22) 33 (44 55))))))) 
			  '((a . b) (1 (2) (3 . 4)) (33 (44 55))))
	)
)

(do-test "test multiple-values-rules : apply"
	(and (equal (multiple-value-list (apply #'values '(1 2 3 4 5))) '(1 2 3 4 5))
		(equal (multiple-value-list (apply #'values #\a #\c #\e ())) '(#\a #\c #\e))
		(equal (multiple-value-list (apply #'values-list '(( "frets" "strings" "sound-whole" "tuning-pegs")))) 
			  '("frets" "strings" "sound-whole" "tuning-pegs"))
		(equal (multiple-value-list (apply #'values-list '((material . wood) (price . 1200) (name . guitar)) ()))
			  '((material . wood) (price . 1200) (name . guitar)))
	)
)	

(do-test "test multiple-values-rules : funcall"
	(and	(equal (multiple-value-list (funcall #'values (max 2 4) (min 3 1) (>= 3 2 1))) '(4 1 t))
		(equal (multiple-value-list (funcall #'values '(a b c) '((d e) f) '(g h ((i))))) '((a b c) ((d e) f) (g h ((i)))))
		(equal (multiple-value-list (funcall #'values-list '((material . wood) '(name . guitar) '(protection . case))))
			  '((material . wood) '(name . guitar) '(protection . case)))
		(equal (multiple-value-list (funcall #'values-list (list 'o 'p 'q 'r 's 't 'u 'v 'w 'x 'y 'z))) 
			  '(o p q r s t u v w x y z))
	)
)

(do-test "test multiple-values-rules : multiple-value-call"
	(and	(equal (multiple-value-list (multiple-value-call #'values (floor 5 3) (floor 19 4))) '(1 2 4 3))
		(equal (multiple-value-list (multiple-value-call #'values (floor 9 7) t '(()) 'foot #\q "sunshine"))
			  '(1 2 t (()) foot #\q "sunshine"))
		(equal (multiple-value-list (multiple-value-call #'values-list `(,(lcm 3 15) ,(gcd 2 7) ,(>= 3 3 4) ,(list 'a 'b 'c))))
			  '(15 1 nil (a b c)))
		(equal (multiple-value-list (multiple-value-call #'values-list '( (1+ 2) (1- 23) (* comment) (/ 7 8))))
			  '((1+ 2) (1- 23) (* comment) (/ 7 8)))
	)
)
STOP
						
		