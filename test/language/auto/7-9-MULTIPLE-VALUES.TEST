;; Functions To Be Tested: values, values-list, multiple-value-list, multiple-value-call,
;;                         multiple-value-prog1, multiple-value-bind, and multiple-value-setq
;;
;; Source:        Steele's book    Section 7.9: multiple values        Page: 133-137
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: May 21, 1986
;;
;; Last Update:   Feb 5, 1987 Jim Blum - fixed mult val setq2 test
;;
;; Filed As:      {eris}<lispcore>cml>test>7-9-multiple-values.test
;;
;;
;; Syntax:                VALUES &rest args
;;
;; Function Description:  VALUES takes any number of arguments and returns that many values, in order.
;;
;; Argument(s):           args
;;
;; Returns:               values    
;;
;; ....................................................................................................
;;
;; Syntax:                VALUES-LIST list
;;
;; Function Description:  VALUES-LIST takes all of the elements of list and returns multiple values.
;;
;; Argument(s):           list
;;
;; Returns:               values    
;;
;;
;; ....................................................................................................
;;
;; Syntax:                MULTIPLE-VALUE-LIST form
;;
;; Function Description:  MULTIPLE-VALUE-LIST evaluates form and returns a list of multiple values
;;                        it returned.
;;
;; Argument(s):           form
;;
;; Returns:               a list of multiple values    
;;
;;
;; ....................................................................................................
;;
;; Syntax:                MULTIPLE-VALUE-BIND ({var}*) values-form {declaration}* {form}*
;;
;; Function Description:  MULTIPLE-VALUE-BIND evaluates the values-form and binds the values returned to
;;                        the variables specified in {var}*. The forms, which make up an implicit progn,
;;                        will then be executed.
;;
;; Argument(s):           ({var}*)       - a list of variables
;;                        values-form    - a form which might return multiple values
;;                        {declaration}* -
;;                        {form}*        - a number of list form(s)
;;
;; Returns:               value of the last form evaluated   
;;
;; 
;; ....................................................................................................
;;
;; Syntax:                MULTIPLE-VALUE-CALL function {form}*
;;
;; Function Description:  MULTIPLE-VALUE-CALL first evaluates the function to obtain a function and then
;;                        evaluates the forms.  All the values of the forms are given as arguments to 
;;                        the function. The result of MULTIPLE-VALUE-CALL is whatever returned by the
;;                        function.
;;
;; Argument(s):           function -
;;                        {form}*  -
;;
;; Returns:               value returned by the function   
;;
;; 
;; ....................................................................................................
;;
;; Syntax:                MULTIPLE-VALUE-PROG1 form {form}*
;;
;; Function Description:  MULTIPLE-VALUE-PROG1 evaluates the first form and saves all the values produced
;;                        by that form. It then evaluates the remaining forms and discarding their values.
;;                        MULTIPLE-VALUE-PROG1 returns the values produced by the first form.
;;
;; Argument(s):           form     -
;;                        {form}*  -
;;
;; Returns:               value returned by the first form   
;;
;;
;; ....................................................................................................
;;
;; Syntax:                MULTIPLE-VALUE-SETQ variables form
;;
;; Function Description:  MULTIPLE-VALUE-SETQ evaluates the form and set the variables to the values
;;                        returned by that form. MULTIPLE-VALUE-SETQ returns the first value produced
;;                        by the form.
;;
;; Argument(s):           variables  - a list of variables
;;                        form       -
;;
;; Returns:               the first value returned by the form   
;;
;; 
;;  ****  check if the constant "multiple-values-limit" was properly defined  ****
;;

(do-test test-multiple-values-limit
    (and (boundp 'multiple-values-limit)
         (integerp multiple-values-limit)
         (>= multiple-values-limit 20)))
;;
;;
;;  ****  tests for "values" & "multiple-value-list" functions  ****
;;
;;
(do-test test-values0
    (and (eq (values) nil)
         (equal (multiple-value-list (values 1 2 3 4 5)) '(1 2 3 4 5))
         (equal (multiple-value-list (values "1 + 2 = " (+ 1 2))) '("1 + 2 = " 3))
         (equal (multiple-value-list (values  'a #\b 99 (list 'list) (/ 8 2)))
                                              '(a #\b 99 (list) 4))
         (equal (multiple-value-list (values)) nil)))

(do-test test-values1
    (and (equal (multiple-value-list (values 'list ''foo ''bar)) '(list 'foo 'bar))  ))
;;;****         (equal (multiple-value-list (values (multiple-value-list (values 'list ''foo ''bar)))) 
;;;;****                                             '((foo bar)))))

(do-test test-values2
    ;;
    ;;  input 50 arguments to "values" and see if it works
    ;;
    (and (equal (multiple-value-list (values 1 2 3 4 5 6 7 8 9 10 11 2 3 4 5 6 7 8 9 10
                 21 2 3 4 5 6 7 8 9 10 31 2 3 4 5 6 7 8 9 10 41 2 3 4 5 6 7 8 9 50))
                '(1 2 3 4 5 6 7 8 9 10 11 2 3 4 5 6 7 8 9 10 21 2 3 4 5 6 7 8 9 10
                  31 2 3 4 5 6 7 8 9 10 41 2 3 4 5 6 7 8 9 50))))

(do-test test-values3
    (and (setq x 1)
         (setq y 2)
         (equal (multiple-value-list (values x y)) '(1 2))))
;;
;;
;;
;;  ****  tests for "values-list" & "multiple-value-bind" functions  ****
;;
;;
(do-test test-values-list0
    (and (equal (multiple-value-bind (n0 n1 n2) (values-list '(0 1 2)) (list n0 n1 n2)) '(0 1 2))
         ;;
         ;;  with more variables than values returned
         ;;
         (equal (multiple-value-bind (n0 n1) (values-list ()) (list n0 n1)) 
               '(nil nil))
         (equal (multiple-value-bind (n0 n1 n2 n3 n4) (values-list '(0 1 2)) (list n0 n1 n2 n3 n4)) 
               '(0 1 2 nil nil))
         ;;
         ;;  with less variables than values returned
         ;;
         (equal (multiple-value-bind (n0 n1 n2) (values-list '(0 1 2 3 4 5)) (list n0 n1 n2)) 
               '(0 1 2))
         (equal (multiple-value-bind () (values-list '(0 1 2 3 4 5)) (= 1 1)) 
               't)))

(do-test test-values-list1
    (and (equal (multiple-value-bind (n0 n1 n2) (values-list (list  (cons 'a 'b) (list 'c 'd) (prog1 'efg)))
                                      (list n0 n2 n1))  '((a . b) efg (c d)))
         (equal (multiple-value-bind (n0 n1 n2) (values-list (list  (cons 'a 'b) (list 'c 'd) (prog1 'efg))))
                                      nil)))

(do-test test-values-list2
    (equal (multiple-value-bind (n0 n1 n2 n3 n4 n5 n6 n7 n8 n9 n10 
                                 n11 n12 n13 n14 n15 n16 n17 n18 n19 n20
                                 n21 n22 n23 n24 n25 n26 n27 n28 n29 n30
                                 n31 n32 n33 n34 n35 n36 n37 n38 n39 n40
                                 n41 n42 n43 n44 n45 n46 n47 n48 n49 n50) 
                (values-list (list 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
                                   1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
                (declare (special n0 n1 n2 n3 n4 n5 n6 n7 n8 n9 n10 n11 n12 n13 n14 n15 n16 n17 n18 n19 n20
                                  n21 n22 n23 n24 n25 n26 n27 n28 n29 n30 n31 n32 n33 n34 n35
                                  n36 n37 n38 n39 n40 n41 n42 n43 n44 n45 n46 n47 n48 n49 n50))
                (and (every #'boundp '(n0 n1 n2 n3 n4 n5 n6 n7 n8 n9 n10
                                       n11 n12 n13 n14 n15 n16 n17 n18 n19 n20
                                       n21 n22 n23 n24 n25 n26 n27 n28 n29 n30
                                       n31 n32 n33 n34 n35 n36 n37 n38 n39 n40
                                       n41 n42 n43 n44 n45 n46 n47 n48 n49 n50))
                     (every #'(lambda (x) (= x 1)) (list n0 n1 n2 n3 n4 n5 n6 n7 n8 n9 n10
                                                     n11 n12 n13 n14 n15 n16 n17 n18 n19 n20
                                                     n21 n22 n23 n24 n25 n26 n27 n28 n29 n30
                                                     n31 n32 n33 n34 n35 n36 n37 n38 n39 n40
                                                     n41 n42 n43 n44 n45 n46 n47 n48 n49 n50))))
                 't))
;;
;;
;;
;;  ****  tests for "multiple-value-call" function  ****
;;
;;
(do-test test-multiple-value-call0
    (and (equal (multiple-value-call #'/= (values-list '(2 4 6 8.0 10))) 't)
         (equal (multiple-value-call #'+ 1 (+ 2 3) (* 4 5) (values 6 7) (values-list '(9 10))) 58)
         (equal (multiple-value-call #'(lambda (x y z) (notany #'oddp (list x y z))) 
                                                                      (* 10 2) (/ 10 5) 8) 't)
         (equal (multiple-value-call #'(lambda (ar1 ar2 &optional (ar3 33 ar3-flag) ar4)
                                               (list ar1 ar2 ar3 ar3-flag ar4)) 
                                     (values 1 2 3) 'last-not-least)  '(1 2 3 t last-not-least))))
;;
;;
;;  ****  tests for "multiple-value-prog1" function  ****
;;
;;
(do-test test-multiple-value-prog10
    (and (eq (multiple-value-prog1 'a 'b 'c 'd 'e) 'a)
         (=  (multiple-value-prog1 (setq a 10) (setq a 20) (setq a 30)) 10)
         (eq (multiple-value-prog1 () (values 1 2 3)) nil)
         (equal (multiple-value-call #'- (multiple-value-prog1 (values-list (list (prog1 1) (prog1 2) (prog1 3))) (evenp 3)))
                -4)
         (eq (multiple-value-prog1 (car (setq x '(o p q r))) (rplaca x 'u)) 'o)))
;;
;;
;;  ****  tests for "multiple-value-setq" function  ****
;;
;;
;;
(do-test test-multiple-value-setq0
    (and (eq (multiple-value-setq (n0 n1) ()) nil)
         (equal (list n0 n1) '(nil nil)))) 

(do-test test-multiple-value-setq1
    (eq (multiple-value-setq () ()) nil)) 

(do-test test-multiple-value-setq2
    (and (eq (multiple-value-setq (n0) (values 'x 'y 'z)) 'x)
         (equal (list n0) '(x))
         (eq (multiple-value-setq (n0 n1) (values 'x 'y 'z)) 'x)
         (equal (list n0 n1) '(x y))
         (eq (multiple-value-setq (n0 n1 n2) (values 'x 'y 'z)) 'x)
         (equal (list n0 n1 n2) '(x y z))))       
;;
;;
;;  
;;
(do-test test-mixed0
     (equal (multiple-value-call #'values  
                                 (multiple-value-bind (a b c)
                                                      (multiple-value-prog1 (values-list '(1 2 3)))
                                                      (multiple-value-setq (x y z) (values a b c))
                                                      (multiple-value-list (values x y z))))
          '(1 2 3)))

(do-test "test case from masinter.pa"
	(PROGN (DEFUN 3MVS () (VALUES 1 2 3))
		(AND (EQUAL (MULTIPLE-VALUE-LIST (3MVS)) '(1 2 3))
			(EQUAL (MULTIPLE-VALUE-BIND (A B C) (3MVS)
					(LIST C B A))
					'(3 2 1))))
)
;;
;;
;;
STOP

