;;
;; Function To Be Tested: locally
;;
;; Source:        CLtL p. 156 
;; Chapter 9: Declarations       Section 1: Declaration Syntax
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date:  Nov. 4, 86
;;
;; Last Update:  Feb 5, 1987 Jim Blum - fixed typo in specifier 1 test 
;;
;; Filed As:      {eris}<lispcore>cml>test> 9-1-locally.test
;;
;;
;; Syntax: locally {declaration}* {form}*               
;;
;; Function Description: Locally may be used to make local pervasive declarations where desired.
;;
;; Argument(s):  declaration - a declare statement        	
;;
;; Returns: anything             
;;

(do-test "test locally - test case from page 156 of CLtL"
	(equal (multiple-value-list (locally (declare (inline floor) (notinline car cdr))
								 (declare (optimize space))
								(floor (car '(2 3)) (cdr '(8 . 1)))  ))
		 '(2 0) ))


(do-test "test locally with 'special' declaration specifier 0"
  (equal	(let ((a 6) ( b 8))
			(declare (fixnum a b) (special a b))
			(let ((a 1) (b 9))
				  (list a b 
							(* 10 (locally (declare (special a)) a)  )
							(- 99 (locally (declare (special b)) b)  )
							(+ a b)   )))
		'(1 9 60 91 10)))

(do-test "test locally with 'special' declaration specifier 1"
	(=	(catch 'exit (let ((x 10) (y 20))
					    (declare (special y))
					    (prog (( x 90) (y 40))
							(declare (special x))
							(let ((x 99) (y 88))
								(throw 'exit (+ (locally (declare (special y)) y)
										 	(locally (declare (special x)) x) ))))))
		119))


(do-test-group ( "test locally with 'inline' 'notinline' and 'optimize' declaration specifiers"

			:before (test-defun get-list (num inc)
							(declare (type (mod 26) num) (type (mod 20) inc))

							" get-list function returns  a list of numbers less than 100. The first arg indicates the
							  starting number and the second arg indicates the incrementation."
									
							(do (( x num (+ x inc)) 
								(buf nil (locally (declare (inline append) (notinline list)) (append buf (list x)))) )

							    ((>= x 100) buf)
							
								(declare (fixnum x))
								(declare (optimize (safety 2) speed (space 2))) 
							)
				   ))

	(do-test "test locally with 'inline' 'notinline' and 'optimize' declaration specifiers"
		
	  (equal

		(let ( (aray (make-array 4 :element-type 'list))  (index -1))
			(declare (type (simple-array 'list 4) aray)   (index fixnum))
			(declare (inline sort))
		
			(sort (mapcan #'(lambda (x y) (setf (aref aray (incf index)) (locally (declare (inline get-list)) (get-list x y))  )) 
					   '(25 20 15 10) 
					   '(20 20 15 15))   #'>)
		)
	
		'(90 85 85 80 75 70 65 60 60 55 45 45 40 40 30 25 25 20 15 10)
	  )
	)
)
STOP
						 

		
	
	
