;; Regression tests for the Common Lisp interpreter

(do-test "AR 8189: (THE (VALUES ...) ...) errors in the interpreter."
   (the (values fixnum fixnum)
        (floor 5 2)))

(do-test "AR 7511: All Common Lisp documented variables/constants should be proclaimed/made constant"
   (flet ((special? (var) (il:variable-globally-special-p var)))
     (and (every #'special?
                 '(*applyhook*
                   *break-on-warnings*
                   *debug-io*
                   *default-pathname-defaults*
                   *error-output*
                   *evalhook*
                   *features*
                   *load-verbose*
                   *macroexpand-hook*
                   *package*
                   *print-array*
                   *print-base*
                   *print-case*
                   *print-circle*
                   *print-escape*
                   *print-gensym*
                   *print-length*
                   *print-level*
                   *print-pretty*
                   *print-radix*
                   *query-io*
                   *random-state*
                   *read-base*
                   *read-default-float-format*
                   *read-suppress*
                   *readtable*
                   *standard-input*
                   *standard-output*
                   *terminal-io*
                   *trace-output*
                   *
                   **
                   ***
                   +
                   ++
                   +++
                   -
                   /
                   //
                   ///
                   ))
          (every #'constantp
                 '(array-dimension-limit
                   array-rank-limit
                   array-total-size-limit
                   boole-1
                   boole-2
                   boole-and
                   boole-andc1
                   boole-andc2
                   boole-c1
                   boole-c2
                   boole-clr
                   boole-eqv
                   boole-ior
                   boole-nand
                   boole-nor
                   boole-orc1
                   boole-orc2
                   boole-set
                   boole-xor
                   call-arguments-limit
                   char-bits-limit
                   char-code-limit
                   char-control-bit
                   char-font-limit
                   char-hyper-bit
                   char-meta-bit
                   char-super-bit
                   double-float-epsilon
                   double-float-negative-epsilon
                   internal-time-units-per-second
                   lambda-list-keywords
                   lambda-parameters-limit
                   least-negative-double-float
                   least-negative-long-float
                   least-negative-short-float
                   least-negative-single-float
                   least-positive-double-float
                   least-positive-long-float
                   least-positive-short-float
                   least-positive-single-float
                   long-float-epsilon
                   long-float-negative-epsilon
                   most-negative-double-float
                   most-negative-fixnum
                   most-negative-long-float
                   most-negative-short-float
                   most-negative-single-float
                   most-positive-double-float
                   most-positive-fixnum
                   most-positive-long-float
                   most-positive-short-float
                   most-positive-single-float
                   multiple-values-limit
                   nil
                   pi
                   short-float-epsilon
                   short-float-negative-epsilon
                   single-float-epsilon
                   single-float-negative-epsilon
                   t)))))


(do-test "AR 7472: DEFCONSTANT, DEFPARAMETER and company don't override each other"
  (and (defvar #1=#:foo)
       (il:variable-globally-special-p '#1#)
       (defconstant #1# 7)
       (constantp '#1#)
       (defparameter #1# 17)
       (il:variable-globally-special-p '#1#)
       (defglobalvar #1#)
       (il:variable-global-p '#1#)
       (defconstant #1# 7)
       (constantp '#1#)
       (defglobalparameter #1# 10)
       (il:variable-global-p '#1#)))

(do-test "AR 7349: SETQ doesn't see lexical bindings"
   (= 17 (let ((foo 78))
            (setq foo 17)
            foo)))

(do-test "AR 7127: Bad interaction between MACROLET and FLET in interpreter"
   (= 17 (macrolet ((foo (x) `(bar ,x)))
             (flet ((bar (y) (+ 1 y)))
                (foo 16)))))

(do-test "AR 7684: redefining macros as functions doesn't work"
   (and (defmacro #1=#:foo (x) `(cons ,x ,x))
        (defun #1# (x) x)
        (null (macro-function '#1#))))

(do-test "AR 7405: test progv - if too few values are supplied, the remaining symbols are bound and then made to have no value"
 			
	(and 
		(progv '(a b c d) '(10 20) 
			   (and (equal (list a b) '(10 20))
				   (notany #'boundp '(c d))
			   )
		)
		(progv '(aa bb cc dd ee ff gg) '()
			   (notany #'boundp '(aa bb cc dd ee ff gg))
		)
	)
)

(do-test "AR 7464: SELECTQ's optimizer should do constant-folding when selector is (SYSTEMTYPE)"
   (equal (macroexpand-1 '(il:selectq (il:systemtype)
                              (il:interlisp-10 (garbage))
                              ((il:tenex il:tops-20) (il:more-garbage))
                              ((il:d il:maxc) (il:wonderfulness) (il:brilliance))
                              (il:darn)))
          '(progn (il:wonderfulness) (il:brilliance))))
