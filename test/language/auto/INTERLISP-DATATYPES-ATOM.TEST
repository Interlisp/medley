;; Function To Be Tested: ATOM
;;
;; Source:        IRM, p 9.1
;;
;; Chapter 9: Conditionals And Iterative Statements		
;;	Section 1: Data Type Predicates
;;
;; Created By:    Henry Cate III
;;
;; Creation Date: March 11, 1987
;;
;; Last Update:  
;;
;; Filed As:      {eris}<lispcore>test>DataTypes>Atom.test
;;
;; 


(do-test "test simple cases"
    (and
       (eq t (il:atom 'a-atom))
       (eq t (il:atom 5))
       (eq nil (il:atom "a string"))
     ))


(do-test "Try various types of litatoms"
    (and
       (eq t (il:atom 'ABCDEFGHIJKLMNOPQRSTUVWXYZ))
       (eq t (il:atom 'A-couple-dashs))
       (eq t (il:atom 'Numbers-1234567890))

       (eq t (il:atom 'il:other-packags))
       (eq t (il:atom 'il:other-packagsNumbers-1234567890))
       (eq t (il:atom 'il:other-packagsA-couple-dashs))

       (eq t (il:atom T))
       (eq t (il:atom nil))
       (eq t (il:atom ()))
       (eq t (il:atom '()))
       (eq t (il:atom (list)))
       (eq t (il:atom (eq 1 2)))
     ))


(do-test "Test numbers are atoms"
    (and
       (eq t (il:atom 123))
       (eq t (il:atom 45.67))
       (eq t (il:atom 8/9))
       (eq t (il:atom #c( 6/7 3.00)))
       (eq t (il:atom most-positive-fixnum))
       (eq t (il:atom 37e5))
       (eq t (il:atom .001))
       (eq t (il:atom #c( 6/7 3.00)))
	))


(do-test "Test able to take atoms from own function"
    (flet ((tee nil t) (nill nil nil) (temp-atom nil 'atom)
		(temp-number nil 12.2))
    (test-defun temp-fun nil 'atom)
    (test-setq temp-atom 'il:temp-pointed)
    (and
       (eq t (il:atom (tee)))
       (eq t (il:atom (nill)))
       (eq t (il:atom (temp-atom)))
       (eq t (il:atom (temp-fun)))
       (eq t (il:atom temp-atom))
       (eq t (il:atom (temp-number)))
    )))


(do-test "Test able to take atoms from system function"
    (and
	  (eq t (il:atom (car '(a b))))
       (eq t (il:atom (second '(a b))))
       (eq t (il:atom (third '(1 2 3 4 5))))
       (eq t (il:atom (first (multiple-value-list (gentemp)))))
       (eq t (il:atom (first (multiple-value-list (gentemp "il")))))
    ))


(do-test "Stop on atoms from own functions"
    (flet ((temp-string nil "string"))
    (test-defun temp-fun nil #\*)
    (test-setq temp-atom *random-state*)
    (and
       (eq nil (il:atom (temp-string)))
       (eq nil (il:atom (temp-fun)))
       (eq nil (il:atom temp-atom))
    )))


(do-test "Stop on atoms from system functions"
    (and
	  (eq nil (il:atom (car '(#*1001 '#( 5 4 3 2 1)))))
       (eq nil (il:atom (second '(#\. #\k))))
    ))


(do-test "Test arrays aren't atoms"
    (and
       (eq nil (il:atom (make-array '(2 2))))
       (eq nil (il:atom (make-array '(6 6 6) :element-type '(or integer string))))
       (eq nil (il:atom (make-array 5 :element-type 'bit :initial-contents '(0 0 1 1 0))))
       (eq nil (il:atom (make-array '(5 5) :displaced-to (make-array '(6 6 6) :element-type '(or integer string)))))
       (eq nil (il:atom (make-array 50 :initial-element 0)))
       (eq nil (il:atom (make-array 20 :element-type 'string-char :initial-element #\0)))
	))


(do-test "Test other datatypes aren't atoms"
    (and
       (eq nil (il:atom #\backspace))			; character
       (eq nil (il:atom #\*))					; character
       (eq nil (il:atom #\.))					; character
       (eq nil (il:atom (make-hash-table)))		; hash table
       (eq nil (il:atom (car (list-all-packages))))	; packages
       (eq nil (il:atom (pathname nil)))			; pathname
       (eq nil (il:atom *random-state*))			; ramdom state
       (eq nil (il:atom #'cons))				; compiled function
       (eq nil (il:atom (copy-readtable)))		; readtable
       (eq nil (il:atom #*1001))				; simple-bit-vector
       (eq nil (il:atom "twine"))				; simple-string
       (eq nil (il:atom (make-synonym-stream nil)))	; stream
       (eq nil (il:atom '#( 5 4 3 2 1)))			; vector
     ))

STOP

