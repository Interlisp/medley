;; Function To Be Tested: LITATOM
;;
;; Source:        IRM, p 9.1
;;
;; Chapter 9: Conditionals And Iterative Statements		
;;	Section 1: Data Type Predicates
;;
;; Created By:    Henry Cate III
;;
;; Creation Date: March 11, 1987
;;
;; Last Update:  
;;
;; Filed As:      {eris}<lispcore>test>DataTypes>Litatom.test
;;
;; 


(do-test "test simple cases"
    (and
       ; Does the function work?
       (eq t (il:litatom 'a-atom))
       (eq nil (il:litatom 5))
       (eq nil (il:litatom "a string"))
     ))


(do-test "Try various types of litatoms"
    (and
       (eq t (il:litatom 'ABCDEFGHIJKLMNOPQRSTUVWXYZ))
       (eq t (il:litatom 'A-couple-dashs))
       (eq t (il:litatom 'Numbers-1234567890))

       (eq t (il:litatom 'il:other-packags))
       (eq t (il:litatom 'il:other-packagsNumbers-1234567890))
       (eq t (il:litatom 'il:other-packagsA-couple-dashs))

       (eq t (il:litatom T))
       (eq t (il:litatom nil))
       (eq t (il:litatom ()))
       (eq t (il:litatom '()))
       (eq t (il:litatom (list)))
       (eq t (il:litatom (eq 1 2)))
     ))


(do-test "Test able to take litatoms from own function"
    (flet ((tee nil t) (nill nil nil) (temp-litatom nil 'litatom))
    (test-defun temp-fun nil 'litatom)
    (test-setq temp-atom 'il:temp-pointed)
    (and
       (eq t (il:litatom (tee)))
       (eq t (il:litatom (nill)))
       (eq t (il:litatom (temp-litatom)))
       (eq t (il:litatom (temp-fun)))
       (eq t (il:litatom temp-atom))
    )))


(do-test "Test able to take litatoms from system function"
    (and
	  (eq t (il:litatom (car '(a b))))
       (eq t (il:litatom (second '(a b))))
       (eq t (il:litatom (first (multiple-value-list (gentemp)))))
       (eq t (il:litatom (first (multiple-value-list (gentemp "il")))))
    ))


(do-test "Stop on litatoms from own functions"
    (flet ((temp-number nil 12.2) (temp-string nil "string"))
    (test-defun temp-fun nil #\*)
    (test-setq temp-atom *random-state*)
    (and
       (eq nil (il:litatom (temp-number)))
       (eq nil (il:litatom (temp-string)))
       (eq nil (il:litatom (temp-fun)))
       (eq nil (il:litatom temp-atom))
    )))


(do-test "Stop on litatoms from system functions"
    (and
	  (eq nil (il:litatom (car '(1 2))))
       (eq nil (il:litatom (second '(#\. #\k))))
    ))


(do-test "Test numbers aren't litatoms"
    (and
       (eq nil (il:litatom 123))
       (eq nil (il:litatom 45.67))
       (eq nil (il:litatom 8/9))
       (eq nil (il:litatom #c( 6/7 3.00)))
       (eq nil (il:litatom most-positive-fixnum))
       (eq nil (il:litatom 37e5))
       (eq nil (il:litatom .001))
       (eq nil (il:litatom #c( 6/7 3.00)))
	))


(do-test "Test arrays aren't litatoms"
    (and
       (eq nil (il:litatom (make-array '(2 2))))
       (eq nil (il:litatom (make-array '(6 6 6) :element-type '(or integer string))))
       (eq nil (il:litatom (make-array 5 :element-type 'bit :initial-contents '(0 0 1 1 0))))
       (eq nil (il:litatom (make-array '(5 5) :displaced-to (make-array '(6 6 6) :element-type '(or integer string)))))
       (eq nil (il:litatom (make-array 50 :initial-element 0)))
       (eq nil (il:litatom (make-array 20 :element-type 'string-char :initial-element #\0)))
	))


(do-test "Test other datatypes aren't litatoms"
    (and
       (eq nil (il:litatom #\backspace))				; character
       (eq nil (il:litatom #\*))					; character
       (eq nil (il:litatom #\.))					; character
       (eq nil (il:litatom (make-hash-table)))			; hash table
       (eq nil (il:litatom (car (list-all-packages))))	; packages
       (eq nil (il:litatom (pathname nil)))			; pathname
       (eq nil (il:litatom *random-state*))			; ramdom state
       (eq nil (il:litatom #'cons))					; compiled function
       (eq nil (il:litatom (copy-readtable)))			; readtable
       (eq nil (il:litatom #*1001))					; simple-bit-vector
       (eq nil (il:litatom "twine"))				; simple-string
       (eq nil (il:litatom (make-synonym-stream nil)))	; stream
       (eq nil (il:litatom '#( 5 4 3 2 1)))			; vector
     ))

STOP

