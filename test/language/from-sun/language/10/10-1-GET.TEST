;; Function To Be Tested: get
;;
;; Source:        CLtL p. 164
;; Chapter 10: Symbols		Section 1: The Property List
;; Page: 164
;;
;; Created By:    Peter Reidy
;;
;; Creation Date: June 13 86
;;
;; Last Update:   16 December 86
;;
;; Filed As:      {eris}<lispcore>cml>test>10-1-get.test
;;
;;
;; Syntax:                get symbol indicator &optional default
;;
;; Function Description:  Get the value of indicator from the property list of symbol.  Return default if specified and the value of indicator isn't found.  default defaults to nil.  Note that the function returns the same value (nil) if nil is the value of the indicated property or if symbol does not have the indicated property.
;;
;; Argument(s):          	symbol - a valid CML symbol;
;;					indicator - any valid CML expression
;; Returns:               value of a property - if symbol has a
;;					property eq to indicator's; 
;;					default - if specified and the property's
;;					value is not found;
;;					nil - if not found and no default
;;					specified.
;;
(do-test-group get-group
;; First, create some property lists.
	:before (progn
		(test-setq  carre 2 four 4 five 5 cinq 'five) ;; The symbol FIVE, not the number which is FIVE's value
;; Start with clean property lists.
		(setf (symbol-plist 'four) nil)
		(setf (symbol-plist 'five) nil)
		(setf (symbol-plist 'cinq) nil)
		(setf (get 'four 'square) (* 4 4))
		(setf (get 'five 'square) (* 5 5))		
		(setf (get 'four 'sqrt) (sqrt four))
		(setf (get 'four 'odd) nil)
		(setf (get 'five'sqrt) (sqrt five))
		(setf (get 'four 'spelling) "four")
		(setf (get 'five 'spelling) "five")
		)

;; Try some ordinary gets.
	(do-test "regular-get-test"
		(AND
			(get 'four 'square)
			(eq (get 'five 'square) 25.)
			(eql (get 'five 'sqrt) (sqrt 5))
			(eql (get 'four 'sqrt) (cadr '(1.0 2.0 3.0)))
			(get 'four 'spelling)
			(string= (get 'five 'spelling) "five")
		)
	)
;; Try the default feature
	(do-test "default get test"
		(AND
			(null (get 'four 'prime))
			(get 'four 'prime (car '(10 20 30)))
			(setq epimenides t)
			(eq t (get 'four 'prime epimenides))
		)
	)
;; Test the equivalence between get of a nonexistent property and get of a property defined to be nil.
	(do-test "nil get test"
		(AND
			(setf (get 'five 'odd) t)
			(member 'odd (symbol-plist 'four))
			(member 'odd (symbol-plist 'five))
			(not (member 'perfect-square-p (symbol-plist 'five)))
			(null (get 'four 'odd))
			(null (get 'five 'perfect-square-p))
			(eq (get 'four 'odd) (get 'five 'cube))
		)
	)
;; Test the function's ability to distinguish between names and values.  With acknowledgements to Ron Fischer.
	(do-test "use-mention get test"
		(AND
;; cinq is bound to the symbol 'five, not to the symbol's value.
;; A property of 'cinq...
			(not (equalp (get cinq 'sqrt) (get 'cinq 'sqrt)))
			(setf (get 'cinq 'carre) "vingt-cinq")
			(member 'carre (symbol-plist 'cinq))
;; ...not of the symbol which is its value
			(not(member 'carre (symbol-plist cinq)))
;; A property of the value of 'cinq - i.e. of the symbol 'five
			(setf (get cinq 'carre) "vingt-cinq")
			(member 'carre (symbol-plist cinq))
;; The symbol 'carre is on the plist, not carre's value.
			(not(member carre (symbol-plist cinq)))
			(setf (get cinq 'carre) 2)
;; The value of the symbol 'carre - i.e. 2 - should be part of the property list now.
			(member carre (symbol-plist cinq))
		)
	)
)
STOP



