;; Function To Be Tested: copy-symbol
;;
;; Source:        CLtL p. 169
;; Chapter 10: Symbols		Section 3: Creating Symbols
;;
;; Created By:    Peter Reidy
;;
;; Creation Date: 30 June 86
;;
;; Last Update:   15 December 86
;;
;; Filed As:      {eris}<lispcore>cml>test>10-3-copy-symbol.test
;;
;; Syntax:        copy-symbol sym &optional copy-props            
;;
;; Function Description: returns a new uninterned symbol with the same print name as sym.  If copy-props is non-nil, the initial value and function definition will be the same as those of sym, and the property list of the new symbol will be a copy of sym's.  If copy-props is nil (the default), then the new symbol will be unbound and undefined, and its property list will be empty.
;;
;; Argument(s):      sym: an object whose value is a symbol    	
;;				copy-props: an object whose value is nil or non-nil
;;
;; Returns:          sym    
;;
(do-test-group copy-symbol-group
	:before
	(progn
		(test-setq forty 40)
		(setf (symbol-plist 'forty) nil (get 'forty 'square) 1600)
		(test-defun forty nil 4040)
		(test-setq fortyname (copy-symbol 'forty))
	)
;;
	(do-test "copy-symbol nil test"
		(AND
;; The print names should be the same.
			(string= (symbol-name 'forty) (symbol-name fortyname))
;; Since we didn't copy props, the new symbol should be unbound and without property list or function definition.
			(every 'null
				(list
					(boundp fortyname)
					(symbol-plist 'fortyname)
					(fboundp fortyname)
				)
			)
;; but 'forty is
			forty
			(symbol-plist 'forty)
			(forty)
		)
	)
;; Now try it with copy-props; it should bring everything with it.
	(do-test "copy-symbol copy-props test"
		(and
;; Returns nil 9 October; AR 6540
			(setq fortyname (copy-symbol 'forty 40))
			(eq (eval fortyname) forty)
			(eq (get 'forty 'square) (getf (symbol-plist fortyname) 'square))
			(eq (forty) (funcall (symbol-function fortyname)))
		)
	)	
)
STOP

