;; Function To Be Tested: gentemp
;;
;; Source:        CLtL p. 169
;;
;; Chapter 10: Symbols		Section 3: Creating Symbols
;;
;; Created By:    Peter Reidy
;;
;; Creation Date: 10 July 86
;;
;; Last Update:   17 December 86
;;
;; Filed As:      {eris}<lispcore>cml>test>10-3-gentemp.test
;;
;; Syntax:        gentemp &optional prefix package         
;;
;; Function Description: invents a print name consisting of prefix (default: T) and a number, creates a new symbol with that print name and interns in package (default: the current package); returns the new symbol.  prefix is in effect for only one call, unlike gensym's, which becomes the new default.
;;
;; Argument(s): prefix: a string        	
;;			package: a package
;;
;; Returns: the new symbol             
;;
(do-test-group gentemp-group
	:before
	(progn
		(test-setq
			digits '(#\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9)
			prefix "T"
			nondefprefix "Fallingwater"
			iter (make-list 10)
			pack1 (make-package (gensym))
			pack2 (make-package (gensym))
		)
		;; Acknowledgements to R. Fischer
		(test-defun integerpart (&optional (charpart prefix) (symbol (gentemp (string charpart))))
		"Extract the integers from a symbol in gentemp form.
		 Default symbol is a new gentemp; default non-integer part is #\T,
		 the standard gentemp prefix."
			(car
				(multiple-value-list
					(parse-integer
						(string-trim	(string charpart)
									(symbol-name symbol)
						)
					)
				)
			)
		)
		(test-defun maketemps (base limit prefix)
		"Generate a succession of symbols of form prefix/integer.
		 Base is the first integer, limit is the number of iterations.
		 The integer part will range from base to base+counter-1.
		 E.g. (maketemps 100 10 #\Q) will generate Q100 - Q109."
			(do	((cnt 0 (1+ cnt)))
				((= cnt limit))
				;; Since gentemp creates symbols new IN THE PACKAGE, phony symbols have to be in the package as well; thus the import.
				(import
					(make-symbol
						(concatenate 'simple-string
							prefix
							(prin1-to-string (+ base cnt))
						)
					)
				)
			)
		) ; test-defun
	) ; progn
;;
	(do-test "default prefix should be T"
		(char= (character prefix) (char (symbol-name (gentemp)) 0))
	)
	(do-test "after prefix should be an integer"
			(integerp (integerpart))
	)
	(do-test "nothing after integer part"
			(string=
				prefix
				(string-trim digits (symbol-name (gentemp)))
			)
	)
	(do-test "integers should be in sequence; 10 tries"
		;; Acknowledgements to Karin Sye.
		;; Might skip over a previously-used symbol; hence the <=.
			(dolist
				(dummy iter
					(<= -1
						(- (integerpart) (integerpart))
					)
				)
			)
	)
	(do-test "result should be interned"
		(symbol-package (gentemp))
	)
	(do-test "interned in *package*"
		(equal *package* (symbol-package (gentemp)))
	)
	(do-test "created in specified package"
		(AND
			(equal pack1 (symbol-package (gentemp prefix pack1)))
			(equal pack2 (symbol-package (gentemp "pack2" pack2)))
		) ; and
	)
	(do-test "prefix should reset once, then go back to default"
		(AND
			(string=
				nondefprefix
				(string-trim digits (symbol-name (gentemp nondefprefix)))
			)
			(gentemp nondefprefix)
			(string=
				prefix
				(string-trim digits (symbol-name (gentemp)))
			)
		)
	)
	(do-test "w/default prefix, skip used suffixes"
		(let	((base (1+ (integerpart))) (limit (1+ (random 100))))
			(maketemps base limit prefix)
			(or
				;; maketemps will have used up limit consecutive symbols; gentemp will skip at least that many
				(> (integerpart) (+ (1- limit) base))
				;; In case of wraparound
				(<= (integerpart) (1+ base))
			)
		)
	)
	(do-test "w/non-default prefix, skip used suffixes"
		(let	((base (1+ (integerpart))) (limit (1+ (random 100))))
			(maketemps base limit prefix)
			(or
				;; maketemps will have used up limit consecutive symbols; gentemp will skip at least that many.
				(> (integerpart) (+ (1- limit) base))
				;; In case of wraparound
				(<= (integerpart) (1+ base))
			)
		)
	)
)
STOP

