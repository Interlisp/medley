;; Function To Be Tested: do-all-symbols
;;
;; Source: Guy L Steele's CLTL
;; Section: 11.7 Package System Functions and Variables
;; Page: 188
;;
;; Created By:   John Park
;;
;; Creation Date: Oct 28, 1986
;;
;; Last Update:   Mar 24, 1987
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>11-7-do-all-symbols.test
;;
;;
;; Syntax:        (do-all-symbols (var [result-form]) {declaration}*
;;											   {tag| statement}*
;;
;; Function Description: This is similar to do-symbols but executes the body once
;; for every symbol contained in every package.  (This will not process every
;; symbol whatsoever, because a symbol not accessible in any package.) It is not 
;; in general the case that each symbol is processed only once, because a symbol 
;; may appear in many packages.
;;   
;; 
;; Argument(s):   var (bound to the symbol)
;;			   package
;;			  result-form (a single form)
;;			  
;; Returns: value of the do-all-symbols form     
;;
;; Constraints/Limitations: Since do-all-symbols will executes the body for every
;; symbol contained in every package, this test may take unreasonably a long time.
;; In order to execute this test within a reasonable amount of time (i.e. 5 min)
;; do-all-symbols-test package will stop at the third package of package list.


(do-test "do-all-symbols-test"
	 (let ((p3 (third (list-all-packages))))
		(catch 'stop-at-third-package
			(do-all-symbols (s (null s))
				(when (and (symbolp s) 
			   			 (eq (symbol-package s) p3))
		    			 (throw 'stop-at-third-package t)
				)
			)
		)
	)
)

STOP


