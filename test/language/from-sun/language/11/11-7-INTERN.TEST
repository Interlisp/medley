;; Function To Be Tested: intern
;;
;; Source: Guy L Steele's CLTL
;; Section: 11.7 Package System Functions and Variables
;; Page: 184
;;
;; Created By:   John Park
;;
;; Creation Date: Oct 17, 1986
;;
;; Last Update:  JAN 14, 1987 
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>11-7-intern.test
;;
;;
;; Syntax:        (intern string &optional package)
;;
;; Function Description: The package, which defaults to the current package, is
;; searched for a symbol with the name specified by the string argument.  This search
;; will include inherited symbols, as described in section 11.4.  If a symbol with 
;; the specified name is found, it is returned.  If no such symbol is found, one is 
;; created and is installed in the specified package as an internal symbol 
;; (as an external symbol if the package is the keyword package)- the specified 
;; package becomes the home package of the created symbol.  
;; 
;; Argument(s):   package
;;			  
;; Returns:     Two values: The first is the symbol that was found or created. 
;; The second value is nil if no pre-existing symbol was found, and takes on one of
;; three  values if a symbol was found:
;;
;; 	:internal - The symbol was directly present in the package as an internal symbol.
;;	:external - The symbol was directly present as an external symbol.
;;	:inherited - The symbol was inherited via use-package (which implies that the
;;				symbol is internal.
;;
;; Constraints/Limitations: none



(do-test "intern-test-internal"
;; Also test import function.
		(and (eq :inherited (second (multiple-value-list 
								(find-symbol "SOFTWARE-TYPE" 'USER))))
			(import '(lisp:software-type) 'USER)
			(let ((SYM (intern "SOFTWARE-TYPE" 'USER)))
				(and (eq SYM 'USER::SOFTWARE-TYPE)
					(eq :internal
						(second (multiple-value-list 
								(find-symbol "SOFTWARE-TYPE" 'USER))))
				)
			)
		)
)

(do-test "intern-test-external"
;;	Also test export function.
		(and (export '(USER::SOFTWARE-TYPE) 'USER)
			(eq :external 
				(second (multiple-value-list (find-symbol "SOFTWARE-TYPE" 'USER))))
			(unintern 'SOFTWARE-TYPE 'USER)
		)
)



STOP


