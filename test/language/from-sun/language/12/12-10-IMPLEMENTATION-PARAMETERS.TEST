;; Function To Be Tested: implementation-parameters
;;
;; Source:     Common Lisp by Guy Steele
;;         Section 12.6: Type Conversions and Component Extractions
;;					on Numbers  Page: 220
;;
;; Created By: John Park
;;
;; Creation Date: July 17, 86
;;
;; Last Update:  Aug 21, 86 
;;
;; Filed as:      {eris}<lispcore>cml>test>12-6-implementation-parameters.test
;;
;; Syntax: 
;;
;; Function Description: This file tests to determine if the following constants
;; are defined.  They may be useful for parameterizing code in some situations.
;; Constants defined: 
;; most-positive-fixnum, most-negative-fixnum, most-positive-short-float,
;; least-positive-short-float, least-negative-short-float,
;; most-negative-short-float, most-positive-single-float,
;; least-positive-single-float, least-negative-single-float,
;; most-negative-single-float, most-positive-double-float,
;; least-positive-double-float, least-negative-double-float,
;; most-negative-double-float, most-positive-long-float,
;; least-positive-long-float, least-negative-long-float,
;; most-negative-long-float, short-float-epsilon,
;; single-float-epsilon, double-float-epsilon, long-float-epsilon,
;; short-float-negative-epsilon, single-float-negative-epsilon, 
;; double-float-negative-epsilon, and long-float-negative-epsilon
;;
;;
;; Argument(s):  
;;
;; Returns: constant value
;;
;; Constraints/limitations: None 



(do-test-group group-constants
		:before (progn 

		(setf implementation-parameters
'(most-positive-fixnum most-negative-fixnum most-positive-short-float least-positive-short-float least-negative-short-float most-negative-short-float most-positive-single-float least-positive-single-float least-negative-single-float most-negative-single-float most-positive-double-float least-positive-double-float least-negative-double-float most-negative-double-float most-positive-long-float least-positive-long-float least-negative-long-float most-negative-long-float short-float-epsilon single-float-epsilon double-float-epsilon long-float-epsilon short-float-negative-epsilon single-float-negative-epsilon double-float-negative-epsilon long-float-negative-epsilon))

(setf parameter-values (mapcar #'eval implementation-parameters)))

	(do-test implementation-parameters-exist?
				(and (every #'boundp implementation-parameters)
					(every #'numberp parameter-values))))

STOP



 