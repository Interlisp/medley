;; Function To Be Tested: <
;;
;; Source: Guy L Steele's CLTL
;; Section: 12.3 Comparisons on Numbers
;; Page: 196
;;
;; Created By:    Kelly Roach
;;
;; Creation Date: July 12,1986
;;
;; Last Update:   July 12,1986
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>12-3-LTHAN.TEST
;;
;;
;; Syntax:        (< NUMBER &REST MORE-NUMBERS)
;;
;; Function Description:
;; These functions each take one or more arguments.  If the sequence
;; of arguments satisfies a certain condition:
;; 
;; 
;; 
;;          =         all the same
;;          /=         all different
;;          <         monotonically increasing
;;          >         monotonically decreasing
;;          <=         monotonically nondecreasing
;;          >=
;;          monotonically nonincreasing
;; 
;; then the predicate is true, and otherwise is false.
;; Complex numbers may be compared using = and /=,
;; but the others require non-complex arguments.
;; Two complex numbers are considered equal by =
;; if their real parts are equal and their imaginary parts are equal
;; according to =.
;; A complex number may be compared to a non-complex number with = or /=.
;; For example:
;; 
;;     
;;     (= 3 3) is true.         (/= 3 3) is false.
;;     (= 3 5) is false.         (/= 3 5) is true.
;;     (= 3 3 3 3) is true.         (/= 3 3 3 3) is false.
;;     (= 3 3 5 3) is false.         (/= 3 3 5 3) is false.
;;     (= 3 6 5 2) is false.         (/= 3 6 5 2) is true.
;;     (= 3 2 3) is false.         (/= 3 2 3) is false.
;;     (< 3 5) is true.
;;          (<= 3 5) is true.
;;     (< 3 -5) is false.         (<= 3 -5) is false.
;;     (< 3 3) is false.         (<= 3 3) is true.
;;     (< 0 3 4 6 7) is true.         (<= 0 3 4 6 7) is true.
;;     (< 0 3 4 4 6) is false.         (<= 0 3 4 4 6) is true.
;;     (> 4 3) is true.         (>= 4 3) is true.
;;     (> 4 3 2 1 0) is true.         (>= 4 3 2 1 0) is true.
;;     (> 4 3 3 2 0) is false.         (>= 4 3 3 2 0) is true.
;; 
;;     (> 4 3 1 2 0) is false.         (>= 4 3 1 2 0) is false.
;;     (= 3) is true.         (/= 3) is true.
;;     (< 3) is true.         (<= 3) is true.
;;     (= 3.0 #C(3.0 0.0)) is true.         (/= 3.0 #C(3.0 1.0)) is true.
;;     (= 3 3.0) is true.         (= 3.0S0 3.0D0) is true.
;;     (= 0.0 -0.0) is true.         (= 5/2 2.5) is true.
;;     (> 0.0 -0.0) is false.         (= 0 -0.0) is true.
;;     
;; With two arguments, these functions perform the usual arithmetic
;; comparison tests.
;; With three or more arguments, they are useful for range checks.
;; For example:
;; 
;;     (<= 0 X 9)	       ;true if X is between 0 and 9, inclusive
;; 
;;     (< 0.0 X 1.0)	       ;true if X is between 0.0 and 1.0, exclusive
;;     (< -1 J (LENGTH S))    ;true if J is a valid index for S
;;     (<= 0 J K (- (LENGTH S) 1))	;true if J and K are each valid
;;     				;  indices for S and also JSailK
;;     
;; 
;; Rationale: The ``unequality'' relation is called /= rather than
;; <>
;; (the name used in Pascal) for two reasons.  First, /= of more than two
;; arguments is not the same as the OR of < and > of those same
;; arguments.  Second, unequality is meaningful for complex numbers even though
;; < and > are not.  For both reasons it would be misleading to
;; associate unequality with the names of < and >.
;; 
;; Compatibility note: In Common Lisp, the comparison operations
;; perform ``mixed-mode'' comparisons: (= 3 3.0) is true.  In Maclisp,
;; there must be exactly two arguments, and they must be either both fixnums
;; or both floating-point numbers.  To compare two numbers for numerical
;; equality and type equality, use function EQL.
;; 
;; Argument(s):   NUMBER - a number
;;                MORE-NUMBERS - numbers
;;
;; Returns:       T or NIL
;;



(do-test lessp-test
         (and (< 3)
              (< 3 4)
              (< 3 4 5)
              (< 3 4 5 6)
              (NOT (< 3 3))
              (NOT (< 3 4 4))
              (NOT (< 3 4 5 5))
              (< 3.0)
              (< 3.0 4.0)
              (< 3.0 4.0 5.0)
              (< 3.0 4.0 5.0 6.0)
              (NOT (< 3.0 3.0))
              (NOT (< 3.0 4.0 4.0))
              (NOT (< 3.0 4.0 5.0 5.0))
              (< -299 0 3 5 6)
              (< 1 3 4 100 107 1872 19828)
              (< 0 3 4 6 7 8 10)
              (< -7 -6 -5 -4 0 1 2 3 4)
              (not (< 0 3 4 4 6))
              (not (< 10  5 -3 0))
              (not (< 0 0 1))))

STOP
