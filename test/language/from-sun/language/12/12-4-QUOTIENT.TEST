;; Function To Be Tested: /
;;
;; Source: Guy L Steele's CLTL
;; Section: 12.4 Arithmetic Operations
;; Page: 200
;;
;; Created By:    Kelly Roach
;;
;; Creation Date: July 12,1986
;;
;; Last Update:   July 12,1986
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>12-4-QUOTIENT.TEST
;;
;;
;; Syntax:        (/ NUMBER &REST NUMBERS)
;;
;; Function Description:
;; The function /, when given more than one argument, successively divides
;; the first argument by all the others and returns the result.
;; 
;; With one argument, / reciprocates the argument.
;; 
;; / will produce a ratio if the mathematical quotient of two integers
;; is not an exact integer.  For example:
;; 
;;     (/ 12 4) => 3
;;     (/ 13 4) => 13/4
;;     (/ -8) => -1/8
;;     (/ 3 4 5) => 3/20
;;     
;; To divide one integer by another producing an integer result,
;; use one of the functions FLOOR, CEILING, TRUNCATE,
;; or function ROUND.
;; 
;; If any argument is a floating-point number,
;; then the rules of floating-point contagion apply.
;; 
;; Compatibility note: What / does is totally unlike what the usual
;; // or QUOTIENT operator does.  In most Lisp systems,
;; QUOTIENT behaves like / except when dividing integers,
;; in which case it behaves like function TRUNCATE of two arguments;
;; this behavior is mathematically intractable, leading to such
;; anomalies as
;; 
;;     (QUOTIENT 1.0 2.0) => 0.5   but   (QUOTIENT 1 2) => 0
;;     
;; In contrast, the Common Lisp function / produces these results:
;; 
;;     (/ 1.0 2.0) => 0.5          and   (/ 1 2) => 1/2
;; 
;;     
;; In practice QUOTIENT is used only when one is sure that both arguments
;; are integers, OR when one is sure that at least one argument
;; is a floating-point number.  / is tractable for its purpose
;; and ``works'' for ANY numbers.
;; 
;; Argument(s):   NUMBER - a number
;;                NUMBERS - numbers
;;
;; Returns:       a number
;;



(do-test quotient-test
         (and (equalp (/ 12 3) 4)
              (equalp (/ 40.0 4.0) 10.0)
              (equalp (/ 1 2) .5)
              (equalp (/ -8) -.125)
              (equalp (/ 1.5E4 2E3) 7.5)))

STOP
