;; Function To Be Tested: ACOSH
;;
;; Source: Guy L Steele's CLTL
;; Section: 12.5.2 Trigonometric and Related Functions
;; Page: 209
;;
;; Created By:    Kelly Roach and John Park
;;
;; Creation Date: July 29,1986
;;
;; Last Update:   July 12,1986
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>12-5-2-ACOSH.TEST
;;
;;
;; Syntax:        (ACOSH NUMBER)
;;
;; Function Description:
;; These functions compute the hyperbolic sine, cosine, tangent,
;; arc sine, arc cosine, and arc tangent functions, which are mathematically
;; defined for an argument X as follows:
;; 
;; 
;; Hyperbolic sine         (E^x-E-^x)/2
;; Hyperbolic cosine         (E^x+E-^x)/2
;; Hyperbolic tangent         (E^x-E-^x)/(E^x+E-^x)
;; Hyperbolic arc sine         log (X+SQRT(1+X2))
;; Hyperbolic arc cosine         log (X+(X+1)SQRT((X-1)/(X+1)))
;; Hyperbolic arc tangent         log ((1+X)SQRT(1-1/X2))
;; 
;; Note that the result of ACOSH may be
;; complex even if the argument is not complex; this occurs
;; when the argument is less than one.
;; Also, the result of ATANH may be
;; complex even if the argument is not complex; this occurs
;; when the absolute value of the argument is greater than one.
;; 
;; 
;; Implementation note: These formulae are mathematically correct, assuming
;; completely accurate computation.  They may be terrible methods for
;; floating-point computation!  Implementors should consult a good text on
;; numerical analysis.  The formulas given above are not necessarily
;; the simplest ones for real-valued computations, either; they are chosen
;; to define the branch cuts in desirable ways for the complex case.
;; 
;; Argument(s):   NUMBER - a number
;;
;; Returns:       a number
;;


(do-test-group (acosh-setup
	:before (progn
		(setq acosh-tolerance 0.00001)
		(setq acosh-test-cases '(0.0 0.3 0.5 1.0 3.0 7.0 -0.9 -0.7 -0.3 -0.1
							#C(1.0 0.3) #C(-1.0 7.0) #C(-1.0 -2.0)))

		(defun compute-acosh (x)
			(log (+ x 
				  (* (+ x 1.0)
					(sqrt (/ (- x 1.0) (+ x 1.0)))))))

		(setq correct-acosh 
				(mapcar #'compute-acosh  acosh-test-cases))
						

		(defun acosh-test (pairs) ;  calculate vs correct
		   (cond ((zerop (car pairs)) (zerop (cdr pairs)))
				((complexp (cdr pairs)) 
					(and (< (abs (/ (- (abs(realpart (car pairs)))
									(abs(realpart (cdr pairs)))) 
								(realpart (cdr pairs))))
					 	acosh-tolerance)
						(< (abs (/ (- (abs(imagpart (car pairs)))
									(abs(imagpart (cdr pairs)))) 
								(imagpart (cdr pairs))))
						 acosh-tolerance)))
				(t (< (abs (/ (- (car pairs)(cdr pairs)) (cdr pairs)))
						acosh-tolerance))))))

					 
 	(do-test acosh-test
		(and (setq calculated-acosh   
				(mapcar #'acosh	 acosh-test-cases))
			(setq acosh-pairs
				(pairlis calculated-acosh correct-acosh))
			(or (equal calculated-acosh correct-acosh)
				(notany 'null (mapcar #'acosh-test acosh-pairs))))))




STOP

