;; Function To Be Tested: ATAN
;;
;; Source: Guy L Steele's CLTL
;; Section: 12.5.2 Trigonometric and Related Functions
;; Page: 207
;;
;; Created By:    Kelly Roach and John Park
;;
;; Creation Date: July 12,1986
;;
;; Last Update:   July 28,1986
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>12-5-2-ATAN.TEST
;;
;;
;; Syntax:        (ATAN X &OPTIONAL Y)
;;
;; Function Description:
;; An arc tangent is calculated and the result is returned in radians.
;; 
;; With two arguments Y and X, neither argument may be complex.
;; The result is the arc tangent of the quantity Y/X.
;; The signs of Y and X are used to derive quadrant
;; information; moreover, X may be zero provided
;; Y is not zero.  The value of ATAN is always between
;; - (exclusive) and  (inclusive).
;; The following table details various special cases.
;; 
;; 
;; 
;; 
;;          Condition                  Cartesian locus         Range of result         
;;          Y = 0         X > 0         Positive X-axis         0         
;;          Y > 0
;;          X > 0         Quadrant I         0 < result < /2         
;;          Y > 0         X = 0         Positive Y-axis         /2         
;;          Y > 0         X < 0
;;          Quadrant II         /2 < result <          
;;          Y = 0         X < 0         Negative X-axis                  
;;          Y < 0         X < 0         Quadrant III
;;          - < result < -/2         
;;          Y < 0         X = 0         Negative Y-axis         -/2         
;;          Y < 0         X > 0         Quadrant IV         
;; -/2 < result < 0         
;;          Y = 0         X = 0         Origin         error         
;; 
;; 
;; 
;; With only one argument Y, the argument may be complex.
;; The result is the arc tangent of Y, which may be defined by
;; the following formula:
;; 
;; 
;; Arc tangent         -I log ((1+I Y) SQRT(1/(1+Y2)))
;; 
;; Implementation note: This formula is mathematically correct, assuming
;; completely accurate computation.  It may be a terrible method for
;; floating-point computation!  Implementors should consult a good text on
;; numerical analysis.  The formula given above is not necessarily
;; the simplest one for real-valued computations, either; it is chosen
;; to define the branch cuts in desirable ways for the complex case.
;; 
;; For a non-complex argument Y, the result is non-complex and lies between
;; -/2 and /2 (both exclusive).
;; 
;; 
;; Compatibility note: Maclisp has a function called ATAN whose
;; range is from 0 to 2.  Almost every other programming language
;; (ANSI Fortran, IBM PL1, Interlisp) has a two-argument arc tangent
;; function with range - to .
;; Zetalisp provides two two-argument
;; arc tangent functions, ATAN (compatible with Maclisp)
;; and ATAN2 (compatible with all others).
;; 
;; Common Lisp makes two-argument ATAN the standard one
;; with range - to .  Observe that this makes
;; the one-argument and two-argument versions of ATAN compatible
;; in the sense that the branch cuts do not fall in different places.
;; The Interlisp one-argument function ARCTAN has a range
;; from 0 to , while nearly every other programming language
;; provides the range -/2 to /2 for
;; one-argument arc tangent!
;; Nevertheless, since Interlisp uses the standard two-argument
;; version of arc tangent, its branch cuts are inconsistent anyway.
;; 
;; Argument(s):   X - a number
;;                Y - a number
;;
;; Returns:       a number
;;



(do-test-group (atan-setup
	:before 	(progn
				(setq atan-tolerance 0.0001)
				(setq atan-test-cases
				   '((0.0 1.5) ; y=0 x>0
					(1.3 1.4) ; y>0 x>0
					(0.5 0.0) ; y>0 x=0
					(1.4 -0.9) ; y>0 x<0
					(0.0 -0.9) ; y=0 x<0
					(-1.0 -1.0) ; y<0 x<0
					(-1.1 0.0) ; y<0 x=0
					(-0.7 1.2) ; y<0 x>0
					))

		(defun check-atan (pair)
			(let ( (y (car pair)) (x (cadr pair) ))
			(cond (( and (= y 0) (> x 0)) (= (atan y x) 0))
				 (( and (> y 0) (> x 0)) 
					(and (> (atan y x) 0)(< (atan y x) (+ (/ pi 2) 0.0001))))
				 (( and (> y 0) (= x 0)) (< (atan y x) (+ (/ pi 2) 0.0001)))
				 (( and (> y 0) (< x 0)) 
					(and (< (atan y x) pi)(> (atan y x) (/ pi 2) )))
				 (( and (= y 0) (< x 0)) (< (atan y x) (+  pi 0.0001)))
				 (( and (< y 0) (< x 0)) 
					(and (> (atan y x)(- pi ))(< (atan y x) (- (/ pi 2) ))))
				 (( and (< y 0) (= x 0)) (< (atan y x)(+ (/ (- pi) 2) 0.0001)))
				 (( and (< y 0) (> x 0)) 
					(and (< (atan y x) 0)(> (atan y x) (-(/ pi 2)) )))
				 (t nil)))) ))

	(do-test atan-test
			(and (setq atan-test-result 
					(mapcar #'check-atan atan-test-cases))
				(notany 'null atan-test-result))))

STOP


				
			  

				 

					
					