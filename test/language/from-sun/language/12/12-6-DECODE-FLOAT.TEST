;; Function To Be Tested: decode-float
;;
;; Source:     Common Lisp by Guy Steele
;;         Section 12.6: Type Conversions and Component Extractions
;;					on Numbers  Page: 218
;;
;; Created By: John Park
;;
;; Creation Date: July 17, 86
;;
;; Last Update:   Jan 28, 1986 Jim Blum  - fix (COND ... NIL) to (COND ... (T NIL))
;;
;; Filed as:      {eris}<lispcore>cml>test>12-6-decode-float.test
;;
;; Syntax: decode-float float 
;;
;; Function Description:  The function decode-float takes a floating-point number
;; and returns three vlaues.  First value is a new floating-point number
;; representing the significand; the second vlue is an integer representing the
;; exponent; and the third value is a floating-point number of the same format
;; indicating the sign. 
;; 
;; Argument(s):   floating-point number
;;
;; Returns: First value: Significand (floating-point number)
;;		  Second Value:  Exponent (integer)
;;		  Third Value: Float-sign (1.0 or -1.0)
;;
;; Constraints/limitations: None 


(do-test-group decode-float-test-setup
  :before (progn 
           (defun check-value(x) 
                  (if (and (or (= x 0.0)
                               (and(>= x 0.5) (< x 1.0)))
                           (floatp x)) t))
           (defun check-sign (x)
                  (cond ((< x 0) (eql (float-sign x) -1.0))
                        ((>= x 0) (eql (float-sign x) 1.0))
                        (t nil)))
           (setq test-decode-numbers 
                 '(0.0 -0.0 1.0 3.0 7.1 -10.0 299.2 1024.99
                       -239898989.9)))

  (do-test  decode-float-test
    (and (setq value-result (mapcar #'decode-float test-decode-numbers))
         (notany #'null (mapcar #'check-value value-result))
         (setq sign-result (mapcar #'check-sign test-decode-numbers))
         (notany #'null sign-result))))	

STOP


