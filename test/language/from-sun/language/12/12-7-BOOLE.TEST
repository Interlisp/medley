;; Function To Be Tested: BOOLE
;;
;; Source: Guy L Steele's CLTL
;; Section: 12.7 Logical Operations on Numbers
;; Page: 222
;;
;; Created By:    Kelly Roach
;;
;; Creation Date: July 12,1986
;;
;; Last Update:   July 12,1986
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>12-7-BOOLE.TEST
;;
;;
;; Syntax:        (BOOLE OP INTEGER1 INTEGER2)
;;
;; Function Description:
;; The function BOOLE takes an operation OP and two integers,
;; and returns an integer produced by performing the logical operation
;; specified by OP on the two integers.  The precise values of
;; the sixteen constants are implementation-dependent, but they are
;; suitable for use as the first argument to BOOLE:
;; 
;;     
;;     INTEGER1           0         0         1         1
;;     INTEGER2           0         1         0         1         OPERATION PERFORMED
;;     BOOLE-CLR
;;          0         0         0         0         ALWAYS 0
;;     BOOLE-SET         1         1         1         1         ALWAYS 1
;;     BOOLE-1
;;          0         0         1         1         INTEGER1
;;     BOOLE-2         0         1         0         1         INTEGER2
;;     BOOLE-C1
;;          1         1         0         0         COMPLEMENT OF INTEGER1
;;     BOOLE-C2         1         0         1         0         COMPLEMENT OF INTEGER2
;;     BOOLE-AND
;;          0         0         0         1         AND
;;     BOOLE-IOR         0         1         1         1         INCLUSIVE OR
;;     BOOLE-XOR
;;          0         1         1         0         EXCLUSIVE OR
;;     BOOLE-EQV         1         0         0         1         EQUIVALENCE (EXCLUSIVE NOR)
;;     BOOLE-NAND
;;          1         1         1         0         NOT-AND
;;     BOOLE-NOR         1         0         0         0         NOT-OR
;;     BOOLE-ANDC1
;;          0         1         0         0         AND COMPLEMENT OF INTEGER1 WITH INTEGER2
;;     BOOLE-ANDC2         0         0         1         0         AND INTEGER1 WITH COMPLEMENT OF INTEGER2
;;     BOOLE-ORC1
;;          1         1         0         1         OR COMPLEMENT OF INTEGER1 WITH INTEGER2
;;     BOOLE-ORC2         1         0         1         1         OR INTEGER1 WITH COMPLEMENT OF INTEGER2
;;     
;; BOOLE can therefore compute all sixteen logical functions on two
;; arguments.  In general,
;; 
;;     (BOOLE BOOLE-AND X Y) 
;; = (LOGAND X Y)
;;     
;; and the latter is more perspicuous.  However, BOOLE is useful when it
;; is necessary to parameterize a procedure so that it can use
;; one of several logical operations.
;; 
;; Argument(s):   OP - anything
;;                INTEGER1 - an integer
;;                INTEGER2 - an integer
;;
;; Returns:       a number
;;



(do-test-group boolean-operation-tests
  :before (progn
           (setq boolean-constants
                 '(boole-clr boole-set boole-1
                   boole-2 boole-c1 boole-c2 boole-and boole-ior
                   boole-xor boole-eqv boole-nand boole-nor  
                   boole-andc1 boole-andc2 boole-orc1 boole-orc2))
           (setq boolean-values (mapcar #'eval boolean-constants))
           (setq integer-pairs '((0 0) (0 1) (1 0) (1 1)))
           (setq boole-clr-result '(0 0 0 0))
           (setq boole-set-result '(1 1 1 1))
           (setq boole-1-result '(0 0 1 1))
           (setq boole-2-result '(0 1 0 1))
           (setq boole-c1-result '(1 1 0 0))
           (setq boole-c2-result '(1 0 1 0))
           (setq boole-and-result '(0 0 0 1))
           (setq boole-ior-result '(0 1 1 1))
           (setq boole-xor-result '(0 1 1 0))
           (setq boole-eqv-result '(1 0 0 1))
           (setq boole-nand-result '(1 1 1 0))
           (setq boole-nor-result '(1 0 0 0))
           (setq boole-andc1-result '(0 1 0 0))
           (setq boole-andc2-result '(0 0 1 0))
           (setq boole-orc1-result '(1 1 0 1))
           (setq boole-orc2-result '(1 0 1 1)))

  (do-test boolean-constants-exist?
           (and (every #'boundp boolean-constants)
                (every #'integerp boolean-values)))	

  (do-test boole-clr-test
           (and (setq clr-test-conditions 
                      (mapcar #'(lambda (x) (append '(boole boole-clr) x))
                              integer-pairs))	
                (setq clr-test-result 
                      (mapcar #'(lambda (x) (append '(logand 1) (list x))) 	
                              clr-test-conditions))
                (equal (mapcar #'eval clr-test-result) boole-clr-result)))

  (do-test boole-set-test
           (and (setq boole-set-test-conditions 
                      (mapcar #'(lambda (x) (append '(boole boole-set) x))
                              integer-pairs))	
                (setq boole-set-test-result 
                      (mapcar #'(lambda (x)  (append  '(logand 1) (list x))) 	
                              boole-set-test-conditions))
                (equal (mapcar #'eval boole-set-test-result) 
                       boole-set-result)))

  (do-test boole-1-test
           (and (setq boole-1-test-conditions 
                      (mapcar #'(lambda (x) (append '(boole boole-1) x))
                              integer-pairs))	
                (setq boole-1-test-result 
                      (mapcar #'(lambda (x) (append '(logand 1) (list x))) 	
                              boole-1-test-conditions))
                (equal (mapcar #'eval boole-1-test-result) 
                       boole-1-result)))

  (do-test boole-2-test
           (and (setq boole-2-test-conditions 
                      (mapcar #'(lambda (x) (append '(boole boole-2) x))
                              integer-pairs))	
                (setq boole-2-test-result 
                      (mapcar #'(lambda (x) (append '(logand 1) (list x))) 	
                              boole-2-test-conditions))
                (equal (mapcar #'eval boole-2-test-result) 
                       boole-2-result)))

  (do-test boole-c1-test
           (and (setq boole-c1-test-conditions 
                      (mapcar #'(lambda (x) (append '(boole boole-c1) x))
                              integer-pairs))	
                (setq boole-c1-test-result 
                      (mapcar #'(lambda (x) (append '(logand 1) (list x))) 	
                              boole-c1-test-conditions))
                (equal (mapcar #'eval boole-c1-test-result) 
                       boole-c1-result)))

  (do-test boole-c2-test
           (and (setq boole-c2-test-conditions 
                      (mapcar #'(lambda (x) (append '(boole boole-c2) x))
                              integer-pairs))	
                (setq boole-c2-test-result 
                      (mapcar #'(lambda (x) (append '(logand 1) (list x))) 	
                              boole-c2-test-conditions))
                (equal (mapcar #'eval boole-c2-test-result) 
                       boole-c2-result)))

  (do-test boole-and-test
           (and (setq boole-and-test-conditions 
                      (mapcar #'(lambda (x) (append '(boole boole-and) x))
                              integer-pairs))	
                (setq boole-and-test-result 
                      (mapcar #'(lambda (x) (append '(logand 1) (list x))) 	
                              boole-and-test-conditions))
                (equal (mapcar #'eval boole-and-test-result) 
                       boole-and-result)))

  (do-test boole-ior-test
           (and (setq boole-ior-test-conditions 
                      (mapcar #'(lambda (x) (append '(boole boole-ior) x))
                              integer-pairs))	
                (setq boole-ior-test-result 
                      (mapcar #'(lambda (x)  (append  '(logand 1) (list x))) 	
                              boole-ior-test-conditions))
                (equal (mapcar #'eval boole-ior-test-result) 
                       boole-ior-result)))

  (do-test boole-xor-test
           (and (setq boole-xor-test-conditions 
                      (mapcar #'(lambda (x) (append '(boole boole-xor) x))
                              integer-pairs))	
                (setq boole-xor-test-result 
                      (mapcar #'(lambda (x) (append '(logand 1) (list x))) 	
                              boole-xor-test-conditions))
                (equal (mapcar #'eval boole-xor-test-result) 
                       boole-xor-result)))

  (do-test boole-eqv-test
           (and (setq boole-eqv-test-conditions 
                      (mapcar #'(lambda (x) (append '(boole boole-eqv) x))
                              integer-pairs))	
                (setq boole-eqv-test-result 
                      (mapcar #'(lambda (x) (append '(logand 1) (list x))) 	
                              boole-eqv-test-conditions))
                (equal (mapcar #'eval boole-eqv-test-result) 
                       boole-eqv-result)))

  (do-test boole-nand-test
           (and (setq boole-nand-test-conditions 
                      (mapcar #'(lambda (x) (append '(boole boole-nand) x))
                              integer-pairs))	
                (setq boole-nand-test-result 
                      (mapcar #'(lambda (x) (append '(logand 1) (list x))) 	
                              boole-nand-test-conditions))
                (equal (mapcar #'eval boole-nand-test-result) 
                       boole-nand-result)))

  (do-test boole-nor-test
           (and (setq boole-nor-test-conditions 
                      (mapcar #'(lambda (x) (append '(boole boole-nor) x))
                              integer-pairs))	
                (setq boole-nor-test-result 
                      (mapcar #'(lambda (x) (append '(logand 1) (list x))) 	
                              boole-nor-test-conditions))
                (equal (mapcar #'eval boole-nor-test-result) 
                       boole-nor-result)))

  (do-test boole-andc1-test
           (and (setq boole-andc1-test-conditions 
                      (mapcar #'(lambda (x) (append '(boole boole-andc1) x))
                              integer-pairs))	
                (setq boole-andc1-test-result 
                      (mapcar #'(lambda (x) (append '(logand 1) (list x))) 	
                              boole-andc1-test-conditions))
                (equal (mapcar #'eval boole-andc1-test-result) 
                       boole-andc1-result)))

  (do-test boole-andc2-test
           (and (setq boole-andc2-test-conditions 
                      (mapcar #'(lambda (x) (append '(boole boole-andc2) x))
                              integer-pairs))	
                (setq boole-andc2-test-result 
                      (mapcar #'(lambda (x)  (append  '(logand 1) (list x))) 	
                              boole-andc2-test-conditions))
                (equal (mapcar #'eval boole-andc2-test-result) 
                       boole-andc2-result)))

  (do-test boole-orc1-test
           (and (setq boole-orc1-test-conditions 
                      (mapcar #'(lambda (x) (append '(boole boole-orc1) x))
                              integer-pairs))	
                (setq boole-orc1-test-result 
                      (mapcar #'(lambda (x) (append '(logand 1) (list x))) 	
                              boole-orc1-test-conditions))
                (equal (mapcar #'eval boole-orc1-test-result) 
                       boole-orc1-result)))

  (do-test boole-orc2-test
           (and (setq boole-orc2-test-conditions 
                      (mapcar #'(lambda (x) (append '(boole boole-orc2) x))
                              integer-pairs))	
                (setq boole-orc2-test-result 
                      (mapcar #'(lambda (x) (append '(logand 1) (list x))) 	
                              boole-orc2-test-conditions))
                (equal (mapcar #'eval boole-orc2-test-result) 
                       boole-orc2-result))))


STOP
