;; Function To Be Tested: char-not-greaterp
;;
;; Source:        CLtL p. 239
;;
;; Chapter 13: Characters		Section 2: Predicates on Characters
;;
;; Created By:    Peter Reidy
;;
;; Creation Date: 9 December 86
;;
;; Last Update:
;;
;; Filed As:      {eris}<lispcore>cml>test>13-2-char-not-greaterp.test
;;
;; Syntax: char-not-greaterp char &rest more-characters
;;            
;; Function Description: true if each character is <= the next (ignoring differences in font, bits or case), nil otherwise
;;
;; Argument(s): characters
;;
;; Returns: non-nil or nil			 
;;
(do-test-group char-not-greaterp-group
	;;; The inequality must be true for all items, and the function is nospread.  Hence no every loop.  
	(do-test "upper-case characters in order are all char-not-greaterp"
		(char-not-greaterp  #\A #\B #\C #\D #\E #\F #\G #\H #\I #\J #\K #\L #\M #\N #\O #\P #\Q #\R #\S #\T #\U #\V #\W #\X #\Y #\Z)
	)  ; do-test "upper-case characters in order are all char-not-greaterp"
;;
	(do-test "lower-case characters in order are all char-not-greaterp"
		(char-not-greaterp #\a #\b #\c #\d #\e #\f #\g #\h #\i #\j #\k #\l #\m #\n #\o #\p #\q #\r #\s #\t #\u #\v #\w #\x #\y #\z)
	)  ; do-test "lower-case characters in order are all char-not-greaterp"
;;
	(do-test "char-not-greaterp ignores case differences"
		(char-not-greaterp #\A #\b #\C #\d #\E #\f #\G #\h #\I #\j #\K #\l #\M #\n #\O #\p #\Q #\r #\S #\t #\U #\v #\W #\x #\Y #\z)
	)  ; do-test "char-not-greaterp ignores case differences"
;;
	(do-test "digits in order are all char-not-greaterp"
		(char-not-greaterp #\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9)
	)  ; do-test "digits in order are all char-not-greaterp"
;;
	(do-test "#\9 <= #\A or #\Z #\0"
		(or (char-not-greaterp #\9 #\A ) (char-not-greaterp #\Z #\0))
	)  ; do-test "#\9 <= #\A or #\Z #\0"
;;
	(do-test "#\9 <= #\a or #\z #\0"
		(or (char-not-greaterp #\9 #\a ) (char-not-greaterp #\z #\0))
	)  ; do-test "#\9 <= #\a or #\z #\0"
;;
	(do-test "char-not-greaterp accepts char-equal characters"
		(and
			(char-not-greaterp #\c #\C #\c #\c #\C #\C #\c #\C)
			(char-not-greaterp #\7 #\7 #\7 #\7 #\7 #\7 #\7 #\7 #\8)
			(char-not-greaterp #\0 #\0 #\0 #\2 #\2 #\2 #\4 #\4 #\4)
		)  ; and
	)  ; do-test "char-not-greaterp accepts char= characters"
;;
	(do-test "char-not-greaterp accepts non-alphanumeric characters"
		(every 'char-not-greaterp '(#\newline #\") '(#\newline #\"))
	)  ; do-test "char-not-greaterp accepts non-alphanumeric characters"
;;
	(do-test "char-not-greaterp: every character must <="
		(not (or
			(char-not-greaterp #\X #\X #\x #\W #\X #\X #\X #\X)
			(char-not-greaterp #\5 #\5 #\5 #\5 #\5 #\5 #\4)
		))
	)  ; do-test "char-not-greaterp: every character must <="
)
STOP


