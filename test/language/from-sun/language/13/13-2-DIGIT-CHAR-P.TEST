;; Function To Be Tested: digit-char-p
;;
;; Source:        CLtL p. 236
;;
;; Chapter 13: Characters		Section 2: Predicates on Characters
;;
;; Created By:    Peter Reidy after Greg Nuyens
;;
;; Creation Date: 30 April 86
;;
;; Last Update: 9 December 86 
;;
;; Filed As:      {eris}<lispcore>cml>test>13-2-digit-char-p.test
;;
;; Syntax: digit-char-p char &optional radix
;;            
;; Function Description: Returns non-nil iff char is a digit of the current radix, not for digits of another radix or for semi-standard or other graphic characters. char must be a character.
;;
;; Argument(s):	char - any cml character
;;			radix - an integer 
;;
;; Returns:  non-nil or NIL            
;;
(do-test-group
	(digit-char-p-group :before
		(test-setq
			digit-char-egs '(#\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9)
		 	upper-case-egs '(#\A #\B #\C #\D #\E #\F #\G #\H #\I #\J #\K #\L #\M #\N #\O #\P #\Q #\R #\S #\T #\U #\V #\W #\X #\Y #\Z)
		 	lower-case-egs '(#\a #\b #\c #\d #\e #\f #\g #\h #\i #\j #\k #\l #\m #\n #\o #\p #\q #\r #\s #\t #\u #\v #\w #\x #\y #\z)
		 	semi-standard-egs '(#\backspace #\tab #\linefeed #\page #\return #\rubout)
		 	other-graphic-egs '(#\! #\" #\# #\$ #\% #\& #\' #\( #\) #\* #\+ #\, #\- #\. #\/ #\< #\= #\> #\? #\@ #\[ #\\ #\] #\^ #\_ #\` #\{ #\| #\} #\~ #\ )
		)  ; test-setq
	)  ; digit-char-p-group
;; for the default case: radix 10

	(do-test digit-char-p-with-decimal-test
		(and
			(every #'digit-char-p digit-char-egs)
			(every #'digit-char-p digit-char-egs '(#3r101))
			(notany #'digit-char-p upper-case-egs)
			(notany #'digit-char-p lower-case-egs)
			(notany #'digit-char-p semi-standard-egs)
			(notany #'digit-char-p  other-graphic-egs)
		)  ; and
	)  ; do-test digit-char-p-with-decimal-test

;; for binary

	(do-test digit-char-p-with-binary-test
		(and
			(every #'digit-char-p '(#\0 #\1) (list 2))
			;; #\2 - #\9 will fail.
			(notany #'digit-char-p (cddr digit-char-egs) (list 2))
			(notany #'digit-char-p upper-case-egs (list 2))
			(notany #'digit-char-p lower-case-egs (list 2))
			(notany #'digit-char-p semi-standard-egs (list 2))
			(notany #'digit-char-p  other-graphic-egs (list 2))
		)  ; and
	)  ; do-test digit-char-p-with-binary-test

;; for octal

	(do-test digit-char-p-with-octal-test
		(and
			(every #'digit-char-p '(#\0 #\1 #\2 #\2 #\3 #\5 #\6 #\7) (list 8))
			(null (digit-char-p #\8 #7r11))
			(notany #'digit-char-p upper-case-egs (list 8))
			(notany #'digit-char-p lower-case-egs (list 8))
			(notany #'digit-char-p semi-standard-egs (list 8))
			(notany #'digit-char-p  other-graphic-egs (list 8))
		) ; and
	)  ; do-test digit-char-p-with-octal-test

;; for hexadecimal

	(do-test digit-char-p-with-hexadecimal-test
		(and
			(every #'digit-char-p '(#\0 #\1 #\2 #\2 #\3 #\5 #\6 #\7 #\8 #\9 #\A #\a #\B #\b #\C #\c #\D #\d #\E #\e #\F #\f) (list 16))
			(notany #'digit-char-p '(#\g #\G) (list 16))
			(notany #'digit-char-p semi-standard-egs (list 16))
			(notany #'digit-char-p  other-graphic-egs (list 16))
		)  ; and
	)  ; do-test digit-char-p-with-hexadecimal-test

;; for base 35

	(do-test digit-char-p-with-base-35-test
		(and
			(every #'digit-char-p '(#\0 #\1 #\2 #\2 #\3 #\5 #\6 #\7 #\8 #\9 #\a #\b #\c #\d #\e #\f #\g #\h #\i #\j #\k #\l #\m #\n #\o #\p #\q #\r #\s #\t #\u #\v #\w #\x #\y #\z #\A #\B #\C #\D #\E #\F #\G #\H #\I #\J #\K #\L #\M #\N #\O #\P #\Q #\R #\S #\T #\U #\V #\W #\X #\Y #\Z) (list 35))
			(notany #'digit-char-p semi-standard-egs (list 35))
			(notany #'digit-char-p  other-graphic-egs (list 35))
		)  ; and
	)  ; do-test digit-char-p-with-base-35-test
)  ; do-test-group
STOP


