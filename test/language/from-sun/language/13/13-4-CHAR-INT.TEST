;; Function To Be Tested: CHAR-INT
;;
;; Source:        Steele's book    Section 13.4: Character Conversions        Page: 242
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: April 29 '86
;;
;; Last Update:   May 16, 1986/ MASINTER, add RETURN after STOP
;;
;; Filed As:      {eris}<lispcore>cml>test>13-4-char-int.test
;;
;;
;; Syntax:                CHAR-INT  char
;;
;; Function Description:  CHAR-INT returns a non-negative integer encoding the character object.
;;
;; Argument(s):           char - a character object
;;
;; Returns:               a non-negative integer, which is the encoding code of the input char
;;
;;                        an error signal -  if the input argument is not a character    
;;

(do-test-group (test-char-int-group
    :before (progn 
                 (setf lower-case-chars '(#\a #\b #\c #\d #\e #\f #\g #\h #\i 
                                          #\j #\k #\l #\m #\n #\o #\p #\q
                                          #\r #\s #\t #\u #\v #\w #\x #\y #\z))
                 (setf upper-case-chars '(#\A #\B #\C #\D #\E #\F #\G #\H #\I 
                                          #\J #\K #\L #\M #\N #\O #\P #\Q
                                          #\R #\S #\T #\U #\V #\W #\X #\Y #\Z))
                 (setf numbers '( #\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9))
                 (setf chars-have-names '(#\Backspace #\Tab #\Rubout #\Linefeed 
                                          #\Space #\Return #\Page #\Newline))
                 (setf others  '(#\! #\" #\# #\$ #\% #\& #\' #\( #\) #\* #\+
                                 #\, #\- #\. #\/ #\: #\; #\< #\= #\> #\? #\@ 
                                 #\[ #\\ #\] #\{ #\} #\'))))

(do-test test-char-int1
   (every #'(lambda (x) (and (integerp (char-int x)) (plusp (char-int x)))) lower-case-chars))

(do-test test-char-int2
   (every #'(lambda (x) (and (integerp (char-int x)) (plusp (char-int x)))) upper-case-chars))

(do-test test-char-int3
   (every #'(lambda (x) (and (integerp (char-int x)) (plusp (char-int x)))) numbers))

(do-test test-char-int4
   (every #'(lambda (x) (and (integerp (char-int x)) (plusp (char-int x)))) others))

(do-test test-char-int5
   (every #'(lambda (x) (and (integerp (char-int x)) (plusp (char-int x)))) chars-have-names))

(do-test test-char-int6
         (= (- 26 1) (- (char-int #\Z) (char-int #\A)) (- (char-int #\z) (char-int #\a)))))

STOP
