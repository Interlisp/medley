;; Function To Be Tested: ELT
;;
;; Source:        CLtL    Section 14.1: Simple Sequence Functions        Page: 248
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: Aug. 28 ,1986
;;
;; Last Update:   Nov.  5 ,1986
;;
;; Filed As:      {eris}<lispcore>cml>test>14-1-elt.test
;;
;;
;; Syntax:                elt SEQUENCE INDEX
;;
;; Function Description:  elt returns the element of the SEQUENCE specified by INDEX.
;;
;; Argument(s):           SEQUENCE - 
;;					INDEX    - a non-negative integer less than the length of the SEQUENCE.
;;							 The first element of a sequence has index 0.
;;
;; Returns:               the element of the SEQUENCE specified by INDEX    
;;

(do-test "test elt 0"
  (let ((a '#(a b c d e f g h)))
    (every #'(lambda (x y) (eq (elt a y) x)) '(a b c d e f g h) '(0 1 2 3 4 5 6 7))
  )
)

(do-test "test elt 1"
  (let ((a (vector #'+ #'- #'* #'oddp)))
    (and (every (elt a 3) '(1 3 5 7 9))
         (= (funcall (elt a 0) 1  2 3 4 5) 15)
         (= (apply (elt a 2) '(1 2 3 4 5)) 120)
    )
  )
)

(do-test "test elt 2"
  (let ((a (reverse '(a b c d e f g h i j k l m n o p q r s t u v w x y z))))
    (and (eq (elt a 0 ) 'z)
         (eq (elt a 25) 'a)
         (eq (elt a 23) 'c)
         (eq (elt a 5)  'u)
    )
  )
)

(do-test "test elt 3 - setf may be used with elt to replace a sequence element with a new value"
  (let ((a (make-array 50 :initial-contents '( 1 2 3 4 5 6 7 8 9 10
                                              11 12 13 14 15 16 17 18 19 20
                                              21 22 23 24 25 26 27 28 29 30
                                              31 32 33 34 35 36 37 38 39 40
                                              41 42 43 44 45 46 47 48 49 50)
                          :fill-pointer t)))
    (do ((n 0 (+ 5 n))
         (m (length a)))
        ((>= n m))
        (setf (elt a n) (* 2 (elt a n))))
    (equalp a '#(2 2 3 4 5 12 7 8 9 10 22 12 13 14 15 32 17 18 19 20 42 22 23 24 25 52 27 28 29 30 62 32 33 34 35 72 37 38 39 40 82 42 43 44 45 92 47 48 49 50))
  )
)
STOP