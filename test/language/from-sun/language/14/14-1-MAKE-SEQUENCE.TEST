;; Function To Be Tested: MAKE-SEQUENCE
;;
;; Source:        CLtL    Section 14.1: Simple Sequence Functions        Page: 249
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: Aug. 28 ,1986
;;
;; Last Update:   Nov.  5 ,1986
;;
;; Filed As:      {eris}<lispcore>cml>test>14-1-make-sequence.test
;;
;;
;; Syntax:                make-sequence  TYPE SIZE &KEY :INITIAL-ELEMENT
;;
;; Function Description:  make-sequence returns a sequence of type TYPE and of length SIZE, 
;;                        each of whose elements has been initialized to the :INITIAL-ELEMENT argument.
;;                        If specified, the :INITIAL-ELEMENT argument must be an object that can be an element of
;;                        a sequence of type TYPE.
;;
;; Argument(s):           TYPE - a lisp type specfier
;;                        SIZE - an integer
;;                        INITIAL-ELEMENT - an object of type TYPE
;;
;; Returns:               a sequence    
;;

(do-test "test make-sequence 0"
	(and	(equal (make-sequence 'list 10 :initial-element 9) '(9 9 9 9 9 9 9 9 9 9))
		(equal (make-sequence 'string 5 :initial-element #\a) "aaaaa")
		(let ((a (make-sequence '(vector t) 4 :initial-element '(1 . 2))))
		  (and (typep a 'sequence)
		       (= (length a) 4)
		       (every #'(lambda (n) (equal (elt a n) '(1 . 2))) '(0 1 2 3))
		  )
		)
		(equal (make-sequence 'list 5 :initial-element #\w) '(#\w #\w #\w #\w #\w))
	)
)
			
(do-test "test make-sequence 1"
  (flet ((test-result (result expected-length expected-elt)
           (and (typep result 'sequence)
                (= (length result) expected-length)
                (every #'(lambda (x) (equal x expected-elt)) result)
           )))
    (and (test-result (make-sequence 'string  100 :initial-element #\p)
           100 #\p)
         (test-result (make-sequence 'list     80 :initial-element '(1 2 3))
           80 '(1 2 3))
         (test-result (make-sequence '(vector bit) 20 :initial-element 1)
           20 1)
         (test-result (make-sequence '(simple-array integer 1) 40 :initial-element #4r10)
           40 4)
         (test-result (make-sequence 'list     50  :initial-element  "hi")
           50 "hi")
         (test-result (make-sequence 'simple-string 300 :initial-element #\%)
           300 #\%)
    )
  )
)
STOP