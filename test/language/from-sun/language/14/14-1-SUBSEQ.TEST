;; Function To Be Tested: subseq
;;
;; Source:        CLtL    Section 14.1: Simple Sequence Functions        Page: 248
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: Aug. 29 ,1986
;;
;; Last Update:   Nov.  5 ,1986
;;
;; Filed As:      {eris}<lispcore>cml>test>14-1-subseq.test
;;
;;
;; Syntax:                subseq SEQUENCE START &OPTIONAL END
;;
;; Function Description:  returns the subsequence of SEQUENCE specified by START and END
;;
;; Argument(s):           SEQUENCE -
;;					START    - an integer index into  the SEQUENCE
;;					END      - an integer index into  the SEQUENCE
;;
;; Returns:               a sequence    
;;

(do-test "test subseq 0"
	(and (equal (subseq "abcdefg" 0) "abcdefg")
		(equal (subseq "1234567890" 5 10) "67890")
		(equal (subseq '(foo foo1 foo2 foo3 foo4 foo5) 2 4) '(foo2 foo3))
		(equal (subseq '( ( 1 . 2) (3 . 4) (5 . 6) (11 . 22) (33 . 122)) 4) '((33 . 122)))
		(equalp (subseq '#(large medium small) 1) '#(medium small))
	)
)

(do-test "test subseq 1"
	(flet 	((test-one (seq1 subseq1 start1 &optional (end1 (length seq1)) )
					 (and  ; check the type of subsequence
						  ; this is the best you can do!!
						 (etypecase seq1
						   (list (listp subseq1))
						   (vector (typep subseq1 'vector)))
						 ;
						 ;  check the length of subsequence
						 ;
						 (= (length subseq1) (- end1 start1))
						 (= (search subseq1 seq1) start1)       )))

			(let (( a "abcdefghijklmnopqr" )
				 ;  
				 ; b is a list of 100 elements
				 ;
				 (b  (do  ((a 0 (1+ a)) (b nil (cons a b)))
					    ( (= a 100) b) )  )
				 ;
				 ; c & d are vector
				 ;
				 (c  (make-array 80 :element-type 'character :initial-element #\k) )
				 (d  '#(tremulous quiver happy mould gulp delight heart flash upon me)  ))
				
			(and  (test-one  a (subseq a 5 15) 5 15)
				 (test-one  a (subseq a 0) 0)
				 (test-one  b (subseq  b 20) 20)
				 (test-one  b (subseq b 1 89) 1 89)
				 (test-one  c (subseq c 0) 0)
				 (test-one  c (subseq c 0 77) 0 77)
				 (test-one  d (subseq d 1) 1)
				 (test-one  d (subseq d 3 8) 3 8)
			)
	))
)

(do-test "test subseq - the returned subsequence never shares storage with its parent"
	(let* ((a (make-sequence 'list 10 :initial-element 'z))
		  (b (subseq a 5) ))
			(setf (cadr b) '(7 8 9))
			(and (equal a '(z z z z z z z z z z))
				(equal b '(z (7 8 9) z z z))       )))
STOP
