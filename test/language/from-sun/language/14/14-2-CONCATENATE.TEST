;; Function To Be Tested: concatenate
;;
;; Source:        CLtL    Section 14.2: Concatenating, Mapping, and Reducing Sequences        Page: 249
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: Sept. 8 ,1986
;;
;; Last Update:   Jan 28, 1987 Jim Blum - removed ARRAY test since ARRAY is not a legal sequence
;;
;; Filed As:      {eris}<lispcore>cml>test>14-2-concatenate.test
;;
;;
;; Syntax:                concatenate  RESULT-TYPE &REST SEQUENCES
;;
;; Function Description:  concatenate returns a new sequence that contains all the elements of all the sequences in
;;					 order.  The result does not share any structure with any of the argument sequences.
;;
;; Argument(s):           RESULT-TYPE - a subtype of SEQUENCE
;;					SEQUENCE     -
;;
;; Returns:               a sequence    
;;

(do-test "test concatenate 0"
	(and (equal (concatenate 'string "foo0 " "foo1 " "foo2 " "foo3 " "foo4 " "foo5 " "foo6")
			  "foo0 foo1 foo2 foo3 foo4 foo5 foo6")
		
		(equal (concatenate 'list '(gjd dshjgf lkds e4rohuew jdfhkk kjhdsf df l fgd jk dsf jlk dfs ewr fkldj)
							'(7983 873 478 32 90 435 7 43 98 32 894 67 45 243 564 76 54 342 12 43)
							'(fdg89  fgd- sadf98 gfh32 kjlu5 hfgkjjh1 kjhfgdhj435 kj54 kjfg9 bncmv8))
			'(gjd dshjgf lkds e4rohuew jdfhkk kjhdsf df l fgd jk dsf jlk dfs ewr fkldj 7983 873 478 32 90 435 7 
			  43 98 32 894 67 45 243 564 76 54 342 12 43 fdg89  fgd- sadf98 gfh32 
			  kjlu5 hfgkjjh1 kjhfgdhj435 kj54 kjfg9 bncmv8))))

(do-test "test concatenate 1"
	(flet 	((test-one (type &rest sequences &aux (expected-length 0) (contents ()))
			   (dolist (seq sequences
			             (let ((expected-result
			                     (if (eq type 'list)
			                       (reverse contents)
			                       (make-sequence type expected-length))))
			               (unless (eq type 'list)
			                 (setq contents (reverse contents))
			                 (dotimes (i expected-length)
			                   (setf (elt expected-result i) (pop contents))
			                 )
			               )
			               (equalp (apply #'concatenate type sequences) expected-result)
			             )
			           )
			     (incf expected-length (length seq))
			     (dotimes (i (length seq)) (push (elt seq i) contents))
			   )
			))
			(and	(test-one 'string "12345" "6789012")

				(test-one 'list  "8547935743897598437598" "hjfgkjfdhkgjfhdkgjhdfkjghdkfhg" "rkjkthrek49837598473eukrhke")

				(test-one 'vector	 (make-string 200 :initial-element #\u)
							(make-list 200 :initial-element '(1 2 (3)))
							(make-array 200 :initial-element "concatenate"))

				(test-one 'list  (make-array 50 :initial-element 1)
						  (make-array 50 :initial-element 0 :fill-pointer 3)
						  '#(3 4 5 6 7 6 5 4 3 2 1 9 0 9 4 5 6 4 3 6 8 6 4 2 1 2 3 547 90 8)
						  '(sunshine on my shoulder makes me happy sun shine in my eyes makes me cry)
						  "sunshine in the water looks so lovely sunshine almost always make me high")

				(test-one 'list  () "" () "")
		    )

	)
)	

(do-test "test concatenate - the result does not share any structure with any of the argument sequences"
  (and (let* ((a '(1 2 (3 4) 5 6))
              (b (concatenate 'list a)))
         (setf (third a) 8)
         (equal (list a b) '((1 2 8 5 6) (1 2 (3 4) 5 6))))

       (let* ((a "trees lists cons numbers floats")
              (b "t nil identity lisp cml function macro sequence")
              (c "gcd max min replace find setseq elt member if let prog")
              (d (concatenate 'string a b c )))
             (setq d (delete #\r d))
             (equal (list a b c)
               '("trees lists cons numbers floats" 
                 "t nil identity lisp cml function macro sequence" 
                 "gcd max min replace find setseq elt member if let prog")))

       (let* ((a (vector 5 10 15 20 25 30))
              (b (vector 3 6 9 12 15 28 21))
              (c (concatenate 'vector a b)))
             (setq c (delete 10 (delete 9 c)))
             (equalp (concatenate 'vector a b) '#(5 10 15 20 25 30 3 6 9 12 15 28 21)))
  )
)
STOP

			
	
