;; Function To Be Tested: reduce
;;
;; Source:        CLtL    Section 14.2: Concatenating, Mapping, and Reducing Sequences        Page: 251
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: Sept. 5 ,1986
;;
;; Last Update:   Sept. 5 ,1986
;;
;; Filed As:      {eris}<lispcore>cml>test>14-2-reduce.test
;;
;;
;; Syntax:                reduce FUNCTION SEQUENCE &KEY :FROM-END :START :END :INITIAL-VALUE
;;
;; Function Description:  The reduce function combines all the elements of a sequence using a binary function.
;;
;; Argument(s):           FUNCTION      - a lisp function which takes two argument
;;					SEQUENCE      -
;;				     :FROM-END      -   t: the reduction is left-associative
;;							        nil: the reduction is right-associative
;;					:START         - an integer, used to specify a subsequence
;;					:END           - an integer, used to specify a subsequence
;;					:INITIAL-VALUE - an object whilch is logically placed before or after the subsequence (depends on
;;				        	            the value of :FROM-END)and included in the reduction operation
;;
;; Returns:               anything    
;;
(do-test "test reduce -test cases copied from page 251 of CLtL"

	(and (= (reduce #'+ '(1 2 3 4)) 10)
		(= (reduce #'- '(1 2 3 4)) -8)
		(= (reduce #'- '(1 2 3 4) :from-end t) -2)
		(= (reduce #'+ '()) 0)
		(= (reduce #'= '(3)) 3)
		(eq (reduce #'+ '(foo)) 'foo)
		(equal (reduce #'list '(1 2 3 4)) '(((1 2) 3) 4))
		(equal (reduce #'list '(1 2 3 4) :from-end t) '(1 (2 (3 4))))
		(equal (reduce #'list '(1 2 3 4) :initial-value 'foo) '((((foo 1) 2) 3) 4))
		(equal (reduce #'list '(1 2 3 4) :from-end t :initial-value 'foo) '(1 (2 (3 (4 foo)))))
	)
)

(do-test "test reduce - when the specified sequence contains one element and no :initial-value is given"
	;;
	;; then that element is returned and the function is not called
	;;
	(and (equal (reduce #'* "a") #\a)
		(=     (reduce #'- (vector 4)) 4)
		(eq    (reduce #'+ '(foo1 foo2 foo3) :start 1 :end 2) 'foo2)
		(eq    (reduce #'list '(foo1 foo2 foo3) :start 2) 'foo3)
	)
)

(do-test "test reduce - when the specified sequence is empty and an :initial-value is given"
	;;
	;; then the :initial-value is retuned and the function is not called
	;;
	(and	(=     (reduce #'list () :initial-value 3) 3)
		(equal (reduce #'evenp () :initial-value "little") "little")
		(equal (reduce #'listp () :initial-value '(1 2 (3 4))) '(1 2 (3 4)))
		(=     (reduce #'stringp () :initial-value #c(-3 -4)) #c(-3 -4))
	)
)  

(do-test "test reduce - when the specified subsequence is empty and no :initial-value is given"
	;;
	;; then the function is called with zero arguments, and reduce returns whatever the function does.
	;;
	(and (=  (reduce #'gcd ()) 0)
		(=  (reduce #'*   ()) 1)
		(eq (reduce #'+ ()) 0)
	)
)

(do-test "test reduce 0"
	(prog2	(setq a '(sleepy jumpy grouchy doc bashful dopey sneezy))

			(and	(equal (reduce #'cons a) 
					  '(((((( sleepy . jumpy) . grouchy) . doc) . bashful) . dopey) . sneezy))

				(equal (reduce #'cons a :from-end t :initial-value 'snow-white)
					  '(sleepy jumpy grouchy doc bashful dopey sneezy . snow-white))

				(equal (reduce #'cons a :start 1 :end 5 :initial-value 'apple)
					  '((((apple . jumpy) . grouchy) . doc) . bashful) )
		
				(equal (reduce #'cons a :from-end t :start 2 :end 7 :initial-value 'witch)
					  '(grouchy doc bashful dopey sneezy . witch))
			)
	)
)

(do-test "test reduce 1"
	(prog2	(setq a (vector #c(1 2) #c(-1 -2) #c(-1 -1) #c(0 2) #c(-3 1) #c(2 -2)))

			(and	(= (reduce #'* a) #c(120 40))
				(= (reduce #'* a :start 1 :from-end t) #c(40 -40))
				(= (reduce #'+ a :end 3 :initial-value #c(9 -9)) #c(8 -10))
				(= (reduce #'- a :start 3 :end 6 :from-end t :initial-value #c(8 8)) #c(-3 -9))
				(= (reduce #'- a :start 3 :end 6 :initial-value #c(8 8)) #c(9 7))
			)
	)
)

(do-test "test reduce 2"
	(prog2	(setq a (do ((n 0 (1+ n)) (m nil (append m (list n))))
					  ((= n 100) m) ))
	
			(and (=      (reduce #'- a :start 49 :end 59) -437)

				(equal  (reduce #'list a :start 70 :end 81 :initial-value -70)
					   '(((((((((((-70 70) 71) 72 ) 73 ) 74) 75) 76) 77) 78) 79) 80) )

				(equal  (reduce #'cons a :end 21 :initial-value 900 :from-end t)
					   '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 . 900))

				(=      (reduce #'(lambda (x y) (+ (* x 100) y)) a :start 50 :end 52 :initial-value 2) 
					   25051)
			)
	)
)
STOP





