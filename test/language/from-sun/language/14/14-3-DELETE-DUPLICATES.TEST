;; Function To Be Tested: delete-duplicates
;;
;; Source:        CLtL    Section 14.3: Modifying Sequences        Page: 254
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: Sept. 22 ,1986
;;
;; Last Update:   Oct. 1 ,1986
;;
;; Filed As:      {eris}<lispcore>cml>test>14-3-delete-duplicates.test
;;
;;
;; Syntax:                delete-duplicates  SEQUENCE &KEY :FROM-END :TEST :TEST-NOT :START :END :KEY
;;
;; Function Description:  The elements of SEQUENCE are compared pairwise, and if any two match, then the one occurring 
;;				     earlier in the sequence is discarded (if :FROM-ENT is true, then the one later in the sequence
;;					is discarded). The result is a sequence of the same kind as the argument SEQUENCE with enough
;;					elements deleted so that no two of the remaining elements match.
;;
;; Argument(s):           SEQUENCE    -
;;					:FROM-END   - nil or non-nil
;;					:TEST       - a function of two arguments
;;					:TEST-NOT   - a function of two arguments
;;					:START :END - integer indices into the SEQUENCE, with :START <= :END
;;					:KEY        - a function of one argument that will extract from an element the part
;;							    to be tested in place of the whole element.
;;
;; Returns:               a sequence    
;;

(do-test "test case copied from page 255 of CLtL"
	(and	(equal (delete-duplicates '(a b c b d d e)) '(a c b d e))
		(equal (delete-duplicates '(a b c b d d e) :from-end t) '(a b c d e))
		(equal (delete-duplicates '((foo #\a) (bar #\%) (baz #\A)) :test #'char-equal :key #'cadr) 
			  '((bar #\%) (baz #\A)))
		(equal (delete-duplicates '((foo #\a) (bar #\%) (baz #\A)) :test #'char-equal :key #'cadr :from-end t)
			  '((foo #\a) (bar #\%)) )
	)
)

(do-test "test delete-duplicates 0"
	(let ( (a '(1 3 5 3 6 8 9 4 2 0 3 4 2 3 1)) b c d e)
	  (setf b (copy-seq a) c (copy-seq a) d (copy-seq a) e (copy-seq a) )
       (and (equal (delete-duplicates a) '( 5 6 8 9  0 4 2 3 1) )
		 (equal (delete-duplicates b  :start 3) '( 1 3 5 6 8 9  0 4 2 3 1) )
		 (equal (delete-duplicates c  :end 10) '(1 5 3 6 8 9 4 2 0 3 4 2 3 1))
		 (equal (delete-duplicates d  :start 2 :end 12) '(1 3 5 6 8 9 2 0 3 4 2 3 1))
		 (equal (delete-duplicates e  :start 2 :end 12 :from-end t) '(1 3  5  3 6 8 9 4 2 0 2 3 1))
	  )
	)
)

(do-test "test delete-duplicates 1"
	(let ( (a "sneezy SleePY grouchy dopey jumpy bashful") b c)
		(setf b (copy-seq a) c (copy-seq a))
		(and (equal (delete-duplicates a :test #'char-equal) "nzgrcdoejmpy bashful")
			(equal (delete-duplicates b :test #'equal) "nzSPYgrcdoejmpy bashful")
			(equal (delete-duplicates c :test #'equal :from-end t) "snezy SlPYgrouchdpjmbaf")
		)
	)
)

(do-test "test delete-duplicates 2"
	(let* ( (a '( (1 2 3) (4 5) (2) (3 4) (9 8 1 2) (3) (2 2 3 1 4) (4 5) (1 -1 3))  )  (b (copy-seq a)) )

		(and (equal (delete-duplicates a :test-not #'(lambda (x y) (/= (length x) (length y))))
			       '( (9 8 1 2) (3) (2 2 3 1 4) (4 5) (1 -1 3)) )

			(equal (delete-duplicates b :test-not #'(lambda (x y) (/= (length x) (length y))) :from-end t)
				  '((1 2 3) (4 5) (2) (9 8 1 2) (2 2 3 1 4))  )
		)
	)
)

(do-test "test delete-duplicates 3"
	(let ( (a  (vector #c(2 -1) #c(3.0 4) #c(5 1.0) #c(3 8) #c(6 1) #c(-3.0 7) #c(4 -4.0) #c(15 -1))  ) b c d e)

		(setf b (copy-seq a) c (copy-seq a) d (copy-seq a) e (copy-seq a) )
		(and (equalp (delete-duplicates a :test #'= :key #'realpart)
				   (vector #c(2 -1) #c(5 1.0) #c(3 8) #c(6 1) #c(-3.0 7) #c(4 -4.0) #c(15 -1)) )

			(equalp (delete-duplicates b :test #'= :key #'imagpart)
				   (vector  #c(3.0 4) #c(3 8) #c(6 1) #c(-3.0 7) #c(4 -4.0) #c(15 -1))  )

			(equalp (delete-duplicates c :test #'(lambda (x y) (= (abs x) (abs y))) :key #'imagpart)
				   (vector  #c(3 8) #c(-3.0 7) #c(4 -4.0) #c(15 -1))  )

			(equalp (delete-duplicates d :test #'(lambda (x y) (= (abs x) (abs y))) :key #'imagpart :from-end t)
				   (vector #c(2 -1) #c(3.0 4)  #c(3 8)  #c(-3.0 7) )  )

			(equalp (delete-duplicates e :test #'(lambda (x y) (= (abs x) (abs y))) :key #'imagpart :from-end t
								   :start 1 :end 7)
				   (vector #c(2 -1) #c(3.0 4) #c(5 1.0) #c(3 8) #c(-3.0 7) #c(15 -1))  )
		)
	)
)
STOP
