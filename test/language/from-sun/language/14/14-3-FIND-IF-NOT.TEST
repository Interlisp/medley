;; Function To Be Tested: find-if-not
;;
;; Source:        CLtL    Section 14.3: Modif-notying Sequences        Page: 257
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: Sept. 26 ,1986
;;
;; Last Update:   Sept. 26 ,1986
;;
;; Filed As:      {eris}<lispcore>cml>test>14-3-find-if-not.test
;;
;;
;; Syntax:                find-if-not  SEQUENCE &KEY :FROM-END :START :END :KEY
;;
;; Function Description:  If the subsequence delemited by :START and :END  contains an element satisfying the test, then the left most
;;				     (or rightmost) such element is returned.
;;
;; Argument(s):          			
;;					SEQUENCE    -
;;					:FROM-END   - nil or non-nil
;;					:START :END - integer indices into the SEQUENCE, with :START <= :END
;;					:KEY        - a function of one argument that will extract from an element the part
;;							    to be tested in place of the whole element.
;;
;; Returns:               a sequence    
;;
(do-test "test find-if-not 0"
	(and	(=		(find-if-not #'evenp '(2 5 3 7 8 9 0)) 5)
		(=		(find-if-not #'evenp '(2 5 3 7 8 9 0) :from-end t) 9)
		(eq		(find-if-not #'integerp '(3 4 5 6 7 2 1)) nil)
		(eq		(find-if-not #'numberp   '(3 4 5 6 7 2 1)) nil)
		(equal    (find-if-not #'atom  '( 3 4 (5) 9 8 (9) 7) :from-end t) '(9))
	)
)

(do-test "test find-if-not 1"
	(let ((a '(#c(2 -2) #c(8 9) #c(10 -2) #c(7 65) #c( 10 -2) #c(30 -2) #c(-2 -3) #c(10 -4) #c(-1 3) #c(3 9))  ))

		(and 	(equal (find-if-not #'(lambda (x) (<= (realpart x) 8)) a ) #c(10 -2))
			(equal (find-if-not #'(lambda (x) (<= (realpart x) 8)) a :from-end t) #c(10 -4) )
			(equal (find-if-not #'(lambda (x) (<= (* (realpart x) (imagpart x)) 30)) a )  #c(8 9))
			(equal (find-if-not #'(lambda (x) (<= (* (realpart x) (imagpart x)) 30)) a :from-end t) #c(7 65) )
			(eq (find-if-not #'complexp a) nil)
		)
	)
)

(do-test "test find-if-not 2"
	(let ((a "Whitetail deer under oak tree at twilight. Near Curran, Michigan." ))
		
		(and (char= (find-if-not #'lower-case-p a) #\W)
			(char= (find-if-not #'lower-case-p a :start 42) #\space)
			(char= (find-if-not #'lower-case-p a :start 49 :end  57) #\,)
			(char= (find-if-not #'(lambda (x) (alpha-char-p x)) a :start 35) #\.)
			(char= (find-if-not #'(lambda (x) (or (alpha-char-p x) (char= x #\space))) a  :end 60 :from-end t) #\,)
		)
	)
)

(do-test "test find-if-not 3"
	(let ((a '( (3 . 4) (5 . -5) (5 . 10) (6 . 12) (32 . 3) (-23 . 9) (21 . 3) (11 . 37))  ))
		
		(and (equal (find-if-not #'oddp a :key #'cdr :from-end t) '(6 . 12) )
			(equal (find-if-not #'evenp a  :key #'cdr )  '(5 . -5))
			(equal (find-if-not #'minusp a :key #'car) '(3 . 4))
			(equal (find-if-not #'plusp a :key #'car) '(-23 . 9))
		)
	)
)

(do-test "test fine-if-not 4"
	(let (( a (list 23 #c(4 -3) 7.9 "str3" '(2 . 3) (vector 3 4 5) "gcd" #*101010 "str2" '(8 9) 30.0 #c(0 0) 33  "str1" 0 )  ))
		
		(and (equal  (find-if-not #'listp a :start 1 :end 14 :from-end t) "str1")

			(equal  (find-if-not #'vectorp a :start 6 ) '(8 9))

			(equalp (find-if-not #'bit-vector-p a :start 5) (vector 3 4 5))

			(equal  (find-if-not #'null a :start 10  
						 :key #'(lambda (x) (if (and (stringp x) (> (length x) 3)) (elt x 3)) ))  "str1")

			(equal  (find-if-not #'(lambda (x) (equal x #\2)) a :end 10  :from-end t 
						 :key #'(lambda (x) (if (and (stringp x) (> (length x) 3)) (elt x 3) #\2) )) "str3")
		)
	)
)
STOP
