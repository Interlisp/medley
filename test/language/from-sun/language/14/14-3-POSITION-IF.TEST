;; Function To Be Tested: position-if
;;
;; Source:        CLtL    Section 14.3: Modifying Sequences        Page: 257
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: Sept. 27 ,1986
;;
;; Last Update:   Sept. 27 ,1986
;;
;; Filed As:      {eris}<lispcore>cml>test>14-3-position-if.test
;;
;;
;; Syntax:                position-if  SEQUENCE &KEY :FROM-END :START :END :KEY
;;
;; Function Description:  If the subsequence delemited by :START and :END  contains an element satisfying the test, then the 
;;					index within  the sequence of the leftmost (or rightmost) such element is returned, otherwise nil
;;					is returned.
;;
;; Argument(s):          			
;;					SEQUENCE    -
;;					:FROM-END   - nil or non-nil
;;					:START :END - integer indices into the SEQUENCE, with :START <= :END
;;					:KEY        - a function of one argument that will extract from an element the part
;;							    to be tested in place of the whole element.
;;
;; Returns:               a positive number or nil    
;;
(do-test "test position-if 0"
	(and	(=	(position-if #'oddp '(2 52 44 5 3 7 8 9 0)) 3)
		(=	(position-if #'oddp '(2 52 44 5 3 7 8 9 0) :from-end t) 7)
		(eq	(position-if #'complexp '(3 4 5 6 7 2 1)) nil)
		(eq	(position-if #'floatp   '(3 4 5 6 7 2 1)) nil)
		(=   (position-if #'consp  '( 3 (9) 4 (5) 9 8 (9) 7) :from-end t) 6)
		(=   (position-if #'(lambda (x) (= x 199)) 
							;;
							;;   create a list of integers from 0 to 249
							;;
							(do ((a 0 (1+ a)) (b nil (append b (list a))))
							    ((= a 250) b)))  199)  
	)
)

(do-test "test position-if 1"
	(let ((a '(#c(2 -2) #c(8 9) #c(10 -2) #c(7 65) #c( 10 -2) #c(30 -2) #c(-2 -3) #c(10 -4) #c(-1 3) #c(3 9))  ))
		;;
		;;       0        1       2         3         4           5        6         7         8       9
		;;

		(and 	(= (position-if #'(lambda (x) (> (realpart x) 8)) a ) 2)
			(= (position-if #'(lambda (x) (> (realpart x) 8)) a :from-end t) 7 )
			(= (position-if #'(lambda (x) (> (* (realpart x) (imagpart x)) 30)) a )  1)
			(= (position-if #'(lambda (x) (> (* (realpart x) (imagpart x)) 30)) a :from-end t) 3 )
			(eq (position-if #'integerp a) nil)
			(= (position-if #'(lambda (x) (> (realpart x) 8)) (append a a  a a) :from-end t) 37)
		)
	)
)

(do-test "test position-if 2"
	(let ((a "Whitetail deer under oak tree at twilight. Near Curran, Michigan." ))
		;;
		;;   01234567890123456789012345678901234567890123456789012345678901234
		;;		     1         2         3         4         5         6
		;;
		
		(and (= (position-if #'upper-case-p a) 0)
			(= (position-if #'upper-case-p a :start 42) 43)
			(= (position-if #'upper-case-p a :start 49 :end  57) 56)
			(= (position-if #'(lambda (x) (not (alpha-char-p x))) a :start 35) 41)
			(= (position-if #'(lambda (x) (not (or (alpha-char-p x) (char= x #\space)))) a  :end 60 :from-end t) 54)
			(= (position-if #'(lambda (x) (char= x #\W)) (concatenate 'string a a)  :start 1 ) 65)
		)
	)
)

(do-test "test position-if 3"
	(let ((a '( (3 . 4) (5 . -5) (5 . 10) (6 . 12) (32 . 3) (-23 . 9) (21 . 3) (11 . 37))  ))
		;;
		;;        0       1         2        3        4       5        6         7
		;;
		
		(and (= (position-if #'evenp a :key #'cdr :from-end t) 3 )
			(= (position-if #'oddp a  :key #'cdr )  1)
			(= (position-if #'plusp a :key #'car) 0)
			(= (position-if #'minusp a :key #'car) 5)
		)
	)
)

(do-test "test fine-if 4"
	(let (( a (list 23 #c(4 -3) 7.9 "str3" '(2 . 3) (vector 3 4 5) "gcd" #*101010 "str2" '(8 9) 30.0 #c(0 0) 33  "str1" 0 )  ))
		;;	
		;;         0      1     2    3        4           5         6     7         8      9     10    11    12    13  14
		;;
		
		(and (=  (position-if #'integerp a :start 1 :end 14 :from-end t) 12)

			(=  (position-if #'vectorp a :start 6 ) 6)

			(=  (position-if #'bit-vector-p a :start 6) 7)

			(eq (position-if #'(lambda (x) (equal x #\2)) a :start 10  
						 :key #'(lambda (x) (and (stringp x) (> (length x) 3) (elt x 3))))  nil)

			(=  (position-if #'(lambda (x) (equal x #\2)) a :end 10  :from-end t 
						 :key #'(lambda (x) (and (stringp x) (> (length x) 3) (elt x 3)))) 8)
		)
	)
)
STOP



