;; Function To Be Tested: remove
;;
;; Source:        CLtL    Section 14.3: Modifying Sequences        Page: 253
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: Sept. 12 ,1986
;;
;; Last Update:   Nov. 5 ,1986
;;
;; Filed As:      {eris}<lispcore>cml>test>14-3-remove.test
;;
;;
;; Syntax:                remove ITEM SEQUENCE &KEY :FROM-END :TEST :TEST-NOT :START :END :COUNT :KEY
;;
;; Function Description:  remove returns a sequence of the same kind as the argument SEQUENCE that has the same elements 
;;					except that those in the subsequence delimited by :START and :END and satisfying the test have
;;					been removed.
;;
;; Argument(s):           ITEM        - 
;;					SEQUENCE    -
;;					:FROM-END   - nil or non-nil
;;					:TEST       - a function of two arguments
;;					:TEST-NOT   - a function of two arguments
;;					:START :END - integer indices into the SEQUENCE, with :START <= :END
;;					:COUNT      - an integer which limits the number of elements removed from SEQUENCE
;;					:KEY        - a function of one argument that will extract from an element the part
;;							    to be tested in place of the whole element.
;;
;; Returns:               a sequence    
;;
(do-test "test remove - test cases from page 253 of CLtL"
	(and 	(equal (remove 4 '(1 2 4 1 3 4 5)) '(1 2 1 3 5))
		(equal (remove 4 '(1 2 4 1 3 4 5) :count 1) '(1 2 1 3 4 5))
		(equal (remove 4 '(1 2 4 1 3 4 5) :count 1 :from-end t) '(1 2 4 1 3 5))
		(equal (remove 3 '(1 2 4 1 3 4 5) :test #'>) '(4 3 4 5))
	)
)

(do-test "test remove 1"
	(let ((a '(1 2 3 4 5 6 7 8 9 10 5 4 3 2 1 5 4 3 2 1)))
		(and	(equal (remove 3 a) 					'(1 2 4 5 6 7 8 9 10 5 4 2 1 5 4 2 1))
			(equal (remove 3 a :from-end 'non-nil) 	'(1 2 4 5 6 7 8 9 10 5 4 2 1 5 4 2 1))
			(equal (remove 3 a :count 2)			'(1 2 4 5 6 7 8 9 10 5 4 2 1 5 4 3 2 1))
			(equal (remove 3 a :from-end t :count 2) '(1 2 3 4 5 6 7 8 9 10 5 4 2 1 5 4 2 1))
			(equal (remove 3 a :count 0)			'(1 2 3 4 5 6 7 8 9 10 5 4 3 2 1 5 4 3 2 1))
			(equal (remove 3 a :from-end t :count 0) '(1 2 3 4 5 6 7 8 9 10 5 4 3 2 1 5 4 3 2 1))
			(equal a  '(1 2 3 4 5 6 7 8 9 10 5 4 3 2 1 5 4 3 2 1))
		)
	)
)

(do-test "test remove 2"
	(let ((b "abcdefgabcdefgabcdefgabcdefgabcdefg"))
		(and	(equal (remove #\b b :test #'char>) "bcdefgbcdefgbcdefgbcdefgbcdefg")
			(equal (remove #\c b :test #'(lambda (x y) (= (char-code x) (- (char-code y) 2))) :count 4)
				  "abcdfgabcdfgabcdfgabcdfgabcdefg")
			(equal (remove #\f b :test-not #'char/=)  "abcdegabcdegabcdegabcdegabcdeg")
			(equal (remove #\a b :test-not #'(lambda (x y) (equal x y) )) 
				  "aaaaa")
			(equal b "abcdefgabcdefgabcdefgabcdefgabcdefg")
		)
	)
)

(do-test "test remove 3"
	(let ((c '( (1 2 3) (2 3 4) (4 5 6) (4 6 7) (1 2 3) (6 7 8) (7 8 9) (2 3 4) (1 2 3)  (8 9 0) (4 5 6) )  ))
		(and (equal (remove '(1 2 3) c :start 1 :test #'equal) 
				  '((1 2 3) (2 3 4) (4 5 6) (4 6 7) (6 7 8) (7 8 9) (2 3 4)  (8 9 0) (4 5 6) ))
			(equal (remove '(2 3 4) c :end  6 :test #'equal)
				  '((1 2 3) (4 5 6) (4 6 7) (1 2 3) (6 7 8) (7 8 9) (2 3 4) (1 2 3)  (8 9 0) (4 5 6) )  )
			(equal (remove '(1 2 3 ) c :start 2 :end 7 :test #'equal)
				  '((1 2 3) (2 3 4) (4 5 6) (4 6 7) (6 7 8) (7 8 9) (2 3 4) (1 2 3)  (8 9 0) (4 5 6) ))
			(equal (remove 2 c :key #'second )
				  '( (2 3 4) (4 5 6) (4 6 7)  (6 7 8) (7 8 9) (2 3 4)  (8 9 0) (4 5 6) )  )
			(equal (remove 6 c :test #'< :key #'third)
				  '((1 2 3) (2 3 4) (4 5 6) (1 2 3) (2 3 4) (1 2 3)  (8 9 0) (4 5 6) ) )
			(equal c '( (1 2 3) (2 3 4) (4 5 6) (4 6 7) (1 2 3) (6 7 8) (7 8 9) (2 3 4) (1 2 3)  (8 9 0) (4 5 6) )  )
		)
	)
)

(do-test "test remove 4"
	(let ((a '((9 2 3) (8 2 4) (1 2 4) (-4 3 2) (5 3 5) (-5 2 1) (3 4) (2 9) (10 2) (-2 4))  ))
		(equal (remove 5 a :from-end t :start 2 :end 8 :test #'> :count 4 :key #'car)
			  '((9 2 3) (8 2 4) (1 2 4)  (5 3 5)  (10 2) (-2 4))  )
	)
)

(do-test "test remove 5"
	(let* ((a (vector '(1 #\2 3) '(#\a #\b) '(#\9 8 5) '(#\1 #\2 #\3) '(1 2 3) '(3 #\2 1) '(4 #\3 #\8) '(#\q #\w #\e))  ) 
		 (b (remove 56 a :start 1 :end 7 :test-not #'(lambda (x y) (equal (type-of x) (type-of y))) 
										:key #'second)  ))
		(equalp b '#( (1 #\2 3) (#\9 8 5) (1 2 3) (#\q #\w #\e)))
	)
)

(do-test "test remove 6"
	(let ( (a (make-array 200 :element-type 'float))  b)
		(fill  (fill (fill (fill a  20.0 :end 50) 30.0 :start 50 :end 100) 40.0 :start 100 :end 150) 50.0 :start 150 )
		(setq b (remove 35 a :start 75 :end 150 :test #'(lambda (x y) (or (= (+ x 5) y) (= (- x 5) y)))  ))
		(equalp b (make-array (+ 50 25 50) :initial-contents (append (make-list 50 :initial-element 20.0)
								  (make-list 25 :initial-element 30.0)
								  (make-list 50 :initial-element 50.0))))
	)
)
STOP
			  