;; Function To Be Tested: count
;;
;; Source:        CLtL    Section 14.4:Searching Sequences for items       Page: 257
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: Sept. 29 ,1986
;;
;; Last Update:   Sept. 29 ,1986
;;
;; Filed As:      {eris}<lispcore>cml>test>14-4-count.test
;;
;;
;; Syntax:                count  ITEM SEQUENCE &KEY :FROM-END :TEST :TEST-NOT :START :END :KEY
;;
;; Function Description:  Count returns a non-negative integer which is the number of ITEMs in the subsequence delemited by 
;;					:START and :END  satisfying the tes.
;;
;; Argument(s):           ITEM     -			
;;					SEQUENCE    -
;;					:TEST       - a function which takes two arguments
;;					:TEST-NOT   - a function which takes two arguments
;;					:FROM-END   - nil or non-nil
;;					:START :END - integer indices into the SEQUENCE, with :START <= :END
;;					:KEY        - a function of one argument that will extract from an element the part
;;							    to be tested in place of the whole element.
;;
;; Returns:               a positive number or nil    
;;

(do-test "test count 0"
	(and (= 		(count 2 '(3 4 5 2.0 6 2 1 9 2 8 4 2 4 2)) 4)
		(= 		(count 2 '(3 4 5 2.0 6 2 1 9 2 8 4 2 4 2) :from-end t) 4)
		(=		(count 3 '(1 2 4 5 6 7 8 (3) 9)) 0)
		(=		(count  '(1 2) '( 1 2 ((1 2)) 3 4 (1 2)) :test #'equal ) 1)
		(=	     (count #\q "antique-que-que" :test #'equal) 3)
		(=	     (count #\q "antique-que-que" :test #'equal :from-end t ) 3)
		(=		(count #*1011 (vector #*0000 #*1111 #*1011) :test #'equalp) 1)
		(=		(count #\a (make-string 50 :initial-element #\a)) 50)
		(=		(count '(1 2) (make-list 100 :initial-element '(1 2)) :test #'equal) 100)
	)
)

(do-test "test count 1"
	(let ((a '(3 4 7 8 -2 9 7 8 -3 4 6 1 7 4 5 -3 2 0 4 -2 7 2 -3) ))
		;;
		;;	 0 1 2 3 4  5 6 7 8  9 0 1 2 3 4 5  6 7 8 9 20 21 22
		;;
		(and (=  (count 7 a :start 3) 3)
			(=  (count 7 a :start 2 ) 4)
			(=  (count -3 a :end 17 ) 2)
			(=  (count -3 a :start 9 :end 16) 1)
			(=  (count -2 a :start 5 :end 14) 0)
			(=  (count -2 a :start 4 :end 14) 1)
			(=  (count 2  a :start 4 :end 19) 1)
			(=  (count 2  a ) 2)
			(= (count 34 a ) 0)
		)
	)
)


(do-test "test count 2"
	(let (( a "Fatal error in function SYSTEM: TASK-SCHEDULER"))
		;;
		;;    0123456789012345678901234567890123456789012345
		;;
		(and	(= (count #\n a :test #'char=) 3)
			(= (count #\: a :test #'char=) 1)
			(= (count #\s a :test #'char-equal) 4)
			(= (count #\space a :test-not #'char= ) 41)
			(= (count #\F a :test #'(lambda (x y) (and (alpha-char-p y) (char> x y)))) 6)
			(= (count #\R a :test-not #'(lambda (x y) (/= (- (char-code y) (char-code x)) 
												   (- (char-code #\a) (char-code #\A)) ))) 3)
		)
	)
)

(do-test "test count 3"
	(let ((a '( (1 3 7) (2 4 6)(38 5 7) (4 2 1) (-3 -5 -7) (-2 -4 -1) (2 22 31) (38 -72 7))  ))
		;;
		;;        0       1      2        3        4         5          6          7
		;;
		(and (= (count 7  a :key #'third) 3)
			(= (count -4 a :key #'second) 1)
			(= (count 38 a :key #'first)  2)
			(= (count 38 a :key #'first :from-end t) 2)
			(= (count 0 a :key #'cadr :test #'(lambda (x y) (> x y))) 3)
			(= (count 0 a :key #'cadr :test #'(lambda (x y) (> x y)) :from-end t) 3)
			(= (count 0 a :key #'caddr) 0) 
		)
	)
)

(do-test "test count 4"
	(let ((a '(#*11111 #*0000 #*10101010 #*01010101 #*111 #*00000 #*1110 #*0101111 #*000 #*11100 #*01000) ))
		;;
		;;       0       1       2         3         4      5        6      7       8      9       10
		;;
		(and	(= (count #*10 a :start 4 :end 10 :test #'equalp :key #'(lambda (x) (subseq x 1 3)))  1)

			(= (count #*11 a :start 1 :end 9 :test #'equalp :from-end t :key #'(lambda (x) (subseq x 0 2)) ) 2)

			(= (count #*01 a :start 4 :end 10 :test-not #'(lambda (x y) (or (/= (elt x 0) (elt y 0))
															    (/= (elt x 1)  (elt y 1))  ))
							 :from-end t)  1)

			(= (count 'dummy a :test-not #'(lambda (x y) (find 0 y)) ) 2)
		
			(= (count 'dummy a :test-not #'(lambda (x y) (find 0 y)) :start 1 :from-end t) 1)
		
			(= (count 'dummy a :test-not #'(lambda (x y) (find 1 y))  :end 5 :from-end t) 1)
			
			(= (count 'dummy a :test-not #'(lambda (x y) (find 1 y)) ) 3 )
		)
	)
)
STOP





