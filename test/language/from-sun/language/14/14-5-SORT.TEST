;; Function To Be Tested: sort
;;
;; Source:        CLtL    Section 14.5: Sorting and Merging        Page: 258
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: Oct. 6 ,1986
;;
;; Last Update:   Jan 28, 1987 Jim Blum - There was an extra unfinished clause in test 2
;;					that was failing on the SUN.
;;
;; Filed As:      {eris}<lispcore>cml>test>14-5-sort.test
;;
;;
;; Syntax:                sort 	SEQUENCE PREDICATE &KEY :KEY
;;
;; Function Description:  The SEQUENCE is destructively sorted according to and order determined by the PREDICATE.
;;					sort does not guarantee stability.  For detailed funtion description, please read page 258-259 of CLtL
;;
;; Argument(s):           SEQUENCE  -
;;					PREDICATE - a function which takes two arguments.
;;					:KEY      - a function of one argument that will extract from an element the part to be tested in place
;;							  of the whole element
;;
;; Returns:               a sequence    
;;
(do-test "test sort  - test cases copied from page 260 of CLtL"

	(let (( foovector (vector '("Tokens" "The Lion Sleeps Tonight") '("Carpenters" "Close to You") 
						'("Rolling Stones" "Brown Sugar")
				 		 '("Beach Boys" "I Get Around") '("Mozart" "Eine Kleine Nachtmusik" (K 525))
				 		 '("Beatles" "I Want to Hold Your Hand"))  ))

		(setq foovector (sort foovector #'string-lessp :key #'car))
		(equalp foovector (vector '("Beach Boys" "I Get Around") '("Beatles" "I Want to Hold Your Hand")
							'("Carpenters" "Close to You") '("Mozart" "Eine Kleine Nachtmusik" (K 525))
							'("Rolling Stones" "Brown Sugar") '("Tokens" "The Lion Sleeps Tonight") ))
	)
)

(do-test "test sort 1"
	
	(let ((a "qazwsxedcrfvtgbyhnujmikolpPLOKIUJMYHNTGBRFVEDCXZSAQW" ))
		(and 
			(equal (sort (copy-seq a) #'char<) "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")

			(let ((b (sort (copy-seq a) #'char-lessp) ))
			     (and (= 	(length b) 52)
					(every #'(lambda (x y) (let ((c (elt b x)) )
									(cond ( (char= c y) (char= (elt b (1+ x)) (char-upcase y)))
									      ( (char= c (char-upcase y)) (char= (elt b (1+ x)) y)))))
					  	 '(0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 )
					 	 "abcdefghijklmnopqrstuvwxyz")))
				
				
			(equal (sort (copy-seq a) #'char>) "zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA")

			(let ((b (sort (copy-seq a) #'char-greaterp) ))
				(and  (= 	(length b) 52)
					 (every #'(lambda (x y) (let ((c (elt b x)) )
									  (cond ( (char= c y) (char= (elt b (1+ x)) (char-upcase y)))
									        ( (char= c (char-upcase y)) (char= (elt b (1+ x)) y)))))
					 	 '(0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 )
					 	 "zyxwvutsrqponmlkjihgfedcba")))
				

		)
	)
)

(do-test "test sort 2"

	(let ((a '("should" "sequences" "sort" "two" "already" "sense" "argument" "sun" "second" "fourth" "nin" "who") ))
		;;
		;;      6           9        4      3      7        5         8         3       6         6     3     3
		(and
			(let ((b (sort (copy-seq a) #'> :key #'length)) c)
				;;
				;; one possible value of b is: 
			     ;; ( "sequences" "argument" "already"  "should" "second" "fourth" "sense" "sort" "two" "sun" "nin" "who"))
				;;
				(and (= (length b) 12)
					(every #'(lambda (x) (find x b :test #'equal))  a)
				)
			)

			(let ((b (sort (copy-seq a) #'char> :key #'(lambda (x) (elt x 1))) )  (c -1))
				;;
				;; one possible value of b is: 
				;; ("two" "sun" "argument" "sort" "fourth" "already" "nin" "should" "who" "sequences"  "sense"  "second"))
				;;
				(and (= (length b) 12)
					(every #'(lambda (x) (find x b :test #'equal))  a)
					(every #'(lambda (x) (char= (elt (elt b (incf c)) 1) x)) "wuroolihheee")
				)
			)
					

			(let ((b (sort (copy-seq a) #'char< :key #'(lambda (x) (elt x 2))) ) (c -1))
				;;
				;; one possible value of b is: 
				;; ("second" "argument" "sense" "sun" "nin" "should" "two" "who"  "sequences" "sort" "already" "fourth" ))
				;;
				(and (= (length b) 12)
					(every #'(lambda (x) (find x b :test #'equal))  a)
					(every #'(lambda (x) (char= (elt (elt b (incf c)) 2) x)) "cgnnnoooqrru")
				)
			)
	

			(let ((b (sort (copy-seq a) #'char< :key #'(lambda (x) (elt (reverse x) 0)))  ) (c -1))
				;;
				;; one possible value of b is: 
				;; ("should" "second" "sense" "fourth" "sun" "nin" "two" "who" "sequences" "sort" "argument" "already" ))
				;;
					(and (= (length b) 12)
					(every #'(lambda (x) (find x b :test #'equal))  a)
					(every #'(lambda (x) (char= (elt (reverse (elt b (incf c))) 0) x)) "ddehnnoostty")
				)
			)	

		)
	)
) 

(do-test "test sort 3"
	(let ((a '( 2.4  5.9  20  10.0  18.3  18.6  22.1  0.9  1.31   8.67  3.41  2.9  100.2  35.2  29.5  30  60  18.15) ) b)
		;;
		;; +    6    14   20   10    21    24    23    9    4.1  14.7   7.1   11  102    37    34   30  60    19.5
		;; -    -2   -4   20   10    15    12    21   -9   -2.1   1.3  -1.1   -7   98    33    24   30  60    16.5
		;; *    8    45    0    0    54   104    22    0    3.1  53.6  12.3   18  200    70    145   0   0    27
		;;
		(and 	(equal (sort (copy-seq a) #'(lambda (x y) (> (apply #'+ x) (apply #'+ y))) 
									  :key #'(lambda (x ) (list (setq b (truncate x)) (* 10 (- x b)))))
			       '(100.2 60 35.2  29.5 30 18.6  22.1 18.3 20 18.15 8.67 5.9  2.9 10.0 0.9 3.41 2.4 1.31 ))

			(equal (sort (copy-seq a) #'(lambda (x y) (< (apply #'- x) (apply #'- y))) 
									  :key #'(lambda (x ) (list (setq b (truncate x)) (* 10 (- x b)))))
				  '(0.9 2.9  5.9 1.31 2.4 3.41 8.67 10.0 18.6 18.3 18.15 20  22.1 29.5 30 35.2 60 100.2  ))

			(let ((b  (sort (copy-seq a) #'(lambda (x y) (> (apply #'* x) (apply #'* y)))  
				  					  :key #'(lambda (x ) (list (setq b (truncate x)) (* 10 (- x b)))))  ))
				;;
				;; one possible value of b is: 
				;; (100.2 29.5  18.6 35.2 18.3 8.67  5.9  18.15 22.1 2.9  3.41 2.4 1.31 20  10.0  0.9 30  60 ))
				;;
				(and (= (length b) 18)
					(= (mismatch b '(100.2 29.5  18.6 35.2 18.3 8.67  5.9  18.15 22.1 2.9  3.41 2.4 1.31) :test #'=) 13)
					(every #'(lambda (x) (find x (subseq b 13) :test #'=)) '(20  10.0  0.9 30  60 ))
				)
			)
		)
	)
)
STOP

