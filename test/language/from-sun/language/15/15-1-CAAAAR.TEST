;; Function To Be Tested: CAAAAR
;;
;; Source:        Steele's book    Section 15.1: Conses        Page: 263
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: July 14 ,1986
;;
;; Last Update:   July 14 ,1986
;;
;; Filed As:      {eris}<lispcore>cml>test>15-1-caaaar.test
;;
;;
;; Syntax:                CAAAAR LIST
;;
;; Function Description:  (CAAAAR LIST) is equivalent to (CAR (CAR (CAR (CAR LIST))))
;;
;; Argument(s):           LIST - a list
;;
;; Returns:               anything    
;;

(defun mac (list elm)
	 (typecase  elm (number           (=     (caaaar list) ,elm))
		        ((or cons string) (equal (caaaar list) ,elm))
			(t                (eq    (caaaar list) ,elm))
	) 
)


(do-test "test caaaar0"
    (prog1
	(and (mac '((((1)) 2 )) 1)
		(mac '((((1) . 2) 3 . 4) a) 1)
		(mac '((((( 1 2) 3) 4) 5) 6 7 8 9) '(1 2))
		(mac '(( (((1 . 100) a))) (2 b) (3 c)) '(1 . 100))
		(mac '((( ((#\a)) (( b))) ((c)) d))  '(#\a))
		(mac '((( ((foo1) foo2))) ((foo3) bar3) (foo4 (bar4)) (((foo5 bar5)))) '(foo1) )
		(mac '(((((((((( t )))))))))) '(((((( t))))))  )
		(mac '( ((("excitint" "vacations") "to") |HAWAII| |Mexico| (the Pacific Northwest) ((and)) (the . Orient)))
		     "excitint")
		(mac '((((#\F) #\o) "o1") "foo2" ((foo3)) (foo4 . foo5)) #\F ) 
		(mac '((((("the weather in January")) ("is usually clear and sunny")) "with temperatures usually in the " fifties)
				(in the day time) (and ) (the "20's" at night)) 
               '("the weather in January")   )
	))
)

(do-test "test caaaar1"
    (progn (setq a (list (list (list (list #'null  #'oddp))) (list #'list #'max #'min #'evenp) #'(lambda (x) (* 100 x))))
		 (equal (mapcar (caaaar a) (mapcar #'caaaar '( ((((8))))  (((()(1 2) 3 ) 4)) ((((#\a #\b #\c))) ((#\d) #\e #\f)) ) )) 
			   '( nil t nil))
	)
)

(do-test "test caaaar2"
    (let ((aa '((((((((((((((((t)) 1 2) 3 4) 5 6))) 7 8) 9 10))) 11 12) 13 14)))   ((((((1 2) 3 4) 5 6) 7 8) 9 10) 11 12) )  ))
		(and (equal (caaaar aa) '((((((((((((t)) 1 2) 3 4) 5 6))) 7 8) 9 10))) 11 12))
			(equal (caaaar (caaaar aa)) '((((((((t)) 1 2) 3 4) 5 6))) 7 8) )
			(equal (caaaar (caaaar (caaaar aa))) '((((t)) 1 2) 3 4) )
			(eq (caaaar (caaaar (caaaar (caaaar aa)))) 't)
		)
	)
)

(do-test "test caaaar3"	
    (progn (setq aa '((((a)) b) c d )  )
	(and 
	    (setf (caaaar aa) '( (((2)) 4)  (((2)) 4)) )
	    (equal aa `(((( ((((2)) 4)  (((2)) 4)) )) b) c d )  )
	    (setf (caaaar (caaaar aa)) '((((3))) 9) )
	    (equal aa `(((( (((( ((((3))) 9) )) 4)  (((2)) 4)) )) b) c d ))
	    (setf (caaaar(caaaar (caaaar aa))) "magic kingdom")
	    (equal aa `(((( (((( (((("magic kingdom"))) 9) )) 4)  (((2)) 4)) )) b) c d ))
	)
    )
)
STOP
