;; Function To Be Tested: CAADAR
;;
;; Source:        Steele's book    Section 15.1: Conses        Page: 263
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: July 22 ,1986
;;
;; Last Update:   July 22 ,1986
;;
;; Filed As:      {eris}<lispcore>cml>test>15-1-caadar.test
;;
;;
;; Syntax:                CAADAR LIST
;;
;; Function Description:  (CAADAR LIST) is equivalent to (CAR (CAR (CDR (CAR LIST))))
;;
;; Argument(s):           LIST - a list
;;
;; Returns:               anything    
;;

(defun mac (list elm)
	 (typecase  elm (number           (=     (caadar list) ,elm))
		        ((or cons string) (equal (caadar list) ,elm))
			(t                (eq    (caadar list) ,elm))
	) 
)
(do-test "test caadar0"
    (prog1
	(and (mac '(((0 1) (1)) 2 ) 1)
		(mac '(((((q p))) ((1 . 2) 3 . 4)) a) '(1 . 2))
		(mac '((a (( 1 2 3 4) 5) 6) 7 8 9) '(1 2 3 4))
		(mac '((0.009 ( 1 a)) (2 b) (3 c)) 1)
		(mac '((#\3 ( ((a)) (( b)))) ((c)) d)  '((a)))
		(mac '(('quack (foo bar) (foo1 . bar1)) ((foo2 bar2)) ((foo3) bar3) (foo4 (bar4)) (((foo5 bar5)))) 'foo)
		(mac '((non-nil ((((((((( t ))))))))))) '(((((((( t))))))))  )
		(mac '( ("article" ("excitint" "vacations" "to" |HAWAII| |Mexico| (the Pacific Northwest) ((and)) (the . Orient))))
		     "excitint")
		(mac '((#\q (#\F)) #\o "o1" "foo2" ((foo3)) (foo4 . foo5)) #\F ) 
		(mac '(("name: " (("the weather in January" ("is usually clear and sunny")) "with temperatures usually in the " fifties)
				(in the day time)) (and ) (the "20's" at night)) 
               '("the weather in January" ("is usually clear and sunny"))   )
	))
)

(do-test "test caadar1"
    (progn (setq a (list (list #'member (list #'null  #'oddp) (list #'list #'max #'min #'evenp)) #'(lambda (x) (* 100 x))))
		 (equal (mapcar (caadar a) (mapcar #'caadar '( ((t ()))  ((5 (1 2) 3) 4) ((#\* (#\a #\b #\c)) ((#\d) #\e #\f)) ) )) 
			   '(t nil nil))
	)
)

(do-test "test caadar2"
    (let ((aa '((-1 (((-2 (((-3 (((-4 (1 2)) 3 4) 5 6)) 7 8) 9 10)) 11 12) 13 14))   ((((((1 2) 3 4) 5 6) 7 8) 9 10) 11 12) )  ))
		(and (equal (caadar aa) '((-2 (((-3 (((-4 (1 2)) 3 4) 5 6)) 7 8) 9 10)) 11 12))
			(equal (caadar (caadar aa)) '((-3 (((-4 (1 2)) 3 4) 5 6)) 7 8) )
			(equal (caadar (caadar (caadar aa))) '((-4 (1 2)) 3 4) )
			(equal (caadar (caadar (caadar (caadar aa)))) 1)
		)
	)
)

(do-test "test caadar3"	
	(progn (setq aa '((z (a b) c) d ))
		(and 
			(setf (caadar aa) '((2 (4 8))) )
			(equal aa `((z (  ((2 (4 8)))   b) c) d ))
			(setf (caadar (caadar aa)) '((1 (3)) 9))
			(equal aa `((z (  ((2 (  ((1 (3)) 9)   8)))   b) c) d ))
			(setf (caadar(caadar (caadar aa))) "magic kingdom")
			(equal aa `((z (  ((2 (  ((1 ("magic kingdom")) 9)   8)))   b) c) d ))
		)
	)
)
;;
;;
STOP
