;; Function To Be Tested: CAAR
;;
;; Source:        Steele's book    Section 15.1: Conses        Page: 263
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: July 8 ,1986
;;
;; Last Update:   July 8 ,1986
;;
;; Filed As:      {eris}<lispcore>cml>test>caar.test
;;
;;
;; Syntax:                CAAR LIST
;;
;; Function Description:  If the first element of LIST is a list, CAAR returns the first element of the sublist.
;;
;; Argument(s):           LIST - a list
;;
;; Returns:               anything    
;;

(defun mac (list elm)
	 (typecase  elm (number           (=     (caar list) ,elm))
		        ((or cons string) (equal (caar list) ,elm))
			(t                (eq    (caar list) ,elm))
	) 
)
(do-test "test caar0"
    (prog1
	(and (mac '((1) 2 ) 1)
		(mac '(((1 . 2) 3 . 4) a) '(1 . 2))
		(mac '((( 1 2 3 4) 5) 6 7 8 9) '(1 2 3 4))
		(mac '(( 1 a) (2 b) (3 c)) 1)
		(mac '(( ((a)) (( b))) ((c)) d)  '((a)))
		(mac '((foo bar) (foo1 . bar1) ((foo2 bar2)) ((foo3) bar3) (foo4 (bar4)) (((foo5 bar5)))) 'foo)
		(mac '(((((((((( t )))))))))) '(((((((( t))))))))  )
		(mac '( ("excitint" "vacations" "to" |HAWAII| |Mexico| (the Pacific Northwest) ((and)) (the . Orient)))
		     "excitint")
		(mac '((#\F) #\o "o1" "foo2" ((foo3)) (foo4 . foo5)) #\F ) 
		(mac '((("the weather in January" ("is usually clear and sunny")) "with temperatures usually in the " fifties)
				(in the day time) (and ) (the "20's" at night)) 
               '("the weather in January" ("is usually clear and sunny"))   )
	))
)

(do-test "test caar1"
    (progn (setq a (list (list #'null  #'oddp) (list #'list #'max #'min #'evenp) #'(lambda (x) (* 100 x))))
		 (equal (mapcar (caar a) (mapcar #'caar '( (())  ((1 2) 3 4) ((#\a #\b #\c) ((#\d) #\e #\f)) ) )) 
			   '(t nil nil))
	)
)

(do-test "test caar2"
    (let ((aa '((((((((1 2) 3 4) 5 6) 7 8) 9 10) 11 12) 13 14)   ((((((1 2) 3 4) 5 6) 7 8) 9 10) 11 12) )  ))
		(and (equal (caar aa) '((((((1 2) 3 4) 5 6) 7 8) 9 10) 11 12))
			(equal (caar (caar aa)) '((((1 2) 3 4) 5 6) 7 8) )
			(equal (caar (caar (caar aa))) '((1 2) 3 4) )
			(equal (caar (caar (caar (caar aa)))) 1)
		)
	)
)

(do-test "test caar3"	
	(progn (setq aa '((a b) c d ))
		(and 
			(setf (caar aa) (make-list 2 :initial-element '(2 4)))
			(equal aa `(( ((2 4)  (2 4)) b) c d ))
			(setf (caar (caar aa)) '((3) 9))
			(equal aa `(( ((((3) 9) 4) ( ((3) 9) 4)) b) c d ))
			(setf (caar(caar (caar aa))) "magic kingdom")
			(equal aa `(( (((("magic kingdom") 9) 4) ( (("magic kingdom") 9) 4)) b) c d ))
		)
	)
)
;;
;;
STOP
