;; Function To Be Tested: CADAAR
;;
;; Source:        Steele's book    Section 15.1: Conses        Page: 263
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: July 16 ,1986
;;
;; Last Update:   July 16 ,1986
;;
;; Filed As:      {eris}<lispcore>cml>test>15-1-cadaar.test
;;
;;
;; Syntax:                CADAAR LIST
;;
;; Function Description:  (CADAAR LIST) is equivalent to (CAR (CDR (CAR (CAR LIST))))
;;
;; Argument(s):           LIST - a list
;;
;; Returns:               anything    
;;
(do-test "test cadaar0"
    (prog2
		(defmacro mac (list elm)
			`(typecase ,elm (number           (= (cadaar ,list) ,elm))
						 ((or cons string) (equal (cadaar ,list) ,elm))
						 (t                (eq (cadaar ,list) ,elm))
			) 
		)
	(and (mac '((((1) 11) 2 )) 11)
		(mac '((((1) (3 . 2)) 3 . 4) a) '(3 . 2))
		(mac '((((( 1 2) 3) 4) 5) 6 7 8 9) 4)
		(mac '(( (((1 . 100) a) #\q) ) (2 b) (3 c)) #\q)
		(mac '((( ((#\a) #\b #\c) (( b))) ((c)) d))  '(( b)))
		(mac '((( ((foo1) foo2) foo2.5 foo2.6)) ((foo3) bar3) (foo4 (bar4)) (((foo5 bar5)))) 'foo2.5 )
		(mac '(((((((((( t ))))))) nil))) nil  )
		(mac '( ((("excitint" "vacations") "to") |HAWAII| |Mexico| (the Pacific Northwest) ((and)) (the . Orient)))
		     "to")
		(mac '((((#\F) (bar1 . bar2) #\o) "o1") "foo2" ((foo3)) (foo4 . foo5)) '(bar1 . bar2) ) 
		(mac '((((("the weather in January") . non-nil) ("is usually clear and sunny")) "with temperatures usually in the " fifties)
				(in the day time) (and ) (the "20's" at night)) 
               '("is usually clear and sunny")   )
	))
)

(do-test "test cadaar1"
    (progn (setq a (list (list (list #'null  #'(lambda (x) (listp x))))  #'(lambda (x) (* 100 x))))
		 (equal (mapcar (cadaar a) 
				(mapcar #'cadaar '( ((((8) (88))))  ((((9 99 999)(1 2) 3 ) 4)) ((((#\a #\b . #\c) #\m)) ((#\d) #\e #\f)) ) )) 
			   '(t t nil))
	)
)

(do-test "test cadaar2"
  (prog2 
	(setq aa '(((1 (((2 (((3 ((( 4 5 6 7 . 8))) ))) ))) )))  )
	(and (equal (cadaar aa) '((( 2 ((( 3 ((( 4 5 6 7 . 8))) ))) )))  )
		(equal (cadaar (cadaar aa)) '((( 3 ((( 4 5 6 7 . 8))) ))) )
		(equal (cadaar (cadaar (cadaar aa))) '((( 4 5 6 7 . 8))) )
		(equal (cadaar (cadaar (cadaar (cadaar aa)))) 5)
	)
  )
)

(do-test "test cadaar3"
	(progn (setq aa '(((a b)) c))
		  (setf (cadaar aa) '((( c d e))) )
		  (setf (cadaar (cadaar aa)) '((( f g h))) )
		  (setf (cadaar (cadaar (cadaar aa))) '((( i j k))) )
		  (equal aa '((( a ((( c ((( f ((( i j k))) h)))  e))) )) c)  )
	)
)
STOP


