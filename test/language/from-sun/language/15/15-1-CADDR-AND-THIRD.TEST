;; Function To Be Tested: caddr-and-third
;;
;; Source:        Steele's book    Section : 15.1 & 15.2        Page: 263 & 266
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: July 2, 1986
;;
;; Last Update:   July 2, 1986
;;
;; Filed As:      {eris}<lispcore>cml>test>15-1-caddr-and-third.test
;;
;;
;; Syntax:                CADDR   list
;;                        THIRD list
;;
;; Function Description:  CADDR & THIRD both return the third element of list
;;
;; Argument(s):           list - a cons or ()
;;
;; Returns:               the third element of list
;;                        nil  - if list is ()    
;;

(do-test "test caddr0"
    (and (eq (caddr '()) ())
		(eq (caddr '(1)) ())
		(eq (caddr '(1 2)) ())
		(eq (caddr '(1 2 3)) 3)
		(equal (caddr '((1 2) 3 (4 . 5))) '(4 . 5))
		(equal (caddr '(#\a #\b #\c #\d #\f)) #\c)
		(equal (caddr '((1) ((2)) ((("s"))) ((((w)))) ))  '((("s"))))
	))

(defun fun (list elm)
		(typecase elm  (number           (=     (caddr list) elm))
				((or cons string) (equal (caddr list) elm))
				(t                (eq    (caddr list) elm))
		)
)
(do-test "test caddr1"
	(prog1 
		(and (fun '("first" "second" "third" "forth") "third")
			(fun '(a b ((c . d) . e)) '((c . d) . e))
			(fun '((item1 10) (item2 20) (item3 30) (item4 40)) '(item3 30))
			(fun `('a "b" 100.009 (1+ 9)) (+ 100 .009))
			(fun (let (a i) (dotimes (i 100 (reverse a)) (push i a)))  2)
			(fun (list (code-char #16r41) (code-char #16r42) (code-char #16r43) (code-char #16r44)) #\C))
	)
)
;;
;;  third should behave like caddr
;;
(do-test "test third0"
    (and (eq (third '()) ())
		(eq (third '(1)) ())
		(eq (third '(1 2)) ())
		(eq (third '(1 2 3)) 3)
		(equal (third '((1 2) 3 (4 . 5))) '(4 . 5))
		(equal (third '(#\a #\b #\c #\d #\f)) #\c)
		(equal (third '((1) ((2)) ((("s"))) ((((w)))) ))  '((("s"))))
	))

(defun fun (list elm)
	(typecase elm  (number           (=     (third list) elm))
			((or cons string) (equal (third list) elm))
			(t                (eq    (third list) elm))
		)
)
(do-test "test third1"
	(prog1 
		(and (fun '("first" "second" "third" "forth") "third")
			(fun '(a b ((c . d) . e)) '((c . d) . e))
			(fun '((item1 10) (item2 20) (item3 30) (item4 40)) '(item3 30))
			(fun `('a "b" 100.009 (1+ 9)) (+ 100 .009))
			(fun (let (a i) (dotimes (i 100 (reverse a)) (push i a)))  2)
			(fun (list (code-char #16r41) (code-char #16r42) (code-char #16r43) (code-char #16r44)) #\C))
	)
)
STOP
 
