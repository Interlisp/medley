;; Function To Be Tested: cadr-and-second
;;
;; Source:        Steele's book    Section : 15.1 & 15.2        Page: 263 & 266
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: July 2, 1986
;;
;; Last Update:   July 2, 1986
;;
;; Filed As:      {eris}<lispcore>cml>test>15-1-cadr-and-second.test
;;
;;
;; Syntax:                CADR   list
;;                        SECOND list
;;
;; Function Description:  CADR & SECOND both return the second element of list
;;
;; Argument(s):           list - a cons or ()
;;
;; Returns:               the second element of list
;;                        nil  - if list is ()    
;;


(do-test "test cadr0"
	(and (eq (cadr '()) ())
		(eq (cadr '(1)) ())
		(eq (cadr '(1 a)) 'a)
		(=  (cadr '(a 100)) 100)
		(equal (cadr  '(1 (2 3))) '(2 3))
		(equal (cadr '( 3 ( 1 . 2))) '(1 . 2))
		(char= (cadr '(#\a #\b)) #\b)
          (equal (cadr '(10 ((((( 20)))) 50))) '(((((20))))50))
	))

(defun fun (list elm)
	(typecase elm  (number           (= (cadr list) elm))
			((or cons string) (equal (cadr list) elm))
			(t                (eq (cadr list) elm))
	)
)
(do-test "test cadr1"
	(prog1 
		(and (fun '(1 2 3 4 5 6 7 8) 2)
			(fun '((propery . 10) (item . 100)) '(item . 100))
			(fun '( (((((1 2))))) ((((((((((10))))))))))  ) '((((((((((10))))))))))  )
			(fun '("first" "second" "third" "forth") "second")
			(fun '(#\a (#\b #\c) #\d #\e) '(#\b #\c) )
			(progn (setq a nil) (dotimes (i 10 t) (push i a)))
			(fun a 8)
			(fun '(((2 3) (4 5)) ((20 30) (40 50)) 100)  '((20 30) (40 50)))
		)
	)
)

;;
;;  second should behave the same as cadr
;;

(do-test "test second0"
	(and (eq (second '()) ())
		(eq (second '(1)) ())
		(eq (second '(1 a)) 'a)
		(=  (second '(a 100)) 100)
		(equal (second  '(1 (2 3))) '(2 3))
		(equal (second '( 3 ( 1 . 2))) '(1 . 2))
		(char= (second '(#\a #\b)) #\b)
          (equal (second '(10 ((((( 20)))) 50))) '(((((20))))50))
	))

(defun fun (list elm)
	(typecase elm  (number           (= (second list) elm))
			((or cons string) (equal (second list) elm))
			(t                (eq (second list) elm))
	)
)
(do-test "test second1"
	(prog2 
		(and (fun '(1 2 3 4 5 6 7 8) 2)
			(fun '((propery . 10) (item . 100)) '(item . 100))
			(fun '( (((((1 2))))) ((((((((((10))))))))))  ) '((((((((((10))))))))))  )
			(fun '("first" "second" "third" "forth") "second")
			(fun '(#\a (#\b #\c) #\d #\e) '(#\b #\c) )
			(progn (setq a nil) (dotimes (i 10 t) (push i a)))
			(fun a 8)
			(fun '(((2 3) (4 5)) ((20 30) (40 50)) 100)  '((20 30) (40 50)))
		)
	)
)
STOP			
