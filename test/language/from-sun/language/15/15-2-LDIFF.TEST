;; Function To Be Tested: LDIFF
;;
;; Source: Guy L Steele's CLTL
;; Section: 15.2 Lists
;; Page: 272
;;
;; Created By:    Karin M. Sye, Kelly Roach
;;
;; Creation Date: June 27,1986
;;
;; Last Update:   June 27,1986
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>15-2-LDIFF.TEST
;;
;;
;; Syntax:        (LDIFF LIST SUBLIST)
;;
;; Function Description:
;; LIST should be a list, and SUBLIST should be a sublist
;; of LIST, that is, one of the conses that make up LIST.
;; LDIFF (meaning ``list difference'') will return a new (freshly consed)
;; list, whose elements are those elements of LIST that appear before
;; SUBLIST.  If SUBLIST is not a tail of LIST
;; (and in particular if SUBLIST is NIL),
;; then a copy of the entire LIST is returned.
;; The argument LIST is not destroyed.
;; For example:
;; 
;;     (SETQ X '(A B C D E))
;;     (SETQ Y (CDDDR X)) => (D E)
;;     (LDIFF X Y) => (A B C)
;;     but
;;     (LDIFF '(A B C D) '(C D)) => (A B C D)
;;     since the sublist was not EQ to any part of the list.
;;     
;; 
;; Argument(s):   LIST - a pure list
;;                SUBLIST - a pure list
;;
;; Returns:       a pure list
;;



(do-test "test ldiff - test cases copied from page 272 of CLtL"
    (progn (SETQ X '(A B C D E))
		 (SETQ Y (CDDDR X))
		 (and (EQUAL (LDIFF X Y)  '(A B C))
			 (NOT (EQUAL (LDIFF '(A B C D) '(C D))  '(A B C)))
            )))

(do-test "test ldiff0"
    (progn (setq a '(1 2 3 4 5 6)  b (nthcdr 3 a) c (nthcdr 5 a) d (nthcdr 1 b))
           ;
           (and (equal (ldiff a b) '(1 2 3))
                (equal (ldiff a c) '(1 2 3 4 5))
  			(equal (ldiff a d) '(1 2 3 4))
		)))

(do-test "test ldiff1"
    (let ()
         (defun fun (list n diff) (equal (ldiff list (nthcdr n list)) diff))
         (and (fun '(10 9 8 7 6 5 4 3 2 1) 5 '(10 9 8 7 6))
		    (fun '(( a b c d) e f g h (i j k) l m n)  1 '((a b c d)))
		    ;
		    ;  sublist is a  nill
		    ;
		    (fun '(a b c d) 4 '(a b c d))
		    (fun (make-list 200 :initial-element 'quack) 190 (make-list 190 :initial-element 'quack))
		    (fun (make-list 150 :initial-element '(1 . 2)) 100 (make-list 100 :initial-element '(1 . 2)))
              (fun (make-list 125 :initial-element #\w) 75 (make-list 75 :initial-element #\w))
          )))

(do-test "test ldiff - ldiff returns a new (freshly consed) list"
         (progn (setq a '(a b c d e f g) b (cdr (cdr (cdr a))) d (ldiff a b))
		      (and (equal d '(a b c))
 				 (rplaca (cdr d) 'w)
			      (equal d '(a w c))
				 (equal a '(a b c d e f g)))))

(do-test "test ldiff - 'sublist' should be a sublist of 'list' "
    (and (let (a b)
		    (set 'a '( l d i f f))
		    (set 'b a)
		    (eq nil (ldiff a b)))
          ;;
          (prog2 (setq a '( l d i f f) b '(t e s t i n g) c (append a b) d (append a nil))
                 (and (equal (ldiff c a ) c)   (equal (ldiff c b) a) (equal (ldiff d a) d) ))
          ;;
		(progn (setq a '( l d i f f) b '(t e s t i n g)  d (append a nil) c (nconc a b))
			  (and (equal (ldiff c a) nil)   (equal (ldiff c b) d)))
	)
)

STOP
