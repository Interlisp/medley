;; Function To Be Tested: LIST-LENGTH
;;
;; Source: Guy L Steele's CLTL
;; Section: 15.2 Lists
;; Page: 265
;;
;; Created By:    Karin M. Sye, Kelly Roach
;;
;; Creation Date: June 27,1986
;;
;; Last Update:   June 27,1986
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>15-2-LIST-LENGTH.TEST
;;
;;
;; Syntax:        (LIST-LENGTH LIST)
;;
;; Function Description:
;; LIST-LENGTH returns, as an integer, the length of LIST.
;; LIST-LENGTH differs from function LENGTH when the LIST is
;; circular; LENGTH may fail to return, whereas LIST-LENGTH
;; will return NIL.
;; For example:
;; 
;;     (LIST-LENGTH 'NIL) => 0
;;     (LIST-LENGTH '(A B C D)) => 4
;;     (LIST-LENGTH '(A (B C) D)) => 3
;;     (LET ((X (LIST 'A B C)))
;;       (RPLACD (LAST X) X)
;;       (LIST-LENGTH X)) => NIL
;;     
;; LIST-LENGTH could be implemented as follows:
;; 
;; 
;;   (DEFUN LIST-LENGTH (X)
;;       (DO ((N 0 (+ N 2))		;COUNTER.
;;            (FAST X (CDDR FAST))	;FAST POINTER: LEAPS BY 2.
;;            (SLOW X (CDR SLOW)))	;SLOW POINTER: LEAPS BY 1.
;;           (NIL)
;;         ;; IF FAST POINTER HITS THE END, RETURN THE COUNT.
;;         (WHEN (ENDP FAST) (RETURN N))
;;         (WHEN (ENDP (CDR FAST)) (RETURN (+ N 1)))
;;         ;; IF FAST POINTER EVENTUALLY EQUALS SLOW POINTER,
;;         ;;  THEN WE MUST BE STUCK IN A CIRCULAR LIST.
;;         ;; (A DEEPER PROPERTY IS THE CONVERSE: IF WE ARE
;;         ;;  STUCK IN A CIRCULAR LIST, THEN EVENTUALLY THE
;;         ;;  FAST POINTER WILL EQUAL THE SLOW POINTER.
;;         ;;  THAT FACT JUSTIFIES THIS IMPLEMENTATION.)
;;         (WHEN (AND (EQ FAST SLOW) (> N 0)) (RETURN NIL))))
;;
;;     
;; See function LENGTH, which will return the length of any sequence.
;; 
;; Argument(s):   LIST - a list
;;
;; Returns:       a number
;;



(do-test "test list-length0 : test cases copied from page 265 of CLtL"
    (and (= (list-length '()) 0)
         (= (list-length '(a b c d)) 4)
         (= (list-length '(a (b c) d)) 3)
         (eq (let ((x (list 'a 'b 'c))) (rplacd (last x) x) (list-length x)) nil)))

(do-test "test list-length1 : more test case copied from page 265 of CLtL"
    (progn (defun list-length2 (x)
 				;
				;  list-length could be implemented as follows:
				;
				(do ((n 0 (+ n 2))
					(fast x (cddr fast))
					(slow x (cdr slow)))
					(nil)
					(when (endp fast) (return n))
					(when (endp (cdr fast)) (return (+ n 1)))
					(when (and (eq fast slow) (> n 0)) (return nil))))
            ;
            (and (= (list-length2 '(4 3 2)) 3)
                 (= (list-length2 '()) 0)
                 (setq x '(1 2))
                 (eq (list-length2 (rplacd (cdr x) x)) nil)
                 (= (list-length2 '(8 7 (3 4))) 3))))

(do-test "test list-length2 : for non-circular lists, the function returns an integer"
    (every #'(lambda (x) (and (setq a (list-length x)) (integerp a) (not (minusp a))))
                         '( ()  '(1 2 3) '(a b c d e f g))))

(do-test "test list-length3 : for circular lists, the function should return a nil"
    (notany #'list-length (list (prog2 (setq x '(1 2 3)) (rplacd (cddr x) x))
       					 (prog1 (rplacd (last (setq x '(a b c d))) x)))))


;;(do-test "test list-length4 : CLtL didn't talk about the behavior of the function when the argument ia a non-list."
;;    (notany #'(lambda (x) (nlsetq (list-length x))) '(a 23 0.009 #\m "st" #(1 2 3) 7/3)))

(do-test "test list-length5"
    (let ()
         (defun fun (x y z) (= (list-length (append x y)) z))
         (and (fun '(1 2) '(3 4) 4)
              (fun () () 0)
              (fun '(a b c d e f g (h i j k)) '(2 34 5) 11)
              (fun (make-list 30) (make-list 20) 50)
              (fun '(((((a))))) '((((())))) 2))))

STOP
