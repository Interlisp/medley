;; Function To Be Tested: MAKE-LIST
;;
;; Source: Guy L Steele's CLTL
;; Section: 15.2 Lists
;; Page: 268
;;
;; Created By:    Karin M. Sye, Kelly Roach
;;
;; Creation Date: June 27,1986
;;
;; Last Update:   June 27,1986
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>15-2-MAKE-LIST.TEST
;;
;;
;; Syntax:        (MAKE-LIST SIZE &KEY INITIAL-ELEMENT)
;;
;; Function Description:
;; This creates and returns a list containing SIZE elements, each
;; of which is initialized to the :INITIAL-ELEMENT
;; argument (which defaults to NIL).
;; SIZE should be a non-negative integer.
;; For example:
;; 
;;     (MAKE-LIST 5) => (NIL NIL NIL NIL NIL)
;;     (MAKE-LIST 3 :INITIAL-ELEMENT 'RAH) => (RAH RAH RAH)
;;     
;; 
;; Argument(s):   SIZE - a number
;;                INITIAL-ELEMENT - anything
;;
;; Returns:       a pure list
;;



;;ROACH 25-JUN-86  These NLSETQ's don't seem to protect against CL:ERROR's.
;;I've therefore disabled this test.
;;
;;(do-test "test make-list0  - check syntax"
;;    (not (or (nlsetq (make-list))
;;             (nlsetq (make-list 'dfd))
;;             (nlsetq (make-list :initial-element 3))
;;             ;;
;;             ;;  check spelling of keyword :initial-element
;;             ;;
;;             (nlsetq (make-list 3 :initial 2))
;;             (nlsetq (make-list 3 :initial-ellementt 4))
;;             ;;
;;             ;; size should be a non-negative integer
;;             ;;
;;             (nlsetq (make-list 2.0))
;;             (nlsetq (make-list -1)))))

(do-test "test make-list1 - test cases copied from p268 of CLtL"
    (and (eq (make-list 0) '())
         (equal (make-list 5) '(nil nil nil nil nil))
         (equal (make-list 3 :initial-element 'rah) '(rah rah rah))))

(do-test "test make-list - using different types of data objects for the initial values"
    (and (equal (make-list 2 :initial-element 3.0) '(3.0 3.0))
         (equal (make-list 2 :initial-element ''n) '('n 'n))
         (equal (make-list 2 :initial-element "w") '("w" "w"))
         (equal (make-list 2 :initial-element #\p) '(#\p #\p))
         (equal (make-list 2 :initial-element 10) '(10 10))
         (equal (make-list 2 :initial-element '(1 2)) '((1 2) (1 2)))))



(do-test "test make-list3"
    (let ()
         (defun fun (size &optional value) (make-list size :initial-element value))
         (defun test (list  size value) 
                     (and (every #'(lambda (x) (cond ((or (listp x) (stringp x)) (equal x value))
                                                     (t                          (eq x value)))) list)
                          (= (list-length list) size)))
         ;
         (and (test (fun 10 'a) 10 'a)
              (test (fun 100 #\q) 100 #\q)
              (test (fun 50 "s") 50 "s")
              (test (fun 50 -1) 50 -1)
              (test (fun 200 (* 2 7)) 200 14)
              (test (fun 40) 40 nil)
              (test (fun 30 'foo) 30 'foo)
              (test (fun 25 '(1 2 3)) 25 '(1 2 3)))))

STOP
