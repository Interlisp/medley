;; Function To Be Tested: nconc
;;
;; Source:        Steele's book    Section 15.2: Lists        Page: 269
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: June 16,1986
;;
;; Last Update:   June 16,1986
;;
;; Filed As:      {eris}<lispcore>cml>test>15-2-nconc.test
;;
;;
;; Syntax:                NCONC &rest lists
;;
;; Function Description:  NCONC returns a list that is the argument lists concatenated together. The 
;;                        arguments are changed, rather than copied.
;;
;; Argument(s):           {list}*
;;
;; Returns:               nil or a list    
;;

;;ROACH 25-JUN-86  It seems that NCONC is supposed to be a destructive APPEND
;;and that APPEND does in fact allow non list arguments.  From page 268 of the
;;manual:
;;
;;     "The last argument actually need not be a list but may be any LISP
;;which becomes the tail end of the contructed list.  For example,
;;(append '(a b c) 'd) => (a b c . d)"
;;
;;This isn't said so explicitly on page 269 where NCONC is documented, but given
;;the well known similarity of these two functions, the comment "Compare this
;;with append", and the similar examples between APPEND and NCONC used in the
;;manual, it seems intended that NCONC should also "in fact allow non list
;;arguments."  I have therefore disabled this test.
;;
;;(do-test "test-nconc0 - syntax checking ( NCONC takes lists as arguments) "
;;    (prog2 (setq save car/cdrerr car/cdrerr t)
;;           (notany #'(lambda (x) (nlsetq (nconc x)))
;;                     '(2 a #\k "w" 3.0 #(1 2 3) t :keyword))
;;           (setq car/cdrerr save)))

(do-test "test-nconc1 - this test case copied from page 269 of CLtL"
    (progn (setq x '(a b c))
           (setq y '(d e f))
           (and (equal (nconc x y) '(a b c d e f))
                (equal x '(a b c d e f)))))

(do-test "test-nconc2 - input argument is a nil "
    (eq (nconc) nil))

(do-test "test-nconc3"
    (and (setq a '(1 2 3) b '(4 5 6) c '(7 8 9) d () e '(10 11 12) f'(20 21 22 23))
         (equal (setq q (nconc a b c f d e)) '(1 2 3 4 5 6 7 8 9 20 21 22 23 10 11 12))
         (equal a q)
         (not (or (equal b '(4 5 6)) (equal c '(7 8 9)) (equal f '(20 21 22 23))))
         ;
         (setq a (make-list 5 :initial-element 'rah)
               b (make-list 5 :initial-element 'quack)
               x (make-list 10 :initial-element 'foo))
         (equal x (setq q (nconc x a b)))
         (= 20 (list-length q))
         (every #'(lambda (x) (eq 'rah (nth x q))) '(10 11 12 13 14))
         (every #'(lambda (x) (eq 'foo (nth x q))) '(0 1 2 3 4 5 6 7 8 9))))

(do-test "test-nconc4"
    (and (equal (nconc '(1 . 2) '(3 . 4)) '(1 3 . 4))
         (equal (nconc nil (list 'a (cons 'b 'c))) '(a (b .  c)))
         (equal (nconc '(11 . 22) '(((((1 2) 3) 4) 5) 6) '(33 . 44)) '(11 ((((1 2) 3) 4) 5) 6 33 . 44))))
;;
;;
STOP
          
    

    