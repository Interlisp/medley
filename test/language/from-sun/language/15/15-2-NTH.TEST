;; Function To Be Tested: NTH
;;
;; Source: Guy L Steele's CLTL
;; Section: 15.2 Lists
;; Page: 265
;;
;; Created By:    Karin M. Sye, Kelly Roach
;;
;; Creation Date: June 27,1986
;;
;; Last Update:   June 27,1986
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>15-2-NTH.TEST
;;
;;
;; Syntax:        (NTH N LIST)
;;
;; Function Description:
;; (NTH N LIST) returns the Nth element of LIST, where
;; the CAR of the list is the ``zeroth'' element.
;; The argument N must be a non-negative integer.
;; If the length of the list is not greater than N, then the result
;; is NIL, that is, NIL.
;; (This is consistent with the idea that the CAR and CDR
;; of NIL are each NIL.)
;; For example:
;; 
;;     (NTH 0 '(FOO BAR GACK)) => FOO
;;     (NTH 1 '(FOO BAR GACK)) => BAR
;;     (NTH 3 '(FOO BAR GACK)) => NIL
;;     
;; Compatibility note: This is not
;; the same as the Interlisp function called NTH,
;; which is similar to but not exactly the same as the Common Lisp function
;; NTHCDR.  This definition of NTH is compatible
;; with Zetalisp and NIL.
;; Also, some people have used macros and functions called NTH of their own in
;; their old Maclisp programs, which may not work the same way.
;; 
;; NTH may be used to specify a PLACE to macro SETF;
;; when NTH is used in this way, the argument N must be less
;; than the length of the LIST.
;; 
;; Note that the arguments to NTH are reversed from the order
;; used by most other sequence selector functions such as function ELT.
;; 
;; Argument(s):   N - a number
;;                LIST - a list
;;
;; Returns:       anything
;;



(do-test "test nth - test cases copied from page 266 of CLtL"
   (and (eq (nth 0 '(foo bar gack)) 'foo)
        (eq (nth 1 '(foo bar gack)) 'bar)
        (eq (nth 3 '(foo bar gack)) ())))

;;ROACH 25-JUN-86  The NLSETQ's in this test aren't protecting against
;;CL:ERROR's.  I have therefore disabled this test.
;;
;;(do-test "test nth - n must be a non-negative integer (CLtL didn't mention ;;about signal an error if n is not a non-negative integer) "
;;    (notany #'(lambda (x) (nlsetq (nth x '(foo bar foo1 bar1))))
;;            (list 1.5 (sqrt 4) -1 -2.0 1.999)))



(do-test "test nth - if the length of the list is <= n, then the result is nil "
    (notany #'(lambda (x y) (nth y x)) '((1 2 3 4 5) (2 4) () (a b c (d e f (g h)) r s t y))
                                       '(5 3 1 8)))



(do-test "test nth2"
    (progn 
          (defun fun (list n elm) (cond ((listp elm) (equal (nth n list) elm))
						         ( t          (eq     (nth n list) elm))))
          (and (fun (list 1 2 3 4)  3 4)
		     (fun (list (cons 4 5) (cons 6 7) (cons 1 (cons 3 4)) 'p) 2 (cons 1 (cons 3 4)))
			(fun (append (make-list 4 :initial-element 'rah) (make-list 5 :initial-element 'foo)) 4 'foo)
			(fun (caddr '(1 2 (foo0 foo1 foo2 foo3) (bar1 bar2))) 2 'foo2))))



(do-test "test nth - nth may be used to specify a place to setf"
    (let ((a (list 1 2 3 4)))
         (and (= (nth 2 a) 3)
              (setf (nth 2 a) 300)
              (= (nth 2 a) 300)
              (setf (nth 2 a) '(a list))
              (eq (car (nth 2 a)) 'a)
              (rplacd (last a) '(5 6 7 8 9))
              (= (nth 8 a) 9))))


STOP
