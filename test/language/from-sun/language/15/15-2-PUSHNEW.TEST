;; Function To Be Tested: PUSHNEW
;;
;; Source: Guy L Steele's CLTL
;; Section: 15.2 Lists
;; Page: 270
;;
;; Created By:    Kelly Roach
;;
;; Creation Date: June 27,1986
;;
;; Last Update:   June 27,1986
;;			   JULY 1,1986  SYE/ CREATE TEST CASES
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>15-2-PUSHNEW.TEST
;;
;;
;; Syntax:        (PUSHNEW ITEM PLACE &KEY TEST TEST-NOT KEY)
;;
;; Function Description:
;; The form PLACE should be the name of a generalized variable containing a list; ITEM may refer to any Lisp
;; object.  If the item is not already a member of the list (as determined by comparisons using the :test 
;; predicate, which defaults to eql) ,then the ITEM is consed onto the front of the list, and the augmented
;; list is stored back into PLACE and returned ; otherwise the unaugmented list is returned. 
;; 
;; Argument(s):   ITEM - anything
;;                PLACE - a list
;;                TEST - a function
;;                TEST-NOT - a function
;;                KEY - a function
;;
;; Returns:       a list
;;

(do-test "test pushnew - test cases copied from page 270 of CLtL"
    (progn (setq x '(a (b c) d))
		 (and (equal (pushnew 5 (cadr x)) '(5 b c))
			 (equal (pushnew 'b (cadr x)) '(5 b c))
		 )))

(do-test "test pushnew0"
    (and  (progn (setq a ()) (equal (pushnew () a) '(nil)))
		(progn (setq a '(a b)) (and   (equal (pushnew 'c a) '(c a b))
								(equal a '(c a b))
								(equal (pushnew 'c a) '(c a b))
								(equal (push 'c a) '(c c a b))
								(equal (pushnew 'c (cddr a)) '(c a b))
								(equal a '(c c c a b)) ))
		(progn (setq a '(item1 item2 item3 item4))
			  (and (equal (pushnew 'cup (cddddr a)) '(cup))
				  (equal (pushnew 'cup (cdddr a)) '(item4 cup))
				  (equal (pushnew 'knife (cdddr a)) '(knife item4 cup))
				  (equal (pushnew 'item3 (cddr a)) '(item3 knife item4 cup))
				  (equal (pushnew 'milk   (cddr a)) '(milk item3 knife item4 cup))
				  (equal (pushnew 'cup  (cdr a)) '(item2 milk item3 knife item4 cup))
				  (equal (pushnew 'bottle (cdr a)) '(bottle item2 milk item3 knife item4 cup))
				  (equal a '(item1 bottle item2 milk item3 knife item4 cup))
			  ))))

(do-test "test pushnew - with :test/:test-not/:key keywords"
	(and 
		(progn (setq list '(1 "bottle" 2 milk 3 (knife) 4 cup 5 #\a)) 
		  	  (defun fun (x y) (equal list (pushnew x list :test y)))      
	    	  	  (every #'fun '(1.0 "BOTTLE" 3.000  (knife) #\A) '(= equalp equalp equal equalp)))
         ;
	    (progn (setq list '(1 "bottle" 2 milk 3 (knife) 4 cup 5 #\a))
			 (pushnew "Bottle"  list :test #'equal)
			 (pushnew 1.0 list :test #'equal)
			 (pushnew '(knife) list :test #'eq)
			 (pushnew 3.0 list :test #'eq)
			 (equal list  '(3.0 (knife) 1.0 "Bottle" 1 "bottle" 2 milk 3 (knife) 4 cup 5 #\a)))
	    ;;
	    ;;
	    (progn (setq list '(1 2 3 4 5 (6 7 8) 9 10))	
			 (pushnew 12 list :test-not #'(lambda (x y) (or (numberp y) (listp y)) ))
			 (pushnew #\a list :test-not #'(lambda (x y) (characterp #\a)))
			 (pushnew "lucid" (cadddr (cddddr list))  :test-not #'(lambda (x y) t))
			 (equal list '(#\a 12 1 2 3 4 5 ("lucid" 6 7 8) 9 10)))
		;;
		;;
		(progn (setq list '((1111 2222 3333) (4444 5555 6666 )))
		 	  (and (equal (pushnew '(1111) list :key #'car) '((1111 2222 3333) (4444 5555 6666)) )
				  (equal (pushnew '(100 200) (cdr list) :key #'cadr)  '((100 200) (4444 5555 6666)))
				  (equal (pushnew '(1111.0) list :test #'= :key #'car)  
							'((1111 2222 3333) (100 200) (4444 5555 6666)))
				  (equal (pushnew '(1111.0 17) list :test-not #'/= :key #'cadr)
			  			'((1111.0 17) (1111 2222 3333) (100 200) (4444 5555 6666)))
   			  ))
	  )
)
;;
;;
STOP
		
				  
		
			 
    