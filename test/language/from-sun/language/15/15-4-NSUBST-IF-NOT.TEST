;; Function To Be Tested: NSUBST-IF-NOT
;;
;; Source: Guy L Steele's CLTL
;; Section: 15.4 Substitution of Expressions
;; Page: 274
;;
;; Created By:    Kelly Roach , Karin M. Sye
;;
;; Creation Date: June 27,1986
;;
;; Last Update:   AUG. 14,1986
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>15-4-NSUBST-IF-NOT.TEST
;;
;;
;; Syntax:        (NSUBST-IF-NOT NEW TEST TREE &KEY KEY)
;;
;; Function Description:
;; NSUBST is a destructive version of SUBST.  The list structure of
;; TREE is altered by destructively replacing with NEW
;; each leaf of the TREE such that OLD and the leaf
;; satisfy the test.
;; 
;; Argument(s):   NEW - anything
;;                TEST - a function
;;                TREE - a tree
;;                KEY - a function
;;
;; Returns:       a tree
;;


(do-test "test nsubst-if-not 1"
  (and (prog2 (setq a '(1 2 3 (3 2 1) ((2)) (3 (1))))
              (equal (nsubst-if-not
                      88 #'(lambda (x)
                                   (or (not (numberp x))
                                       (not (eq x 2)))) a)
                     '(1 88 3 (3 88 1) ((88)) (3 (1))  )))
       (prog2 (setq a '("one" ("two" . "three") ("four")
                              "five" "six" . "seven"))
              (equal (nsubst-if-not
                      'gotchu #'(lambda (x)
                                        (or (not (stringp x))
                                            (not (find #\r x)))) a)
                     '("one" ("two" . gotchu) (gotchu)
                             "five" "six" . "seven")))
       (prog2 (setq a '(10 13 12 (17 18) ((30 5) 31 4) 40 -5))
              (equal (nsubst-if-not
                      "***"
                      #'(lambda
                         (x)
                         (or (not (listp x) ) 
                             (some #'(lambda (x)
                                             (not (numberp x))) x) 
                             (/= (apply #'+ x) 35) )) a)
                     '(10 13 12 "***" ("***" . "***") . "***")))
       (prog2 (setq a '())
              (equal (nsubst-if-not "April fool" #'consp a) 
                     "April fool"))))

(do-test "test nsubst-if-not   -- with :KEY keyword"
  (and (prog2 (setq a `("sleepy" (sneezy (doc bashful rabbit) jumpy)
                                 "grouchy" dopy snow white))
              (equal (nsubst-if-not
                      #\y #'stringp a
                      :key #'(lambda
                              (x)
                              (if (and (listp x)
                                       (= (list-length x) 3))
                                  (first x)
                                  "dummy" )))
                     '("sleepy" #\y "grouchy" . #\y)))
       (prog2 (setq a '("sleepy" (sneezy (doc bashful rabbit) jumpy)
                                 "grouchy" dopy snow white))	
              (equal (nsubst-if-not
                      '(foo)
                      #'(lambda (x)
                                (find #\s x :test #'char-equal))
                      a 
                      :key #'(lambda (z)
                                     (typecase z (string z)
                                               (null "s")
                                               (symbol (string z))
                                               (t "s"))))
                     '("sleepy" (sneezy ((foo) bashful (foo)) (foo))
                                (foo) (foo)
                                snow (foo))))
       (prog2 (setq a '(a b c (10 3 5 2 5 8) d (3 4 5)))
              (eq (nsubst-if-not
                   'end-of-testing
                   #'(lambda (x)
                             (/= (apply #'- x) -13.0)) a
                   :key #'cadddr)
                  'end-of-testing))))

STOP
