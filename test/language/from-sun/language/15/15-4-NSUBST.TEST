;; Function To Be Tested: NSUBST
;;
;; Source: Guy L Steele's CLTL
;; Section: 15.4 Substitution of Expressions
;; Page: 274
;;
;; Created By:    Kelly Roach , Karin M. Sye
;;
;; Creation Date: June 27,1986
;;
;; Last Update:   Aug. 13,1986
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>15-4-NSUBST.TEST
;;
;;
;; Syntax:        (NSUBST NEW OLD TREE &KEY TEST TEST-NOT KEY)
;;
;; Function Description:
;; NSUBST is a destructive version of SUBST.  The list structure of
;; TREE is altered by destructively replacing with NEW
;; each leaf of the TREE such that OLD and the leaf
;; satisfy the test.
;; 
;; Argument(s):   NEW - anything
;;                OLD - anything
;;                TREE - a tree
;;                TEST - a function
;;                TEST-NOT - a function
;;                KEY - a function
;;
;; Returns:       a tree
;;
(DO-TEST "TEST NSUBST - test cases copied from page 273 of CLtL"
	(and	(equal (NSUBST 'TEMPEST 'HURRICANE '(SHAKESPEARE WROTE (THE HURRICANE)))
			 '(SHAKESPEARE WROTE (THE TEMPEST)))
		(equal (NSUBST 'FOO 'NIL '(SHAKESPEARE WROTE (TWELFTH NIGHT)))
			 '(SHAKESPEARE WROTE (TWELFTH NIGHT . FOO) . FOO))
		(equal (NSUBST '(A . CONS) '(OLD . PAIR) '((OLD . SPICE) ((OLD . SHOES) OLD . PAIR) (OLD . PAIR)) 
					:TEST #'EQUAL)
			 '((OLD . SPICE) ((OLD . SHOES) A . CONS) (A . CONS)))
	)
)

(do-test "test nsubst 1"
	(and 	(prog2	(setq aa '(allen (apple) apply ((apple) apple1) apple2))
				(equal (nsubst 'orange 'apple aa) '(allen (orange) apply ((orange) apple1) apple2))
		)
		(prog2	(setq aa '(twinkle (nil t) (twinkle) () little (star) "!"))
				(equal (nsubst 999 nil aa) 
						 '(twinkle (999 t . 999) (twinkle . 999) 999 little (star . 999) "!" . 999))
		)
		(prog2	(setq aa '(#\A #\a '(#\G (#\o)) ((#\b) #\a) (#\N (#\a)) ((#\n) #\a)))
				(equal (nsubst  'apple #\a aa) 
						 '(#\A apple '(#\G (#\o)) ((#\b) apple) (#\N (apple)) ((#\n) apple)))		
		)
	)
)

(do-test "test nsubst - with :TEST keyword"
	(and	(prog2	(setq aa '("silent" "night" ("holy" ("night")) (("last" . "night"))  ("lonely") "night"))
				(equal	(nsubst "afternoon" "night" aa :test #'equal)
						  '("silent" "afternoon" ("holy" ("afternoon")) (("last" . "afternoon"))  ("lonely") "afternoon"))
		)
		(prog2	(setq aa '((1 3 5.0) ((1.0 3) (1.0 3.0 5.0)) 1 3 5))
				(equal	(nsubst '(11.1 22.2) '(1 3.0 5.0) aa
								 :test #'(lambda (x y)
										(and (listp y)
											(= (list-length x) (list-length y))
											(every #'(lambda (m n) (and (numberp n) (= m n)))  x y))))
							'((11.1 22.2) ((1.0 3) (11.1 22.2)) 11.1 22.2))
		)
		(prog2	(setq aa  '(20 77 45 (60) 5 0.2 ((30)) (39) 10 8 35))
				(equal	(nsubst 44 30 aa :test #'(lambda (x y) (and (numberp y) (>= x y)) )) 
							'(44 77 45 (60) 44 44 ((44)) (39) 44 44 35))
		)
	)
)

(do-test "test nsubst  - with :TEST-NOT keyword"
	(and	(prog2 (setq aa '((1  2) (2 3 4) (4 ((5))) (7 8 (9))  ))
			  (equal (nsubst '(foo) 'dumy aa :test-not #'
											(lambda (x y) 
												(and (listp y) (= (list-length y) 4))  ))
						 '((foo) foo) )
		)
		(prog2 (setq aa '((a z) (y x) (m n) (b c)))
			  (equal (nsubst "foo" '(a b) aa :test-not #'intersection) "foo")
		)
		(prog2 (setq aa '(no (sense) ((no)) feelings))
			  (equal (nsubst 'foo 'dumy aa :test-not #'(lambda (x y) (not (atom y))))
						'(foo (foo . foo) ((foo . foo) . foo) foo . foo))
		)
	)
)

(do-test "test nsubst - with :KEY keyword"
	(and	(prog2	(setq aa '((end2 end1) ((end) end)))
				(equal	(nsubst 'zero '(end) aa :test #'equal :key #'(lambda (x) (if (listp x) (last  x))))
							'((end2 end1) zero))
		)
		(prog2	(setq aa '(13.0 ((2) 13.0 40) (26 (13.0) 39) ((2 4) 13 28)))
				(equal	(nsubst 33 13 aa :test #'equalp :key #'(lambda (x) (if (consp x) (second x))))
							'(13.0 33 (26 (13.0) 39) 33))
		)
		(progn	(setq aa '((a b) a (a c) b c (d a)))
				(setq bb '((a b) d (a c) b c (d a)))
				(and (equal	(nsubst 'w 'a aa :key #'(lambda (x) (if (consp x) (first x))))
							'(w . w))
					(equal	(nsubst 'w 'a bb :key #'(lambda (x) (if (consp x) (first x))))
							'(w d w b c (d . w)))
				)
		)
	)
)						
STOP
