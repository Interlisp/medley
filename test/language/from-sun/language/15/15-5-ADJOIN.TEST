;; Function To Be Tested: ADJOIN
;;
;; Source: Guy L Steele's CLTL
;; Section: 15.5 Using Lists as Sets
;; Page: 276
;;
;; Created By:    Kelly Roach
;;
;; Creation Date: June 27,1986
;;
;; Last Update:   June 27,1986
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>15-5-ADJOIN.TEST
;;
;;
;; Syntax:        (ADJOIN ITEM LIST &KEY TEST TEST-NOT KEY)
;;
;; Function Description:
;; ADJOIN is used to add an element to a set, provided that
;; it is not already a member.  The equality test defaults to EQL.
;; 
;;     (ADJOIN ITEM LIST) = (IF (MEMBER ITEM LIST) LIST (CONS ITEM LIST))
;;     
;; In general, the test may be any predicate; the ITEM is added to the
;; list only if there is no element of the list that ``satisfies the
;; test.''
;; 
;; ADJOIN deviates from the usual rules described in chapter
;; for the treatment of arguments named ITEM and :KEY.
;; If a :KEY function is specified, it is applied to ITEM
;; as well as to each element of the list.  The rationale is that
;; if the ITEM is not yet in the list, it soon will be, and so
;; the test is more properly viewed as being between two elements
;; rather than between a separate ITEM and an element.
;; 
;;     (ADJOIN ITEM LIST :KEY FN)
;;       = (IF (MEMBER (FN ITEM) LIST :KEY FN) LIST (CONS ITEM LIST))
;;     
;; See macro PUSHNEW.
;; 
;; Argument(s):   ITEM - anything
;;                LIST - a list
;;                TEST - a function
;;                TEST-NOT - a function
;;                KEY - a function
;;
;; Returns:       a pure list
;;

(DO-TEST "ADJOIN TEST 1" (EQUAL (ADJOIN (QUOTE (1 2))
                                       (QUOTE ((1 2)
                                               (3 4)))
                                       :TEST
                                       (QUOTE EQUAL))
                                (QUOTE ((1 2)
                                        (3 4))))
       (EQUAL (ADJOIN (QUOTE (1 2))
                     (QUOTE ((3 4)))
                     :TEST
                     (QUOTE EQUAL))
              (QUOTE ((1 2)
                      (3 4))))
       (EQUAL (ADJOIN (QUOTE (1 2))
                     (QUOTE ((1 2)
                             (3 4)))
                     :TEST-NOT
                     (QUOTE EQUAL))
              (QUOTE ((1 2)
                      (3 4))))
       (EQUAL (ADJOIN (QUOTE (1 2))
                     (QUOTE ((3 4)))
                     :TEST-NOT
                     (QUOTE EQUAL))
              (QUOTE ((3 4))))
       (EQUAL (ADJOIN (QUOTE (1 2))
                     (QUOTE ((3 4)
                             (1 2)
                             (2 1)
                             (3 4)))
                     :TEST
                     (QUOTE EQUAL))
              (QUOTE ((3 4)
                      (1 2)
                      (2 1)
                      (3 4))))
       (EQUAL (ADJOIN (QUOTE (1 2))
                     NIL :TEST-NOT (QUOTE EQUAL))
              (QUOTE ((1 2))))
       (EQUAL (ADJOIN (QUOTE (1 2))
                     NIL :TEST (QUOTE EQUAL))
              (QUOTE ((1 2))))
       (EQUAL (ADJOIN (QUOTE (1 2))
                     NIL :TEST (QUOTE EQL))
              (QUOTE ((1 2))))
       (EQUAL (ADJOIN (QUOTE (1 2))
                     (QUOTE ((1 2)))
                     :TEST
                     (QUOTE EQL))
              (QUOTE ((1 2)
                      (1 2)))))

STOP
