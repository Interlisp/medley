;; Function To Be Tested: INTERSECTION
;;
;; Source: Guy L Steele's CLTL
;; Section: 15.5 Using Lists as Sets
;; Page: 277
;;
;; Created By:    Kelly Roach , Karin M. Sye
;;
;; Creation Date: June 27,1986
;;
;; Last Update:   June 28,1986
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>15-5-INTERSECTION.TEST
;;
;;
;; Syntax:        (INTERSECTION LIST1 LIST2 &KEY TEST TEST-NOT KEY)
;;
;; Function Description:
;; INTERSECTION takes two lists and returns a new list containing
;; everything that is an element of both argument lists.
;; If either list has duplicate entries, the redundant entries
;; may or may not appear in the result.
;; For example:
;; 
;;     (INTERSECTION '(A B C) '(F A D)) => (A)
;;     
;; There is no guarantee that the order of elements in the result will
;; reflect the ordering of the arguments in any particular way.
;; The implementation is therefore free to use any of a variety of strategies.
;; The result list may share cells with, or be EQ to, either of the arguments
;; if appropriate.
;; 
;; In general, the test may be any predicate, and the intersection operation
;; may be described as follows.  For all possible ordered pairs consisting of
;; one element from LIST1 and one element from LIST2, the test is
;; used to determine whether they ``match.''  For every matching pair,
;; exactly one of the two elements of the pair will be put in the result.
;; No element from either list appears in the result that does not match
;; an element from the other list.
;; All this is very general, but probably
;; not particularly useful unless the test is an equivalence relation.
;; 
;; NINTERSECTION is the destructive version of INTERSECTION.
;; It performs the same operation, but may destroy LIST1
;; using its cells to construct the result.  (The argument LIST2
;; is NOT destroyed.)
;; 
;; Argument(s):   LIST1 - a pure list
;;                LIST2 - a pure list
;;                TEST - a function
;;                TEST-NOT - a function
;;                KEY - a function
;;
;; Returns:       a pure list
;;



(DO-TEST "TEST INTERSECTION - test case copied from page 277 of CLtL"
  (prog2 (setq aa '(a b c)
               bb '(f a d)
               cc (intersection aa bb))
         (and (equal cc '(a))
              (equal aa '(a b c))
              (equal bb '(f a d)))))

(do-test "test intersection 1"
  (and (prog2 (setq aa '(1 2 3 4 5)
                    bb '(4 5 1 8 9)
                    cc (intersection aa bb))
              (and (every #'equal (list aa bb)
                          '((1 2 3 4 5) (4 5 1 8 9)))
                   (= (list-length cc) 3)
                   (every #'(lambda (x)
                                    (member x cc :test #'eq))
                          '(1 5 4))))
       (prog2 (setq aa '(a b c d)
                    bb '(x y (z))
                    cc (intersection bb aa))
              (and (equal aa '(a b c d))
                   (equal bb '(x y (z)))
                   (eq cc nil)))
       (let* ((aa '(#\a  #\b))
              (bb '(#\B #\a))
              (cc (intersection aa bb :test #'equalp)))
             (and (equal aa '(#\a  #\b))
                  (equal bb '(#\B #\a))
                  (member #\a cc) 
                  (member #\b cc :test #'equalp)
                  (= (list-length cc ) 2)))))

(do-test "test intersection 2"
  (progn (setq aa '((Kathy 100) (Karen 50) (Susan 80))	 
               bb '((ken 85) (Henry 70) (kathy 96))
               cc (intersection aa bb :test #'eq :key #'car ))
         (and (equal aa '((Kathy 100) (Karen 50) (Susan 80)))
              (equal bb '((ken 85) (Henry 70) (kathy 96)))
              (or (equal cc '((Kathy 100)))
                  (equal cc '((Kathy 96)))))))

(do-test "test intersection 3"
  (progn (setq aa '((10 20 120) (30 60 360.0) (40 50 450))
               bb '((90.0 100 360) (30.0 20 40.0) (50 40 450.0)) 
               cc (intersection aa bb :test #'= :key #'third))
         (and (equal aa '((10 20 120) (30 60 360.0) (40 50 450)))
              (equal bb '((90.0 100 360) (30.0 20 40.0) (50 40 450.0)))
              (and (= (list-length cc ) 2) 
                   (every #'(lambda (x)
                                    (member x cc :test #'= :key #'third))
                          '(360 450))))))

(do-test "test intersection 4"
  (and (progn (setq aa '(1 "h" #\T (2 . 3) (list) "st")
                    bb '((2 . 3) #\4 aatom  300 #\t "St")
                    cc (intersection
                        aa bb
                        :test-not #'(lambda (x y)
                                            (not (equal x y))) ))
              (and (equal aa '(1 "h" #\T (2 . 3) (list) "st"))
                   (equal bb '((2 . 3) #\4 aatom  300 #\t "St"))
                   (equal cc '((2 . 3)))))
       (progn (setq aa '(1 "h" #\T (2 . 3) (list) "st")
                    bb '((2 . 3) #\4 aatom  300 #\t "St")
                    cc (intersection
                        aa bb
                        :test-not #'(lambda (x y)
                                            (not (equalp x y))) ))
              (and (every #'(lambda (x)
                                    (member x cc :test #'equalp))
                          '((2 . 3) #\t "St"))
                   (= (list-length cc) 3)))
       (progn (setq aa '((1 3 5) (2 6 7) (10 20))
                    bb '((10 2 3) ( 20 5 1) (  2 4 1))
                    cc (intersection
                        aa bb
                        :test-not #'(lambda ( x y)
                                            (/= (apply #'+ x)
                                                (apply #'+ y)))))
              (or (equal cc '((2 6 7))) (equal cc '((10 2 3)))))
       (progn (setq aa '("banana" "papaya" "tomamo")
                    bb '("orange" "pineapple" "watermelon")
                    cc (intersection
                        aa bb
                        :test
                        #'(lambda (x y)
                                  (car (mapcar #'find '(#\m #\a )
                                               (list x y))))))
              (and (equal aa '("banana" "papaya" "tomamo"))
                   (equal bb '("orange" "pineapple" "watermelon"))
                   (some #'(lambda (x) (equal cc x))
                         '(("orange")
                           ("tomamo")
                           ("pineapple")
                           ("watermelon")))))))

STOP
