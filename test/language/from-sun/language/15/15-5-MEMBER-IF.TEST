;; Function To Be Tested: MEMBER-IF
;;
;; Source: Guy L Steele's CLTL
;; Section: 15.5 Using Lists as Sets
;; Page: 275
;;
;; Created By:    Kelly Roach , Karin Sye
;;
;; Creation Date: June 27,1986
;;
;; Last Update:   July 23, 1986
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>15-5-MEMBER-IF.TEST
;;
;;
;; Syntax:        (MEMBER-IF TEST LIST &KEY KEY)
;;
;; Function Description:
;; The LIST is searched for an element that satisfies the test.
;; If none is found, NIL is returned;
;; otherwise, the tail of LIST beginning
;; with the first element that satisfied the test is returned.
;; The LIST is searched on the top level only. 
;; These functions are suitable for use as predicates.
;; For example:
;; 
;;     (MEMBER 'SNERD '(A B C D)) => NIL
;;     (MEMBER-IF #'NUMBERP '(A #\SPACE 5/3 FOO)) => (5/3 FOO)
;;     (MEMBER 'A '(G (A Y) C A D E A F)) => (A D E A F)
;;     
;; Note, in the last example,
;; that the value returned by MEMBER is EQ to the portion of the list
;; beginning with A.
;; Thus RPLACA on the result of MEMBER may be used
;; to alter the found list element,
;; if a check is first made that MEMBER did not return NIL.
;; 
;; See also function FIND and function POSITION.
;; Compatibility note: In Maclisp, the MEMBER function uses
;; an EQUAL comparison rather than EQL, which is the default
;; test for MEMBER in Common Lisp.  Where in Maclisp one would write
;; (MEMBER X Y), in Common Lisp one must write (MEMBER X Y :TEST #'EQUAL)
;; to get a completely identical effect.  Similarly, one can get the
;; precise effect, and no more, of the Maclisp (MEMQ X Y)
;; by writing in Common Lisp (MEMBER X Y :TEST #'EQ).
;; 
;; Argument(s):   TEST - a function
;;                LIST - a pure list
;;                KEY - a function
;;
;; Returns:       a pure list
;;


(do-test "test member-if - test case copied from page 275 of CLtL"
	(equal (MEMBER-IF #'NUMBERP '(A #\SPACE #.(/ 5 3) FOO)) '(#.(/ 5 3) FOO))
)

(do-test "test member-if 0"
	(and	(equal (member-if #'integerp '(1.0 3.4 5.6 8 9.0 10)) '(8 9.0 10))
		(equal (member-if #'floatp   '(1 2 3.4 5.6 8 9.0 10)) '(3.4 5.6 8 9.0 10))
		(equal (member-if #'characterp '(a b c (#\d) ((#\e)) #\f  g "h"))  '(#\f  g "h"))
		(equal (member-if #'stringp  '(a b c (#\d) ((#\e)) #\f  g "h")) '("h"))
		(equal (member-if #'null  '( () 1 2 t nil))  '( () 1 2 t nil))
		(equal (member-if #'symbolp '(() 1 2 t nil)) '(() 1 2 t nil))
		(equal (member-if #'atom  '((nil) 1 2 t nil)) '(1 2 t nil))
		(equal (member-if #'consp   '(t nil () (weight 100))) '((weight 100)))
		(equal (member-if #'listp  '(t nil () (weight 100))) '(nil () (weight 100)))
		(equal (member-if #'numberp '((1 2) ((3 4) 5) '6 "7")) nil)
	)
)

(do-test "test member-if 1"
	(and	(equal (member-if #'integerp '((1.0 3.4) (5.6 8) (10 . 12)) :key #'car)   '((10 . 12)))
		(equal (member-if #'null     '((a b d e) (1 2 3) (10 20 (30 40) 50))  :key #'fourth)
			 '((1 2 3) (10 20 (30 40) 50)))
		(equal (member-if #'listp    '("a" t  #(1 2 3 4) 'star (8 9 10)) :key #'identity)
			 '('star (8 9 10)))
		(equal (member-if #'stringp  '( ((1 2 3) "a" "b") ((1 3 "a") "b" 2 "c")  (("c" "a" "b") 1 2 3)) :jey #'cadar)
			 '((("c" "a" "b") 1 2 3)) )
	)
)

(do-test "test member-if 2"
	(and	(equal (member-if #'(lambda (x) (and (evenp x) (>= x 99))) '(99 98 2 4 200 100 197))
			 '(ò00 100 197))
		(equal (member-if #'(lambda (x) (and (evenp x) (>= x 99))) '(99 98 2 4 200 100 197) 
					:key #'(lambda (x) (1+ x)))
			 '(99 98 2 4 200 100 197))
		(equal (member-if #'(lambda (x) (and (listp x) (= (list-length  x) 3) (string= (first x) "July")))
			'()

		(mac '(a b c (d e) (f g) "h" ((i) (((ip)))) (j k) (l . l) m  n o) 'm )

		(mac '((a b) ((c d) e f) (g (h) i) (j (k)) ((l m)n) 
			  ((o p) (q r) s) ((((t))