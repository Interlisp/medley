;; Function To Be Tested: NSET-EXCLUSIVE-OR
;;
;; Source: Guy L Steele's CLTL
;; Section: 15.5 Using Lists as Sets
;; Page: 278
;;
;; Created By:    Kelly Roach , Karin Sye
;;
;; Creation Date: June 27,1986
;;
;; Last Update:   October 23,1986
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>15-5-NSET-EXCLUSIVE-OR.TEST
;;
;; Modification: Changed calls to COPY (not a CML fn) to COPY-TREE.  With
;; packages, COPY in LISP does not exist.
;;
;; Syntax:        (NSET-EXCLUSIVE-OR LIST1 LIST2 &KEY TEST TEST-NOT KEY)
;;
;; Function Description:
;; SET-EXCLUSIVE-OR returns a list of elements that appear
;; in exactly one of LIST1 and LIST2.
;; This operation is not destructive.
;; 
;; There is no guarantee that the order of elements in the result will
;; reflect the ordering of the arguments in any particular way.
;; The implementation is therefore free to use any of a variety of strategies.
;; The result list may share cells with, or be EQ to, either of the arguments
;; if appropriate.
;; 
;; In general, the test may be any predicate, and the set-exclusive-or operation
;; may be described as follows.  For all possible ordered pairs consisting of
;; one element from LIST1 and one element from LIST2, the test is
;; used to determine whether they ``match.''  The result contains precisely
;; those elements of LIST1 and LIST2 that appear in no matching pair.
;; 
;; NSET-EXCLUSIVE-OR is the destructive version of SET-EXCLUSIVE-OR.
;; Both lists may be destroyed in producing the result.
;; 
;; Argument(s):   LIST1 - a pure list
;;                LIST2 - a pure list
;;                TEST - a function
;;                TEST-NOT - a function
;;                KEY - a function
;;
;; Returns:       a pure list
;;

(do-test-group ( test-nset-exclusive-or-group
					:before (progn (defmacro mac (x y)  `(every #'(lambda (z) (member z ,y :test #'equal)) ,x))))

(DO-TEST "TEST NSET-EXCLUSIVE-OR0"
	(AND 
       (MAC (NSET-EXCLUSIVE-OR '(A B C X C D)
                         '(C C B A))
              '(D X))
       (MAC (NSET-EXCLUSIVE-OR '(D X D Z D F G F)
                         '(C C B A))
              '(A B C C F G F D Z D X D))
       (MAC (NSET-EXCLUSIVE-OR '(Z A E D B E F)
                         '(C C B A))
              '(C C F E D E Z))
       (MAC (NSET-EXCLUSIVE-OR '(F C Z E)
                         '(D X F D D F G))
              '(G D D X D E Z C))
       (MAC (NSET-EXCLUSIVE-OR '(D Z E E)
                         '(C F A E G C))
              '(C G A F C Z D))
       (MAC (NSET-EXCLUSIVE-OR '(Z A E D B E F)
                         '(Y F B Z Y F X E))
              '(X Y Y D A))))

(DO-TEST "NSET-EXCLUSIVE-OR TEST 2"
	(AND 
       (MAC (NSET-EXCLUSIVE-OR '(Y F B Z Y F X E)
                         '(D Z E E))
              '(D X F Y B F Y))
       (MAC (NSET-EXCLUSIVE-OR '(C B Z B B D Y B E)
                         '(Z C Y B E Z D B D))
              NIL)
       (MAC (NSET-EXCLUSIVE-OR '(F X G Z E X F A C Z)
                         '(Z C Y B E Z D B D))
              '(D B D B Y A F X G X F))
       (MAC (NSET-EXCLUSIVE-OR '(C B Z B B D Y B E)
                         '(D X D Z D F G F))
              '(F G F X E B Y B B B C))
       (MAC (NSET-EXCLUSIVE-OR '(C C B A)
                         '(A B C X C D))
              '(D X))
       (MAC (NSET-EXCLUSIVE-OR '(C F A E G C)
                         '(Z C Y B E Z D B D))
              '(D B D Z B Y Z G A F))))

(DO-TEST "NSET-EXCLUSIVE-OR TEST 3"
	(AND 
       (MAC (NSET-EXCLUSIVE-OR '(ZORK)
                         '(BAR QIX BAZ BAZ MEEF MEEF MEEF QIX QIX))
              '(QIX QIX MEEF MEEF MEEF BAZ BAZ QIX BAR ZORK))
       (MAC (NSET-EXCLUSIVE-OR '(MEEF MEEF QIX BAZ CATOR)
                         '(BAR QIX BAZ BAZ MEEF MEEF MEEF QIX QIX))
              '(BAR CATOR))
       (MAC (NSET-EXCLUSIVE-OR '(FOO QIX MORY PERTY ZORK QIX BAR 
                                          BAR BAZ)
                         '(BAR QIX BAZ BAZ MEEF MEEF MEEF QIX QIX))
              '(MEEF MEEF MEEF ZORK PERTY MORY FOO))
       (MAC (NSET-EXCLUSIVE-OR '(ZORK)
                         '(PERTY BAZ ZORK MEEF BAR PERTY ZORK))
              '(PERTY BAR MEEF BAZ PERTY))
       (MAC (NSET-EXCLUSIVE-OR '(ZORK)
                         '(PERTY BAZ ZORK MEEF BAR PERTY ZORK))
              '(PERTY BAR MEEF BAZ PERTY))
       (MAC (NSET-EXCLUSIVE-OR '(FOO QIX MORY PERTY ZORK QIX BAR 
                                          BAR BAZ)
                         '(MORY BAR BAR FOO CATOR CATOR))
              '(CATOR CATOR BAZ QIX ZORK PERTY QIX))))

(DO-TEST "NSET-EXCLUSIVE-OR TEST 4" 
	(AND 
	
       (MAC (NSET-EXCLUSIVE-OR '(MEEF)
                         '(PERTY QIX CATOR))
              '(CATOR QIX PERTY MEEF))
       (MAC (NSET-EXCLUSIVE-OR '(MORY BAR BAR FOO CATOR CATOR)
                         '(QIX FOO))
              '(QIX CATOR CATOR BAR BAR MORY))
       (MAC (NSET-EXCLUSIVE-OR '(BAR QIX BAZ BAZ MEEF MEEF MEEF 
                                          QIX QIX)
                         '(PERTY MORY ZORK QIX MEEF MEEF MEEF MORY 
                                 BAZ))
              '(MORY ZORK MORY PERTY BAR))
       (MAC (NSET-EXCLUSIVE-OR '(BAR QIX BAZ BAZ MEEF MEEF MEEF 
                                          QIX QIX)
                         '(FOO QIX MORY PERTY ZORK QIX BAR BAR BAZ))
              '(ZORK PERTY MORY FOO MEEF MEEF MEEF))
       (MAC (NSET-EXCLUSIVE-OR '(BAR PERTY BAR)
                         '(QIX FOO))
              '(FOO QIX BAR PERTY BAR))))

(DO-TEST "NSET-EXCLUSIVE-OR TEST 5"
	(AND 
       (MAC (NSET-EXCLUSIVE-OR '(8 5 2 9 2 6 1 2)
                         '(4 5 1 10 5 7 7 10))
              '(10 7 7 10 4 2 6 2 9 2 8))
       (MAC (NSET-EXCLUSIVE-OR '(3 4)
                         '(6 4 8 4 7 3 2 9))
              '(9 2 7 8 6))
       (MAC (NSET-EXCLUSIVE-OR '(8 5 2 9 2 6 1 2)
                         '(6 4 8 4 7 3 2 9))
              '(3 7 4 4 1 5))
       (MAC (NSET-EXCLUSIVE-OR '(2 7 2)
                         '(4))
              '(4 2 7 2))
       (MAC (NSET-EXCLUSIVE-OR '(7 3 4 10 8)
                         '(2 9 4))
              '(9 2 8 10 3 7))
       (MAC (NSET-EXCLUSIVE-OR '(8 2)
                         '(4 5 1 10 5 7 7 10))
              '(10 7 7 5 10 1 5 4 2 8))))

(DO-TEST "NSET-EXCLUSIVE-OR TEST 6"
	(AND 
       (MAC (NSET-EXCLUSIVE-OR '(4 5 1 10 5 7 7 10)
                         '(8 5 2 9 2 6 1 2))
              '(2 6 2 9 2 8 10 7 7 10 4))
       (MAC (NSET-EXCLUSIVE-OR '(4 6 2 8 8)
                         '(2 7 2))
              '(7 8 8 6 4))
       (MAC (NSET-EXCLUSIVE-OR '(6 4 8 4 7 3 2 9)
                         '(2 5 8 2 7 2 7 6 3))
              '(5 9 4 4))
       (MAC (NSET-EXCLUSIVE-OR '(4)
                         '(3 4))
              '(3))
       (MAC (NSET-EXCLUSIVE-OR '(4 6 2 8 8)
                         '(2 5 8 2 7 2 7 6 3))
              '(3 7 7 5 4))
       (MAC (NSET-EXCLUSIVE-OR '(2 9 4)
                         '(2 7 2))
              '(7 4 9))))

(do-test "test nset-exclusive-or - with :TEST keyword"
  (and (progn (setq aa '(2 4 #\a #\z 8 10)
                    aaa (copy-tree aa)
                    bb '(#\Z 10.0 4 2)
                    bbb (copy-tree bb)
                    cc (nset-exclusive-or aa bb)
                    dd (nset-exclusive-or aaa bbb :test #'equalp))
              (and (mac cc '( 10.0 #\Z 10 8 #\z #\a))
                   (mac dd '(8 #\a))))
       (progn (setq aa '("a" "b" "c" "d" "e" "F" "G" "I" "J")
                    aaaa (copy-tree aa)
                    aaa (copy-tree aa)
                    bb '("A" "B" "c" "D" "E" "f" "G")
                    bbbb (copy-tree bb)
                    bbb (copy-tree bb)
                    cc (nset-exclusive-or aa bb)
                    dd (nset-exclusive-or aaa bbb :test #'string=)
                    ee (nset-exclusive-or aaaa bbbb :test #'string-equal))
              (and (mac cc '("G" "f" "E" "D" "c" "B" "A" "J" "I" "G" "F"
                             "e" "d" "c" "b" "a"))
                   (mac dd '("f" "E" "D" "B" "A" "J" "I" "F" "e" "d" "b" "a"))
                   (mac ee '("J" "I"))))))

(do-test "test nset-exclusive-or - with :TEST-NOT keyword"
  (and (progn (setq aa '((1 2 3) (a b) (x y z (g)))  
                    bb '(nil (nil nil nil)
                             ((t t) (t)) (t nil (t . nil) t)) 
                    cc (nset-exclusive-or
                        aa bb :test-not #'(lambda (x y)
                                                  (/= (list-length x)
                                                      (list-length y)))))
              (equal cc '(nil)))
       (progn (setq aa '("set" "difference" "exclusive" "not")
                    bb '("south" "xoy") 
                    cc (nset-exclusive-or
                        bb aa :test-not #'(lambda (a b)
                                                  (/= (length a)
                                                      (length b)))))
              (mac cc '("exclusive" "difference" "south")))))

(do-test "test nset-exclusive-or  - with :KEY keyword"
  (progn (setq aa '((a 10) (b 20) (s 80) (t 100))
               bb '((S 160) (x 100) (a 30) (y 45))
               aaa (copy-tree aa)
               bbb (copy-tree bb)
               cc (nset-exclusive-or bb aa :key #'car)
               dd (nset-exclusive-or bbb aaa :key #'cadr))
         (and (mac cc '((t 100) (b 20) (y 45) (x 100)))
              (mac dd '((s 80)  (b 20) (a 10) (y 45) (a 30) (S 160))))))

)

STOP



  
