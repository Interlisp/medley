;; Function To Be Tested: SET-DIFFERENCE
;;
;; Source: Guy L Steele's CLTL
;; Section: 15.5 Using Lists as Sets
;; Page: 278
;;
;; Created By:    Kelly Roach , Karin M. Sye
;;
;; Creation Date: June 27,1986
;;
;; Last Update:   July 28,1986
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>15-5-SET-DIFFERENCE.TEST
;;
;;
;; Syntax:        (SET-DIFFERENCE LIST1 LIST2 &KEY TEST TEST-NOT KEY)
;;
;; Function Description:
;; SET-DIFFERENCE returns a list of elements of LIST1
;; that do not appear in LIST2.  This operation is
;; not destructive.
;; 
;; There is no guarantee that the order of elements in the result will
;; reflect the ordering of the arguments in any particular way.
;; The implementation is therefore free to use any of a variety of strategies.
;; The result list may share cells with, or be EQ to, either of the arguments
;; if appropriate.
;; 
;; In general, the test may be any predicate, and the set difference operation
;; may be described as follows.  For all possible ordered pairs consisting of
;; one element from LIST1 and one element from LIST2, the test is
;; used to determine whether they ``match.''  An element of LIST1
;; appears in the result if and only if it does not match any element
;; of LIST2.  This is very general and permits interesting applications.
;; For example, one can remove from a list of strings all those strings
;; containing one of a given list characters:
;; 
;;     ;; REMOVE ALL FLAVOR NAMES THAT CONTAIN "C" OR "W".
;;     (SET-DIFFERENCE '("STRAWBERRY" "CHOCOLATE" "BANANA"
;;     		  "LEMON" "PISTACHIO" "RHUBARB")
;;     		'(#\C #\W)
;;     		:TEST
;;     		#'(LAMBDA (S C) (FIND C S)))
;; 
;;       => ("BANANA" "RHUBARB" "LEMON")	;One possible ordering.
;;     
;; 
;; NSET-DIFFERENCE is the destructive version of SET-DIFFERENCE.
;; This operation may destroy LIST1.
;; 
;; Compatibility note: An approximately equivalent Interlisp function
;; is LDIFFERENCE.
;; 
;; Argument(s):   LIST1 - a pure list
;;                LIST2 - a pure list
;;                TEST - a function
;;                TEST-NOT - a function
;;                KEY - a function
;;
;; Returns:       a pure list
;;
(do-test-group ( test-set-exclusive-or-group
					:before (progn (defmacro mac (x y)  `(every #'(lambda (z) (member z ,y :test #'equal)) ,x))))

(DO-TEST "SET-DIFFERENCE TEST 1"
    (and
	  (mac (SET-DIFFERENCE '(A B C X C D)
                         '(C C B A))
              '(D X))
       (mac (SET-DIFFERENCE '(D X D Z D F G F)
                         '(C C B A))
              '(F G F D Z D X D))
       (mac (SET-DIFFERENCE '(Z A E D B E F)
                         '(C C B A))
              '(F E D E Z))
       (mac (SET-DIFFERENCE '(F C Z E)
                         '(D X F D D F G))
              '(E Z C))
       (mac (SET-DIFFERENCE '(D Z E E)
                         '(C F A E G C))
              '(Z D))
       (mac (SET-DIFFERENCE '(Z A E D B E F)
                         '(Y F B Z Y F X E))
              '(D A))))

(DO-TEST "SET-DIFFERENCE TEST 2"
	(and
       (mac (SET-DIFFERENCE '(Y F B Z Y F X E)
                         '(D Z E E))
              '(X F Y B F Y))
       (mac (SET-DIFFERENCE '(C B Z B B D Y B E)
                         '(Z C Y B E Z D B D))
              NIL)
       (mac (SET-DIFFERENCE '(F X G Z E X F A C Z)
                         '(Z C Y B E Z D B D))
              '(A F X G X F))
       (mac (SET-DIFFERENCE '(C B Z B B D Y B E)
                         '(D X D Z D F G F))
              '(E B Y B B B C))
       (mac (SET-DIFFERENCE '(C C B A)
                         '(A B C X C D))
              NIL)
       (mac (SET-DIFFERENCE '(C F A E G C)
                         '(Z C Y B E Z D B D))
              '(G A F))))

(DO-TEST "SET-DIFFERENCE TEST 3"
	(and
       (mac (SET-DIFFERENCE '(ZORK)
                         '(BAR QIX BAZ BAZ MEEF MEEF MEEF QIX QIX))
              '(ZORK))
       (mac (SET-DIFFERENCE '(MEEF MEEF QIX BAZ CATOR)
                         '(BAR QIX BAZ BAZ MEEF MEEF MEEF QIX QIX))
              '(CATOR))
       (mac (SET-DIFFERENCE '(FOO QIX MORY PERTY ZORK QIX BAR 
                                        BAR BAZ)
                         '(BAR QIX BAZ BAZ MEEF MEEF MEEF QIX QIX))
              '(ZORK PERTY MORY FOO))
       (mac (SET-DIFFERENCE '(ZORK)
                         '(PERTY BAZ ZORK MEEF BAR PERTY ZORK))
              NIL)
       (mac (SET-DIFFERENCE '(ZORK)
                         '(PERTY BAZ ZORK MEEF BAR PERTY ZORK))
              NIL)
       (mac (SET-DIFFERENCE '(FOO QIX MORY PERTY ZORK QIX BAR 
                                        BAR BAZ)
                         '(MORY BAR BAR FOO CATOR CATOR))
              '(BAZ QIX ZORK PERTY QIX))))

(DO-TEST "SET-DIFFERENCE TEST 4" 
	(and
	  (mac (SET-DIFFERENCE '(MEEF) '(QIX FOO)) '(MEEF))
       (mac (SET-DIFFERENCE '(MEEF)
                         '(PERTY QIX CATOR))
              '(MEEF))
       (mac (SET-DIFFERENCE '(MORY BAR BAR FOO CATOR CATOR)
                         '(QIX FOO))
              '(CATOR CATOR BAR BAR MORY))
       (mac (SET-DIFFERENCE '(BAR QIX BAZ BAZ MEEF MEEF MEEF 
                                        QIX QIX)
                         '(PERTY MORY ZORK QIX MEEF MEEF MEEF MORY 
                                 BAZ))
              '(BAR))
       (mac (SET-DIFFERENCE '(BAR QIX BAZ BAZ MEEF MEEF MEEF 
                                        QIX QIX)
                         '(FOO QIX MORY PERTY ZORK QIX BAR BAR BAZ))
              '(MEEF MEEF MEEF))
       (mac (SET-DIFFERENCE '(BAR PERTY BAR)
                         '(QIX FOO))
              '(BAR PERTY BAR))))

(DO-TEST "SET-DIFFERENCE TEST 5"
	(and
       (mac (SET-DIFFERENCE '(8 5 2 9 2 6 1 2)
                         '(4 5 1 10 5 7 7 10))
              '(2 6 2 9 2 8))
       (mac (SET-DIFFERENCE '(3 4)
                         '(6 4 8 4 7 3 2 9))
              NIL)
       (mac (SET-DIFFERENCE '(8 5 2 9 2 6 1 2)
                         '(6 4 8 4 7 3 2 9))
              '(1 5))
       (mac (SET-DIFFERENCE '(2 7 2)
                         '(4))
              '(2 7 2))
       (mac (SET-DIFFERENCE '(7 3 4 10 8)
                         '(2 9 4))
              '(8 10 3 7))
       (mac (SET-DIFFERENCE '(8 2)
                         '(4 5 1 10 5 7 7 10))
              '(2 8))))

(DO-TEST "SET-DIFFERENCE TEST 6"
	(and
       (mac (SET-DIFFERENCE '(4 5 1 10 5 7 7 10)
                         '(8 5 2 9 2 6 1 2))
              '(10 7 7 10 4))
       (mac (SET-DIFFERENCE '(4 6 2 8 8)
                         '(2 7 2))
              '(8 8 6 4))
       (mac (SET-DIFFERENCE '(6 4 8 4 7 3 2 9)
                         '(2 5 8 2 7 2 7 6 3))
              '(9 4 4))
       (mac (SET-DIFFERENCE '(4)
                         '(3 4))
              NIL)
       (mac (SET-DIFFERENCE '(4 6 2 8 8)
                         '(2 5 8 2 7 2 7 6 3))
              '(4))
       (mac (SET-DIFFERENCE '(2 9 4)
                         '(2 7 2))
              '(4 9))))

(do-test "test set-difference - test case copied from page 278 of CLtL"
	(mac (SET-DIFFERENCE '("STRAWBERRY" "CHOCOLATE" "BANANA"  "LEMON" "PISTACHIO" "RHUBARB")
		     		'(#\C #\W)
		     		:TEST   #'(LAMBDA (S C) (FIND C S)))
           '( "RHUBARB" "LEMON" "BANANA")	)
)

(do-test "test set-difference 8"
	(and	(prog2	(setq aa '("STRAWBERRY" "CHOCOLATE" "BANANA" ) bb '("123456" "chocochoco" "strawstrawst")
				      cc (set-difference aa bb :test-not #'(lambda (x y) (/= (length x) (length y)))))
				(and 
					(mac cc '("CHOCOLATE"))
					(equal aa '("STRAWBERRY" "CHOCOLATE" "BANANA" ))
					(equal bb '("123456" "chocochoco" "strawstrawst"))
				)
		)
		(prog2	(setq aa '((1 2) "hello" long-atom) bb '(2 3 4 5 6 7)
				      cc (set-difference aa bb :test #'(lambda (x y) (numberp y)))
					 dd (set-difference aa bb :test-not #'(lambda (x y) (not (numberp x)))))
				(and (eq cc nil) 
					(mac dd '(long-atom "hello" (1 2)))
					(equal aa '((1 2) "hello" long-atom))
					(equal bb '(2 3 4 5 6 7))
				)
		)
	)
)

(do-test "test set-difference 9"
	(and	(progn	(setq aa '( (1 () (2 3 4 (5)))  (a b c d (e f g)) (a z x (8 9) d (l o n e y)))
					 bb '( (() () () () (w x y z))  ((10 20 30)) (n i l (n i l)))
					 cc (set-difference aa bb :test #'(lambda (x y)  (= (length x) (length y)))
										:key #'(lambda(x) (car (last x)))  ))
				(and
					(mac cc '((a z x (8 9) d (l o n e y))))
					(equal aa '( (1 () (2 3 4 (5)))  (a b c d (e f g)) (a z x (8 9) d (l o n e y))))
					(equal bb '( (() () () () (w x y z))  ((10 20 30)) (n i l (n i l))))
				)
		)
	)
))
STOP
