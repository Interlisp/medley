;; Function To Be Tested: ASSOC
;;
;; Source: Guy L Steele's CLTL
;; Section: 15.6 Association Lists
;; Page: 280
;;
;; Created By:    Kelly Roach
;;
;; Creation Date: June 27,1986
;;
;; Last Update:   June 27,1986
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>15-6-ASSOC.TEST
;;
;;
;; Syntax:        (ASSOC ITEM ALIST &KEY TEST TEST-NOT KEY)
;;
;; Function Description:
;; Each of these searches the association list
;; A-LIST.  The value is the first pair in the a-list such that
;; the CAR of the pair satisfies the test, or NIL if there is
;; no such pair in the a-list.
;; For example:
;; 
;;     (ASSOC 'R '((A . B) (C . D) (R . X) (S . Y) (R . Z)))
;;     	=>  (R . X)
;;     (ASSOC 'GOO '((FOO . BAR) (ZOO . GOO))) => NIL
;;     (ASSOC '2 '((1 A B C) (2 B C D) (-7 X Y Z))) => (2 B C D)
;;     
;; It is possible to RPLACD the result of ASSOC PROVIDED
;; that it is not NIL,
;; in order to ``update'' the ``table'' that was ASSOC's second argument.
;; (However, it is often better to update an a-list by adding new pairs
;; to the front, rather than altering old pairs.)
;; For example:
;; 
;;     (SETQ VALUES '((X . 100) (Y . 200) (Z . 50)))
;; 
;;     (ASSOC 'Y VALUES) => (Y . 200)
;;     (RPLACD (ASSOC 'Y VALUES) 201)
;;     (ASSOC 'Y VALUES) => (Y . 201) now
;;     
;; A typical trick is to say
;; (CDR (ASSOC X Y)).
;; Because the CDR of NIL is guaranteed to be NIL,
;; this yields NIL if no pair is found OR if a pair is
;; found whose CDR is NIL.  This is useful if NIL serves
;; its usual role as a ``default value.''
;; 
;; The two expressions
;; 
;;     (ASSOC ITEM LIST :TEST FN)
;;     
;; and
;; 
;;     (FIND ITEM LIST :TEST FN :KEY #'CAR)
;; 
;;    
;; are equivalent in meaning with one important exception:
;; if NIL appears in the a-list in place of a pair,
;; and the ITEM being searched for is NIL,
;; FIND will blithely compute the CAR of the NIL in the a-list,
;; find that it is equal to the ITEM, and return NIL,
;; whereas ASSOC will ignore the NIL in the a-list and continue
;; to search for an actual pair (cons) whose CAR is NIL.
;; See function FIND and function POSITION.
;; 
;; Compatibility note: In Maclisp, the ASSOC function uses
;; an EQUAL comparison rather than EQL, which is the default
;;
;; test for ASSOC in Common Lisp.  Where in Maclisp one would write
;; (ASSOC X Y), in Common Lisp one must write (ASSOC X Y :TEST #'EQUAL)
;; to get the completely identical effect.  Similarly, one can get the
;; precise effect, and no more, of the Maclisp (ASSQ X Y)
;; by writing in Common Lisp (ASSOC X Y :TEST #'EQ).
;; 
;; In Interlisp, ASSOC uses an EQ test, and SASSOC
;; uses an Interlisp EQUAL test.
;; 
;; Argument(s):   ITEM - anything
;;                ALIST - an association list
;;                TEST - a function
;;                TEST-NOT - a function
;;                KEY - a function
;;
;; Returns:       anything
;;

(DO-TEST "ASSOC TEST 1" (EQUAL (CL:ASSOC (QUOTE (1 2))
                                      (QUOTE (((1 2)
                                               (3 4))))
                                      :TEST
                                      (QUOTE EQUAL))
                               (QUOTE ((1 2)
                                       (3 4))))
       (EQUAL (CL:ASSOC (QUOTE (1 2))
                     (QUOTE (((1 2)
                              (3 4))))
                     :TEST-NOT
                     (QUOTE EQUAL))
              NIL)
       (EQUAL (CL:ASSOC (QUOTE (1 2))
                     (QUOTE (((1 2)
                              (3 4))
                             ((2 1)
                              (3 4))))
                     :TEST-NOT
                     (QUOTE EQUAL))
              (QUOTE ((2 1)
                      (3 4))))
       (EQUAL (CL:ASSOC (QUOTE (1 2))
                     (QUOTE (((2 1)
                              (3 4))
                             ((1 2)
                              (3 4))))
                     :TEST-NOT
                     (QUOTE EQUAL))
              (QUOTE ((2 1)
                      (3 4))))
       (EQUAL (CL:ASSOC (QUOTE (1 2))
                     (QUOTE (((1 2)
                              (3 4))))
                     :TEST
                     (QUOTE EQL))
              NIL)
       (EQUAL (CL:ASSOC 1 '(((2 3) 4)
                            ((4 5) 6)
                            ((1 2) 3)
                            ((7 8) 9))
                        :KEY 'CAR)
              '((1 2) 3))
       (EQUAL (CL:ASSOC T '(("A" S)(1 2))
                        :KEY 'CL:STRINGP)
              '("A" S))
       (EQUAL (CL:ASSOC NIL '(("A" S)(1 2))
                        :KEY 'CL:STRINGP)
              '(1 2))
       (EQUAL (CL:ASSOC (QUOTE (1 2))
                     (QUOTE (((QUOTE (1 2))
                              (3 4))))
                     :TEST-NOT
                     (QUOTE EQUAL)
                     :KEY 'EVAL)
              NIL)
       (EQUAL (CL:ASSOC (QUOTE (1 2))
                     (QUOTE (((QUOTE (1 2))
                              (3 4))))
                     :TEST
                     (QUOTE EQL)
                     :KEY 'EVAL)
              NIL))

STOP
