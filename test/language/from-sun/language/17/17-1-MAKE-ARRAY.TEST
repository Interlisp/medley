;; Function To Be Tested: make-array
;;
;; Source:     Common Lisp by Guy Steele
;;            Section 17.1: Array Creation          Page: 286
;;
;; Created By: John Park
;;
;; Creation Date: May 29, 86
;;
;; Last Update: Oct 16, 86  
;;
;; Filed as:      {eris}<lispcore>cml>test>17-1-make-array.test;;
;;
;; Syntax: make-array dimensions &key :element-type :initial-element
;;							:initial-contents :adjustable
;;							:fill-pointer :displaced-to
;;							:displaced-index-offset     
;;
;; Function Description: Make-array constructs an array according to
;;	the given dimension and key specifications.
;;
;; Argument(s):  dimensions: non-negative integers
;;	 keys element-type: type of the elements of the array
;;				(default: t (general array))
;;		initial-element: initialize each element of the array
;;		 (may not be used with :inital-contents or :display-to option
;;		initial-contents: initalialize the contents of the array
;;		adjustable: used to alter the array size dynamically after
;;		 it is created (default: nil)
;;		fill-pointer: indicates that the array should have a fill 
;;			pointer. If specified, an array must be one-dimensional
;;
;; Returns:  array or NIL   
;;
;; Constraints/limitations: None  



(do-test-group (array-creation-test
			:before (progn
					(setq array1 (make-array 0))
					(setq array2 (make-array 5))
					(setq array3 (make-array '(2 2) :initial-contents
					  '(((a b) (10 20)) ((c d) (30 40)))))
					(setq array4 (make-array '(2 2 2)
						:element-type	'single-float))
					(setq array5 (make-array '(2 2)
						:element-type 'fixnum 
						:initial-element 7))
					(setq array6 (make-array '(4 3)
						:initial-contents '((1 2 3)
										(4 5 6)
										(7 8 9)
										(10 11 12))))
					(setq array6.1 (make-array 8 :displaced-to array6
							:displaced-index-offset 2))
					(setq array7 (make-array 10 :fill-pointer T))
					(setq array7.1 (make-array 10 :fill-pointer 3))
					(setq array8 (make-array '(3 2 2) :adjustable T))
					(setq array9 (make-array '(4 2 3) :initial-contents
						'(((a b c) (1 2 3))
					       ((d e f) (3 1 2))
						  ((g h i) (2 3 1))
			 			  ((j k l) (0 0 0)))))
					(setq all-created-arrays (list array1 array2 array3 array4 
										array5 array6 array6.1 array7
										array7.1 array8 array9 
										))))
										
	
	(do-test array-dimension-limit-exist? 
		(and (boundp 'array-dimension-limit)
			(integerp array-dimension-limit)
			(> array-dimension-limit 1024)))
	(do-test array-total-size-limit-exist?
		(and (boundp 'array-total-size-limit)
			(integerp array-total-size-limit)
			(> array-total-size-limit 1024)))
	(do-test array-rank-limit-exist?
		(and (boundp 'array-rank-limit)
			(integerp array-rank-limit)
			(> array-rank-limit 7)))

	(do-test make-array-test 
		(every #'arrayp all-created-arrays)))

STOP



