;; Function To Be Tested: char
;;
;; Source:        CLtL p. 300
;; Chapter 18: Strings		Section 1: String Access
;;
;; Created By:    Peter Reidy
;;
;; Creation Date: 24 July  86
;;
;; Last Update:   19 December  86
;;
;; Filed As:      {eris}<lispcore>cml>test>18-1-char.test
;;
;;
;; Syntax:		char string index            
;;
;; Function Description: Returns the character index positions (counting from 0) into string.
;;
;; Argument(s):   	: any character string
;;				: a non-negative integer less then the number of characters in the string.       	
;;
;; Returns:  		the character at index           
;;
(do-test-group char-group
	:before
	(progn
		(test-setq	
			simple (copy-seq "This
is
a
simple  string.")
			arraystring (make-array '(13) :element-type 'string-char
			                              :initial-contents '(#\S #\h #\o #\r #\t #\Space
			                                                  #\Linefeed #\s #\t #\r #\i #\n #\g))
			twine (copy-seq "twine")
			displacedarray (make-array (length simple) :element-type 'string-char
			                                           :displaced-to simple)
			fillpt '(#\H #\a #\s #\Newline
			         #\a #\Newline
			         #\f #\i #\l #\l #\Newline
			         #\p #\o #\i #\n #\t #\e #\r)
			fillptarray (make-array (length fillpt) :element-type 'string-char
			                                        :initial-contents fillpt
			                                        :fill-pointer t) 
			adjarray (make-array 10 :element-type 'string-char
			                        :initial-contents '(#\a #\d #\j #\u #\s #\t #\a #\b #\l #\e)
			                        :adjustable t) 
			all3array (make-array (length simple) :element-type 'string-char
			                                      :adjustable t
			                                      :fill-pointer t
			                                      :displaced-to simple)
		)  ; test-setq
		(test-defun stringchartest (string index character)
			(let ((stringchar (char string index)))
				(and
					(char= character stringchar)
					(string-char-p stringchar)
				)  ; and
			)  ; let
		)  ; test-defun 
	)	;progn
;;
;; Test with simple strings.
	(do-test char-simple-test
		(AND
               ;; The simplest case
			(stringchartest simple 0 #\T)
               ;; See that it goes past a line-feed
			(stringchartest simple 8 #\a)
               ;; See that is distinguishes upper from lower case
			(not (char= #\t (char simple 0)))
			(char-equal #\t (char simple 0))
               ;; See if it treats 1-dimensional character array as a string.			
			(stringchartest arraystring 12 #\g)
               ;; See if the setf/char combination alters a string destructively.
			(setf (char twine 0) #\s)
			(eq (string= twine twine)
			    (string= twine (make-array '(5) :element-type 'string-char
			                                    :initial-contents '( #\s #\w #\i #\n #\e))))
		)	;and
	)	;do-test
;;
;; Test with non-simple strings.
	(do-test char-nonsimple-test
		(and
			(stringchartest displacedarray 4 #\Newline)			
			(stringchartest fillptarray 4 #\a)			
			(stringchartest adjarray 9 #\e)			
			(stringchartest all3array 5 #\i)			
		)	;and
	)	;do-test
)	;do-test-group
STOP

