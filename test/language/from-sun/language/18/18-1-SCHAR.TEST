;; Function To Be Tested: schar 
;;
;; Source:        CLtL p. 300
;; Chapter 18: Strings		Section 1: String Access
;;
;; Created By:    Peter Reidy
;;
;; Creation Date: 24 July  86
;;
;; Last Update:   24 July  86
;;
;; Filed As:      {eris}<lispcore>cml>test>18-1-schar.test
;; NOTE: The contents of this file are a subset of {eris}<lispcore>cml>test>18-1-char.test with schar replacing char and tests on non-simple strings removed.
;;
;; Syntax:		schar  string index            
;;
;; Function Description: Returns the character index positions (counting from 0) into string.
;;
;; Argument(s):   	string : any simple character string - i.e. any vector of type string-char with no displacement, no fill-pointer and no adjustability.
;;				index : a non-negative integer less then the number of characters in the string.       	
;;
;; Returns:  		the character at index           
;;
(do-test-group (schar-group
	:before (progn
		(setq		simple "This
is
a
simple string."
				arraystring (make-array '(13) :element-type 'string-char
				                              :initial-contents '(#\S #\h #\o #\r #\t
				                                                  #\Space #\Linefeed
				                                                  #\s #\t #\r #\i #\n #\g))
				twine (copy-seq "twine")
		)	;setq
		(defun stringschar (string index character)
			(setq stringchar  (schar string index))
			(and
				(char= character stringchar)
				(string-char-p stringchar )
			)
		)	;defun
		)	;progn
	)	;schar-group
;;
	(do-test schar-test
		(AND
;; The simplest case
			(stringschar simple 0 #\T)
;; See that it goes past a line-feed
			(stringschar simple 8 #\a)
;; See that is distinguishes upper from lower case
			(not (char= #\t (schar simple 0)))
;; See if the setf/char combination alters a string destructively.
			(setf (schar twine 0) #\s)
			(string= twine "swine")
;; See if it treats 1-dimensional character array as a string.			
			(stringschar arraystring 12 #\g)
		)	;and
	)	;do-test
)	;do-test-group
STOP

