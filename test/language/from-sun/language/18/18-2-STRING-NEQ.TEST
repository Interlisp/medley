;; Function To Be Tested: string/=
;;
;; Source:        CLtL p. 301 
;; Chapter 18: Strings		Section 2: String Comparison
;;
;; Created By:    Peter Reidy
;;
;; Creation Date: 18 July 86
;;
;; Last Update:   24 December 86
;;
;; Filed As:      {eris}<lispcore>cml>test>18-2-string-neq.test
;;
;;
;; Syntax:  string/= string1 string2 &key :start1 :end1 :start2 :end2              
;;
;; Function Description: The function compares the respective strings (with the keywords for the respective strings counting from 0 and the :end keywords designating the character after the last compared) lexicographically (i.e. it compares the corresponding characters by the function char/=). 
;;
;; Argument(s):	string1, string2: character strings
;;			:start1, start2: the start-comparison position in the respective strings (counting from 0)
;;			:end1, end2: the last character + 1 (counting from 0) to compare - i.e. if comparing "string" with a :end keyword of 4, the last character compared will be the letter i.				        	
;;
;; Returns:	If all characters satisfy char/=: the index (counting from 0) of the first non-identical character - i.e. the length of the portion of the strings that satisfies the predicate.
;;			If not: nil          
;;
(do-test-group string/=-group
	:before
	(progn
		(test-setq longstring "paring string with a :end keyword of 4, the last character compared will be the letter i.				        	
;;
;; Returns:	If all characters satisfy char/=: the index (counting from 0) of the first non-identical chara"
;; END LONGSTRING DEFINITION
		)
	)
	(do-test string/=-test
		(AND
;; Change just one character from upper to lower case; the predicate should hold.
			(let ((string2 (copy-seq longstring)))
				(replace string2 "P" :end 0)
				(string/= longstring string2)
			)
;; A string shouldn't be unequal to itself
			(not (string/= longstring longstring))
		)
	)
)
STOP

