;; Function To Be Tested: string-trim
;;
;; Source:        CLtL p. 302 
;; Chapter 18: Strings		Section 3: String Construction and Manipulation
;;
;; Created By:    Peter Reidy
;;
;; Creation Date:  22 July 86
;;
;; Last Update:    14 December 86
;;
;; Filed As:      {eris}<lispcore>cml>test>18-3-string-trim.test
;;
;;
;; Syntax: string-trim character-bag string               
;;
;; Function Description: starting from both ends of string and moving inward, the function removes all occurrences of any characters found in character-bag until it encounters a character not in character-bag.
;;
;; Argument(s): character-bag - a list of characters of type string-char
;;			 string - any valid character string         	
;;
;; Returns: the substring of string consisting of string with the elements of character-bag removed as described; if the function trimmed no characters, the result is string= to string (but not eq in the Xerox implementation).             
;;
(do-test-group string-trim-group
	:before (test-setq upcase '|ABCDEFGHIJKLMNOPQRSTUVWXYZ| lowcase '|abcdefghijklmnopqrstuvwxyz| digits '\0\1\2\3\4\5\6\7\8\9)
;;
	(do-test "string-trim stops when it encounters a character not in character-bag"
		;;In this case, W and D should not get trimmed.
		(string= (string-trim '(#\A #\B #\W #\Z #\Y #\D) upcase) "CDEFGHIJKLMNOPQRSTUVWX")
	)  ;do-test
;;
	(do-test "string-trim can trim off the entire string and accept redundant characters"
		(and
			(string= (string-trim '(#\9 #\8 #\7 #\6 #\5 #\4 #\3 #\2 #\2 #\1 #\0) digits) "")
			(string= (string-trim '(#\5) (make-string 5 :initial-element #\5)) "")
		)  ; and
	)  ; do-test
;;
	(do-test "string-trim is case-sensitive"
		(and
			(string= lowcase (string-trim '(#\A #\B #\C) lowcase))
			(string= upcase (string-trim '(#\x #\y #\z) upcase))
		)  ; and
	)  ; do-test
;;
	(do-test "string-trim accepts semi-standard characters"
		(string=
			(coerce '(#\Linefeed #\linefeed #\Return #\Linefeed) 'string)
			(string-trim 
				'(#\G #\Page #\Tab #\Backspace)
				 (coerce '(#\Backspace #\G #\Linefeed #\linefeed #\Return #\Linefeed #\Tab #\Page #\Backspace) 'string)
			)  ; string-trim
		)  ; string=
	)  ; do-test 
;;
	(do-test "string-trim character-bag need not be all characters"
		(and
			(string= digits (string-trim '(50 '('(5 10) '(15 20)) "Alexis is a bitch") digits))
			(string= (symbol-name '|23456789|) (string-trim '(50 #\1'('(5 10) '(15 20)) "Alexis is a bitch" #\0) digits))
		)
	)
)
STOP

