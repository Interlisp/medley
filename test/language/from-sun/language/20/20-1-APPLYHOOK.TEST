;; Function To Be Tested:applyhook
;;
;; Source: Guy L Steele's CLTL
;; Section: 20.1 THE EVALUATOR (Run-Time Evaluation of Forms)
;; Page: 323
;;
;; Created By:   John Park
;;
;; Creation Date: Nov 13, 1986
;;
;; Last Update:   
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>20-1-applyhook.test
;;
;;
;; Syntax:        (applyhook function args evalhookfn applyhookfn &optional env)
;;
;; Function Description: The function applyhook is provided to make it easier to
;; exploit the hook feature.  In the case of applyhook, the function is applied
;; to the list of arguments args. In either case, for the duration of the
;; operation the variable *evalhook* is bound to evalhookfn, and *applyhook* to 
;; applyhookfn.  Furthermore, the env argument is used as the lexical environment
;; for the operation; env defaults to the null environment.  The check for a hook
;; function is bypassed for the evaluation of the form itself (for evalhook), but
;; not for subsidiary evaluations and applications, such as evaluations of 
;; subforms. 
;;
;; Argument(s): function
;;			 args
;;			evalhookfn: *evalhook* 
;;			applyhookfn: *applyhook*
;;			env (optional): lexical environment for the operation
;;			  
;; Returns:     
;;
;; Constraints/Limitations:


(do-test-group ("evalhook-test-setup"
	:before   	  (progn
				(defvar *hooklevel* 0)
			 	(defun apply-hook-function (fn args  &optional env)
					(let ((*applyhook* 'apply-hook-function)))
					(let ((*hooklevel* (+ *hooklevel* 1)))
					  (format *trace-output* "~%~V@TFunction:  ~S"
						(* *hooklevel* 3) fn)
					(let ((values (multiple-value-list
							(applyhook fn
									args
									nil 
									#'apply-hook-function
									env))))
					  (format *trace-output* "~%~V@TArguments: ~{~S~}"
							(* *hooklevel* 3) (list args))
					  (format *trace-output* "~%~V@TValue: ~{~S~}"
							(* *hooklevel* 3) values)
					  (values-list  values))))
				)

			)
				

(do-test "*applyhook*-exist?"
		(boundp '*applyhook*)
)


(do-test "applyhook-test"
	(and (= (apply-hook-function '+ '(1 2 3 4))
			10)
		(eq  (apply-hook-function '> '(1 2))
			NIL)
		(equal  (apply-hook-function 'list '(3 4 'a (car '(b . c)) (+ 3 4)))
			'(3 4 'a (car '(b . c)) (+ 3 4)))
		(equal (apply-hook-function 'substitute '(7 2 (2 2 2 2)))
			'(7 7 7 7))
	)
)
)

STOP




