;; Function To Be Tested: copy-readtable
;;
;; Source:        CLtL p. 361
;;
;; Chapter 22: Input/Output		Section 1.5: The Readtable
;;
;; Created By:    Peter Reidy
;;
;; Creation Date: 22 October 86
;;
;; Last Update: 17 January 87
;;
;; Filed As:      {eris}<lispcore>cml>test>22-1-5-copy-readtable.test
;;
;; Syntax: copy-readtable &optional from-readtable to-readtable
;;            
;; Function Description: Make a copy of from-readtable (default: *readtable*, the current readtable).  If NIL is explicitly supplied as the value of from-readtable, the function makes a copy of the standard readtable.
;; If to-readtable is nil or unsupplied, the function makes a new copy; if to-readtable is supplied, it must be a read-table; the function then copies from-readtable into it.
;;
;; Arguments:	from-readtable, to-readtable: nil or readtables. 
;;
;; Returns:  the readtable to which the copy was made            
;;
;;
(do-test-group
	copy-readtable-group
	:before
	(progn
;; Create 3 new readtables, but don't put them into effect yet.  Substitute 1 and 2, 3 and 4 and 5 and 6, respectively, for left and right parentheses.
		(test-setq oddtable-one-two (copy-readtable nil))
		(set-syntax-from-char #\1 #\( oddtable-one-two)
		(set-syntax-from-char #\2 #\) oddtable-one-two)
;;
		(test-setq oddtable-three-four (copy-readtable nil))
		(set-syntax-from-char #\3 #\( oddtable-three-four)
		(set-syntax-from-char #\4 #\) oddtable-three-four)
;;
		(test-setq oddtable-five-six (copy-readtable nil))
		(set-syntax-from-char #\5 #\( oddtable-five-six)
		(set-syntax-from-char #\6 #\) oddtable-five-six)
;;
		(test-setq *readtable* (copy-readtable nil))
;;
		(test-defun rttest (readtable testfun)
		"Copy readtable to *readtable*, making it the effective table for read operations.  Evaluate testfun, restore the standard table and return the value of testfun."
			(copy-readtable readtable *readtable*)
			(let ((*standard-input* (make-string-input-stream "12 34 56")))
				(prog1
					(funcall testfun)
					(copy-readtable (copy-readtable nil) *readtable*)	
				)  ; prog1
			)  ; let
		)  ; test-defun
	)  ; prog
;;
;; For each of the new readtables, the changed digits and no other digits will be NIL, the empty list - '() - and an integer otherwise.
;;
	(do-test standard-readtable-test
		;; With the standard readtable in effect, all are integers.
		(every 'integerp (list '12 '34 '56))
	)  ; do-test standard-readtable-test
;;
	(do-test oddtable-one-two-test
		(rttest
			oddtable-one-two
			#'(lambda nil
				(and		
					(null (read))
					(= 34 (read))
					(= 56 (read))
				)
			)
		)
	)  ; do-test oddtable-one-two-test
;;
	(do-test oddtable-three-four-test
		(rttest
			oddtable-three-four
			#'(lambda nil
				(and
					(= 12 (read))
					(null (read))
					(= 56 (read))
				)  ; and
			)
		)
	)  ; do-test oddtable-three-four-test
;;
	(do-test oddtable-five-six-test
		(rttest
			oddtable-five-six
			#'(lambda nil
				(and
					(= 12 (read))
					(= 34 (read))
					(null (read))
				)  ; and
			)
		)
	)  ; do-test oddtable-five-six-test
)  ; do-test-group
STOP

