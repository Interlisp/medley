;; Function To Be Tested: get-dispatch-macro-character
;;
;; Source: CLtL p. 364
;;
;; Chapter 22: Input/Output		Section 1.5: The Readtable
;;
;; Created By: Peter Reidy
;;
;; Creation Date: 4 November 86
;;
;; Last Update: 4 November 86
;;
;; Filed As:      {eris}<lispcore>cml>test>22-1-5-get-dispatch-macro-character.test
;;
;; Syntax: get-dispatch-macro-character disp-char sub-char &optional readtable
;;            
;; Function Description: returns the function called by the sequence DISP-CHAR/SUB-CHAR under READTABLE.  Returns NIL if the seqence isn't a dispatching-macro sequence in READTABLE - alway if SUB-CHAR is one of the decimal integers.
;;
;; Argument(s):	disp-char, sub-char - characters
;;			readtable - a readtable ; defaults to  NIL (the readtable currently in effect).
;;
;; Returns: a function or NIL.			 
;;
 (do-test-group
	(get-dispatch-macro-character-group
	:before
		(progn
			(test-defun has-dispf-p (disp-char sub-char &optional readtable)
				"Return T iff get-dispatch-macro-character returns a function for the same arguments.  If the value is a symbol, it must satisfy fboundp; otherwise, it must be non-nil and satisfy functionp."
				(let
					((func (get-dispatch-macro-character disp-char sub-char readtable)))
					(cond
						((symbolp func) (fboundp func))  ; if it's a symbol
						(func (functionp func))  ; if it's anything else but NIL
						(t nil)  ; if it's NIL fail
					)  ; cond
				)  ; let
			)  ; test-defun
			(test-defun std-has-dispf-p (sub-char)
				"Call has-dispf-p with #\# as the disp-character and the standard readtable."
				(let	((std-table (copy-readtable nil)))
					(declare (special std-table))
					(has-dispf-p #\# sub-char std-table)
				)  ; let
			)  ; test-defun
		)  ; progn
	)  ; get-dispatch-macro-character-group
;;
;;
	(do-test get-dispatch-macro-character-with-standard-readtable-test
		(let ((*readtable* (copy-readtable nil)))
			(and
				;; For every defined #-macro character in table 22-4 (CLtL p. 352), see if it returns a function
;; NOTE: #\# and #\= lack standard definitions.  See AR 6795.
				(every 'std-has-dispf-p (list #\# #\' #\( #\* #\, #\: #\=
 #\\ #\| #\+ #\- #\. #\A #\B #\C #\O #\R #\S #\X))
				;; Decimal digits must never be dispatch macro characters.
				(notany 'std-has-dispf-p (list #\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9))
			)  ; and 
		)  ; let
	)  ; do-test get-dispatch-macro-character-with-current-readtable-test
;;
;;
;; Try the function under an alternate readtable.  Note that the alternate readtable never actually becomes *readtable*, the ruling table.
	(do-test get-dispatch-macro-character-with-alternate-readtable-test
		(let ((altreadtable (copy-readtable nil)
                 )
			)
			(declare (special altreadtable))
			(make-dispatch-macro-character #\$ nil altreadtable)	
			(set-dispatch-macro-character #\$ #\%  '(lambda (x y z) "This is a test.") altreadtable)	
			(and
				;; Is the function is in effect for the character pair?
				(has-dispf-p #\$ #\% altreadtable)
				;; This should not have affected other pairs in the same readtable.
				(not (has-dispf-p #\$ #\+ altreadtable))
				(not (has-dispf-p #\+ #\% altreadtable))
				;; Should not have affected the standard readtable.
				(not (std-has-dispf-p  #\%))
			)  ; and
		)  ; let
	)  ; do-test get-dispatch-macro-character-with-alternate-readtable-test
)  ; do-test-group
STOP

