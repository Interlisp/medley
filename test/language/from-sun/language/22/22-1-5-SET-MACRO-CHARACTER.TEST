;; Function To Be Tested: set-macro-character
;;
;; Source:        CLtL p. 362
;;
;; Chapter 22: Input/Output		Section 1.5: The Readtable
;;
;; Created By:    Peter Reidy
;;
;; Creation Date: 2 November 86
;;
;; Last Update: 17 January 87
;;
;; Filed As:      {eris}<lispcore>cml>test>22-1-5-set-macro-character.test
;;
;; Syntax: set-macro-character char function &optional non-terminating-p readtable
;;            
;; Function Description: Makes char a macro character which causes function to be called when the reader encounters it.
;;
;; Argument(s):	char - a character
;;			non-terminating-p - if true, makes char a non-terminating macro
;;			readtable - the readtable in which char's syntax is to be set; defaults to *readatable* (the readtable currently in effect)
;;
(do-test-group set-macro-character-group
	:before
	(progn
		(test-setq
			percentable (copy-readtable nil)
			*readtable* (copy-readtable nil)
			2nov862039 0
			2nov862110 0
		)  ; test-setq
		(test-defun dmactest (val var string)
		"See if var=val after reading string.  String will contain characters whose macro-function may or may not increment var; val (which was initialized to 0) is the expected value after reading occurrences of the character."
			(= val
(write
				(progn
					(read (make-string-input-stream string) nil)
					var
				)
)
			)
		)  ; test-defun
	)  ; progn
;;
	(do-test set-macro-character-returns-t-test
	;; Change #\&'s syntax in the current readtable and #\%'s in a non-standard one.  Note that these test-setq's are real setq's that persist after the file is run; thus the odd names, which are unlikely to step on anything.
		(and
			(eq t
				(set-macro-character
					#\&
					'(lambda (x y) (test-setq 2nov862039 (1+ 2nov862039)) (values))
				)
			)
			(eq t
				(set-macro-character
					#\%
					'(lambda (x y) (test-setq 2nov862110 (1+ 2nov862110))(values))
					T
					percentable
				)
			)
		)  ; and
	)  ; do-test set-macro-character-returns-t-test
;;
	(do-test second-value-is-non-terminating-p-flag
;; NOTE: Always T in 29 October sysout.  See AR 6759.
		(and
			(null (cadr (multiple-value-list (get-macro-character #\&))))
			(cadr (multiple-value-list (get-macro-character #\%	 percentable)))
		)  ; and
	)  ; do-test second-value-is-non-terminating-p-flag
;;
	(do-test current-readtable-test
		(and
			;; In the current readtable, #\&'s read function bumps a marker; 5 occurrences should bump it 5 times.
			(= 5
				(progn
					(read (make-string-input-stream "&&&&&") nil)
					2nov862039
				)
			)
			;; Macro-char settings in another readtable should not be invoked in this one.
			(= 0
				(progn
					(read (make-string-input-stream "%%%%%%%%") nil)
					2nov862110
				)
			)			
		)  ; and
	)  ; do-test current-readtable-test
;;
	(do-test alternate-readtable-test
		(let ((*readtable* percentable))
			(and
				;; In percentable, #\%'s read function bumps a marker; 8 occurrences should bump it 8 times.
				(= 8
					(progn
						(read (make-string-input-stream "%%%%%%%%") nil)
						2nov862110
					)
				)			
				;; Macro-char settings in another readtable (i.e. the default one, as altered earlier in this file) should not be invoked in this one.
				(= 5
					(progn
						(read (make-string-input-stream "&&&&&") nil)
						2nov862039
					)
				)
				;; Macro-char settings in another readtable should not be invoked in this one.
			)  ; and
		)  ; let
	)  ; do-test alternate-readtable-test
)  ; do-test-group
STOP


