;; Function To Be Tested: set-syntax-from-char
;;
;; Source:        CLtL p. 361
;;
;; Chapter 22: Input/Output		Section 1.5: The Readtable
;;
;; Created By:    Peter Reidy
;;
;; Creation Date: 2 November 86
;;
;; Last Update: 2/2/87 Jim Blum - removed (EVAL from (read estream) to run on the SUN
;;
;; Filed As:      {eris}<lispcore>cml>test>22-1-5-set-syntax-from-char-part-01.test
;;
;; Syntax: set-syntax-from-char to-char from-char &optional to-readtable from-readtable
;;            
;; Function Description: Makes the syntax of to-char in to-readtable the same as that of from-char in from-readtable.
;;
;; Argument(s):	to-char, from-char - characters
;;			to-readtable, from-readtable - readtables.  To-readtable defaults to *readtable* (the readtable currently in effect), from-readtable to NIL (the standard readtable).
;;
(do-test-group set-syntax-from-char-group
	:before
	(progn
		(test-setq
			tabstream (make-string-input-stream "	5	 	5	 	b	 	B	")
			abc 0
			3abc 1
			\abc 2
			|31oct861301| 0
			|31OCT861301| 1
			E31oct861301E 2
			savetable *readtable*  ; in case it wasn't the standard
			*readtable* (copy-readtable nil)	
			tab-is-double-quote-table (copy-readtable nil)	
			pound-is-newline-table (copy-readtable nil)	
			3-is-backslash-from-table (copy-readtable nil)	
			3-is-backslash-to-table (copy-readtable nil)	
			\|-is-constituent-table (copy-readtable nil)	
			pound-sign-is-double-quote-table (copy-readtable nil)	
		)  ; test-setq
		(cond
			((boundp '4abc)  ; save this value in case it was bound
			 (test-setq save4abc 4abc)
			 (makunbound '4abc))
			(t t)
		)
	)  ; progn
	:after
	(progn
		(setq *readtable* savetable)
		(cond
			((boundp 'save4abc)
			 (setq 4abc save4abc))
			(t t)
		)
	)
;;
	(do-test term-macro-from-whitespace-test
		;; Make the tab a double quote; this will enable #\tab to create strings.
		(set-syntax-from-char #\tab #\" tab-is-double-quote-table)
		(let ((*readtable* tab-is-double-quote-table))
			(and
				(stringp (read tabstream))
				(not (integerp (read tabstream)))
				(string-equal (read tabstream)(read tabstream))
			)
		)
	)  ; do-test term-macro-from-whitespace-test
;;
	(do-test whitespace-from-non-term-macro
		;; Make # into a whitespace character.
		(set-syntax-from-char #\# #\newline pound-is-newline-table)
		(let ((*readtable* pound-is-newline-table)
			 (*standard-input* (make-string-input-stream "# #
##5#
##")))
			(and
				(integerp (read))
				(= 50 (read *standard-input* nil 50))
				;; (= 9 (+ (* 3 2) 3)), with line feeds (standard and newly-defined) and tabs randomly interspersed.
				(eval (read (make-string-input-stream "(
			#=
##9 	(#+#
	(#*##3#2)
##
	##3##))")
			))
			)  ; and
		)  ; let
	)  ; do-test whitespace-from-non-term-macro
;;
	;; Test the to-readtable and from-readtable arguments
	(do-test single-escape-from-constituent-before
		;;
		;; Set #\4 to a #\\'s syntax in the from table.
		(set-syntax-from-char #\4 #\\ 3-is-backslash-from-table)
		;;
		;; Then copy it to #\3's in the to-table.  The result should be that #\3 functions as a backslash in to-table.
		;;
		(set-syntax-from-char #\3 #\4 3-is-backslash-to-table 3-is-backslash-from-table)
		;;
		(and
			(let ((*standard-input* (make-string-input-stream "3abc 3ABC")))
				(= (eval (read)) (eval (read)))
			)
			;; Before putting the to-table into effect, show that the symbols above all have different values.
			(notany #'= (list abc abc 3abc) (list 3abc \abc \abc))
		)  ; and
	)  ; do-test single-escape-from-constituent-before
;;
	(do-test single-escape-from-constituent-after
	;; Under the standard readtable, abc=0, 3abc=1 and \abc=2.  Under 3-is-backslash-to-table, '3abc should read as '\abc.
		(let ((*readtable* 3-is-backslash-to-table)
			 (*standard-input* (make-string-input-stream "3abc 4abc"))
			)
			(and
				(= 2 (eval (read)))
				;; See if the from- and to-tables are distinct.  #\4 was a single-escape in the from-table, but not in the to-table, which is currently in effect; it should not have the #\\ syntax now.
				(not (boundp (read)))
			)  ; and
		)  ; let
	)  ; do-test single-escape-from-constituent-after
;;
	(do-test constituent-from-multiple-escape
		(set-syntax-from-char #\| #\E \|-is-constituent-table)
		(and
			;; Verify that, under the standard readtable, all 3 have distinct values.
			(notany #'= (list |31oct861301| |31oct861301| |31OCT861301|) (list |31OCT861301| E31oct861301E E31oct861301E))
			(let ((*readtable* \|-is-constituent-table))
				(with-input-from-string (estream "|31oct861301| |31OCT861301| 36E3 36|3")
					(and
						;; #\| no longer serves to distinguish upper- from lower-case characters in symbols.
						(eq  (read estream)  (read estream))
						;; #\| does not copy #\E's exponent-marker property.
						(floatp (read estream))
						(not (floatp (read estream)))
					)  ; and
				)  ; with-input-from-string estream 
			)  ; let
		)  ; and
	)  ; do-test constituent-from-multiple-escape
;;
	(do-test non-terminating-macro-from-terminating-macro
		(set-syntax-from-char #\# #\" pound-sign-is-double-quote-table)
		(let ((*readtable* pound-sign-is-double-quote-table))
			(and
				(every #'(lambda (string) (stringp (read-from-string string))) '("\#\# \#" "\# \#"))
				(eq 100 (parse-integer (read-from-string "\#100\#")))
			)  ; and
		)  ; let
	)  ; do-test non-terminating-macro-from-terminating-macro
)  ; do-test-group
STOP

