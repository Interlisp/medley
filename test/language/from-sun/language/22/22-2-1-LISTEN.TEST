;; Function To Be Tested: listen
;;
;; Source:        CLtL p. 380
;;
;; Chapter 22: Input/Output		Section 2.1: Input from Character Streams
;;
;; Created By:    Peter Reidy
;;
;; Creation Date: 14 November 86
;;
;; Last Update: 12 January 87
;;
;; Filed As: {eris}<lispcore>cml>test>22-2-1-listen.test
;;
;; Syntax: listen &optional input-stream 
;;            
;; Function Description: true iff a character is immediately available from input-stream.
;;
;; Argument(s):	input-stream - a stream; defaults to the value of *standard-input*
;;
;; Returns: t or nil			 
;;
(do-test-group listen-group
		:before (test-setq gulf (make-string-input-stream "g "))
		:after (close gulf)

;; THE FOLLOWING TEST IS BOGUS because it depends on the state of the
;; terminal at the time that the test suite runs.
;;	(do-test "top-level default listen gets an eof"
;; 		(null (listen))
;;	)  ; do-test "top-level default listen gets an eof"
;;
	;; Try it with read, read-char, and read-line.
	(do-test "non-interactive streams listen is true except at read eof"
		(let ((*standard-input* (make-string-input-stream "g ")))
			(and
				(listen)
;; JRB This has to be READ-PRESERVING-WHITESPACE, not READ.
				(read-preserving-whitespace)
				(listen)
				;; Listen says that a character is available, not neccessarily a lisp object.
				(string= "eof" (read nil nil "eof"))
;; NOTE: returns nil in 30 December sysout; see AR 7202.
				(null (listen))
			)
		)  ; let
	)  ; do-test "non-interactive streams listen is true except at read eof"
;;
	(do-test "non-interactive streams listen is true except at read-char eof"
		(let ((*standard-input* gulf))
			(and
				(listen gulf)
				(read-char)
				(listen)
				(read-char)
				(null (listen))
				(string= "eof" (read-char nil nil "eof"))
				(null (listen))
			)
		)  ; let
	)  ; do-test "non-interactive streams listen is true except at read-char eof"
;;
	(do-test "non-interactive streams listen is true except at read-line eof"
		(let ((*standard-input* (make-string-input-stream (make-array 3 :element-type 'string-char :initial-contents '(#\g #\newline #\h)))))
			(and
				(listen)
				(car (multiple-value-list (read-line)))
				(listen)
				(car (multiple-value-list (read-line)))
				(null (listen))(print *standard-input*)
				(string= "eof" (read-line *standard-input* nil "eof"))
				(null (listen))
			)
		)  ; let
	)  ; do-test "non-interactive streams listen is true except at read-line eof"
;;
)  ; do-test-group
STOP

