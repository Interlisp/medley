;; Function To Be Tested: parse-integer
;;
;; Source:        CLtL p. 381
;;
;; Chapter 22: Input/Output		Section 2.1: Input from Character Streams
;;
;; Created By:    Peter Reidy
;;
;; Creation Date: 16 November 86
;;
;; Last Update: 12 January 87
;;
;; Filed As:      {eris}<lispcore>cml>test>22-2-1-parse-integer.test
;;
;; Syntax: parse-integer string &key :start :end :radix :junk-allowed
;;            
;; Function Description: scans the substring delimited by :start (defaults to the beginning of string) and :end (defaults to the end) and attempts to parse an integer.  Returns the integer if successful, otherwise nil.
;;
;; Arguments:
;;	string: a string
;;	:start, :end: substring delimiters within string (counting from 0)
;;	:radix: the base in which the input integer is to be read (defaults to 10)
;;	:junk-allowed: if true, the function's first value is nil in cases where it could not parse an integer; if nil (the default), it signals an error in these cases.
;;
;; Returns: the integer (or nil; see :junk-allowed) and the index into the string of the delimiter that terminated the parse.			 
;;
(do-test-group parse-integer-group
	:before
	(test-setq length (+ 20 (random 100)) start (random 5) end (+ start 1 (random 10)))
;;
	(do-test "parse-integer standard cases"
		(every #'(lambda (value) (= 123 value))
			(list
				(parse-integer "123")
				(* -1 (parse-integer "-0123"))
				(parse-integer "00123")
				(parse-integer "0012300" :end 5)
;; NOTE: 12 Nov parse-integer works incorrectly on symbol-names.  See AR 6869
				(parse-integer (symbol-name '\123) :start 0)
				(parse-integer (symbol-name '\1\2\3) :end 3)
				(parse-integer "xx123"  :start 2)
				(parse-integer "123xx" :end 3)
				(parse-integer (symbol-name '!!!123***) :start 3 :end 6)
				(parse-integer (make-array 3 :initial-contents '(#\1 #\2 #\3) :element-type 'string-char))
				(- (parse-integer (make-string 3 :initial-element #\2)) 99)
				(* -1 (parse-integer (make-array 4 :initial-contents '(#\- #\1 #\2 #\3) :element-type 'string-char)))
				(parse-integer (make-array 7 :initial-contents '(#\newline #\space #\1 #\2 #\3 #\newline #\space) :element-type 'string-char) :start 2 :end 5)
			)
		)  ; every
	)  ; do-test "parse-integer standard cases"
;;
	(do-test "parse-integer with different radices"
		(and
			(= 123 (parse-integer "1111011" :radix 2))
			(= 123 (parse-integer "211110112" :radix 2 :start 1 :end 8))
;; NOTE: parse-integer doesn't accept letters.  See AR 6904
			(= 123 (parse-integer "3f" :radix 36))
			(= 117 (parse-integer "39" :radix 36))
		)  ; and
	)  ; do-test "parse-integer with different radices"
	(do-test "parse-integer skips whitespace"
		(= 123 (parse-integer "  

  123
 
"))
	)  ; do-test "parse-integer skips whitespace"
	(do-test "parse-integer :junk-allowed"
		(and
			;; redundant here
			(= 123 (parse-integer "123" :junk-allowed 0)) ; any non-nil value will do
			(null (parse-integer "#123#" :junk-allowed t))
			(null (parse-integer "2002" :junk-allowed "nil" :radix 2))
			(null (parse-integer "20x02" :junk-allowed *readtable* :start 2 :end 3))
		)  ; and
	)  ; do-test "parse-integer :junk-allowed"
	(do-test "parse-integer index value"
		(and
			(let	((parse1 (multiple-value-list (parse-integer "123")))
				 (parse2  (multiple-value-list (parse-integer "  
123
 ")))
				)
				;; Different lengths but same value
				(= 3 (cadr parse1))
				(= 8 (cadr parse2))
				(=	(car parse1) (car parse2))
			)
			;; Index is the stopping point, no matter where parsing started.
			(= end
				(cadr
					(multiple-value-list
						(parse-integer
							(make-string length :initial-element #\9)
							:start start
							:end end
						)
					)
				)
			)
			(= 0 (cadr (multiple-value-list (parse-integer "xxx" :junk-allowed t)))) 
			(= 0 (cadr (multiple-value-list (parse-integer "xxx" :junk-allowed t))))
			(= (1- (length "123!")) (cadr (multiple-value-list (parse-integer "123!" :junk-allowed t))))
		)  ; and
	)  ; do-test "parse-integer index value"
)  ; do-test-group
STOP

