;; Function To Be Tested: peek-char
;;
;; Source:        CLtL p. 379
;;
;; Chapter 22: Input/Output		Section 2.1: Input from Character Streams
;;
;; Created By:    Peter Reidy
;;
;; Creation Date: 12 November 86
;;
;; Last Update: 1 Jan 87 Jim Blum - fixed MACRO char tests
;;
;; Filed As:      {eris}<lispcore>cml>test>22-2-1-peek-char.test
;;
;; Syntax: peek-char &optional peek-type input-stream eof-error-p eof-value recursive-p 
;;            
;; Function Description: reads and returns the next character from input-stream, but leaves the stream's pointer unchanged - i.e. pointing to the character just read, so that another peek-char or read-char will read the same character. 
;;
;; Argument(s):	peek-type - if t, skip whitespace characters; if nil, don't.
;;			input-stream - a stream
;;			eof-error-p - if true, signal an error if eof is encountered before the end of the line
;;			eof-value - if eof-error-p is nil, return this value if eof is encountered before the end of the line
;;			recursive-p - if true, this is an embedded call, not top-level
;;
;; Returns: the character read			 
;;
(do-test-group
	(peek-char-group
		:before
		(test-setq
			test(make-string-input-stream "@5")
		     test2(make-string-input-stream "#@4")
			river	(make-string-input-stream "12345")
			brook	(make-string-input-stream " 
 


  1;this is a comment")  ; #\space and #\newline are the only standard whitespace characters.
			canal	(make-string-input-stream "100")
			savetable *readtable*
		)  ; test-setq
;;
		:after
		(progn
			(setq *readtable* savetable)
			(mapcar 'close (list river brook canal test test2))
		)  ; progn
	)  ; peek-char-group
	(do-test "peek-char doesn't move the pointer"
		(and
			(eq #\1 (peek-char nil river))
			(eq #\1 (peek-char nil river))
			(eq #\1 (read-char river))
			(progn	(unread-char #\1 river)
					(peek-char nil river)
					(peek-char nil river)
					(peek-char nil river)
					(peek-char nil river)
					(peek-char nil river)
					(= 12345 (read river))
			)  ; progn
		)  ; and
	)  ; do-test "peek-char doesn't move the pointer"
;;
	(do-test "peek-char accepts alternative input-stream"
		(let	((*standard-input* (make-string-input-stream "a B c D")))
			(and
				(eq #\a (peek-char))
				(read-char)
				(eq #\space (peek-char))
				(= 6 (length (read-line)))
				(or (close *standard-input*) t)  ; for portability
			)  ; and 
		)  ; let
	)  ;do-test "peek-char accepts alternative default stream"
;;
	(do-test "peek-char peek-type"
		(and
			(eq #\1 (peek-char t brook))	; skip whitespace
			(read brook)  ; get past the 1
			(eq #\; (peek-char nil brook))	; don't skip comments
		)
	)  ;do-test "peek-char peek-type"
;;
	(do-test "peek-char eof arguments test"
		(let	((*standard-input* canal))
			(read)
			(= 50 (peek-char nil nil nil 50))
		)  ; let
	)  ;do-test "peek-char eof arguments test"
;;
	(do-test peek-char-recursive-p-test
;;  a real test of this
		(set-macro-character #\@ #'(lambda (stream char) (peek-char nil stream t nil t)))
		(set-dispatch-macro-character  #\# #\@ #'(lambda (stream mac disp) (peek-char nil stream t nil t)))
		(and
			(eql #\5  (read test))
			(eql #\4 (read test2))
		)  ; and
	)  ;do-test peek-char-recursive-p-test
)  ; do-test-group
STOP

