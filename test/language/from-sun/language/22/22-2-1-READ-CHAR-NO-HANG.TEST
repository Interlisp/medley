;; Function To Be Tested: read-char-no-hang
;;
;; Source:        CLtL p. 380
;;
;; Chapter 22: Input/Output		Section 2.1: Input from Character Streams
;;
;; Created By:    Peter Reidy
;;
;; Creation Date: 15 November 86
;;
;; Last Update: 18 February 87 - Reidy. Commented out the first test pending a fix of AR 7216.
;;
;; Filed As:      {eris}<lispcore>cml>test>22-2-1-read-char-no-hang.test
;;
;; Syntax: read-char-no-hang & optional input-stream eof-error-p eof-value recursive-p 
;;            
;; Function Description: reads a character and returns it if one is available, returns nil if one isn't.
;;
;; Argument(s):	input-stream - a stream
;;			eof-error-p - iff true, the function will signal an error at eof; otherwise, it returns the value of eof-value
;;			eof-value - see eof-error-p
;;			recursive-p - if true, this is a recursive call, not top-level
;;
;; Returns: the character read or eof-value if specified		 
;;
(do-test-group read-char-no-hang-group
	:before
		(progn
			(test-setq	cold (make-string-input-stream "1 
2 ")
					*readtable* (copy-readtable nil) ; start with the standard
			)
;;
			(test-defun atsign-top (stream char) (read-char-no-hang stream nil nil nil) "top")
;;
			(test-defun atsign-recursive (stream mac disp) (read-char-no-hang stream nil nil 1) "recursive")
;;
			(set-dispatch-macro-character #\# #\@ 'atsign-recursive)
			(set-macro-character #\@ 'atsign-top)
		)  ; progn
;;
	:after (close cold)
;;
;;
	(do-test "read-char-no-hang returns nil standard-input"
 		(null (read-char-no-hang))
	)  ; do-test "read-char-no-hang returns nil on standard-input"
;;
	(do-test "read-char-no-hang on string stream"
		(let	((*standard-input* cold))
;; MAPCAR and EVERY constructs didn't work on this.  Maybe it was timing.
			(and
				(char= #\1 (read-char-no-hang))  ; try default and explicitly-specified input streams.
				(char= #\space (read-char-no-hang cold))
				(char= #\newline (read-char-no-hang))
				(char= #\2 (read-char-no-hang cold))
				(char= #\space (read-char-no-hang))
				;; Try eof-value.
				(= 0 (read-char-no-hang cold nil 0))
				(expect-errors (error) (read-char-no-hang))
			)  ; and
		)  ; let
	)  ; do-test "read-char-no-hang on string stream"
;;
	(do-test "read-char-no-hang recursive-p test"
		(and
			(string= "top" (read-from-string "@@1"))
			(string= "recursive" (read-from-string "#@1"))
		)  ; and
	)  ; do-test "read-char-no-hang recursive-p test"
)  ; do-test-group
STOP

