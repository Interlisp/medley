;; Function To Be Tested: read-preserving-whitespace
;;
;; Source:        CLtL p. 376
;;
;; Chapter 22: Input/Output		Section 2.1: Input from Character Streams
;;
;; Created By:    Peter Reidy
;;
;; Creation Date: 7 November 86
;;
;; Last Update: 23-Mar-87 by van Melle
;;
;; Filed As:      {eris}<lispcore>cml>test>22-2-1-read-preserving-whitespace.test
;;
;; Syntax: read-preserving-whitespace &optional input-stream eof-error-p eof-value recursive-p
;;            
;; Function Description: reads the printed representation of an object from input-stream, builds an object and returns it, preserving the character that ended the extended token. 
;;
;; Argument(s):	input-stream: a stream
;;			eof-error-p: if true, signal an error at end-of-file.
;;			eof-value: if eof-error-p is false, return this value at end-of-file.
;;			recursive-p: if true, this is an embedded call, not top-level. 
;;
;; Returns: the lisp object or eof-value.			 
;;

(do-test basic-read-test
   (and (with-input-from-string (s "foo bar")
                (read s)		; read should throw the whitespace away
                (eq (read-char s) #\b))
        (with-input-from-string (s "foo bar")
                (read-preserving-whitespace s)
                (eq (read-char s) #\Space))
        (with-input-from-string (s "foo(bar)")
                (read s)		; read better not throw ALL terminators away
                (eq (read-char s) #\())
   ))

(do-test-group
	(read-group
	:before
;; Steele's example, CLtL p. 376
		(test-defun atsign-reader (stream char)
				(declare (ignore char))
				(do ((path	(list (read-preserving-whitespace stream))
						(cons	(progn	(read-char stream nil nil t)
									(read-preserving-whitespace stream)
							)  ; progn
							path
						)  ; cons
					 )
					)
					((not	(char= (peek-char nil stream nil nil t) #\@))
				 	 (cons 'path (nreverse path))
					)
				)  ; do
		)  ; test-defun
	)  ; read-group
	(do-test read-test
	   (let ((*readtable* (copy-readtable))
		    val)
		(set-macro-character #\@ 'atsign-reader)
		(setq val (read-from-string "(zyedh @usr@games@zork @usr@games@boggle)"))
		(and
			(= 3 (length val))
			(listp  (cadr val))
			(listp  (caddr val))
			)  ; and
		)	; let
	)  ; do-test-read-test
)  ; do-test-group


STOP

