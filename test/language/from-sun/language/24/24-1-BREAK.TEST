;; Function To Be Tested: break
;;
;; Source: Guy L Steele's CLTL
;; Section: 24.1 ERRORS (General Error-Signalling Functions)
;; Page: 432
;;
;; Created By:   John Park
;;
;; Creation Date: Nov 5, 1986
;;
;; Last Update:   
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>24-1-break.test
;;
;;
;; Syntax:        (break &optional format-string &rest args)
;;
;; Function Description: This function prints the message and goes directly into the
;; debugger, without allowing any possibility of interception by programmed error
;; handling facilities.  When continued, break returns nil.  It is permissible to call
;; break with no arguments; a suitable default message will be provided. Break is 
;; presumed to be used as a way of signalling errors; it is expected that continuing 
;; from a break will not trigger any unusual recovery action.
;;
;; Argument(s): format-string: Error message .
;;			
;;			Args: 
;;			  
;; Returns:     Error message or NIL
;;
;; Constraints/Limitations: Due to the nature of break function, which enters the
;; debugger (break), this test should be conducted manually to see if correct error
;; messages are returned.  It's unrealistic to execute this kind of test automatically
;; though it is not impossible. Tests requiring user interface are commented out.


(do-test-group ("break-test-setup"
		:before (progn
				(defun command-dispatch (cmd)
					"**Error message is printed if a symbol has no
						property named command**"
					(let ((fn (get cmd 'command)))
						(if (not (null fn))
						(funcall fn)
						(break "The command ~S is unrecognized." cmd))))
				(defun turn-off-val1 () "ABANDON!")

				(setf (symbol-plist 'emergency-shutdown)
						'(command turn-off-val1 switch emergency
							reactor-status 7))
				)
			)

(do-test "break-test-0"
		(fboundp 'break) ; Is the function break defined?
)



;; The following  are tested manually:
;; (do-test "break-test-1" 
;;		(break)) ; Should break and return NIL upon exit from break.
;;
;;
;;(do-test "break-test-2"
;;		(and (command-dispatch 'emergency-shutdown)
;;			  (let ((cmd 'switch))
;;				(if (member cmd (symbol-plist 'emergency-shutdown)) T 
;;					(break "change the emergency-list to include ~S!" cmd)
;;				)
;;			  )
;;			  (if (member 'switch (symbol-plist 'emergency-shutdown))
;;				 (print "Switch function is now activated!!")
;;				 (print "Switch function is still not included. 
;;						Critical Time: 10 minutes before meltdown!!")
;;			  )
;;
;;			(let ((cmd 'shutdown-reactor))
;;				(if (member cmd (symbol-plist 'emergency-shutdown)) T 
;;					(break "change the emergency-list to include ~S!" cmd)
;;				)
;;			  )
;;			(if (member 'shutdown-reactor (symbol-plist 'emergency-shutdown))
;;				 (print "shutdown-reactor function is now activated!!")
;;				 (print "shutdown-reactor function is still not included. 
;;						Critical Time: 10 minutes before meltdown!!")
;;			 )
;;		)
;;)
		 
)


STOP


