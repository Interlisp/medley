;; Function To Be Tested: etypecase
;;
;; Source: Guy L Steele's CLTL
;; Section: 24.3 ERRORS (Special Forms for Exhaustive Case Analysis)
;; Page: 436
;;
;; Created By:   John Park
;;
;; Creation Date: Nov 7, 1986
;;
;; Last Update: Jan 15, 1987  
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>24-3-etypecase.test
;;
;;
;; Syntax:        (etypecase keyform {(type {form}*)}*)
;;
;; Function Description:  This function resembles casetype.  This control construct
;; is similar to typecase, but no explicit otherwise or T clause is permitted.
;; If no clause is satisfied, etypecae signals an error with a message constructed
;; from the clauses.  It is not permissible to continue from this error. 
;; The name of this function stands for "exhaustive type case" or "error-checking
;; type case."
;;
;; Argument(s): Keyform: Key (variable)
;;			(type {form}): type case for error checking
;;			  
;; Returns:      
;;
;; Constraints/Limitations: Due to the nature of etypecase function, which enters
;; the debugger (break), this test should be conducted manually to see if correct 
;; error messages are returned.  Tests requiring user interface are commented out.



(do-test "etypecase-test-0"
		(macro-function 'etypecase) ; Does etypecase have a macro definition?
)

(do-test "etypecase-test1"
		(and (setq x 1/3)
			(= (etypecase x
				 (integer x)
				 (rational x)
				 (symbol (symbol-value x)))
			 	1/3)
		)
) ; This should not break since the clause (rational x) is satisfied.


;; The following should break with the appropriate error message.
;; "Error: The value of X, 1/3, is neither an integer nor a symbol"
;;	(progn (setq x 1/3)
;;		  (etypecase x
;;				 (integer x)
;;				  (symbol (symbol-value x)))
;;		 )	 	

STOP



