;;
;; Function To Be Tested: defconstant
;;
;; Source:        CLtL p. 68 
;; Chapter 5: program structure       Section 3.2: Declaring global variables and named constants
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date:  Nov. 8, 86
;;
;; Last Update:   Nov. 8, 86 
;;
;; Filed As:      {eris}<lispcore>cml>test>5-3-2-defconstant.test
;;
;;
;; Syntax: defconstant NAME INITIAL-VALUE [DOCUMENTATION]               
;;
;; Function Description: defconstant is like defparameter but does assert that the value of the variable name is fixed 
;;					and does license the compiler to build assumptions about the value into ptograms being compiled.					
;;
;; Argument(s):  name - a variable
;;			  initial-value - a lisp form
;;			  documentation - a string        	
;;
;; Returns: NAME             
;;

(do-test "test defconstant - test case copied from page 68 of CLtL"
	(prog2 
		(defconstant *visible-windows-defc1* 0 "Number of windows at least partially visible on the screen")
		(and (zerop *visible-windows-defc1*)
			(equal (documentation '*visible-windows-defc1* 'variable) 
				  "Number of windows at least partially visible on the screen")
		)
	)
)

(do-test "test defconstant 0"
	(=  	
		 (catch 'cat 
				(defconstant *defcons2* (gcd 10 12))
				(let ()
					(throw 'cat (1+ *defcons2*))))
		 3)
)

(do-test-group ( "test defconstant 1"
		:before (progn 
					(defconstant *defcons30* 789)
					
					(defun foo2 ()
						(let ()
							(defun fun  () (let ((a *defcons30* )) (+ (fun1) a)  ))
							(defun fun1 ()  *defcons30* )
							(fun)  ))
			   ))
	(do-test "test defconstant 1"
		(and 
			(= (foo2) (* 2 789))
			(= *defcons30* 789)
		)
	)
)


(do-test  "test defconstant - The initial-value form is evaluated and the result assigned to the variable"

	(let ((j 0) (k 0)) 

		(and

			(progn (defconstant *reshaped-window-defc4* (incf j)) 
				  (= *reshaped-window-defc4*  j 1))
		
			;;(progn (proclaim '(special *reshaped-window-defc5*))
			;;	  (setq *reshaped-window-defc5* 7)
			;;	  (defconstant *reshaped-window-defc5* (incf k))
			;;	  (equal (list *reshaped-window-defc5* k) '(1 1))     )
		)
	)
)


(do-test "test defconstant - with documentation"
		
  (progn

	(defconstant *shrinked-window-defc10* (cos 0) "number of shrinked window-defc10")
	
	(equal (list (documentation '*shrinked-window-defc10* 'variable)
			   (1+ *shrinked-window-defc10*)
			   (documentation '*shrinked-window-defc10* 'variable) )
		  '("number of shrinked window-defc10" 2.0 "number of shrinked window-defc10") )

  )
)

(do-test "test defconstant - the value returned is the name declared"
	(and
		(equal (defconstant *defc12* 1) '*defc12*)
		(equal (defconstant *defc14* 2 "str2") '*defc14*)
	)
)
STOP
