;;
;; Function To Be Tested: defparameter
;;
;; Source:        CLtL p. 68 
;; Chapter 5: program structure       Section 3.2: Declaring global variables and named constants
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date:  Nov. 8, 86
;;
;; Last Update:   Nov. 8, 86 
;;
;; Filed As:      {eris}<lispcore>cml>test>5-3-2-defparameter.test
;;
;;
;; Syntax: defparameter NAME INITIAL-VALUE [DOCUMENTATION]               
;;
;; Function Description: defparameter is similar to defvar, but defparameter requires an initial-value form, always evaluates
;;					the form, and assigns the result to the variable.  defparameter is intended to declare a variable 
;;					that is normally constant but can be changed.  defparameter therefore does not indicate that the 
;;					quantity never changes; in particular, it does not license the compiler to build assumptions about 
;;					the value into programs being compiled.
;;					
;;
;; Argument(s):  name - a variable
;;			  initial-value - a lisp form
;;			  documentation - a string        	
;;
;; Returns: NAME             
;;

(do-test "test defparameter - test case copied from page 68 of CLtL"
	(prog2 
		(defparameter *visible-window-defp1* 0 "Number of window-defp1 at least partially visible on the screen")
		(and (zerop *visible-window-defp1*)
			(equal (documentation '*visible-window-defp1* 'variable) 
				  "Number of window-defp1 at least partially visible on the screen")
		)
	)
)

(do-test "test defparameter - defparameter proclaims variable to be a special 0"
	(= 	
		 (catch 'cat 
				(defparameter *defp2* (gcd 10 12))
				(let ( (*defp2* (lcm 10 12)) )
					(throw 'cat (locally (declare (special *defp2*)) (1+ *defp2*)))
				))
		  61))

(do-test-group ( "test defparameter 1"
		:before (progn 
					(defparameter *defp88* 789)
					(defun foo2 ()
						(let ()
							(defun fun  () (let () (fun1) ))
							(defun fun1 () (locally (declare (special *defp88*)) *defp88*) )
							(fun)  ))
			   ))
	(do-test "test defparameter - defparameter proclaims variable to be a special 1"
		(and 
			(= (foo2) 789)
			(= *defp88* 789)
		)
	)
)


(do-test  "test defparameter - The initial-value form is evaluated and the result assigned to the variable"

	(let ((i 0) (j 0) (k 0)) 

		(and
			(progn (defparameter *reshaped-window-defp4* (incf i))
				  (= i 1)  )

			(progn (defparameter *reshaped-window-defp5* (incf j)) 
				  (= *reshaped-window-defp5* j  1)  )
		
			;;(progn (proclaim '(special *reshaped-window-defp6*))
			;;	  (setq *reshaped-window-defp6* 7)
			;;	  (defparameter *reshaped-window-defp6* (incf k))
			;;	  (equal (list *reshaped-window-defp6* k) '(1 1))  )
		)
	)
)

(do-test "test defparameter - with documentation"
		
  (progn

	(defparameter *shrinked-window-defp10* (cos 0) "number of shrinked window-defp10")
	(equal (list (documentation '*shrinked-window-defp10* 'variable)
			   (1+ *shrinked-window-defp10*)
			   (documentation '*shrinked-window-defp10* 'variable) )
		 '("number of shrinked window-defp10" 2.0 "number of shrinked window-defp10") )
  )
)

(do-test "test defparameter - the value returned is the name declared"
	(and
		(equal (defparameter *defp15* 1) '*defp15*)
		(equal (defparameter *defp18* 2 "str2") '*defp18*)
	)
)
STOP
