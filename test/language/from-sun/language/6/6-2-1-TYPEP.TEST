;; Function To Be Tested: typep
;;
;; Source:        CLtL p. 72
;;
;; Chapter 6: Predicates		Section 2-1: General Type Predicates
;;
;; Created By:    Peter Reidy
;;
;; Creation Date: 19 September 86
;;
;; Last Update:  15 December 86 
;;
;; Filed As:      {eris}<lispcore>cml>test>6-2-1-typep.test
;;
;; Syntax: typep object type
;;           
;; Function Description: returns non-nil or NIL, depending on whether object is of type type.
;;
;; Argument(s):	object - any cml object
;;			type - a type 
;;
;; Returns: non-nil iff object is of type type, else NIL             
;;
(do-test-group typep-test-group
	(do-test try-types-test
;; Run through the standard types (Steele p. 43)
		(and
			(every 'typep (list
				(make-array '(3 3) :displaced-to (make-array '(4 3))) ; array
				(gentemp)			; atom
				(1- most-negative-fixnum) ; bignum
				0				; bit
				'#*1001			; bit-vector
				#\backspace		; character
				'common			; common
				#'cons			; compiled-function
				#c( 6/7 3.00)		; complex
				'( a b c . d)		; cons
				5.00				; double-float
				(random most-positive-fixnum) ; fixnum
				(coerce most-negative-fixnum 'float) ; float
				#'(lambda nil nil)	; function
				(make-hash-table)	; hash-table
				4761				; integer
				:mot-de-clef		; keyword
				'(list)			; list
				37e5				; long-float
				(eq 1 2)			; null
				3.1415926535897932384d0 ; number
				(car(list-all-packages))	; package
				(pathname)			; pathname
				*random-state*		; random state				
				27/60				; ratio
				5				; rational
				(copy-readtable)	; readtable
				'(A 'B "C")		; sequence
;; Breaks; see AR 6494
				(coerce 6 'short-float) ; short-float
				(make-array '(2 2))	; simple-array
				'#*1001			; simple-bit-vector
				"twine"			; simple-string
				(make-array 50 :initial-element 0) ; simple-vector
				.001				; single-float
				#\*				; standard-char
				(make-synonym-stream) ; stream
				(make-array 20 :element-type 'string-char :initial-element #\0) ; string
				#\.				; string-char
				(gentemp)			; symbol
				(not (equal 2 3))	; t
				'#( 5 4 3 2 1)		; vector
			)  ; list
				'(array atom bignum bit bit-vector character common compiled-function complex cons double-float fixnum float function hash-table integer keyword list long-float null number package pathname random-state ratio rational readtable sequence short-float simple-array simple-bit-vector simple-string simple-vector single-float standard-char stream string string-char symbol t vector)
			)  ; every	
;; Type NIL is always nil.
		(not (typep (eq 1 2) 'nil))
		)  ; and
	)  ; do-test-try-types
;; An object may be of more than one type.
	(do-test multi-types-test
		(every 'typep '(5 5 5 5 5) '(integer fixnum number (or integer simple-string) (member 5)))
	)  ; do-test multi-types-test
)  ; do-test-group
STOP

