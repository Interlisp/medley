;; Function To Be Tested: function
;;
;; Source:        Steele's book    Section 7.1.1: Reference        Page: 87
;;
;; Created By:    Karin
;;
;; Creation Date: June 5, 1986
;;
;; Last Update:   June 5, 1986
;;
;; Filed As:      {eris}<lispcore>cml>test>7-1-1-function.test
;;
;;
;; Syntax:                FUNCTION fn
;;
;; Function Description:  FUNCTION returns the functional interpretation of fn.  If fn is a symbol, the 
;;                        function definition associated with that symbol is returned.  If fn is a 
;;                        lambda-expression, then a lexical closure is returned. 
;;
;; Argument(s):           fn - a symbol associated with a function definition or a lambda-expression
;;
;; Returns:               functional interpretation of fn    
;;
(do-test test-function0
    ;;
    ;; the following two test cases were copied from page 87 of CLtL
    ;;
    (and (progn (defun adder (x) (function (lambda (y) (+ x y))))
                (setq add3 (adder 3))
                (= (funcall add3 5) 8))
    ;;
         (progn (defun two-funs (x)
                       (list (function (lambda () x))
                             (function (lambda (y) (setq x y)))))
                (setq funs (two-funs 6))
                (and (= (funcall (car funs)) 6)
                     (= (funcall (cadr funs) 43) 43)
                     (= (funcall (car funs)) 43)))))

(do-test test-function1
    (let ((funlist '()))
         (push (function (lambda () 'fun4)) funlist)
         (push (function (lambda () 'fun3)) funlist)
          ;;
          ;;  (function f) is same as #'f
          ;;
         (push #'(lambda () 'fun2) funlist)
         (push #'(lambda () 'fun1) funlist)
         (and (eq (funcall (car funlist)) 'fun1)
              (eq (funcall (cadr funlist)) 'fun2)
              (eq (funcall (caddr funlist)) 'fun3)
              (eq (funcall (cadddr funlist)) 'fun4))))

(do-test-group  (test-function2
				:before (test-defun fun (x) (if (evenp x) (function +) (function -))))
	(do-test "test function2"
		(and
			(let ( (fun1 (fun 2)) )
				(= (funcall fun1 2 3 4 5) 14))

			(let ( (fun2 (fun 3)) )
				(= (funcall fun2 2 3 4 5) -10))
		)
	)
)

STOP

    