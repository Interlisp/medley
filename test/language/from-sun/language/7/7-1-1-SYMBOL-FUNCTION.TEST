;; Function To Be Tested: symbol-function
;;
;; Source:        Steele's book    Section 7.1.1: Reference        Page: 90
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: June 4, 1986
;;
;; Last Update:   June 4, 1986
;;
;; Filed As:      {eris}<lispcore>cml>test>7-1-1-symbol-function.test
;;
;;
;; Syntax:                SYMBOL-FUNCTION symbol
;;
;; Function Description:  SYMBOL-FUNCTION returns the current global function definition named by symbol
;;
;; Argument(s):           symbol - a lisp symbol object
;;
;; Returns:               the current glocal function definition
;;                        an error signal - if the symbol has no function definition    
;;

(do-test "test symbol-function0 - the function returns current global function definition named by symbol"
    ;;
    ;;  when the definitions are objects representing special forms
    ;;
    (every #'(lambda (x) (and (special-form-p x) (symbol-function x)))  '(go  block declare catch throw unwind-protect))
)

(do-test "test symbol-function1 - the function returns current global function definition named by symbol"
    ;;
    ;;  when the definitions are objects representing macros
    ;;
    (every #'(lambda (x) (and (macro-function x) (symbol-function x)))  '(prog prog* defmacro locally and or))
)

(do-test "test symbol-function2 - the function returns current global function definition named by symbol"
    ;;
    ;;  when the definitions are functions
    ;;
  (and 
    (every #'(lambda (x) (and (functionp x) (not (macro-function x)) (not (special-form-p x)) (symbol-function x) ))
	       '(symbol-value symbol-function boundp fboundp special-form-p first second third))

    (=	 (funcall (symbol-function '+) 10 20 30 40 50) 150)
    (equal (funcall (symbol-function  'caar) '((2.8 4) 6 8)) 2.8)
  )
)

;; (do-test "test symbol-function3 - symbol-function cannot access the local function value"
;;     (and 
;;         (flet ((locfun1 () 'loc1) (locfun2 () 'loc2) (locfun3 () 'loc3))
;;                  (notany #'(lambda (x) (nlsetq (symbol-function x))) '(locfun1 locfun2 locfun3)))
;;         (labels ((labfun1 () 1) (labfun2 () 2))
;;                 (notany #'(lambda (x) (nlsetq (symbol-function x))) '(labfun1 labfun2)))))

(do-test-group ( use-SETF-and-SYMBOL-FUNCTION
			:before (progn  (mapcar #'fmakunbound '(mac fun))
						(test-defmacro mac () ''mac)
						(test-defun    fun () 'fun)  ))

	(do-test "test symbol-function4 - use SETF and SYMBOL-FUNCTION to alter the global function definition"
		;;
		;;  when previous definition is a macro (try to redefine a macro as a function)
		;;
		(let (buf)
			(push (mac) buf)
			(setf (symbol-function 'mac) #'(lambda (x y) (block mac (append `(sum of ,x and ,y is ) (list (+ x y))))  ))
			(push (funcall (symbol-function 'mac) 12 1) buf)
			(push (mac 3 -2) buf)
			(equal buf '( (sum of 3 and -2 is 1) (sum of 12 and 1 is 13) mac))
		)
	)

	(do-test "test symbol-function5 - use SETF and SYMBOL-FUNCTION to alter the global function definition"
		;;
		;; when previous definition is a function
		;;
		(let (buf)
			(push (fun) buf)
			(setf (symbol-function 'fun) #'(lambda (x y) (block fun (cons x y))))
			(push (funcall (symbol-function 'fun) 20 40) buf)
			(push (fun 'a 'b) buf)
			(equal buf '(( a . b) (20 . 40) fun))
		)
	)
)	
;;
;;
STOP    