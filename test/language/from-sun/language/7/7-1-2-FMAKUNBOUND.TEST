;; Function To Be Tested: fmakunbound
;;
;; Source:        Steele's book    Section 7.1.2: Assignment        Page: 92
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: June 2, 1986
;;
;; Last Update:   June 2, 1986
;;
;; Filed As:      {eris}<lispcore>cml>test>7-1-2-fmakunbound.test
;;
;;
;; Syntax:                FMAKUNBOUND symbol
;;
;; Function Description:  FMAKUNBOUND causes the global function definition named by symbol to become unbound.
;;
;; Argument(s):           symbol - a lisp object
;;
;; Returns:               symbol - (same as the argument)    
;;
(do-test test-fmakunbound
         ;;
         ;; define some functions
         ;;
  (progn (defun fun1 () 'fun1)
         (defun fun2 (x) (expt x 2))
         (defun fun3 (x y) (cons x y))
         (defun fun4 (x y z) (progn (and (constantp x) (listp y) (special-form-p z))))
         (defun fun5 (w x y z) (let () (- (* w (- x y) z))))
         ;;
         ;; make those functions become unbound
         ;;
         (dolist (x '(fun1 fun2 fun3 fun4 fun5)) (fmakunbound x))
         ;; 
         ;; make sure no function definitions are bound to those symbols
         ;;
         (every #'(lambda (x) (eq nil (fboundp x))) '(fun1 fun2 fun3 fun4 fun5))))

(do-test "test fmakunbound - fmakunbound should return SYMBOL as the result value (p 93)"
         (prog2  (defun fun () 0)
			 (eq (fmakunbound 'fun) 'fun)))


;;(do-test test-fmakunbound1
     ;;
     ;;  tests for some illegal inputs
     ;;
     ;;(every #'(lambda (x) (eq nil (nlsetq (fmakunbound x)))) '(3232 #\a (1 2 3) "string")))


(do-test test-fmakunbound2
     ;;
     ;;  this test case was copied from page 93 of CLtL
     ;;
     (and (defun foo (x) (+ x 1))
          (= (foo 4) 5)
          (prog1 t (fmakunbound 'foo))
          (not (fboundp 'foo))  ))
;;
;;
STOP