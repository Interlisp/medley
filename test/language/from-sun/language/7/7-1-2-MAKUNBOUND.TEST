;; Function To Be Tested: makunbound
;;
;; Source:        Steele's book    Section 7.1.2: Assignment        Page: 92
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: June 4, 1986
;;
;; Last Update:   Feb 4, 1987 removed test on lexically bound vars
;;
;; Filed As:      {eris}<lispcore>cml>test>7-1-2-makunbound.test
;;
;;
;; Syntax:                MAKUNBOUND  symbol
;;
;; Function Description:  MAKUNBOUND causes the dynamic (special) variable named by symbol to become unbound and
;;                        returns symbol as the result value
;;
;; Argument(s):           symbol - a lisp symbol object
;;
;; Returns:               symbol    
;;
(do-test "test makunbound - should return symbol as the result value (page 93 of CLtL)"
	(prog2	(setq a 1)
			(eq (makunbound 'a) 'a)    ))

(do-test "test makunbound 0"
    (and (setq a 1 b 2 c 3 d 4 e 5)
         (every #'makunbound  '(a b c d e))
         (notany #'boundp '(a b c d e))))

;;(do-test " test makunbound - constant symbols are really variables that cannot be changed (p 90 of CLtL)"
    ;;
    ;;  tests for constants
    ;;
    ;;(and (progn (setq a pi) (makunbound 'pi) (= a pi))
    ;;     (progn (setq b multiple-values-limit) (makunbound 'multiple-values-limit) ( = b multiple-values-limit))))


(do-test " test makunbound - for dynamically bound variables"
    (progn (defun fun1 ()
               (let* ((w 'w)
                      (x 'x)
                      (y 'y))
                  (declare (special w x y))
                  
                  (fun2) ))
           (defun fun2 ()
               (declare (special w))
               
               (makunbound 'w)
               (fun3))
           (defun fun3 ()
               (declare (special x))
               
               (makunbound 'x)
               (fun4))
           (defun fun4 ()
               (declare (special x y))
               
               (makunbound 'y)
               (setq x 'xx)
               (fun5))
           (defun fun5 ()
               (declare (special w x y))
               
               (and (not (boundp 'w))
                    (not (boundp 'y))
                    (eq (symbol-value 'x) 'xx)))
           (fun1)))

;;
;;
STOP
          
          
         