;; Function To Be Tested: psetq
;;
;; Source:        Steele's book    Section 7.1.2: Assignment        Page: 92
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: June 4, 1986
;;
;; Last Update:   June 4, 1986
;;
;; Filed As:      {eris}<lispcore>cml>test>7-1-2-psetq.test
;;
;;
;; Syntax:                PSETQ {var form}*
;;
;; Function Description:  SETQ evaluates the forms and assigns the values to the corresponding variables.
;;                        The assignment of variables are performed in parallel. The variables may be lexical
;;                        or special variables.  SETQ returns nil.
;;
;; Argument(s):           {var form}*
;;
;; Returns:               nil    
;;
(do-test "test psetq - return nil if no argument was specified"
    (eq nil (psetq)))

(do-test "test psetq - return nil"
    (and  (eq nil (psetq a 1 b 2 c 3 d 4))
          (equal (list a b c d) '(1 2 3 4))
          (eq nil (psetq a (1+ #3r111) b (gcd 3 7) c (string-upcase "dr.livingston")))
          (equal (list a b c) '(14 1 "DR.LIVINGSTON"))
          (eq nil (psetq a (progn 1 2) b (prog1 #\b 3.99) c (prog2 a b (* 2 a))))
          (equal (list a b c) '(2 #\b 1))))


(do-test "test psetq - forms are parallelly evaluated"
    (and (progn (psetq x 17) (psetq x (+ 1 2 3) y (cons x nil)) (equal (list x y) '(6 (17))))
         (progn (setq a 1 b 2) (psetq a b b a) (equal (list a b) '(2 1)))
         (progn (setq a 10 b 20 c 30 d 40)
                (psetq a (+ a b d) b (- d a b) c (* a b) d (incf c b))
                (equal (list a b c d) '( 70 10 200 50)))))


(do-test "test psetq - assignment performed for both lexical & special variables"
    (let ((a 1) (b 1) (c 1)) (declare (special b))
         (defun funb () (declare (special b)) (psetq b (if (= 1 b) 1000 -1000)))
         (psetq a (incf c 99) c (decf b 99))
         (funb)
         (equal (multiple-value-list (values a b c)) '(100 -1000 -98))))

;; (do-test "test psetq - there must be an even number of argument forms "
;;     (not (or (nlsetq (psetq a)) (nlsetq (psetq a 1 b)) (nlsetq (psetq a 4 (+ 3 4))))))
;;
;; (do-test "test psetq - illegal arguments"
;;    (not (or (nlsetq (psetq 43)) (nlsetq (psetq (3 . 4))) (nlsetq (psetq t nil)) (nlsetq (psetq (1+))))))
;;
;;
STOP