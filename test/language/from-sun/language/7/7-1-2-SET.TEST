;; Function To Be Tested: set
;;
;; Source:        Steele's book    Section 7.1.2: Assignment        Page: 92
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: June 4, 1986
;;
;; Last Update:   June 4, 1986
;;
;; Filed As:      {eris}<lispcore>cml>test>7-1-2-set.test
;;
;;
;; Syntax:                SET symbol value
;;
;; Function Description:  SET causes the dynamic variable named by symbol to take on value as its value.
;;                        It cannot alter the value of a lexically bound variable. SET returns value as 
;;                        its result.
;;
;; Argument(s):           symbol - a lisp symbol object
;;
;; Returns:               value    
;;
(do-test test-set0
    ;;
    ;; tests for global variables
    ;;
    (and  (= (+ (set 'a 1)  (set 'b 2) (set 'c 30) (set 'd 100)) (+ a b c d))
          (progn (setq a 2 b 3) (= (set (if (eq a b) 'c 'd) 100) d))
          (eq (set 'ab&cd (+ (set 'ab 9) (set 'cd 20))) (incf ab cd))
          (progn (set 'foo (list 'a 'b 'c 'd)) 
                 (and (= (list-length foo) (length (list 'a 'b 'c 'd)))
                      (eq (caddr foo) (third '(a b c d)))))))

(do-test test-set1
     ;;
     ;;  tests for dynamically bound variables
     ;;
    (prog ((m '(1 2)) (n '(3 4)) (o '(8 9)) p) (declare (special m n o p))
          (defun funlist () (declare (special m n o p))
                            (set 'p (cons (list m n o) p)))
          (defun funappend () (declare (special m n o p))
                            (set 'p (cons (append m n o) p)))
          (defun funbutlast () (declare (special o p))
                            (set 'p (cons (butlast o) p)) p)
          (funlist)
          (funappend)
          (return (equal (funbutlast) '((8) (1 2 3 4 8 9) ((1 2) (3 4) (8 9)))))))

(do-test test-set2
     ;;
     ;;  tests for lexically bound variables
     ;;  set cannot alter the values of lexically bound variables
     ;;
     (let ((m 1) (n 2) (o 3))
          (set 'm 10) (set 'n 20) (set 'o 30)
          (and (= m 1) (= n 2) (= o 3))))
;;
;;
STOP


  
