;; Function To Be Tested: define-setf-method
;;
;; Source: Guy L Steele's CLTL, Chapter 7 Control Structure
;; Section: 7.2  Generalized Variables
;; Page: 105
;;
;; Created By:   John Park
;;
;; Creation Date: Nov 25, 1986
;;
;; Last Update:   
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>7-2-define-setf-method.test
;;
;;
;; Syntax:        (define-setf-method access-fn lambda-list
;;							{declaration | doc-string}* {form}*)
;;
;; Function Description: This defines how to setf a generalized-variable reference 
;; that is of the form (access-fn..).  Note that define-setf-method differs from
;; the complex form of defsetf in that while the body is being executed the variables
;; in lambda-list are bound to parts of the generalized-variable reference, not to
;; to temporary variables that will be bound to the values of such parts. 
;; In addition, define-setf-method does not have defsetf's restriction that access-fn
;; must be a function or a function-like macrto; an arbitrary defmacro destructring
;; pattern is permitted in lambda-list.
;;
;; Argument(s): access-fn - name of a function of a macro.
;;			lambda-list - subforms of the generalized-variable reference, as
;;				with defmacro.  
;;			form - evaluating the form should generate five values representing
;;				setf method.
;;			
;;			  
;; Returns:    Name of access-fn
;;
;; Constraints/Limitations: none

;; setf method for the form (ldb bytespec int).
;; Recall that the int form must itself be suitable for setf.

(do-test-group ("define-setf-method-setup"
	:before 		(progn (defun test-ldb (bytespec int)
						(ldb bytespec int))
				(setq byte-spec8-0 (byte 8 0))
				(setq byte-spec8-1 (byte 8 1))
				(setq byte-spec8-2 (byte 8 2))
				(setq byte-spec8-3 (byte 8 3))
				(setq byte-spec8-4 (byte 8 4))

			
				)
			)

(do-test "define-setf-method-test"
	(and	(eq 	(define-setf-method test-ldb (bytespec int)
				(multiple-value-bind (temps vals stores
									store-form access-form)
					(get-setf-method int)	;Get SETF method for int.
				  (let ((btemp (gensym))		;Temp var for byte specifier.
						(store (gensym))	;Temp var for byte to store.
						(stemp (first stores))) ;Temp var for int to store.
		;; Return the SETF method for LDB as five values.
			(values (cons btemp temps)
					(cons bytespec vals)
					(list store)
					`(let ((,stemp (dpb ,store ,btemp ,access-form)))
						,store-form
						,store)			;storing form.
					`(ldb ,btemp ,access-form) ;accessing form.
				))))
			'test-ldb)
		(eq (test-ldb byte-spec8-0 15) 15)
		(eq (test-ldb byte-spec8-1 15) 7)
		(eq (test-ldb byte-spec8-2 15) 3)
		(eq (test-ldb byte-spec8-3 15) 1)
		(eq (test-ldb byte-spec8-4 15) 0)
	)
)
)

STOP

		
