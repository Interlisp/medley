;; Functions To Be Tested: defsetf
;;
;; Source:        Steele's book    Section 8.2: Macro definition        
;;			  			    Page: 102 - 105
;;
;; Created By:    Henry Cate III
;;
;; Creation Date: December 2, 1986
;;
;; Last Update:   
;;
;; Filed As:      {eris}<lispcore>cml>test>8-1-defsetf.test
;;
;;
;; Syntax:                (defsetf access-fn {update-fn [doc-string] |
;;						lambda-list (store-variable) 
;;						{declaration | doc-string}* {form}*)
;;
;; Function Description:  defines how to setf a generalized-variable reference 
;;					of the form (access-fn ...).
;;
;; Argument(s):           access-fn - the function or macro to get the data
;;					update-fn - a function or macro, one more argument 
;;							  than access-fn, how put the data
;;					doc-string - for documentation
;;					lambda-list - subforms of the generalized-variable 
;;							  reference, as with defmacro.
;;					store-variable - the value to be stored into 
;;					declaration -
;;					doc-string - for documentation
;;					form - 
;;
;; Returns:                
;; 
;;
;;
;; Comments:			Cann't use FLET in defsetf.


(do-test "try the example from the book, modify so don't mess up others"
	:before (defun my-subseq (sequence start &optional end) 
		(subseq sequence start end))
  (let ((temp1 "this is a string"))
  (and
	(eq 'MY-SUBSEQ (defsetf my-subseq (sequence start &optional end) (new-sequence)
		`(progn (replace ,sequence ,new-sequence :start1 ,start :end1 ,end)
			,new-sequence)))
	(equal "  " (setf (my-subseq temp1 5 7) "  "))
	(equal temp1 "this    a string")
	(equal "is fun " (setf (my-subseq temp1 5) "is fun "))
	(equal temp1 "this is fun ring")
  )))

(do-test "try with both functions defined"
	:before (progn 
	(defun my-nth (n list) "own nth function" (nth n list))
	(defun my-nthf (n list value) (setf (nth n list) value) value))
  (let ((temp1 '(have a nice day)))
  (and
	(eq 'MY-NTH (defsetf my-nth my-nthf "try two functions"))
	(eq 'good (setf (my-nth 2 temp1) 'good))
	(equal temp1 '(have a good day))
  )))




STOP