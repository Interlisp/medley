;; Function To Be Tested: get-setf-method-multiple-value
;;
;; Source: Guy L Steele's CLTL, Chapter 7 Control Structure
;; Section: 7.2  Generalized Variables
;; Page: 107
;;
;; Created By:   John Park
;;
;; Creation Date: Nov 26, 1986
;;
;; Last Update:   
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>7-2-get-setf-method-multiple-value.test
;;
;;
;; Syntax:        (get-setf-method-multiple-value form)
;;
;; Function Description: This returns five values constituting the setf method for form.
;; The form must be a generalized-variable reference. This is the same as get-setf-method
;; except that it does not check the number of store-variable; use this in cases that
;; allow storing multiple values into a generalized variable.
;;
;; Argument(s): form
;;			  
;; Returns:    Five values constituting the setf method for form.
;;
;; Constraints/Limitations: none


(do-test "get-setf-method-multiple-value-test"
	(and (defmacro test-setf-macro (reference value)
			(multiple-value-bind (vars vals stores store-form access-form)
				(get-setf-method-multiple-value reference)
			(declare (ignore access-form))
			`(let* ,(mapcar #'list
						(append vars stores)
						(append vals (list value)))
				,store-form)))
		(setf x 100 y 200 z 300)
		(eq x 100)
		(eq y 200)
		(eq z 300)
		(test-setf-macro x 1000 y 2000 z 3000)
		(eq x 1000)
		(not (eq y 2000))
		(not (eq z 3000))
		(eq (get-setf-method-multiple-value 'test-setf-macro))
		(let ((setf-values (multiple-value-list 
						(get-setf-method-multiple-value 'test-setf-macro))))
			(and (eq (first setf-values) NIL)
				(eq (second setf-values) NIL)
				(symbolp (car (third setf-values))) 
				(equal (fourth setf-values)
			 		(list 'setq 'test-setf-macro (car (third setf-values))))
				(eq (fifth setf-values) 'test-setf-macro)
				
			)
		)
	)

)

STOP

		
