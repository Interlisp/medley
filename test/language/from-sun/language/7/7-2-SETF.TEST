(DO-TEST SETF-OF-A-SYMBOL
   (AND
	(EQ (SETF FOO (QUOTE BAR))(QUOTE BAR))
	(EQ FOO (QUOTE BAR))))
(DO-TEST SETF-CAR
	(LET ((FOO (QUOTE (A . B))))
   (AND
	(EQ (SETF (CAR FOO) (QUOTE BAR)) (QUOTE BAR))
	(EQ (CAR FOO) (QUOTE BAR)))))
(DO-TEST SETF-CDR
	(LET ((FOO (QUOTE (A . B))))
   (AND
	(EQ (SETF (CDR FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (CDR FOO) (QUOTE BAR)))))
(DO-TEST SETF-CAAR
	(LET ((FOO (QUOTE ((A . B) C . D))))
   (AND
	(EQ (SETF (CAAR FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (CAAR FOO) (QUOTE BAR)))))
(DO-TEST SETF-CADR
	(LET ((FOO (QUOTE ((A . B) C . D))))
   (AND
	(EQ (SETF (CADR FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (CADR FOO) (QUOTE BAR)))))
(DO-TEST SETF-CDAR
	(LET ((FOO (QUOTE ((A . B) C . D))))
   (AND
	(EQ (SETF (CDAR FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (CDAR FOO) (QUOTE BAR)))))
(DO-TEST SETF-CDDR
	(LET ((FOO (QUOTE ((A . B) C . D))))
   (AND
	(EQ (SETF (CDDR FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (CDDR FOO) (QUOTE BAR)))))
(DO-TEST SETF-CAAAR
	(LET ((FOO (QUOTE (((A . B) C . D) (E . F) G . H))))
   (AND
	(EQ (SETF (CAAAR FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (CAAAR FOO) (QUOTE BAR)))))
(DO-TEST SETF-CAADR
	(LET ((FOO (QUOTE (((A . B) C . D) (E . F) G . H))))
   (AND
	(EQ (SETF (CAADR FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (CAADR FOO) (QUOTE BAR)))))
(DO-TEST SETF-CADAR
	(LET ((FOO (QUOTE (((A . B) C . D) (E . F) G . H))))
   (AND
	(EQ (SETF (CADAR FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (CADAR FOO) (QUOTE BAR)))))
(DO-TEST SETF-CADDR
	(LET ((FOO (QUOTE (((A . B) C . D) (E . F) G . H))))
   (AND
	(EQ (SETF (CADDR FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (CADDR FOO) (QUOTE BAR)))))
(DO-TEST SETF-CDAAR
	(LET ((FOO (QUOTE (((A . B) C . D) (E . F) G . H))))
   (AND
	(EQ (SETF (CDAAR FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (CDAAR FOO) (QUOTE BAR)))))
(DO-TEST SETF-CDADR
	(LET ((FOO (QUOTE (((A . B) C . D) (E . F) G . H))))
   (AND
	(EQ (SETF (CDADR FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (CDADR FOO) (QUOTE BAR)))))
(DO-TEST SETF-CDDAR
	(LET ((FOO (QUOTE (((A . B) C . D) (E . F) G . H))))
   (AND
	(EQ (SETF (CDDAR FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (CDDAR FOO) (QUOTE BAR)))))
(DO-TEST SETF-CDDDR
	(LET ((FOO (QUOTE (((A . B) C . D) (E . F) G . H))))
   (AND
	(EQ (SETF (CDDDR FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (CDDDR FOO) (QUOTE BAR)))))
(DO-TEST SETF-CAAAAR
	(LET ((FOO (QUOTE ((((A . B) C . D) (E . F) G . H) ((I . J) K . L) (M . N) O . P))))
   (AND
	(EQ (SETF (CAAAAR FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (CAAAAR FOO) (QUOTE BAR)))))
(DO-TEST SETF-CAAADR
	(LET ((FOO (QUOTE ((((A . B) C . D) (E . F) G . H) ((I . J) K . L) (M . N) O . P))))
   (AND
	(EQ (SETF (CAAADR FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (CAAADR FOO) (QUOTE BAR)))))

(DO-TEST SETF-CAADAR
	(LET ((FOO (QUOTE ((((A . B) C . D) (E . F) G . H) ((I . J) K . L) (M . N) O . P))))
   (AND
	(EQ (SETF (CAADAR FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (CAADAR FOO) (QUOTE BAR)))))
(DO-TEST SETF-CAADDR
	(LET ((FOO (QUOTE ((((A . B) C . D) (E . F) G . H) ((I . J) K . L) (M . N) O . P))))
   (AND
	(EQ (SETF (CAADDR FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (CAADDR FOO) (QUOTE BAR)))))
(DO-TEST SETF-CADAAR
	(LET ((FOO (QUOTE ((((A . B) C . D) (E . F) G . H) ((I . J) K . L) (M . N) O . P))))
   (AND
	(EQ (SETF (CADAAR FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (CADAAR FOO) (QUOTE BAR)))))
(DO-TEST SETF-CADADR
	(LET ((FOO (QUOTE ((((A . B) C . D) (E . F) G . H) ((I . J) K . L) (M . N) O . P))))
   (AND
	(EQ (SETF (CADADR FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (CADADR FOO) (QUOTE BAR)))))
(DO-TEST SETF-CADDAR
	(LET ((FOO (QUOTE ((((A . B) C . D) (E . F) G . H) ((I . J) K . L) (M . N) O . P))))
   (AND
	(EQ (SETF (CADDAR FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (CADDAR FOO) (QUOTE BAR)))))
(DO-TEST SETF-CADDDR
	(LET ((FOO (QUOTE ((((A . B) C . D) (E . F) G . H) ((I . J) K . L) (M . N) O . P))))
   (AND
	(EQ (SETF (CADDDR FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (CADDDR FOO) (QUOTE BAR)))))
(DO-TEST SETF-CDAAAR
	(LET ((FOO (QUOTE ((((A . B) C . D) (E . F) G . H) ((I . J) K . L) (M . N) O . P))))
   (AND
	(EQ (SETF (CDAAAR FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (CDAAAR FOO) (QUOTE BAR)))))
(DO-TEST SETF-CDAADR
	(LET ((FOO (QUOTE ((((A . B) C . D) (E . F) G . H) ((I . J) K . L) (M . N) O . P))))
   (AND
	(EQ (SETF (CDAADR FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (CDAADR FOO) (QUOTE BAR)))))
(DO-TEST SETF-CDADAR
	(LET ((FOO (QUOTE ((((A . B) C . D) (E . F) G . H) ((I . J) K . L) (M . N) O . P))))
   (AND
	(EQ (SETF (CDADAR FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (CDADAR FOO) (QUOTE BAR)))))
(DO-TEST SETF-CDADDR
	(LET ((FOO (QUOTE ((((A . B) C . D) (E . F) G . H) ((I . J) K . L) (M . N) O . P))))
   (AND
	(EQ (SETF (CDADDR FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (CDADDR FOO) (QUOTE BAR)))))
(DO-TEST SETF-CDDAAR
	(LET ((FOO (QUOTE ((((A . B) C . D) (E . F) G . H) ((I . J) K . L) (M . N) O . P))))
   (AND
	(EQ (SETF (CDDAAR FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (CDDAAR FOO) (QUOTE BAR)))))
(DO-TEST SETF-CDDADR
	(LET ((FOO (QUOTE ((((A . B) C . D) (E . F) G . H) ((I . J) K . L) (M . N) O . P))))
   (AND
	(EQ (SETF (CDDADR FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (CDDADR FOO) (QUOTE BAR)))))
(DO-TEST SETF-CDDDAR
	(LET ((FOO (QUOTE ((((A . B) C . D) (E . F) G . H) ((I . J) K . L) (M . N) O . P))))
   (AND
	(EQ (SETF (CDDDAR FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (CDDDAR FOO) (QUOTE BAR)))))
(DO-TEST SETF-CDDDDR
	(LET ((FOO (QUOTE ((((A . B) C . D) (E . F) G . H) ((I . J) K . L) (M . N) O . P))))
   (AND
	(EQ (SETF (CDDDDR FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (CDDDDR FOO) (QUOTE BAR)))))

(DO-TEST SETF-FIRST
	(LET (( FOO (QUOTE (1 2 3 4 5 6 7 8 9 10))))
   (AND
	(EQ (SETF (FIRST FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (FIRST FOO) (QUOTE BAR)))))
(DO-TEST SETF-SECOND
	(LET (( FOO (QUOTE (1 2 3 4 5 6 7 8 9 10))))
   (AND
	(EQ (SETF (SECOND FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (SECOND FOO) (QUOTE BAR)))))
(DO-TEST SETF-THIRD
	(LET (( FOO (QUOTE (1 2 3 4 5 6 7 8 9 10))))
   (AND
	(EQ (SETF (THIRD FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (THIRD FOO) (QUOTE BAR)))))
(DO-TEST SETF-FOURTH
	(LET (( FOO (QUOTE (1 2 3 4 5 6 7 8 9 10))))
   (AND
	(EQ (SETF (FOURTH FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (FOURTH FOO) (QUOTE BAR)))))
(DO-TEST SETF-FIFTH
	(LET (( FOO (QUOTE (1 2 3 4 5 6 7 8 9 10))))
   (AND
	(EQ (SETF (FIFTH FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (FIFTH FOO) (QUOTE BAR)))))
(DO-TEST SETF-SIXTH
	(LET (( FOO (QUOTE (1 2 3 4 5 6 7 8 9 10))))
   (AND
	(EQ (SETF (SIXTH FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (SIXTH FOO) (QUOTE BAR)))))
(DO-TEST SETF-SEVENTH
	(LET (( FOO (QUOTE (1 2 3 4 5 6 7 8 9 10))))
   (AND
	(EQ (SETF (SEVENTH FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (SEVENTH FOO) (QUOTE BAR)))))
(DO-TEST SETF-EIGHTH
	(LET (( FOO (QUOTE (1 2 3 4 5 6 7 8 9 10))))
   (AND
	(EQ (SETF (EIGHTH FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (EIGHTH FOO) (QUOTE BAR)))))
(DO-TEST SETF-NINTH
	(LET (( FOO (QUOTE (1 2 3 4 5 6 7 8 9 10))))
   (AND
	(EQ (SETF (NINTH FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (NINTH FOO) (QUOTE BAR)))))
(DO-TEST SETF-TENTH
	(LET (( FOO (QUOTE (1 2 3 4 5 6 7 8 9 10))))
   (AND
	(EQ (SETF (TENTH FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (TENTH FOO) (QUOTE BAR)))))
(DO-TEST SETF-REST
	(LET (( FOO (QUOTE (1 2 3 4 5 6 7 8 9 10))))
   (AND
	(EQ (SETF (REST FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (REST FOO) (QUOTE BAR)))))

(DO-TEST SETF-NTH
	(LET ((FOO (QUOTE (1 2 3 4 5 6 7 8 9 10))))
   (AND
	(EQ (SETF (NTH 6 FOO) (QUOTE BAR))(QUOTE BAR))
	(EQ (NTH 6 FOO) (QUOTE BAR)))))

(DO-TEST SETF-NTHCDR
	(LET ((FOO (QUOTE (1 2 3 4 5 6 7 8 9 10))))
	(AND
		(EQUAL (SETF (NTHCDR 6 FOO) '(A B C)) '(A B C))
		(EQUAL (NTHCDR 6 FOO) '(A B C)))))

(DO-TEST SETF-AREF
	(LET ((FOO
		(MAKE-ARRAY 10 :INITIAL-CONTENTS
			(QUOTE (1 2 3 4 5 6 7 8 9 10)))))
   (AND
	(EQ (SETF (AREF FOO 2) (QUOTE BAR))(QUOTE BAR))
	(EQ (AREF FOO 2) (QUOTE BAR)))))
(DO-TEST SETF-SVREF
	(LET ((FOO
		(VECTOR 10 :INITIAL-CONTENTS
			(QUOTE (1 2 3 4 5 6 7 8 9 10)))))
   (AND
	(EQ (SETF (SVREF FOO 2) (QUOTE BAR))(QUOTE BAR))
	(EQ (SVREF FOO 2) (QUOTE BAR)))))

(DO-TEST SETF-GET
   (AND
	(EQ (SETF (GET (QUOTE FOO) (QUOTE BAR)) (QUOTE BAZ))
	    (QUOTE BAZ))
	(EQ (GET (QUOTE FOO) (QUOTE BAR)) (QUOTE BAZ))))
(DO-TEST SETF-GETF
	(LET ((FOO
		(QUOTE (CRUFT1 CRUFT1 BAR BLETCH BAR2 JUNK))))
   (AND
	(EQ (SETF (GETF FOO (QUOTE BAR)) (QUOTE BAZ))
	    (QUOTE BAZ))
	(EQ (GETF FOO (QUOTE BAR)) (QUOTE BAZ)))))
(DO-TEST SETF-GETHASH
	(LET ((FOO (MAKE-HASH-TABLE)))
   (AND
	(EQ (SETF (GETHASH (QUOTE BAR) FOO) (QUOTE BAZ))
	    (QUOTE BAZ))
	(EQ (GETHASH (QUOTE BAR) FOO) (QUOTE BAZ)))))

(DO-TEST SETF-SYMBOL-FUNCTION
   (AND
	(EQUAL (SETF (SYMBOL-FUNCTION (QUOTE FOO))
			   (QUOTE (LAMBDA (BAR) NIL)))
		  (QUOTE (LAMBDA (BAR) NIL)))
	(EQUAL (SYMBOL-FUNCTION (QUOTE FOO))
		  (QUOTE (LAMBDA (BAR) NIL)))))
(DO-TEST SETF-SYMBOL-VALUE
   (AND
	(EQ (SETF (SYMBOL-VALUE (QUOTE FOO)) (QUOTE BAR))
	    (QUOTE BAR))
	(EQ (SYMBOL-VALUE (QUOTE FOO)) (QUOTE BAR))))
(DO-TEST SETF-SYMBOL-PLIST
   (AND
	(EQUAL (SETF (SYMBOL-PLIST (QUOTE FOO))
		   (QUOTE (CRUFT1 CRUFTPROP1 BAR BLETCH)))
	       (QUOTE (CRUFT1 CRUFTPROP1 BAR BLETCH)))
	(EQUAL (SYMBOL-PLIST (QUOTE FOO))
		  (QUOTE (CRUFT1 CRUFTPROP1 BAR BLETCH)))))
(DO-TEST SETF-MACRO-FUNCTION
   (AND
	(EQUAL (SETF (MACRO-FUNCTION (QUOTE FOO))
		   (QUOTE (LAMBDA (BAR)
				(BQUOTE (CONS (\, BAR) (\, BAR))))))
		  (QUOTE (LAMBDA (BAR)
				(BQUOTE (CONS (\, BAR) (\, BAR))))))
	(EQUAL (MACRO-FUNCTION (QUOTE FOO))
		  (QUOTE (LAMBDA (BAR)
				(BQUOTE (CONS (\, BAR) (\, BAR))))))))

(DO-TEST SETF-CHAR
	(LET ((FOO "A-STRING"))
  (AND
	(EQL (SETF (CHAR FOO 1) #\a) #\a)
	(EQL (CHAR FOO 1) #\a))))
(DO-TEST SETF-SCHAR
	(LET ((FOO "A-STRING"))
  (AND
	(EQL (SETF (SCHAR FOO 1) #\a) #\a)
	(EQL (SCHAR FOO 1) #\a))))

(DO-TEST SETF-BIT
	(LET ((FOO '#*00000000))
  (AND
	(EQL (SETF (BIT FOO 1) 1) 1)
	(EQL (BIT FOO 1) 1))))
(DO-TEST SETF-SBIT
	(LET ((FOO '#*11111111))
  (AND
	(EQL (SETF (BIT FOO 1) 0) 0)
	(EQL (BIT FOO 1) 0))))

(DO-TEST SETF-SUBSEQ
	(LET ((FOO (QUOTE (1 2 3 4 5 6 7 8 9 10))))
  (AND
	(EQUAL (SETF (SUBSEQ FOO 2 4) (QUOTE (BAR BAZ)))
		  (QUOTE (BAR BAZ)))
	(EQUAL (SUBSEQ FOO 2 4) (QUOTE (BAR BAZ))))))

(DO-TEST SETF-LDB
	(LET ((FOO 100000))
  (AND
	(EQL (SETF (LDB (BYTE 8 0) FOO) 42) 42)
	(EQL (LDB (BYTE 8 0) FOO) 42))))
(DO-TEST SETF-MASK-FIELD
	(LET ((FOO 0))
  (AND
	(EQL (SETF (MASK-FIELD (BYTE 8 0) FOO) 42) 42)
	(EQL (MASK-FIELD (BYTE 8 0) FOO) 42))))

(DO-TEST SETF-APPLY-OF-AREF
	(LET ((FOO (MAKE-ARRAY 10
				:INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8 9 10)))))
  (AND
	(EQ (SETF (APPLY (FUNCTION AREF) FOO '(4)) (QUOTE BAR))
	    (QUOTE BAR))
	(EQ (AREF FOO 4) (QUOTE BAR)))))

(DO-TEST SETF-EVAL-ONCE
	(LET ((FOO (MAKE-ARRAY 10
				:INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8 9 10))))
	     (BAR 4))
  (AND
	(EQ (SETF (AREF FOO (INCF BAR)) (QUOTE BAZ))
	    (QUOTE BAZ))
	(EQ (AREF FOO 5) (QUOTE BAZ))
	(EQL BAR 5))))

(DO-TEST PSETF
	(LET ((FOO (QUOTE (A B C)))
		 (B0 -1) (B1 0))
   (AND
	(NULL (PSETF (NTH (INCF B0) FOO) (NTH (INCF B1) FOO)
			   (SECOND FOO) (FIRST FOO)))
	(EQL B0 0) (EQL B1 1)
	(EQUAL FOO (QUOTE (B A C))))))

(DO-TEST SHIFTF
	(LET ((FOO (QUOTE (BAR A B)))
		 (B0 -1) (B1 0) (B2 1))
   (AND
	(EQ (SHIFTF (NTH (INCF B0) FOO)
			  (NTH (INCF B1) FOO)
			  (NTH (INCF B2) FOO)
			  'C)
	    'BAR)
	(EQL B0 0) (EQL B1 1) (EQL B2 2)
	(EQUAL FOO (QUOTE (A B C))))))

(DO-TEST ROTATEF
	(LET ((FOO (QUOTE (C A B)))
		 (B0 -1))
   (AND
	(NULL (ROTATEF (NTH (INCF B0) FOO) (SECOND FOO) (CADDR FOO)))
	(EQL B0 0)
	(EQUAL FOO (QUOTE (A B C))))))

(DO-TEST SETF-OF-MACROLET-THING		; Test for AR 6273
	(LET ((FOO (QUOTE (A B C))))
   (AND
	(EQ (MACROLET ((FOO (X) `(CADR ,X)))
		(SETF (FOO FOO) 'BAR))
	    'BAR)
	(EQUAL FOO (QUOTE (A BAR C))))))

STOP

