;; Function To Be Tested: SHIFTF
;;
;; Source:        Steele's book    
;;               Section 7.2: Generalized Varibles       
;;                Page: 93
;;
;; Created By:   Jim Blum
;;
;;
;;
;;
;; Last Update:   Nov 25, 1986, changes were made to SHIFTF-CAADDR, 
;; 	SHIFTF-GETHASH, SHIFTF-APPLY-OF-AREF and reformatted for readability by John Park
;;
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>7-2-SHIFTF.TEST
;;
;;
;; Syntax:        (shiftf  {place}+ newvalue)
;;
;;
;;
;;
;; The values in place1 through placen are accesed and saved, and newvalue is 
;; evaluated, for a total of n + 1 values in all. Values 2 through n +1 are then stored into
;; place1 through placen, and value 1 (the original value of place1) is returned. It is as if 
;; all the places form a shift register; the newvalue is shifted in from the right, all values 
;; shift over to the left one place, and the value shifted out of place1 is returned.
;;
;;
;;
;;
;; Argument(s):   PLACE - when evaluated accesses a data object in
;; some location and "inverts" it to produce 
;; corresponding form to update the location
;;                NEWVALUE - when evaluated gets stored according to the
;; above update form created.
;;
;; Returns:       the value shifted out of  place1 
;;
;;
;;

    (DO-TEST SHIFTF-OF-A-SYMBOL
      (AND (SETQ FOO 1)
           (EQ (SHIFTF FOO 2) 1)
           (EQ FOO 2))) 
    (DO-TEST SHIFTF-CAR
      (AND (SETQ FOO '(A . B))
           (EQ (SHIFTF (CAR FOO) 'C) 'A)
           (EQUAL FOO '(C . B)))) 
    (DO-TEST SHIFTF-CDR
      (AND (SETQ FOO '(A . B))
           (EQ (SHIFTF (CDR FOO) 'C) 'B)
           (EQUAL FOO '(A . C)))) 
    (DO-TEST SHIFTF-CAAR
      (AND (SETQ FOO '((A . B) C . D))
           (EQ (SHIFTF (CAAR FOO) 'E) 'A)
           (EQUAL FOO '((E . B) C . D)))) 
    (DO-TEST SHIFTF-CADR
      (AND (SETQ FOO '((A . B) C . D))
           (EQ (SHIFTF (CADR FOO) 'E) 'C)
           (EQUAL FOO '((A . B) E . D)))) 
    (DO-TEST SHIFTF-CDAR
      (AND (SETQ FOO '((A . B) C . D))
           (EQ (SHIFTF (CDAR FOO) 'E) 'B)
           (EQUAL FOO '((A . E) C . D)))) 
    (DO-TEST SHIFTF-CDDR
      (AND (SETQ FOO '((A . B) C . D))
           (EQ (SHIFTF (CDDR FOO) 'E) 'D)
           (EQUAL FOO '((A . B) C . E)))) 
    (DO-TEST SHIFTF-CAAAR
      (AND (SETQ FOO '(((A . B) C . D) (E . F) G . H))
           (EQ (SHIFTF (CAAAR FOO) 'I) 'A)
           (EQUAL FOO '(((I . B) C . D) (E . F) G . H)))) 
    (DO-TEST SHIFTF-CAADR
      (AND (SETQ FOO '(((A . B) C . D) (E . F) G . H))
           (EQ (SHIFTF (CAADR FOO) 'I) 'E)
           (EQUAL FOO '(((A . B) C . D) (I . F) G . H)))) 
    (DO-TEST SHIFTF-CADAR
      (AND (SETQ FOO '(((A . B) C . D) (E . F) G . H))
           (EQ (SHIFTF (CADAR FOO) 'I) 'C)
           (EQUAL FOO '(((A . B) I . D) (E . F) G . H)))) 
    (DO-TEST SHIFTF-CADDR
      (AND (SETQ FOO '(((A . B) C . D) (E . F) G . H))
           (EQ (SHIFTF (CADDR FOO) 'I) 'G)
           (EQUAL FOO '(((A . B) C . D) (E . F) I . H)))) 
    (DO-TEST SHIFTF-CDAAR
      (AND (SETQ FOO '(((A . B) C . D) (E . F) G . H))
           (EQ (SHIFTF (CDAAR FOO) 'I) 'B)
           (EQUAL FOO '(((A . I) C . D) (E . F) G . H)))) 
    (DO-TEST SHIFTF-CDADR
      (AND (SETQ FOO '(((A . B) C . D) (E . F) G . H))
           (EQ (SHIFTF (CDADR FOO) 'I) 'F)
           (EQUAL FOO '(((A . B) C . D) (E . I) G . H)))) 
    (DO-TEST SHIFTF-CDDAR
      (AND (SETQ FOO '(((A . B) C . D) (E . F) G . H))
           (EQ (SHIFTF (CDDAR FOO) 'I) 'D)
           (EQUAL FOO '(((A . B) C . I) (E . F) G . H)))) 
    (DO-TEST SHIFTF-CDDDR
      (AND (SETQ FOO '(((A . B) C . D) (E . F) G . H))
           (EQ (SHIFTF (CDDDR FOO) 'I) 'H)
           (EQUAL FOO '(((A . B) C . D) (E . F) G . I)))) 
    (DO-TEST SHIFTF-CAAAAR
      (AND (SETQ FOO '((((A . B) C . D) (E . F) G . H)
                       ((I . J) K . L)
                       (M . N)
                       O . P))
           (EQ (SHIFTF (CAAAAR FOO) 'Q) 'A)
           (EQUAL FOO
                  '((((Q . B) C . D) (E . F) G . H)
                    ((I . J) K . L)
                    (M . N)
                    O . P)))) 
    (DO-TEST SHIFTF-CAAADR
      (AND (SETQ FOO '((((A . B) C . D) (E . F) G . H)
                       ((I . J) K . L)
                       (M . N)
                       O . P))
           (EQ (SHIFTF (CAAADR FOO) 'Q) 'I)
           (EQUAL FOO
                  '((((A . B) C . D) (E . F) G . H)
                    ((Q . J) K . L)
                    (M . N)
                    O . P)))) 
    (DO-TEST SHIFTF-CAADAR
      (AND (SETQ FOO '((((A . B) C . D) (E . F) G . H)
                       ((I . J) K . L)
                       (M . N)
                       O . P))
           (EQ (SHIFTF (CAADAR FOO) 'Q) 'E)
           (EQUAL FOO
                  '((((A . B) C . D) (Q . F) G . H)
                    ((I . J) K . L)
                    (M . N)
                    O . P)))) 
    (DO-TEST SHIFTF-CAADDR
      (AND (SETQ FOO '((((A . B) C . D) (E . F) G . H)
                       ((I . J) K . L)
                       (M . N)
                       O . P))
           (EQ (SHIFTF (CAADDR FOO) 'Q) 'M)
           (EQUAL FOO
                  '((((A . B) C . D) (E . F) G . H)
                    ((I . J) K . L)
                    (Q . N)
                    O . P)))) 
    (DO-TEST SHIFTF-CADAAR
      (AND (SETQ FOO '((((A . B) C . D) (E . F) G . H)
                       ((I . J) K . L)
                       (M . N)
                       O . P))
           (EQ (SHIFTF (CADAAR FOO) 'Q) 'C)
           (EQUAL FOO
                  '((((A . B) Q . D) (E . F) G . H)
                    ((I . J) K . L)
                    (M . N)
                    O . P)))) 
    (DO-TEST SHIFTF-CADADR
      (AND (SETQ FOO '((((A . B) C . D) (E . F) G . H)
                       ((I . J) K . L)
                       (M . N)
                       O . P))
           (EQ (SHIFTF (CADADR FOO) 'Q) 'K)
           (EQUAL FOO
                  '((((A . B) C . D) (E . F) G . H)
                    ((I . J) Q . L)
                    (M . N)
                    O . P)))) 
    (DO-TEST SHIFTF-CADDAR
      (AND (SETQ FOO '((((A . B) C . D) (E . F) G . H)
                       ((I . J) K . L)
                       (M . N)
                       O . P))
           (EQ (SHIFTF (CADDAR FOO) 'Q) 'G)
           (EQUAL FOO
                  '((((A . B) C . D) (E . F) Q . H)
                    ((I . J) K . L)
                    (M . N)
                    O . P)))) 
    (DO-TEST SHIFTF-CADDDR
      (AND (SETQ FOO '((((A . B) C . D) (E . F) G . H)
                       ((I . J) K . L)
                       (M . N)
                       O . P))
           (EQ (SHIFTF (CADDDR FOO) 'Q) 'O)
           (EQUAL FOO
                  '((((A . B) C . D) (E . F) G . H)
                    ((I . J) K . L)
                    (M . N)
                    Q . P)))) 
    (DO-TEST SHIFTF-CDAAAR
      (AND (SETQ FOO '((((A . B) C . D) (E . F) G . H)
                       ((I . J) K . L)
                       (M . N)
                       O . P))
           (EQ (SHIFTF (CDAAAR FOO) 'Q) 'B)
           (EQUAL FOO
                  '((((A . Q) C . D) (E . F) G . H)
                    ((I . J) K . L)
                    (M . N)
                    O . P)))) 
    (DO-TEST SHIFTF-CDADDR
      (AND (SETQ FOO '((((A . B) C . D) (E . F) G . H)
                       ((I . J) K . L)
                       (M . N)
                       O . P))
           (EQ (SHIFTF (CDADDR FOO) 'Q) 'N)
           (EQUAL FOO
                  '((((A . B) C . D) (E . F) G . H)
                    ((I . J) K . L)
                    (M . Q)
                    O . P)))) 
    (DO-TEST SHIFTF-CDDAAR
      (AND (SETQ FOO '((((A . B) C . D) (E . F) G . H)
                       ((I . J) K . L)
                       (M . N)
                       O . P))
           (EQ (SHIFTF (CDDAAR FOO) 'Q) 'D)
           (EQUAL FOO
                  '((((A . B) C . Q) (E . F) G . H)
                    ((I . J) K . L)
                    (M . N)
                    O . P)))) 
    (DO-TEST SHIFTF-CDDADR
      (AND (SETQ FOO '((((A . B) C . D) (E . F) G . H)
                       ((I . J) K . L)
                       (M . N)
                       O . P))
           (EQ (SHIFTF (CDDADR FOO) 'Q) 'L)
           (EQUAL FOO
                  '((((A . B) C . D) (E . F) G . H)
                    ((I . J) K . Q)
                    (M . N)
                    O . P)))) 
    (DO-TEST PSETF-CDDDAR
      (AND (SETQ FOO '((((A . B) C . D) (E . F) G . H)
                       ((I . J) K . L)
                       (M . N)
                       O . P))
           (EQ (SHIFTF (CDDDAR FOO) 'Q) 'H)
           (EQUAL FOO
                  '((((A . B) C . D) (E . F) G . Q)
                    ((I . J) K . L)
                    (M . N)
                    O . P)))) 
    (DO-TEST SHIFTF-CDDDDR
      (AND (SETQ FOO '((((A . B) C . D) (E . F) G . H)
                       ((I . J) K . L)
                       (M . N)
                       O . P))
           (EQ (SHIFTF (CDDDDR FOO) 'Q) 'P)
           (EQUAL FOO
                  '((((A . B) C . D) (E . F) G . H)
                    ((I . J) K . L)
                    (M . N)
                    O . Q)))) 
    (DO-TEST SHIFTF-FIRST
      (AND (SETQ FOO '(1 2 3 4 5 6 7 8 9 10))
           (EQ (SHIFTF (FIRST FOO) 'A) 1)
           (EQUAL FOO '(A 2 3 4 5 6 7 8 9 10)))) 
    (DO-TEST SHIFTF-SECOND
      (AND (SETQ FOO '(1 2 3 4 5 6 7 8 9 10))
           (EQ (SHIFTF (SECOND FOO) 'B) 2)
           (EQUAL FOO '(1 B 3 4 5 6 7 8 9 10)))) 
    (DO-TEST SHIFTF-THIRD
      (AND (SETQ FOO '(1 2 3 4 5 6 7 8 9 10))
           (EQ (SHIFTF (THIRD FOO) 'C) 3)
           (EQUAL FOO '(1 2 C 4 5 6 7 8 9 10)))) 
    (DO-TEST SHIFTF-FOURTH
      (AND (SETQ FOO '(1 2 3 4 5 6 7 8 9 10))
           (EQ (SHIFTF (FOURTH FOO) 'D) 4)
           (EQUAL FOO '(1 2 3 D 5 6 7 8 9 10)))) 
    (DO-TEST SHIFTF-FIFTH
      (AND (SETQ FOO '(1 2 3 4 5 6 7 8 9 10))
           (EQ (SHIFTF (FIFTH FOO) 'E) 5)
           (EQUAL FOO '(1 2 3 4 E 6 7 8 9 10)))) 
    (DO-TEST SHIFTF-SIXTH
      (AND (SETQ FOO '(1 2 3 4 5 6 7 8 9 10))
           (EQ (SHIFTF (SIXTH FOO) 'F) 6)
           (EQUAL FOO '(1 2 3 4 5 F 7 8 9 10)))) 
    (DO-TEST SHIFTF-SEVENTH
      (AND (SETQ FOO '(1 2 3 4 5 6 7 8 9 10))
           (EQ (SHIFTF (SEVENTH FOO) 'G) 7)
           (EQUAL FOO '(1 2 3 4 5 6 G 8 9 10)))) 
    (DO-TEST SHIFTF-EIGHTH
      (AND (SETQ FOO '(1 2 3 4 5 6 7 8 9 10))
           (EQ (SHIFTF (EIGHTH FOO) 'H) 8)
           (EQUAL FOO '(1 2 3 4 5 6 7 H 9 10)))) 
    (DO-TEST SHIFTF-NINTH
      (AND (SETQ FOO '(1 2 3 4 5 6 7 8 9 10))
           (EQ (SHIFTF (NINTH FOO) 'I) 9)
           (EQUAL FOO '(1 2 3 4 5 6 7 8 I 10)))) 
    (DO-TEST SHIFTF-TENTH
      (AND (SETQ FOO '(1 2 3 4 5 6 7 8 9 10))
           (EQ (SHIFTF (TENTH FOO) 'J) 10)
           (EQUAL FOO '(1 2 3 4 5 6 7 8 9 J)))) 
    (DO-TEST SHIFTF-REST
      (AND (SETQ FOO '(1 2 3 4 5 6 7 8 9 10))
           (EQUAL (SHIFTF
                   (REST FOO)
                   '(A B C D E F G H I J))
                  '(2 3 4 5 6 7 8 9 10))
           (EQUAL FOO '(1 A B C D E F G H I J)))) 
    (DO-TEST SHIFTF-NTH
      (AND (SETQ FOO '(0 1 2 3 4 5 6 7 8 9 10))
           (EQ (SHIFTF (NTH 6 FOO) 'A) 6)
           (EQUAL FOO '(0 1 2 3 4 5 A 7 8 9 10)))) 
    (DO-TEST SHIFTF-NTHCDR
      (AND (SETQ FOO '(0 1 2 3 4 5 6 7 8 9 10))
           (EQUAL (SHIFTF
                   (NTHCDR 6 FOO)
                   '(A B C D E F G H I J))
                  '(6 7 8 9 10))
           (EQUAL FOO
                  '(0 1 2 3 4 5 A B C D E F G H I J)))) 
    (DO-TEST SHIFTF-AREF
      (AND (SETQ FOO (MAKE-ARRAY
                      10
                      :INITIAL-CONTENTS
                      '(0 1 2 3 4 5 6 7 8 9)))
           (EQ (SHIFTF (AREF FOO 6) 'A) 6)
           (EQUAL (AREF FOO 6) 'A))) 
    (DO-TEST SHIFTF-SVREF
      (AND (SETQ FOO (VECTOR 0 1 2 3 4 5 6 7 8 9))
           (EQ (SHIFTF (SVREF FOO 6) 'A) 6)
           (EQUAL (SVREF FOO 6) 'A))) 
    (DO-TEST SHIFTF-GET
      (AND (SETF (GET 'FOO 'A) 'B)
           (EQ (SHIFTF (GET 'FOO 'A) 'C) 'B)
           (EQ (GET 'FOO 'A) 'C))) 
    (DO-TEST SHIFTF-GETF
      (AND (SETQ FOO '(B C D E F))
           (EQ (SHIFTF (GETF FOO 'D) 1) 'E)
           (EQUAL FOO '(B C D 1 F)))) 
    (DO-TEST SHIFTF-GETHASH
      (AND (SETQ FOO (MAKE-HASH-TABLE))
           (SETF (GETHASH 'A FOO) 'B)
           (EQ (SHIFTF (GETHASH 'A FOO) 'C) 'B)
           (EQ (GETHASH 'A FOO) 'C))) 
    (DO-TEST SHIFTF-SYMBOL-FUNCTION
      (AND (SETF (SYMBOL-FUNCTION 'FOO) '(LAMBDA
                                          (A)
                                          NIL))
           (EQUAL (SHIFTF
                   (SYMBOL-FUNCTION 'FOO)
                   '(LAMBDA (B) NIL))
                  '(LAMBDA (A) NIL))
           (EQUAL (SYMBOL-FUNCTION 'FOO)
                  '(LAMBDA (B) NIL)))) 
    (DO-TEST SHIFTF-SYMBOL-VALUE
      (AND (SETF (SYMBOL-VALUE 'FOO) 1)
           (EQ (SHIFTF (SYMBOL-VALUE 'FOO) 2) 1)
           (EQ (SYMBOL-VALUE 'FOO) 2))) 
    (DO-TEST SHIFTF-SYMBOL-PLIST
      (AND (SETF (SYMBOL-PLIST 'FOO) '(A B C D))
           (EQUAL (SHIFTF (SYMBOL-PLIST 'FOO) '(E F G H))
                  '(A B C D))
           (EQUAL (SYMBOL-PLIST 'FOO) '(E F G H)))) 
    (DO-TEST SHIFTF-MACRO-FUNCTION
      (AND (SETQ FOO (GENTEMP "FOO"))
           (SETF (MACRO-FUNCTION FOO) '(LAMBDA
                                        (A)
                                        (BQUOTE
                                         (CONS
                                          (|,| A)
                                          (|,| A)))))
           (EQUAL (SHIFTF
                   (MACRO-FUNCTION FOO)
                   '(LAMBDA
                     (B)
                     (BQUOTE (CONS (|,| B) (|,| B)))))
                  '(LAMBDA
                    (A)
                    (BQUOTE (CONS (|,| A) (|,| A)))))
           (EQUAL (MACRO-FUNCTION FOO)
                  '(LAMBDA
                    (B)
                    (BQUOTE (CONS (|,| B) (|,| B))))))) 
    (DO-TEST SHIFTF-CHAR
      (AND (SETQ FOO "A-STRING")
           (EQL (SHIFTF (CHAR FOO 0) #\B) #\A)
           (EQUAL FOO "B-STRING"))) 
    (DO-TEST SHIFTF-SCHAR
      (AND (SETQ FOO "A-STRING")
           (EQL (SHIFTF (SCHAR FOO 0) #\B) #\A)
           (EQUAL FOO "B-STRING"))) 
    (DO-TEST SHIFTF-BIT
      (AND (SETQ FOO #*01010101)
           (EQL (SHIFTF (BIT FOO 1) 0) 1)
           (EQL (BIT FOO 1) 0))) 
    (DO-TEST SHIFTF-SBIT
      (AND (SETQ FOO #*01010101)
           (EQL (SHIFTF (SBIT FOO 1) 0) 1)
           (EQL (SBIT FOO 1) 0))) 
    (DO-TEST SHIFTF-SUBSEQ
      (AND (SETQ FOO '(1 2 3 4 5 6 7 8 9 10))
           (EQUAL (SHIFTF (SUBSEQ FOO 2 4) '(C D))
                  '(3 4))
           (EQUAL FOO '(1 2 C D 5 6 7 8 9 10)))) 
    (DO-TEST SHIFTF-LDB
      (AND (SETQ FOO 100000)
           (EQ (SHIFTF (LDB (BYTE 8 0) FOO) 128) 160)
           (EQ (LDB (BYTE 8 0) FOO) 128))) 
    (DO-TEST PSETF-MASK-FIELD
      (AND (SETQ FOO 100000)
           (EQ (SHIFTF (MASK-FIELD (BYTE 8 0) FOO) 128)
               160)
           (EQ (MASK-FIELD (BYTE 8 0) FOO) 128))) 
    (DO-TEST SHIFTF-APPLY-OF-AREF
      (AND (SETQ FOO (MAKE-ARRAY
                      10
                      :INITIAL-CONTENTS
                      '(1 2 3 4 5 6 7 8 9 10)))
           (EQ (SHIFTF (APPLY #'AREF FOO '(1)) FOO) 2)
           (EQ (AREF FOO 1) FOO))) 
    (DO-TEST PSETF-EVAL-ONCE
      (AND (SETQ FOO (MAKE-ARRAY
                      10
                      :INITIAL-CONTENTS
                      '(0 1 2 3 4 5 6 7 8 9)))
           (SETQ A 4)
           (EQL (SHIFTF (AREF FOO (INCF A)) 'E) 5)
           (EQL (AREF FOO 5) 'E))))

STOP


