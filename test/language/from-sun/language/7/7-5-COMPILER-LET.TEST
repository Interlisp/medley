;; Function To Be Tested: compiler-let
;;
;; Source:        CLtL p. 112 
;; Chapter 7: Control Structure       Section 5: Establishing new variable bindings
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date:  Nov 2, 86
;;
;; Last Update:    Nov 2, 86 
;;
;; Filed As:      {eris}<lispcore>cml>test> 7-5-compiler-let.test
;;
;;
;; Syntax: compiler-let ( {VAR | (VAR VALUE )}*) {FORM}*               
;;
;; Function Description: When executed by the Lisp interpreter, compiler-let behaves exactly like let with all the variable 
;;					bindings implicitly declared special.  When the compiler processes this form, however, no code is compiled
;;					for the bindings; instead, the processing of the body by the compiler is done with the special variables 
;;					bound to the indicated values in the execution context of the compiler.
;;
;; Argument(s): var  - a variable
;;			value - a lisp form
;;			form  - a lisp form    	
;;
;; Returns: anything             
;;

(do-test "test compiler-let - when executed by the interpreter 0"
	(eval-when (eval)
			(equal 
				(compiler-let ((a 1) (b 2) (c 3 ) (d 4))  (list a b c d) )
				'(1 2 3 4)
		     )))

(do-test "test compiler-let - when executed by the interpreter 1"
	(eval-when (eval)
				(compiler-let ((a 1) (b 2) (c 3 ) (d 4) buf) 
						    (let ((a 11) (b 22) (c 33 ) (d 44))
								(set 'b -2)
								(set 'd -4)
								(push (list (locally (declare (special a)) a)
										  (locally (declare (special b)) b) 
										  (locally (declare (special c)) c)
										  (locally (declare (special d)) d) ) buf)
								(push (list a b c d) buf))
							(push (list a b c d) buf)
							(equal buf '( (1 -2 3 -4) (11 22 33 44) (1 -2 3 -4) ) )
				)
	)
)
						
(do-test-group ( "test compiler-let - when executed by the interpreter 2"
		:before 
				(progn 
				   (test-defun foo (x y) (progv '(a b) (list x y)
										(compiler-let ((a (* 2 b)) (b (+ a 4)) (c (- a b)) )  
												    (foo1 a c) 
										)
									))
				   (test-defun foo1 (a1 c1)
								(declare (special b))
								(if (evenp b) (+ a1 c1) (- a1 c1)))
				))
									
	(do-test "test compiler-let - when executed by the interpreter 2"
			(eval-when (eval)
			   (and 
				(= (foo 20 1) 21)
				(= (foo -7 8) 31)
			   )
			)
	)
)
STOP


				