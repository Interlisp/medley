;; Function To Be Tested: typecase
;;
;; Source:        Steele's book    
;;                Section 7.6: Conditionals        
;;                Page: 118
;;
;; Created By:    Bob Bane
;;	             Henry Cate III
;;
;; Creation Date: June 26,1986
;;
;; Last Update:   June 26,1986
;;                October 14,1986 HC3/ documented, and added 
;;                                several more test cases
;;                October 24,1986 HC3/ documented, and added 
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>7-6-TYPECASE.TEST
;;
;;
;; Syntax:        (typecase keyform {(type {form}*)}*)
;;
;;
;; Function Description:
;;     The form keyform is evaluated to produce the key object.  
;; The type of the key is matched against each clause to see if 
;; it is of the correct type.  The forms of the clause which 
;; match are evaluated, and typecase returns what was returned 
;; from the last consequent (or nil if there are none for that 
;; clause.)
;; 
;; 
;; 
;; Argument(s):   KEYFORM - evaluated to build a key object
;;                TYPE - a type(s) against which match keyform
;;                FORM - what is evaluated.
;;
;; Returns:       value(s) of the last evaluated form of 
;;                the selected clause
;;



(do-test "test several types"
    (and
       ; Does if evaluate and return the appropriate things?
       ; Check each type from page 12-13 on Guy Steele's book
       (TYPECASE T (T T))
       (typecase 54 (number T) (T nil))
       (typecase #\g (character T) (T nil))
       (typecase "A STRING" (string T) (T nil))
       (typecase 'symbol (symbol T) (T nil))
       (typecase (list 'hi 'bye) (list T) (T nil))
       (typecase (make-array '(2 3 4)) (array T) (T nil))
       (typecase (make-hash-table) (hash-table T) (T nil))
       (typecase (copy-readtable) (readtable T) (T nil))
       ; some of the early sysouts don't have a lisp package
       (typecase (find-package 'Lisp) (package T) (T nil))
								; put in pathnames?
       (typecase (make-broadcast-stream *terminal-io*) 
          (stream T) (T nil))
       (typecase (make-random-state) (random-state T) (T nil))
								; user defined structures?
								; some functions?
     ))


(do-test "test doesn't fall into another type"
    (and
       ; now make sure doesn't get caught in some other group
       (eq (typecase 54 (character T) (string T) (symbol T) 
            (list T) (array T) (hash-table T)) nil)
       (eq (typecase #\g (string T) (symbol T) (list T)
            (array T) (hash-table T) (readtable T)) nil)
       (eq (typecase "A STRING" (symbol T) (list T) 
             (hash-table T) (readtable T) (package T)) nil)
       (eq (typecase 'symbol (list T) (array T) (hash-table T) 
            (readtable T) (package T) (stream T)) nil)
       (eq (typecase (list 'hi 'bye) (array T) (hash-table T) 
            (readtable T) (package T) (stream T)) nil)
       (eq (typecase (make-array '(2 3 4)) (hash-table T) 
            (readtable T) (package T) (stream T)) nil)
       (eq (typecase (make-hash-table) (readtable T) (package T) 
            (stream T) (random-state T) (number T)) nil)
       (eq (typecase (copy-readtable) (package T) (stream T) 
            (random-state T) (number T) (character T)) nil)
       (eq (typecase (find-package 'Lisp)(stream T) 
            (random-state T) (number T) (character T)) nil)
       (eq (typecase (make-broadcast-stream *terminal-io*) 
            (random-state T) (number T) (character T)) nil)
       (eq (typecase (make-random-state) (number T) 
            (character T) (string T) (symbol T) (list T)) nil)
     ))


(do-test "test able to catch everything"
    (and
       (typecase 54 (string nil) (T T))
       (typecase #\g (number nil) (array nil) (otherwise T))
       (eq (typecase "string" (T nil)) nil)
       ; the test below generated AR 6640
       (eq (typecase 'smile (readtable T) (T)) nil)
     ))


(do-test "test function valid for keyform & return numbers"
    (and
       (typecase (* 10 13) (list T) (number T))
       (eq (typecase (* 5 6) (integer 5) (float 7) 
            (number 9)) 5)
       (eq (typecase (/ 5 6) (integer 5) (float 7)
            (ratio 3) (number 10)) 3)
     ))


(do-test "test can return symbols and strings"
    (and
       (eq (typecase 'foo (symbol 'asymbol) (T nil))
            'asymbol)
       (equal (typecase 'bar (symbol "a string") (T nil))
            "a string")
     ))


(do-test "test able to return multiple values"
    (and
       (let ((casevar 'foo))
          (equal (multiple-value-list
             (typecase casevar
                (symbol (values 'x 'y))
                (t nil)))
             '(x y)))
     ))


(do-test "test local functions valid for keyform"
    (flet ((retnumber nil 5)
           (retsymbol nil 'hello) 
           (retlist nil '(hi bye)))
    (and
       (typecase (retnumber) (number T) (T nil))
       (typecase (retsymbol) (symbol T) (T nil))
       (typecase (retlist) (list T) (T nil))
     )))


(do-test "test values stay set outside of typecase"
     (flet ((retnumber nil 5)
            (retsymbol nil 'hello) 
            (retlist nil '(hi bye)))
     (let ((casevar 'foo)(sideffect nil))
     (and
        (typecase (retnumber) (T (setq sideffect T)))
        (eq sideffect T)
        (typecase (retsymbol) (number nil) (string nil) 
            (symbol (setq sideffect 'foo) T) (T nil))
        (eq sideffect 'foo)
        (eq (typecase casevar
              (number (setq sideffect 'nope))
              (symbol (setq sideffect 'winner) 'okay)
              (otherwise (setq sideffect 'lose) 'so-what))
           'okay)
        (eq sideffect 'winner)
        (eq (typecase (* 5 5) (symbol nil) (list nil)
              (number (setq sideffect 5)) (T nil))
           5)
        (eq sideffect 5)
     ))))


(do-test "test path not taken was not taken"
     (flet ((retnumber nil 5)
            (retsymbol nil 'hello) 
            (retlist nil '(hi bye)))
     (let ((casevar 'foo)(sideffect nil))
     (and
        (eq (typecase (retnumber) 
              (symbol (setq sideffect T))
              (list (setq sideffect 'why))) nil)
        (eq sideffect nil)
        (eq (typecase (retsymbol) 
              (number (setq sideffect 'nil))
              (list (setq sideffect 'he))
              (string (setq sideffect 'foo) T)
              (T 'everythingelse))
            'everythingelse)
        (eq sideffect nil)
        (eq (typecase (retnumber)
              (number (setq sideffect 5))
              (string (setq sideffect 104))
              (symbol (setq sideffect 65)))
           5)
        (eq sideffect 5)
     ))))


(do-test "test the first test created"
     (let ((a-string "foo") (an-atom 'bar)(sideffect nil))
     (and
       ; Does typecase evaluate and return the right things
        (eq (typecase a-string
               (symbol (setq sideffect 'lose))
               (string 'win)
               (t (setq sideffect 'wrong)))
            'win)
         (null sideffect)
         (eq (typecase an-atom
               (string (setq sideffect 'lose))
               ((or number symbol) 'win-again)
               (otherwise (setq sideffect 'wrong)))
           'win-again)
         (null sideffect)
         (eq (typecase a-string
              (symbol (setq sideffect 'nope))
              (number (setq sideffect 'wrong))
              (otherwise 'right))
            'right)
         (null sideffect)
         (equal (multiple-value-list
            (typecase an-atom
                (number (setq sideffect 'nope) (values 'ouch 'ouch))
                (symbol (values 'right 'again))
                (t (setq sideffect 'wrong) (values 'oops 'twice))))
            '(right again))
         (null sideffect)
     )))


STOP
