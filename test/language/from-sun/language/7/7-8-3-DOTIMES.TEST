;; Function To Be Tested: dotimes
;;
;; Source:        Steele's book    
;;                Section 7.8.3: Simple Iteration Constructs     
;;                Page: 126
;;
;; Created By:    Henry Cate III
;;
;; Creation Date: October 23, 1986
;;
;; Last Update:   October 27,1986 HC3/ broke into several tests 
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>7-8-3-dotimes.TEST
;;
;;
;; Syntax:        (dotimes (var countform [result])
;;                       {declaration}* {tag | statement}*)
;;
;;
;; Function Description:
;;     countform is evaluated returning an integer.  Then the body 
;;     is executed, once for each integer from 0 to what counform 
;;     returned, minus one with the var bound to the indexing value.  
;;     Then resultform is evaluated and the result is the value of 
;;     the dotimes form.
;; 
;; 
;; 
;; Argument(s):   COUNTFORM - evaluated to build a list
;;                RESULT - creates the value for dolist
;;                DECLARATION - 
;;                TAG - for go
;;                STATEMENT - where do the work
;;
;; Returns:       If allowed to finish the list DOTIMES will
;;                return the value of RESULT.  If control is
;;                aborted during the iteration, then the  
;;                value of DOLIST depends on how it was aborted.
;;



(do-test "test the simple cases"
    (and
       (dotimes (i 3 T) nil)
       (dotimes (i 2 T) (return T))
       (catch 'looptag (dotimes (i 5) (throw 'looptag t)))
       (eq (dotimes (i 5 i) nil) 5)
       (eq (dotimes (i 4) T) nil)
       (eq (dotimes (i 0 i)) 0)
       (eq (dotimes (i -5 i)) 0)
    ))


(do-test "test it loops the right number of times"
    (let ((tmpcnt 0))
    (and
       (dotimes (i 10 (and (eq i 10) (eq tmpcnt 10))) 
           (setq tmpcnt (+ tmpcnt 1)))
       (eq (setq tmpcnt 0) 0)
       (dotimes (i 6 (and (eq i 6) (eq tmpcnt 6))) 
           (setq tmpcnt (+ tmpcnt 1)))
       (eq (setq tmpcnt 0) 0)
       (dotimes (i 65 (and (eq i 65) (eq tmpcnt 65))) 
           (setq tmpcnt (+ tmpcnt 1)))
    )))


(do-test "test able to return different types of values"
    (and
       (eq (dotimes (i 10 13) nil) 
          13)
       (equal (dotimes (i 19 '(6 1)) nil)
          '(6 1))
       (eq (dotimes (i 21 'KY) nil) 
          'KY)
       (equal (dotimes (i 11 '(6 C J)) nil)
          '(6 C J))
       (eq (dotimes (i 8 #\L) nil) 
          #\L)
       (equal (dotimes (i 5 '(#\L #\L)) nil)
          '(#\L #\L))
       (equal (dotimes (i 9 "MB") nil) 
          "MB")
       (equal (dotimes (i 11 '("a" "b" "c")) nil)
          '("a" "b" "c"))
    ))


(do-test "test able to build integer by function"
       ; again the question about how smart the compilier is
       ; do we really need to have a function here?
    (flet ((Buildnum1 (x) (+ x x)) 
           (Buildnum2 (x) (* x x))
           (Buildnum3 (x) (+ x 5)))
    (let ((sideffect nil))
    (and
       (eq (dotimes (i (buildnum1 3) i)
             (push i sideffect))
          6)
       (equal sideffect '(5 4 3 2 1 0))
       (null (setq sideffect nil))
       (eq (dotimes (i (buildnum2 2) i)
             (push i sideffect))
          4)
       (equal sideffect '(3 2 1 0))
       (null (setq sideffect nil))
       (eq (dotimes (i (buildnum3 1) i)
             (push i sideffect))
          6)
       (equal sideffect '(5 4 3 2 1 0))
       (null (setq sideffect nil))
       (eq (dotimes (i (- (buildnum3 6) (buildnum1 4)) i)
             (push i sideffect))
          3)
       (equal sideffect '(2 1 0))
    ))))


(do-test "test can do several statements inside"
    (let ((sideffect nil))
    (and
       (eq (dotimes (i (+ 3 4) i)
             (push i sideffect) (pop sideffect)
             (push i sideffect) (pop sideffect)
             (push i sideffect))
          7)
       (equal sideffect '(6 5 4 3 2 1 0))
    )))


(do-test "test termination, use when"
    (let ((sideffect nil))
    (and
       (equal (dotimes (i (* 2 10) i)
             (push i sideffect) 
             (when (> i 4) (return "hello")))
          "hello")
       (equal sideffect '(5 4 3 2 1 0))
       (null (setq sideffect nil))
       (null (tagbody (dotimes (i (* 5 5) i)
             (push i sideffect) 
             (when (eq i 4) (go dotag)))
             dotag))
       (equal sideffect '(4 3 2 1 0))
       (null (setq sideffect nil))
       (eq (catch 'looptag
          (dotimes (i (+ 20 20) i)
             (push i sideffect)
             (when (eq i 3) (throw 'looptag #\y))))
          #\y)
       (equal sideffect '(3 2 1 0))
    )))


(do-test "test with unless, case, typecase"
    (let ((sideffect nil))
    (and
       (equal (dotimes (i 6 i)
             (push i sideffect) 
             (unless (< i 4) (return "hello")))
          "hello")
       (equal sideffect '(4 3 2 1 0))
       (null (setq sideffect nil))
       (null (tagbody (dotimes (i 10 i)
             (push i sideffect) 
             (case i 
                 (0 (push (cos 0) sideffect))
                 (1 (push (* i 5) sideffect))
                 (2 (go dotag))))
             dotag))
       (equal sideffect '(2 5 1 1.0 0))
       (null (setq sideffect nil))
       (eq (catch 'looptag
          (dotimes (i 10 i)
             (push i sideffect)
             (typecase i (number (throw 'looptag #\y)))))
          #\y)
       (equal sideffect '(0))
    )))


(do-test "test able to return multiple-values"
       ; first return two symbols, then three characters
    (and
       (equal (multiple-value-list
           (dotimes (i 5 (values 'a 'b 'c)) nil))
         '(a b c))
       (equal (multiple-value-list
           (dotimes (i 5 (values 5 6 7)) nil))
          '(5 6 7))
    ))


STOP
