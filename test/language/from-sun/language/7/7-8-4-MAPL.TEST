;; Function To Be Tested: MAPL
;;
;; Source: Guy L Steele's CLTL
;; Section: 7.8-4 Mapping
;; Page: 128
;;
;; Created By:    Karin M. Sye, Kelly Roach
;;
;; Creation Date: June 27,1986
;;
;; Last Update:   June 27,1986
;;
;; Filed As:      {ERIS}<LISPCORE>CML>TEST>7-8-4-MAPL.TEST
;;
;;
;; Syntax:        (MAPL FUNCTION LIST &REST MORE-LISTS)
;;
;; Function Description:
;; For each these mapping functions,
;; the first argument is a function and the rest must be lists.
;; The function must take as many arguments as there are lists.
;; 
;; MAPCAR operates on successive elements of the lists.
;; First the function is applied to the CAR of each list,
;; then to the CADR of each list, and so on.
;; (Ideally all the lists are the same length; if not,
;; the iteration terminates when the shortest list runs out,
;; and excess elements in other lists are ignored.)
;; The value returned by MAPCAR is a list of the
;; results of the successive calls to the function.
;; For example:
;; 
;;     (MAPCAR #'ABS '(3 -4 2 -5 -6)) => (3 4 2 5 6)
;;     (MAPCAR #'CONS '(A B C) '(1 2 3)) => ((A . 1) (B . 2) (C . 3))
;;     
;; 
;; MAPLIST is like MAPCAR except that the function is applied to
;; the list and successive cdr's of that list rather than to successive
;; elements of the list.
;; For example:
;; 
;;     (MAPLIST #'(LAMBDA (X) (CONS 'FOO X))
;;     	 '(A B C D))
;; 
;;      => ((FOO A B C D) (FOO B C D) (FOO C D) (FOO D))
;;     (MAPLIST #'(LAMBDA (X) (IF (MEMBER (CAR X) (CDR X)) 0 1)))
;;     	 '(A B A C D B C))
;;        => (0 0 1 0 1 1 1)
;;        ;An entry is 1 if the corresponding element of the input
;;        ;  list was the last instance of that element in the input list.
;;     
;; 
;; MAPL and MAPC are like MAPLIST and MAPCAR
;; respectively, except that they do not accumulate the results
;; of calling the function.
;; Compatibility note: In all Lisp systems since Lisp 1.5,
;; MAPL has been called MAP.  In the chapter on sequences
;;
;; it is explained why this was a bad choice.  Here the name MAP
;; is used for the far more useful generic sequence mapper,
;; in closer accordance to the computer science literature,
;; especially the growing body of papers on functional programming.
;; These functions are used when the function is being called merely for its
;; side effects, rather than its returned values.
;; The value returned by MAPL or MAPC is the second argument,
;; that is, the first sequence argument.
;; 
;; MAPCAN and MAPCON are like MAPCAR and MAPLIST respectively,
;; except that they combine the results of
;; the function using function NCONC instead of LIST.  That is,
;; 
;;     (MAPCON F X1 ... XN)
;;        = (APPLY #'NCONC (MAPLIST F X1 ... XN))
;;     
;; and similarly for the relationship between MAPCAN and MAPCAR.
;; Conceptually, these functions allow the mapped function to return
;; a variable number of items to be put into the output list.
;; This is particularly useful for effectively returning zero or one item:
;; 
;;     (MAPCAN #'(LAMBDA (X) (AND (NUMBERP X) (LIST X)))
;;     	'(A 1 B C 3 4 D 5))
;; 
;;      => (1 3 4 5)
;;     
;; In this case the function serves as a filter; this is a standard Lisp
;; idiom using MAPCAN.
;; (The function function REMOVE-IF-NOT might have been useful in this
;; particular context, however.)
;; Remember that NCONC is a destructive operation, and therefore
;; so are MAPCAN and MAPCON; the lists returned by the FUNCTION
;; are altered in order to concatenate them.
;; 
;; Sometimes a DO or a straightforward recursion is preferable to a
;; mapping operation;  however, the mapping functions should be used wherever they
;; naturally apply because this increases the clarity of the code. 
;; 
;; The functional argument to a mapping function must be acceptable
;; to APPLY; it cannot be a macro or the name of a special form.
;; Of course, there is nothing wrong with using a function that has 
;; and  parameters as the functional argument.
;; 
;; Argument(s):   FUNCTION - a function
;;                LIST - a pure list
;;                MORE-LISTS - a pure list
;;
;; Returns:       a pure list
;;



(do-test "test mapl1"
    (let (list1 foo-var bar-var)
         (setq list1 '(foo bar foo bar))
	    (setq list1 (append list1 list1 list1 list1 list1))
         (and (equal (mapl #'(lambda (x) (cond ((evenp (list-length x)) (push (car x) foo-var))
			   			                (t                       (push (car x) bar-var))))
                           list1) list1)
		    (equal foo-var (make-list 10 :initial-element 'foo))
              (equal bar-var (make-list 10 :initial-element 'bar)))))

(do-test "test mapl2"
    (progn (defun fun (l1 l2)
                  (let (result)
                  (and (equal (mapl #'(lambda (x y) (cond ((member (car x) y) 
											   (setq result (append result '(1))))
										       (t                   
											   (setq result (append result '(0))))))
					     l1 l2) l1)   result)))
           (and (equal (fun '(1 2) '(2 2)) '(0 1))
                (eq    (fun '(1 2) nil) nil)
                (equal (fun '(4 2 6 4 2 2 2 6 8) '(4 6 8)) '(1 0 0))
                (equal (fun '(1 3 5 7) '(3 5 1)) '(1 0 0)))))

(do-test "test map13"
    (let (result)
         (defun fun (v w x y z)
                (equal (mapl #'(lambda (n1 n2 n3 n4 n5) (push (append n1 n2 n3 n4 n5) result))
                             z y x w v) z))
         (and (fun '(1 2 4) '(3 5 7) '(2 4 6) '(10 20 30) '(99 88 77))
              (= 3 (list-length result))
              (equal (car result) '(77 30 6 7 4))
              (equal (cadr result) '(88 77 20 30 4 6 5 7 2 4))
              ;
              (prog1 1 (setq result nil))
              (fun '(1 2 4) '(3 5 7) '(2 4 6) '(10 20 30) '())
              (eq result nil)
              ;
              (prog1 1 (setq result nil))
              (fun '(#\l #\k #\n) '("l" "k" "n") '(l k) '((l) (k)) '(88 99 00))
              (= 2 (list-length result))
              (equal (car result) '(99 00 (k) k "k" "n" #\k #\n))
              (equal (cadr result) '(88 99 00 (l) (k) l k "l" "k" "n" #\l #\k #\n)))))

STOP
