;; Function To Be Tested: tagbody
;;
;; Source:        CLtL    Section 7.8.5: The "Program Feature"       Page: 130
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: Oct. 14 ,1986
;;
;; Last Update:   Oct. 14 ,1986
;;
;; Filed As:      {eris}<lispcore>cml>test>7-8-5-tagbody.test
;;
;;
;; Syntax:                tagbody {TAG | STATEMENT}*
;;
;; Function Description:  EACH ELEMENT OF THE BODY IS PROCESSED FROM LEFT TO RIGHT.  A TAG IS IGNORED ; A STATEMENT IS EVALUATED, AND
;;					ITS RESULTS ARE DISCARDED.  IF THE END OF THE BODY IS  REACHED, THE TAGBODY RETURNS NIL. IF (GO TAG) IS 
;;					EVALUATED, CONTROL JUMPS TO THE PART OF THE BODY LABELLED WITH THE TAG.
;;
;; Argument(s):           TAG - a symbol or an integer
;;					STATEMENT - a list
;;
;; Returns:               nil, if the end of the body is reached.    
;;

(do-test "test tagbody - a tag may be a symbol or an integer , and it is ignored during the processing"
	(and
		(eq (tagbody 20) nil)
		(eq (tagbody |tag name|) nil)
		(eq (tagbody another/ tag/ name) nil)
		(eq (tagbody tagbody may have many tags) nil)
		(eq (tagbody the following numbers will be treated as tags 1 2 3 4 5 6 7) nil)
	)
)


(do-test "test tagbody  - if the end of body reached, tagbody returns nil"
  (let ((a 10) (b 20) c)
	(and
		(eq (tagbody) nil)

		(eq (tagbody (incf a 3) (setq a (* a 2)) (decf a) a) nil)
		(= a 25)

		(eq (tagbody (incf b) (go tag1) tag2 (incf b 2) (* b 2) tag11 (setq b 0) tag1 (decf b 10) b) nil)
		(= b 11)

		(eq (tagbody tag (values a b )) nil)

		(eq (tagbody (block  blk  (return-from blk (push  23 c)) (push 34 c))
				   (push 56 c)) nil)
		(equal c '(56 23))
	)
  )
)

(do-test "test tagbody - simple go statment 1"
	(let (a)
			(eq (tagbody 
						 t1 (setq a (cons "t1" a))  (go t33) 
						 t2 (setq a (cons "t2" a))
						 (go done)
					t33   t3 (setq a (cons "t3" a))
						 t4 (setq a (cons "t4" a))
						 t5 (setq a (cons "t5" a))  (go t77)
						 t6 (setq a (cons "t6" a))
					t7   t77 (setq a (cons "t7" a))
						 t8 (setq a (cons "t8" a))
						 t9 (setq a (cons "t9" a))
						 t10 (setq a (cons "t10" a)) (go t2)
						done (setq a (cons "done !!" a))  )  nil)
			
			(equal a '("done !!" "t2" "t10" "t9" "t8" "t7" "t5" "t4" "t3" "t1"))
	)
)


(do-test "test tagbody - simple go statement 2"
	(let ((c '(results)) i1 i2 i3 i4 i5 i6 i7 i8 i9 i10 i11 i12 i13 i14 i15 i16 i17 i18 i19 i20  )

			(setq i1 20 i2 19 i3 18 i4 17 i5 16 i6 15 i7 14 i8 13 i9 12 i10 11
				 i11 10 i12 9 i13 8 i14 7 i15 6 i16 5 i17 4 i18 3 i19 2 i20 1  )

			(equal (block blk
					
					(macrolet ((mac (counter num)
								`(if (> (decf ,counter) 0) (nconc c (list,num)) (go t1))
							))

					   (tagbody 
						
					       t1 (if (> (decf i1) 0) (nconc c (list 1)) (return-from blk c))
						     (mac i2 2)
						     (mac i3 3)
							(mac i4 4)
							(mac i5 5)
							(mac i6 6)
							(mac i7 7)
							(mac i8 8)
							(mac i9 9)
							(mac i10 10)
							(mac i11 11)
							(mac i12 12)
							(mac i13 13)
							(mac i14 14)
							(mac i15 15)
							(mac i16 16)
							(mac i17 17)
							(mac i18 18)
							(mac i19 19)
							(mac i20 20)    
					   )
					 ) 
		              )
			        (append '(results) (mapcon #'(lambda (x) (reverse x)) '(19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1)))
			)	
	)
)

(do-test "test tagbody - go can break up catchers if necessary to get to the target (p131)"

	(flet ((fun (items elt)
			   (let (a)
					(tagbody (catch 'stuff
								(mapcar #'(lambda (x) (if (numberp x) x 
														(progn (push x a) (go lose))))
							    			items)
							)
						lose
							(nconc a '(is not a number))
					)
				(equal a (append (list elt) '(is not a number)))  
			  )
		 ))
		 (and (fun '(1 2 3 #\q) #\q)
			 (fun '(10 20 "st" "fre") "st")
		 )
	)
)

(do-test "test tagbody - use Go to jump to a tagbody that is not the innermost tagbody containing that go"
	
	(let (a)
		(tagbody 
			 	(push "t1" a)
				 (tagbody
						(push "t2" a)

						(tagbody
								(push "t3" a)
								;;
								;;  the inner tag shadows the outer one
								;;
								(go g23)   
								(push "wrong3" a)
							 g23 (push "t23" a)
								(go g10)
				  		 	 g30 (push "t30" a)  
						 )

				 		 g20 (push "t20" a)
						 g23 (push "wrong2" a)  
				 )
	
				g10 (push "g10" a)  
		)
		(equal a '("g10" "t23" "t3" "t2" "t1"))
	)	
)

STOP

			  
	


				




						                     
			
		