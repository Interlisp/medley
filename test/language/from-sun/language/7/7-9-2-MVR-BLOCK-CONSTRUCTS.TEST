;;
;; Functions tested: BLOCK, DOLIST, DOTIMES, DO, PROG 
;;
(do-test "test BLOCK - forms *do* return multiple values when they *should* "

	(and (equal (multiple-value-list (block foo (values 1 2 3 4 5))) '(1 2 3 4 5))
		(equal (multiple-value-list (block nil (defun fun () (ffloor 99.5)) (return-from nil (fun)) t))
			  '(99.0 .5))
		(equal (multiple-value-list (block |exit 1| (defmacro mac () `(fceiling -99.5)) (return-from |exit 1| (mac)) nil))
			  '(-99.0 -.5))
		(equal (multiple-value-list (block |exit 1| (setq a '(mo mo talo son))
										   (multiple-value-call #'values (make-list 4 :initial-element (first a))
																  (make-list 4 :initial-element (last a)) )))
			 '( (mo mo mo mo) ( (son) (son) (son) (son))  ))
	)
)

(do-test "test BLOCK - exactly one value is used, if forms are passed as an argument to a function call"
  (prog2	
	(defun foo (x) (and (equal (list x) (multiple-value-list x)) x))

	(and	(eq (foo (block foo (values 1 2 3 4 5))) 1)
		(eql (foo (block nil (defun fun () (ftruncate 99.5)) (return-from nil (fun)) t)) 99.0)
		(eql (foo (block |exit 1| (defmacro mac () `(fround -99.5)) (return-from |exit 1| (mac)) nil))
			  -100.0)
		(equal (foo (block  |exit 1| (setq a '(mo mo talo son))
										   (multiple-value-call #'values (make-list 4 :initial-element (butlast a))
																  (make-list 4 :initial-element (last a)) )))
			 '( (mo mo talo) (mo mo talo) (mo mo talo) (mo mo talo) ))
	)
  )
)

(do-test "test BLOCK - when forms are used for side-effects"
	(and (equal (progn (setq a '(m n o) b '(w x y)) 
				    (block t (values (intersection a b) (union a b))) 
				    (list a b))
			 '((m n o) (w x y)) ) 

		(equal (let ((a 10)) (block tag (incf a 20) (return-from tag (values-list (list a (* a a))))) (list a 'end-of-block)  )
			'(30 END-OF-BLOCK))
	)
)


(do-test "test DOLIST - forms *do* return multiple values when they *should* "

	(and (equal (multiple-value-list (dolist (x '(1 2 3 4 5) (values x x x x x x)) )) '(nil nil nil nil nil nil))
		(equal (multiple-value-list (dolist (x '() (values 'grouchy 'sneezy 'doc)) (1+ 9))) 
			  '(grouchy sneezy doc))
		(equal (multiple-value-list (dolist (x '(tree bird dog green grass) 99)
									(if (find #\G (symbol-name x)) (return-from nil (values x 'foo1 'foo2)))  ))
			  '(dog foo1 foo2))

		(equal (multiple-value-list (dolist (x '(#c(1 2) #c(4 2) #c(7 4)) 'dummy)
									(if (evenp (realpart x)) (return (values x (imagpart x) (realpart x))))  ))
			  '(#c(4 2) 2 4) )
	)
)

(do-test "test DOLIST - forms *don't* return multiple values when they *shouldn't* "

	(and (equal (multiple-value-list (dolist (x '(1 2 3 4 5) (or (values 9 8 7 x x x) 23)) )) '(9))
		(equal (multiple-value-list (dolist (x '() (cond ((values 'grouchy 'sneezy 'doc)))) (1+ 9))) 
			  '(grouchy))
		(equal (multiple-value-list (dolist (x '(tree bird dog green grass) 99)
									(if (find #\G (symbol-name x)) 
										(return-from nil (cons (values x 'foo1 'foo2) nil)))  ))
			  '((dog)))
		
		(equal (multiple-value-list (dolist (x '(#c(1 2) #c(4 2) #c(7 4)) 'dummy)
									(if (evenp (realpart x)) (return (list (values x (realpart x) (imagpart x)))))  ))
			  '((#c(4 2))) )
	)
)

(do-test "test DOTIMES - forms *do* return multiple values when they *should* "

	(and (equal (multiple-value-list (dotimes (k 0 (values k k k )) )) '(0 0 0))
		(equal (multiple-value-list (dotimes (p 4 (decode-float (float p)) ) (1+ p) )) '(.5 3 1.0))
		(equal (multiple-value-list (dotimes (k 100 t)
									(when (= (lcm k 3) 21) (return (values k (expt k 2))))  ))
			  '(7 49))
		(equal (multiple-value-list (dotimes (w #b1010 'dot)
									(unless (< w 6.0) 
										(return-from nil (values-list (make-list w :initial-element w))))  ))
			  '(6 6 6 6 6 6))
	)
)

(do-test "test DOTIMES - exactly one value is used, if forms are passed as an argument to a function call"
  (prog2	
	(defun foo (x) (and (equal (list x) (multiple-value-list x)) x))
	(and	(eq (foo (dotimes (k 0 (values k k k )) )) 0)
		(eql (foo (dotimes (p 4 (decode-float (float p)) ) (1+ p) )) .5 )
		(= (1+ (foo (dotimes (k 100 t)
						(when (= (lcm k 3) 21) (return (values k (expt k 2))))  )))
		    8)
		(eq (foo (dotimes (w #b1010 'dot)
							(unless (< w 6.0) 
								(return-from nil (values-list (make-list w :initial-element w))))  ))
			  6)
	)
  )
)

(do-test "test DO - forms *do* return multiple values when they *should* "


	(and (equal (multiple-value-list (do ((i 0 (1+ i)) (var nil (cons i var))  )
								 ((= i 5) (values (list-length var) var))     ))
			 '(5 (4 3 2 1 0)) )
		
		(equal (multiple-value-list (do ((j  '("sneezy" "grouchy" "sleepy" "bashful") (cdr j)) (var nil))
								 ((endp j) (values var (reverse var)) ) 
								 (cond ( (find #\s (first j)) (setq var (cons (first j) var)))) ))
			  '(("bashful" "sleepy" "sneezy") ("sneezy" "sleepy" "bashful")) )

		(equal (cdr (multiple-value-list (do ((i 3 (+ 2 i)))
								 	((= i 51) t)
								 	(if (= (gcd i 22) i) (return (decode-float (float i))))  )))
			  '(4 1.0) )
		
		(equal (multiple-value-list (do* ((i 0 (1+ i)) (str "Best wishes to you guys") (size (length str)) )
								  ((= i size) 'fail)
							       (if (char= (char str i) #\y) (return (values i  (fceiling i 2) )))))
			 '(15 8.0)) 
	)
)

(do-test "test DO - exactly one value is used, if forms are passed as an argument to a function call"
  (prog2	
	(defun foo (x) (and (equal (list x) (multiple-value-list x)) x))
	(and	(equal (multiple-value-list (foo ( do ((i 0 (1+ i)) (var nil (cons i var))  )
								       ((= i 5) (values (list-length var) var))     )))
			  '(5))
		
		(equal (multiple-value-list (foo (do ((j  '("sneezy" "grouchy" "sleepy" "bashful") (cdr j)) (var nil))
								 	((endp j) (values var (reverse var)) ) 
								 	(cond ( (find #\s (first j)) (setq var (cons (first j) var)))) )))
			  '(("bashful" "sleepy" "sneezy")) )

		(equal (multiple-value-list (foo (do ((i 3 (+ 2 i)))
								 	((= i 51) t)
								 	(if (= (gcd i 22) i) (return (values i (decode-float (float i)))))  )))
			  '(11) )

		(equal (multiple-value-list (foo (do* ((i 0 (1+ i)) (str "Best wishes to you guys") (size (length str)) )
								  ((= i size) 'fail)
							       (if (char= (char str i) #\y) (return (values i  (fceiling i 2) ))))))
			 '(15 ))
	)
  )
)

(do-test "test PROG - forms *do* return multiple values when they *should* "

	(and (equal (multiple-value-list (prog (a b c (d 1) (e 3) f g) (return (values a b c d e f g))))
			  '(nil nil nil 1 3 nil nil))

		(equal (multiple-value-list (prog ((a #x10) (b #x-20) (c #x30))
									(go exit)
									(decf a #x2) (decf b #x3) (incf c #x4)
								exit (return-from nil (values c b a)) ))
			(list #b110000 #b-100000 #b10000))

		(equal (multiple-value-list (prog ((a #o7) (aa #o10) ( aaa #o20))
								   (setq exit 'exit1 exit1 'exit2)
								   (go exit)
							tag1	   (decf a)
								   (decf aa)
								   (return-from nil (values-list '(another wrong exit))) 
							exit    (incf aaa )
								   (go exit2)
							exit1   (decf a #o10)
								   (return (values 'wrong 'exit))
							exit2   (return (values aaa aa a)  )))
			(list #o21 #o10 #o7))

		(equal (multiple-value-list (prog ((a '(a))  (b '((b)))  (c '(c ((b)) a ((a)))) )
								   (cond ((member a c :test #'equal) (return (values a c)))
									    ((member b c :test #'equal) (return (values b c)) ))))
			 '( ((b)) (c ((b)) a ((a)))  ))
	)
)

(do-test "test PROG - exactly one value is used, if forms are passed as an argument to a function call"
  (prog2	
	(defun foo (x) (and (equal (list x) (multiple-value-list x)) x))
	(and	(eq (foo (prog (a b c (d 1) (e 3) f g) (return (values e  b c d e f g))))
			  3)
		
		(eq (foo (prog ((a #x10) (b #x-20) (c #x30))
					   (go exit)
					   (decf a #x2) (decf b #x3) (incf c #x4)
				   exit (return-from nil (values c b a)) ))
			#b110000)

		(eq (foo (prog ((a #o7) (aa #o10) ( aaa #o20))
								   (setq exit 'exit1 exit1 'exit2)
								   (go exit)
							tag1	   (decf a)
								   (decf aa)
								   (return-from nil (values-list '(another wrong exit))) 
							exit    (incf aaa )
								   (go exit2)
							exit1   (decf a #o10)
								   (return (values 'wrong 'exit))
							exit2   (return (values aaa aa a)  )))
			#o21)

		(equal (foo (prog ((a '(a))  (b '((b)))  (c '(c ((b)) a ((a)))) )
								   (cond ((member a c :test #'equal) (return (values a c)))
									    ((member b c :test #'equal) (return (values b c)) ))))
			 '((b)) )
	)
  )
)
STOP




			
						



			  
		
		
									
