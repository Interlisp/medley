;; Functions To Be Tested: WHEN, UNLESS, CASE, ECASE, CCASE, TYPECASE, ETYPECASE, CTYPECASE
;;
;; Source:     CLtL    
;; Section 	7.9.2: Rules Governing the Passing of Multiple Values
;; Page: 		137
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date: August 6,1986
;;
;; Last Update:  Feb 5, 1987 - Jim Blum - many changes to make this run on the SUN, mostly having to do
;;								with floating pt differences.
;;
;; Filed As:      {eris}<lispcore>cml>test>7-9-2-MVR-IMPLICIT-PROGN-2.test
;;
;;
;; Syntax:                [not applicable]
;;
;; Description: It is often the case that the value of a special form or macro call is defined to be the value of one of
;;			its subforms.  For example, the value of a COND is the value of the last form in the selected clause.
;;			In most such cases, if the subform produces multiple values, then the original form will also produce 
;;			all of those values.  This passing back of multiple values of course has no effect unless eventually one
;;			of the special forms for receiving multiple values is reached.
;;			To be explicit, multiple values can result from a special form under precisely these circumstances: 
;;
;; Argument(s):           [not applicable]
;;
;; Returns:               [not applicable]    
;;
;;
;;
;; Implicit PROGN contexts
;;
;; . The special form PROGN passes backs multiple values resulting from evaluation of the last subform. Other situations
;;   referred to as "implicit progn," where several forms are evaluated and the results of all but the last form are
;;   discarded, also pass back multiple values from the last form.  These situations include the body of a lambda-expression,
;;   in particular those constructed by DEFUN, DEFMACRO, and DEFTYPE.  Also included are bodies of the constructs EVAL-WHEN,
;;   PROGV, LET, LET*, WHEN, UNLESS, BLOCK, MULTIPLE-VALUE-BIND, and CATCH, as well as clauses in such conditional constructs
;;   as CASE,TYPECASE,ECASE,ETYPECASE, CCASE, and CTYPECASE.
;;
;;


(do-test "test WHEN - forms *do* return multiple values when they *should* "

	(and	(equal (multiple-value-list (when (= 2 2.0) (values 1 2 3 4 5))) '(1 2 3 4 5))
		(equal (multiple-value-list (when (stringp "l") (round 4.5))) '(4 .5))
		(equal (multiple-value-list (when (eq (cdr '(9)) nil) (values-list '(xerox flexible benefit account))))
			  '(xerox flexible benefit account))
		(equal (multiple-value-list (when (characterp #\r) (setq a 100 b 3) (floor a b))) '(33 1))
	)
)
(do-test "test WHEN - forms *don't* return multiple values when they *shouldn't* "

	(and (equal (multiple-value-list (when (and (setq a #c(1 1)) (complexp a)) a)) '(#c(1 1)))
		(equal (multiple-value-list (when (consp 'atom) (values 1 2))) '(nil))
		(equal (multiple-value-list (when (and (atom ()) (listp ())) (values-list '(single-value)))) '(single-value))
	)
)
(do-test "test WHEN - exactly one value is used, if forms are passed as an argument to a function call"

	(defun foo (x) (and (equal (list x) (multiple-value-list x)) x))
	(and	(= (foo (when t (ffloor 5 3))) 1.0) 
		(= (foo (when t (setq a 80 b 33) (fceiling a b))) 3.0)
		(= (1+ (when t (when t (values 24 5)))) 25)
		(equal (multiple-value-list (values (when t (ftruncate 4.7)) (when t (fround 5.6)))) '(4.0 6.0))
	)
)
(do-test "test WHEN - when exactly 'n' multiple values are expected, test for n-1, n,and n+1 numbers of values wanted"
	(and (equal ( multiple-value-bind (x) (when t (fceiling 8.5 3)) (list x)) '(3.0))
		(equal (multiple-value-bind (x y) (when t (ceiling 8 3)) (list x y)) '(3 -1))
		(equal (multiple-value-bind (x y z) (when t (ceiling 8 3)) (list x y z)) '(3 -1 nil))
	)
)

(do-test "test WHEN - when forms are used for effect"
	(and 	(equal (progn (setq a 2 b 3) (multiple-value-setq (c d) (when (evenp a) (values (* a b) (complex a b))))
				    (* c d))
		#c(12 18))
		(eq (progn (when t (values-list '(a b c d))) 'end-of-WHEN) 'end-of-WHEN)
	)
)

(do-test "test UNLESS - forms *do* return multiple values when they *should* "
(defmacro mac5 () `(ceiling 7.0 2))
(defun fun () (floor 7.5 2))
	(and	(equal (multiple-value-list (unless (= 1 3) (values 2 4 6 8 10))) '(2 4 6 8 10))
		(equal (multiple-value-list (unless (consp ()) (round 7.5 2))) '(4 -.5))
		(equal (multiple-value-list (unless (member '(a) '(aa bb cc)) (fun))) '(3 1.5))
		(equal (multiple-value-list (unless (endp '(a))  (mac5))) '(4 -1.0))
	)
)
(do-test "test UNLESS - forms *don't* return multiple values when they *shouldn't* "

	(and (equal (multiple-value-list (unless (eq #\a #\A) (values '(is that impossible ?)))) '((is that impossible ?)))
		(equal (multiple-value-list (unless (equal "clock" "CLOCK") (last '(a b c)))) '((c)))
		(equal (multiple-value-list (unless (and t nil) (values (fround 6.9 4)))) '(2.0))
		(equal (multiple-value-list (unless nil (complex 8 7))) '(#c(8 7)))
	)
)

(do-test "test UNLESS - exactly one value is used, if forms are passed as an argument to a function call"
	(defun foo (x) (and (equal (list x) (multiple-value-list x)) x))
	(and	(= (foo (unless nil (setq a 99 b -8) (ffloor b a))) -1.0)
		(= (foo (unless nil (setq a 99.4 b 8.5) (fceiling b a))) 1.0)
		(= (* (foo (unless nil (setq a 75 b 7) (fround a b))) 2) 22.0)
		(equal (complex (foo (unless nil (setq a 75 b 7) (ftruncate a b))) 2.1) #c(10.0 2.1))
	)
)
(do-test "test UNLESS - when exactly 'n' multiple values are expected, test for n-1, n,and n+1 numbers of values wanted"
	(and (equal ( multiple-value-bind (x y z) (unless nil (values-list'( 1 2 3 4))) (list x y z)) '(1 2 3))
		(equal ( multiple-value-bind (w x y z) (unless nil (values-list'( 1 2 3 4))) (list w x y z)) '(1 2 3 4))
		(equal ( multiple-value-bind (v w x y z) (unless nil (values-list'( 1 2 3 4))) (list v w x y z)) '(1 2 3 4 nil))
	)
)

(do-test "test UNLESS - when forms are used for effect"
	(and (eq (progn (setq a 10) (unless nil (values (decf a 2) (decf a ) (decf a))) a) 6)
		(equal (progn (setq a '(1 2 3 4))
				    (values (rplaca a 'a) (rplaca (cdr a) 'b) (rplaca (cddr a) 'c) (rplaca (last a) 'd))
				    a)
			  '(a b c d))
	)
)  

(do-test "test CASE - forms *do* return multiple values when they *should* "

	(and	(equal (multiple-value-list 
					(case 11 	((1 2 3) 'case1)
							((11 22 33) (values 'case2 'case3))
							(otherwise '(case4))))
			'(case2 case3))

		(equal (multiple-value-list
					(case #\m	((#\p #\r #\e #\t #\t #\y) (values-list '(pretty blouse)))
							((#\c #\u #\t #\e) (values-list '(cute toy)))
							((#\m #\e #\l #\o #\d #\y) (values-list '(soft melody)))
							(otherwise (values-list '(wrong !!)))))
			'(soft melody))

		(equal (multiple-value-list
					(case (sqrt 100)	(10 (floor 8 3))
									((20 30) (ceiling 8 3))
									((25.0 10.0) (round 13 7))
									(otherwise  (truncate 999 7)) ))
			'(2 -1))
	)
)
(do-test "test CASE - forms *don't* return multiple values when they *shouldn't* "

	(and	(equal (multiple-value-list	
					(case (setq a 7)	((1 3) (values 10 30))
									((5 7) (cond ((evenp a) (values (* 2 a) (* 3 a)))
											   ( (values (* 4 a) (* 5 a)))))
									(otherwise (values 10 100))))
			'(28))

		(equal (multiple-value-list
					(case 'foo		(foo0	 (ffloor -4 -3))
								(foo  (or (ftruncate -5 -2) 3 2 ))
								(foo3 (fround 7.9))))
			 '(2.0))
	)
)

(do-test "test CASE - exactly one value is used, if forms are passed as an argument to a function call"
  (prog2	
	(defun foo (x) (and (equal (list x) (multiple-value-list x)) x))
			(and	(eq    (foo (case 'a ('A (values 'blocks 'and 'exits)))) 'blocks)
				(eq    (foo (case #\a ( #\d nil) ( #\a (floor 7 -3)))) -3)
				(equal (list (foo (case 100 (10 t) (20 nil) (t (values 9 6 3)))) 99 999) '(9 99 999))
				(eq    (list-length (foo (case 20 (20.0 '(())) (10 '(1 2 3)) (20 (values '(a b c d) '(e f)))))) 4) 
			)
  )
)

(do-test "test CASE - when exactly 'n' multiple values are expected, test for n-1, n,and n+1 numbers of values wanted"
	(and (equal ( multiple-value-bind (a b c d e) 
					(case 'sun ('sun1 ()) 
							 ('sun2 (floor -5 2)) 
							 ('sun  (multiple-value-call #'values (floor -5 2) (truncate 99 7) (round 56 16)))
							 (t (ceiling 1000 99)))
					(list a b c d e))
			 '(-3 1 14 1 4 ))

		(equal ( multiple-value-bind (a b c d e f) 
					(case 'sun ('sun1 ()) 
							 ('sun2 (floor -5 2)) 
							 ('sun  (multiple-value-call #'values (floor -5 2) (truncate 99 7) (round 56 16)))
							 (t (ceiling 1000 99)))
					(list a b c d e f))
			 '(-3 1 14 1 4 -8))
		
		(equal ( multiple-value-bind (a b c d e f g) 
					(case 'sun ('sun1 ()) 
							 ('sun2 (floor -5 2)) 
							 ('sun  (multiple-value-call #'values (floor -5 2) (truncate 99 7) (round 56 16)))
							 (t (ceiling 1000 99)))
					(list a b c d e f g))
			 '(-3 1 14 1 4 -8 nil))
	)
)
(do-test "test CASE - when forms are used for effect"

	(and (equal (progn 	(setq a 2) 
					(case a (1 (defun fun () 'fun1))
						   (2 (defun fun () (values-list '(fun2 fun22))))
						   (3 (defun fun () (ffloor -999 37))))
					(cdr (multiple-value-list (fun))))
			'( fun22))
		(eq (let ((a 83))
				(list-length (multiple-value-list (case (evenp a) ((t) (values 12 34 56))
													    (t (values 00 99 88 77 6 66))))))
			6)
	)
)

(do-test "test ECASE - forms *do* return multiple values when they *should* "

	(and	(equal (multiple-value-list 
					(ecase 11 	((1 2 3) 'ecase1)
							((11 22 33) (values 'ecase2 'ecase3))
							))
			'(ecase2 ecase3))

		(equal (multiple-value-list
					(ecase #\m	((#\p #\r #\e #\t #\t #\y) (values-list '(pretty blouse)))
							((#\c #\u #\t #\e) (values-list '(cute toy)))
							((#\m #\e #\l #\o #\d #\y) (values-list '(soft melody)))
							))
			'(soft melody))

		(equal (multiple-value-list
					(ecase (1+ 9)	(10.0 (floor 8 3))
									((20 30) (ceiling 8 3))
									((25.0 10) (round 13 7))
									 ))
			'(2 -1))
	)
)
(do-test "test ECASE - forms *don't* return multiple values when they *shouldn't* "

	(and	(equal (multiple-value-list	
					(ecase (setq a 7)	((1 3) (values 10 30))
									((5 7) (cond ((evenp a) (values (* 2 a) (* 3 a)))
											   ( (values (* 4 a) (* 5 a)))))
									))
			'(28))

		(equal (multiple-value-list
					(ecase 'foo	(foo0	 (ffloor -4 -3))
								(foo  (or (ftruncate -5 -2) 3 2 ))
								(foo3 (fround 7.9))))
			 '(2.0))
	)
)

(do-test "test ECASE - exactly one value is used, if forms are passed as an argument to a function call"
  (prog2	
	(defun foo (x) (and (equal (list x) (multiple-value-list x)) x))
			(and	(eq    (foo (ecase 'a ('A (values 'blocks 'and 'exits)))) 'blocks)
				(eq    (foo (ecase #\a ( #\d nil) ( #\a (floor 7 -3)))) -3)
				(equal (list (foo (ecase 100 (10 t) (20 nil) (100 (values 9 6 3)))) 99 999) '(9 99 999))
				(eq    (list-length (foo (ecase 20 (20.0 '(())) (10 '(1 2 3)) (20 (values '(a b c d) '(e f)))))) 4) 
			)
  )
)

(do-test "test ECASE - when exactly 'n' multiple values are expected, test for n-1, n,and n+1 numbers of values wanted"
	(and (equal ( multiple-value-bind (a b c d e) 
					(ecase 'sun ('sun1 ()) 
							 ('sun2 (floor -5 2)) 
							 ('sun  (multiple-value-call #'values (floor -5 2) (truncate 99 7) (round 56 16)))
							 ('sun3 (ceiling 1000 99)))
					(list a b c d e))
			 '(-3 1 14 1 4))

		(equal ( multiple-value-bind (a b c d e f) 
					(ecase 'sun ('sun1 ()) 
							 ('sun2 (floor -5 2)) 
							 ('sun  (multiple-value-call #'values (floor -5 2) (truncate 99 7) (round 56 16)))
							 ('sun3 (ceiling 1000 99)))
					(list a b c d e f))
			 '(-3 1 14 1 4 -8))
		
		(equal ( multiple-value-bind (a b c d e f g) 
					(ecase 'sun ('sun1 ()) 
							 ('sun2 (floor -5 2)) 
							 ('sun  (multiple-value-call #'values (floor -5 2) (truncate 99 7) (round 56 16)))
							 ('sun3 (ceiling 1000 99)))
					(list a b c d e f g))
			 '(-3 1 14 1 4 -8 nil))
	)
)
(do-test "test ECASE - when forms are used for effect"

	(and (equal (progn 	(setq a 2) 
					(ecase a (1 (defun fun () 'fun1))
						   (2 (defun fun () (values-list '(fun2 fun22))))
						   (3 (defun fun () (ffloor -999 37))))
					(cdr (multiple-value-list (fun))))
			'( fun22))
		(eq (let ((a 83))
				(list-length (multiple-value-list (ecase (evenp a) ((t) (values 12 34 56))
													    ((nil) (values 00 99 88 77 6 66))))))
			6)
	)
)

(do-test "test CCASE - forms *do* return multiple values when they *should* "

  (let
	(( z '(11 #\m 10)))
	(and	(equal (multiple-value-list 
					(ccase (car z) 	((1 2 3) 'ccase1)
								((11 22 33) (values 'ccase2 'ccase3))
								))
			'(ccase2 ccase3))

		(equal (multiple-value-list
					(ccase (cadr z)	((#\p #\r #\e #\t #\t #\y) (values-list '(pretty blouse)))
								((#\c #\u #\t #\e) (values-list '(cute toy)))
								((#\m #\e #\l #\o #\d #\y) (values-list '(soft melody)))
								))
			'(soft melody))

		(equal (multiple-value-list
					(ccase (caddr z)	(10.0 (floor 8 3))
									((20 30) (ceiling 8 3))
									((25.0 10) (round 13 7))
									 ))
			'(2 -1))
	)
  )
)
(do-test "test CCASE - forms *don't* return multiple values when they *shouldn't* "

  (let
	((a 7) (b 'foo))
	(and	(equal (multiple-value-list	
					(ccase a	((1 3) (values 10 30))
							((5 7) (cond ((evenp a) (values (* 2 a) (* 3 a)))
									   ( (values (* 4 a) (* 5 a)))))
							))
			'(28))

		(equal (multiple-value-list
					(ccase b		(foo0	 (ffloor -4 -3))
								(foo  (or (ftruncate -5 -2) 3 2 ))
								(foo3 (fround 7.9))))
			 '(2.0))
	)
  )
)

(do-test "test CCASE - exactly one value is used, if forms are passed as an argument to a function call"
  (flet	
			(( foo (x) (and (equal (list x) (multiple-value-list x)) x)))
		(let	(( a 'a) (b #\a) (c 100) (d 20))
			(and	(eq    (foo (ccase a ('A (values 'blocks 'and 'exits)))) 'blocks)
				(eq    (foo (ccase b ( #\d nil) ( #\a (floor 7 -3)))) -3)
				(equal (list (foo (ccase c (10 t) (20 nil) (100 (values 9 6 3)))) 99 999) '(9 99 999))
				(eq    (list-length (foo (ccase d (20.0 '(())) (10 '(1 2 3)) (20 (values '(a b c d) '(e f)))))) 4) 
		)	)
  )
)

(do-test "test CCASE - when exactly 'n' multiple values are expected, test for n-1, n,and n+1 numbers of values wanted"

  (let
	(( aa 'sun))
	(and (equal ( multiple-value-bind (a b c d e) 
					(ccase aa	 ('sun1 ()) 
							 ('sun2 (floor -5 2)) 
							 ('sun  (multiple-value-call #'values (floor -5 2) (truncate 99 7) (round 56 16)))
							 ('sun3 (ceiling 1000 99)))
					(list a b c d e))
			 '(-3 1 14 1 4))

		(equal ( multiple-value-bind (a b c d e f) 
					(ccase  aa	 ('sun1 ()) 
							 ('sun2 (floor -5 2)) 
							 ('sun  (multiple-value-call #'values (floor -5 2) (truncate 99 7) (round 56 16)))
							 ('sun3 (ceiling 1000 99)))
					(list a b c d e f))
			 '(-3 1 14 1 4 -8))
		
		(equal ( multiple-value-bind (a b c d e f g) 
					(ccase aa	 ('sun1 ()) 
							 ('sun2 (floor -5 2)) 
							 ('sun  (multiple-value-call #'values (floor -5 2) (truncate 99 7) (round 56 16)))
							 ('sun3 (ceiling 1000 99)))
					(list a b c d e f g))
			 '(-3 1 14 1 4 -8 nil))
	)
  )
)
(do-test "test CCASE - when forms are used for effect"

	(and (equal (let 	(( a 2) )
					(ccase a (1 (defun fun () 'fun1))
						   (2 (defun fun () (values-list '(fun2 fun22))))
						   (3 (defun fun () (ffloor -999 37))))
					(cdr (multiple-value-list (fun))))
			'( fun22))
		(eq (let ((a (evenp 83))) 
				(list-length (multiple-value-list (ccase a ((t) (values 12 34 56))
												  ((nil) (values 00 99 88 77 6 66))))))
			6)
	)
)

(do-test "test TYPECASE - check if forms *do* return multiple values when they *should* "
	
	(and	(equal (multiple-value-list (typecase (car '(100))	(string (values 'str1 'str2))
												(array  (values 'ary1 'ary2))
												(number (values 5 10 15 20))))
			 '(5 10 15 20))
		
		(equal (multiple-value-list (typecase (cdr '(c a b))	(number (values 1 2 3 4))
													((or list character) (values '(1 . 2) '(3 . 4) #\n))
													(complex (values #c(1 2) #c(4 5)))
													(t (values 'something 'is 'wrong)) ))
			 '( (1 . 2) (3 . 4) #\n))
		
		(equal   (multiple-value-list (typecase (caddr '(2 4 "August"))
											((simple-string 10) (round 3.7))
											((integer -2 100) (round  2.3))
											((simple-string 6) (round 4.5))  ))
				'(4 .5))
		
		(equal (multiple-value-list (typecase (second '(2 1 9))
											((integer 2 9) (floor 9 2))
											((float -2.0 9.0) (floor 9 2))
											(complex (truncate 5 4))
											(bit     (truncate 13 -7))
											(t        (values 'something 'else))  ))
				'(-1 6))
	)
)
(do-test "test TYPECASE - forms *don't* return multiple values when they *shouldn't* "

	(and (equal (multiple-value-list (typecase (second '(1200 9.99 #c(5 6) 87))
									((or rational float) (or (values-list '(to all those who strive for excellence)) 99))
									((float  5 6) (values 100 99 98 97))
									((complex integer) (or (values-list '(twinkle twinkle little star)) 999))
									(t (values -10 -20 -30 -40))  ))
				'(to))
		
		(equal (multiple-value-list (typecase (cdr '(m n o p))
									((or string cons) (values (fround 7.9)))
									((vector) (values (ftruncate  7.9)))
									(bit      (values (fceiling 3.4)))
									(t        (values (ffloor -3.4)))  ))
				'(8.0))
	)
)
(do-test "test TYPECASE - exactly one value is used, if forms are passed as an argument to a function call"
  (prog2	
	(defun foo (x) (and (equal (list x) (multiple-value-list x)) x))
			(and (eq    (foo (typecase (second '(a #\r t #\i s t)) ( character (values 88 999 10000)) )) 88)
				(equal (foo (typecase (third  '(a #\r t #\i s t)) (list (values 1 2)) (atom (values 11 22 33))  )) 11)
				(equal (cons (typecase (fourth '(a #\r t #\i s t)) (number ()) (character (fround 3.999)) ) #\%) '(4.0 . #\%))
				(equal (list  (typecase (first '(1 2 #\3 (4))) 
										(list (values 100 200 300))
										(character (values #\a #\b #\c #\d))
										((integer -1 2) (values -1 0 1 2))  ))
					'(-1))
			)
  )
)
(do-test "test TYPECASE - when exactly 'n' multiple values are expected, test for n-1, n,and n+1 numbers of values wanted"
	(and (equal ( multiple-value-bind (w x y z) (typecase (car '(#(1 2 3) #c(2 4)))
									((complex integer) (values-list '(the sweet love story is older than the sea))) 
									((array float) (values-list '( how do I begin to tell you the story)))
									((array t) (values-list '(the simple truth about love)))
									(otherwise (values-list '(love story sung by Andy Willium))) )
							(list w x y z))
			'(the simple truth about))

		(equal ( multiple-value-bind (v w x y z) (typecase (car '(#(1 2 3) #c(2 4)))
									((complex integer) (values-list '(the sweet love story is older than the sea))) 
									((array float) (values-list '( how do I begin to tell you the story)))
									((array t) (values-list '(the simple truth about love)))
									(otherwise (values-list '(love story sung by Andy Willium))) )
							(list v w x y z))
			'(the simple truth about love))

		(equal ( multiple-value-bind (u v w x y z) (typecase (car '(#(1 2 3) #c(2 4)))
									((complex integer) (values-list '(the sweet love story is older than the sea))) 
									((array float) (values-list '( how do I begin to tell you the story)))
									((array t) (values-list '(the simple truth about love)))
									(otherwise (values-list '(love story sung by Andy Willium))) )
							(list u v w x y z))
			'(the simple truth about love nil))
	)
)

(do-test "test TYPECASE - when forms are used for effect"
	(and (eq (progn (setq a 20.0) (typecase a (integer (floor 5 2)) (float (floor 15 2))) 'prog10) 'prog10)
		(eq (progn (setq a 200 ) (typecase a (integer (values 'a 'b )) (float (values 'c 'd))) 'the-end) 'the-end)	
	)
)	

(do-test "test ETYPECASE - check if forms *do* return multiple values when they *should* "
	
	(and	(equal (multiple-value-list (etypecase (car '(100))	(string (values 'str1 'str2))
												(array  (values 'ary1 'ary2))
												(number (values 5 10 15 20))))
			 '(5 10 15 20))
		
		(equal (multiple-value-list (etypecase (cdr '(c a b))	(number (values 1 2 3 4))
													((or list character) (values '(1 . 2) '(3 . 4) #\n))
													(complex (values #c(1 2) #c(4 5)))
													 ))
			 '( (1 . 2) (3 . 4) #\n))
		
		(equal   (multiple-value-list (etypecase (caddr '(2 4 "August"))
											((simple-string 10) (round 3.7))
											((integer -2 100) (round  2.3))
											((simple-string 6) (round 4.5))  ))
				'(4 .5))
		
		(equal (multiple-value-list (etypecase (second '(2 1 9))
											((integer 2 9) (floor 9 2))
											((float -2.0 9.0) (floor 9 2))
											(complex (truncate 5 4))
											(bit     (truncate 13 -7))
											  ))
				'(-1 6))
	)
)
(do-test "test ETYPECASE - forms *don't* return multiple values when they *shouldn't* "

	(and (equal (multiple-value-list (etypecase (second '(1200 9.99 #c(5 6) 87))
									((or rational float) (or (values-list '(to all those who strive for excellence)) 99))
									((float  5 6) (values 100 99 98 97))
									((complex integer) (or (values-list '(twinkle twinkle little star)) 999))
									(bit (values -10 -20 -30 -40))  
			  				   ))
				'(to))
		
		(equal (multiple-value-list (etypecase (cdr '(m n o p))
									((or string cons) (values (fround 7.9)))
									((vector) (values (ftruncate  7.9)))
									(bit      (values (fceiling 3.4)))
									(character        (values (ffloor -3.4)))  ))
				'(8.0))
	)
)
(do-test "test ETYPECASE - exactly one value is used, if forms are passed as an argument to a function call"
  (prog2	
	(defun foo (x) (and (equal (list x) (multiple-value-list x)) x))
			(and (eq    (foo (etypecase (second '(a #\r t #\i s t)) ( character (values 88 999 10000)) )) 88)
				(equal (foo (etypecase (third  '(a #\r t #\i s t)) (list (values 1 2)) (atom (values 11 22 33))  )) 11)
				(equal (cons (etypecase (fourth '(a #\r t #\i s t)) (number ()) (character (fround 3.999)) ) #\%) '(4.0 . #\%))
				(equal (list  (etypecase (first '(1 2 #\3 (4))) 
										(list (values 100 200 300))
										(character (values #\a #\b #\c #\d))
										((integer -1 2) (values -1 0 1 2))  ))
					'(-1))
			)
  )
)
(do-test "test ETYPECASE - when exactly 'n' multiple values are expected, test for n-1, n,and n+1 numbers of values wanted"
	(and (equal ( multiple-value-bind (w x y z) (etypecase (car '(#(1 2 3) #c(2 4)))
									((complex integer) (values-list '(the sweet love story is older than the sea))) 
									((array float) (values-list '( how do I begin to tell you the story)))
									((array t) (values-list '(the simple truth about love)))
									 )
							(list w x y z))
			'(the simple truth about))

		(equal ( multiple-value-bind (v w x y z) (etypecase (car '(#(1 2 3) #c(2 4)))
									((complex integer) (values-list '(the sweet love story is older than the sea))) 
									((array float) (values-list '( how do I begin to tell you the story)))
									((array t) (values-list '(the simple truth about love)))
									 )
							(list v w x y z))
			'(the simple truth about love))

		(equal ( multiple-value-bind (u v w x y z) (etypecase (car '(#(1 2 3) #c(2 4)))
									((complex integer) (values-list '(the sweet love story is older than the sea))) 
									((array float) (values-list '( how do I begin to tell you the story)))
									((array t) (values-list '(the simple truth about love)))
									 )
							(list u v w x y z))
			'(the simple truth about love nil))
	)
)

(do-test "test ETYPECASE - when forms are used for effect"
	(and (eq (progn (setq a 20.0) (etypecase a (integer (floor 5 2)) (float (floor 15 2))) 'prog10) 'prog10)
		(eq (progn (setq a 200 ) (etypecase a (integer (values 'a 'b )) (float (values 'c 'd))) 'the-end) 'the-end)	
	)
)	

(do-test "test CTYPECASE - check if forms *do* return multiple values when they *should* "
	
	(and	(equal (multiple-value-list (ctypecase (car '(100))	(string (values 'str1 'str2))
												(array  (values 'ary1 'ary2))
												(number (values 5 10 15 20))))
			 '(5 10 15 20))
		
		(equal (multiple-value-list (ctypecase (cdr '(c a b))	(number (values 1 2 3 4))
													((or list character) (values '(1 . 2) '(3 . 4) #\n))
													(complex (values #c(1 2) #c(4 5)))
													 ))
			 '( (1 . 2) (3 . 4) #\n))
		
		(equal   (multiple-value-list (ctypecase (caddr '(2 4 "August"))
											((simple-string 10) (round 3.7))
											((integer -2 100) (round  2.3))
											((simple-string 6) (fround 4.5))  ))
				'(4.0 .5))
		
		(equal (multiple-value-list (ctypecase (second '(2 1 9))
											((integer 2 9) (floor 9 2))
											((float -2.0 9.0) (ffloor 9 2))
											(complex (truncate 5 4))
											(bit     (truncate 13 -7))
											  ))
				'(-1 6))
	)
)
(do-test "test CTYPECASE - forms *don't* return multiple values when they *shouldn't* "

	(and (equal (multiple-value-list (ctypecase (third '(1200 9.99 #c(5 6) 87))
									((or rational float) (values-list '(to all those who strive for excellence)))
									((float  5 6) (values 100 99 98 97))
									((complex integer) (or (values-list '(twinkle twinkle little star)) 999))
									(bit (values -10 -20 -30 -40))  ))
				'(twinkle))
		
		(equal (multiple-value-list (ctypecase (cdr '(m n o p))
									((or string cons) (values (round 7.9)))
									((vector) (values (truncate  7.9)))
									(bit      (values (ceiling 3.4)))
									(character        (values (floor -3.4)))  ))
				'(8))
	)
)
(do-test "test CTYPECASE - exactly one value is used, if forms are passed as an argument to a function call"
  (prog2	
	(defun foo (x) (and (equal (list x) (multiple-value-list x)) x))
			(and (eq    (foo (ctypecase (second '(a #\r t #\i s t)) ( character (values 88 999 10000)) )) 88)
				(equal (foo (ctypecase (third  '(a #\r t #\i s t)) (list (values 1 2)) (atom (values 11 22 33))  )) 11)
				(equal (cons (ctypecase (fourth '(a #\r t #\i s t)) (number ()) (character (fround 3.999)) ) #\%) '(4.0 . #\%))
				(equal (list  (ctypecase (first '(1 2 #\3 (4))) 
										(list (values 100 200 300))
										(character (values #\a #\b #\c #\d))
										((integer -1 2) (values -1 0 1 2))  ))
					'(-1))
			)
  )
)
(do-test "test CTYPECASE - when exactly 'n' multiple values are expected, test for n-1, n,and n+1 numbers of values wanted"
	(and (equal ( multiple-value-bind (w x y z) (ctypecase (car '(#(1 2 3) #c(2 4)))
									((complex integer) (values-list '(the sweet love story is older than the sea))) 
									((array float) (values-list '( how do I begin to tell you the story)))
									((array t) (values-list '(the simple truth about love)))
									 )
							(list w x y z))
			'(the simple truth about))

		(equal ( multiple-value-bind (v w x y z) (ctypecase (car '(#(1 2 3) #c(2 4)))
									((complex integer) (values-list '(the sweet love story is older than the sea))) 
									((array float) (values-list '( how do I begin to tell you the story)))
									((array t) (values-list '(the simple truth about love)))
									 )
							(list v w x y z))
			'(the simple truth about love))

		(equal ( multiple-value-bind (u v w x y z) (ctypecase (car '(#(1 2 3) #c(2 4)))
									((complex integer) (values-list '(the sweet love story is older than the sea))) 
									((array float) (values-list '( how do I begin to tell you the story)))
									((array t) (values-list '(the simple truth about love)))
									 )
							(list u v w x y z))
			'(the simple truth about love nil))
	)
)

(do-test "test CTYPECASE - when forms are used for effect"
	(and (eq (progn (setq a 20.0) (ctypecase a (integer (floor 5 2)) (float (floor 15 2))) 'prog10) 'prog10)
		(eq (progn (setq a 200 ) (ctypecase a (integer (values 'a 'b )) (float (values 'c 'd))) 'the-end) 'the-end)	
	)
)							
STOP

				
		
								
					
				

						