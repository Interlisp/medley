;;
;; Functions tested: SETQ, MULTIPLE-VALUE-SETQ, PROG1, PROG2   (these functions shouldn't pass back multiple values)
;;                   MULTIPLE-VALUE-PROG1, UNWIND-PROTECT, THE (these functions should    pass back multiple values)
;;	
;; Last Update:  Feb 5, 1987 - Jim Blum - changes in the floating pt area to make it run on the SUN
;;			 
(do-test "test SETQ - forms *don't* return multiple values when they *shouldn't* "
	(and	(equal (multiple-value-list (setq a (values 1 2 3 4 5))) '(1))
		(equal (multiple-value-list (setq a 1 b (ffloor 3.7))) '(3.0))
		(equal (multiple-value-list (setq z "a" y "b" x (values-list '(sunshine on my shoulder make me happy))))
			  '(sunshine))
	)
)

(do-test "test MULTIPLE-VALUE-SETQ - forms *don't* return multiple values when they *shouldn't* "
		;;
		;;    [MULTIPLE-VALUE-SETQ  variables form] P. 137
		;;  MULTIPLE-VALUE-SETQ always returns a single value, which is the first value returned by form
		;;
	(and (let (a b)
		  (equal (multiple-value-list (multiple-value-setq (a b) (values 1 2 3 4 5))) '(1))
		  (eql a 1) (eql b 2))

		(let (x y z w)
		  (equal (multiple-value-list (multiple-value-setq (x y z w) (floor 3.5))) '(3))
		  (eql x 3) (eql y .5) (eq z nil) (eq w nil))

		(let (z y x)
		  (equal (multiple-value-list (multiple-value-setq (z y x) 
									(values-list '(sunshine on my shoulder makes me happy))  ))
			  '(sunshine))
		  (eq z 'sunshine) (eq y 'on) (eq x 'my))

	)
)

(do-test "test PROG1 - forms *don't* return multiple values when they *shouldn't* "

	(and (equal (multiple-value-list (prog1 (values 0 9 8 7 6 5) 4 3 2 1)) '(0))
		(equal (multiple-value-list (prog1 (round 7 2) (ceiling 6 2.8))) '(4))
		(equal (multiple-value-list (prog1 (values-list '(sunshine in my eyes can make my cry)) 10 20)) '(sunshine))
	)
)

(do-test "test PROG2 - forms *don't* return multiple values when they *shouldn't* "

	(and (equal (multiple-value-list (prog2 99 (values 0 9 8 7 6 5) 4 3 2 1)) '(0))
		(equal (multiple-value-list (prog2 999  (round 7 2) (ceiling 6 2.8))) '(4)) 
		(equal (multiple-value-list (prog2 8 (values-list '(sunshine in the water looks so lovely)) 10 20)) '(sunshine))
	)
)

(do-test "test MULTIPLE-VALUE-PROG1 - forms *do* return multiple values when they *should* "
	(and (equal (multiple-value-list (multiple-value-prog1 (values 0 9 8 7 6 5) 4 3 2 1)) '(0 9 8 7 6 5))
		(equal (multiple-value-list (multiple-value-prog1 (round 7 2) (ceiling 6 2.8)))  '(4 -1))
		(equal (multiple-value-list (multiple-value-prog1 (values-list '(sunshine in my eyes can make my cry)) 10 20))
			  '(sunshine in my eyes can make my cry))
	)
)

(do-test "test MULTIPLE-VALUE-PROG1 - exactly one value is used, if forms are passed as an argument to a function call"
  (prog2	
	(defun foo (x) (and (equal (list x) (multiple-value-list x)) x))
	(and	(eq (foo (multiple-value-prog1 (values 0 9 8 7 6 5) 4 3 2 1)) 0)
		(eql (foo (multiple-value-prog1 (round 7 2) (ceiling 6 2.8))) 4)
		(eq (foo (multiple-value-prog1 (values-list '(sunshine in my eyes can make my cry)) 10 20)) `sunshine)
	)
  )
)

(do-test "test MULTIPLE-VALUE-PROG1 - when exactly 'n' multiple values are expected, test for n-1, n,and n+1 numbers of values wanted"
	(and (equal ( multiple-value-bind (a b c d e f g) 
					(multiple-value-prog1 (values-list '(foo foo1 foo2 foo3 foo4 foo5 foo6 foo7)) 'foo8 'foo9)
					(list a b c d e f g) )
		     '(foo foo1 foo2 foo3 foo4 foo5 foo6))

		(equal ( multiple-value-bind (a b c d e f g h) 
					(multiple-value-prog1 (values-list '(foo foo1 foo2 foo3 foo4 foo5 foo6 foo7)) 'foo8 'foo9)
					(list a b c d e f g h) )
		     '(foo foo1 foo2 foo3 foo4 foo5 foo6 foo7))

		(equal ( multiple-value-bind (a b c d e f g h i) 
					(multiple-value-prog1 (values-list '(foo foo1 foo2 foo3 foo4 foo5 foo6 foo7)) 'foo8 'foo9)
					(list a b c d e f g h i ) )
		     '(foo foo1 foo2 foo3 foo4 foo5 foo6 foo7  nil ))
	)
)

(do-test "test MULTIPLE-VALUE-PROG1 - when forms are used for effect"
	(and (equal (progn (setq a 4 b 5) (multiple-value-prog1 (values 3 4 (decf a) (incf b))) (list a b)) '(3 6))
		(eq    (progn (multiple-value-prog1 (truncate 456 123)) 'end-of-mvprog1) 'end-of-mvprog1)
	)
)

(do-test "test UNWIND-PROTECT  - make sure forms *do* return multiple values when they *should* "
	(and
		;
	     ; test cse 1
		;
		(equal (multiple-value-list (unwind-protect (round -5 2))) '(-2 -1))
		;;
		;; test case 2
		;;
		(let ((m 2) (n 8))
		  (and (equal (multiple-value-list (unwind-protect 
						  		(progn (incf m 10) 
							    		  (decf n 3)
							    		  (values m n)  )
						  		(incf m 9) 
						  		(decf n 2)  ))
			         '(12 5))
		       (equal (list m n) '(21 3))))
		;;
		;; test cse 3
		;;
		(let ((m 2) (n 8))
		  (and (equal (multiple-value-list 
						(block bar 
							(unwind-protect 
						  		(progn (incf m 10)
									  (return-from bar (values m n))
							    		  (decf n 3) )
						  		(incf m 9) 
						  		(decf n 2)
							)
							(incf m 10)
							(decf n 1)
						)
			          )  
			          '(12 8))
		        (equal (list m n) '(21 6))))
	)
)

(do-test "test THE - forms *do* return multiple values when they *should* "
	
	(and  (equal (multiple-value-list (the (values integer integer) (floor 8 3)))
			  '(2 2))
		
		(equal (multiple-value-list (the (values complex character cons ) (values #c(4 3.0) #\f '(9)) ))
			  '(#c(4 3.0) #\f (9) ))

		(equal (multiple-value-list (the (values (float -.5 .6) (integer 3 5) (member 1.0)) (decode-float 8.0)))
			  '(.5 4 1.0))

		(equal (multiple-value-list (the (values  (string 4) t list) 
								  (values-list (list "test" (rationalp (/ 9 4)) '(THE)))  ))
			  '("test" t (the)))
	)
)

(do-test "test THE - exactly one value is used, if forms are passed as an argument to a function call"
	(prog2	
			(defun foo (x) (and (equal (list x) (multiple-value-list x)) x))
			(and (= (foo (the (values integer integer) (floor 8 3))) 2)
				(equal  (foo (the (values complex character cons ) (values #c(4 3.0) #\f '(9)) ))
			 	  	   #c(4 3.0))
				(eql (foo (the (values (float -.5 .6) (integer 3 5) (member 1.0)) (decode-float 8.0)))
			          .5)
				(string-equal (foo (the (values  (string 4) t list) 
								  (values-list (list "test" (rationalp (/ 9 4)) '(THE)))  ))
						   "test")
			)
  	)
)
STOP



			  



		



