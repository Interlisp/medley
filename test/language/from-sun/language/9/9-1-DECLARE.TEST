;;
;; Function To Be Tested: declare
;;
;; Source:        CLtL p. 153 
;; Chapter 9: Declarations       Section 1: Declaration Syntax
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date:  Nov 3, 1986
;;
;; Last Update:   Jan 28, 1987 Jim Blum - removed null :before forms in do-test-groups 
;;			   Feb 5, 1987 Jim Blum - more fixes
;; Filed As:      {eris}<lispcore>cml>test> 9-1-declare.test
;;
;;
;; Syntax: declare {decl-spec}*               
;;
;; Function Description: The declare construct is used for embedding declarations within executable code.  Declarations may occur in
;;					lambda-expressions and in the forms listed below.
;;
;;					defmacro	defsetf	deftype	defun		do*		do-all-symbols	do-external-symbols	do-symbols
;;					do		dolist	dotimes	flet		labels	let			let*				locally
;;					macrolet	multiple-value-bind	prog		prog*
;;
;;
;;
;; Argument(s):  decl-spec	-	anyone of the following declaration specifiers:
;;
;;							special, type , ftype , function , inline , notinline , ignore , optimize , declaration        	
;;
;; Returns: It is an error to evaluate a declaration.  Those special forms that permit declaratins to appear perform 
;;		  explicit checks for their presence.             
;;
;;
;;

(do-test declare-is-not-a-macro
	(let ((decl (declare (special foo))))
	  (multiple-value-bind (new-form anything-changed)
					   (macroexpand decl nil)
		(and (eq decl new-form)
		     (null anything-changed))
	  )
	)
)

(do-test-group ("test declare - with test case from page 155 of CLtL"
			:before	(progn
							(test-defun fool (x y &optional (z "tail")) (list x y z))
							;;
							;;  test case copied from page 155 of CLtL
							;;
							(test-defun nonsense (k x z)
											(fool z x)				;; first call to fool
											(let ((j (fool k x))		;; second call to fool
									 			 (x (* k k)))
								 			   (declare (inline fool)
								 			            (special x z))
								 			   (fool x j z)))		;; third call to fool

					))
	;; I now believe that this test is correct with respect to CLtL.
	;; If you disagree, please talk to me before changing it.  --Pavel
	
	(do-test "test declare - with test case from page 155 of CLtL"
			(and 
				(equal (progv '(x z) '("special x" "special z") (nonsense 33 "loc x" "loc z"))
					  '(1089 (33 "special x" "tail") "special z") )

				(equal (progv '(x z k) '(10 20 30) (nonsense 3 1  2))
					  '(9 (3 10 "tail") 20))
			)
	)
)

(do-test-group ("test declare - with test case from page 157 of CLtL"
			:before	(progn

							;;
							;;  test case copied from page 157 of CLtL
							;;
							(test-defun hack (thing *mod*)
									 		(declare (special *mod*))
									 		(hack1 (car thing)))
							(test-defun hack1 (arg)
											(declare (special *mod*))
											(if  (atom arg) *mod*
												(cons (hack1 (car arg)) (hack1 (cdr arg)))))		
					))
		(do-test "test declare - with test case from page 157 of CLtL"

				(let ((modvar "mo")) 
					(and
						(equal (hack '(atom) modvar) "mo")
					
						(equal (hack '(((atom0 atom1) atom2) atom3) modvar) '(("mo" "mo" . "mo") "mo" . "mo"))
					)
				)
		)
)

(do-test-group ("test declare - with test case from page 158 of CLtL"
			:before	(progn

							;;
							;;  test case copied from page 158 of CLtL
							;;
							(test-defun example (x y)
											(declare (special y))
											(let ((y 3) (x (* x 2)))
												(list
													(+ y (locally (declare (special y)) y))
													(let ((y (incf y 4)))  (declare (special y)) 
															  (list (fo y) (fo x)))  			 ))) 
							(test-defun fo (x) x) 
					))
	(do-test "test declare - with test case from page 158 of CLtL"
		(prog2 (proclaim '(special x))
			  (and
				  (equal (example 15 10)  '(13 (14 30))) 
				  (equal (example  5 0)   '( 3 ( 4  10)))
			  )
		)
	)
)

(do-test-group ("test declare - with test case from page 160 of CLtL"
			:before	(progn
							;;
							;;  test case copied from page 160 of CLtL
							;;
							(test-defun often-used-subroutine (x y)
								(declare (optimize (safety 2)))
								; (error-check x y)
								; (hairy-setup x)
								(prog (buf) (dotimes (xx y) (setq buf (append buf x))) (setq x buf))
								(do ((i 0 (+ i 1))
									(z x (cdr z)))
								    ((null z) i)
									;; This inner loop really needs to burn.
									(declare (optimize speed))
									(declare (fixnum i))
								))
					))

	(do-test "test declare - with test case from page 160 of CLtL"
		(and
			(= (often-used-subroutine  '(3 4) 5) 10)
			(= (often-used-subroutine  '(1 3 4 5 ( a b)) 10) 50)
		)
	)
)

(do-test-group ("test declare - with test case from page 161 of CLtL"

			:before (test-defun strange (x)
					(declare (author "Harry Tweeker"))
					(member x '(strange weird odd peculiar)))  )


		(do-test "test declare - with test case from page 161 of CLtL"

			(progn (proclaim '(declaration author target-language target-machine))
				  (proclaim '(target-language ada))
				  (proclaim '(target-machine IBM-650))
				  (and
					 (equal (strange 'weird) '(weird odd peculiar))
					 (equal (strange 'strange) '(strange weird odd peculiar))
					 (not   (strange 'n0way))
				  )
			)
		)
)

(do-test-group  "test declare in let construct"
			 

	(do-test " test declare in let construct - type function and ftype"

		(equal	(let ((a 0) (b 4.00) c (d '(3 4 5 6)))
					(declare (type integer a))
					(declare (float b))
					(declare (string c))
					(declare (ftype (function (integer list) t) nth)
						    (ftype (function (number) float) sin cos))
					(declare (function length (sequence) (integer 0 *))
						    (function floor (number number) (values integer integer)))

					(list (nth  2 d) (sin a) (cos  a) (length (setq c "12345")) (multiple-value-list (floor b 2)))  )
				'( 5 0.0 1.0 5 (2 0.0))  ))

	(do-test " test declare in let construct - inline notinline and ignore"

		(equal	(let ((a '(1 2 3 4))) 
					(declare (list a))
					(declare (inline first second) (notinline third fourth) (ignore ghostvar1 ghostvar2))
					(mapcar #'(lambda (x) (funcall x a)) (list #'second #'first #'fourth #'third )))
		
				'(2 1 4 3)))

	(do-test "test declare in let construct - optimize and declaration"
		
		(equal 	(let (  (z (make-list 50 :initial-element '(2)))  )
					(declare (optimize (space 2) (safety 3) (compilation-speed 1)))
					(do ((i 0 (1+ i))
						(a z (cdr a)))
					    ((null a) i)
					    (declare (optimize speed))
					    (declare (fixnum i) (list a))   ))
				50))
)

(do-test-group  "test declare in let* construct"
 
	(do-test " test declare in let* construct - type function and ftype"

		(equal	(let* ((a 0) (b 4.00) c (d '(3 4 5 6)))
					(declare (type integer a))
					(declare (float b))
					(declare (string c))
					(declare (ftype (function (integer list) t) nth)
						    (ftype (function (number) float) sin cos))
					(declare (function length (sequence) (integer 0 *))
						    (function floor (number number) (values integer integer)))

					(list (nth  2 d) (sin a) (cos  a) (length (setq c "12345")) (multiple-value-list (floor b 2)))  )
				'( 5 0.0 1.0 5 (2 0.0))  ))

	(do-test " test declare in let* construct - inline notinline and ignore"

		(equal	(let* ((a '(1 2 3 4))) 
					(declare (list a))
					(declare (inline first second) (notinline third fourth) (ignore ghostvar1 ghostvar2))
					(mapcar #'(lambda (x) (funcall x a)) (list #'second #'first #'fourth #'third )))
		
				'(2 1 4 3)))

	(do-test "test declare in let* construct - optimize and declaration"
		
		(equal 	(let* (  (z (make-list 50 :initial-element '(2)))  )
					(declare (optimize (space 2) (safety 3) (compilation-speed 1)))
					(do ((i 0 (1+ i))
						(a z (cdr a)))
					    ((null a) i)
					    (declare (optimize speed))
					    (declare (fixnum i) (list a))   ))
				50))
)

(do-test-group  "test declare in prog construct"

	(do-test " test declare in prog construct - type function and ftype"

		(equal	(prog ((a 0) (b 4.00) c (d '(3 4 5 6)))
					(declare (type integer a))
					(declare (float b))
					(declare (string c))
					(declare (ftype (function (integer list) t) nth)
						    (ftype (function (number) float) sin cos))
					(declare (function length (sequence) (integer 0 *))
						    (function floor (number number) (values integer integer)))

					(return (list (nth  2 d) (sin a) (cos  a) (length (setq c "12345")) (multiple-value-list (floor b 2))))  )
				'( 5 0.0 1.0 5 (2 0.0))  ))

	(do-test " test declare in prog construct - inline notinline and ignore"

		(equal	(prog ((a '(1 2 3 4))) 
					(declare (list a))
					(declare (inline first second) (notinline third fourth) (ignore ghostvar1 ghostvar2))
					(return (mapcar #'(lambda (x) (funcall x a)) (list #'second #'first #'fourth #'third ))))
		
				'(2 1 4 3)))

	(do-test "test declare in prog construct - optimize and declaration"
		
		(equal 	(prog (  (z (make-list 50 :initial-element '(2)))  )
					(declare (optimize (space 2) (safety 3) (compilation-speed 1)))
					(return (do    ((i 0 (1+ i))
								(a z (cdr a)))
					    			((null a) i)
					    			(declare (optimize speed))
					    			(declare (fixnum i) (list a))   )))
				50))
)

(do-test-group  "test declare in prog* construct"
 
	(do-test " test declare in prog* construct - type function and ftype"

		(equal	(prog* ((a 0) (b 4.00) c (d '(3 4 5 6)))
					(declare (type integer a))
					(declare (float b))
					(declare (string c))
					(declare (ftype (function (integer list) t) nth)
						    (ftype (function (number) float) sin cos))
					(declare (function length (sequence) (integer 0 *))
						    (function floor (number number) (values integer integer)))

					(return (list (nth  2 d) (sin a) (cos  a) (length (setq c "12345")) (multiple-value-list (floor b 2))))  )
				'( 5 0.0 1.0 5 (2 0.0))  ))

	(do-test " test declare in prog* construct - inline notinline and ignore"

		(equal	(prog* ((a '(1 2 3 4))) 
					(declare (list a))
					(declare (inline first second) (notinline third fourth) (ignore ghostvar1 ghostvar2))
					(return (mapcar #'(lambda (x) (funcall x a)) (list #'second #'first #'fourth #'third ))))
		
				'(2 1 4 3)))

	(do-test "test declare in prog* construct - optimize and declaration"
		
		(equal 	(prog* (  (z (make-list 50 :initial-element '(2)))  )
					(declare (optimize (space 2) (safety 3) (compilation-speed 1)))
					(return (do    ((i 0 (1+ i))
								(a z (cdr a)))
					    			((null a) i)
					    			(declare (optimize speed))
					    			(declare (fixnum i) (list a))   )))
				50))
)

(do-test-group  "test declare in do construct"

	(do-test " test declare in do construct - type function and ftype"

		(equalp (do (	(a 0 (+ 2 a))
				 	(s '(2 3 5 6 8 12 9 8 3 4 56) (cdr s))
					(b #*10 (concatenate 'vector b b)))
				 ((or (>= (length b) (length s)) (>= a 8))    (list a s b))

				 (declare	(fixnum a) (list s) (type (simple-bit-vector 12) b))
				 (declare (ftype (function (list) t) cdr))
				 (declare (function concatenate ((or list vector)  sequence sequence) sequence))   )

			'(6 (6 8 12 9 8 3 4 56) #*1010101010101010)))

	(do-test " test declare in do construct -linline , notinline , ignore and optimize"

		(equal (do		((i 0 (1+ i))
					 (buf nil (append buf (list (expt  i 2)))  )) 
					( (> (apply #'+ buf) 500)  buf)
				
					(declare (inline 1+ oddp expt list) (notinline apply) )
					(declare (ignore *no-such-var* *no-such-symbol*))
					(declare (optimize speed (space 2) (compilation-speed 0) ))    )

			  '(0 1 4 9 16 25 36 49 64 81 100 121)))

	(do-test " test declare in do construct - declaration"

		(=	 (do	  	((s "abcdefghijklmn" (subseq s 0 (1- (length s)))  ))
					((equal (elt (reverse s) 0) #\f) (length s) )
				
					(proclaim '(declaration ugly-dec1 ugly-dec2 ugly-dec3))
					(proclaim '(ugly-dec1 nonsense1))
					(proclaim '(ugly-dec2 nonsense2))
					(proclaim '(ugly-dec3 nonsense3))  )
			  6)	)
)

(do-test-group "test declare in do* construct"

	(do-test " test declare in do* construct - type function and ftype"

		(equalp (do* (	(a 0 (+ 2 a))
				 	(s '(2 3 5 6 8 12 9 8 3 4 56) (cdr s))
					(b #*10 (concatenate 'vector b b)))
				 ((or (>= (length b) (length s)) (>= a 8))    (list a s b))

				 (declare	(fixnum a) (list s) (type (simple-bit-vector 12) b))
				 (declare (ftype (function (list) t) cdr))
				 (declare (function concatenate ((or list vector)  sequence sequence) sequence))   )

			'(6 (6 8 12 9 8 3 4 56) #*1010101010101010)))

	(do-test " test declare in do* construct -linline , notinline , ignore and optimize"

		(equal (do*	((i 0 (1+ i))
					 (buf nil (append buf (list (expt  i 2)))  )) 
					( (> (apply #'+ buf) 500)  buf)
				
					(declare (inline 1+ oddp expt list) (notinline apply) )
					(declare (ignore *no-such-var* *no-such-symbol*))
					(declare (optimize speed (space 2) (compilation-speed 0) ))    )

			  '(1 4 9 16 25 36 49 64 81 100 121)))

	(do-test " test declare in do* construct - declaration"

		(=	 (do*	  	((s "abcdefghijklmn" (subseq s 0 (1- (length s)))  ))
					((equal (elt (reverse s) 0) #\f) (length s) )
				
					(proclaim '(declaration ugly-dec1 ugly-dec2 ugly-dec3))
					(proclaim '(ugly-dec1 nonsense1))
					(proclaim '(ugly-dec2 nonsense2))
					(proclaim '(ugly-dec3 nonsense3))  )
			  6)	)
)

(do-test-group "test declare in lambda-expression construct"

	(do-test " test declare in lambda-expression construct - type , function and ftype"

		(equal ((lambda ( a b &optional (c #'floor) (d #'-))
					 (declare (integer a) (type (float 2.0 10.0) b))
					 (declare (ftype (function (integer integer) (values fixnum float))  c))
					 (declare (function d (number number) number))
					 (list (multiple-value-list (funcall c b 2.0)) (apply d (list a 9)))  )   20 8 )
					
					 '((4 0.0) 11) ))

	(do-test " test declare in lambda-expression construct - inline, notinline, ignore"

		(equal (mapcar  #'(lambda (x y z)
							(declare (inline car) (notinline last) (ignore *no-such-var1* *no-such-var2*))
							(declare (list x y) (function z (integer integer) integer))
							(funcall z (car x) (car (last y)))  )
					 '((2 3) (5 1) (3 9)) '((10 2 -1) (2 4 -8)) (list #'* #'+))
			  '(-2 -3)))

	(do-test " test declare in lambda-expression construct - optimize and declaration"

		(equal ((lambda ( lst0 &key (lst1 '(3 9 8 39 1)) (lst2 '(10 45 -3 -17)))
					 (declare (list lst0 lst1 lst2))
					 (declare (optimize (speed 3) (safety 2)))
					 (proclaim '(declaration proc1 proc2))
					 (proclaim '(proc1 foo1))
					 (proclaim '(proc2 foo2))
				   	 (sort (append lst0 lst2 lst1) #'<))  '(40 52 32 66 -1 -20) :lst2 '(-17 -47 -27 37))
			 '(-47 -27 -20 -17 -1 1 3 8 9  32 37 39 40 52 66))   ) 
)
STOP
					  

