;;
;; Function To Be Tested: proclaim
;;
;; Source:        CLtL p. 156 
;; Chapter 9: Declarations       Section 1: Declaration Syntax
;;
;; Created By:    Karin M. Sye
;;
;; Creation Date:  Nov. 5, 86
;;
;; Last Update:   Nov. 5, 86 
;;
;; Filed As:      {eris}<lispcore>cml>test> 9-1-proclaim.test
;;
;;
;; Syntax: proclaim decl-spec               
;;
;; Function Description: The function proclaim takes a decl-spec as its argument and puts it into effect globally. Because proclaim 
;;					is a function, its argument is always evaluated. Any variable names mentioned are assumed to refer to the
;;					dynamic values of the variable.  Similarly, any function names mentioned are assumed to reger to the 
;;					global function definition.
;;
;; Argument(s):  del-spec - one of the following declaration specifiers:
;;						special	type		ftype		function
;;						inline	notinline	ignore	optimize	declaration
;;        	
;;
;; Returns:              
;;

(do-test "test proclaim with type and special decl-spec"
  (progn 
	(proclaim '(special x))
	(proclaim '(fixnum x))
	;; x was just proclaimed to be always special and its value be a fixnum
	(defun foo (x)
		(let ((x (* x 2)))
			(list x (locally (declare (special x)) x)) ))
	(progv '(x) '(99)
		  (let ((x 88))
			  (equal (foo x) '(176 176))
		  )
	)
  )
)

(do-test "test proclaim with type, ftype , and function decl-spec"
  (equal 
	(progv '(x y) '(0.0  (a b c d))

			(proclaim '(type float x))
			(proclaim '(list y))
			(proclaim '(ftype (function (integer list) t) nth))
			(proclaim '(function sin (number) float))

			`(,(nth 2 y) ,(sin x))
	)
	'(c 0.0)
  )
)

(do-test "test proclaim with inline and notinline decl-spec  0"

	(equal  (let (buf)
					;;
					;;  advise that floor should be open-coded in-line by the compiler
					;;
					(proclaim (list 'inline 'floor ))
					(push (list (floor 8 2) (floor 100.0 10) (floor 30 5.0)) buf)

					(defun foo (x y)
							;;
							;; now advise floor to be compiled out-of-line in the body of foo by the compiler
							;;
							(declare (notinline floor))
							(floor x y) ) 

					(push (list (foo 8 3) (foo 10 2) (foo 20 4)) buf)
					(push (list (floor 999 9) (floor 7777 11)) buf)
					buf)

			'( (111 707) (2 5 5) (4 10 6)) ))


(do-test "test proclaim with inline and notinline decl-spec  1"

	(equal  (progn
				(proclaim '(inline expt))
				(proclaim '(notinline sqrt))
				(list
					(expt 3 3)
					(sqrt 10000)

					(flet ((expt (x) (declare  (fixnum x) ) (* x x x))
						  (sqrt (x) (declare  (float x)  ) (* .5 x))  )
						 (let () 
								;;
								;; advise local functions sqrt & expt to be compiled in-line and  
								;; out-of-line respectively by the compiler
								;;
							    (declare (inline sqrt) (notinline expt))
						 	    (+ (expt 4) (sqrt 6))))

					(- (expt 3 0) (sqrt 81))
				))
		   '(27 100.0 67.0 -8.0)  ))


(do-test "test proclaim with ignore decl-spec 0"
	(=	 (progn 
			;; Specify that the bindings of the specified variables are never used.
			(proclaim '(ignore broken-var1 broken-var2))
			(defun foo (x &optional broken-var1 broken-var2)
  					 (values x x))
			(foo 234 567 890))
		  234 ))

(do-test "test proclaim with ignore decl-spec 1"
  (progn 
	(proclaim '(ignore broken-var1 broken-var2))
	(let ((x 100) (y 234) (broken-var1 "error1") (broken-var2 "error2"))
		(> y x) ))) 


(do-test "test proclaim with optimize & declaration decl-specs"

	(progn	
			(proclaim '(optimize  (speed 2) space (safety 3) (compilation-speed 0) ))
			(proclaim '(declaration funny1 funny2 funny3))
			(defun foo (x)
					;; the following declaration should be ingored
					(declare (funny1 fun1) (funny2 fun2) (funny3 fun3))
					(do ((i 0 (+ i 1))
						(z x (cdr z)) )
					    ((null z) i)    ))
			(= (foo '(2 3 4 5 6)) 5)
	)
)
STOP

					
	
	


					
					

		
		
	

