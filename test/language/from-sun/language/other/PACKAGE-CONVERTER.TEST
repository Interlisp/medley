;;
;;	Creation date - Jan. 30, 1987
;;
;;	Created by    - Ron Fischer , Karin M. Sye
;;
;;	Test purpose  - make sure Package Converter translates symbols 
;;				(residing in the "old" CML files writen using Koto CML package) into correct packages.
;;
;;
;;	** NOTE:  In order for this test to be run successfully, the test data file, package-converter-test.data, 
;;             needs to exist on {eris}<lispcore>test>package>
;;
;;
(do-test "converter test 1"
	(flet  ((converter-test-function ()

				"Loads a file of symbols with the converter enabled. 
				 (The file should set the variable il:converter-test-cases to a list of triplets: 
					symbol, package name, and location keyword) 
				 Checks, based on information in the data file, whether the symbol was read correctly."

			(let ( ;Turn on the converter
				  (il:litatom-package-conversion-enabled t)
				)		
				(declare (special il:litatom-package-conversion-enabled))
			
				;Load the test file
				(il:load '{eris}<lispcore>test>package>package-converter-test.data)					

				;Expect every test case to return true
				(every 			
					#'(lambda (test-case)
						(let  (;Pick apart the test cases for easy reference
							  (symbol  	(first test-case))
						 	  (package-name (second test-case))
						 	  (where   	(third test-case)))

							(if
						    		(and
									; Check if the symbol has been read into the correct package
									(string= package-name (package-name (symbol-package symbol)))

									; and if it is correctly :internal or :external in that package
									(eq  where 
									  (second (multiple-value-list (find-symbol (symbol-name symbol) package-name))))
								)

								; OK, just return t
								t	

								; Print a warning so we know what fails
								(warn "Symbol converter failed for ~s, should have been ~s in ~s" 
									symbol where package-name)
							)
						)
				   	)
				
					il:converter-test-cases)
			 )
		   ))

		   (converter-test-function)
	)
)

(do-test "converter test 2"
	;;
	;;  removing symbols from il:*preferred-reading-symbols* list should cause READ-CONFLICT condition 
	;;  to be raised when trying to read back those symbols
	;;
	(let ((count 0)
		 (symbol nil)
		 (symbol-count (length il:*preferred-reading-symbols*))
		 (symbol-list  (mapcar #'(lambda (x) (find-symbol (symbol-name x) 'cl)) il:*preferred-reading-symbols*))
		 (il:litatom-package-conversion-enabled t)
		 (il:*preferred-reading-symbols* nil)
		 (*readtable* il:coderdtbl)
		)
		(dotimes (x symbol-count (= count symbol-count))
			(catch 'here (handler-bind
						((xcl:read-conflict 
							#'(lambda (condition) (incf count) (throw 'here))   )
						 (xcl:condition 
								#'(lambda (condition)
											;  wrong type of condition was signaled
											(warn "Removing ~s from il:*preferred-reading-symbols* fails to signal READ-CONFLICT condition. It signals ~s instead."
											symbol condition)
										     (throw 'here))  )
						)
						(setq symbol (string (nth x symbol-list)))
						(read (make-string-input-stream symbol))
						;  no condition was signaled
						(format t "Removing ~s from il:*preferred-reading-symbols* fails to signal READ-CONFLICT condition"
											symbol)
						(throw 'here)
					  )
			)
		)
	)
)

STOP