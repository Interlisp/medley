(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "XCL" BASE 10)(FILECREATED "17-Dec-2020 18:44:48" |{DSK}<home>larry>ilisp>medley>internal>test>Maiko>AUTO>OPCODES.TEST;2| 96400        |changes| |to:|  (VARS OPCODESCOMS)                       (FNS ADDR-IN-RANGE)                       (FUNCTIONS SIMULATE-PILOTBITBLT BUMP SLOPED-LINES DIAGONALS)      |previous| |date:| "16-Nov-88 18:02:22" |{DSK}<home>larry>ilisp>medley>internal>test>Maiko>AUTO>OPCODES.TEST;1|); Copyright (c) 1988, 2020 by ENVOS Corporation.  All rights reserved.(PRETTYCOMPRINT OPCODESCOMS)(RPAQQ OPCODESCOMS       (        (* |;;| "This file contains tests for the various opcodes used in the system.")        (DECLARE\: EVAL@COMPILE (FILES DO-TEST))        (VARS (*TEST-FILE-NAME* "OPCODES"))        (COMS                                                (* \; "BITBLT")              (FUNCTIONS SIMULATE-PILOTBITBLT BUMP)              (FUNCTIONS SLOPED-LINES DIAGONALS)              (FNS ADDR-IN-RANGE)              (TESTS BITBLT-DIAGONALS BITBLT-SLOPED-LINES))        (COMS                                                (* \; "COPY.N")              (FUNCTIONS XCL-USER::COPY.N.TEST)              (TESTS COPY.N COPY.N-UFN))        (COMS                                                (* \; "STORE.N")              (FUNCTIONS XCL-USER::STORE.N.TEST)              (TESTS STORE.N STORE.N-UFN))        (COMS                                                (* \; "POP.N")              (FUNCTIONS XCL-USER::POP.N.TEST)              (TESTS POP.N POP.N-UFN))        (COMS                                                (* \; "UNWIND")              (TESTS UNWIND-OFF-BY-1-A UNWIND-OFF-BY-1-B)              (FNS UNWINDTESTER UNWINDMAINTEST UNWINDMAINTEST.RECURSE UNWINDCHECK1 UNWINDCHECK2                    UNWINDCODE)              (DECLARE\: EVAL@COMPILE DONTCOPY (RECORDS BINDMARKSLOT))              (FNS UW2.TEST UW2.RECURSE UW2.TEST.MAIN UW2.CHECK UW2.IDENTITY)              (TESTS UNWIND UNWIND-2))        (COMS                                                (* \; "FINDKEY")              (FNS FINDKEYTESTER DOFINDKEYTEST DOFINDKEYTEST1)              (DECLARE\: EVAL@COMPILE DONTCOPY (MACROS FINDKEYCHECK))              (TESTS FINDKEY))        (COMS                                                (* \; "RESTLIST")              (FNS \\RESTLIST.SPLICE.FRAME RESTLISTTESTER DORESTLISTTEST GETRESTARGREFCNTS                    DORESTLISTTEST1)              (INITVARS (RESTLISTCOUNTER 0))              (DECLARE\: EVAL@COMPILE DONTCOPY (MACROS RESTLISTCHECK \\COMPUTED.FORM)                     (RECORDS MDSTYPEWORD)                     (GLOBALVARS RESTLISTCOUNTER))              (TESTS RESTLIST))        (COMS                                                (* \; "Closure tests")              (FNS CLOSURETESTER CLOSUREMAINTEST CLOSUREMAINTEST.RECURSE CLOSUREFNCHECK                    CLOSUREFNCHECK2 CLOSUREFN1 CLOSUREFN1VALUE CLOSUREFN2 CLOSUREFN2VALUE                    CLOSUREFN4CODE CLOSUREFN4VALUE)              (INITVARS (CLOSURETEST.DEPTH 50)                     (CLOSURETEST.ENVIRONMENT "Closure Environment"))              (GLOBALVARS CLOSURETEST.DEPTH CLOSURETEST.ENVIRONMENT)              (TESTS CLOSURES))        (COMS                                                (* \; "Free-variable lookup")              (FNS FVARTEST0 FVARTEST1 FVARTEST2 FVARTEST3)              (TESTS FREE-VAR-LOOKUP))        (COMS                                                (* \; "AREF opcode tests")              (VARS (*NON-CONSTANT-FLOAT-1* 1.0))              (XCL-USER::VERIFIED-TESTS XCL-USER::AREF1-BIT XCL-USER::AREF1-BYTE XCL-USER::AREF1-WORD                     XCL-USER::AREF1-SIGNED-WORD XCL-USER::AREF1-FIXP XCL-USER::AREF1-FLOATP                      XCL-USER::AREF1-STRING-CHAR XCL-USER::AREF1-POINTER XCL-USER::AREF1-XPOINTER                      XCL-USER::AREF1-PUNT)                            (* |;;| "array-read and array-write ")              (XCL-USER::VERIFIED-TESTS XCL-USER::ARRAY-READ-BIT XCL-USER::ARRAY-READ-BYTE                      XCL-USER::ARRAY-READ-WORD XCL-USER::ARRAY-READ-SIGNED-WORD                      XCL-USER::ARRAY-READ-FIXP XCL-USER::ARRAY-READ-FLOATP                      XCL-USER::ARRAY-READ-THIN-CHAR XCL-USER::ARRAY-READ-FAT-CHAR                      XCL-USER::ARRAY-READ-POINTER XCL-USER::ARRAY-READ-XPOINTER)              (XCL-USER::VERIFIED-TESTS XCL-USER::ARRAY-WRITE-BIT XCL-USER::ARRAY-WRITE-BYTE                      XCL-USER::ARRAY-WRITE-WORD XCL-USER::ARRAY-WRITE-SIGNED-WORD                      XCL-USER::ARRAY-WRITE-FIXP XCL-USER::ARRAY-WRITE-FLOATP                      XCL-USER::ARRAY-WRITE-THIN-CHAR XCL-USER::ARRAY-WRITE-FAT-CHAR                      XCL-USER::ARRAY-WRITE-POINTER XCL-USER::ARRAY-WRITE-XPOINTER))        (COMS               (* |;;| "Boxed opcodes")              (VARS (*NON-CONSTANT-T* T)                    (*NON-CONSTANT-0* 0))              (XCL-USER::VERIFIED-TESTS XCL-USER::INT+ XCL-USER::FLOAT+ XCL-USER::MIXED+)              (TESTS ERROR+)              (XCL-USER::VERIFIED-TESTS XCL-USER::INT- XCL-USER::FLOAT- XCL-USER::MIXED-)              (XCL-USER::VERIFIED-TESTS XCL-USER::INT* XCL-USER::FLOAT* XCL-USER::MIXED*)              (XCL-USER::VERIFIED-TESTS XCL-USER::INT/ XCL-USER::FLOAT/ XCL-USER::MIXED/)              (TESTS ERROR/T ERROR/0 NO-ERROR-0/0)              (XCL-USER::VERIFIED-TESTS XCL-USER::INT> XCL-USER::FLOAT> XCL-USER::MIXED>))        (COMS               (* |;;| "Unboxed opcodes [scalar]")                            (* |;;| "Ubfloat1")              (XCL-USER::VERIFIED-TESTS XCL-USER::BOX XCL-USER::UNBOX XCL-USER::UBABS                      XCL-USER::UBNEGATE XCL-USER::UBFIX)                            (* |;;| "Ubfloat2")              (XCL-USER::VERIFIED-TESTS XCL-USER::UB+ XCL-USER::UB- XCL-USER::UB* XCL-USER::UB/                      XCL-USER::UB> XCL-USER::UBMAX XCL-USER::UBMIN)                            (* |;;| "Ubfloat3")              (XCL-USER::VERIFIED-TESTS XCL-USER::POLY))        (COMS               (* |;;| "Transcendentals --- stress test")              (XCL-USER::VERIFIED-TESTS XCL-USER::SIN-TEST XCL-USER::COS-TEST XCL-USER::EXP-TEST                      XCL-USER::LOG-TEST))        (DECLARE\: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS (ADDVARS (NLAMA)                                                                             (NLAML)                                                                             (LAMA DORESTLISTTEST                                                                                    DOFINDKEYTEST)))))(* |;;| "This file contains tests for the various opcodes used in the system.")(DECLARE\: EVAL@COMPILE (FILESLOAD DO-TEST))(RPAQ *TEST-FILE-NAME* "OPCODES")(* \; "BITBLT")(CL:DEFUN SIMULATE-PILOTBITBLT (BBT LOW-WORD-ADDR HI-WORD-ADDR)   (* |;;| "A translation of the algorithm in the Mesa PrincOps.")   (* |;;| " S-L-O-W !!!")   (LET ((SRC.WORD (FETCH (PILOTBBT PBTSOURCE) OF BBT))         (SRC.BIT (FETCH (PILOTBBT PBTSOURCEBIT) OF BBT))         (SRC.BPL (FETCH (PILOTBBT PBTSOURCEBPL) OF BBT))         (DST.WORD (FETCH (PILOTBBT PBTDEST) OF BBT))         (DST.BIT (FETCH (PILOTBBT PBTDESTBIT) OF BBT))         (DST.BPL (FETCH (PILOTBBT PBTDESTBPL) OF BBT))         (BBT.WIDTH (FETCH (PILOTBBT PBTWIDTH) OF BBT))         (BBT.HEIGHT (FETCH (PILOTBBT PBTHEIGHT) OF BBT))         (BOOL-OP (LET ((COMPLEMENT? (NOT (CL:ZEROP (FETCH (PILOTBBT PBTSOURCETYPE) OF BBT)))                               ))                       (CL:ECASE (FETCH (PILOTBBT PBTOPERATION) OF BBT)                           ((0) (CL:IF COMPLEMENT?                                    CL:BOOLE-C1                                    CL:BOOLE-1))                           ((1) (CL:IF COMPLEMENT?                                    CL:BOOLE-ANDC1                                    CL:BOOLE-AND))                           ((2) (CL:IF COMPLEMENT?                                    CL:BOOLE-ORC1                                    CL:BOOLE-IOR))                           ((3) (CL:IF COMPLEMENT?                                    CL:BOOLE-EQV                                    CL:BOOLE-XOR)))))         (GRAY? (FETCH (PILOTBBT PBTUSEGRAY) OF BBT))         (GRAY.WIDTH (ITIMES (ADD1 (FETCH (PILOTBBT PBTGRAYWIDTHLESSONE) OF BBT))                            16))         (GRAY.HEIGHT (ADD1 (FETCH (PILOTBBT PBTGRAYHEIGHTLESSONE) OF BBT)))         LINE GRAY.BUMP LAST-GRAY Y-FORWARD? X-FORWARD?)        (CL:LABELS ((MODIFY-BIT (DSTWORD DSTBIT DSTOFFSET SRCWORD SRCBIT SRCOFFSET)                           (CL:MULTIPLE-VALUE-BIND (SRCWORD SRCBIT)                                  (BUMP SRCWORD SRCBIT SRCOFFSET)                                  (CL:MULTIPLE-VALUE-BIND (DSTWORD DSTBIT)                                         (BUMP DSTWORD DSTBIT DSTOFFSET)                                         (ADDR-IN-RANGE LOW-WORD-ADDR DSTWORD HI-WORD-ADDR)                                         (CL:SETF (LDB (BYTE 1 (IDIFFERENCE 15 DSTBIT))                                                       (GETBASE DSTWORD 0))                                                (CL:BOOLE BOOL-OP (LDB (BYTE 1 (IDIFFERENCE 15 SRCBIT                                                                                      ))                                                                       (GETBASE SRCWORD 0))                                                       (LDB (BYTE 1 (IDIFFERENCE 15 DSTBIT))                                                            (GETBASE DSTWORD 0)))))))                    (BITBLT-ITEM NIL                           (LET ((OFFSET (CL:IF X-FORWARD?                                             0                                             (SUB1 BBT.WIDTH))))                                (FRPTQ BBT.WIDTH                                       (LET ((POS (CL:IF GRAY?                                                      (IDIFFERENCE (IMOD (IPLUS OFFSET SRC.BIT)                                                                         (ABS GRAY.WIDTH))                                                             SRC.BIT)                                                      OFFSET)))                                            (MODIFY-BIT DST.WORD DST.BIT OFFSET SRC.WORD SRC.BIT POS)                                            )                                       (CL:INCF OFFSET (CL:IF X-FORWARD?                                                           1                                                           -1)))))                    (SETUP NIL (CL:WHEN GRAY?                                   (SETQ GRAY.BUMP (IMINUS (ITIMES GRAY.WIDTH (SUB1 GRAY.HEIGHT)))))                           (COMPUTE-DIRECTION)                           (CL:WHEN GRAY?                               (SETQ LAST-GRAY (CL:IF Y-FORWARD?                                                   (IDIFFERENCE GRAY.HEIGHT 1 (FETCH (PILOTBBT                                                                                                                                                                                  PBTGRAYOFFSET                                                                                          )                                                                                 OF BBT))                                                   (FETCH (PILOTBBT PBTGRAYOFFSET) OF BBT))))                           (SETQ LINE (CL:IF Y-FORWARD?                                          0                                          (SUB1 BBT.HEIGHT))))                    (COMPUTE-DIRECTION NIL (SETQ Y-FORWARD? (SETQ X-FORWARD?                                                             (NOT (FETCH (PILOTBBT PBTBACKWARD)                                                                     OF BBT))))))               (SETUP)               (WHILE (AND (ILEQ 0 LINE)                               (ILESSP LINE BBT.HEIGHT))                  DO (BITBLT-ITEM)                        (BLOCK)                              (* \; "just to be nice.")                        (CL:MULTIPLE-VALUE-SETQ (SRC.WORD SRC.BIT)                               (BUMP SRC.WORD SRC.BIT (CL:IF GRAY?                                                              (CL:IF (= (IMOD LINE GRAY.HEIGHT)                                                                        LAST-GRAY)                                                                  GRAY.BUMP                                                                  GRAY.WIDTH)                                                              SRC.BPL)))                        (CL:MULTIPLE-VALUE-SETQ (DST.WORD DST.BIT)                               (BUMP DST.WORD DST.BIT DST.BPL))                        (CL:INCF LINE (CL:IF Y-FORWARD?                                          1                                          -1))))))(CL:DEFUN BUMP (WORD BIT INCR)   (CL:MULTIPLE-VALUE-BIND (WORD-INCR NEW-BIT)          (CL:FLOOR (IPLUS BIT INCR)                 16)          (CL:VALUES (ADDBASE WORD WORD-INCR)                 NEW-BIT)))(CL:DEFUN SLOPED-LINES (W)   (LET* ((FEEDBACK-INTERVAL (QUOTIENT W 20))          (NEXT-FEEDBACK 0)          (BLACK #16*1)          (A (CL:MAKE-ARRAY (LIST W W)                    :ELEMENT-TYPE                    'BIT :INITIAL-ELEMENT 0))          (DA (CL:MAKE-ARRAY (ITIMES W W)                     :ELEMENT-TYPE                     'BIT :DISPLACED-TO A))          (R (CL:MAKE-ARRAY (LIST W W)                    :ELEMENT-TYPE                    'BIT :INITIAL-ELEMENT 0))          (LOW-ADDR (FETCH (ARRAY-HEADER BASE) OF R))          (HI-ADDR (\\ADDBASE LOW-ADDR (SUB1 (IQUOTIENT (+ 15 (ITIMES W W))                                                    16))))          (DR (CL:MAKE-ARRAY (ITIMES W W)                     :ELEMENT-TYPE                     'BIT :DISPLACED-TO R))          (BBT (CREATE PILOTBBT                      PBTDEST _ (FETCH (ARRAY-HEADER BASE) OF A)                      PBTDESTBIT _ 0                      PBTSOURCE _ (FETCH (ARRAY-HEADER BASE) OF BLACK)                      PBTSOURCEBIT _ 0                      PBTGRAYOFFSET _ 0                      PBTGRAYWIDTHLESSONE _ 0                      PBTGRAYHEIGHTLESSONE _ 0                      PBTWIDTH _ 0                      PBTDISJOINT _ T                      PBTUSEGRAY _ T)))         (CL:DOTIMES (SLOPE W)             (CL:WHEN (> SLOPE NEXT-FEEDBACK)                 (CL:PRINC #\. *ERROR-OUTPUT*)                 (CL:INCF NEXT-FEEDBACK FEEDBACK-INTERVAL))             (CL:FILL DA 0)             (REPLACE (PILOTBBT PBTDESTBPL) OF BBT WITH (IPLUS W SLOPE 1))             (CL:INCF (FETCH (PILOTBBT PBTWIDTH) OF BBT))             (REPLACE (PILOTBBT PBTHEIGHT) OF BBT WITH (CL:CEILING W (ADD1 SLOPE)))             (\\PILOTBITBLT BBT NIL)             (CL:FILL DR 0)             (SIMULATE-PILOTBITBLT (CREATE PILOTBBT USING BBT PBTDEST _                                                                  (FETCH (ARRAY-HEADER BASE)                                                                     OF R))                    LOW-ADDR HI-ADDR)             (CL:WHEN (NOT (CL:EQUAL DA DR))                    (CL:CERROR "Try the next one" "Bad BITBLT: diagonal w: ~D slope: ~D" W SLOPE)))))(CL:DEFUN DIAGONALS (W SKIP-SIMULATION SKIP-UCODE)   (* |;;| "Draw both diagonals in a square of size W.")   (* |;;|  "if SKIP-SIMULATION is not NIL, don't bother with the simulation or a consistency check.")   (* |;;|  "if SKIP-UCODE is not NIL, don't bother with the real microcode version or a consistency check.")   (LET* ((FAILURES NIL)          (BLACK #16*1)          (A (CL:MAKE-ARRAY (LIST W W)                    :ELEMENT-TYPE                    'BIT :INITIAL-ELEMENT 0))          (A-BASE (FETCH (ARRAY-HEADER BASE) OF A))          (DA (CL:MAKE-ARRAY (ITIMES W W)                     :ELEMENT-TYPE                     'BIT :DISPLACED-TO A))          (R (CL:MAKE-ARRAY (LIST W W)                    :ELEMENT-TYPE                    'BIT :INITIAL-ELEMENT 0))          (R-BASE (FETCH (ARRAY-HEADER BASE) OF R))          (LOW-ADDR R-BASE)          (HI-ADDR (\\ADDBASE LOW-ADDR (SUB1 (IQUOTIENT (+ 15 (ITIMES W W))                                                    16))))          (DR (CL:MAKE-ARRAY (ITIMES W W)                     :ELEMENT-TYPE                     'BIT :DISPLACED-TO R))          (BBT (CREATE PILOTBBT                      PBTSOURCE _ (FETCH (ARRAY-HEADER BASE) OF BLACK)                      PBTSOURCEBIT _ 0                      PBTGRAYOFFSET _ 0                      PBTGRAYWIDTHLESSONE _ 0                      PBTGRAYHEIGHTLESSONE _ 0                      PBTWIDTH _ 1                      PBTHEIGHT _ W                      PBTDISJOINT _ T                      PBTUSEGRAY _ T)))         (CL:MACROLET ((CLEAR (WHICH)                              `(CL:FILL ,WHICH 0)))                (CL:LABELS ((SET-SOURCE (BBT BASE INCREMENT)                                   (CL:MULTIPLE-VALUE-BIND (WORD BIT)                                          (BUMP BASE 0 INCREMENT)                                          (REPLACE (PILOTBBT PBTDEST) OF BBT WITH WORD)                                          (REPLACE (PILOTBBT PBTDESTBIT) OF BBT WITH                                                                                        BIT))                                   BBT)                            (CHECK-RESULT (FROM TO START-OFFSET)                                   (CLEAR DR)                                   (CL:UNLESS SKIP-SIMULATION                                       (* |;;| "Only run this if we need the simulation.")                                       (SIMULATE-PILOTBITBLT (SET-SOURCE (CREATE PILOTBBT                                                                                USING BBT)                                                                        R-BASE START-OFFSET)                                              LOW-ADDR HI-ADDR))                                   (CL:UNLESS (OR SKIP-SIMULATION SKIP-UCODE)                                       (* |;;| "Only check the results if we ran both versions.")                                       (CL:WHEN (NOT (CL:EQUAL DA DR))                                           (CL:PUSH (CL:CONCATENATE 'STRING FROM " to " TO)                                                  FAILURES)                                           (CL:CERROR "Try the next one"                                                   "Bad BITBLT: ~A to ~A diagonal w: ~D " FROM TO W)))                                   )                            (DO-ONE (FROM TO START-OFFSET BPL)                                   (CLEAR DA)                                   (REPLACE (PILOTBBT PBTDESTBPL) OF BBT WITH BPL)                                   (REPLACE (PILOTBBT PBTBACKWARD) OF BBT                                      WITH (ILESSP BPL 0))                                   (OR SKIP-UCODE (\\PILOTBITBLT (SET-SOURCE BBT A-BASE START-OFFSET)                                                         NIL))                                   (CHECK-RESULT FROM TO START-OFFSET)))                       (DO-ONE "upper left" "lower right" 0 (ADD1 W))                       (DO-ONE "upper right" "lower left" (SUB1 W)                              (SUB1 W))                       (DO-ONE "lower left" "upper right" (ITIMES W (SUB1 W))                              (IMINUS (SUB1 W)))                       (DO-ONE "lower right" "upper left" (SUB1 (ITIMES W W))                              (IMINUS (ADD1 W)))))         (CL:VALUES (NOT FAILURES)                FAILURES)))(DEFINEQ(ADDR-IN-RANGE  (LAMBDA (LOW ADDR HI)                                      (* \; "Edited 16-Nov-88 14:32 by jds")    (OR (<= (+ (LLSH (HILOC LOW)                     16)               (LOLOC LOW))            (+ (LLSH (HILOC ADDR)                     16)               (LOLOC ADDR))            (+ (LLSH (HILOC HI)                     16)               (LOLOC HI)))        (HELP)))))(DEFTEST (BITBLT-DIAGONALS :COMPILED)   (FOR WIDTH      IN '(1 2 3 4 5 7 8 9 15 16 17 31 32 33 39 40 41) ALWAYS (PRINT WIDTH)                                                              (* \; "DD")                                                                 (DIAGONALS WIDTH)))(DEFTEST (BITBLT-SLOPED-LINES :COMPILED)   (FOR I IN '(1 3 4 5 7 8 9 15 16 17) DO (SLOPED-LINES I))   T)(* \; "COPY.N")(CL:DEFUN XCL-USER::COPY.N.TEST (XCL-USER::USE-UFN)   "Tests a case of the COPY.N opcode. Both (COPY.N.TEST NIL) and (COPY.N.TEST T) should return :OK"   (CL:IF XCL-USER::USE-UFN       (PROGN ((OPCODES COPY)               2 1 :OK -1 -2)              (CL:FUNCALL (\\GETUFNENTRY 'COPY.N)                     4))       ((OPCODES COPY.N 4)        2 1 :OK -1 -2)))(DEFTEST (COPY.N :COMPILED)   (* |;;| "COPY.N  opcode")   (EQ :OK (XCL-USER::COPY.N.TEST)))(DEFTEST COPY.N-UFN   (EQ :OK (XCL-USER::COPY.N.TEST T)))(* \; "STORE.N")(CL:DEFUN XCL-USER::STORE.N.TEST (XCL-USER::USE-UFN)   "Tests a case of the STORE.N opcode. Both (STORE.N.TEST NIL) and (STORE.N.TEST T) should return the list (5 4 t 2 1)"   (CL:IF XCL-USER::USE-UFN       (PROGN ((OPCODES COPY)               5 4 3 2 1)              (CL:FUNCALL (\\GETUFNENTRY 'STORE.N)                     T 4))       ((OPCODES STORE.N 4)        5 4 3 2 1 T))   ((OPCODES APPLYFN)    5    'LIST))(DEFTEST (STORE.N :COMPILED)   (* |;;| "COPY.N  opcode")   (EQUAL '(5 4 T 2 1)          (XCL-USER::STORE.N.TEST)))(DEFTEST STORE.N-UFN   (* |;;| "STORE.N  opcode")   (EQUAL '(5 4 T 2 1)          (XCL-USER::STORE.N.TEST T)))(* \; "POP.N")(CL:DEFUN XCL-USER::POP.N.TEST (XCL-USER::USE-UFN)   "Tests a case of the STORE.N opcode. Both (POP.N.TEST NIL) and (POP.N.TEST T) should return 2"   (CL:IF XCL-USER::USE-UFN       (PROGN ((OPCODES COPY)               4 3 2 1 0)              (CL:FUNCALL (\\GETUFNENTRY 'POP.N)                     2))       ((OPCODES POP.N 2)        4 3 2 1 0)))(DEFTEST (POP.N :COMPILED)   (= 3 (XCL-USER::POP.N.TEST)))(DEFTEST POP.N-UFN   (= 3 (XCL-USER::POP.N.TEST T)))(* \; "UNWIND")(DEFTEST UNWIND-OFF-BY-1-A   (LET ((F CL:PI))        (EQUAL (LIST 'SUCCESS (PROGN (|for| C |in| (UNPACK F) |do| (PRIN1 C))                                     F))               '(SUCCESS 3.1415927))))(DEFTEST UNWIND-OFF-BY-1-B   (* |;;| "Make sure that UNWIND doesn't mung the binding for F during the for loop.")   (LET ((F CL:PI))        (|for| C |in| (UNPACK F) |do| (PRIN1 C))        (AND (FLOATP F)             (= F CL:PI))))(DEFINEQ(UNWINDTESTER
  (LAMBDA (DEPTH)                                        (* \; "Edited 16-Nov-88 18:00 by jds")
    (|for| D |from| 0 |to| (OR DEPTH 10)
       |do| (LET ((VALUE (UNWINDMAINTEST D (LOGAND D 7))))
                     (COND
                        ((NEQ VALUE 'SUCCESS)
                         (HELP "UNWINDMAINTEST did not return correctly" VALUE)))))
    T))(UNWINDMAINTEST
  (LAMBDA (DEPTH CODE)                                   (* \; "Edited 26-Sep-88 14:10 by bvm")
    (COND
       ((OR (NULL DEPTH)
            (LEQ DEPTH 0))
        (LET ((*B* 3)
              (*C* 2)
              (*D* DEPTH))
             (DECLARE (CL:SPECIAL *B* *C* *D*))
             (LIST (UNWINDCHECK1 DEPTH)
                   (LET ((*E* 10)
                         (*F* 11)
                         (*G* 12)
                         (*H* DEPTH))
                        (DECLARE (CL:SPECIAL *E* *F* *G* *H*))

                        (* |;;| "There are 8 pvar slots in this frame (for 7 pvars), so empty stack = 8+2 = 10.  Right now the stack depth is up to 13, because of two bind marks and the value returned from UNWINDCHECK1.")

                        (UNWINDCHECKFAIL T *B* *C* *D* *E* *F* 'PREVPREV 'PREVIOUS-VALUE
                               (PROGN                        (* \; 
                            "Unwind stack to depth 10 + {0,1,3,6} preserving tos when code is even")
                                      (SELECTQ CODE
                                          (0                 (* \; "Blow away whole stack")
                                             ((OPCODES UNWIND 10 0)))
                                          (1                 (* \; "Same as 0 but keep tos")
                                             ((OPCODES UNWIND 10 1)))
                                          (2                 (* \; "Blow away second binding only")
                                             ((OPCODES UNWIND 11 0)))
                                          (3                 (* \; "Same as 2 but keep tos")
                                             ((OPCODES UNWIND 11 1)))
                                          (4                 (* \; 
                                     "Don't touch the bindings, just get rid of some dynamic stuff")
                                             ((OPCODES UNWIND 13 0)))
                                          (5                 (* \; "Same as 4 but keep tos")
                                             ((OPCODES UNWIND 13 1)))
                                          (6                 (* \; 
                                     "Don't touch the bindings, just get rid of some dynamic stuff")
                                             ((OPCODES UNWIND 16 0)))
                                          ((OPCODES UNWIND 16 1))))
                               (PROGN                        (* \; 
                                     "Check that previous opcode left the stack in the right state")
                                      (UNWINDCHECK2 CODE)))))))
       (T                                                    (* \; 
                                 "Separate call so the compiler doesn't optimize out the recursion")
          (UNWINDMAINTEST.RECURSE (SUB1 DEPTH)
                 CODE)))))(UNWINDMAINTEST.RECURSE
  (LAMBDA (DEPTH CODE)                                   (* \; "Edited 26-Sep-88 14:08 by bvm")
    (UNWINDMAINTEST DEPTH CODE)))(UNWINDCHECK1
  (LAMBDA NIL                                            (* |bvm:| "21-Jul-86 13:15")
                                                             (* \; 
                                                "This just prevents compiler from merging specials")
    NIL))(UNWINDCHECK2
  (LAMBDA (CODE)                                         (* \; "Edited 26-Sep-88 14:10 by bvm")

(* |;;;| "Check that the UNWIND opcode executed prior to this did the right thing.  TOS should be PREVIOUS-VALUE if the UNWIND said to preserve TOS.")

    (LET* ((CALLER (\\MYALINK))
           (EOS (|fetch| (FX NEXTBLOCK) |of| CALLER))
           (GOODEOS (+ (|fetch| (FX FIRSTPVAR) |of| CALLER)
                       (UNFOLD (+ 10 (LOGAND CODE 1)
                                  (SELECTQ (LRSH CODE 1)
                                      (0 0)
                                      (1 1)
                                      (2 3)
                                      6))
                              WORDSPERCELL))))
          (COND
             ((NEQ EOS GOODEOS)
              (HELP (CONCAT (UNWINDCODE CODE)
                           " unwound stack "
                           (COND
                              ((GREATERP GOODEOS EOS)
                               "too far")
                              (T "not far enough"))
                           " by "
                           (ABS (DIFFERENCE EOS GOODEOS))
                           " words")))
             ((AND (ODDP CODE)
                   (NEQ (\\GETBASEPTR (ADDSTACKBASE (IDIFFERENCE EOS WORDSPERCELL))
                               0)
                        'PREVIOUS-VALUE))                    (* \; "Should have preserved tos")
              (HELP (UNWINDCODE CODE)
                    " did not preserve top of stack")))
          (|for| V |in| '(*B* *C* *D* *E* *F* *G* *H*) |bind| SHOULDBEUNBOUNDP
             |do| (SETQ SHOULDBEUNBOUNDP (SELECTQ (LRSH CODE 1)
                                                 (0 T)
                                                 (1 (FMEMB V '(*E* *F* *G* *H*)))
                                                 NIL))
                   (COND
                      ((\\FRAMESCAN CALLER (\\ATOMVALINDEX V))
                       (COND
                          (SHOULDBEUNBOUNDP (HELP (CONCAT (UNWINDCODE CODE)
                                                         " left variable " V 
                                                         " bound but shouldn't have")))))
                      ((NOT SHOULDBEUNBOUNDP)
                       (HELP (CONCAT (UNWINDCODE CODE)
                                    " left variable " V " unbound but shouldn't have")))))
          (PROGN 
                 (* |;;| "Escape from UNWINDMAINTEST because the UNWIND there has ruined its stack")

                 (RETFROM 'UNWINDMAINTEST 'SUCCESS)))))(UNWINDCODE
  (LAMBDA (CODE)                                         (* |bvm:| "21-Jul-86 15:34")
    (CONCAT "UNWIND." (PLUS 10 (LOGAND CODE 1))
           "."
           (LRSH CODE 1)))))(DECLARE\: EVAL@COMPILE DONTCOPY (DECLARE\: EVAL@COMPILE(BLOCKRECORD BINDMARKSLOT ((BINDMARKP FLAG)                               (NIL BITS 15))                              (BLOCKRECORD BINDMARKSLOT ((BINDNEGVALUES WORD)                                                         (BINDLASTPVAR WORD)))                              (ACCESSFNS BINDMARKSLOT ((BINDNVALUES (PROGN                                                              (* |Value| |stored| |in| |high|                                                            |half| |is| |one's| |complement|                                                            |of| |number| |of| |values| |bound|)                                                                           (LOGXOR (|fetch|                                                                                    BINDNEGVALUES                                                                                      |of| DATUM)                                                                                  65535))))))))(DEFINEQ(UW2.TEST
  (LAMBDA (DEPTH)                                    (* \; "Edited 20-Oct-88 15:00 by vanmelle")
    (COND
       ((OR (NULL DEPTH)
            (LEQ DEPTH 0))
        (UW2.TEST.MAIN))
       (T                                                    (* \; 
                                 "Separate call so the compiler doesn't optimize out the recursion")
          (UW2.RECURSE (SUB1 DEPTH))))))(UW2.RECURSE
  (LAMBDA (DEPTH)                                    (* \; "Edited 20-Oct-88 14:56 by vanmelle")
                                                             (* \; "To foil compiler")
    (UW2.TEST DEPTH)))(UW2.TEST.MAIN
  (LAMBDA (DEPTH)                                        (* \; "Edited 20-Oct-88 15:49 by bvm")
    (LET ((*B* 3)
          (*C* 2.4)
          (*D* DEPTH))
         (DECLARE (CL:SPECIAL *B* *C* *D*))
         (LIST (UW2.IDENTITY 'TOS)
               (LET ((*E* 3.5))
                    (DECLARE (CL:SPECIAL *E*))

                    (* |;;| "There are 4 pvar slots in this frame, so empty stack = 4+2 = 6.  Right now the stack depth is up to 9, because of 2 bind marks and the value from NILL.")

                    (UNWINDCHECKFAIL T NIL ((OPCODES UNWIND 9 0))
                           (UW2.CHECK)))))))(UW2.CHECK
  (LAMBDA NIL                                            (* \; "Edited 20-Oct-88 15:49 by bvm")

(* |;;;| "Check that the UNWIND opcode executed prior to this did the right thing.")

    (LET* ((CALLER (\\MYALINK))
           (EOS (|fetch| (FX NEXTBLOCK) |of| CALLER))
           (GOODEOS (+ (|fetch| (FX FIRSTPVAR) |of| CALLER)
                       (UNFOLD 9 WORDSPERCELL))))
          (COND
             ((NEQ EOS GOODEOS)
              (HELP (CONCAT "Unwound stack " (COND
                                                ((GREATERP GOODEOS EOS)
                                                 "too far")
                                                (T "not far enough"))
                           " by "
                           (ABS (DIFFERENCE EOS GOODEOS))
                           " words"))))
          (|for| V |in| '(*B* *C* *D* *E*) |bind| SHOULDBEUNBOUNDP
             |do| (SETQ SHOULDBEUNBOUNDP (AND NIL (EQ V '*E*)))
                   (COND
                      ((\\FRAMESCAN CALLER (\\ATOMVALINDEX V))
                       (COND
                          (SHOULDBEUNBOUNDP (HELP (CONCAT "UNWIND left variable " V 
                                                         " bound but shouldn't have")))))
                      ((NOT SHOULDBEUNBOUNDP)
                       (HELP (CONCAT "UNWIND left variable " V " unbound but shouldn't have")))))
          (PROGN 
                 (* |;;| "Escape from test because the UNWIND there has confused its stack")

                 (RETFROM 'UW2.TEST.MAIN 'SUCCESS)))))(UW2.IDENTITY
  (LAMBDA (X)                                            (* \; "Edited 20-Oct-88 15:19 by bvm")
                                                             (* \; 
                                                           "Identity compiler doesn't know about")
    X)))(DEFTEST (UNWIND :COMPILED)   (UNWINDTESTER))(DEFTEST (UNWIND-2 :COMPILED)   (FOR I FROM 0 TO 100 ALWAYS (EQ 'SUCCESS (UW2.TEST I))))(* \; "FINDKEY")(DEFINEQ(FINDKEYTESTER
  (LAMBDA NIL                                            (* |bvm:| "14-Jul-86 17:54")

(* |;;;| "Test the opcode FINDKEY")

    (DOFINDKEYTEST '|| 'VALA 'KEYB 'VALB 'KEYC 'VALC)))(DOFINDKEYTEST
  (LAMBDA KEYARGS                                        (* |bvm:| "21-Jul-86 16:37")
    (DECLARE (SPECVARS KEYARGS))
    (AND (FINDKEYCHECK 1 ||)
         (FINDKEYCHECK 2 ||)
         (FINDKEYCHECK 3 ||)
         (FINDKEYCHECK 4 ||)
         (FINDKEYCHECK 5 ||)
         (FINDKEYCHECK 6 ||)
         (FINDKEYCHECK 7 ||)
         (FINDKEYCHECK 8 ||)
         (FINDKEYCHECK 1 KEYB)
         (FINDKEYCHECK 2 KEYB)
         (FINDKEYCHECK 3 KEYB)
         (FINDKEYCHECK 4 KEYB)
         (FINDKEYCHECK 5 KEYB)
         (FINDKEYCHECK 6 KEYB)
         (FINDKEYCHECK 7 KEYB)
         (FINDKEYCHECK 8 KEYB)
         (FINDKEYCHECK 1 KEYC)
         (FINDKEYCHECK 2 KEYC)
         (FINDKEYCHECK 3 KEYC)
         (FINDKEYCHECK 4 KEYC)
         (FINDKEYCHECK 5 KEYC)
         (FINDKEYCHECK 6 KEYC)
         (FINDKEYCHECK 7 KEYC)
         (FINDKEYCHECK 8 KEYC))))(DOFINDKEYTEST1
  (LAMBDA (RESULT N KEY)                                 (* |bvm:| "21-Jul-86 16:37")
    (DECLARE (USEDFREE KEYARGS))
    (LET ((ANSWER (|for| I |from| N |by| 2 |to| KEYARGS
                     |when| (EQ KEY (ARG KEYARGS I)) |do| (RETURN (ADD1 I)))))
         (COND
            ((NEQ ANSWER RESULT)
             (HELP (CONCAT "FINDKEY." N " returned " RESULT " instead of " ANSWER " for ")
                   KEY))
            (T T))))))(DECLARE\: EVAL@COMPILE DONTCOPY (DECLARE\: EVAL@COMPILE (PUTPROPS FINDKEYCHECK DMACRO (DEFMACRO (N KEY) `(DOFINDKEYTEST1 ((OPCODES FINDKEY                                                                                     ,N)                                                                              ',KEY)                                                                ,N                                                                ',KEY)))))(DEFTEST (FINDKEY :COMPILED)   (FINDKEYTESTER))(* \; "RESTLIST")(DEFINEQ(\\RESTLIST.SPLICE.FRAME
  (LAMBDA NIL                                            (* |bvm:| "21-Jul-86 17:13")

(* |;;;| "If caller is fast, so its BF is contiguous with its caller's FX, then adjust pointers so that its first ivar goes back on it's caller's fx, and back up pc")

    (UNINTERRUPTABLY
        (LET ((CALLER (\\MYALINK))
              CALLER2 IVAR BF)
             (COND
                ((AND (|fetch| (FX FASTP) |of| CALLER)
                      (EQ (SETQ IVAR (|fetch| (BF IVAR) |of| (SETQ BF (|fetch|
                                                                               (FX DUMMYBF)
                                                                                 |of| CALLER))))
                          (|fetch| (FX NEXTBLOCK) |of| (SETQ CALLER2 (|fetch|
                                                                              (FX ALINK) |of|
                                                                                         CALLER)))))
                 (|replace| (BF IVAR) |of| BF |with| (|add| IVAR WORDSPERCELL))
                 (|replace| (FX NEXTBLOCK) |of| CALLER2 |with| IVAR)
                 (|add| (|fetch| (FX PC) |of| CALLER2)
                        -2)
                 T))))))(RESTLISTTESTER
  (LAMBDA NIL                                            (* |bvm:| "21-Jul-86 17:28")

(* |;;;| "Test the opcode RESTLIST")

    (AND (DORESTLISTTEST '|| 'VALA 'KEYB 'VALB 'KEYC 'VALC)
         (DORESTLISTTEST '(||)
                '(VALA)
                '(KEYB)
                'VALB
                '(KEYC)
                '(VALC))
         (DORESTLISTTEST)
         (\\COMPUTED.FORM (CONS 'DORESTLISTTEST (|for| I |from| 1 |to| 200
                                                   |collect| `',(LIST I)))))))(DORESTLISTTEST
  (LAMBDA KEYARGS                                        (* |bvm:| "21-Jul-86 16:39")
    (DECLARE (SPECVARS KEYARGS))
    (AND (RESTLISTCHECK 1)
         (RESTLISTCHECK 2)
         (RESTLISTCHECK 3)
         (RESTLISTCHECK 4)
         (RESTLISTCHECK 5)
         (RESTLISTCHECK 6)
         (RESTLISTCHECK 7)
         (RESTLISTCHECK 8))))(GETRESTARGREFCNTS
  (LAMBDA (N)
    (DECLARE (USEDFREE KEYARGS))                     (* |bvm:| "18-Jul-86 15:01")
    (|for| I |from| N |to| KEYARGS |collect| (\\REFCNT (ARG KEYARGS I)))))(DORESTLISTTEST1
  (LAMBDA (REFCNTS RESULT N)                             (* |bvm:| "21-Jul-86 17:22")
    (DECLARE (USEDFREE KEYARGS))
    (COND
       ((OR (NOT (EQLENGTH RESULT (IMAX (IDIFFERENCE KEYARGS (SUB1 N))
                                        0)))
            (|for| R |in| RESULT |as| I |from| N |to| KEYARGS
               |thereis| (NEQ R (ARG KEYARGS I))))
        (HELP (CONCAT "RESTLIST." N " returned " RESULT " instead of "
                     (|for| I |from| N |to| KEYARGS |collect| (ARG KEYARGS I))))))
    (|for| TAIL |on| RESULT |as| CNT |in| REFCNTS |as| I |from| 1
       |do| (COND
                   ((AND (NEQ (\\REFCNT (CAR TAIL))
                              (ADD1 CNT))
                         (NOT (|fetch| (MDSTYPEWORD NOREFCNT)
                                 |of| (\\ADDBASE |\\MDSTypeTable| (LRSH (|fetch| (POINTER
                                                                                          PAGE#)
                                                                               |of| (CAR TAIL))
                                                                            1)))))
                    (HELP (CONCAT "Ref cnt of " I "th RESTLIST element was not incremented")
                          (CONCAT "Was " CNT ", now is " (\\REFCNT (CAR TAIL)))))
                   ((NEQ (\\REFCNT TAIL)
                         (COND
                            ((EQ TAIL RESULT)
                             0)
                            (T 1)))
                    (HELP (COND
                             ((EQ TAIL RESULT)
                              "Ref cnt of RESTLIST value is not zero")
                             (T "Ref cnt of RESTLIST tail is not one"))
                          (\\REFCNT TAIL)))))
    T)))(RPAQ? RESTLISTCOUNTER 0)(DECLARE\: EVAL@COMPILE DONTCOPY (DECLARE\: EVAL@COMPILE (PUTPROPS RESTLISTCHECK DMACRO (DEFMACRO (N) `(PROGN (RECLAIM)                                                             (DORESTLISTTEST1                                                              (GETRESTARGREFCNTS ,N)                                                              ((OPCODES RESTLIST ,N)                                                               NIL KEYARGS)                                                              ,N))))(PUTPROPS \\COMPUTED.FORM MACRO (X (CONS 'PROGN (MAPCAR X (FUNCTION EVAL))))))(DECLARE\: EVAL@COMPILE(BLOCKRECORD MDSTYPEWORD ((NOREFCNT FLAG)                              (NIL BITS 15))))(DECLARE\: DOEVAL@COMPILE DONTCOPY(GLOBALVARS RESTLISTCOUNTER)))(DEFTEST (RESTLIST :COMPILED)   (RESTLISTTESTER))(* \; "Closure tests")(DEFINEQ(CLOSURETESTER
  (LAMBDA (DEPTH)                                        (* |bvm:| "21-Jul-86 16:40")
    (|for| D |from| 0 |to| (OR DEPTH CLOSURETEST.DEPTH) |always| (CLOSUREMAINTEST
                                                                                  D))))(CLOSUREMAINTEST
  (LAMBDA (DEPTH)                                        (* \; "Edited 16-Nov-88 18:01 by jds")
    (COND
       ((OR (NULL DEPTH)
            (LEQ DEPTH 0))
        (LET (VALUE)
             (PUTD 'CLOSUREFN4 (MAKE-COMPILED-CLOSURE (|fetch| (LITATOM DEFPOINTER)
                                                         |of| 'CLOSUREFN4CODE)
                                      CLOSURETEST.ENVIRONMENT))
             (COND
                ((NOT (EQUAL (SETQ VALUE (CL:FUNCALL (GETD 'CLOSUREFN1)
                                                'A
                                                'B
                                                'C))
                             (CLOSUREFN1VALUE 'A 'B 'C)))
                 (HELP "CLOSUREFN1 returned the wrong value" VALUE))
                ((NOT (EQUAL (SETQ VALUE (CL:FUNCALL (MAKE-COMPILED-CLOSURE (|fetch| (LITATOM
                                                                                          DEFPOINTER)
                                                                               |of| 'CLOSUREFN2)
                                                            CLOSURETEST.ENVIRONMENT)
                                                'A
                                                'B
                                                'C))
                             (CLOSUREFN2VALUE 'A 'B 'C)))
                 (HELP "CLOSUREFN2 returned the wrong value" VALUE))
                ((NOT (EQUAL (SETQ VALUE (CLOSUREFN4))
                             (CLOSUREFN4VALUE)))
                 (HELP "CLOSUREFN4 returned the wrong value" VALUE))
                (T T))))
       (T                                                    (* \; 
                                 "Separate call so the compiler doesn't optimize out the recursion")
          (CLOSUREMAINTEST.RECURSE (SUB1 DEPTH))))))(CLOSUREMAINTEST.RECURSE
  (LAMBDA (DEPTH)                                        (* |bvm:| "18-Jul-86 14:07")
    (CLOSUREMAINTEST DEPTH)))(CLOSUREFNCHECK
  (LAMBDA (CLOSUREP FUNCALLP)                            (* |bvm:| "18-Jul-86 14:48")
    (LET* ((CALLER (\\MYALINK))
           (PVAR0 (STACKADDBASE (|fetch| (FX FIRSTPVAR) |of| CALLER))))
          (COND
             (CLOSUREP (COND
                          ((NEQ (\\GETBASEPTR PVAR0 0)
                                CLOSURETEST.ENVIRONMENT)
                           (HELP (COND
                                    (FUNCALLP "FUNCALL of a full closure")
                                    (T "Call to symbol with Closure definition"))
                                 " did not store closure environment in pvar0"))))
             ((|fetch| (PVARSLOT BOUND) |of| PVAR0)
              (HELP "FUNCALL of a null closure stored something into pvar0"))))))(CLOSUREFNCHECK2
  (LAMBDA NIL                                            (* |bvm:| "18-Jul-86 14:51")
                                                             (* \; 
                                                           "Nothing really to check for now")
    NIL))(CLOSUREFN1
  (LAMBDA (ARG1 ARG2 ARG3 ARG4)                          (* |bvm:| "18-Jul-86 15:30")
                                                             (* \; 
                                                           "Vanilla closure called via FUNCALL")
    (CLOSUREFNCHECK NIL)
    (LET ((DUMMY1 T)
          (DUMMY2 NIL))
         (DECLARE (SPECVARS DUMMY1 DUMMY2))
         (CLOSUREFNCHECK2)
         (CLOSUREFN1VALUE ARG1 ARG2 ARG3 ARG4))))(CLOSUREFN1VALUE
  (LAMBDA (ARG1 ARG2 ARG3 ARG4)                          (* |bvm:| "18-Jul-86 15:30")
    (LIST ARG1 ARG2 ARG3 ARG4)))(CLOSUREFN2
  (LAMBDA (ARG1 ARG2 ARG3 ARG4)                          (* |bvm:| "18-Jul-86 15:37")
                                                             (* \; 
                                                           "Vanilla closure called via FUNCALL")
    (CLOSUREFNCHECK T T)
    (LET ((DUMMY1 T)
          (DUMMY2 NIL))
         (DECLARE (SPECVARS DUMMY1 DUMMY2))
         (CLOSUREFNCHECK2)
         (CLOSUREFN2VALUE ARG1 ARG2 ARG3 ARG4))))(CLOSUREFN2VALUE
  (LAMBDA (ARG1 ARG2 ARG3 ARG4)                          (* |bvm:| "18-Jul-86 15:37")
    (LIST ARG4 ARG3 ARG2 ARG1)))(CLOSUREFN4CODE
  (LAMBDA (ARG1 ARG2 ARG3)                               (* |bvm:| "18-Jul-86 15:53")
                                                             (* \; "closure called via FNx")
    (CLOSUREFNCHECK T NIL)
    (LET ((DUMMY1 T)
          (DUMMY2 NIL))
         (DECLARE (SPECVARS DUMMY1 DUMMY2))
         (CLOSUREFNCHECK2)
         (CLOSUREFN4VALUE ARG1 ARG2 ARG3))))(CLOSUREFN4VALUE
  (LAMBDA (ARG1 ARG2 ARG3)                               (* |bvm:| "18-Jul-86 15:38")
    (LIST ARG2 ARG3 ARG1))))(RPAQ? CLOSURETEST.DEPTH 50)(RPAQ? CLOSURETEST.ENVIRONMENT "Closure Environment")(DECLARE\: DOEVAL@COMPILE DONTCOPY(GLOBALVARS CLOSURETEST.DEPTH CLOSURETEST.ENVIRONMENT))(DEFTEST (CLOSURES :COMPILED)   (CLOSURETESTER))(* \; "Free-variable lookup")(DEFINEQ(FVARTEST0
(LAMBDA NIL (* \; "Edited  2-Aug-88 23:04 by FS") (SETTOPVAL (QUOTE TOPLEVEL1) 1) (SETTOPVAL (QUOTE TOPLEVEL2) 2) (SETTOPVAL (QUOTE NITERS) 3) (EQ (ITIMES NITERS 334) (FVARTEST1 100 200 4)))
)(FVARTEST1
(LAMBDA (IVAR1 IVAR2 DEPTH) (* \; "Edited  2-Aug-88 23:02 by FS") (* |;;| "Recurse DEPTH times and then call FVARTEST2 to test free variable lookup.") (LET (PVAR1) (* |;;| "This block is here so that name table scanning will find it, but must skip it.  PRINT so the compiler won't throw the block away.") (SETQ PVAR1 DEPTH) (PRINTOUT T "AT DEPTH " PVAR1 T)) (LET (PVAR1 PVAR2) (SETQ PVAR1 10) (SETQ PVAR2 20) (COND ((<= DEPTH 0) (FVARTEST2 4)) (T (FVARTEST1 IVAR1 IVAR2 (SUB1 DEPTH))))))
)(FVARTEST2
(LAMBDA (DEPTH) (* \; "Edited  2-Aug-88 22:56 by FS") (* |;;| "Recurse DEPTH times and then freely reference IVars, PVars, Globals.") (* |;;| "") (* |;;| "It needs to search past its own frames (the vars are unbound), and past FVARTEST1's frames for the globals.") (* |;;| "") (* |;;| "It will  find IVARx, PVARx in FVARTEST1's frames.") (* |;;| "") (* |;;| " Loop based on the freely referenced NITERS, to test FVAR  caching.") (PROG (NAMETBLE1 NAMETBLE2 TOTAL) (COND ((<= DEPTH 0) (SETQ TOTAL 0) (|for| I |from| 1 |to| NITERS |do| (SETQ TOTAL (+ TOTAL IVAR1 IVAR2 PVAR1 PVAR2 TOPLEVEL1 TOPLEVEL2 (FVARTEST3)))) (RETURN TOTAL)) (T (RETURN (FVARTEST2 (SUB1 DEPTH)))))))
)(FVARTEST3
(LAMBDA NIL (* \; "Edited  2-Aug-88 22:54 by FS") (* |;;| "Should find TOPLEVEL1 in FVARTEST2's frame (no way to test if this is really happening, but it should test a branch of the C code.") TOPLEVEL1)
))(DEFTEST FREE-VAR-LOOKUP   (FVARTEST0))(* \; "AREF opcode tests")(RPAQQ *NON-CONSTANT-FLOAT-1* 1.0)(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::AREF1-BIT "Opcode aref1, type (unsigned-byte 1)"   (LET* ((XCL-USER::ARRAY-1 (CL:MAKE-ARRAY 4 :ELEMENT-TYPE '(CL:UNSIGNED-BYTE 1)                                    :INITIAL-CONTENTS                                    '(0 1 0 1)))          (XCL-USER::ARRAY-2 (CL:MAKE-ARRAY 4 :ELEMENT-TYPE '(CL:UNSIGNED-BYTE 1)                                    :DISPLACED-TO XCL-USER::ARRAY-1)))         (XCL:WITH-COLLECTION (CL:DOTIMES (XCL-USER::I 4)                                  (XCL:COLLECT (CL:AREF XCL-USER::ARRAY-1 XCL-USER::I))                                  (XCL:COLLECT (CL:AREF XCL-USER::ARRAY-2 XCL-USER::I))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::AREF1-BYTE "Opcode aref1, type (unsigned-byte 8)"   (LET* ((XCL-USER::ARRAY-1 (CL:MAKE-ARRAY 5 :ELEMENT-TYPE '(CL:UNSIGNED-BYTE 8)                                    :INITIAL-CONTENTS                                    '(0 34 56 255 23)))          (XCL-USER::ARRAY-2 (CL:MAKE-ARRAY 5 :ELEMENT-TYPE '(CL:UNSIGNED-BYTE 8)                                    :DISPLACED-TO XCL-USER::ARRAY-1)))         (XCL:WITH-COLLECTION (CL:DOTIMES (XCL-USER::I 5)                                  (XCL:COLLECT (CL:AREF XCL-USER::ARRAY-1 XCL-USER::I))                                  (XCL:COLLECT (CL:AREF XCL-USER::ARRAY-2 XCL-USER::I))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::AREF1-WORD "Opcode aref1, type (unsigned-byte 16)"   (LET* ((XCL-USER::ARRAY-1 (CL:MAKE-ARRAY 5 :ELEMENT-TYPE '(CL:UNSIGNED-BYTE 16)                                    :INITIAL-CONTENTS                                    '(0 34 255 65535 23)))          (XCL-USER::ARRAY-2 (CL:MAKE-ARRAY 5 :ELEMENT-TYPE '(CL:UNSIGNED-BYTE 16)                                    :DISPLACED-TO XCL-USER::ARRAY-1)))         (XCL:WITH-COLLECTION (CL:DOTIMES (XCL-USER::I 5)                                  (XCL:COLLECT (CL:AREF XCL-USER::ARRAY-1 XCL-USER::I))                                  (XCL:COLLECT (CL:AREF XCL-USER::ARRAY-2 XCL-USER::I))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::AREF1-SIGNED-WORD "Opcode aref1, type (signed-byte 16)"   (LET ((CL:ARRAY (CL:MAKE-ARRAY 5 :ELEMENT-TYPE '(CL:SIGNED-BYTE 16)                          :INITIAL-CONTENTS                          '(0 -34 255 -32768 23))))        (XCL:WITH-COLLECTION (CL:DOTIMES (XCL-USER::I 5)                                 (XCL:COLLECT (CL:AREF CL:ARRAY XCL-USER::I))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::AREF1-FIXP "Opcode aref1, type (signed-byte 32)"   (LET ((CL:ARRAY (CL:MAKE-ARRAY 5 :ELEMENT-TYPE '(CL:SIGNED-BYTE 32)                          :INITIAL-CONTENTS                          '(0 -34 258 -65538 2147483647))))        (XCL:WITH-COLLECTION (CL:DOTIMES (XCL-USER::I 5)                                 (XCL:COLLECT (CL:AREF CL:ARRAY XCL-USER::I))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::AREF1-FLOATP "Opcode aref1, type single-float"   (LET ((CL:ARRAY (CL:MAKE-ARRAY 5 :ELEMENT-TYPE 'CL:SINGLE-FLOAT :INITIAL-CONTENTS                          '(0.0 -34.0 3.456756E+35 -5.768E-34 5.4524))))        (XCL:WITH-COLLECTION (CL:DOTIMES (XCL-USER::I 5)                                 (XCL:COLLECT (CL:AREF CL:ARRAY XCL-USER::I))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::AREF1-STRING-CHAR "Opcode aref1, type string-char"   (LET ((XCL-USER::ARRAY-1 (CL:MAKE-ARRAY 3 :ELEMENT-TYPE 'CL:STRING-CHAR :INITIAL-CONTENTS                                   '(#\Space #\a #\b)))         (XCL-USER::ARRAY-2 (CL:MAKE-ARRAY 3 :ELEMENT-TYPE 'CL:STRING-CHAR :FATP T :INITIAL-CONTENTS                                   '(#\Space #\Greek-0 #\Greek-32))))        (XCL:WITH-COLLECTION (CL:DOTIMES (XCL-USER::I 3)                                 (XCL:COLLECT (CL:AREF XCL-USER::ARRAY-1 XCL-USER::I))                                 (XCL:COLLECT (CL:AREF XCL-USER::ARRAY-2 XCL-USER::I))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::AREF1-POINTER "Opcode aref1, type t"   (LET* ((XCL-USER::LST (LIST 0 (CONS 'XCL-USER::A 'XCL-USER::B)                               (+ *NON-CONSTANT-FLOAT-1* 3.4)                               'XCL-USER::C                               (CONS 'XCL-USER::D 'XCL-USER::E)))          (CL:ARRAY (CL:MAKE-ARRAY 5 :ELEMENT-TYPE T :INITIAL-CONTENTS XCL-USER::LST)))         (XCL:WITH-COLLECTION (CL:DOTIMES (XCL-USER::I 5)                                  (XCL:COLLECT (CONS (CL:AREF CL:ARRAY XCL-USER::I)                                                     (\\REFCNT (CL:AREF CL:ARRAY XCL-USER::I))))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::AREF1-XPOINTER "Opcode aref1, type il:xpointer"   (LET* ((XCL-USER::LST (LIST 0 (CONS 'XCL-USER::A 'XCL-USER::B)                               (+ *NON-CONSTANT-FLOAT-1* 3.4)                               'XCL-USER::C                               (CONS 'XCL-USER::D 'XCL-USER::E)))          (* |;;| "The IL:*NON-CONSTANT-FLOAT-1* is there to prevent using a constant float and getting screwed by refcount.")          (CL:ARRAY (CL:MAKE-ARRAY 5 :ELEMENT-TYPE 'XPOINTER :INITIAL-CONTENTS XCL-USER::LST)))         (XCL:WITH-COLLECTION (CL:DOTIMES (XCL-USER::I 5)                                  (XCL:COLLECT (CONS (CL:AREF CL:ARRAY XCL-USER::I)                                                     (\\REFCNT (CL:AREF CL:ARRAY XCL-USER::I))))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::AREF1-PUNT "Opcode aref1, punt cases"   (LET* ((XCL-USER::ARRAY-1 (CL:MAKE-ARRAY 4 :ELEMENT-TYPE 'CL:STRING-CHAR :DISPLACED-TO                                    (CL:MAKE-ARRAY 4 :ELEMENT-TYPE 'CL:STRING-CHAR :INITIAL-CONTENTS                                           '(#\a #\b #\c #\d))))          (XCL-USER::ARRAY-2 (CL:MAKE-ARRAY 4 :ELEMENT-TYPE T :ADJUSTABLE T :INITIAL-CONTENTS                                    '(0 XCL-USER::A XCL-USER::B (XCL-USER::A . XCL-USER::B))))          (XCL-USER::ARRAY-3 (CL:MAKE-ARRAY 4 :ELEMENT-TYPE '(CL:UNSIGNED-BYTE 8)                                    :READ-ONLY-P T :INITIAL-CONTENTS '(0 1 2 3))))         (* |;;| "aref1 should punt on all these cases")         (XCL:WITH-COLLECTION (CL:DOTIMES (XCL-USER::I 4)                                  (XCL:COLLECT (CL:AREF XCL-USER::ARRAY-1 XCL-USER::I))                                  (XCL:COLLECT (CL:AREF XCL-USER::ARRAY-2 XCL-USER::I))                                  (XCL:COLLECT (CL:AREF XCL-USER::ARRAY-3 XCL-USER::I))))))(* |;;| "array-read and array-write ")(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::ARRAY-READ-BIT    "Opcode ARRAYREAD (MISC3 9), type (unsigned-byte 1)"   (CL:FLET ((XCL-USER::ARRAY-READ-BIT (XCL-USER::BASE XCL-USER::INDEX)                    ((OPCODES MISC3 9)                     XCL-USER::BASE 0 XCL-USER::INDEX)))          (LET ((XCL-USER::BASE (%MAKE-ARRAY-STORAGE 8 0)))               (\\PUTBASEBYTE XCL-USER::BASE 0 160)               (XCL:WITH-COLLECTION (CL:DOTIMES (XCL-USER::I 4)                                        (XCL:COLLECT (XCL-USER::ARRAY-READ-BIT XCL-USER::BASE                                                             XCL-USER::I)))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::ARRAY-READ-BYTE    "Opcode ARRAYREAD (MISC3 9), type (unsigned-byte 8)"   (CL:FLET ((XCL-USER::ARRAY-READ-BYTE (XCL-USER::BASE XCL-USER::INDEX)                    ((OPCODES MISC3 9)                     XCL-USER::BASE 3 XCL-USER::INDEX)))          (LET ((XCL-USER::BASE (%MAKE-ARRAY-STORAGE 4 3)))               (CL:DO ((XCL-USER::I 0 (CL:1+ XCL-USER::I))                       (XCL-USER::X '(0 23 255 4)                              (CDR XCL-USER::X)))                      ((EQ XCL-USER::I 4))                   (\\PUTBASEBYTE XCL-USER::BASE XCL-USER::I (CAR XCL-USER::X)))               (XCL:WITH-COLLECTION (CL:DOTIMES (XCL-USER::I 4)                                        (XCL:COLLECT (XCL-USER::ARRAY-READ-BYTE XCL-USER::BASE                                                             XCL-USER::I)))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::ARRAY-READ-WORD    "Opcode ARRAYREAD (MISC3 9), type (unsigned-byte 16)"   (CL:FLET ((XCL-USER::ARRAY-READ-WORD (XCL-USER::BASE XCL-USER::INDEX)                    ((OPCODES MISC3 9)                     XCL-USER::BASE 4 XCL-USER::INDEX)))          (LET ((XCL-USER::BASE (%MAKE-ARRAY-STORAGE 4 4)))               (CL:DO ((XCL-USER::I 0 (CL:1+ XCL-USER::I))                       (XCL-USER::X '(0 23 255 65535)                              (CDR XCL-USER::X)))                      ((EQ XCL-USER::I 4))                   (\\PUTBASE XCL-USER::BASE XCL-USER::I (CAR XCL-USER::X)))               (XCL:WITH-COLLECTION (CL:DOTIMES (XCL-USER::I 4)                                        (XCL:COLLECT (XCL-USER::ARRAY-READ-WORD XCL-USER::BASE                                                             XCL-USER::I)))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::ARRAY-READ-SIGNED-WORD    "Opcode ARRAYREAD (MISC3 9), type (signed-byte 16)"   (CL:FLET ((XCL-USER::ARRAY-READ-SIGNED-WORD (XCL-USER::BASE XCL-USER::INDEX)                    ((OPCODES MISC3 9)                     XCL-USER::BASE 20 XCL-USER::INDEX)))          (LET ((XCL-USER::BASE (%MAKE-ARRAY-STORAGE 4 20)))               (CL:DO ((XCL-USER::I 0 (CL:1+ XCL-USER::I))                       (XCL-USER::X '(0 -23 255 -32768)                              (CDR XCL-USER::X)))                      ((EQ XCL-USER::I 4))                   (\\PUTBASE XCL-USER::BASE XCL-USER::I (\\LOLOC (CAR XCL-USER::X))))               (XCL:WITH-COLLECTION (CL:DOTIMES (XCL-USER::I 4)                                        (XCL:COLLECT (XCL-USER::ARRAY-READ-SIGNED-WORD XCL-USER::BASE                                                            XCL-USER::I)))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::ARRAY-READ-FIXP    "Opcode ARRAYREAD (MISC3 9), type (signed-byte 32)"   (CL:FLET ((XCL-USER::ARRAY-READ-FIXP (XCL-USER::BASE XCL-USER::INDEX)                    ((OPCODES MISC3 9)                     XCL-USER::BASE 22 XCL-USER::INDEX)))          (LET ((XCL-USER::BASE (%MAKE-ARRAY-STORAGE 4 22)))               (CL:DO ((XCL-USER::I 0 (CL:1+ XCL-USER::I))                       (XCL-USER::X '(0 -23 65536 -2147483648)                              (CDR XCL-USER::X)))                      ((EQ XCL-USER::I 4))                   (\\PUTBASEFIXP XCL-USER::BASE (CL:ASH XCL-USER::I 1)                          (CAR XCL-USER::X)))               (XCL:WITH-COLLECTION (CL:DOTIMES (XCL-USER::I 4)                                        (XCL:COLLECT (XCL-USER::ARRAY-READ-FIXP XCL-USER::BASE                                                             XCL-USER::I)))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::ARRAY-READ-FLOATP    "Opcode ARRAYREAD (MISC3 9), type single-float"   (CL:FLET ((XCL-USER::ARRAY-READ-FLOATP (XCL-USER::BASE XCL-USER::INDEX)                    ((OPCODES MISC3 9)                     XCL-USER::BASE 54 XCL-USER::INDEX)))          (LET ((XCL-USER::BASE (%MAKE-ARRAY-STORAGE 4 54)))               (CL:DO ((XCL-USER::I 0 (CL:1+ XCL-USER::I))                       (XCL-USER::X '(0.0 -23.0 3.4456E+24 -4.562435E-12)                              (CDR XCL-USER::X)))                      ((EQ XCL-USER::I 4))                   (\\PUTBASEFLOATP XCL-USER::BASE (CL:ASH XCL-USER::I 1)                          (CAR XCL-USER::X)))               (XCL:WITH-COLLECTION (CL:DOTIMES (XCL-USER::I 4)                                        (XCL:COLLECT (XCL-USER::ARRAY-READ-FLOATP XCL-USER::BASE                                                             XCL-USER::I)))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::ARRAY-READ-THIN-CHAR    "Opcode ARRAYREAD (MISC3 9), type string-char"   (CL:FLET ((XCL-USER::ARRAY-READ-THIN-CHAR (XCL-USER::BASE XCL-USER::INDEX)                    ((OPCODES MISC3 9)                     XCL-USER::BASE 67 XCL-USER::INDEX)))          (LET ((XCL-USER::BASE (%MAKE-ARRAY-STORAGE 4 67)))               (CL:DO ((XCL-USER::I 0 (CL:1+ XCL-USER::I))                       (XCL-USER::X '(#\a #\b #\c #\A)                              (CDR XCL-USER::X)))                      ((EQ XCL-USER::I 4))                   (\\PUTBASEBYTE XCL-USER::BASE XCL-USER::I (CL:CHAR-CODE (CAR XCL-USER::X))))               (XCL:WITH-COLLECTION (CL:DOTIMES (XCL-USER::I 4)                                        (XCL:COLLECT (XCL-USER::ARRAY-READ-THIN-CHAR XCL-USER::BASE                                                             XCL-USER::I)))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::ARRAY-READ-FAT-CHAR    "Opcode ARRAYREAD (MISC3 9), type fat-string-char"   (CL:FLET ((XCL-USER::ARRAY-READ-FAT-CHAR (XCL-USER::BASE XCL-USER::INDEX)                    ((OPCODES MISC3 9)                     XCL-USER::BASE 68 XCL-USER::INDEX)))          (LET ((XCL-USER::BASE (%MAKE-ARRAY-STORAGE 4 68)))               (CL:DO ((XCL-USER::I 0 (CL:1+ XCL-USER::I))                       (XCL-USER::X '(#\a #\b #\c #\A)                              (CDR XCL-USER::X)))                      ((EQ XCL-USER::I 4))                   (\\PUTBASE XCL-USER::BASE XCL-USER::I (CL:CHAR-CODE (CAR XCL-USER::X))))               (XCL:WITH-COLLECTION (CL:DOTIMES (XCL-USER::I 4)                                        (XCL:COLLECT (XCL-USER::ARRAY-READ-FAT-CHAR XCL-USER::BASE                                                             XCL-USER::I)))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::ARRAY-READ-POINTER "Opcode ARRAYREAD (MISC3 9), type t"   (CL:FLET ((XCL-USER::ARRAY-READ-POINTER (XCL-USER::BASE XCL-USER::INDEX)                    ((OPCODES MISC3 9)                     XCL-USER::BASE 38 XCL-USER::INDEX)))          (LET ((XCL-USER::BASE (%MAKE-ARRAY-STORAGE 4 38)))               (CL:DO ((XCL-USER::I 0 (CL:1+ XCL-USER::I))                       (XCL-USER::X '(2 #\c 2.3 (XCL-USER::A . XCL-USER::B))                              (CDR XCL-USER::X)))                      ((EQ XCL-USER::I 4))                   (\\RPLPTR XCL-USER::BASE (CL:ASH XCL-USER::I 1)                          (CAR XCL-USER::X)))               (XCL:WITH-COLLECTION (CL:DOTIMES (XCL-USER::I 4)                                        (XCL:COLLECT (XCL-USER::ARRAY-READ-POINTER XCL-USER::BASE                                                             XCL-USER::I)))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::ARRAY-READ-XPOINTER    "Opcode ARRAYREAD (MISC3 9), type il:xpointer"   (CL:FLET ((XCL-USER::ARRAY-READ-XPOINTER (XCL-USER::BASE XCL-USER::INDEX)                    ((OPCODES MISC3 9)                     XCL-USER::BASE 86 XCL-USER::INDEX)))          (LET ((XCL-USER::BASE (%MAKE-ARRAY-STORAGE 4 86)))               (CL:DO ((XCL-USER::I 0 (CL:1+ XCL-USER::I))                       (XCL-USER::X '(2 #\c 2.3 (XCL-USER::A . XCL-USER::B))                              (CDR XCL-USER::X)))                      ((EQ XCL-USER::I 4))                   (\\PUTBASEPTR XCL-USER::BASE (CL:ASH XCL-USER::I 1)                          (CAR XCL-USER::X)))               (XCL:WITH-COLLECTION (CL:DOTIMES (XCL-USER::I 4)                                        (XCL:COLLECT (XCL-USER::ARRAY-READ-XPOINTER XCL-USER::BASE                                                             XCL-USER::I)))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::ARRAY-WRITE-BIT    "Opcode ARRAYWRITE (MISC4 7), type (unsigned-byte 1)"   (CL:FLET ((XCL-USER::ARRAY-WRITE-BIT (XCL-USER::NEW-VALUE XCL-USER::BASE XCL-USER::INDEX)                    ((OPCODES MISC4 7)                     XCL-USER::NEW-VALUE XCL-USER::BASE 0 XCL-USER::INDEX)))          (LET ((XCL-USER::BASE (%MAKE-ARRAY-STORAGE 8 0)))               (\\PUTBASEBYTE XCL-USER::BASE 0 160)               (XCL:WITH-COLLECTION (CL:DO ((XCL-USER::I 0 (CL:1+ XCL-USER::I))                                            (XCL-USER::X '(1 0 1 0)                                                   (CDR XCL-USER::X)))                                           ((EQ XCL-USER::I 4))                                        (XCL:COLLECT (XCL-USER::ARRAY-WRITE-BIT (CAR XCL-USER::X)                                                            XCL-USER::BASE XCL-USER::I)))                      (XCL:COLLECT (LET ((BYTE (\\GETBASEBYTE XCL-USER::BASE 0)))                                        (LIST (LDB (BYTE 1 7)                                                   BYTE)                                              (LDB (BYTE 1 6)                                                   BYTE)                                              (LDB (BYTE 1 5)                                                   BYTE)                                              (LDB (BYTE 1 4)                                                   BYTE))))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::ARRAY-WRITE-BYTE    "Opcode ARRAYWRITE (MISC4 7), type (unsigned-byte 8)"   (CL:FLET ((XCL-USER::ARRAY-WRITE-BYTE (XCL-USER::NEW-VALUE XCL-USER::BASE XCL-USER::INDEX)                    ((OPCODES MISC4 7)                     XCL-USER::NEW-VALUE XCL-USER::BASE 3 XCL-USER::INDEX)))          (LET ((XCL-USER::BASE (%MAKE-ARRAY-STORAGE 4 3)))               (XCL:WITH-COLLECTION (CL:DO ((XCL-USER::I 0 (CL:1+ XCL-USER::I))                                            (XCL-USER::X '(0 23 255 4)                                                   (CDR XCL-USER::X)))                                           ((EQ XCL-USER::I 4))                                        (XCL:COLLECT (XCL-USER::ARRAY-WRITE-BYTE (CAR XCL-USER::X)                                                            XCL-USER::BASE XCL-USER::I)))                      (XCL:COLLECT (XCL:WITH-COLLECTION (CL:DOTIMES (XCL-USER::I 4)                                                            (XCL:COLLECT (\\GETBASEBYTE                                                                                 XCL-USER::BASE                                                                                 XCL-USER::I)))))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::ARRAY-WRITE-WORD    "Opcode ARRAYWRITE (MISC4 7), type (unsigned-byte 16)"   (CL:FLET ((XCL-USER::ARRAY-WRITE-WORD (XCL-USER::NEW-VALUE XCL-USER::BASE XCL-USER::INDEX)                    ((OPCODES MISC4 7)                     XCL-USER::NEW-VALUE XCL-USER::BASE 4 XCL-USER::INDEX)))          (LET ((XCL-USER::BASE (%MAKE-ARRAY-STORAGE 4 4)))               (XCL:WITH-COLLECTION (CL:DO ((XCL-USER::I 0 (CL:1+ XCL-USER::I))                                            (XCL-USER::X '(0 23 255 65535)                                                   (CDR XCL-USER::X)))                                           ((EQ XCL-USER::I 4))                                        (XCL:COLLECT (XCL-USER::ARRAY-WRITE-WORD (CAR XCL-USER::X)                                                            XCL-USER::BASE XCL-USER::I)))                      (XCL:COLLECT (XCL:WITH-COLLECTION (CL:DOTIMES (XCL-USER::I 4)                                                            (XCL:COLLECT (\\GETBASE XCL-USER::BASE                                                                                 XCL-USER::I)))))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::ARRAY-WRITE-SIGNED-WORD    "Opcode ARRAYWRITE (MISC4 7), type (signed-byte 16)"   (CL:FLET ((XCL-USER::ARRAY-WRITE-SIGNED-WORD (XCL-USER::NEW-VALUE XCL-USER::BASE XCL-USER::INDEX)                    ((OPCODES MISC4 7)                     XCL-USER::NEW-VALUE XCL-USER::BASE 20 XCL-USER::INDEX)))          (LET ((XCL-USER::BASE (%MAKE-ARRAY-STORAGE 4 20)))               (XCL:WITH-COLLECTION (CL:DO ((XCL-USER::I 0 (CL:1+ XCL-USER::I))                                            (XCL-USER::X '(0 -23 255 -32768)                                                   (CDR XCL-USER::X)))                                           ((EQ XCL-USER::I 4))                                        (XCL:COLLECT (XCL-USER::ARRAY-WRITE-SIGNED-WORD (CAR                                                                                           XCL-USER::X                                                                                             )                                                            XCL-USER::BASE XCL-USER::I)))                      (XCL:COLLECT (XCL:WITH-COLLECTION (CL:DOTIMES (XCL-USER::I 4)                                                            (XCL:COLLECT (LET ((XCL-USER::WORD                                                                                (\\GETBASE                                                                                        XCL-USER::BASE                                                                                       XCL-USER::I)))                                                                              (CL:IF                                                                                   (> XCL-USER::WORD                                                                                      32767)                                                                                  (\\VAG2 15                                                                                        XCL-USER::WORD                                                                                         )                                                                                  XCL-USER::WORD)))))                             )))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::ARRAY-WRITE-FIXP    "Opcode ARRAYWRITE (MISC4 7), type (signed-byte 32)"   (CL:FLET ((XCL-USER::ARRAY-WRITE-FIXP (XCL-USER::NEW-VALUE XCL-USER::BASE XCL-USER::INDEX)                    ((OPCODES MISC4 7)                     XCL-USER::NEW-VALUE XCL-USER::BASE 22 XCL-USER::INDEX)))          (LET ((XCL-USER::BASE (%MAKE-ARRAY-STORAGE 4 22)))               (XCL:WITH-COLLECTION (CL:DO ((XCL-USER::I 0 (CL:1+ XCL-USER::I))                                            (XCL-USER::X '(0 -23 65536 -2147483648)                                                   (CDR XCL-USER::X)))                                           ((EQ XCL-USER::I 4))                                        (XCL:COLLECT (XCL-USER::ARRAY-WRITE-FIXP (CAR XCL-USER::X)                                                            XCL-USER::BASE XCL-USER::I)))                      (XCL:COLLECT (XCL:WITH-COLLECTION (CL:DOTIMES (XCL-USER::I 4)                                                            (XCL:COLLECT (\\GETBASEFIXP                                                                                 XCL-USER::BASE                                                                                (CL:ASH XCL-USER::I 1                                                                                       ))))))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::ARRAY-WRITE-FLOATP    "Opcode ARRAYWRITE (MISC4 7), type single-float"   (CL:FLET ((XCL-USER::ARRAY-WRITE-FLOATP (XCL-USER::NEW-VALUE XCL-USER::BASE XCL-USER::INDEX)                    ((OPCODES MISC4 7)                     XCL-USER::NEW-VALUE XCL-USER::BASE 54 XCL-USER::INDEX)))          (LET ((XCL-USER::BASE (%MAKE-ARRAY-STORAGE 4 54)))               (XCL:WITH-COLLECTION (CL:DO ((XCL-USER::I 0 (CL:1+ XCL-USER::I))                                            (XCL-USER::X '(0.0 -23.0 3.4456E+24 -4.562435E-12)                                                   (CDR XCL-USER::X)))                                           ((EQ XCL-USER::I 4))                                        (XCL:COLLECT (XCL-USER::ARRAY-WRITE-FLOATP (CAR XCL-USER::X)                                                            XCL-USER::BASE XCL-USER::I)))                      (XCL:COLLECT (XCL:WITH-COLLECTION (CL:DOTIMES (XCL-USER::I 4)                                                            (XCL:COLLECT (\\GETBASEFLOATP                                                                          XCL-USER::BASE                                                                          (CL:ASH XCL-USER::I 1))))))                      ))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::ARRAY-WRITE-THIN-CHAR    "Opcode ARRAYWRITE (MISC4 7), type thin-string-char"   (CL:FLET ((XCL-USER::ARRAY-WRITE-THIN-CHAR (XCL-USER::NEW-VALUE XCL-USER::BASE XCL-USER::INDEX)                    ((OPCODES MISC4 7)                     XCL-USER::NEW-VALUE XCL-USER::BASE 67 XCL-USER::INDEX)))          (LET ((XCL-USER::BASE (%MAKE-ARRAY-STORAGE 4 67)))               (XCL:WITH-COLLECTION (CL:DO ((XCL-USER::I 0 (CL:1+ XCL-USER::I))                                            (XCL-USER::X '(#\a #\b #\c #\A)                                                   (CDR XCL-USER::X)))                                           ((EQ XCL-USER::I 4))                                        (XCL:COLLECT (XCL-USER::ARRAY-WRITE-THIN-CHAR (CAR                                                                                           XCL-USER::X                                                                                           )                                                            XCL-USER::BASE XCL-USER::I)))                      (XCL:COLLECT (XCL:WITH-COLLECTION (CL:DOTIMES (XCL-USER::I 4)                                                            (XCL:COLLECT (CL:CODE-CHAR (\\GETBASEBYTE                                                                                                                                                                               XCL-USER::BASE                                                                                        XCL-USER::I))                                                                   ))))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::ARRAY-WRITE-FAT-CHAR    "Opcode ARRAYWRITE (MISC4 7), type fat-string-char"   (CL:FLET ((XCL-USER::ARRAY-WRITE-FAT-CHAR (XCL-USER::NEW-VALUE XCL-USER::BASE XCL-USER::INDEX)                    ((OPCODES MISC4 7)                     XCL-USER::NEW-VALUE XCL-USER::BASE 68 XCL-USER::INDEX)))          (LET ((XCL-USER::BASE (%MAKE-ARRAY-STORAGE 4 68)))               (XCL:WITH-COLLECTION (CL:DO ((XCL-USER::I 0 (CL:1+ XCL-USER::I))                                            (XCL-USER::X '(#\a #\b #\c #\A)                                                   (CDR XCL-USER::X)))                                           ((EQ XCL-USER::I 4))                                        (XCL:COLLECT (XCL-USER::ARRAY-WRITE-FAT-CHAR (CAR XCL-USER::X                                                                                          )                                                            XCL-USER::BASE XCL-USER::I)))                      (XCL:COLLECT (XCL:WITH-COLLECTION (CL:DOTIMES (XCL-USER::I 4)                                                            (XCL:COLLECT (CL:CODE-CHAR (\\GETBASE                                                                                                                                                                               XCL-USER::BASE                                                                                        XCL-USER::I))                                                                   ))))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::ARRAY-WRITE-POINTER    "Opcode ARRAYWRITE (MISC4 7), type t"   (CL:FLET ((XCL-USER::ARRAY-WRITE-POINTER (XCL-USER::NEW-VALUE XCL-USER::BASE XCL-USER::INDEX)                    ((OPCODES MISC4 7)                     XCL-USER::NEW-VALUE XCL-USER::BASE 38 XCL-USER::INDEX)))          (LET ((XCL-USER::BASE (%MAKE-ARRAY-STORAGE 4 38)))               (XCL:WITH-COLLECTION (CL:DO ((XCL-USER::I 0 (CL:1+ XCL-USER::I))                                            (XCL-USER::X (LIST 2 #\c 'XCL-USER::A (CONS 'XCL-USER::A                                                                                        'XCL-USER::B)                                                               )                                                   (CDR XCL-USER::X)))                                           ((EQ XCL-USER::I 4))                                        (XCL:COLLECT (XCL-USER::ARRAY-WRITE-POINTER (CAR XCL-USER::X)                                                            XCL-USER::BASE XCL-USER::I)))                      (XCL:COLLECT (XCL:WITH-COLLECTION                                    (CL:DOTIMES (XCL-USER::I 4)                                        (XCL:COLLECT (CONS (\\GETBASEPTR XCL-USER::BASE                                                                  (CL:ASH XCL-USER::I 1))                                                           (\\REFCNT (\\GETBASEPTR XCL-USER::BASE                                                                            (CL:ASH XCL-USER::I 1))))                                               ))))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::ARRAY-WRITE-XPOINTER    "Opcode ARRAYWRITE (MISC4 7), type il:xpointer"   (CL:FLET ((XCL-USER::ARRAY-WRITE-XPOINTER (XCL-USER::NEW-VALUE XCL-USER::BASE XCL-USER::INDEX)                    ((OPCODES MISC4 7)                     XCL-USER::NEW-VALUE XCL-USER::BASE 86 XCL-USER::INDEX)))          (LET ((XCL-USER::BASE (%MAKE-ARRAY-STORAGE 4 86)))               (XCL:WITH-COLLECTION (CL:DO ((XCL-USER::I 0 (CL:1+ XCL-USER::I))                                            (XCL-USER::X (LIST 2 #\c 'XCL-USER::A (CONS 'XCL-USER::A                                                                                        'XCL-USER::B)                                                               )                                                   (CDR XCL-USER::X)))                                           ((EQ XCL-USER::I 4))                                        (XCL:COLLECT (XCL-USER::ARRAY-WRITE-XPOINTER (CAR XCL-USER::X                                                                                          )                                                            XCL-USER::BASE XCL-USER::I)))                      (XCL:COLLECT (XCL:WITH-COLLECTION                                    (CL:DOTIMES (XCL-USER::I 4)                                        (XCL:COLLECT (CONS (\\GETBASEPTR XCL-USER::BASE                                                                  (CL:ASH XCL-USER::I 1))                                                           (\\REFCNT (\\GETBASEPTR XCL-USER::BASE                                                                            (CL:ASH XCL-USER::I 1))))                                               ))))))))(* |;;| "Boxed opcodes")(RPAQQ *NON-CONSTANT-T* T)(RPAQQ *NON-CONSTANT-0* 0)(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::INT+ "Opcodes IPLUS,FPLUS, and PLUS, both args integer"   (XCL:WITH-COLLECTION (CL:DOLIST (XCL-USER::X '(1 -3 -718120486 21845 -54))                            (CL:DOLIST (XCL-USER::Y '(1 -3 -718120486 21845 -54))                                (XCL:COLLECT (IPLUS XCL-USER::X XCL-USER::Y))                                (XCL:COLLECT (FPLUS XCL-USER::X XCL-USER::Y))                                (XCL:COLLECT (PLUS XCL-USER::X XCL-USER::Y))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::FLOAT+ "Opcodes IPLUS,FPLUS, and PLUS, both args float"   (LET ((XCL-USER::X 3.0))        (XCL:WITH-COLLECTION (CL:DOLIST (XCL-USER::Y '(1.0 -3.0 -3.4028235E+38 21845.0 -54.0))                                 (XCL:COLLECT (IPLUS XCL-USER::X XCL-USER::Y))                                 (XCL:COLLECT (FPLUS XCL-USER::X XCL-USER::Y))                                 (XCL:COLLECT (PLUS XCL-USER::X XCL-USER::Y))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::MIXED+ "Opcodes IPLUS,FPLUS, and PLUS, mixed args"   (LET ((XCL-USER::X 3.0))        (XCL:WITH-COLLECTION (CL:DOLIST (XCL-USER::Y '(1 -3 1/3 -718120486 21845 -54))                                 (XCL:COLLECT (IPLUS XCL-USER::X XCL-USER::Y))                                 (XCL:COLLECT (FPLUS XCL-USER::X XCL-USER::Y))                                 (XCL:COLLECT (PLUS XCL-USER::X XCL-USER::Y))))))(DEFTESTGROUP ERROR+   (DO-TEST T-FIRST (EXPECT-ERRORS (T)                           (+ *NON-CONSTANT-T* 3)))   (DO-TEST T-SECOND (EXPECT-ERRORS (T)                            (+ 3 *NON-CONSTANT-T*))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::INT-    "Opcodes IDIFFERENCE,FDIFFERENCE, and DIFFERENCE, both args integer"   (LET ((XCL-USER::X 3))        (XCL:WITH-COLLECTION (CL:DOLIST (XCL-USER::Y '(1 3 -718120486 21845 -54))                                 (XCL:COLLECT (IDIFFERENCE XCL-USER::X XCL-USER::Y))                                 (XCL:COLLECT (FDIFFERENCE XCL-USER::X XCL-USER::Y))                                 (XCL:COLLECT (DIFFERENCE XCL-USER::X XCL-USER::Y))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::FLOAT-    "Opcodes IDIFFERENCE,FDIFFERENCE, and DIFFERENCE, both args float"   (LET ((XCL-USER::X 3.0))        (XCL:WITH-COLLECTION (CL:DOLIST (XCL-USER::Y '(1.0 3.0 3.4028235E+38 21845.0 -54.0))                                 (XCL:COLLECT (IDIFFERENCE XCL-USER::X XCL-USER::Y))                                 (XCL:COLLECT (FDIFFERENCE XCL-USER::X XCL-USER::Y))                                 (XCL:COLLECT (DIFFERENCE XCL-USER::X XCL-USER::Y))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::MIXED-    "Opcodes IDIFFERENCE,FDIFFERENCE, and DIFFERENCE, mixed args"   (LET ((XCL-USER::X 3.0))        (XCL:WITH-COLLECTION (CL:DOLIST (XCL-USER::Y '(1 3 1/3 -718120486 21845 -54))                                 (XCL:COLLECT (IDIFFERENCE XCL-USER::X XCL-USER::Y))                                 (XCL:COLLECT (FDIFFERENCE XCL-USER::X XCL-USER::Y))                                 (XCL:COLLECT (DIFFERENCE XCL-USER::X XCL-USER::Y))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::INT*    "Opcodes ITIMES,FTIMES, and TIMES, both args integer"   (LET ((XCL-USER::X 3))        (XCL:WITH-COLLECTION (CL:DOLIST (XCL-USER::Y '(45 345235424 0 23 21845))                                 (XCL:COLLECT (ITIMES XCL-USER::X XCL-USER::Y))                                 (XCL:COLLECT (FTIMES XCL-USER::X XCL-USER::Y))                                 (XCL:COLLECT (TIMES XCL-USER::X XCL-USER::Y))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::FLOAT*    "Opcodes ITIMES,FTIMES, and TIMES, both args float"   (LET ((XCL-USER::X 3.0))        (XCL:WITH-COLLECTION (CL:DOLIST (XCL-USER::Y '(45.0 0.0 1.1342745E+38 -21845.0))                                 (XCL:COLLECT (ITIMES XCL-USER::X XCL-USER::Y))                                 (XCL:COLLECT (FTIMES XCL-USER::X XCL-USER::Y))                                 (XCL:COLLECT (TIMES XCL-USER::X XCL-USER::Y))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::MIXED* "Opcodes ITIMES,FTIMES, and TIMES, mixed args"   (LET ((XCL-USER::X 3.0))        (XCL:WITH-COLLECTION (CL:DOLIST (XCL-USER::Y '(45 1/3 345235424 0 23 21845))                                 (XCL:COLLECT (ITIMES XCL-USER::X XCL-USER::Y))                                 (XCL:COLLECT (FTIMES XCL-USER::X XCL-USER::Y))                                 (XCL:COLLECT (TIMES XCL-USER::X XCL-USER::Y))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::INT/    "Opcodes IQUOTIENT,FQUOTIENT, and QUOTIENT, both args integer"   (LET ((XCL-USER::X 21845))        (XCL:WITH-COLLECTION (CL:DOLIST (XCL-USER::Y '(21845 1 345235424 -45))                                 (XCL:COLLECT (IQUOTIENT XCL-USER::X XCL-USER::Y))                                 (XCL:COLLECT (FQUOTIENT XCL-USER::X XCL-USER::Y))                                 (XCL:COLLECT (QUOTIENT XCL-USER::X XCL-USER::Y))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::FLOAT/    "Opcodes IQUOTIENT,FQUOTIENT, and QUOTIENT, both args float"   (LET ((XCL-USER::X 21845.0))        (XCL:WITH-COLLECTION (CL:DOLIST (XCL-USER::Y '(21845.0 1.0 -3.4523542E+8 45.0 3.4028235E+38))                                 (XCL:COLLECT (IQUOTIENT XCL-USER::X XCL-USER::Y))                                 (XCL:COLLECT (FQUOTIENT XCL-USER::X XCL-USER::Y))                                 (XCL:COLLECT (QUOTIENT XCL-USER::X XCL-USER::Y))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::MIXED/    "Opcodes IQUOTIENT,FQUOTIENT, and QUOTIENT, args mixed"   (LET ((XCL-USER::X 21845.0))        (XCL:WITH-COLLECTION (CL:DOLIST (XCL-USER::Y '(21845 1 4/3 -1345619432 45))                                 (XCL:COLLECT (IQUOTIENT XCL-USER::X XCL-USER::Y))                                 (XCL:COLLECT (FQUOTIENT XCL-USER::X XCL-USER::Y))                                 (XCL:COLLECT (QUOTIENT XCL-USER::X XCL-USER::Y))))))(DEFTESTGROUP ERROR/T   (DO-TEST T-DIVISOR (EXPECT-ERRORS (T)                             (/ 34 *NON-CONSTANT-T*)))   (DO-TEST T-NUMERATOR (EXPECT-ERRORS (T)                               (/ *NON-CONSTANT-T* 34))))(DEFTEST ERROR/0   (EXPECT-ERRORS (T)          (/ 34 *NON-CONSTANT-0*)))(DEFTEST NO-ERROR-0/0   (/ *NON-CONSTANT-0* *NON-CONSTANT-0*))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::INT>    "Opcodes IGREATERP,FGREATERP, and GREATERP, both args integer"   (LET ((XCL-USER::X 21845))        (XCL:WITH-COLLECTION (CL:DOLIST (XCL-USER::Y '(21845 -45 345235424 22000))                                 (XCL:COLLECT (IGREATERP XCL-USER::X XCL-USER::Y))                                 (XCL:COLLECT (FGREATERP XCL-USER::X XCL-USER::Y))                                 (XCL:COLLECT (GREATERP XCL-USER::X XCL-USER::Y))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::FLOAT>    "Opcodes IGREATERP,FGREATERP, and GREATERP, both args integer"   (LET ((XCL-USER::X 21845.0))        (XCL:WITH-COLLECTION (CL:DOLIST (XCL-USER::Y '(21845.0 -45.0 3.4523542E+8 22000.0))                                 (XCL:COLLECT (IGREATERP XCL-USER::X XCL-USER::Y))                                 (XCL:COLLECT (FGREATERP XCL-USER::X XCL-USER::Y))                                 (XCL:COLLECT (GREATERP XCL-USER::X XCL-USER::Y))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::MIXED>    "Opcodes IGREATERP,FGREATERP, and GREATERP, both args integer"   (LET ((XCL-USER::X 21845.0))        (XCL:WITH-COLLECTION (CL:DOLIST (XCL-USER::Y '(21845 1/3 -45 1203490358 22000))                                 (XCL:COLLECT (IGREATERP XCL-USER::X XCL-USER::Y))                                 (XCL:COLLECT (FGREATERP XCL-USER::X XCL-USER::Y))                                 (XCL:COLLECT (GREATERP XCL-USER::X XCL-USER::Y))))))(* |;;| "Unboxed opcodes [scalar]")(* |;;| "Ubfloat1")(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::BOX "Opcode BOX (UBFLOAT1 0)"   (XCL:WITH-COLLECTION (CL:DOLIST (XCL-USER::X '((16256 . 0)                                                  (0 . 0)                                                  (49716 . 0)                                                  (26309 . 45156)))                            (XCL:COLLECT (\\FLOATBOX (\\VAG2 (CAR XCL-USER::X)                                                            (CDR XCL-USER::X)))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::UNBOX "Opcode UNBOX (UBFLOAT1 1)"   (XCL:WITH-COLLECTION (CL:DOLIST (XCL-USER::X '(1.0 0.0 -45.0 4.6678E+23))                            (LET ((XCL-USER::Y (\\FLOATUNBOX XCL-USER::X)))                                 (XCL:COLLECT (CONS (\\HILOC XCL-USER::Y)                                                    (\\LOLOC XCL-USER::Y)))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::UBABS "Opcode UFABS (UBFLOAT1 2)"   (CL:FLET ((XCL-USER::UBABS (XCL-USER::X)                    (\\FLOATBOX ((OPCODES UBFLOAT1 2)                                 (\\FLOATUNBOX XCL-USER::X)))))          (XCL:WITH-COLLECTION (CL:DOLIST (XCL-USER::X '(-1.0 0.0 -45.0 4.6678E+23))                                   (XCL:COLLECT (XCL-USER::UBABS XCL-USER::X))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::UBNEGATE "Opcode UFNEGATE (UBFLOAT1 3)"   (CL:FLET ((XCL-USER::UBNEGATE (XCL-USER::X)                    (\\FLOATBOX ((OPCODES UBFLOAT1 3)                                 (\\FLOATUNBOX XCL-USER::X)))))          (XCL:WITH-COLLECTION (CL:DOLIST (XCL-USER::X '(-1.0 0.0 -45.0 4.6678E+23))                                   (XCL:COLLECT (XCL-USER::UBNEGATE XCL-USER::X))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::UBFIX "Opcode UFIX (UBFLOAT1 4)"   (CL:FLET ((XCL-USER::UBFIX (XCL-USER::X)                    ((OPCODES UBFLOAT1 4)                     (\\FLOATUNBOX XCL-USER::X))))          (XCL:WITH-COLLECTION (CL:DOLIST (XCL-USER::X '(-1.0 0.0 -45.0 4.6678E+23))                                   (XCL:COLLECT (XCL-USER::UBFIX XCL-USER::X))))))(* |;;| "Ubfloat2")(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::UB+ "Opcode UFADD (UBFLOAT2 0)"   (CL:FLET ((XCL-USER::UB+ (XCL-USER::X XCL-USER::Y)                    (\\FLOATBOX ((OPCODES UBFLOAT2 0)                                 (\\FLOATUNBOX XCL-USER::X)                                 (\\FLOATUNBOX XCL-USER::Y)))))          (LET ((XCL-USER::X 3.0))               (XCL:WITH-COLLECTION (CL:DOLIST (XCL-USER::Y '(1.0 -3.0 -3.4028235E+38 21845.0 3))                                        (XCL:COLLECT (XCL-USER::UB+ XCL-USER::X XCL-USER::Y)))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::UB- "Opcode UFSUB (UBFLOAT2 1)"   (CL:FLET ((XCL-USER::UB- (XCL-USER::X XCL-USER::Y)                    (\\FLOATBOX (                                 (* |;;| "ub -")                                 (OPCODES UBFLOAT2 1)                                 (\\FLOATUNBOX XCL-USER::X)                                 (\\FLOATUNBOX XCL-USER::Y)))))          (LET ((XCL-USER::X 3.0))               (XCL:WITH-COLLECTION (CL:DOLIST (XCL-USER::Y '(1.0 3.0 3.4028235E+38 21845 1/3 -54.0))                                        (XCL:COLLECT (XCL-USER::UB- XCL-USER::X XCL-USER::Y)))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::UB* "Opcode UFMULT (UBFLOAT2 3)"   (CL:FLET ((XCL-USER::UB* (XCL-USER::X XCL-USER::Y)                    (\\FLOATBOX ((OPCODES UBFLOAT2 3)                                 (\\FLOATUNBOX XCL-USER::X)                                 (\\FLOATUNBOX XCL-USER::Y)))))          (LET ((XCL-USER::X 3.0))               (XCL:WITH-COLLECTION (CL:DOLIST (XCL-USER::Y '(45.0 0.0 1.1342745E+38 -21845.0))                                        (XCL:COLLECT (XCL-USER::UB* XCL-USER::X XCL-USER::Y)))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::UB/ "Opcode UFDIV (UBFLOAT2 4)"   (CL:FLET ((XCL-USER::UB/ (XCL-USER::X XCL-USER::Y)                    (\\FLOATBOX ((OPCODES UBFLOAT2 4)                                 (\\FLOATUNBOX XCL-USER::X)                                 (\\FLOATUNBOX XCL-USER::Y)))))          (LET ((XCL-USER::X 21845.0))               (XCL:WITH-COLLECTION (CL:DOLIST (XCL-USER::Y '(0.001 1.0 -3.4523542E+8 45.0                                                                     3.4028235E+38))                                        (XCL:COLLECT (XCL-USER::UB/ XCL-USER::X XCL-USER::Y)))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::UB> "Opcode UFGREAT (UBFLOAT2 5)"   (CL:FLET ((XCL-USER::UB> (XCL-USER::X XCL-USER::Y)                    ((OPCODES UBFLOAT2 5)                     (\\FLOATUNBOX XCL-USER::X)                     (\\FLOATUNBOX XCL-USER::Y))))          (LET ((XCL-USER::X 21845.0))               (XCL:WITH-COLLECTION (CL:DOLIST (XCL-USER::Y '(21845.0 -45.0 3.4523542E+8 0.001))                                        (XCL:COLLECT (XCL-USER::UB> XCL-USER::X XCL-USER::Y)))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::UBMAX "Opcode UFMAX (UBFLOAT2 6)"   (CL:FLET ((XCL-USER::UBMAX (XCL-USER::X XCL-USER::Y)                    (\\FLOATBOX ((OPCODES UBFLOAT2 6)                                 (\\FLOATUNBOX XCL-USER::X)                                 (\\FLOATUNBOX XCL-USER::Y)))))          (LET ((XCL-USER::X 21845.0))               (XCL:WITH-COLLECTION (CL:DOLIST (XCL-USER::Y '(21845.0 -45.0 3.4523542E+8 0.001))                                        (XCL:COLLECT (XCL-USER::UBMAX XCL-USER::X XCL-USER::Y)))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::UBMIN "Opcode UFMAX (UBFLOAT2 7)"   (CL:FLET ((XCL-USER::UBMIN (XCL-USER::X XCL-USER::Y)                    (\\FLOATBOX ((OPCODES UBFLOAT2 7)                                 (\\FLOATUNBOX XCL-USER::X)                                 (\\FLOATUNBOX XCL-USER::Y)))))          (LET ((XCL-USER::X 21845.0))               (XCL:WITH-COLLECTION (CL:DOLIST (XCL-USER::Y '(21845.0 -45.0 3.4523542E+8 0.001))                                        (XCL:COLLECT (XCL-USER::UBMIN XCL-USER::X XCL-USER::Y)))))))(* |;;| "Ubfloat3")(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::POLY "Opcode POLY (UBFLOAT3 0)"   (CL:FLET ((XCL-USER::POLY (XCL-USER::X XCL-USER::BASE XCL-USER::SIZE)                    (\\FLOATBOX ((OPCODES UBFLOAT3 0)                                 (\\FLOATUNBOX XCL-USER::X)                                 XCL-USER::BASE XCL-USER::SIZE))))          (LET* ((CL:ARRAY (CL:MAKE-ARRAY 4 :ELEMENT-TYPE 'CL:SINGLE-FLOAT :INITIAL-CONTENTS                                  '(1.0 2.0 3.0 4.0)))                 (XCL-USER::BASE (%ARRAY-BASE CL:ARRAY)))                (XCL:WITH-COLLECTION (CL:DOLIST (XCL-USER::PAIR '((1.0 . 3)                                                                  (1.0 . 1)                                                                  (3.5 . 3)))                                         (XCL:COLLECT (XCL-USER::POLY (CAR XCL-USER::PAIR)                                                             XCL-USER::BASE                                                             (CDR XCL-USER::PAIR))))))))(* |;;| "Transcendentals --- stress test")(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::SIN-TEST "Function SIN"   (XCL:WITH-COLLECTION (CL:DOLIST (XCL-USER::X '(0.0 1/3 -1.2 12.6))                            (XCL:COLLECT (CL:SIN (CL:* CL:PI XCL-USER::X))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::COS-TEST "Function COS"   (XCL:WITH-COLLECTION (CL:DOLIST (XCL-USER::X '(0.0 1/3 -1.2 12.6))                            (XCL:COLLECT (CL:COS (CL:* CL:PI XCL-USER::X))))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::EXP-TEST "Function EXP"   (XCL:WITH-COLLECTION (CL:DOLIST (XCL-USER::X '(1.0 20.5 1/3 -5.2))                            (XCL:COLLECT (CL:EXP XCL-USER::X)))))(XCL-USER::DEFINE-VERIFIED-TEST XCL-USER::LOG-TEST "Function LOG"   (XCL:WITH-COLLECTION (CL:DOLIST (XCL-USER::X '(2.7182817 -2.0 453.78))                            (XCL:COLLECT (CL:LOG XCL-USER::X)))))(DECLARE\: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS (ADDTOVAR NLAMA )(ADDTOVAR NLAML )(ADDTOVAR LAMA DORESTLISTTEST DOFINDKEYTEST))(PUTPROPS OPCODES.TEST COPYRIGHT ("ENVOS Corporation" 1988 2020))(DECLARE\: DONTCOPY  (FILEMAP (NIL (6938 13254 (SIMULATE-PILOTBITBLT 6938 . 13254)) (13256 13469 (BUMP 13256 . 13469)) (13471 15758 (SLOPED-LINES 13471 . 15758)) (15760 20318 (DIAGONALS 15760 . 20318)) (20319 20730 (ADDR-IN-RANGE 20329 . 20728)) (21188 21559 (XCL-USER::COPY.N.TEST 21188 . 21559)) (21755 22184 (XCL-USER::STORE.N.TEST 21755 . 22184)) (22462 22819 (XCL-USER::POP.N.TEST 22462 . 22819)) (23441 30209 (UNWINDTESTER 23451 . 23857) (UNWINDMAINTEST 23859 . 26867) (UNWINDMAINTEST.RECURSE 26869 . 27038) (UNWINDCHECK1 27040 . 27338) (UNWINDCHECK2 27340 . 30005) (UNWINDCODE 30007 . 30207)) (31285 34544 (UW2.TEST 31295 . 31726) (UW2.RECURSE 31728 . 31967) (UW2.TEST.MAIN 31969 . 32626) (UW2.CHECK 32628 . 34236) (UW2.IDENTITY 34238 . 34542)) (34733 36338 (FINDKEYTESTER 34743 . 34957) (DOFINDKEYTEST 34959 . 35839) (DOFINDKEYTEST1 35841 . 36336)) (36892 41281 (\\RESTLIST.SPLICE.FRAME 36902 . 38236) (RESTLISTTESTER 38238 . 38812) (DORESTLISTTEST 38814 . 39183) (GETRESTARGREFCNTS 39185 . 39406) (DORESTLISTTEST1 39408 . 41279)) (42211 47553 (CLOSURETESTER 42221 . 42523) (CLOSUREMAINTEST 42525 . 44452) (CLOSUREMAINTEST.RECURSE 44454 . 44610) (CLOSUREFNCHECK 44612 . 45415) (CLOSUREFNCHECK2 45417 . 45711) (CLOSUREFN1 45713 . 46202) (CLOSUREFN1VALUE 46204 . 46351) (CLOSUREFN2 46353 . 46842) (CLOSUREFN2VALUE 46844 . 46991) (CLOSUREFN4CODE 46993 . 47407) (CLOSUREFN4VALUE 47409 . 47551)) (47833 49467 (FVARTEST0 47843 . 48050) (FVARTEST1 48052 . 48556) (FVARTEST2 48558 . 49244) (FVARTEST3 49246 . 49465)))))STOP