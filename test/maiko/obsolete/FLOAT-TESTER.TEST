;;; File converted on 14-Jun-88 11:17:15 from source float-tester
;;; Original source {qv}<pedersen>lisp>float-tester.;9 created 14-Jun-88 11:10:38

;;; Copyright (c) 1988 by Xerox Corporation



;; Boxed opcodes


(do-test "Opcodes IPLUS,FPLUS, and PLUS, both args integer"
       (equal '(4 4.0 4 0 0.0 0 9834756987357 9.834757E+12 9834756987357 21848 21848.0 21848 -51 
                  -51.0 -51)
              (let ((x 3))
                   (with-collection (dolist (y '(1 -3 9834756987354 21845 -54))
                                        (collect (il:iplus x y))
                                        (collect (il:fplus x y))
                                        (collect (il:plus x y)))))))

(do-test "Opcodes IPLUS,FPLUS, and PLUS, both args float"
       (equal '(4 4.0 4.0 0 0.0 0.0 -340282346638528859811704183484516925437 -3.4028235E+38 
                  -3.4028235E+38 21848 21848.0 21848.0 -51 -51.0 -51.0)
              (let ((x 3.0))
                   (with-collection (dolist (y '(1.0 -3.0 -3.4028235E+38 21845.0 -54.0))
                                        (collect (il:iplus x y))
                                        (collect (il:fplus x y))
                                        (collect (il:plus x y)))))))

(do-test "Opcodes IPLUS,FPLUS, and PLUS, mixed args"
       (equal '(4 4.0 4.0 0 0.0 0.0 3 3.3333333 3.3333333 9834756987357 9.834757E+12 9.834757E+12 
                  21848 21848.0 21848.0 -51 -51.0 -51.0)
              (let ((x 3.0))
                   (with-collection (dolist (y '(1 -3 1/3 9834756987354 21845 -54))
                                        (collect (il:iplus x y))
                                        (collect (il:fplus x y))
                                        (collect (il:plus x y)))))))

(do-test "Opcodes IDIFFERENCE,FDIFFERENCE, and DIFFERENCE, both args integer"
       (equal '(2 2.0 2 0 0.0 0 -9834756987351 -9.834757E+12 -9834756987351 -21842 -21842.0 -21842 57
                  57.0 57)
              (let ((x 3))
                   (with-collection (dolist (y '(1 3 9834756987354 21845 -54))
                                        (collect (il:idifference x y))
                                        (collect (il:fdifference x y))
                                        (collect (il:difference x y)))))))

(do-test "Opcodes IDIFFERENCE,FDIFFERENCE, and DIFFERENCE, both args float"
       (equal '(2 2.0 2.0 0 0.0 0.0 -340282346638528859811704183484516925437 -3.4028235E+38 
                  -3.4028235E+38 -21842 -21842.0 -21842.0 57 57.0 57.0)
              (let ((x 3.0))
                   (with-collection (dolist (y '(1.0 3.0 3.4028235E+38 21845.0 -54.0))
                                        (collect (il:idifference x y))
                                        (collect (il:fdifference x y))
                                        (collect (il:difference x y)))))))

(do-test "Opcodes IDIFFERENCE,FDIFFERENCE, and DIFFERENCE, mixed args"
       (equal '(2 2.0 2.0 0 0.0 0.0 3 2.6666667 2.6666667 -9834756987351 -9.834757E+12 -9.834757E+12
                  -21842 -21842.0 -21842.0 57 57.0 57.0)
              (let ((x 3.0))
                   (with-collection (dolist (y '(1 3 1/3 9834756987354 21845 -54))
                                        (collect (il:idifference x y))
                                        (collect (il:fdifference x y))
                                        (collect (il:difference x y)))))))

(do-test "Opcodes ITIMES,FTIMES, and TIMES, both args integer"
       (equal '(135 135.0 135 1035706272 1.03570624E+9 1035706272 0 0.0 0 69 69.0 69 65535 65535.0 
                    65535)
              (let ((x 3))
                   (with-collection (dolist (y '(45 345235424 0 23 21845))
                                        (collect (il:itimes x y))
                                        (collect (il:ftimes x y))
                                        (collect (il:times x y)))))))

(do-test "Opcodes ITIMES,FTIMES, and TIMES, both args float"
       (equal '(135 135.0 135.0 0 0.0 0.0 340282346638528859811704183484516925440 3.4028235E+38 
                    3.4028235E+38 -65535 -65535.0 -65535.0)
              (let ((x 3.0))
                   (with-collection (dolist (y '(45.0 0.0 1.1342745E+38 -21845.0))
                                        (collect (il:itimes x y))
                                        (collect (il:ftimes x y))
                                        (collect (il:times x y)))))))

(do-test "Opcodes ITIMES,FTIMES, and TIMES, mixed args"
       (equal '(135 135.0 135.0 0 1.0 1.0 1035706272 1.03570624E+9 1.03570624E+9 0 0.0 0.0 69 69.0 
                    69.0 65535 65535.0 65535.0)
              (let ((x 3.0))
                   (with-collection (dolist (y '(45 1/3 345235424 0 23 21845))
                                        (collect (il:itimes x y))
                                        (collect (il:ftimes x y))
                                        (collect (il:times x y)))))))

(do-test "Opcodes IQUOTIENT,FQUOTIENT, and QUOTIENT, both args integer"
       (equal '(1 1.0 1 21845 21845.0 21845 0 6.3275664E-5 0 -485 -485.44446 -485)
              (let ((x 21845))
                   (with-collection (dolist (y '(21845 1 345235424 -45))
                                        (collect (il:iquotient x y))
                                        (collect (il:fquotient x y))
                                        (collect (il:quotient x y)))))))

(do-test "Opcodes IQUOTIENT,FQUOTIENT, and QUOTIENT, both args float"
       (equal '(1 1.0 1.0 21845 21845.0 21845.0 0 -6.3275664E-5 -6.3275664E-5 485 485.44446 485.44446
                  0 6.419669E-35 6.419669E-35)
              (let ((x 21845.0))
                   (with-collection (dolist (y '(21845.0 1.0 -3.4523542E+8 45.0 3.4028235E+38))
                                        (collect (il:iquotient x y))
                                        (collect (il:fquotient x y))
                                        (collect (il:quotient x y)))))))

(do-test "Opcodes IQUOTIENT,FQUOTIENT, and QUOTIENT, args mixed"
       (equal '(1 1.0 1.0 21845 21845.0 21845.0 21845 16383.75 16383.75 0 -1.6234158E-5 -1.6234158E-5
                  485 485.44446 485.44446)
              (let ((x 21845.0))
                   (with-collection (dolist (y '(21845 1 4/3 -1345619432 45))
                                        (collect (il:iquotient x y))
                                        (collect (il:fquotient x y))
                                        (collect (il:quotient x y)))))))

(do-test "Opcodes IGREATERP,FGREATERP, and GREATERP, both args integer"
       (equal '(nil nil nil t t t nil nil nil nil nil nil)
              (let ((x 21845))
                   (with-collection (dolist (y '(21845 -45 345235424 22000))
                                        (collect (il:igreaterp x y))
                                        (collect (il:fgreaterp x y))
                                        (collect (il:greaterp x y)))))))

(do-test "Opcodes IGREATERP,FGREATERP, and GREATERP, both args integer"
       (equal '(nil nil nil t t t nil nil nil nil nil nil)
              (let ((x 21845.0))
                   (with-collection (dolist (y '(21845.0 -45.0 3.4523542E+8 22000.0))
                                        (collect (il:igreaterp x y))
                                        (collect (il:fgreaterp x y))
                                        (collect (il:greaterp x y)))))))

(do-test "Opcodes IGREATERP,FGREATERP, and GREATERP, both args integer"
       (equal '(nil nil nil t t t t t t nil nil nil nil nil nil)
              (let ((x 21845.0))
                   (with-collection (dolist (y '(21845 1/3 -45 5498457654 22000))
                                        (collect (il:igreaterp x y))
                                        (collect (il:fgreaterp x y))
                                        (collect (il:greaterp x y)))))))


;; Unboxed opcodes [scalar]



;; Ubfloat1


(do-test "Opcode BOX (UBFLOAT1 0)" (equal '(1.0 0.0 -45.0 4.6678E+23)
                                          (with-collection (dolist (x '((16256 . 0)
                                                                        (0 . 0)
                                                                        (49716 . 0)
                                                                        (26309 . 45156)))
                                                               (collect (il:\\floatbox
                                                                         (il:\\vag2 (car x)
                                                                                (cdr x))))))))

(do-test "Opcode UNBOX (UBFLOAT1 1)" (equal '((16256 . 0)
                                              (0 . 0)
                                              (49716 . 0)
                                              (26309 . 45156))
                                            (with-collection (dolist (x '(1.0 0.0 -45.0 4.6678E+23))
                                                                 (let ((y (il:\\floatunbox x)))
                                                                      (collect (cons (il:\\hiloc
                                                                                      y)
                                                                                     (il:\\loloc
                                                                                      y))))))))

(do-test "Opcode UFABS (UBFLOAT1 2)" (equal '(1.0 0.0 45.0 4.6678E+23)
                                            (flet ((ubabs (x)
                                                          (il:\\floatbox ((il:opcodes il:ubfloat1 2)
                                                                          (il:\\floatunbox x)))))
                                                  (with-collection (dolist (x '(-1.0 0.0 -45.0 
                                                                                     4.6678E+23))
                                                                       (collect (ubabs x)))))))

(do-test "Opcode UFNEGATE (UBFLOAT1 3)"
       (equal '(1.0 0.0 45.0 -4.6678E+23)
              (flet ((ubnegate (x)
                            (il:\\floatbox ((il:opcodes il:ubfloat1 3)
                                            (il:\\floatunbox x)))))
                    (with-collection (dolist (x '(-1.0 0.0 -45.0 4.6678E+23))
                                         (collect (ubnegate x)))))))

(do-test "Opcode UFIX (UBFLOAT1 4)" (equal '(-1 0 -45 466780014920848390488064)
                                           (flet ((ubfix (x)
                                                         ((il:opcodes il:ubfloat1 4)
                                                          (il:\\floatunbox x))))
                                                 (with-collection (dolist (x '(-1.0 0.0 -45.0 
                                                                                    4.6678E+23))
                                                                      (collect (ubfix x)))))))


;; Ubfloat2


(do-test "Opcode UFADD (UBFLOAT2 0)"
       (equal '(4.0 0.0 -3.4028235E+38 21848.0 6.0)
              (flet ((ub+ (x y)
                          (il:\\floatbox ((il:opcodes il:ubfloat2 0)
                                          (il:\\floatunbox x)
                                          (il:\\floatunbox y)))))
                    (let ((x 3.0))
                         (with-collection (dolist (y '(1.0 -3.0 -3.4028235E+38 21845.0 3))
                                              (collect (ub+ x y))))))))

(do-test "Opcode UFSUB (UBFLOAT2 1)"
       (equal '(2.0 0.0 -3.4028235E+38 -21842.0 2.6666667 57.0)
              (flet ((ub- (x y)
                          (il:\\floatbox (
                                          ;; ub -
                                          (il:opcodes il:ubfloat2 1)
                                          (il:\\floatunbox x)
                                          (il:\\floatunbox y)))))
                    (let ((x 3.0))
                         (with-collection (dolist (y '(1.0 3.0 3.4028235E+38 21845 1/3 -54.0))
                                              (collect (ub- x y))))))))

(do-test "Opcode UFMULT (UBFLOAT2 3)"
       (equal '(135.0 0.0 3.4028235E+38 -65535.0)
              (flet ((ub* (x y)
                          (il:\\floatbox ((il:opcodes il:ubfloat2 3)
                                          (il:\\floatunbox x)
                                          (il:\\floatunbox y)))))
                    (let ((x 3.0))
                         (with-collection (dolist (y '(45.0 0.0 1.1342745E+38 -21845.0))
                                              (collect (ub* x y))))))))

(do-test "Opcode UFDIV (UBFLOAT2 4)"
       (equal '(2.1844998E+7 21845.0 -6.3275664E-5 485.44446 6.419669E-35)
              (flet ((ub/ (x y)
                          (il:\\floatbox ((il:opcodes il:ubfloat2 4)
                                          (il:\\floatunbox x)
                                          (il:\\floatunbox y)))))
                    (let ((x 21845.0))
                         (with-collection (dolist (y '(0.001 1.0 -3.4523542E+8 45.0 3.4028235E+38))
                                              (collect (ub/ x y))))))))

(do-test "Opcode UFGREAT (UBFLOAT2 5)"
       (equal '(nil t nil t)
              (flet ((ub> (x y)
                          ((il:opcodes il:ubfloat2 5)
                           (il:\\floatunbox x)
                           (il:\\floatunbox y))))
                    (let ((x 21845.0))
                         (with-collection (dolist (y '(21845.0 -45.0 3.4523542E+8 0.001))
                                              (collect (ub> x y))))))))

(do-test "Opcode UFMAX (UBFLOAT2 6)"
       (equal '(21845.0 21845.0 3.4523542E+8 21845.0)
              (flet ((ubmax (x y)
                            (il:\\floatbox ((il:opcodes il:ubfloat2 6)
                                            (il:\\floatunbox x)
                                            (il:\\floatunbox y)))))
                    (let ((x 21845.0))
                         (with-collection (dolist (y '(21845.0 -45.0 3.4523542E+8 0.001))
                                              (collect (ubmax x y))))))))

(do-test "Opcode UFMAX (UBFLOAT2 7)"
       (equal '(21845.0 -45.0 21845.0 0.001)
              (flet ((ubmin (x y)
                            (il:\\floatbox ((il:opcodes il:ubfloat2 7)
                                            (il:\\floatunbox x)
                                            (il:\\floatunbox y)))))
                    (let ((x 21845.0))
                         (with-collection (dolist (y '(21845.0 -45.0 3.4523542E+8 0.001))
                                              (collect (ubmin x y))))))))


;; Ubfloat3


(do-test "Opcode POLY (UBFLOAT3 0)" (equal '(10.0 3.0 81.875)
                                           (flet ((poly (x base size)
                                                        (il:\\floatbox ((il:opcodes il:ubfloat3 0)
                                                                        (il:\\floatunbox x)
                                                                        base size))))
                                                 (let* ((array (make-array 4 :element-type
                                                                      'single-float :initial-contents
                                                                      '(1.0 2.0 3.0 4.0)))
                                                        (base (il:%array-base array)))
                                                       (with-collection
                                                        (dolist (pair '((1.0 . 3)
                                                                        (1.0 . 1)
                                                                        (3.5 . 3)))
                                                            (collect (poly (car pair)
                                                                           base
                                                                           (cdr pair)))))))))


;; Transcendentals --- stress test


(do-test "Function SIN" (equal '(0.0 0.86602545 0.5877855 0.95105624)
                               (with-collection (dolist (x '(0.0 1/3 -1.2 12.6))
                                                    (collect (sin (* pi x)))))))

(do-test "Function COS" (equal '(1.0 0.50000006 -0.8090168 -0.30901712)
                               (with-collection (dolist (x '(0.0 1/3 -1.2 12.6))
                                                    (collect (cos (* pi x)))))))

(do-test "Function EXP" (equal '(2.7182817 7.9990234E+8 1.3956126 0.0055165673)
                               (with-collection (dolist (x '(1.0 20.5 1/3 -5.2))
                                                    (collect (exp x))))))

(do-test "Function LOG" (equal '(1.0 #C(0.6931472 3.1415927) 6.1176124)
                               (with-collection (dolist (x '(2.7182817 -2.0 453.78))
                                                    (collect (log x))))))
